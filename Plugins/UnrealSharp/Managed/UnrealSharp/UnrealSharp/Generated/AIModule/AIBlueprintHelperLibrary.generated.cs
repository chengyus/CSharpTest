// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AIModule;

[UClass]
public partial class AIHelperLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static AIHelperLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AIBlueprintHelperLibrary");
        
        
        UnlockAIResourcesWithAnimation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UnlockAIResourcesWithAnimation");
        UnlockAIResourcesWithAnimation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UnlockAIResourcesWithAnimation_NativeFunction);
        UnlockAIResourcesWithAnimation_AnimInstance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnlockAIResourcesWithAnimation_NativeFunction, "AnimInstance");
        UnlockAIResourcesWithAnimation_bUnlockMovement_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnlockAIResourcesWithAnimation_NativeFunction, "bUnlockMovement");
        UnlockAIResourcesWithAnimation_UnlockAILogic_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnlockAIResourcesWithAnimation_NativeFunction, "UnlockAILogic");
        SpawnAIFromClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SpawnAIFromClass");
        SpawnAIFromClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SpawnAIFromClass_NativeFunction);
        SpawnAIFromClass_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnAIFromClass_NativeFunction, "WorldContextObject");
        SpawnAIFromClass_PawnClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnAIFromClass_NativeFunction, "PawnClass");
        SpawnAIFromClass_BehaviorTree_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnAIFromClass_NativeFunction, "BehaviorTree");
        SpawnAIFromClass_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnAIFromClass_NativeFunction, "Location");
        SpawnAIFromClass_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnAIFromClass_NativeFunction, "Rotation");
        SpawnAIFromClass_bNoCollisionFail_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnAIFromClass_NativeFunction, "bNoCollisionFail");
        SpawnAIFromClass_Owner_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnAIFromClass_NativeFunction, "Owner");
        SpawnAIFromClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnAIFromClass_NativeFunction, "ReturnValue");
        SimpleMoveToLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SimpleMoveToLocation");
        SimpleMoveToLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SimpleMoveToLocation_NativeFunction);
        SimpleMoveToLocation_Controller_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SimpleMoveToLocation_NativeFunction, "Controller");
        SimpleMoveToLocation_Goal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SimpleMoveToLocation_NativeFunction, "Goal");
        SimpleMoveToActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SimpleMoveToActor");
        SimpleMoveToActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SimpleMoveToActor_NativeFunction);
        SimpleMoveToActor_Controller_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SimpleMoveToActor_NativeFunction, "Controller");
        SimpleMoveToActor_Goal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SimpleMoveToActor_NativeFunction, "Goal");
        SendAIMessage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SendAIMessage");
        SendAIMessage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SendAIMessage_NativeFunction);
        SendAIMessage_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SendAIMessage_NativeFunction, "Target");
        SendAIMessage_Message_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SendAIMessage_NativeFunction, "Message");
        SendAIMessage_MessageSource_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SendAIMessage_NativeFunction, "MessageSource");
        SendAIMessage_bSuccess_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SendAIMessage_NativeFunction, "bSuccess");
        LockAIResourcesWithAnimation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LockAIResourcesWithAnimation");
        LockAIResourcesWithAnimation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LockAIResourcesWithAnimation_NativeFunction);
        LockAIResourcesWithAnimation_AnimInstance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LockAIResourcesWithAnimation_NativeFunction, "AnimInstance");
        LockAIResourcesWithAnimation_bLockMovement_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LockAIResourcesWithAnimation_NativeFunction, "bLockMovement");
        LockAIResourcesWithAnimation_LockAILogic_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LockAIResourcesWithAnimation_NativeFunction, "LockAILogic");
        IsValidAIRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValidAIRotation");
        IsValidAIRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValidAIRotation_NativeFunction);
        IsValidAIRotation_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidAIRotation_NativeFunction, "Rotation");
        IsValidAIRotation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidAIRotation_NativeFunction, "ReturnValue");
        IsValidAILocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValidAILocation");
        IsValidAILocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValidAILocation_NativeFunction);
        IsValidAILocation_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidAILocation_NativeFunction, "Location");
        IsValidAILocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidAILocation_NativeFunction, "ReturnValue");
        IsValidAIDirection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValidAIDirection");
        IsValidAIDirection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValidAIDirection_NativeFunction);
        IsValidAIDirection_DirectionVector_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidAIDirection_NativeFunction, "DirectionVector");
        IsValidAIDirection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidAIDirection_NativeFunction, "ReturnValue");
        GetNextNavLinkIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNextNavLinkIndex");
        GetNextNavLinkIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNextNavLinkIndex_NativeFunction);
        GetNextNavLinkIndex_Controller_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNextNavLinkIndex_NativeFunction, "Controller");
        GetNextNavLinkIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNextNavLinkIndex_NativeFunction, "ReturnValue");
        GetCurrentPathPoints_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentPathPoints");
        GetCurrentPathPoints_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentPathPoints_NativeFunction);
        GetCurrentPathPoints_Controller_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentPathPoints_NativeFunction, "Controller");
        GetCurrentPathPoints_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentPathPoints_NativeFunction, "ReturnValue");
        GetCurrentPathPoints_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetCurrentPathPoints_NativeFunction, "ReturnValue");
        GetCurrentPathIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentPathIndex");
        GetCurrentPathIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentPathIndex_NativeFunction);
        GetCurrentPathIndex_Controller_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentPathIndex_NativeFunction, "Controller");
        GetCurrentPathIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentPathIndex_NativeFunction, "ReturnValue");
        GetCurrentPath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentPath");
        GetCurrentPath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentPath_NativeFunction);
        GetCurrentPath_Controller_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentPath_NativeFunction, "Controller");
        GetCurrentPath_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentPath_NativeFunction, "ReturnValue");
        GetBlackboard_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBlackboard");
        GetBlackboard_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBlackboard_NativeFunction);
        GetBlackboard_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBlackboard_NativeFunction, "Target");
        GetBlackboard_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBlackboard_NativeFunction, "ReturnValue");
        GetAIController_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAIController");
        GetAIController_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAIController_NativeFunction);
        GetAIController_ControlledActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAIController_NativeFunction, "ControlledActor");
        GetAIController_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAIController_NativeFunction, "ReturnValue");
        
        
    }
    
    protected AIHelperLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AIModule.AIBlueprintHelperLibrary:UnlockAIResourcesWithAnimation
    static readonly IntPtr UnlockAIResourcesWithAnimation_NativeFunction;
    static readonly int UnlockAIResourcesWithAnimation_ParamsSize;
    static readonly int UnlockAIResourcesWithAnimation_AnimInstance_Offset;
    static readonly int UnlockAIResourcesWithAnimation_bUnlockMovement_Offset;
    static readonly int UnlockAIResourcesWithAnimation_UnlockAILogic_Offset;
    
    public static void UnlockAIResourcesWithAnimation(UnrealSharp.Engine.AnimInstance animInstance, bool bUnlockMovement, bool unlockAILogic)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UnlockAIResourcesWithAnimation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimInstance>.ToNative(IntPtr.Add(ParamsBuffer, UnlockAIResourcesWithAnimation_AnimInstance_Offset), 0, null, animInstance);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, UnlockAIResourcesWithAnimation_bUnlockMovement_Offset), 0, null, bUnlockMovement);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, UnlockAIResourcesWithAnimation_UnlockAILogic_Offset), 0, null, unlockAILogic);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, UnlockAIResourcesWithAnimation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AIModule.AIBlueprintHelperLibrary:SpawnAIFromClass
    static readonly IntPtr SpawnAIFromClass_NativeFunction;
    static readonly int SpawnAIFromClass_ParamsSize;
    static readonly int SpawnAIFromClass_WorldContextObject_Offset;
    static readonly int SpawnAIFromClass_PawnClass_Offset;
    static readonly int SpawnAIFromClass_BehaviorTree_Offset;
    static readonly int SpawnAIFromClass_Location_Offset;
    static readonly int SpawnAIFromClass_Rotation_Offset;
    static readonly int SpawnAIFromClass_bNoCollisionFail_Offset;
    static readonly int SpawnAIFromClass_Owner_Offset;
    static readonly int SpawnAIFromClass_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.Pawn SpawnAIFromClass(UnrealSharp.CoreUObject.Object worldContextObject, SubclassOf<UnrealSharp.Engine.Pawn> pawnClass, UnrealSharp.AIModule.BehaviorTree behaviorTree, System.DoubleNumerics.Vector3 location, UnrealSharp.Rotator rotation, bool bNoCollisionFail = false, UnrealSharp.Engine.Actor owner = default(UnrealSharp.Engine.Actor))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SpawnAIFromClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SpawnAIFromClass_WorldContextObject_Offset), 0, null, worldContextObject);
            SubclassOfMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(ParamsBuffer, SpawnAIFromClass_PawnClass_Offset), 0, null, pawnClass);
            ObjectMarshaller<UnrealSharp.AIModule.BehaviorTree>.ToNative(IntPtr.Add(ParamsBuffer, SpawnAIFromClass_BehaviorTree_Offset), 0, null, behaviorTree);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SpawnAIFromClass_Location_Offset), 0, null, location);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SpawnAIFromClass_Rotation_Offset), 0, null, rotation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SpawnAIFromClass_bNoCollisionFail_Offset), 0, null, bNoCollisionFail);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, SpawnAIFromClass_Owner_Offset), 0, null, owner);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SpawnAIFromClass_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Pawn returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(ParamsBuffer, SpawnAIFromClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.AIBlueprintHelperLibrary:SimpleMoveToLocation
    static readonly IntPtr SimpleMoveToLocation_NativeFunction;
    static readonly int SimpleMoveToLocation_ParamsSize;
    static readonly int SimpleMoveToLocation_Controller_Offset;
    static readonly int SimpleMoveToLocation_Goal_Offset;
    
    public static void SimpleMoveToLocation(UnrealSharp.Engine.Controller controller, System.DoubleNumerics.Vector3 goal)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SimpleMoveToLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, SimpleMoveToLocation_Controller_Offset), 0, null, controller);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SimpleMoveToLocation_Goal_Offset), 0, null, goal);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SimpleMoveToLocation_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/AIModule.AIBlueprintHelperLibrary:SimpleMoveToActor
    static readonly IntPtr SimpleMoveToActor_NativeFunction;
    static readonly int SimpleMoveToActor_ParamsSize;
    static readonly int SimpleMoveToActor_Controller_Offset;
    static readonly int SimpleMoveToActor_Goal_Offset;
    
    public static void SimpleMoveToActor(UnrealSharp.Engine.Controller controller, UnrealSharp.Engine.Actor goal)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SimpleMoveToActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, SimpleMoveToActor_Controller_Offset), 0, null, controller);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, SimpleMoveToActor_Goal_Offset), 0, null, goal);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SimpleMoveToActor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AIModule.AIBlueprintHelperLibrary:SendAIMessage
    static readonly IntPtr SendAIMessage_NativeFunction;
    static readonly int SendAIMessage_ParamsSize;
    static readonly int SendAIMessage_Target_Offset;
    static readonly int SendAIMessage_Message_Offset;
    static readonly int SendAIMessage_MessageSource_Offset;
    static readonly int SendAIMessage_bSuccess_Offset;
    
    public static void SendAIMessage(UnrealSharp.Engine.Pawn target, Name message, UnrealSharp.CoreUObject.Object messageSource, bool bSuccess = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SendAIMessage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(ParamsBuffer, SendAIMessage_Target_Offset), 0, null, target);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SendAIMessage_Message_Offset), 0, null, message);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SendAIMessage_MessageSource_Offset), 0, null, messageSource);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SendAIMessage_bSuccess_Offset), 0, null, bSuccess);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SendAIMessage_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AIModule.AIBlueprintHelperLibrary:LockAIResourcesWithAnimation
    static readonly IntPtr LockAIResourcesWithAnimation_NativeFunction;
    static readonly int LockAIResourcesWithAnimation_ParamsSize;
    static readonly int LockAIResourcesWithAnimation_AnimInstance_Offset;
    static readonly int LockAIResourcesWithAnimation_bLockMovement_Offset;
    static readonly int LockAIResourcesWithAnimation_LockAILogic_Offset;
    
    public static void LockAIResourcesWithAnimation(UnrealSharp.Engine.AnimInstance animInstance, bool bLockMovement, bool lockAILogic)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LockAIResourcesWithAnimation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimInstance>.ToNative(IntPtr.Add(ParamsBuffer, LockAIResourcesWithAnimation_AnimInstance_Offset), 0, null, animInstance);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LockAIResourcesWithAnimation_bLockMovement_Offset), 0, null, bLockMovement);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LockAIResourcesWithAnimation_LockAILogic_Offset), 0, null, lockAILogic);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LockAIResourcesWithAnimation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AIModule.AIBlueprintHelperLibrary:IsValidAIRotation
    static readonly IntPtr IsValidAIRotation_NativeFunction;
    static readonly int IsValidAIRotation_ParamsSize;
    static readonly int IsValidAIRotation_Rotation_Offset;
    static readonly int IsValidAIRotation_ReturnValue_Offset;
    
    public static bool IsValidAIRotation(UnrealSharp.Rotator rotation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValidAIRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, IsValidAIRotation_Rotation_Offset), 0, null, rotation);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsValidAIRotation_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValidAIRotation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.AIBlueprintHelperLibrary:IsValidAILocation
    static readonly IntPtr IsValidAILocation_NativeFunction;
    static readonly int IsValidAILocation_ParamsSize;
    static readonly int IsValidAILocation_Location_Offset;
    static readonly int IsValidAILocation_ReturnValue_Offset;
    
    public static bool IsValidAILocation(System.DoubleNumerics.Vector3 location)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValidAILocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, IsValidAILocation_Location_Offset), 0, null, location);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsValidAILocation_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValidAILocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.AIBlueprintHelperLibrary:IsValidAIDirection
    static readonly IntPtr IsValidAIDirection_NativeFunction;
    static readonly int IsValidAIDirection_ParamsSize;
    static readonly int IsValidAIDirection_DirectionVector_Offset;
    static readonly int IsValidAIDirection_ReturnValue_Offset;
    
    public static bool IsValidAIDirection(System.DoubleNumerics.Vector3 directionVector)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValidAIDirection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, IsValidAIDirection_DirectionVector_Offset), 0, null, directionVector);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsValidAIDirection_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValidAIDirection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.AIBlueprintHelperLibrary:GetNextNavLinkIndex
    static readonly IntPtr GetNextNavLinkIndex_NativeFunction;
    static readonly int GetNextNavLinkIndex_ParamsSize;
    static readonly int GetNextNavLinkIndex_Controller_Offset;
    static readonly int GetNextNavLinkIndex_ReturnValue_Offset;
    
    public static int GetNextNavLinkIndex(UnrealSharp.Engine.Controller controller)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNextNavLinkIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, GetNextNavLinkIndex_Controller_Offset), 0, null, controller);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetNextNavLinkIndex_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNextNavLinkIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.AIBlueprintHelperLibrary:GetCurrentPathPoints
    static readonly IntPtr GetCurrentPathPoints_NativeFunction;
    static readonly int GetCurrentPathPoints_ParamsSize;
    static readonly int GetCurrentPathPoints_Controller_Offset;
    static readonly int GetCurrentPathPoints_ReturnValue_Offset;
    static readonly int GetCurrentPathPoints_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<System.DoubleNumerics.Vector3> GetCurrentPathPoints(UnrealSharp.Engine.Controller controller)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentPathPoints_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, GetCurrentPathPoints_Controller_Offset), 0, null, controller);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetCurrentPathPoints_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<System.DoubleNumerics.Vector3> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetCurrentPathPoints_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GetCurrentPathPoints_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.AIBlueprintHelperLibrary:GetCurrentPathIndex
    static readonly IntPtr GetCurrentPathIndex_NativeFunction;
    static readonly int GetCurrentPathIndex_ParamsSize;
    static readonly int GetCurrentPathIndex_Controller_Offset;
    static readonly int GetCurrentPathIndex_ReturnValue_Offset;
    
    public static int GetCurrentPathIndex(UnrealSharp.Engine.Controller controller)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentPathIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, GetCurrentPathIndex_Controller_Offset), 0, null, controller);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetCurrentPathIndex_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentPathIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.AIBlueprintHelperLibrary:GetCurrentPath
    static readonly IntPtr GetCurrentPath_NativeFunction;
    static readonly int GetCurrentPath_ParamsSize;
    static readonly int GetCurrentPath_Controller_Offset;
    static readonly int GetCurrentPath_ReturnValue_Offset;
    
    public static UnrealSharp.NavigationSystem.NavigationPath GetCurrentPath(UnrealSharp.Engine.Controller controller)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentPath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, GetCurrentPath_Controller_Offset), 0, null, controller);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetCurrentPath_NativeFunction, ParamsBuffer);
            
            UnrealSharp.NavigationSystem.NavigationPath returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.NavigationSystem.NavigationPath>.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentPath_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.AIBlueprintHelperLibrary:GetBlackboard
    static readonly IntPtr GetBlackboard_NativeFunction;
    static readonly int GetBlackboard_ParamsSize;
    static readonly int GetBlackboard_Target_Offset;
    static readonly int GetBlackboard_ReturnValue_Offset;
    
    public static UnrealSharp.AIModule.BlackboardComponent GetBlackboard(UnrealSharp.Engine.Actor target)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBlackboard_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, GetBlackboard_Target_Offset), 0, null, target);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetBlackboard_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AIModule.BlackboardComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.AIModule.BlackboardComponent>.FromNative(IntPtr.Add(ParamsBuffer, GetBlackboard_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.AIBlueprintHelperLibrary:GetAIController
    static readonly IntPtr GetAIController_NativeFunction;
    static readonly int GetAIController_ParamsSize;
    static readonly int GetAIController_ControlledActor_Offset;
    static readonly int GetAIController_ReturnValue_Offset;
    
    public static UnrealSharp.AIModule.AIController GetAIController(UnrealSharp.Engine.Actor controlledActor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAIController_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, GetAIController_ControlledActor_Offset), 0, null, controlledActor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAIController_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AIModule.AIController returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.AIModule.AIController>.FromNative(IntPtr.Add(ParamsBuffer, GetAIController_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
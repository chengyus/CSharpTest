// This file is automatically generated
using UnrealSharp.AIModule;
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AIModule;

[UClass]
public partial class AIController : UnrealSharp.Engine.Controller, IAIPerceptionListenerInterface, IGenericTeamAgentInterface
{
    
    static AIController()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AIController");
        
        bStartAILogicOnPossess_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bStartAILogicOnPossess");
        bStartAILogicOnPossess_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bStartAILogicOnPossess");
        bStopAILogicOnUnposses_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bStopAILogicOnUnposses");
        bStopAILogicOnUnposses_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bStopAILogicOnUnposses");
        bSkipExtraLOSChecks_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSkipExtraLOSChecks");
        bSkipExtraLOSChecks_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bSkipExtraLOSChecks");
        bAllowStrafe_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAllowStrafe");
        bAllowStrafe_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAllowStrafe");
        bWantsPlayerState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bWantsPlayerState");
        bWantsPlayerState_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bWantsPlayerState");
        bSetControlRotationFromPawnOrientation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSetControlRotationFromPawnOrientation");
        bSetControlRotationFromPawnOrientation_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bSetControlRotationFromPawnOrientation");
        BrainComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BrainComponent");
        Blackboard_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Blackboard");
        DefaultNavigationFilterClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultNavigationFilterClass");
        
        UseBlackboard_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UseBlackboard");
        UseBlackboard_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UseBlackboard_NativeFunction);
        UseBlackboard_BlackboardAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UseBlackboard_NativeFunction, "BlackboardAsset");
        UseBlackboard_BlackboardComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UseBlackboard_NativeFunction, "BlackboardComponent");
        UseBlackboard_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UseBlackboard_NativeFunction, "ReturnValue");
        UnclaimTaskResource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UnclaimTaskResource");
        UnclaimTaskResource_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UnclaimTaskResource_NativeFunction);
        UnclaimTaskResource_ResourceClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnclaimTaskResource_NativeFunction, "ResourceClass");
        SetPathFollowingComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPathFollowingComponent");
        SetPathFollowingComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPathFollowingComponent_NativeFunction);
        SetPathFollowingComponent_NewPFComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPathFollowingComponent_NativeFunction, "NewPFComponent");
        SetMoveBlockDetection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMoveBlockDetection");
        SetMoveBlockDetection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMoveBlockDetection_NativeFunction);
        SetMoveBlockDetection_bEnable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMoveBlockDetection_NativeFunction, "bEnable");
        RunBehaviorTree_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RunBehaviorTree");
        RunBehaviorTree_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RunBehaviorTree_NativeFunction);
        RunBehaviorTree_BTAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RunBehaviorTree_NativeFunction, "BTAsset");
        RunBehaviorTree_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RunBehaviorTree_NativeFunction, "ReturnValue");
        MoveToLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MoveToLocation");
        MoveToLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MoveToLocation_NativeFunction);
        MoveToLocation_Dest_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveToLocation_NativeFunction, "Dest");
        MoveToLocation_AcceptanceRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveToLocation_NativeFunction, "AcceptanceRadius");
        MoveToLocation_bStopOnOverlap_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveToLocation_NativeFunction, "bStopOnOverlap");
        MoveToLocation_bUsePathfinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveToLocation_NativeFunction, "bUsePathfinding");
        MoveToLocation_bProjectDestinationToNavigation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveToLocation_NativeFunction, "bProjectDestinationToNavigation");
        MoveToLocation_bCanStrafe_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveToLocation_NativeFunction, "bCanStrafe");
        MoveToLocation_FilterClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveToLocation_NativeFunction, "FilterClass");
        MoveToLocation_bAllowPartialPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveToLocation_NativeFunction, "bAllowPartialPath");
        MoveToLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveToLocation_NativeFunction, "ReturnValue");
        MoveToActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MoveToActor");
        MoveToActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MoveToActor_NativeFunction);
        MoveToActor_Goal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveToActor_NativeFunction, "Goal");
        MoveToActor_AcceptanceRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveToActor_NativeFunction, "AcceptanceRadius");
        MoveToActor_bStopOnOverlap_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveToActor_NativeFunction, "bStopOnOverlap");
        MoveToActor_bUsePathfinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveToActor_NativeFunction, "bUsePathfinding");
        MoveToActor_bCanStrafe_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveToActor_NativeFunction, "bCanStrafe");
        MoveToActor_FilterClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveToActor_NativeFunction, "FilterClass");
        MoveToActor_bAllowPartialPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveToActor_NativeFunction, "bAllowPartialPath");
        MoveToActor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveToActor_NativeFunction, "ReturnValue");
        K2_SetFocus_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_SetFocus");
        K2_SetFocus_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_SetFocus_NativeFunction);
        K2_SetFocus_NewFocus_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetFocus_NativeFunction, "NewFocus");
        K2_SetFocalPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_SetFocalPoint");
        K2_SetFocalPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_SetFocalPoint_NativeFunction);
        K2_SetFocalPoint_FP_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetFocalPoint_NativeFunction, "FP");
        K2_ClearFocus_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_ClearFocus");
        HasPartialPath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasPartialPath");
        HasPartialPath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasPartialPath_NativeFunction);
        HasPartialPath_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasPartialPath_NativeFunction, "ReturnValue");
        GetPathFollowingComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPathFollowingComponent");
        GetPathFollowingComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPathFollowingComponent_NativeFunction);
        GetPathFollowingComponent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPathFollowingComponent_NativeFunction, "ReturnValue");
        GetMoveStatus_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMoveStatus");
        GetMoveStatus_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMoveStatus_NativeFunction);
        GetMoveStatus_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMoveStatus_NativeFunction, "ReturnValue");
        GetImmediateMoveDestination_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetImmediateMoveDestination");
        GetImmediateMoveDestination_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetImmediateMoveDestination_NativeFunction);
        GetImmediateMoveDestination_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetImmediateMoveDestination_NativeFunction, "ReturnValue");
        GetFocusActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFocusActor");
        GetFocusActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFocusActor_NativeFunction);
        GetFocusActor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFocusActor_NativeFunction, "ReturnValue");
        GetFocalPointOnActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFocalPointOnActor");
        GetFocalPointOnActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFocalPointOnActor_NativeFunction);
        GetFocalPointOnActor_Actor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFocalPointOnActor_NativeFunction, "Actor");
        GetFocalPointOnActor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFocalPointOnActor_NativeFunction, "ReturnValue");
        GetFocalPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFocalPoint");
        GetFocalPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFocalPoint_NativeFunction);
        GetFocalPoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFocalPoint_NativeFunction, "ReturnValue");
        GetAIPerceptionComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAIPerceptionComponent");
        GetAIPerceptionComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAIPerceptionComponent_NativeFunction);
        GetAIPerceptionComponent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAIPerceptionComponent_NativeFunction, "ReturnValue");
        ClaimTaskResource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClaimTaskResource");
        ClaimTaskResource_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClaimTaskResource_NativeFunction);
        ClaimTaskResource_ResourceClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClaimTaskResource_NativeFunction, "ResourceClass");
        
        IntPtr OnUsingBlackBoard_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnUsingBlackBoard");
        OnUsingBlackBoard_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnUsingBlackBoard_NativeFunction);
        OnUsingBlackBoard_BlackboardComp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnUsingBlackBoard_NativeFunction, "BlackboardComp");
        OnUsingBlackBoard_BlackboardAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnUsingBlackBoard_NativeFunction, "BlackboardAsset");
        
        
    }
    
    protected AIController(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/AIModule.AIController:bStartAILogicOnPossess
    static readonly int bStartAILogicOnPossess_Offset;
    static readonly IntPtr bStartAILogicOnPossess_NativeProperty;
    
    public bool bStartAILogicOnPossess
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bStartAILogicOnPossess_NativeProperty, bStartAILogicOnPossess_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bStartAILogicOnPossess_NativeProperty, bStartAILogicOnPossess_Offset, value);
        }
    }
    
    // BoolProperty /Script/AIModule.AIController:bStopAILogicOnUnposses
    static readonly int bStopAILogicOnUnposses_Offset;
    static readonly IntPtr bStopAILogicOnUnposses_NativeProperty;
    
    public bool bStopAILogicOnUnposses
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bStopAILogicOnUnposses_NativeProperty, bStopAILogicOnUnposses_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bStopAILogicOnUnposses_NativeProperty, bStopAILogicOnUnposses_Offset, value);
        }
    }
    
    // BoolProperty /Script/AIModule.AIController:bSkipExtraLOSChecks
    static readonly int bSkipExtraLOSChecks_Offset;
    static readonly IntPtr bSkipExtraLOSChecks_NativeProperty;
    
    public bool bSkipExtraLOSChecks
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bSkipExtraLOSChecks_NativeProperty, bSkipExtraLOSChecks_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bSkipExtraLOSChecks_NativeProperty, bSkipExtraLOSChecks_Offset, value);
        }
    }
    
    // BoolProperty /Script/AIModule.AIController:bAllowStrafe
    static readonly int bAllowStrafe_Offset;
    static readonly IntPtr bAllowStrafe_NativeProperty;
    
    public bool bAllowStrafe
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAllowStrafe_NativeProperty, bAllowStrafe_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bAllowStrafe_NativeProperty, bAllowStrafe_Offset, value);
        }
    }
    
    // BoolProperty /Script/AIModule.AIController:bWantsPlayerState
    static readonly int bWantsPlayerState_Offset;
    static readonly IntPtr bWantsPlayerState_NativeProperty;
    
    public bool bWantsPlayerState
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bWantsPlayerState_NativeProperty, bWantsPlayerState_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bWantsPlayerState_NativeProperty, bWantsPlayerState_Offset, value);
        }
    }
    
    // BoolProperty /Script/AIModule.AIController:bSetControlRotationFromPawnOrientation
    static readonly int bSetControlRotationFromPawnOrientation_Offset;
    static readonly IntPtr bSetControlRotationFromPawnOrientation_NativeProperty;
    
    public bool bSetControlRotationFromPawnOrientation
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bSetControlRotationFromPawnOrientation_NativeProperty, bSetControlRotationFromPawnOrientation_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bSetControlRotationFromPawnOrientation_NativeProperty, bSetControlRotationFromPawnOrientation_Offset, value);
        }
    }
    
    // ObjectProperty /Script/AIModule.AIController:BrainComponent
    static readonly int BrainComponent_Offset;
    
    public UnrealSharp.AIModule.BrainComponent BrainComponent
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.AIModule.BrainComponent>.FromNative(IntPtr.Add(NativeObject, BrainComponent_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.AIModule.BrainComponent>.ToNative(IntPtr.Add(NativeObject, BrainComponent_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/AIModule.AIController:Blackboard
    static readonly int Blackboard_Offset;
    
    public UnrealSharp.AIModule.BlackboardComponent Blackboard
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.AIModule.BlackboardComponent>.FromNative(IntPtr.Add(NativeObject, Blackboard_Offset), 0, this);
        }
    }
    
    // ClassProperty /Script/AIModule.AIController:DefaultNavigationFilterClass
    static readonly int DefaultNavigationFilterClass_Offset;
    
    public SubclassOf<UnrealSharp.NavigationSystem.NavigationQueryFilter> DefaultNavigationFilterClass
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.NavigationSystem.NavigationQueryFilter>.FromNative(IntPtr.Add(NativeObject, DefaultNavigationFilterClass_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            SubclassOfMarshaller<UnrealSharp.NavigationSystem.NavigationQueryFilter>.ToNative(IntPtr.Add(NativeObject, DefaultNavigationFilterClass_Offset), 0, this, value);
        }
    }
    
    // Function /Script/AIModule.AIController:UseBlackboard
    static readonly IntPtr UseBlackboard_NativeFunction;
    static readonly int UseBlackboard_ParamsSize;
    static readonly int UseBlackboard_BlackboardAsset_Offset;
    static readonly int UseBlackboard_BlackboardComponent_Offset;
    static readonly int UseBlackboard_ReturnValue_Offset;
    
    public bool UseBlackboard(UnrealSharp.AIModule.BlackboardData blackboardAsset, out UnrealSharp.AIModule.BlackboardComponent blackboardComponent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UseBlackboard_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.AIModule.BlackboardData>.ToNative(IntPtr.Add(ParamsBuffer, UseBlackboard_BlackboardAsset_Offset), 0, null, blackboardAsset);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UseBlackboard_NativeFunction, ParamsBuffer);
            
            blackboardComponent = ObjectMarshaller<UnrealSharp.AIModule.BlackboardComponent>.FromNative(IntPtr.Add(ParamsBuffer, UseBlackboard_BlackboardComponent_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, UseBlackboard_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.AIController:UnclaimTaskResource
    static readonly IntPtr UnclaimTaskResource_NativeFunction;
    static readonly int UnclaimTaskResource_ParamsSize;
    static readonly int UnclaimTaskResource_ResourceClass_Offset;
    
    public void UnclaimTaskResource(SubclassOf<UnrealSharp.GameplayTasks.GameplayTaskResource> resourceClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UnclaimTaskResource_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.GameplayTasks.GameplayTaskResource>.ToNative(IntPtr.Add(ParamsBuffer, UnclaimTaskResource_ResourceClass_Offset), 0, null, resourceClass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UnclaimTaskResource_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AIModule.AIController:SetPathFollowingComponent
    static readonly IntPtr SetPathFollowingComponent_NativeFunction;
    static readonly int SetPathFollowingComponent_ParamsSize;
    static readonly int SetPathFollowingComponent_NewPFComponent_Offset;
    
    public void SetPathFollowingComponent(UnrealSharp.AIModule.PathFollowingComponent newPFComponent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPathFollowingComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.AIModule.PathFollowingComponent>.ToNative(IntPtr.Add(ParamsBuffer, SetPathFollowingComponent_NewPFComponent_Offset), 0, null, newPFComponent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPathFollowingComponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AIModule.AIController:SetMoveBlockDetection
    static readonly IntPtr SetMoveBlockDetection_NativeFunction;
    static readonly int SetMoveBlockDetection_ParamsSize;
    static readonly int SetMoveBlockDetection_bEnable_Offset;
    
    public void SetMoveBlockDetection(bool bEnable)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMoveBlockDetection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetMoveBlockDetection_bEnable_Offset), 0, null, bEnable);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMoveBlockDetection_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AIModule.AIController:RunBehaviorTree
    static readonly IntPtr RunBehaviorTree_NativeFunction;
    static readonly int RunBehaviorTree_ParamsSize;
    static readonly int RunBehaviorTree_BTAsset_Offset;
    static readonly int RunBehaviorTree_ReturnValue_Offset;
    
    public bool RunBehaviorTree(UnrealSharp.AIModule.BehaviorTree bTAsset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RunBehaviorTree_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.AIModule.BehaviorTree>.ToNative(IntPtr.Add(ParamsBuffer, RunBehaviorTree_BTAsset_Offset), 0, null, bTAsset);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RunBehaviorTree_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RunBehaviorTree_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.AIController:MoveToLocation
    static readonly IntPtr MoveToLocation_NativeFunction;
    static readonly int MoveToLocation_ParamsSize;
    static readonly int MoveToLocation_Dest_Offset;
    static readonly int MoveToLocation_AcceptanceRadius_Offset;
    static readonly int MoveToLocation_bStopOnOverlap_Offset;
    static readonly int MoveToLocation_bUsePathfinding_Offset;
    static readonly int MoveToLocation_bProjectDestinationToNavigation_Offset;
    static readonly int MoveToLocation_bCanStrafe_Offset;
    static readonly int MoveToLocation_FilterClass_Offset;
    static readonly int MoveToLocation_bAllowPartialPath_Offset;
    static readonly int MoveToLocation_ReturnValue_Offset;
    
    public UnrealSharp.AIModule.EPathFollowingRequestResult MoveToLocation(System.DoubleNumerics.Vector3 dest, float acceptanceRadius = -1.000000f, bool bStopOnOverlap = true, bool bUsePathfinding = true, bool bProjectDestinationToNavigation = false, bool bCanStrafe = true, SubclassOf<UnrealSharp.NavigationSystem.NavigationQueryFilter> filterClass = default(SubclassOf<UnrealSharp.NavigationSystem.NavigationQueryFilter>), bool bAllowPartialPath = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MoveToLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MoveToLocation_Dest_Offset), 0, null, dest);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, MoveToLocation_AcceptanceRadius_Offset), 0, null, acceptanceRadius);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, MoveToLocation_bStopOnOverlap_Offset), 0, null, bStopOnOverlap);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, MoveToLocation_bUsePathfinding_Offset), 0, null, bUsePathfinding);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, MoveToLocation_bProjectDestinationToNavigation_Offset), 0, null, bProjectDestinationToNavigation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, MoveToLocation_bCanStrafe_Offset), 0, null, bCanStrafe);
            SubclassOfMarshaller<UnrealSharp.NavigationSystem.NavigationQueryFilter>.ToNative(IntPtr.Add(ParamsBuffer, MoveToLocation_FilterClass_Offset), 0, null, filterClass);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, MoveToLocation_bAllowPartialPath_Offset), 0, null, bAllowPartialPath);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, MoveToLocation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AIModule.EPathFollowingRequestResult returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.AIModule.EPathFollowingRequestResult>.FromNative(IntPtr.Add(ParamsBuffer, MoveToLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.AIController:MoveToActor
    static readonly IntPtr MoveToActor_NativeFunction;
    static readonly int MoveToActor_ParamsSize;
    static readonly int MoveToActor_Goal_Offset;
    static readonly int MoveToActor_AcceptanceRadius_Offset;
    static readonly int MoveToActor_bStopOnOverlap_Offset;
    static readonly int MoveToActor_bUsePathfinding_Offset;
    static readonly int MoveToActor_bCanStrafe_Offset;
    static readonly int MoveToActor_FilterClass_Offset;
    static readonly int MoveToActor_bAllowPartialPath_Offset;
    static readonly int MoveToActor_ReturnValue_Offset;
    
    public UnrealSharp.AIModule.EPathFollowingRequestResult MoveToActor(UnrealSharp.Engine.Actor goal, float acceptanceRadius = -1.000000f, bool bStopOnOverlap = true, bool bUsePathfinding = true, bool bCanStrafe = true, SubclassOf<UnrealSharp.NavigationSystem.NavigationQueryFilter> filterClass = default(SubclassOf<UnrealSharp.NavigationSystem.NavigationQueryFilter>), bool bAllowPartialPath = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MoveToActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, MoveToActor_Goal_Offset), 0, null, goal);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, MoveToActor_AcceptanceRadius_Offset), 0, null, acceptanceRadius);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, MoveToActor_bStopOnOverlap_Offset), 0, null, bStopOnOverlap);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, MoveToActor_bUsePathfinding_Offset), 0, null, bUsePathfinding);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, MoveToActor_bCanStrafe_Offset), 0, null, bCanStrafe);
            SubclassOfMarshaller<UnrealSharp.NavigationSystem.NavigationQueryFilter>.ToNative(IntPtr.Add(ParamsBuffer, MoveToActor_FilterClass_Offset), 0, null, filterClass);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, MoveToActor_bAllowPartialPath_Offset), 0, null, bAllowPartialPath);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, MoveToActor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AIModule.EPathFollowingRequestResult returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.AIModule.EPathFollowingRequestResult>.FromNative(IntPtr.Add(ParamsBuffer, MoveToActor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.AIController:K2_SetFocus
    static readonly IntPtr K2_SetFocus_NativeFunction;
    static readonly int K2_SetFocus_ParamsSize;
    static readonly int K2_SetFocus_NewFocus_Offset;
    
    public void SetFocus(UnrealSharp.Engine.Actor newFocus)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_SetFocus_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetFocus_NewFocus_Offset), 0, null, newFocus);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_SetFocus_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AIModule.AIController:K2_SetFocalPoint
    static readonly IntPtr K2_SetFocalPoint_NativeFunction;
    static readonly int K2_SetFocalPoint_ParamsSize;
    static readonly int K2_SetFocalPoint_FP_Offset;
    
    public void SetFocalPoint(System.DoubleNumerics.Vector3 fP)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_SetFocalPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetFocalPoint_FP_Offset), 0, null, fP);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_SetFocalPoint_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AIModule.AIController:K2_ClearFocus
    static readonly IntPtr K2_ClearFocus_NativeFunction;
    
    public void ClearFocus()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_ClearFocus_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/AIModule.AIController:HasPartialPath
    static readonly IntPtr HasPartialPath_NativeFunction;
    static readonly int HasPartialPath_ParamsSize;
    static readonly int HasPartialPath_ReturnValue_Offset;
    
    public bool HasPartialPath()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasPartialPath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasPartialPath_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasPartialPath_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.AIController:GetPathFollowingComponent
    static readonly IntPtr GetPathFollowingComponent_NativeFunction;
    static readonly int GetPathFollowingComponent_ParamsSize;
    static readonly int GetPathFollowingComponent_ReturnValue_Offset;
    
    public UnrealSharp.AIModule.PathFollowingComponent GetPathFollowingComponent()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPathFollowingComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPathFollowingComponent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AIModule.PathFollowingComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.AIModule.PathFollowingComponent>.FromNative(IntPtr.Add(ParamsBuffer, GetPathFollowingComponent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.AIController:GetMoveStatus
    static readonly IntPtr GetMoveStatus_NativeFunction;
    static readonly int GetMoveStatus_ParamsSize;
    static readonly int GetMoveStatus_ReturnValue_Offset;
    
    public UnrealSharp.AIModule.EPathFollowingStatus GetMoveStatus()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMoveStatus_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMoveStatus_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AIModule.EPathFollowingStatus returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.AIModule.EPathFollowingStatus>.FromNative(IntPtr.Add(ParamsBuffer, GetMoveStatus_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.AIController:GetImmediateMoveDestination
    static readonly IntPtr GetImmediateMoveDestination_NativeFunction;
    static readonly int GetImmediateMoveDestination_ParamsSize;
    static readonly int GetImmediateMoveDestination_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetImmediateMoveDestination()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetImmediateMoveDestination_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetImmediateMoveDestination_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetImmediateMoveDestination_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.AIController:GetFocusActor
    static readonly IntPtr GetFocusActor_NativeFunction;
    static readonly int GetFocusActor_ParamsSize;
    static readonly int GetFocusActor_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Actor GetFocusActor()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFocusActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFocusActor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Actor returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(ParamsBuffer, GetFocusActor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.AIController:GetFocalPointOnActor
    static readonly IntPtr GetFocalPointOnActor_NativeFunction;
    static readonly int GetFocalPointOnActor_ParamsSize;
    static readonly int GetFocalPointOnActor_Actor_Offset;
    static readonly int GetFocalPointOnActor_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetFocalPointOnActor(UnrealSharp.Engine.Actor actor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFocalPointOnActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, GetFocalPointOnActor_Actor_Offset), 0, null, actor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFocalPointOnActor_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetFocalPointOnActor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.AIController:GetFocalPoint
    static readonly IntPtr GetFocalPoint_NativeFunction;
    static readonly int GetFocalPoint_ParamsSize;
    static readonly int GetFocalPoint_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetFocalPoint()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFocalPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFocalPoint_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetFocalPoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.AIController:GetAIPerceptionComponent
    static readonly IntPtr GetAIPerceptionComponent_NativeFunction;
    static readonly int GetAIPerceptionComponent_ParamsSize;
    static readonly int GetAIPerceptionComponent_ReturnValue_Offset;
    
    public UnrealSharp.AIModule.AIPerceptionComponent GetAIPerceptionComponent()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAIPerceptionComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAIPerceptionComponent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AIModule.AIPerceptionComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.AIModule.AIPerceptionComponent>.FromNative(IntPtr.Add(ParamsBuffer, GetAIPerceptionComponent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.AIController:ClaimTaskResource
    static readonly IntPtr ClaimTaskResource_NativeFunction;
    static readonly int ClaimTaskResource_ParamsSize;
    static readonly int ClaimTaskResource_ResourceClass_Offset;
    
    public void ClaimTaskResource(SubclassOf<UnrealSharp.GameplayTasks.GameplayTaskResource> resourceClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClaimTaskResource_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.GameplayTasks.GameplayTaskResource>.ToNative(IntPtr.Add(ParamsBuffer, ClaimTaskResource_ResourceClass_Offset), 0, null, resourceClass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClaimTaskResource_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AIModule.AIController:OnUsingBlackBoard
    IntPtr OnUsingBlackBoard_NativeFunction;
    static readonly int OnUsingBlackBoard_ParamsSize;
    static readonly int OnUsingBlackBoard_BlackboardComp_Offset;
    static readonly int OnUsingBlackBoard_BlackboardAsset_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void OnUsingBlackBoard(UnrealSharp.AIModule.BlackboardComponent blackboardComp, UnrealSharp.AIModule.BlackboardData blackboardAsset)
    {
        unsafe
        {
            if (OnUsingBlackBoard_NativeFunction == IntPtr.Zero)
            {
                OnUsingBlackBoard_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnUsingBlackBoard");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnUsingBlackBoard_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.AIModule.BlackboardComponent>.ToNative(IntPtr.Add(ParamsBuffer, OnUsingBlackBoard_BlackboardComp_Offset), 0, null, blackboardComp);
            ObjectMarshaller<UnrealSharp.AIModule.BlackboardData>.ToNative(IntPtr.Add(ParamsBuffer, OnUsingBlackBoard_BlackboardAsset_Offset), 0, null, blackboardAsset);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnUsingBlackBoard_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnUsingBlackBoard_Implementation(UnrealSharp.AIModule.BlackboardComponent blackboardComp, UnrealSharp.AIModule.BlackboardData blackboardAsset)
    {
    }
    void Invoke_OnUsingBlackBoard(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.AIModule.BlackboardComponent blackboardComp = ObjectMarshaller<UnrealSharp.AIModule.BlackboardComponent>.FromNative(IntPtr.Add(buffer, OnUsingBlackBoard_BlackboardComp_Offset), 0, null);
            UnrealSharp.AIModule.BlackboardData blackboardAsset = ObjectMarshaller<UnrealSharp.AIModule.BlackboardData>.FromNative(IntPtr.Add(buffer, OnUsingBlackBoard_BlackboardAsset_Offset), 0, null);
            OnUsingBlackBoard_Implementation(blackboardComp, blackboardAsset);
        }
    }
    
    
}
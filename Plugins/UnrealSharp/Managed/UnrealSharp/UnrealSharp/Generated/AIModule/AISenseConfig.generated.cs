// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AIModule;

[UClass]
abstract public partial class AISenseConfig : UnrealSharp.CoreUObject.Object
{
    
    static AISenseConfig()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AISenseConfig");
        
        DebugColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DebugColor");
        MaxAge_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxAge");
        bStartsEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bStartsEnabled");
        bStartsEnabled_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bStartsEnabled");
        
        
        
    }
    
    protected AISenseConfig(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/AIModule.AISenseConfig:DebugColor
    static readonly int DebugColor_Offset;
    
    public UnrealSharp.CoreUObject.Color DebugColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(NativeObject, DebugColor_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/AIModule.AISenseConfig:MaxAge
    static readonly int MaxAge_Offset;
    
    public float MaxAge
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxAge_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/AIModule.AISenseConfig:bStartsEnabled
    static readonly int bStartsEnabled_Offset;
    static readonly IntPtr bStartsEnabled_NativeProperty;
    
    public bool bStartsEnabled
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bStartsEnabled_NativeProperty, bStartsEnabled_Offset);
        }
    }
    
    
}
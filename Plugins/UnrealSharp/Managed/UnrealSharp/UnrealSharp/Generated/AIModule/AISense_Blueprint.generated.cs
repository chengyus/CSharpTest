// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AIModule;

[UClass]
abstract public partial class AISense_Blueprint : UnrealSharp.AIModule.AISense
{
    
    static AISense_Blueprint()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AISense_Blueprint");
        
        ListenerDataType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ListenerDataType");
        ListenerContainer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ListenerContainer");
        ListenerContainer_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "ListenerContainer");
        
        GetAllListenerComponents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAllListenerComponents");
        GetAllListenerComponents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAllListenerComponents_NativeFunction);
        GetAllListenerComponents_ListenerComponents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllListenerComponents_NativeFunction, "ListenerComponents");
        GetAllListenerComponents_ListenerComponents_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAllListenerComponents_NativeFunction, "ListenerComponents");
        GetAllListenerActors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAllListenerActors");
        GetAllListenerActors_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAllListenerActors_NativeFunction);
        GetAllListenerActors_ListenerActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllListenerActors_NativeFunction, "ListenerActors");
        GetAllListenerActors_ListenerActors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAllListenerActors_NativeFunction, "ListenerActors");
        
        IntPtr OnUpdate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnUpdate");
        OnUpdate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnUpdate_NativeFunction);
        OnUpdate_EventsToProcess_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnUpdate_NativeFunction, "EventsToProcess");
        OnUpdate_EventsToProcess_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(OnUpdate_NativeFunction, "EventsToProcess");
        OnUpdate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnUpdate_NativeFunction, "ReturnValue");
        
        IntPtr OnListenerUpdated_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnListenerUpdated");
        OnListenerUpdated_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnListenerUpdated_NativeFunction);
        OnListenerUpdated_ActorListener_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnListenerUpdated_NativeFunction, "ActorListener");
        OnListenerUpdated_PerceptionComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnListenerUpdated_NativeFunction, "PerceptionComponent");
        
        IntPtr OnListenerUnregistered_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnListenerUnregistered");
        OnListenerUnregistered_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnListenerUnregistered_NativeFunction);
        OnListenerUnregistered_ActorListener_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnListenerUnregistered_NativeFunction, "ActorListener");
        OnListenerUnregistered_PerceptionComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnListenerUnregistered_NativeFunction, "PerceptionComponent");
        
        IntPtr OnListenerRegistered_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnListenerRegistered");
        OnListenerRegistered_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnListenerRegistered_NativeFunction);
        OnListenerRegistered_ActorListener_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnListenerRegistered_NativeFunction, "ActorListener");
        OnListenerRegistered_PerceptionComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnListenerRegistered_NativeFunction, "PerceptionComponent");
        
        IntPtr K2_OnNewPawn_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_OnNewPawn");
        K2_OnNewPawn_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_OnNewPawn_NativeFunction);
        K2_OnNewPawn_NewPawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_OnNewPawn_NativeFunction, "NewPawn");
        
        
    }
    
    protected AISense_Blueprint(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ClassProperty /Script/AIModule.AISense_Blueprint:ListenerDataType
    static readonly int ListenerDataType_Offset;
    
    public SubclassOf<UnrealSharp.Engine.UserDefinedStruct> ListenerDataType
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.Engine.UserDefinedStruct>.FromNative(IntPtr.Add(NativeObject, ListenerDataType_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            SubclassOfMarshaller<UnrealSharp.Engine.UserDefinedStruct>.ToNative(IntPtr.Add(NativeObject, ListenerDataType_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/AIModule.AISense_Blueprint:ListenerContainer
    static readonly int ListenerContainer_Offset;
    static readonly IntPtr ListenerContainer_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.AIModule.AIPerceptionComponent> ListenerContainer_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.AIModule.AIPerceptionComponent> ListenerContainer
    {
        get
        {
            if(ListenerContainer_Wrapper == null)
            {
                ListenerContainer_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.AIModule.AIPerceptionComponent>(1, ListenerContainer_NativeProperty, ObjectMarshaller<UnrealSharp.AIModule.AIPerceptionComponent>.ToNative, ObjectMarshaller<UnrealSharp.AIModule.AIPerceptionComponent>.FromNative);
            }
            
            return ListenerContainer_Wrapper.FromNative(IntPtr.Add(NativeObject,ListenerContainer_Offset),0,this);
        }
    }
    
    // Function /Script/AIModule.AISense_Blueprint:GetAllListenerComponents
    static readonly IntPtr GetAllListenerComponents_NativeFunction;
    static readonly int GetAllListenerComponents_ParamsSize;
    static readonly int GetAllListenerComponents_ListenerComponents_Offset;
    static readonly int GetAllListenerComponents_ListenerComponents_ElementSize;
    
    public void GetAllListenerComponents(out System.Collections.Generic.IList<UnrealSharp.AIModule.AIPerceptionComponent> listenerComponents)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAllListenerComponents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAllListenerComponents_NativeFunction, ParamsBuffer);
            
            IntPtr ListenerComponents_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAllListenerComponents_ListenerComponents_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.AIModule.AIPerceptionComponent> ListenerComponents_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.AIModule.AIPerceptionComponent> (1, ObjectMarshaller<UnrealSharp.AIModule.AIPerceptionComponent>.ToNative, ObjectMarshaller<UnrealSharp.AIModule.AIPerceptionComponent>.FromNative, GetAllListenerComponents_ListenerComponents_ElementSize);
            listenerComponents = ListenerComponents_Marshaler.FromNative(ListenerComponents_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.AIModule.AIPerceptionComponent>.DestructInstance(ListenerComponents_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AIModule.AISense_Blueprint:GetAllListenerActors
    static readonly IntPtr GetAllListenerActors_NativeFunction;
    static readonly int GetAllListenerActors_ParamsSize;
    static readonly int GetAllListenerActors_ListenerActors_Offset;
    static readonly int GetAllListenerActors_ListenerActors_ElementSize;
    
    public void GetAllListenerActors(out System.Collections.Generic.IList<UnrealSharp.Engine.Actor> listenerActors)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAllListenerActors_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAllListenerActors_NativeFunction, ParamsBuffer);
            
            IntPtr ListenerActors_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAllListenerActors_ListenerActors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ListenerActors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, GetAllListenerActors_ListenerActors_ElementSize);
            listenerActors = ListenerActors_Marshaler.FromNative(ListenerActors_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(ListenerActors_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AIModule.AISense_Blueprint:OnUpdate
    IntPtr OnUpdate_NativeFunction;
    static readonly int OnUpdate_ParamsSize;
    static readonly int OnUpdate_EventsToProcess_Offset;
    static readonly int OnUpdate_EventsToProcess_ElementSize;
    static readonly int OnUpdate_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual float OnUpdate(System.Collections.Generic.IList<UnrealSharp.AIModule.AISenseEvent> eventsToProcess)
    {
        unsafe
        {
            if (OnUpdate_NativeFunction == IntPtr.Zero)
            {
                OnUpdate_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnUpdate");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnUpdate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr EventsToProcess_NativeBuffer = IntPtr.Add(ParamsBuffer, OnUpdate_EventsToProcess_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.AIModule.AISenseEvent> EventsToProcess_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.AIModule.AISenseEvent>(1, ObjectMarshaller<UnrealSharp.AIModule.AISenseEvent>.ToNative, ObjectMarshaller<UnrealSharp.AIModule.AISenseEvent>.FromNative, OnUpdate_EventsToProcess_ElementSize);
            EventsToProcess_Marshaler.ToNative(EventsToProcess_NativeBuffer, 0, null, eventsToProcess);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnUpdate_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, OnUpdate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual float OnUpdate_Implementation(System.Collections.Generic.IList<UnrealSharp.AIModule.AISenseEvent> eventsToProcess)
    {
        return default(float);
    }
    void Invoke_OnUpdate(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            IntPtr EventsToProcess_NativeBuffer = IntPtr.Add(buffer, OnUpdate_EventsToProcess_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.AIModule.AISenseEvent> EventsToProcess_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.AIModule.AISenseEvent> (1, ObjectMarshaller<UnrealSharp.AIModule.AISenseEvent>.ToNative, ObjectMarshaller<UnrealSharp.AIModule.AISenseEvent>.FromNative, OnUpdate_EventsToProcess_ElementSize);
            System.Collections.Generic.IList<UnrealSharp.AIModule.AISenseEvent> eventsToProcess = EventsToProcess_Marshaler.FromNative(EventsToProcess_NativeBuffer, 0, null);
            float returnValue = OnUpdate_Implementation(eventsToProcess);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/AIModule.AISense_Blueprint:OnListenerUpdated
    IntPtr OnListenerUpdated_NativeFunction;
    static readonly int OnListenerUpdated_ParamsSize;
    static readonly int OnListenerUpdated_ActorListener_Offset;
    static readonly int OnListenerUpdated_PerceptionComponent_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnListenerUpdated(UnrealSharp.Engine.Actor actorListener, UnrealSharp.AIModule.AIPerceptionComponent perceptionComponent)
    {
        unsafe
        {
            if (OnListenerUpdated_NativeFunction == IntPtr.Zero)
            {
                OnListenerUpdated_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnListenerUpdated");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnListenerUpdated_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, OnListenerUpdated_ActorListener_Offset), 0, null, actorListener);
            ObjectMarshaller<UnrealSharp.AIModule.AIPerceptionComponent>.ToNative(IntPtr.Add(ParamsBuffer, OnListenerUpdated_PerceptionComponent_Offset), 0, null, perceptionComponent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnListenerUpdated_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnListenerUpdated_Implementation(UnrealSharp.Engine.Actor actorListener, UnrealSharp.AIModule.AIPerceptionComponent perceptionComponent)
    {
    }
    void Invoke_OnListenerUpdated(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Actor actorListener = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, OnListenerUpdated_ActorListener_Offset), 0, null);
            UnrealSharp.AIModule.AIPerceptionComponent perceptionComponent = ObjectMarshaller<UnrealSharp.AIModule.AIPerceptionComponent>.FromNative(IntPtr.Add(buffer, OnListenerUpdated_PerceptionComponent_Offset), 0, null);
            OnListenerUpdated_Implementation(actorListener, perceptionComponent);
        }
    }
    
    // Function /Script/AIModule.AISense_Blueprint:OnListenerUnregistered
    IntPtr OnListenerUnregistered_NativeFunction;
    static readonly int OnListenerUnregistered_ParamsSize;
    static readonly int OnListenerUnregistered_ActorListener_Offset;
    static readonly int OnListenerUnregistered_PerceptionComponent_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnListenerUnregistered(UnrealSharp.Engine.Actor actorListener, UnrealSharp.AIModule.AIPerceptionComponent perceptionComponent)
    {
        unsafe
        {
            if (OnListenerUnregistered_NativeFunction == IntPtr.Zero)
            {
                OnListenerUnregistered_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnListenerUnregistered");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnListenerUnregistered_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, OnListenerUnregistered_ActorListener_Offset), 0, null, actorListener);
            ObjectMarshaller<UnrealSharp.AIModule.AIPerceptionComponent>.ToNative(IntPtr.Add(ParamsBuffer, OnListenerUnregistered_PerceptionComponent_Offset), 0, null, perceptionComponent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnListenerUnregistered_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnListenerUnregistered_Implementation(UnrealSharp.Engine.Actor actorListener, UnrealSharp.AIModule.AIPerceptionComponent perceptionComponent)
    {
    }
    void Invoke_OnListenerUnregistered(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Actor actorListener = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, OnListenerUnregistered_ActorListener_Offset), 0, null);
            UnrealSharp.AIModule.AIPerceptionComponent perceptionComponent = ObjectMarshaller<UnrealSharp.AIModule.AIPerceptionComponent>.FromNative(IntPtr.Add(buffer, OnListenerUnregistered_PerceptionComponent_Offset), 0, null);
            OnListenerUnregistered_Implementation(actorListener, perceptionComponent);
        }
    }
    
    // Function /Script/AIModule.AISense_Blueprint:OnListenerRegistered
    IntPtr OnListenerRegistered_NativeFunction;
    static readonly int OnListenerRegistered_ParamsSize;
    static readonly int OnListenerRegistered_ActorListener_Offset;
    static readonly int OnListenerRegistered_PerceptionComponent_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnListenerRegistered(UnrealSharp.Engine.Actor actorListener, UnrealSharp.AIModule.AIPerceptionComponent perceptionComponent)
    {
        unsafe
        {
            if (OnListenerRegistered_NativeFunction == IntPtr.Zero)
            {
                OnListenerRegistered_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnListenerRegistered");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnListenerRegistered_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, OnListenerRegistered_ActorListener_Offset), 0, null, actorListener);
            ObjectMarshaller<UnrealSharp.AIModule.AIPerceptionComponent>.ToNative(IntPtr.Add(ParamsBuffer, OnListenerRegistered_PerceptionComponent_Offset), 0, null, perceptionComponent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnListenerRegistered_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnListenerRegistered_Implementation(UnrealSharp.Engine.Actor actorListener, UnrealSharp.AIModule.AIPerceptionComponent perceptionComponent)
    {
    }
    void Invoke_OnListenerRegistered(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Actor actorListener = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, OnListenerRegistered_ActorListener_Offset), 0, null);
            UnrealSharp.AIModule.AIPerceptionComponent perceptionComponent = ObjectMarshaller<UnrealSharp.AIModule.AIPerceptionComponent>.FromNative(IntPtr.Add(buffer, OnListenerRegistered_PerceptionComponent_Offset), 0, null);
            OnListenerRegistered_Implementation(actorListener, perceptionComponent);
        }
    }
    
    // Function /Script/AIModule.AISense_Blueprint:K2_OnNewPawn
    IntPtr K2_OnNewPawn_NativeFunction;
    static readonly int K2_OnNewPawn_ParamsSize;
    static readonly int K2_OnNewPawn_NewPawn_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnNewPawn(UnrealSharp.Engine.Pawn newPawn)
    {
        unsafe
        {
            if (K2_OnNewPawn_NativeFunction == IntPtr.Zero)
            {
                K2_OnNewPawn_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "K2_OnNewPawn");
            }
            byte* ParamsBufferAllocation = stackalloc byte[K2_OnNewPawn_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(ParamsBuffer, K2_OnNewPawn_NewPawn_Offset), 0, null, newPawn);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_OnNewPawn_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void K2_OnNewPawn_Implementation(UnrealSharp.Engine.Pawn newPawn)
    {
    }
    void Invoke_K2_OnNewPawn(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Pawn newPawn = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(buffer, K2_OnNewPawn_NewPawn_Offset), 0, null);
            K2_OnNewPawn_Implementation(newPawn);
        }
    }
    
    
}
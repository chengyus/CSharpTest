// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AIModule;

[UClass]
abstract public partial class BTDecorator_BlueprintBase : UnrealSharp.AIModule.BTDecorator
{
    
    static BTDecorator_BlueprintBase()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("BTDecorator_BlueprintBase");
        
        CustomDescription_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CustomDescription");
        CustomDescription_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "CustomDescription");
        
        IsDecoratorObserverActive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsDecoratorObserverActive");
        IsDecoratorObserverActive_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsDecoratorObserverActive_NativeFunction);
        IsDecoratorObserverActive_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsDecoratorObserverActive_NativeFunction, "ReturnValue");
        IsDecoratorExecutionActive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsDecoratorExecutionActive");
        IsDecoratorExecutionActive_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsDecoratorExecutionActive_NativeFunction);
        IsDecoratorExecutionActive_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsDecoratorExecutionActive_NativeFunction, "ReturnValue");
        
        IntPtr ReceiveTickAI_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveTickAI");
        ReceiveTickAI_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveTickAI_NativeFunction);
        ReceiveTickAI_OwnerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveTickAI_NativeFunction, "OwnerController");
        ReceiveTickAI_ControlledPawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveTickAI_NativeFunction, "ControlledPawn");
        ReceiveTickAI_DeltaSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveTickAI_NativeFunction, "DeltaSeconds");
        
        IntPtr ReceiveTick_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveTick");
        ReceiveTick_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveTick_NativeFunction);
        ReceiveTick_OwnerActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveTick_NativeFunction, "OwnerActor");
        ReceiveTick_DeltaSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveTick_NativeFunction, "DeltaSeconds");
        
        IntPtr ReceiveObserverDeactivatedAI_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveObserverDeactivatedAI");
        ReceiveObserverDeactivatedAI_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveObserverDeactivatedAI_NativeFunction);
        ReceiveObserverDeactivatedAI_OwnerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveObserverDeactivatedAI_NativeFunction, "OwnerController");
        ReceiveObserverDeactivatedAI_ControlledPawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveObserverDeactivatedAI_NativeFunction, "ControlledPawn");
        
        IntPtr ReceiveObserverDeactivated_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveObserverDeactivated");
        ReceiveObserverDeactivated_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveObserverDeactivated_NativeFunction);
        ReceiveObserverDeactivated_OwnerActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveObserverDeactivated_NativeFunction, "OwnerActor");
        
        IntPtr ReceiveObserverActivatedAI_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveObserverActivatedAI");
        ReceiveObserverActivatedAI_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveObserverActivatedAI_NativeFunction);
        ReceiveObserverActivatedAI_OwnerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveObserverActivatedAI_NativeFunction, "OwnerController");
        ReceiveObserverActivatedAI_ControlledPawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveObserverActivatedAI_NativeFunction, "ControlledPawn");
        
        IntPtr ReceiveObserverActivated_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveObserverActivated");
        ReceiveObserverActivated_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveObserverActivated_NativeFunction);
        ReceiveObserverActivated_OwnerActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveObserverActivated_NativeFunction, "OwnerActor");
        
        IntPtr ReceiveExecutionStartAI_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveExecutionStartAI");
        ReceiveExecutionStartAI_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveExecutionStartAI_NativeFunction);
        ReceiveExecutionStartAI_OwnerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveExecutionStartAI_NativeFunction, "OwnerController");
        ReceiveExecutionStartAI_ControlledPawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveExecutionStartAI_NativeFunction, "ControlledPawn");
        
        IntPtr ReceiveExecutionStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveExecutionStart");
        ReceiveExecutionStart_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveExecutionStart_NativeFunction);
        ReceiveExecutionStart_OwnerActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveExecutionStart_NativeFunction, "OwnerActor");
        
        IntPtr ReceiveExecutionFinishAI_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveExecutionFinishAI");
        ReceiveExecutionFinishAI_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveExecutionFinishAI_NativeFunction);
        ReceiveExecutionFinishAI_OwnerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveExecutionFinishAI_NativeFunction, "OwnerController");
        ReceiveExecutionFinishAI_ControlledPawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveExecutionFinishAI_NativeFunction, "ControlledPawn");
        ReceiveExecutionFinishAI_NodeResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveExecutionFinishAI_NativeFunction, "NodeResult");
        
        IntPtr ReceiveExecutionFinish_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveExecutionFinish");
        ReceiveExecutionFinish_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveExecutionFinish_NativeFunction);
        ReceiveExecutionFinish_OwnerActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveExecutionFinish_NativeFunction, "OwnerActor");
        ReceiveExecutionFinish_NodeResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveExecutionFinish_NativeFunction, "NodeResult");
        
        IntPtr PerformConditionCheckAI_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PerformConditionCheckAI");
        PerformConditionCheckAI_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PerformConditionCheckAI_NativeFunction);
        PerformConditionCheckAI_OwnerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PerformConditionCheckAI_NativeFunction, "OwnerController");
        PerformConditionCheckAI_ControlledPawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PerformConditionCheckAI_NativeFunction, "ControlledPawn");
        PerformConditionCheckAI_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PerformConditionCheckAI_NativeFunction, "ReturnValue");
        
        IntPtr PerformConditionCheck_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PerformConditionCheck");
        PerformConditionCheck_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PerformConditionCheck_NativeFunction);
        PerformConditionCheck_OwnerActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PerformConditionCheck_NativeFunction, "OwnerActor");
        PerformConditionCheck_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PerformConditionCheck_NativeFunction, "ReturnValue");
        
        
    }
    
    protected BTDecorator_BlueprintBase(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StrProperty /Script/AIModule.BTDecorator_BlueprintBase:CustomDescription
    static readonly int CustomDescription_Offset;
    static readonly IntPtr CustomDescription_NativeProperty;
    
    public string CustomDescription
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,CustomDescription_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,CustomDescription_Offset),0,this,value);
        }
    }
    
    // Function /Script/AIModule.BTDecorator_BlueprintBase:IsDecoratorObserverActive
    static readonly IntPtr IsDecoratorObserverActive_NativeFunction;
    static readonly int IsDecoratorObserverActive_ParamsSize;
    static readonly int IsDecoratorObserverActive_ReturnValue_Offset;
    
    protected bool IsDecoratorObserverActive()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsDecoratorObserverActive_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsDecoratorObserverActive_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsDecoratorObserverActive_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.BTDecorator_BlueprintBase:IsDecoratorExecutionActive
    static readonly IntPtr IsDecoratorExecutionActive_NativeFunction;
    static readonly int IsDecoratorExecutionActive_ParamsSize;
    static readonly int IsDecoratorExecutionActive_ReturnValue_Offset;
    
    protected bool IsDecoratorExecutionActive()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsDecoratorExecutionActive_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsDecoratorExecutionActive_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsDecoratorExecutionActive_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.BTDecorator_BlueprintBase:ReceiveTickAI
    IntPtr ReceiveTickAI_NativeFunction;
    static readonly int ReceiveTickAI_ParamsSize;
    static readonly int ReceiveTickAI_OwnerController_Offset;
    static readonly int ReceiveTickAI_ControlledPawn_Offset;
    static readonly int ReceiveTickAI_DeltaSeconds_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void ReceiveTickAI(UnrealSharp.AIModule.AIController ownerController, UnrealSharp.Engine.Pawn controlledPawn, float deltaSeconds)
    {
        unsafe
        {
            if (ReceiveTickAI_NativeFunction == IntPtr.Zero)
            {
                ReceiveTickAI_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveTickAI");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveTickAI_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.AIModule.AIController>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveTickAI_OwnerController_Offset), 0, null, ownerController);
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveTickAI_ControlledPawn_Offset), 0, null, controlledPawn);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveTickAI_DeltaSeconds_Offset), 0, null, deltaSeconds);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveTickAI_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveTickAI_Implementation(UnrealSharp.AIModule.AIController ownerController, UnrealSharp.Engine.Pawn controlledPawn, float deltaSeconds)
    {
    }
    void Invoke_ReceiveTickAI(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.AIModule.AIController ownerController = ObjectMarshaller<UnrealSharp.AIModule.AIController>.FromNative(IntPtr.Add(buffer, ReceiveTickAI_OwnerController_Offset), 0, null);
            UnrealSharp.Engine.Pawn controlledPawn = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(buffer, ReceiveTickAI_ControlledPawn_Offset), 0, null);
            float deltaSeconds = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, ReceiveTickAI_DeltaSeconds_Offset), 0, null);
            ReceiveTickAI_Implementation(ownerController, controlledPawn, deltaSeconds);
        }
    }
    
    // Function /Script/AIModule.BTDecorator_BlueprintBase:ReceiveTick
    IntPtr ReceiveTick_NativeFunction;
    static readonly int ReceiveTick_ParamsSize;
    static readonly int ReceiveTick_OwnerActor_Offset;
    static readonly int ReceiveTick_DeltaSeconds_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void ReceiveTick(UnrealSharp.Engine.Actor ownerActor, float deltaSeconds)
    {
        unsafe
        {
            if (ReceiveTick_NativeFunction == IntPtr.Zero)
            {
                ReceiveTick_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveTick");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveTick_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveTick_OwnerActor_Offset), 0, null, ownerActor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveTick_DeltaSeconds_Offset), 0, null, deltaSeconds);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveTick_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveTick_Implementation(UnrealSharp.Engine.Actor ownerActor, float deltaSeconds)
    {
    }
    void Invoke_ReceiveTick(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Actor ownerActor = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, ReceiveTick_OwnerActor_Offset), 0, null);
            float deltaSeconds = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, ReceiveTick_DeltaSeconds_Offset), 0, null);
            ReceiveTick_Implementation(ownerActor, deltaSeconds);
        }
    }
    
    // Function /Script/AIModule.BTDecorator_BlueprintBase:ReceiveObserverDeactivatedAI
    IntPtr ReceiveObserverDeactivatedAI_NativeFunction;
    static readonly int ReceiveObserverDeactivatedAI_ParamsSize;
    static readonly int ReceiveObserverDeactivatedAI_OwnerController_Offset;
    static readonly int ReceiveObserverDeactivatedAI_ControlledPawn_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void ReceiveObserverDeactivatedAI(UnrealSharp.AIModule.AIController ownerController, UnrealSharp.Engine.Pawn controlledPawn)
    {
        unsafe
        {
            if (ReceiveObserverDeactivatedAI_NativeFunction == IntPtr.Zero)
            {
                ReceiveObserverDeactivatedAI_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveObserverDeactivatedAI");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveObserverDeactivatedAI_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.AIModule.AIController>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveObserverDeactivatedAI_OwnerController_Offset), 0, null, ownerController);
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveObserverDeactivatedAI_ControlledPawn_Offset), 0, null, controlledPawn);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveObserverDeactivatedAI_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveObserverDeactivatedAI_Implementation(UnrealSharp.AIModule.AIController ownerController, UnrealSharp.Engine.Pawn controlledPawn)
    {
    }
    void Invoke_ReceiveObserverDeactivatedAI(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.AIModule.AIController ownerController = ObjectMarshaller<UnrealSharp.AIModule.AIController>.FromNative(IntPtr.Add(buffer, ReceiveObserverDeactivatedAI_OwnerController_Offset), 0, null);
            UnrealSharp.Engine.Pawn controlledPawn = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(buffer, ReceiveObserverDeactivatedAI_ControlledPawn_Offset), 0, null);
            ReceiveObserverDeactivatedAI_Implementation(ownerController, controlledPawn);
        }
    }
    
    // Function /Script/AIModule.BTDecorator_BlueprintBase:ReceiveObserverDeactivated
    IntPtr ReceiveObserverDeactivated_NativeFunction;
    static readonly int ReceiveObserverDeactivated_ParamsSize;
    static readonly int ReceiveObserverDeactivated_OwnerActor_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void ReceiveObserverDeactivated(UnrealSharp.Engine.Actor ownerActor)
    {
        unsafe
        {
            if (ReceiveObserverDeactivated_NativeFunction == IntPtr.Zero)
            {
                ReceiveObserverDeactivated_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveObserverDeactivated");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveObserverDeactivated_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveObserverDeactivated_OwnerActor_Offset), 0, null, ownerActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveObserverDeactivated_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveObserverDeactivated_Implementation(UnrealSharp.Engine.Actor ownerActor)
    {
    }
    void Invoke_ReceiveObserverDeactivated(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Actor ownerActor = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, ReceiveObserverDeactivated_OwnerActor_Offset), 0, null);
            ReceiveObserverDeactivated_Implementation(ownerActor);
        }
    }
    
    // Function /Script/AIModule.BTDecorator_BlueprintBase:ReceiveObserverActivatedAI
    IntPtr ReceiveObserverActivatedAI_NativeFunction;
    static readonly int ReceiveObserverActivatedAI_ParamsSize;
    static readonly int ReceiveObserverActivatedAI_OwnerController_Offset;
    static readonly int ReceiveObserverActivatedAI_ControlledPawn_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void ReceiveObserverActivatedAI(UnrealSharp.AIModule.AIController ownerController, UnrealSharp.Engine.Pawn controlledPawn)
    {
        unsafe
        {
            if (ReceiveObserverActivatedAI_NativeFunction == IntPtr.Zero)
            {
                ReceiveObserverActivatedAI_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveObserverActivatedAI");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveObserverActivatedAI_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.AIModule.AIController>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveObserverActivatedAI_OwnerController_Offset), 0, null, ownerController);
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveObserverActivatedAI_ControlledPawn_Offset), 0, null, controlledPawn);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveObserverActivatedAI_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveObserverActivatedAI_Implementation(UnrealSharp.AIModule.AIController ownerController, UnrealSharp.Engine.Pawn controlledPawn)
    {
    }
    void Invoke_ReceiveObserverActivatedAI(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.AIModule.AIController ownerController = ObjectMarshaller<UnrealSharp.AIModule.AIController>.FromNative(IntPtr.Add(buffer, ReceiveObserverActivatedAI_OwnerController_Offset), 0, null);
            UnrealSharp.Engine.Pawn controlledPawn = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(buffer, ReceiveObserverActivatedAI_ControlledPawn_Offset), 0, null);
            ReceiveObserverActivatedAI_Implementation(ownerController, controlledPawn);
        }
    }
    
    // Function /Script/AIModule.BTDecorator_BlueprintBase:ReceiveObserverActivated
    IntPtr ReceiveObserverActivated_NativeFunction;
    static readonly int ReceiveObserverActivated_ParamsSize;
    static readonly int ReceiveObserverActivated_OwnerActor_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void ReceiveObserverActivated(UnrealSharp.Engine.Actor ownerActor)
    {
        unsafe
        {
            if (ReceiveObserverActivated_NativeFunction == IntPtr.Zero)
            {
                ReceiveObserverActivated_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveObserverActivated");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveObserverActivated_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveObserverActivated_OwnerActor_Offset), 0, null, ownerActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveObserverActivated_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveObserverActivated_Implementation(UnrealSharp.Engine.Actor ownerActor)
    {
    }
    void Invoke_ReceiveObserverActivated(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Actor ownerActor = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, ReceiveObserverActivated_OwnerActor_Offset), 0, null);
            ReceiveObserverActivated_Implementation(ownerActor);
        }
    }
    
    // Function /Script/AIModule.BTDecorator_BlueprintBase:ReceiveExecutionStartAI
    IntPtr ReceiveExecutionStartAI_NativeFunction;
    static readonly int ReceiveExecutionStartAI_ParamsSize;
    static readonly int ReceiveExecutionStartAI_OwnerController_Offset;
    static readonly int ReceiveExecutionStartAI_ControlledPawn_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void ReceiveExecutionStartAI(UnrealSharp.AIModule.AIController ownerController, UnrealSharp.Engine.Pawn controlledPawn)
    {
        unsafe
        {
            if (ReceiveExecutionStartAI_NativeFunction == IntPtr.Zero)
            {
                ReceiveExecutionStartAI_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveExecutionStartAI");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveExecutionStartAI_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.AIModule.AIController>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveExecutionStartAI_OwnerController_Offset), 0, null, ownerController);
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveExecutionStartAI_ControlledPawn_Offset), 0, null, controlledPawn);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveExecutionStartAI_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveExecutionStartAI_Implementation(UnrealSharp.AIModule.AIController ownerController, UnrealSharp.Engine.Pawn controlledPawn)
    {
    }
    void Invoke_ReceiveExecutionStartAI(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.AIModule.AIController ownerController = ObjectMarshaller<UnrealSharp.AIModule.AIController>.FromNative(IntPtr.Add(buffer, ReceiveExecutionStartAI_OwnerController_Offset), 0, null);
            UnrealSharp.Engine.Pawn controlledPawn = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(buffer, ReceiveExecutionStartAI_ControlledPawn_Offset), 0, null);
            ReceiveExecutionStartAI_Implementation(ownerController, controlledPawn);
        }
    }
    
    // Function /Script/AIModule.BTDecorator_BlueprintBase:ReceiveExecutionStart
    IntPtr ReceiveExecutionStart_NativeFunction;
    static readonly int ReceiveExecutionStart_ParamsSize;
    static readonly int ReceiveExecutionStart_OwnerActor_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void ReceiveExecutionStart(UnrealSharp.Engine.Actor ownerActor)
    {
        unsafe
        {
            if (ReceiveExecutionStart_NativeFunction == IntPtr.Zero)
            {
                ReceiveExecutionStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveExecutionStart");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveExecutionStart_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveExecutionStart_OwnerActor_Offset), 0, null, ownerActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveExecutionStart_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveExecutionStart_Implementation(UnrealSharp.Engine.Actor ownerActor)
    {
    }
    void Invoke_ReceiveExecutionStart(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Actor ownerActor = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, ReceiveExecutionStart_OwnerActor_Offset), 0, null);
            ReceiveExecutionStart_Implementation(ownerActor);
        }
    }
    
    // Function /Script/AIModule.BTDecorator_BlueprintBase:ReceiveExecutionFinishAI
    IntPtr ReceiveExecutionFinishAI_NativeFunction;
    static readonly int ReceiveExecutionFinishAI_ParamsSize;
    static readonly int ReceiveExecutionFinishAI_OwnerController_Offset;
    static readonly int ReceiveExecutionFinishAI_ControlledPawn_Offset;
    static readonly int ReceiveExecutionFinishAI_NodeResult_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void ReceiveExecutionFinishAI(UnrealSharp.AIModule.AIController ownerController, UnrealSharp.Engine.Pawn controlledPawn, UnrealSharp.AIModule.EBTNodeResult nodeResult)
    {
        unsafe
        {
            if (ReceiveExecutionFinishAI_NativeFunction == IntPtr.Zero)
            {
                ReceiveExecutionFinishAI_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveExecutionFinishAI");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveExecutionFinishAI_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.AIModule.AIController>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveExecutionFinishAI_OwnerController_Offset), 0, null, ownerController);
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveExecutionFinishAI_ControlledPawn_Offset), 0, null, controlledPawn);
            BlittableMarshaller<UnrealSharp.AIModule.EBTNodeResult>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveExecutionFinishAI_NodeResult_Offset), 0, null, nodeResult);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveExecutionFinishAI_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveExecutionFinishAI_Implementation(UnrealSharp.AIModule.AIController ownerController, UnrealSharp.Engine.Pawn controlledPawn, UnrealSharp.AIModule.EBTNodeResult nodeResult)
    {
    }
    void Invoke_ReceiveExecutionFinishAI(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.AIModule.AIController ownerController = ObjectMarshaller<UnrealSharp.AIModule.AIController>.FromNative(IntPtr.Add(buffer, ReceiveExecutionFinishAI_OwnerController_Offset), 0, null);
            UnrealSharp.Engine.Pawn controlledPawn = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(buffer, ReceiveExecutionFinishAI_ControlledPawn_Offset), 0, null);
            UnrealSharp.AIModule.EBTNodeResult nodeResult = BlittableMarshaller<UnrealSharp.AIModule.EBTNodeResult>.FromNative(IntPtr.Add(buffer, ReceiveExecutionFinishAI_NodeResult_Offset), 0, null);
            ReceiveExecutionFinishAI_Implementation(ownerController, controlledPawn, nodeResult);
        }
    }
    
    // Function /Script/AIModule.BTDecorator_BlueprintBase:ReceiveExecutionFinish
    IntPtr ReceiveExecutionFinish_NativeFunction;
    static readonly int ReceiveExecutionFinish_ParamsSize;
    static readonly int ReceiveExecutionFinish_OwnerActor_Offset;
    static readonly int ReceiveExecutionFinish_NodeResult_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void ReceiveExecutionFinish(UnrealSharp.Engine.Actor ownerActor, UnrealSharp.AIModule.EBTNodeResult nodeResult)
    {
        unsafe
        {
            if (ReceiveExecutionFinish_NativeFunction == IntPtr.Zero)
            {
                ReceiveExecutionFinish_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveExecutionFinish");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveExecutionFinish_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveExecutionFinish_OwnerActor_Offset), 0, null, ownerActor);
            BlittableMarshaller<UnrealSharp.AIModule.EBTNodeResult>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveExecutionFinish_NodeResult_Offset), 0, null, nodeResult);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveExecutionFinish_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveExecutionFinish_Implementation(UnrealSharp.Engine.Actor ownerActor, UnrealSharp.AIModule.EBTNodeResult nodeResult)
    {
    }
    void Invoke_ReceiveExecutionFinish(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Actor ownerActor = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, ReceiveExecutionFinish_OwnerActor_Offset), 0, null);
            UnrealSharp.AIModule.EBTNodeResult nodeResult = BlittableMarshaller<UnrealSharp.AIModule.EBTNodeResult>.FromNative(IntPtr.Add(buffer, ReceiveExecutionFinish_NodeResult_Offset), 0, null);
            ReceiveExecutionFinish_Implementation(ownerActor, nodeResult);
        }
    }
    
    // Function /Script/AIModule.BTDecorator_BlueprintBase:PerformConditionCheckAI
    IntPtr PerformConditionCheckAI_NativeFunction;
    static readonly int PerformConditionCheckAI_ParamsSize;
    static readonly int PerformConditionCheckAI_OwnerController_Offset;
    static readonly int PerformConditionCheckAI_ControlledPawn_Offset;
    static readonly int PerformConditionCheckAI_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual bool PerformConditionCheckAI(UnrealSharp.AIModule.AIController ownerController, UnrealSharp.Engine.Pawn controlledPawn)
    {
        unsafe
        {
            if (PerformConditionCheckAI_NativeFunction == IntPtr.Zero)
            {
                PerformConditionCheckAI_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "PerformConditionCheckAI");
            }
            byte* ParamsBufferAllocation = stackalloc byte[PerformConditionCheckAI_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.AIModule.AIController>.ToNative(IntPtr.Add(ParamsBuffer, PerformConditionCheckAI_OwnerController_Offset), 0, null, ownerController);
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(ParamsBuffer, PerformConditionCheckAI_ControlledPawn_Offset), 0, null, controlledPawn);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PerformConditionCheckAI_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, PerformConditionCheckAI_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool PerformConditionCheckAI_Implementation(UnrealSharp.AIModule.AIController ownerController, UnrealSharp.Engine.Pawn controlledPawn)
    {
        return default(bool);
    }
    void Invoke_PerformConditionCheckAI(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.AIModule.AIController ownerController = ObjectMarshaller<UnrealSharp.AIModule.AIController>.FromNative(IntPtr.Add(buffer, PerformConditionCheckAI_OwnerController_Offset), 0, null);
            UnrealSharp.Engine.Pawn controlledPawn = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(buffer, PerformConditionCheckAI_ControlledPawn_Offset), 0, null);
            bool returnValue = PerformConditionCheckAI_Implementation(ownerController, controlledPawn);
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/AIModule.BTDecorator_BlueprintBase:PerformConditionCheck
    IntPtr PerformConditionCheck_NativeFunction;
    static readonly int PerformConditionCheck_ParamsSize;
    static readonly int PerformConditionCheck_OwnerActor_Offset;
    static readonly int PerformConditionCheck_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual bool PerformConditionCheck(UnrealSharp.Engine.Actor ownerActor)
    {
        unsafe
        {
            if (PerformConditionCheck_NativeFunction == IntPtr.Zero)
            {
                PerformConditionCheck_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "PerformConditionCheck");
            }
            byte* ParamsBufferAllocation = stackalloc byte[PerformConditionCheck_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, PerformConditionCheck_OwnerActor_Offset), 0, null, ownerActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PerformConditionCheck_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, PerformConditionCheck_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool PerformConditionCheck_Implementation(UnrealSharp.Engine.Actor ownerActor)
    {
        return default(bool);
    }
    void Invoke_PerformConditionCheck(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Actor ownerActor = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, PerformConditionCheck_OwnerActor_Offset), 0, null);
            bool returnValue = PerformConditionCheck_Implementation(ownerActor);
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    
}
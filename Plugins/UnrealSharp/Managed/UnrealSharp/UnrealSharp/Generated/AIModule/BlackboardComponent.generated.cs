// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AIModule;

[UClass]
public partial class BlackboardComponent : UnrealSharp.Engine.ActorComponent
{
    
    static BlackboardComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("BlackboardComponent");
        
        
        SetValueAsVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueAsVector");
        SetValueAsVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueAsVector_NativeFunction);
        SetValueAsVector_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueAsVector_NativeFunction, "KeyName");
        SetValueAsVector_VectorValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueAsVector_NativeFunction, "VectorValue");
        SetValueAsString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueAsString");
        SetValueAsString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueAsString_NativeFunction);
        SetValueAsString_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueAsString_NativeFunction, "KeyName");
        SetValueAsString_StringValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueAsString_NativeFunction, "StringValue");
        SetValueAsRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueAsRotator");
        SetValueAsRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueAsRotator_NativeFunction);
        SetValueAsRotator_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueAsRotator_NativeFunction, "KeyName");
        SetValueAsRotator_VectorValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueAsRotator_NativeFunction, "VectorValue");
        SetValueAsObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueAsObject");
        SetValueAsObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueAsObject_NativeFunction);
        SetValueAsObject_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueAsObject_NativeFunction, "KeyName");
        SetValueAsObject_ObjectValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueAsObject_NativeFunction, "ObjectValue");
        SetValueAsName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueAsName");
        SetValueAsName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueAsName_NativeFunction);
        SetValueAsName_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueAsName_NativeFunction, "KeyName");
        SetValueAsName_NameValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueAsName_NativeFunction, "NameValue");
        SetValueAsInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueAsInt");
        SetValueAsInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueAsInt_NativeFunction);
        SetValueAsInt_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueAsInt_NativeFunction, "KeyName");
        SetValueAsInt_IntValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueAsInt_NativeFunction, "IntValue");
        SetValueAsFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueAsFloat");
        SetValueAsFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueAsFloat_NativeFunction);
        SetValueAsFloat_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueAsFloat_NativeFunction, "KeyName");
        SetValueAsFloat_FloatValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueAsFloat_NativeFunction, "FloatValue");
        SetValueAsEnum_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueAsEnum");
        SetValueAsEnum_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueAsEnum_NativeFunction);
        SetValueAsEnum_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueAsEnum_NativeFunction, "KeyName");
        SetValueAsEnum_EnumValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueAsEnum_NativeFunction, "EnumValue");
        SetValueAsClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueAsClass");
        SetValueAsClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueAsClass_NativeFunction);
        SetValueAsClass_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueAsClass_NativeFunction, "KeyName");
        SetValueAsClass_ClassValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueAsClass_NativeFunction, "ClassValue");
        SetValueAsBool_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueAsBool");
        SetValueAsBool_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueAsBool_NativeFunction);
        SetValueAsBool_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueAsBool_NativeFunction, "KeyName");
        SetValueAsBool_BoolValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueAsBool_NativeFunction, "BoolValue");
        IsVectorValueSet_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsVectorValueSet");
        IsVectorValueSet_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsVectorValueSet_NativeFunction);
        IsVectorValueSet_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsVectorValueSet_NativeFunction, "KeyName");
        IsVectorValueSet_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsVectorValueSet_NativeFunction, "ReturnValue");
        GetValueAsVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueAsVector");
        GetValueAsVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueAsVector_NativeFunction);
        GetValueAsVector_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueAsVector_NativeFunction, "KeyName");
        GetValueAsVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueAsVector_NativeFunction, "ReturnValue");
        GetValueAsString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueAsString");
        GetValueAsString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueAsString_NativeFunction);
        GetValueAsString_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueAsString_NativeFunction, "KeyName");
        GetValueAsString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueAsString_NativeFunction, "ReturnValue");
        GetValueAsRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueAsRotator");
        GetValueAsRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueAsRotator_NativeFunction);
        GetValueAsRotator_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueAsRotator_NativeFunction, "KeyName");
        GetValueAsRotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueAsRotator_NativeFunction, "ReturnValue");
        GetValueAsObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueAsObject");
        GetValueAsObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueAsObject_NativeFunction);
        GetValueAsObject_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueAsObject_NativeFunction, "KeyName");
        GetValueAsObject_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueAsObject_NativeFunction, "ReturnValue");
        GetValueAsName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueAsName");
        GetValueAsName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueAsName_NativeFunction);
        GetValueAsName_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueAsName_NativeFunction, "KeyName");
        GetValueAsName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueAsName_NativeFunction, "ReturnValue");
        GetValueAsInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueAsInt");
        GetValueAsInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueAsInt_NativeFunction);
        GetValueAsInt_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueAsInt_NativeFunction, "KeyName");
        GetValueAsInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueAsInt_NativeFunction, "ReturnValue");
        GetValueAsFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueAsFloat");
        GetValueAsFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueAsFloat_NativeFunction);
        GetValueAsFloat_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueAsFloat_NativeFunction, "KeyName");
        GetValueAsFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueAsFloat_NativeFunction, "ReturnValue");
        GetValueAsEnum_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueAsEnum");
        GetValueAsEnum_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueAsEnum_NativeFunction);
        GetValueAsEnum_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueAsEnum_NativeFunction, "KeyName");
        GetValueAsEnum_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueAsEnum_NativeFunction, "ReturnValue");
        GetValueAsClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueAsClass");
        GetValueAsClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueAsClass_NativeFunction);
        GetValueAsClass_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueAsClass_NativeFunction, "KeyName");
        GetValueAsClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueAsClass_NativeFunction, "ReturnValue");
        GetValueAsBool_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueAsBool");
        GetValueAsBool_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueAsBool_NativeFunction);
        GetValueAsBool_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueAsBool_NativeFunction, "KeyName");
        GetValueAsBool_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueAsBool_NativeFunction, "ReturnValue");
        GetRotationFromEntry_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRotationFromEntry");
        GetRotationFromEntry_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRotationFromEntry_NativeFunction);
        GetRotationFromEntry_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotationFromEntry_NativeFunction, "KeyName");
        GetRotationFromEntry_ResultRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotationFromEntry_NativeFunction, "ResultRotation");
        GetRotationFromEntry_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotationFromEntry_NativeFunction, "ReturnValue");
        GetLocationFromEntry_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocationFromEntry");
        GetLocationFromEntry_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocationFromEntry_NativeFunction);
        GetLocationFromEntry_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocationFromEntry_NativeFunction, "KeyName");
        GetLocationFromEntry_ResultLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocationFromEntry_NativeFunction, "ResultLocation");
        GetLocationFromEntry_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocationFromEntry_NativeFunction, "ReturnValue");
        ClearValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearValue");
        ClearValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClearValue_NativeFunction);
        ClearValue_KeyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearValue_NativeFunction, "KeyName");
        
        
    }
    
    protected BlackboardComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AIModule.BlackboardComponent:SetValueAsVector
    static readonly IntPtr SetValueAsVector_NativeFunction;
    static readonly int SetValueAsVector_ParamsSize;
    static readonly int SetValueAsVector_KeyName_Offset;
    static readonly int SetValueAsVector_VectorValue_Offset;
    
    public void SetValueAsVector(Name keyName, System.DoubleNumerics.Vector3 vectorValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueAsVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetValueAsVector_KeyName_Offset), 0, null, keyName);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetValueAsVector_VectorValue_Offset), 0, null, vectorValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetValueAsVector_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:SetValueAsString
    static readonly IntPtr SetValueAsString_NativeFunction;
    static readonly int SetValueAsString_ParamsSize;
    static readonly int SetValueAsString_KeyName_Offset;
    static readonly int SetValueAsString_StringValue_Offset;
    
    public void SetValueAsString(Name keyName, string stringValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueAsString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetValueAsString_KeyName_Offset), 0, null, keyName);
            IntPtr StringValue_NativePtr = IntPtr.Add(ParamsBuffer,SetValueAsString_StringValue_Offset);
            StringMarshaller.ToNative(StringValue_NativePtr,0,null,stringValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetValueAsString_NativeFunction, ParamsBuffer);
            
            
            StringMarshaller.DestructInstance(StringValue_NativePtr, 0);
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:SetValueAsRotator
    static readonly IntPtr SetValueAsRotator_NativeFunction;
    static readonly int SetValueAsRotator_ParamsSize;
    static readonly int SetValueAsRotator_KeyName_Offset;
    static readonly int SetValueAsRotator_VectorValue_Offset;
    
    public void SetValueAsRotator(Name keyName, UnrealSharp.Rotator vectorValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueAsRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetValueAsRotator_KeyName_Offset), 0, null, keyName);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SetValueAsRotator_VectorValue_Offset), 0, null, vectorValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetValueAsRotator_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:SetValueAsObject
    static readonly IntPtr SetValueAsObject_NativeFunction;
    static readonly int SetValueAsObject_ParamsSize;
    static readonly int SetValueAsObject_KeyName_Offset;
    static readonly int SetValueAsObject_ObjectValue_Offset;
    
    public void SetValueAsObject(Name keyName, UnrealSharp.CoreUObject.Object objectValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueAsObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetValueAsObject_KeyName_Offset), 0, null, keyName);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetValueAsObject_ObjectValue_Offset), 0, null, objectValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetValueAsObject_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:SetValueAsName
    static readonly IntPtr SetValueAsName_NativeFunction;
    static readonly int SetValueAsName_ParamsSize;
    static readonly int SetValueAsName_KeyName_Offset;
    static readonly int SetValueAsName_NameValue_Offset;
    
    public void SetValueAsName(Name keyName, Name nameValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueAsName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetValueAsName_KeyName_Offset), 0, null, keyName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetValueAsName_NameValue_Offset), 0, null, nameValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetValueAsName_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:SetValueAsInt
    static readonly IntPtr SetValueAsInt_NativeFunction;
    static readonly int SetValueAsInt_ParamsSize;
    static readonly int SetValueAsInt_KeyName_Offset;
    static readonly int SetValueAsInt_IntValue_Offset;
    
    public void SetValueAsInt(Name keyName, int intValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueAsInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetValueAsInt_KeyName_Offset), 0, null, keyName);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetValueAsInt_IntValue_Offset), 0, null, intValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetValueAsInt_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:SetValueAsFloat
    static readonly IntPtr SetValueAsFloat_NativeFunction;
    static readonly int SetValueAsFloat_ParamsSize;
    static readonly int SetValueAsFloat_KeyName_Offset;
    static readonly int SetValueAsFloat_FloatValue_Offset;
    
    public void SetValueAsFloat(Name keyName, float floatValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueAsFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetValueAsFloat_KeyName_Offset), 0, null, keyName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetValueAsFloat_FloatValue_Offset), 0, null, floatValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetValueAsFloat_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:SetValueAsEnum
    static readonly IntPtr SetValueAsEnum_NativeFunction;
    static readonly int SetValueAsEnum_ParamsSize;
    static readonly int SetValueAsEnum_KeyName_Offset;
    static readonly int SetValueAsEnum_EnumValue_Offset;
    
    public void SetValueAsEnum(Name keyName, byte enumValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueAsEnum_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetValueAsEnum_KeyName_Offset), 0, null, keyName);
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, SetValueAsEnum_EnumValue_Offset), 0, null, enumValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetValueAsEnum_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:SetValueAsClass
    static readonly IntPtr SetValueAsClass_NativeFunction;
    static readonly int SetValueAsClass_ParamsSize;
    static readonly int SetValueAsClass_KeyName_Offset;
    static readonly int SetValueAsClass_ClassValue_Offset;
    
    public void SetValueAsClass(Name keyName, SubclassOf<UnrealSharp.CoreUObject.Object> classValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueAsClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetValueAsClass_KeyName_Offset), 0, null, keyName);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetValueAsClass_ClassValue_Offset), 0, null, classValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetValueAsClass_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:SetValueAsBool
    static readonly IntPtr SetValueAsBool_NativeFunction;
    static readonly int SetValueAsBool_ParamsSize;
    static readonly int SetValueAsBool_KeyName_Offset;
    static readonly int SetValueAsBool_BoolValue_Offset;
    
    public void SetValueAsBool(Name keyName, bool boolValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueAsBool_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetValueAsBool_KeyName_Offset), 0, null, keyName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetValueAsBool_BoolValue_Offset), 0, null, boolValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetValueAsBool_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:IsVectorValueSet
    static readonly IntPtr IsVectorValueSet_NativeFunction;
    static readonly int IsVectorValueSet_ParamsSize;
    static readonly int IsVectorValueSet_KeyName_Offset;
    static readonly int IsVectorValueSet_ReturnValue_Offset;
    
    public bool IsVectorValueSet(Name keyName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsVectorValueSet_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, IsVectorValueSet_KeyName_Offset), 0, null, keyName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsVectorValueSet_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsVectorValueSet_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:GetValueAsVector
    static readonly IntPtr GetValueAsVector_NativeFunction;
    static readonly int GetValueAsVector_ParamsSize;
    static readonly int GetValueAsVector_KeyName_Offset;
    static readonly int GetValueAsVector_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetValueAsVector(Name keyName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueAsVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetValueAsVector_KeyName_Offset), 0, null, keyName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetValueAsVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetValueAsVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:GetValueAsString
    static readonly IntPtr GetValueAsString_NativeFunction;
    static readonly int GetValueAsString_ParamsSize;
    static readonly int GetValueAsString_KeyName_Offset;
    static readonly int GetValueAsString_ReturnValue_Offset;
    
    public string GetValueAsString(Name keyName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueAsString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetValueAsString_KeyName_Offset), 0, null, keyName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetValueAsString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetValueAsString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:GetValueAsRotator
    static readonly IntPtr GetValueAsRotator_NativeFunction;
    static readonly int GetValueAsRotator_ParamsSize;
    static readonly int GetValueAsRotator_KeyName_Offset;
    static readonly int GetValueAsRotator_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetValueAsRotator(Name keyName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueAsRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetValueAsRotator_KeyName_Offset), 0, null, keyName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetValueAsRotator_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetValueAsRotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:GetValueAsObject
    static readonly IntPtr GetValueAsObject_NativeFunction;
    static readonly int GetValueAsObject_ParamsSize;
    static readonly int GetValueAsObject_KeyName_Offset;
    static readonly int GetValueAsObject_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.Object GetValueAsObject(Name keyName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueAsObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetValueAsObject_KeyName_Offset), 0, null, keyName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetValueAsObject_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Object returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetValueAsObject_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:GetValueAsName
    static readonly IntPtr GetValueAsName_NativeFunction;
    static readonly int GetValueAsName_ParamsSize;
    static readonly int GetValueAsName_KeyName_Offset;
    static readonly int GetValueAsName_ReturnValue_Offset;
    
    public Name GetValueAsName(Name keyName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueAsName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetValueAsName_KeyName_Offset), 0, null, keyName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetValueAsName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetValueAsName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:GetValueAsInt
    static readonly IntPtr GetValueAsInt_NativeFunction;
    static readonly int GetValueAsInt_ParamsSize;
    static readonly int GetValueAsInt_KeyName_Offset;
    static readonly int GetValueAsInt_ReturnValue_Offset;
    
    public int GetValueAsInt(Name keyName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueAsInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetValueAsInt_KeyName_Offset), 0, null, keyName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetValueAsInt_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetValueAsInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:GetValueAsFloat
    static readonly IntPtr GetValueAsFloat_NativeFunction;
    static readonly int GetValueAsFloat_ParamsSize;
    static readonly int GetValueAsFloat_KeyName_Offset;
    static readonly int GetValueAsFloat_ReturnValue_Offset;
    
    public float GetValueAsFloat(Name keyName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueAsFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetValueAsFloat_KeyName_Offset), 0, null, keyName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetValueAsFloat_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetValueAsFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:GetValueAsEnum
    static readonly IntPtr GetValueAsEnum_NativeFunction;
    static readonly int GetValueAsEnum_ParamsSize;
    static readonly int GetValueAsEnum_KeyName_Offset;
    static readonly int GetValueAsEnum_ReturnValue_Offset;
    
    public byte GetValueAsEnum(Name keyName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueAsEnum_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetValueAsEnum_KeyName_Offset), 0, null, keyName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetValueAsEnum_NativeFunction, ParamsBuffer);
            
            byte returnValue;
            returnValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, GetValueAsEnum_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:GetValueAsClass
    static readonly IntPtr GetValueAsClass_NativeFunction;
    static readonly int GetValueAsClass_ParamsSize;
    static readonly int GetValueAsClass_KeyName_Offset;
    static readonly int GetValueAsClass_ReturnValue_Offset;
    
    public SubclassOf<UnrealSharp.CoreUObject.Object> GetValueAsClass(Name keyName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueAsClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetValueAsClass_KeyName_Offset), 0, null, keyName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetValueAsClass_NativeFunction, ParamsBuffer);
            
            SubclassOf<UnrealSharp.CoreUObject.Object> returnValue;
            returnValue = SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetValueAsClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:GetValueAsBool
    static readonly IntPtr GetValueAsBool_NativeFunction;
    static readonly int GetValueAsBool_ParamsSize;
    static readonly int GetValueAsBool_KeyName_Offset;
    static readonly int GetValueAsBool_ReturnValue_Offset;
    
    public bool GetValueAsBool(Name keyName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueAsBool_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetValueAsBool_KeyName_Offset), 0, null, keyName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetValueAsBool_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetValueAsBool_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:GetRotationFromEntry
    static readonly IntPtr GetRotationFromEntry_NativeFunction;
    static readonly int GetRotationFromEntry_ParamsSize;
    static readonly int GetRotationFromEntry_KeyName_Offset;
    static readonly int GetRotationFromEntry_ResultRotation_Offset;
    static readonly int GetRotationFromEntry_ReturnValue_Offset;
    
    public bool GetRotationFromEntry(Name keyName, out UnrealSharp.Rotator resultRotation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRotationFromEntry_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetRotationFromEntry_KeyName_Offset), 0, null, keyName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRotationFromEntry_NativeFunction, ParamsBuffer);
            
            resultRotation = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetRotationFromEntry_ResultRotation_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetRotationFromEntry_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:GetLocationFromEntry
    static readonly IntPtr GetLocationFromEntry_NativeFunction;
    static readonly int GetLocationFromEntry_ParamsSize;
    static readonly int GetLocationFromEntry_KeyName_Offset;
    static readonly int GetLocationFromEntry_ResultLocation_Offset;
    static readonly int GetLocationFromEntry_ReturnValue_Offset;
    
    public bool GetLocationFromEntry(Name keyName, out System.DoubleNumerics.Vector3 resultLocation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocationFromEntry_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLocationFromEntry_KeyName_Offset), 0, null, keyName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLocationFromEntry_NativeFunction, ParamsBuffer);
            
            resultLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLocationFromEntry_ResultLocation_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetLocationFromEntry_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.BlackboardComponent:ClearValue
    static readonly IntPtr ClearValue_NativeFunction;
    static readonly int ClearValue_ParamsSize;
    static readonly int ClearValue_KeyName_Offset;
    
    public void ClearValue(Name keyName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClearValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ClearValue_KeyName_Offset), 0, null, keyName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearValue_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    
}
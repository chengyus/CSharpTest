// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AIModule;

[UClass]
public partial class BrainComponent : UnrealSharp.Engine.ActorComponent
{
    
    static BrainComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("BrainComponent");
        
        
        StopLogic_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopLogic");
        StopLogic_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StopLogic_NativeFunction);
        StopLogic_Reason_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopLogic_NativeFunction, "Reason");
        StartLogic_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartLogic");
        RestartLogic_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RestartLogic");
        IsRunning_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsRunning");
        IsRunning_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsRunning_NativeFunction);
        IsRunning_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsRunning_NativeFunction, "ReturnValue");
        IsPaused_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPaused");
        IsPaused_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPaused_NativeFunction);
        IsPaused_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPaused_NativeFunction, "ReturnValue");
        
        
    }
    
    protected BrainComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AIModule.BrainComponent:StopLogic
    static readonly IntPtr StopLogic_NativeFunction;
    static readonly int StopLogic_ParamsSize;
    static readonly int StopLogic_Reason_Offset;
    
    public void StopLogic(string reason)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StopLogic_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Reason_NativePtr = IntPtr.Add(ParamsBuffer,StopLogic_Reason_Offset);
            StringMarshaller.ToNative(Reason_NativePtr,0,null,reason);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopLogic_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Reason_NativePtr, 0);
        }
    }
    
    // Function /Script/AIModule.BrainComponent:StartLogic
    static readonly IntPtr StartLogic_NativeFunction;
    
    public void StartLogic()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StartLogic_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/AIModule.BrainComponent:RestartLogic
    static readonly IntPtr RestartLogic_NativeFunction;
    
    public void RestartLogic()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RestartLogic_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/AIModule.BrainComponent:IsRunning
    static readonly IntPtr IsRunning_NativeFunction;
    static readonly int IsRunning_ParamsSize;
    static readonly int IsRunning_ReturnValue_Offset;
    
    public bool IsRunning()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsRunning_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsRunning_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsRunning_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.BrainComponent:IsPaused
    static readonly IntPtr IsPaused_NativeFunction;
    static readonly int IsPaused_ParamsSize;
    static readonly int IsPaused_ReturnValue_Offset;
    
    public bool IsPaused()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPaused_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsPaused_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPaused_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
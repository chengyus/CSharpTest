// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AIModule;

[UClass]
abstract public partial class EnvQueryContext_BlueprintBase : UnrealSharp.AIModule.EnvQueryContext
{
    
    static EnvQueryContext_BlueprintBase()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("EnvQueryContext_BlueprintBase");
        
        
        
        IntPtr ProvideSingleLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ProvideSingleLocation");
        ProvideSingleLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ProvideSingleLocation_NativeFunction);
        ProvideSingleLocation_QuerierObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProvideSingleLocation_NativeFunction, "QuerierObject");
        ProvideSingleLocation_QuerierActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProvideSingleLocation_NativeFunction, "QuerierActor");
        ProvideSingleLocation_ResultingLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProvideSingleLocation_NativeFunction, "ResultingLocation");
        
        IntPtr ProvideSingleActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ProvideSingleActor");
        ProvideSingleActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ProvideSingleActor_NativeFunction);
        ProvideSingleActor_QuerierObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProvideSingleActor_NativeFunction, "QuerierObject");
        ProvideSingleActor_QuerierActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProvideSingleActor_NativeFunction, "QuerierActor");
        ProvideSingleActor_ResultingActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProvideSingleActor_NativeFunction, "ResultingActor");
        
        IntPtr ProvideLocationsSet_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ProvideLocationsSet");
        ProvideLocationsSet_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ProvideLocationsSet_NativeFunction);
        ProvideLocationsSet_QuerierObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProvideLocationsSet_NativeFunction, "QuerierObject");
        ProvideLocationsSet_QuerierActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProvideLocationsSet_NativeFunction, "QuerierActor");
        ProvideLocationsSet_ResultingLocationSet_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProvideLocationsSet_NativeFunction, "ResultingLocationSet");
        ProvideLocationsSet_ResultingLocationSet_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ProvideLocationsSet_NativeFunction, "ResultingLocationSet");
        
        IntPtr ProvideActorsSet_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ProvideActorsSet");
        ProvideActorsSet_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ProvideActorsSet_NativeFunction);
        ProvideActorsSet_QuerierObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProvideActorsSet_NativeFunction, "QuerierObject");
        ProvideActorsSet_QuerierActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProvideActorsSet_NativeFunction, "QuerierActor");
        ProvideActorsSet_ResultingActorsSet_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProvideActorsSet_NativeFunction, "ResultingActorsSet");
        ProvideActorsSet_ResultingActorsSet_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ProvideActorsSet_NativeFunction, "ResultingActorsSet");
        
        
    }
    
    protected EnvQueryContext_BlueprintBase(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AIModule.EnvQueryContext_BlueprintBase:ProvideSingleLocation
    IntPtr ProvideSingleLocation_NativeFunction;
    static readonly int ProvideSingleLocation_ParamsSize;
    static readonly int ProvideSingleLocation_QuerierObject_Offset;
    static readonly int ProvideSingleLocation_QuerierActor_Offset;
    static readonly int ProvideSingleLocation_ResultingLocation_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ProvideSingleLocation(UnrealSharp.CoreUObject.Object querierObject, UnrealSharp.Engine.Actor querierActor, out System.DoubleNumerics.Vector3 resultingLocation)
    {
        unsafe
        {
            if (ProvideSingleLocation_NativeFunction == IntPtr.Zero)
            {
                ProvideSingleLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ProvideSingleLocation");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ProvideSingleLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ProvideSingleLocation_QuerierObject_Offset), 0, null, querierObject);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ProvideSingleLocation_QuerierActor_Offset), 0, null, querierActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ProvideSingleLocation_NativeFunction, ParamsBuffer);
            
            resultingLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, ProvideSingleLocation_ResultingLocation_Offset), 0, null);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ProvideSingleLocation_Implementation(UnrealSharp.CoreUObject.Object querierObject, UnrealSharp.Engine.Actor querierActor, out System.DoubleNumerics.Vector3 resultingLocation)
    {
        resultingLocation = default(System.DoubleNumerics.Vector3);
    }
    void Invoke_ProvideSingleLocation(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.CoreUObject.Object querierObject = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(buffer, ProvideSingleLocation_QuerierObject_Offset), 0, null);
            UnrealSharp.Engine.Actor querierActor = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, ProvideSingleLocation_QuerierActor_Offset), 0, null);
            System.DoubleNumerics.Vector3 resultingLocation = default;
            ProvideSingleLocation_Implementation(querierObject, querierActor, out resultingLocation);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(buffer, ProvideSingleLocation_ResultingLocation_Offset), 0, null, resultingLocation);
        }
    }
    
    // Function /Script/AIModule.EnvQueryContext_BlueprintBase:ProvideSingleActor
    IntPtr ProvideSingleActor_NativeFunction;
    static readonly int ProvideSingleActor_ParamsSize;
    static readonly int ProvideSingleActor_QuerierObject_Offset;
    static readonly int ProvideSingleActor_QuerierActor_Offset;
    static readonly int ProvideSingleActor_ResultingActor_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ProvideSingleActor(UnrealSharp.CoreUObject.Object querierObject, UnrealSharp.Engine.Actor querierActor, out UnrealSharp.Engine.Actor resultingActor)
    {
        unsafe
        {
            if (ProvideSingleActor_NativeFunction == IntPtr.Zero)
            {
                ProvideSingleActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ProvideSingleActor");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ProvideSingleActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ProvideSingleActor_QuerierObject_Offset), 0, null, querierObject);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ProvideSingleActor_QuerierActor_Offset), 0, null, querierActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ProvideSingleActor_NativeFunction, ParamsBuffer);
            
            resultingActor = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(ParamsBuffer, ProvideSingleActor_ResultingActor_Offset), 0, null);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ProvideSingleActor_Implementation(UnrealSharp.CoreUObject.Object querierObject, UnrealSharp.Engine.Actor querierActor, out UnrealSharp.Engine.Actor resultingActor)
    {
        resultingActor = default(UnrealSharp.Engine.Actor);
    }
    void Invoke_ProvideSingleActor(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.CoreUObject.Object querierObject = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(buffer, ProvideSingleActor_QuerierObject_Offset), 0, null);
            UnrealSharp.Engine.Actor querierActor = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, ProvideSingleActor_QuerierActor_Offset), 0, null);
            UnrealSharp.Engine.Actor resultingActor = default;
            ProvideSingleActor_Implementation(querierObject, querierActor, out resultingActor);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(buffer, ProvideSingleActor_ResultingActor_Offset), 0, null, resultingActor);
        }
    }
    
    // Function /Script/AIModule.EnvQueryContext_BlueprintBase:ProvideLocationsSet
    IntPtr ProvideLocationsSet_NativeFunction;
    static readonly int ProvideLocationsSet_ParamsSize;
    static readonly int ProvideLocationsSet_QuerierObject_Offset;
    static readonly int ProvideLocationsSet_QuerierActor_Offset;
    static readonly int ProvideLocationsSet_ResultingLocationSet_Offset;
    static readonly int ProvideLocationsSet_ResultingLocationSet_ElementSize;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ProvideLocationsSet(UnrealSharp.CoreUObject.Object querierObject, UnrealSharp.Engine.Actor querierActor, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> resultingLocationSet)
    {
        unsafe
        {
            if (ProvideLocationsSet_NativeFunction == IntPtr.Zero)
            {
                ProvideLocationsSet_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ProvideLocationsSet");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ProvideLocationsSet_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ProvideLocationsSet_QuerierObject_Offset), 0, null, querierObject);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ProvideLocationsSet_QuerierActor_Offset), 0, null, querierActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ProvideLocationsSet_NativeFunction, ParamsBuffer);
            
            IntPtr ResultingLocationSet_NativeBuffer = IntPtr.Add(ParamsBuffer, ProvideLocationsSet_ResultingLocationSet_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> ResultingLocationSet_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, ProvideLocationsSet_ResultingLocationSet_ElementSize);
            resultingLocationSet = ResultingLocationSet_Marshaler.FromNative(ResultingLocationSet_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(ResultingLocationSet_NativeBuffer, 0);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ProvideLocationsSet_Implementation(UnrealSharp.CoreUObject.Object querierObject, UnrealSharp.Engine.Actor querierActor, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> resultingLocationSet)
    {
        resultingLocationSet = null;
    }
    void Invoke_ProvideLocationsSet(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.CoreUObject.Object querierObject = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(buffer, ProvideLocationsSet_QuerierObject_Offset), 0, null);
            UnrealSharp.Engine.Actor querierActor = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, ProvideLocationsSet_QuerierActor_Offset), 0, null);
            System.Collections.Generic.IList<System.DoubleNumerics.Vector3> resultingLocationSet = default;
            ProvideLocationsSet_Implementation(querierObject, querierActor, out resultingLocationSet);
            IntPtr ResultingLocationSet_NativeBuffer = IntPtr.Add(buffer, ProvideLocationsSet_ResultingLocationSet_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> ResultingLocationSet_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, ProvideLocationsSet_ResultingLocationSet_ElementSize);
            ResultingLocationSet_Marshaler.ToNative(ResultingLocationSet_NativeBuffer, 0, null, resultingLocationSet);
        }
    }
    
    // Function /Script/AIModule.EnvQueryContext_BlueprintBase:ProvideActorsSet
    IntPtr ProvideActorsSet_NativeFunction;
    static readonly int ProvideActorsSet_ParamsSize;
    static readonly int ProvideActorsSet_QuerierObject_Offset;
    static readonly int ProvideActorsSet_QuerierActor_Offset;
    static readonly int ProvideActorsSet_ResultingActorsSet_Offset;
    static readonly int ProvideActorsSet_ResultingActorsSet_ElementSize;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ProvideActorsSet(UnrealSharp.CoreUObject.Object querierObject, UnrealSharp.Engine.Actor querierActor, out System.Collections.Generic.IList<UnrealSharp.Engine.Actor> resultingActorsSet)
    {
        unsafe
        {
            if (ProvideActorsSet_NativeFunction == IntPtr.Zero)
            {
                ProvideActorsSet_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ProvideActorsSet");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ProvideActorsSet_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ProvideActorsSet_QuerierObject_Offset), 0, null, querierObject);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ProvideActorsSet_QuerierActor_Offset), 0, null, querierActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ProvideActorsSet_NativeFunction, ParamsBuffer);
            
            IntPtr ResultingActorsSet_NativeBuffer = IntPtr.Add(ParamsBuffer, ProvideActorsSet_ResultingActorsSet_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ResultingActorsSet_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, ProvideActorsSet_ResultingActorsSet_ElementSize);
            resultingActorsSet = ResultingActorsSet_Marshaler.FromNative(ResultingActorsSet_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(ResultingActorsSet_NativeBuffer, 0);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ProvideActorsSet_Implementation(UnrealSharp.CoreUObject.Object querierObject, UnrealSharp.Engine.Actor querierActor, out System.Collections.Generic.IList<UnrealSharp.Engine.Actor> resultingActorsSet)
    {
        resultingActorsSet = null;
    }
    void Invoke_ProvideActorsSet(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.CoreUObject.Object querierObject = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(buffer, ProvideActorsSet_QuerierObject_Offset), 0, null);
            UnrealSharp.Engine.Actor querierActor = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, ProvideActorsSet_QuerierActor_Offset), 0, null);
            System.Collections.Generic.IList<UnrealSharp.Engine.Actor> resultingActorsSet = default;
            ProvideActorsSet_Implementation(querierObject, querierActor, out resultingActorsSet);
            IntPtr ResultingActorsSet_NativeBuffer = IntPtr.Add(buffer, ProvideActorsSet_ResultingActorsSet_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ResultingActorsSet_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, ProvideActorsSet_ResultingActorsSet_ElementSize);
            ResultingActorsSet_Marshaler.ToNative(ResultingActorsSet_NativeBuffer, 0, null, resultingActorsSet);
        }
    }
    
    
}
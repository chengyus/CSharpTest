// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AIModule;

[UClass]
public partial class EnvQueryInstanceBlueprintWrapper : UnrealSharp.CoreUObject.Object
{
    
    static EnvQueryInstanceBlueprintWrapper()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("EnvQueryInstanceBlueprintWrapper");
        
        QueryID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "QueryID");
        ItemType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ItemType");
        OptionIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OptionIndex");
        
        SetNamedParam_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNamedParam");
        SetNamedParam_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNamedParam_NativeFunction);
        SetNamedParam_ParamName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNamedParam_NativeFunction, "ParamName");
        SetNamedParam_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNamedParam_NativeFunction, "Value");
        GetResultsAsLocations_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetResultsAsLocations");
        GetResultsAsLocations_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetResultsAsLocations_NativeFunction);
        GetResultsAsLocations_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetResultsAsLocations_NativeFunction, "ReturnValue");
        GetResultsAsLocations_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetResultsAsLocations_NativeFunction, "ReturnValue");
        GetResultsAsActors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetResultsAsActors");
        GetResultsAsActors_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetResultsAsActors_NativeFunction);
        GetResultsAsActors_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetResultsAsActors_NativeFunction, "ReturnValue");
        GetResultsAsActors_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetResultsAsActors_NativeFunction, "ReturnValue");
        GetQueryResultsAsLocations_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetQueryResultsAsLocations");
        GetQueryResultsAsLocations_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetQueryResultsAsLocations_NativeFunction);
        GetQueryResultsAsLocations_ResultLocations_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetQueryResultsAsLocations_NativeFunction, "ResultLocations");
        GetQueryResultsAsLocations_ResultLocations_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetQueryResultsAsLocations_NativeFunction, "ResultLocations");
        GetQueryResultsAsLocations_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetQueryResultsAsLocations_NativeFunction, "ReturnValue");
        GetQueryResultsAsActors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetQueryResultsAsActors");
        GetQueryResultsAsActors_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetQueryResultsAsActors_NativeFunction);
        GetQueryResultsAsActors_ResultActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetQueryResultsAsActors_NativeFunction, "ResultActors");
        GetQueryResultsAsActors_ResultActors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetQueryResultsAsActors_NativeFunction, "ResultActors");
        GetQueryResultsAsActors_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetQueryResultsAsActors_NativeFunction, "ReturnValue");
        GetItemScore_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetItemScore");
        GetItemScore_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetItemScore_NativeFunction);
        GetItemScore_ItemIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetItemScore_NativeFunction, "ItemIndex");
        GetItemScore_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetItemScore_NativeFunction, "ReturnValue");
        
        
    }
    
    protected EnvQueryInstanceBlueprintWrapper(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // IntProperty /Script/AIModule.EnvQueryInstanceBlueprintWrapper:QueryID
    static readonly int QueryID_Offset;
    
    public int QueryID
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, QueryID_Offset), 0, this);
        }
    }
    
    // ClassProperty /Script/AIModule.EnvQueryInstanceBlueprintWrapper:ItemType
    static readonly int ItemType_Offset;
    
    public SubclassOf<UnrealSharp.AIModule.EnvQueryItemType> ItemType
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.AIModule.EnvQueryItemType>.FromNative(IntPtr.Add(NativeObject, ItemType_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/AIModule.EnvQueryInstanceBlueprintWrapper:OptionIndex
    static readonly int OptionIndex_Offset;
    
    public int OptionIndex
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, OptionIndex_Offset), 0, this);
        }
    }
    
    // Function /Script/AIModule.EnvQueryInstanceBlueprintWrapper:SetNamedParam
    static readonly IntPtr SetNamedParam_NativeFunction;
    static readonly int SetNamedParam_ParamsSize;
    static readonly int SetNamedParam_ParamName_Offset;
    static readonly int SetNamedParam_Value_Offset;
    
    public void SetNamedParam(Name paramName, float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNamedParam_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetNamedParam_ParamName_Offset), 0, null, paramName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetNamedParam_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNamedParam_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AIModule.EnvQueryInstanceBlueprintWrapper:GetResultsAsLocations
    static readonly IntPtr GetResultsAsLocations_NativeFunction;
    static readonly int GetResultsAsLocations_ParamsSize;
    static readonly int GetResultsAsLocations_ReturnValue_Offset;
    static readonly int GetResultsAsLocations_ReturnValue_ElementSize;
    
    [Obsolete("GetQueryResultsAsLocations instead, which is more efficient itself and protects against very bad perf issues in some blueprints.")]
    public System.Collections.Generic.IList<System.DoubleNumerics.Vector3> GetResultsAsLocations()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetResultsAsLocations_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetResultsAsLocations_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<System.DoubleNumerics.Vector3> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetResultsAsLocations_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GetResultsAsLocations_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.EnvQueryInstanceBlueprintWrapper:GetResultsAsActors
    static readonly IntPtr GetResultsAsActors_NativeFunction;
    static readonly int GetResultsAsActors_ParamsSize;
    static readonly int GetResultsAsActors_ReturnValue_Offset;
    static readonly int GetResultsAsActors_ReturnValue_ElementSize;
    
    [Obsolete("Use GetQueryResultsAsActors instead, which is more efficient itself and protects against very bad perf issues in some blueprints.")]
    public System.Collections.Generic.IList<UnrealSharp.Engine.Actor> GetResultsAsActors()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetResultsAsActors_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetResultsAsActors_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.Engine.Actor> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetResultsAsActors_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, GetResultsAsActors_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.EnvQueryInstanceBlueprintWrapper:GetQueryResultsAsLocations
    static readonly IntPtr GetQueryResultsAsLocations_NativeFunction;
    static readonly int GetQueryResultsAsLocations_ParamsSize;
    static readonly int GetQueryResultsAsLocations_ResultLocations_Offset;
    static readonly int GetQueryResultsAsLocations_ResultLocations_ElementSize;
    static readonly int GetQueryResultsAsLocations_ReturnValue_Offset;
    
    public bool GetQueryResultsAsLocations(out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> resultLocations)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetQueryResultsAsLocations_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetQueryResultsAsLocations_NativeFunction, ParamsBuffer);
            
            IntPtr ResultLocations_NativeBuffer = IntPtr.Add(ParamsBuffer, GetQueryResultsAsLocations_ResultLocations_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> ResultLocations_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GetQueryResultsAsLocations_ResultLocations_ElementSize);
            resultLocations = ResultLocations_Marshaler.FromNative(ResultLocations_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(ResultLocations_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetQueryResultsAsLocations_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.EnvQueryInstanceBlueprintWrapper:GetQueryResultsAsActors
    static readonly IntPtr GetQueryResultsAsActors_NativeFunction;
    static readonly int GetQueryResultsAsActors_ParamsSize;
    static readonly int GetQueryResultsAsActors_ResultActors_Offset;
    static readonly int GetQueryResultsAsActors_ResultActors_ElementSize;
    static readonly int GetQueryResultsAsActors_ReturnValue_Offset;
    
    public bool GetQueryResultsAsActors(out System.Collections.Generic.IList<UnrealSharp.Engine.Actor> resultActors)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetQueryResultsAsActors_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetQueryResultsAsActors_NativeFunction, ParamsBuffer);
            
            IntPtr ResultActors_NativeBuffer = IntPtr.Add(ParamsBuffer, GetQueryResultsAsActors_ResultActors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ResultActors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, GetQueryResultsAsActors_ResultActors_ElementSize);
            resultActors = ResultActors_Marshaler.FromNative(ResultActors_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(ResultActors_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetQueryResultsAsActors_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.EnvQueryInstanceBlueprintWrapper:GetItemScore
    static readonly IntPtr GetItemScore_NativeFunction;
    static readonly int GetItemScore_ParamsSize;
    static readonly int GetItemScore_ItemIndex_Offset;
    static readonly int GetItemScore_ReturnValue_Offset;
    
    public float GetItemScore(int itemIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetItemScore_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetItemScore_ItemIndex_Offset), 0, null, itemIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetItemScore_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetItemScore_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AIModule;

[UClass]
abstract public partial class PawnAction_BlueprintBase : UnrealSharp.AIModule.PawnAction
{
    
    static PawnAction_BlueprintBase()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PawnAction_BlueprintBase");
        
        
        
        IntPtr ActionTick_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ActionTick");
        ActionTick_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ActionTick_NativeFunction);
        ActionTick_ControlledPawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ActionTick_NativeFunction, "ControlledPawn");
        ActionTick_DeltaSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ActionTick_NativeFunction, "DeltaSeconds");
        
        IntPtr ActionStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ActionStart");
        ActionStart_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ActionStart_NativeFunction);
        ActionStart_ControlledPawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ActionStart_NativeFunction, "ControlledPawn");
        
        IntPtr ActionResume_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ActionResume");
        ActionResume_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ActionResume_NativeFunction);
        ActionResume_ControlledPawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ActionResume_NativeFunction, "ControlledPawn");
        
        IntPtr ActionPause_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ActionPause");
        ActionPause_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ActionPause_NativeFunction);
        ActionPause_ControlledPawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ActionPause_NativeFunction, "ControlledPawn");
        
        IntPtr ActionFinished_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ActionFinished");
        ActionFinished_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ActionFinished_NativeFunction);
        ActionFinished_ControlledPawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ActionFinished_NativeFunction, "ControlledPawn");
        ActionFinished_WithResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ActionFinished_NativeFunction, "WithResult");
        
        
    }
    
    protected PawnAction_BlueprintBase(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AIModule.PawnAction_BlueprintBase:ActionTick
    IntPtr ActionTick_NativeFunction;
    static readonly int ActionTick_ParamsSize;
    static readonly int ActionTick_ControlledPawn_Offset;
    static readonly int ActionTick_DeltaSeconds_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ActionTick(UnrealSharp.Engine.Pawn controlledPawn, float deltaSeconds)
    {
        unsafe
        {
            if (ActionTick_NativeFunction == IntPtr.Zero)
            {
                ActionTick_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ActionTick");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ActionTick_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(ParamsBuffer, ActionTick_ControlledPawn_Offset), 0, null, controlledPawn);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ActionTick_DeltaSeconds_Offset), 0, null, deltaSeconds);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ActionTick_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ActionTick_Implementation(UnrealSharp.Engine.Pawn controlledPawn, float deltaSeconds)
    {
    }
    void Invoke_ActionTick(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Pawn controlledPawn = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(buffer, ActionTick_ControlledPawn_Offset), 0, null);
            float deltaSeconds = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, ActionTick_DeltaSeconds_Offset), 0, null);
            ActionTick_Implementation(controlledPawn, deltaSeconds);
        }
    }
    
    // Function /Script/AIModule.PawnAction_BlueprintBase:ActionStart
    IntPtr ActionStart_NativeFunction;
    static readonly int ActionStart_ParamsSize;
    static readonly int ActionStart_ControlledPawn_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ActionStart(UnrealSharp.Engine.Pawn controlledPawn)
    {
        unsafe
        {
            if (ActionStart_NativeFunction == IntPtr.Zero)
            {
                ActionStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ActionStart");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ActionStart_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(ParamsBuffer, ActionStart_ControlledPawn_Offset), 0, null, controlledPawn);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ActionStart_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ActionStart_Implementation(UnrealSharp.Engine.Pawn controlledPawn)
    {
    }
    void Invoke_ActionStart(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Pawn controlledPawn = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(buffer, ActionStart_ControlledPawn_Offset), 0, null);
            ActionStart_Implementation(controlledPawn);
        }
    }
    
    // Function /Script/AIModule.PawnAction_BlueprintBase:ActionResume
    IntPtr ActionResume_NativeFunction;
    static readonly int ActionResume_ParamsSize;
    static readonly int ActionResume_ControlledPawn_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ActionResume(UnrealSharp.Engine.Pawn controlledPawn)
    {
        unsafe
        {
            if (ActionResume_NativeFunction == IntPtr.Zero)
            {
                ActionResume_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ActionResume");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ActionResume_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(ParamsBuffer, ActionResume_ControlledPawn_Offset), 0, null, controlledPawn);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ActionResume_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ActionResume_Implementation(UnrealSharp.Engine.Pawn controlledPawn)
    {
    }
    void Invoke_ActionResume(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Pawn controlledPawn = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(buffer, ActionResume_ControlledPawn_Offset), 0, null);
            ActionResume_Implementation(controlledPawn);
        }
    }
    
    // Function /Script/AIModule.PawnAction_BlueprintBase:ActionPause
    IntPtr ActionPause_NativeFunction;
    static readonly int ActionPause_ParamsSize;
    static readonly int ActionPause_ControlledPawn_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ActionPause(UnrealSharp.Engine.Pawn controlledPawn)
    {
        unsafe
        {
            if (ActionPause_NativeFunction == IntPtr.Zero)
            {
                ActionPause_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ActionPause");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ActionPause_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(ParamsBuffer, ActionPause_ControlledPawn_Offset), 0, null, controlledPawn);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ActionPause_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ActionPause_Implementation(UnrealSharp.Engine.Pawn controlledPawn)
    {
    }
    void Invoke_ActionPause(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Pawn controlledPawn = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(buffer, ActionPause_ControlledPawn_Offset), 0, null);
            ActionPause_Implementation(controlledPawn);
        }
    }
    
    // Function /Script/AIModule.PawnAction_BlueprintBase:ActionFinished
    IntPtr ActionFinished_NativeFunction;
    static readonly int ActionFinished_ParamsSize;
    static readonly int ActionFinished_ControlledPawn_Offset;
    static readonly int ActionFinished_WithResult_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ActionFinished(UnrealSharp.Engine.Pawn controlledPawn, UnrealSharp.AIModule.EPawnActionResult withResult)
    {
        unsafe
        {
            if (ActionFinished_NativeFunction == IntPtr.Zero)
            {
                ActionFinished_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ActionFinished");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ActionFinished_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(ParamsBuffer, ActionFinished_ControlledPawn_Offset), 0, null, controlledPawn);
            BlittableMarshaller<UnrealSharp.AIModule.EPawnActionResult>.ToNative(IntPtr.Add(ParamsBuffer, ActionFinished_WithResult_Offset), 0, null, withResult);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ActionFinished_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ActionFinished_Implementation(UnrealSharp.Engine.Pawn controlledPawn, UnrealSharp.AIModule.EPawnActionResult withResult)
    {
    }
    void Invoke_ActionFinished(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Pawn controlledPawn = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(buffer, ActionFinished_ControlledPawn_Offset), 0, null);
            UnrealSharp.AIModule.EPawnActionResult withResult = BlittableMarshaller<UnrealSharp.AIModule.EPawnActionResult>.FromNative(IntPtr.Add(buffer, ActionFinished_WithResult_Offset), 0, null);
            ActionFinished_Implementation(controlledPawn, withResult);
        }
    }
    
    
}
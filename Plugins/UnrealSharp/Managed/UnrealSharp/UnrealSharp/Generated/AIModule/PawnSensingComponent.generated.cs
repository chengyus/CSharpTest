// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AIModule;

[UClass]
public partial class PawnSensingComponent : UnrealSharp.Engine.ActorComponent
{
    
    static PawnSensingComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PawnSensingComponent");
        
        HearingThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "HearingThreshold");
        LOSHearingThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LOSHearingThreshold");
        SightRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SightRadius");
        SensingInterval_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SensingInterval");
        HearingMaxSoundAge_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "HearingMaxSoundAge");
        bEnableSensingUpdates_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableSensingUpdates");
        bEnableSensingUpdates_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableSensingUpdates");
        bOnlySensePlayers_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOnlySensePlayers");
        bOnlySensePlayers_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bOnlySensePlayers");
        bSeePawns_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSeePawns");
        bSeePawns_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bSeePawns");
        bHearNoises_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bHearNoises");
        bHearNoises_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bHearNoises");
        PeripheralVisionAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PeripheralVisionAngle");
        
        SetSensingUpdatesEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSensingUpdatesEnabled");
        SetSensingUpdatesEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSensingUpdatesEnabled_NativeFunction);
        SetSensingUpdatesEnabled_bEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSensingUpdatesEnabled_NativeFunction, "bEnabled");
        SetSensingInterval_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSensingInterval");
        SetSensingInterval_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSensingInterval_NativeFunction);
        SetSensingInterval_NewSensingInterval_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSensingInterval_NativeFunction, "NewSensingInterval");
        SetPeripheralVisionAngle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPeripheralVisionAngle");
        SetPeripheralVisionAngle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPeripheralVisionAngle_NativeFunction);
        SetPeripheralVisionAngle_NewPeripheralVisionAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPeripheralVisionAngle_NativeFunction, "NewPeripheralVisionAngle");
        GetPeripheralVisionCosine_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPeripheralVisionCosine");
        GetPeripheralVisionCosine_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPeripheralVisionCosine_NativeFunction);
        GetPeripheralVisionCosine_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPeripheralVisionCosine_NativeFunction, "ReturnValue");
        GetPeripheralVisionAngle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPeripheralVisionAngle");
        GetPeripheralVisionAngle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPeripheralVisionAngle_NativeFunction);
        GetPeripheralVisionAngle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPeripheralVisionAngle_NativeFunction, "ReturnValue");
        
        
    }
    
    protected PawnSensingComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/AIModule.PawnSensingComponent:HearingThreshold
    static readonly int HearingThreshold_Offset;
    
    public float HearingThreshold
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, HearingThreshold_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, HearingThreshold_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/AIModule.PawnSensingComponent:LOSHearingThreshold
    static readonly int LOSHearingThreshold_Offset;
    
    public float LOSHearingThreshold
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LOSHearingThreshold_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, LOSHearingThreshold_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/AIModule.PawnSensingComponent:SightRadius
    static readonly int SightRadius_Offset;
    
    public float SightRadius
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SightRadius_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, SightRadius_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/AIModule.PawnSensingComponent:SensingInterval
    static readonly int SensingInterval_Offset;
    
    public float SensingInterval
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SensingInterval_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/AIModule.PawnSensingComponent:HearingMaxSoundAge
    static readonly int HearingMaxSoundAge_Offset;
    
    public float HearingMaxSoundAge
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, HearingMaxSoundAge_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, HearingMaxSoundAge_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/AIModule.PawnSensingComponent:bEnableSensingUpdates
    static readonly int bEnableSensingUpdates_Offset;
    static readonly IntPtr bEnableSensingUpdates_NativeProperty;
    
    public bool bEnableSensingUpdates
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableSensingUpdates_NativeProperty, bEnableSensingUpdates_Offset);
        }
    }
    
    // BoolProperty /Script/AIModule.PawnSensingComponent:bOnlySensePlayers
    static readonly int bOnlySensePlayers_Offset;
    static readonly IntPtr bOnlySensePlayers_NativeProperty;
    
    public bool bOnlySensePlayers
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bOnlySensePlayers_NativeProperty, bOnlySensePlayers_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bOnlySensePlayers_NativeProperty, bOnlySensePlayers_Offset, value);
        }
    }
    
    // BoolProperty /Script/AIModule.PawnSensingComponent:bSeePawns
    static readonly int bSeePawns_Offset;
    static readonly IntPtr bSeePawns_NativeProperty;
    
    public bool bSeePawns
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bSeePawns_NativeProperty, bSeePawns_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bSeePawns_NativeProperty, bSeePawns_Offset, value);
        }
    }
    
    // BoolProperty /Script/AIModule.PawnSensingComponent:bHearNoises
    static readonly int bHearNoises_Offset;
    static readonly IntPtr bHearNoises_NativeProperty;
    
    public bool bHearNoises
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bHearNoises_NativeProperty, bHearNoises_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bHearNoises_NativeProperty, bHearNoises_Offset, value);
        }
    }
    
    // FloatProperty /Script/AIModule.PawnSensingComponent:PeripheralVisionAngle
    static readonly int PeripheralVisionAngle_Offset;
    
    public float PeripheralVisionAngle
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PeripheralVisionAngle_Offset), 0, this);
        }
    }
    
    // Function /Script/AIModule.PawnSensingComponent:SetSensingUpdatesEnabled
    static readonly IntPtr SetSensingUpdatesEnabled_NativeFunction;
    static readonly int SetSensingUpdatesEnabled_ParamsSize;
    static readonly int SetSensingUpdatesEnabled_bEnabled_Offset;
    
    public void SetSensingUpdatesEnabled(bool bEnabled)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSensingUpdatesEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetSensingUpdatesEnabled_bEnabled_Offset), 0, null, bEnabled);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSensingUpdatesEnabled_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AIModule.PawnSensingComponent:SetSensingInterval
    static readonly IntPtr SetSensingInterval_NativeFunction;
    static readonly int SetSensingInterval_ParamsSize;
    static readonly int SetSensingInterval_NewSensingInterval_Offset;
    
    public void SetSensingInterval(float newSensingInterval)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSensingInterval_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSensingInterval_NewSensingInterval_Offset), 0, null, newSensingInterval);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSensingInterval_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AIModule.PawnSensingComponent:SetPeripheralVisionAngle
    static readonly IntPtr SetPeripheralVisionAngle_NativeFunction;
    static readonly int SetPeripheralVisionAngle_ParamsSize;
    static readonly int SetPeripheralVisionAngle_NewPeripheralVisionAngle_Offset;
    
    public void SetPeripheralVisionAngle(float newPeripheralVisionAngle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPeripheralVisionAngle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPeripheralVisionAngle_NewPeripheralVisionAngle_Offset), 0, null, newPeripheralVisionAngle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPeripheralVisionAngle_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AIModule.PawnSensingComponent:GetPeripheralVisionCosine
    static readonly IntPtr GetPeripheralVisionCosine_NativeFunction;
    static readonly int GetPeripheralVisionCosine_ParamsSize;
    static readonly int GetPeripheralVisionCosine_ReturnValue_Offset;
    
    public float GetPeripheralVisionCosine()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPeripheralVisionCosine_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPeripheralVisionCosine_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetPeripheralVisionCosine_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AIModule.PawnSensingComponent:GetPeripheralVisionAngle
    static readonly IntPtr GetPeripheralVisionAngle_NativeFunction;
    static readonly int GetPeripheralVisionAngle_ParamsSize;
    static readonly int GetPeripheralVisionAngle_ReturnValue_Offset;
    
    public float GetPeripheralVisionAngle()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPeripheralVisionAngle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPeripheralVisionAngle_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetPeripheralVisionAngle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AdvancedWidgets;

[UClass]
public partial class RadialSlider : UnrealSharp.UMG.Widget
{
    
    static RadialSlider()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("RadialSlider");
        
        Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Value");
        SliderRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SliderRange");
        ValueTags_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ValueTags");
        ValueTags_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "ValueTags");
        SliderHandleStartAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SliderHandleStartAngle");
        SliderHandleEndAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SliderHandleEndAngle");
        AngularOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AngularOffset");
        HandStartEndRatio_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "HandStartEndRatio");
        WidgetStyle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WidgetStyle");
        SliderBarColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SliderBarColor");
        SliderProgressColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SliderProgressColor");
        SliderHandleColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SliderHandleColor");
        CenterBackgroundColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CenterBackgroundColor");
        Locked_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Locked");
        MouseUsesStep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MouseUsesStep");
        RequiresControllerLock_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RequiresControllerLock");
        StepSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StepSize");
        IsFocusable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "IsFocusable");
        UseVerticalDrag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "UseVerticalDrag");
        ShowSliderHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShowSliderHandle");
        ShowSliderHand_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShowSliderHand");
        
        SetValueTags_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueTags");
        SetValueTags_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueTags_NativeFunction);
        SetValueTags_InValueTags_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueTags_NativeFunction, "InValueTags");
        SetValueTags_InValueTags_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetValueTags_NativeFunction, "InValueTags");
        SetValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValue");
        SetValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValue_NativeFunction);
        SetValue_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValue_NativeFunction, "InValue");
        SetUseVerticalDrag_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetUseVerticalDrag");
        SetUseVerticalDrag_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetUseVerticalDrag_NativeFunction);
        SetUseVerticalDrag_InUseVerticalDrag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUseVerticalDrag_NativeFunction, "InUseVerticalDrag");
        SetStepSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetStepSize");
        SetStepSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetStepSize_NativeFunction);
        SetStepSize_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetStepSize_NativeFunction, "InValue");
        SetSliderRange_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSliderRange");
        SetSliderRange_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSliderRange_NativeFunction);
        SetSliderRange_InSliderRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSliderRange_NativeFunction, "InSliderRange");
        SetSliderProgressColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSliderProgressColor");
        SetSliderProgressColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSliderProgressColor_NativeFunction);
        SetSliderProgressColor_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSliderProgressColor_NativeFunction, "InValue");
        SetSliderHandleStartAngle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSliderHandleStartAngle");
        SetSliderHandleStartAngle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSliderHandleStartAngle_NativeFunction);
        SetSliderHandleStartAngle_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSliderHandleStartAngle_NativeFunction, "InValue");
        SetSliderHandleEndAngle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSliderHandleEndAngle");
        SetSliderHandleEndAngle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSliderHandleEndAngle_NativeFunction);
        SetSliderHandleEndAngle_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSliderHandleEndAngle_NativeFunction, "InValue");
        SetSliderHandleColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSliderHandleColor");
        SetSliderHandleColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSliderHandleColor_NativeFunction);
        SetSliderHandleColor_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSliderHandleColor_NativeFunction, "InValue");
        SetSliderBarColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSliderBarColor");
        SetSliderBarColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSliderBarColor_NativeFunction);
        SetSliderBarColor_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSliderBarColor_NativeFunction, "InValue");
        SetShowSliderHandle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetShowSliderHandle");
        SetShowSliderHandle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetShowSliderHandle_NativeFunction);
        SetShowSliderHandle_InShowSliderHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetShowSliderHandle_NativeFunction, "InShowSliderHandle");
        SetShowSliderHand_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetShowSliderHand");
        SetShowSliderHand_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetShowSliderHand_NativeFunction);
        SetShowSliderHand_InShowSliderHand_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetShowSliderHand_NativeFunction, "InShowSliderHand");
        SetLocked_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocked");
        SetLocked_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocked_NativeFunction);
        SetLocked_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocked_NativeFunction, "InValue");
        SetHandStartEndRatio_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetHandStartEndRatio");
        SetHandStartEndRatio_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetHandStartEndRatio_NativeFunction);
        SetHandStartEndRatio_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetHandStartEndRatio_NativeFunction, "InValue");
        SetCustomDefaultValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomDefaultValue");
        SetCustomDefaultValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomDefaultValue_NativeFunction);
        SetCustomDefaultValue_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomDefaultValue_NativeFunction, "InValue");
        SetCenterBackgroundColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCenterBackgroundColor");
        SetCenterBackgroundColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCenterBackgroundColor_NativeFunction);
        SetCenterBackgroundColor_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCenterBackgroundColor_NativeFunction, "InValue");
        SetAngularOffset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAngularOffset");
        SetAngularOffset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAngularOffset_NativeFunction);
        SetAngularOffset_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularOffset_NativeFunction, "InValue");
        GetValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValue");
        GetValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValue_NativeFunction);
        GetValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValue_NativeFunction, "ReturnValue");
        GetNormalizedSliderHandlePosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNormalizedSliderHandlePosition");
        GetNormalizedSliderHandlePosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNormalizedSliderHandlePosition_NativeFunction);
        GetNormalizedSliderHandlePosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNormalizedSliderHandlePosition_NativeFunction, "ReturnValue");
        GetCustomDefaultValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomDefaultValue");
        GetCustomDefaultValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomDefaultValue_NativeFunction);
        GetCustomDefaultValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomDefaultValue_NativeFunction, "ReturnValue");
        
        
    }
    
    protected RadialSlider(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/AdvancedWidgets.RadialSlider:Value
    static readonly int Value_Offset;
    
    public float Value
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Value_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Value_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/AdvancedWidgets.RadialSlider:SliderRange
    static readonly int SliderRange_Offset;
    
    public UnrealSharp.Engine.RuntimeFloatCurve SliderRange
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.RuntimeFloatCurveMarshaler.FromNative(IntPtr.Add(NativeObject, SliderRange_Offset), 0, this);
        }
    }
    
    // ArrayProperty /Script/AdvancedWidgets.RadialSlider:ValueTags
    static readonly int ValueTags_Offset;
    static readonly IntPtr ValueTags_NativeProperty;
    UnrealArrayReadOnlyMarshaler<float> ValueTags_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<float> ValueTags
    {
        get
        {
            if(ValueTags_Wrapper == null)
            {
                ValueTags_Wrapper = new UnrealArrayReadOnlyMarshaler<float>(1, ValueTags_NativeProperty, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative);
            }
            
            return ValueTags_Wrapper.FromNative(IntPtr.Add(NativeObject,ValueTags_Offset),0,this);
        }
    }
    
    // FloatProperty /Script/AdvancedWidgets.RadialSlider:SliderHandleStartAngle
    static readonly int SliderHandleStartAngle_Offset;
    
    public float SliderHandleStartAngle
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SliderHandleStartAngle_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/AdvancedWidgets.RadialSlider:SliderHandleEndAngle
    static readonly int SliderHandleEndAngle_Offset;
    
    public float SliderHandleEndAngle
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SliderHandleEndAngle_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/AdvancedWidgets.RadialSlider:AngularOffset
    static readonly int AngularOffset_Offset;
    
    public float AngularOffset
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AngularOffset_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/AdvancedWidgets.RadialSlider:HandStartEndRatio
    static readonly int HandStartEndRatio_Offset;
    
    public System.DoubleNumerics.Vector2 HandStartEndRatio
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(NativeObject, HandStartEndRatio_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/AdvancedWidgets.RadialSlider:WidgetStyle
    static readonly int WidgetStyle_Offset;
    
    public UnrealSharp.SlateCore.SliderStyle WidgetStyle
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.SlateCore.SliderStyleMarshaler.FromNative(IntPtr.Add(NativeObject, WidgetStyle_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.SlateCore.SliderStyleMarshaler.ToNative(IntPtr.Add(NativeObject, WidgetStyle_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/AdvancedWidgets.RadialSlider:SliderBarColor
    static readonly int SliderBarColor_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor SliderBarColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, SliderBarColor_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/AdvancedWidgets.RadialSlider:SliderProgressColor
    static readonly int SliderProgressColor_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor SliderProgressColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, SliderProgressColor_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/AdvancedWidgets.RadialSlider:SliderHandleColor
    static readonly int SliderHandleColor_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor SliderHandleColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, SliderHandleColor_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/AdvancedWidgets.RadialSlider:CenterBackgroundColor
    static readonly int CenterBackgroundColor_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor CenterBackgroundColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, CenterBackgroundColor_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/AdvancedWidgets.RadialSlider:Locked
    static readonly int Locked_Offset;
    
    public bool Locked
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, Locked_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/AdvancedWidgets.RadialSlider:MouseUsesStep
    static readonly int MouseUsesStep_Offset;
    
    public bool MouseUsesStep
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, MouseUsesStep_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/AdvancedWidgets.RadialSlider:RequiresControllerLock
    static readonly int RequiresControllerLock_Offset;
    
    public bool RequiresControllerLock
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, RequiresControllerLock_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/AdvancedWidgets.RadialSlider:StepSize
    static readonly int StepSize_Offset;
    
    public float StepSize
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, StepSize_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/AdvancedWidgets.RadialSlider:IsFocusable
    static readonly int IsFocusable_Offset;
    
    public bool IsFocusable
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, IsFocusable_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/AdvancedWidgets.RadialSlider:UseVerticalDrag
    static readonly int UseVerticalDrag_Offset;
    
    public bool UseVerticalDrag
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, UseVerticalDrag_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, UseVerticalDrag_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/AdvancedWidgets.RadialSlider:ShowSliderHandle
    static readonly int ShowSliderHandle_Offset;
    
    public bool ShowSliderHandle
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, ShowSliderHandle_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, ShowSliderHandle_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/AdvancedWidgets.RadialSlider:ShowSliderHand
    static readonly int ShowSliderHand_Offset;
    
    public bool ShowSliderHand
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, ShowSliderHand_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, ShowSliderHand_Offset), 0, this, value);
        }
    }
    
    // Function /Script/AdvancedWidgets.RadialSlider:SetValueTags
    static readonly IntPtr SetValueTags_NativeFunction;
    static readonly int SetValueTags_ParamsSize;
    static readonly int SetValueTags_InValueTags_Offset;
    static readonly int SetValueTags_InValueTags_ElementSize;
    
    public void SetValueTags(System.Collections.Generic.IList<float> inValueTags)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueTags_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InValueTags_NativeBuffer = IntPtr.Add(ParamsBuffer, SetValueTags_InValueTags_Offset);
            UnrealArrayCopyMarshaler<float> InValueTags_Marshaler = new UnrealArrayCopyMarshaler<float>(1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, SetValueTags_InValueTags_ElementSize);
            InValueTags_Marshaler.ToNative(InValueTags_NativeBuffer, 0, null, inValueTags);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetValueTags_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/AdvancedWidgets.RadialSlider:SetValue
    static readonly IntPtr SetValue_NativeFunction;
    static readonly int SetValue_ParamsSize;
    static readonly int SetValue_InValue_Offset;
    
    public void SetValue(float inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetValue_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetValue_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AdvancedWidgets.RadialSlider:SetUseVerticalDrag
    static readonly IntPtr SetUseVerticalDrag_NativeFunction;
    static readonly int SetUseVerticalDrag_ParamsSize;
    static readonly int SetUseVerticalDrag_InUseVerticalDrag_Offset;
    
    public void SetUseVerticalDrag(bool inUseVerticalDrag)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetUseVerticalDrag_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetUseVerticalDrag_InUseVerticalDrag_Offset), 0, null, inUseVerticalDrag);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetUseVerticalDrag_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AdvancedWidgets.RadialSlider:SetStepSize
    static readonly IntPtr SetStepSize_NativeFunction;
    static readonly int SetStepSize_ParamsSize;
    static readonly int SetStepSize_InValue_Offset;
    
    public void SetStepSize(float inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetStepSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetStepSize_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetStepSize_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AdvancedWidgets.RadialSlider:SetSliderRange
    static readonly IntPtr SetSliderRange_NativeFunction;
    static readonly int SetSliderRange_ParamsSize;
    static readonly int SetSliderRange_InSliderRange_Offset;
    
    public void SetSliderRange(UnrealSharp.Engine.RuntimeFloatCurve inSliderRange)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSliderRange_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.RuntimeFloatCurveMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetSliderRange_InSliderRange_Offset), 0, null, inSliderRange);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSliderRange_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/AdvancedWidgets.RadialSlider:SetSliderProgressColor
    static readonly IntPtr SetSliderProgressColor_NativeFunction;
    static readonly int SetSliderProgressColor_ParamsSize;
    static readonly int SetSliderProgressColor_InValue_Offset;
    
    public void SetSliderProgressColor(UnrealSharp.CoreUObject.LinearColor inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSliderProgressColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetSliderProgressColor_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSliderProgressColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AdvancedWidgets.RadialSlider:SetSliderHandleStartAngle
    static readonly IntPtr SetSliderHandleStartAngle_NativeFunction;
    static readonly int SetSliderHandleStartAngle_ParamsSize;
    static readonly int SetSliderHandleStartAngle_InValue_Offset;
    
    public void SetSliderHandleStartAngle(float inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSliderHandleStartAngle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSliderHandleStartAngle_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSliderHandleStartAngle_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AdvancedWidgets.RadialSlider:SetSliderHandleEndAngle
    static readonly IntPtr SetSliderHandleEndAngle_NativeFunction;
    static readonly int SetSliderHandleEndAngle_ParamsSize;
    static readonly int SetSliderHandleEndAngle_InValue_Offset;
    
    public void SetSliderHandleEndAngle(float inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSliderHandleEndAngle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSliderHandleEndAngle_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSliderHandleEndAngle_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AdvancedWidgets.RadialSlider:SetSliderHandleColor
    static readonly IntPtr SetSliderHandleColor_NativeFunction;
    static readonly int SetSliderHandleColor_ParamsSize;
    static readonly int SetSliderHandleColor_InValue_Offset;
    
    public void SetSliderHandleColor(UnrealSharp.CoreUObject.LinearColor inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSliderHandleColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetSliderHandleColor_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSliderHandleColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AdvancedWidgets.RadialSlider:SetSliderBarColor
    static readonly IntPtr SetSliderBarColor_NativeFunction;
    static readonly int SetSliderBarColor_ParamsSize;
    static readonly int SetSliderBarColor_InValue_Offset;
    
    public void SetSliderBarColor(UnrealSharp.CoreUObject.LinearColor inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSliderBarColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetSliderBarColor_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSliderBarColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AdvancedWidgets.RadialSlider:SetShowSliderHandle
    static readonly IntPtr SetShowSliderHandle_NativeFunction;
    static readonly int SetShowSliderHandle_ParamsSize;
    static readonly int SetShowSliderHandle_InShowSliderHandle_Offset;
    
    public void SetShowSliderHandle(bool inShowSliderHandle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetShowSliderHandle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetShowSliderHandle_InShowSliderHandle_Offset), 0, null, inShowSliderHandle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetShowSliderHandle_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AdvancedWidgets.RadialSlider:SetShowSliderHand
    static readonly IntPtr SetShowSliderHand_NativeFunction;
    static readonly int SetShowSliderHand_ParamsSize;
    static readonly int SetShowSliderHand_InShowSliderHand_Offset;
    
    public void SetShowSliderHand(bool inShowSliderHand)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetShowSliderHand_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetShowSliderHand_InShowSliderHand_Offset), 0, null, inShowSliderHand);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetShowSliderHand_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AdvancedWidgets.RadialSlider:SetLocked
    static readonly IntPtr SetLocked_NativeFunction;
    static readonly int SetLocked_ParamsSize;
    static readonly int SetLocked_InValue_Offset;
    
    public void SetLocked(bool inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocked_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocked_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLocked_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AdvancedWidgets.RadialSlider:SetHandStartEndRatio
    static readonly IntPtr SetHandStartEndRatio_NativeFunction;
    static readonly int SetHandStartEndRatio_ParamsSize;
    static readonly int SetHandStartEndRatio_InValue_Offset;
    
    public void SetHandStartEndRatio(System.DoubleNumerics.Vector2 inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetHandStartEndRatio_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetHandStartEndRatio_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetHandStartEndRatio_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AdvancedWidgets.RadialSlider:SetCustomDefaultValue
    static readonly IntPtr SetCustomDefaultValue_NativeFunction;
    static readonly int SetCustomDefaultValue_ParamsSize;
    static readonly int SetCustomDefaultValue_InValue_Offset;
    
    public void SetCustomDefaultValue(float inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomDefaultValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomDefaultValue_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomDefaultValue_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AdvancedWidgets.RadialSlider:SetCenterBackgroundColor
    static readonly IntPtr SetCenterBackgroundColor_NativeFunction;
    static readonly int SetCenterBackgroundColor_ParamsSize;
    static readonly int SetCenterBackgroundColor_InValue_Offset;
    
    public void SetCenterBackgroundColor(UnrealSharp.CoreUObject.LinearColor inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCenterBackgroundColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetCenterBackgroundColor_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCenterBackgroundColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AdvancedWidgets.RadialSlider:SetAngularOffset
    static readonly IntPtr SetAngularOffset_NativeFunction;
    static readonly int SetAngularOffset_ParamsSize;
    static readonly int SetAngularOffset_InValue_Offset;
    
    public void SetAngularOffset(float inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAngularOffset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAngularOffset_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAngularOffset_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AdvancedWidgets.RadialSlider:GetValue
    static readonly IntPtr GetValue_NativeFunction;
    static readonly int GetValue_ParamsSize;
    static readonly int GetValue_ReturnValue_Offset;
    
    public float GetValue()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AdvancedWidgets.RadialSlider:GetNormalizedSliderHandlePosition
    static readonly IntPtr GetNormalizedSliderHandlePosition_NativeFunction;
    static readonly int GetNormalizedSliderHandlePosition_ParamsSize;
    static readonly int GetNormalizedSliderHandlePosition_ReturnValue_Offset;
    
    public float GetNormalizedSliderHandlePosition()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNormalizedSliderHandlePosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNormalizedSliderHandlePosition_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetNormalizedSliderHandlePosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AdvancedWidgets.RadialSlider:GetCustomDefaultValue
    static readonly IntPtr GetCustomDefaultValue_NativeFunction;
    static readonly int GetCustomDefaultValue_ParamsSize;
    static readonly int GetCustomDefaultValue_ReturnValue_Offset;
    
    public float GetCustomDefaultValue()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomDefaultValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomDefaultValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomDefaultValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
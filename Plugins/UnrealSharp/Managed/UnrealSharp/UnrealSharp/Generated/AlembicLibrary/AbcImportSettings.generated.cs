// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AlembicLibrary;

[UClass]
public partial class AbcImportSettings : UnrealSharp.CoreUObject.Object
{
    
    static AbcImportSettings()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AbcImportSettings");
        
        ImportType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ImportType");
        SamplingSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SamplingSettings");
        NormalGenerationSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NormalGenerationSettings");
        MaterialSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaterialSettings");
        CompressionSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CompressionSettings");
        StaticMeshSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StaticMeshSettings");
        GeometryCacheSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "GeometryCacheSettings");
        ConversionSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ConversionSettings");
        
        
        
    }
    
    protected AbcImportSettings(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // EnumProperty /Script/AlembicLibrary.AbcImportSettings:ImportType
    static readonly int ImportType_Offset;
    
    public UnrealSharp.AlembicLibrary.EAlembicImportType ImportType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.AlembicLibrary.EAlembicImportType>.FromNative(IntPtr.Add(NativeObject, ImportType_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.AlembicLibrary.EAlembicImportType>.ToNative(IntPtr.Add(NativeObject, ImportType_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/AlembicLibrary.AbcImportSettings:SamplingSettings
    static readonly int SamplingSettings_Offset;
    
    public UnrealSharp.AlembicLibrary.AbcSamplingSettings SamplingSettings
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.AlembicLibrary.AbcSamplingSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, SamplingSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.AlembicLibrary.AbcSamplingSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, SamplingSettings_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/AlembicLibrary.AbcImportSettings:NormalGenerationSettings
    static readonly int NormalGenerationSettings_Offset;
    
    public UnrealSharp.AlembicLibrary.AbcNormalGenerationSettings NormalGenerationSettings
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.AlembicLibrary.AbcNormalGenerationSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, NormalGenerationSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.AlembicLibrary.AbcNormalGenerationSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, NormalGenerationSettings_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/AlembicLibrary.AbcImportSettings:MaterialSettings
    static readonly int MaterialSettings_Offset;
    
    public UnrealSharp.AlembicLibrary.AbcMaterialSettings MaterialSettings
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.AlembicLibrary.AbcMaterialSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, MaterialSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.AlembicLibrary.AbcMaterialSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, MaterialSettings_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/AlembicLibrary.AbcImportSettings:CompressionSettings
    static readonly int CompressionSettings_Offset;
    
    public UnrealSharp.AlembicLibrary.AbcCompressionSettings CompressionSettings
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.AlembicLibrary.AbcCompressionSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, CompressionSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.AlembicLibrary.AbcCompressionSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, CompressionSettings_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/AlembicLibrary.AbcImportSettings:StaticMeshSettings
    static readonly int StaticMeshSettings_Offset;
    
    public UnrealSharp.AlembicLibrary.AbcStaticMeshSettings StaticMeshSettings
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.AlembicLibrary.AbcStaticMeshSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, StaticMeshSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.AlembicLibrary.AbcStaticMeshSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, StaticMeshSettings_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/AlembicLibrary.AbcImportSettings:GeometryCacheSettings
    static readonly int GeometryCacheSettings_Offset;
    
    public UnrealSharp.AlembicLibrary.AbcGeometryCacheSettings GeometryCacheSettings
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.AlembicLibrary.AbcGeometryCacheSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, GeometryCacheSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.AlembicLibrary.AbcGeometryCacheSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, GeometryCacheSettings_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/AlembicLibrary.AbcImportSettings:ConversionSettings
    static readonly int ConversionSettings_Offset;
    
    public UnrealSharp.AlembicLibrary.AbcConversionSettings ConversionSettings
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.AlembicLibrary.AbcConversionSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, ConversionSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.AlembicLibrary.AbcConversionSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, ConversionSettings_Offset), 0, this, value);
        }
    }
    
    
}
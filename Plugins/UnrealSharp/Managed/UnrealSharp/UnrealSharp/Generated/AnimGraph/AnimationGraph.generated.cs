// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AnimGraph;

[UClass]
public partial class AnimationGraph : UnrealSharp.Engine.EdGraph
{
    
    static AnimationGraph()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AnimationGraph");
        
        
        GetGraphNodesOfClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGraphNodesOfClass");
        GetGraphNodesOfClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGraphNodesOfClass_NativeFunction);
        GetGraphNodesOfClass_NodeClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGraphNodesOfClass_NativeFunction, "NodeClass");
        GetGraphNodesOfClass_GraphNodes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGraphNodesOfClass_NativeFunction, "GraphNodes");
        GetGraphNodesOfClass_GraphNodes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetGraphNodesOfClass_NativeFunction, "GraphNodes");
        GetGraphNodesOfClass_bIncludeChildClasses_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGraphNodesOfClass_NativeFunction, "bIncludeChildClasses");
        
        
    }
    
    protected AnimationGraph(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AnimGraph.AnimationGraph:GetGraphNodesOfClass
    static readonly IntPtr GetGraphNodesOfClass_NativeFunction;
    static readonly int GetGraphNodesOfClass_ParamsSize;
    static readonly int GetGraphNodesOfClass_NodeClass_Offset;
    static readonly int GetGraphNodesOfClass_GraphNodes_Offset;
    static readonly int GetGraphNodesOfClass_GraphNodes_ElementSize;
    static readonly int GetGraphNodesOfClass_bIncludeChildClasses_Offset;
    
    public void GetGraphNodesOfClass(SubclassOf<UnrealSharp.AnimGraph.AnimGraphNode_Base> nodeClass, out System.Collections.Generic.IList<UnrealSharp.AnimGraph.AnimGraphNode_Base> graphNodes, bool bIncludeChildClasses = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGraphNodesOfClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.AnimGraph.AnimGraphNode_Base>.ToNative(IntPtr.Add(ParamsBuffer, GetGraphNodesOfClass_NodeClass_Offset), 0, null, nodeClass);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetGraphNodesOfClass_bIncludeChildClasses_Offset), 0, null, bIncludeChildClasses);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetGraphNodesOfClass_NativeFunction, ParamsBuffer);
            
            IntPtr GraphNodes_NativeBuffer = IntPtr.Add(ParamsBuffer, GetGraphNodesOfClass_GraphNodes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.AnimGraph.AnimGraphNode_Base> GraphNodes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.AnimGraph.AnimGraphNode_Base> (1, ObjectMarshaller<UnrealSharp.AnimGraph.AnimGraphNode_Base>.ToNative, ObjectMarshaller<UnrealSharp.AnimGraph.AnimGraphNode_Base>.FromNative, GetGraphNodesOfClass_GraphNodes_ElementSize);
            graphNodes = GraphNodes_Marshaler.FromNative(GraphNodes_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.AnimGraph.AnimGraphNode_Base>.DestructInstance(GraphNodes_NativeBuffer, 0);
            
        }
    }
    
    
}
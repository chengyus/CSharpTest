// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AnimGraphRuntime;

[UClass]
public partial class AnimationStateMachineLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static AnimationStateMachineLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AnimationStateMachineLibrary");
        
        
        SetState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetState");
        SetState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetState_NativeFunction);
        SetState_UpdateContext_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetState_NativeFunction, "UpdateContext");
        SetState_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetState_NativeFunction, "Node");
        SetState_TargetState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetState_NativeFunction, "TargetState");
        SetState_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetState_NativeFunction, "Duration");
        SetState_BlendType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetState_NativeFunction, "BlendType");
        SetState_BlendProfile_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetState_NativeFunction, "BlendProfile");
        SetState_AlphaBlendOption_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetState_NativeFunction, "AlphaBlendOption");
        SetState_CustomBlendCurve_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetState_NativeFunction, "CustomBlendCurve");
        IsStateBlendingOut_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsStateBlendingOut");
        IsStateBlendingOut_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsStateBlendingOut_NativeFunction);
        IsStateBlendingOut_UpdateContext_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsStateBlendingOut_NativeFunction, "UpdateContext");
        IsStateBlendingOut_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsStateBlendingOut_NativeFunction, "Node");
        IsStateBlendingOut_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsStateBlendingOut_NativeFunction, "ReturnValue");
        IsStateBlendingIn_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsStateBlendingIn");
        IsStateBlendingIn_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsStateBlendingIn_NativeFunction);
        IsStateBlendingIn_UpdateContext_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsStateBlendingIn_NativeFunction, "UpdateContext");
        IsStateBlendingIn_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsStateBlendingIn_NativeFunction, "Node");
        IsStateBlendingIn_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsStateBlendingIn_NativeFunction, "ReturnValue");
        GetState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetState");
        GetState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetState_NativeFunction);
        GetState_UpdateContext_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetState_NativeFunction, "UpdateContext");
        GetState_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetState_NativeFunction, "Node");
        GetState_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetState_NativeFunction, "ReturnValue");
        GetRelevantAnimTimeRemainingFraction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRelevantAnimTimeRemainingFraction");
        GetRelevantAnimTimeRemainingFraction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRelevantAnimTimeRemainingFraction_NativeFunction);
        GetRelevantAnimTimeRemainingFraction_UpdateContext_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRelevantAnimTimeRemainingFraction_NativeFunction, "UpdateContext");
        GetRelevantAnimTimeRemainingFraction_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRelevantAnimTimeRemainingFraction_NativeFunction, "Node");
        GetRelevantAnimTimeRemainingFraction_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRelevantAnimTimeRemainingFraction_NativeFunction, "ReturnValue");
        GetRelevantAnimTimeRemaining_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRelevantAnimTimeRemaining");
        GetRelevantAnimTimeRemaining_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRelevantAnimTimeRemaining_NativeFunction);
        GetRelevantAnimTimeRemaining_UpdateContext_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRelevantAnimTimeRemaining_NativeFunction, "UpdateContext");
        GetRelevantAnimTimeRemaining_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRelevantAnimTimeRemaining_NativeFunction, "Node");
        GetRelevantAnimTimeRemaining_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRelevantAnimTimeRemaining_NativeFunction, "ReturnValue");
        ConvertToAnimationStateResultPure_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertToAnimationStateResultPure");
        ConvertToAnimationStateResultPure_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertToAnimationStateResultPure_NativeFunction);
        ConvertToAnimationStateResultPure_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToAnimationStateResultPure_NativeFunction, "Node");
        ConvertToAnimationStateResultPure_AnimationState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToAnimationStateResultPure_NativeFunction, "AnimationState");
        ConvertToAnimationStateResultPure_Result_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToAnimationStateResultPure_NativeFunction, "Result");
        ConvertToAnimationStateResult_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertToAnimationStateResult");
        ConvertToAnimationStateResult_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertToAnimationStateResult_NativeFunction);
        ConvertToAnimationStateResult_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToAnimationStateResult_NativeFunction, "Node");
        ConvertToAnimationStateResult_AnimationState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToAnimationStateResult_NativeFunction, "AnimationState");
        ConvertToAnimationStateResult_Result_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToAnimationStateResult_NativeFunction, "Result");
        ConvertToAnimationStateMachinePure_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertToAnimationStateMachinePure");
        ConvertToAnimationStateMachinePure_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertToAnimationStateMachinePure_NativeFunction);
        ConvertToAnimationStateMachinePure_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToAnimationStateMachinePure_NativeFunction, "Node");
        ConvertToAnimationStateMachinePure_AnimationState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToAnimationStateMachinePure_NativeFunction, "AnimationState");
        ConvertToAnimationStateMachinePure_Result_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToAnimationStateMachinePure_NativeFunction, "Result");
        ConvertToAnimationStateMachine_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertToAnimationStateMachine");
        ConvertToAnimationStateMachine_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertToAnimationStateMachine_NativeFunction);
        ConvertToAnimationStateMachine_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToAnimationStateMachine_NativeFunction, "Node");
        ConvertToAnimationStateMachine_AnimationState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToAnimationStateMachine_NativeFunction, "AnimationState");
        ConvertToAnimationStateMachine_Result_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToAnimationStateMachine_NativeFunction, "Result");
        
        
    }
    
    protected AnimationStateMachineLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AnimGraphRuntime.AnimationStateMachineLibrary:SetState
    static readonly IntPtr SetState_NativeFunction;
    static readonly int SetState_ParamsSize;
    static readonly int SetState_UpdateContext_Offset;
    static readonly int SetState_Node_Offset;
    static readonly int SetState_TargetState_Offset;
    static readonly int SetState_Duration_Offset;
    static readonly int SetState_BlendType_Offset;
    static readonly int SetState_BlendProfile_Offset;
    static readonly int SetState_AlphaBlendOption_Offset;
    static readonly int SetState_CustomBlendCurve_Offset;
    
    public static void SetState(UnrealSharp.Engine.AnimUpdateContext updateContext, UnrealSharp.AnimGraphRuntime.AnimationStateMachineReference node, Name targetState, float duration, UnrealSharp.Engine.ETransitionLogicType blendType, UnrealSharp.Engine.BlendProfile blendProfile, UnrealSharp.Engine.EAlphaBlendOption alphaBlendOption, UnrealSharp.Engine.CurveFloat customBlendCurve)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimUpdateContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetState_UpdateContext_Offset), 0, null, updateContext);
            UnrealSharp.AnimGraphRuntime.AnimationStateMachineReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetState_Node_Offset), 0, null, node);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetState_TargetState_Offset), 0, null, targetState);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetState_Duration_Offset), 0, null, duration);
            BlittableMarshaller<UnrealSharp.Engine.ETransitionLogicType>.ToNative(IntPtr.Add(ParamsBuffer, SetState_BlendType_Offset), 0, null, blendType);
            ObjectMarshaller<UnrealSharp.Engine.BlendProfile>.ToNative(IntPtr.Add(ParamsBuffer, SetState_BlendProfile_Offset), 0, null, blendProfile);
            BlittableMarshaller<UnrealSharp.Engine.EAlphaBlendOption>.ToNative(IntPtr.Add(ParamsBuffer, SetState_AlphaBlendOption_Offset), 0, null, alphaBlendOption);
            ObjectMarshaller<UnrealSharp.Engine.CurveFloat>.ToNative(IntPtr.Add(ParamsBuffer, SetState_CustomBlendCurve_Offset), 0, null, customBlendCurve);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetState_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/AnimGraphRuntime.AnimationStateMachineLibrary:IsStateBlendingOut
    static readonly IntPtr IsStateBlendingOut_NativeFunction;
    static readonly int IsStateBlendingOut_ParamsSize;
    static readonly int IsStateBlendingOut_UpdateContext_Offset;
    static readonly int IsStateBlendingOut_Node_Offset;
    static readonly int IsStateBlendingOut_ReturnValue_Offset;
    
    public static bool IsStateBlendingOut(UnrealSharp.Engine.AnimUpdateContext updateContext, UnrealSharp.AnimGraphRuntime.AnimationStateResultReference node)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsStateBlendingOut_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimUpdateContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsStateBlendingOut_UpdateContext_Offset), 0, null, updateContext);
            UnrealSharp.AnimGraphRuntime.AnimationStateResultReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsStateBlendingOut_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsStateBlendingOut_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsStateBlendingOut_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.AnimationStateMachineLibrary:IsStateBlendingIn
    static readonly IntPtr IsStateBlendingIn_NativeFunction;
    static readonly int IsStateBlendingIn_ParamsSize;
    static readonly int IsStateBlendingIn_UpdateContext_Offset;
    static readonly int IsStateBlendingIn_Node_Offset;
    static readonly int IsStateBlendingIn_ReturnValue_Offset;
    
    public static bool IsStateBlendingIn(UnrealSharp.Engine.AnimUpdateContext updateContext, UnrealSharp.AnimGraphRuntime.AnimationStateResultReference node)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsStateBlendingIn_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimUpdateContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsStateBlendingIn_UpdateContext_Offset), 0, null, updateContext);
            UnrealSharp.AnimGraphRuntime.AnimationStateResultReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsStateBlendingIn_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsStateBlendingIn_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsStateBlendingIn_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.AnimationStateMachineLibrary:GetState
    static readonly IntPtr GetState_NativeFunction;
    static readonly int GetState_ParamsSize;
    static readonly int GetState_UpdateContext_Offset;
    static readonly int GetState_Node_Offset;
    static readonly int GetState_ReturnValue_Offset;
    
    public static Name GetState(UnrealSharp.Engine.AnimUpdateContext updateContext, UnrealSharp.AnimGraphRuntime.AnimationStateMachineReference node)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimUpdateContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetState_UpdateContext_Offset), 0, null, updateContext);
            UnrealSharp.AnimGraphRuntime.AnimationStateMachineReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetState_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetState_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetState_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.AnimationStateMachineLibrary:GetRelevantAnimTimeRemainingFraction
    static readonly IntPtr GetRelevantAnimTimeRemainingFraction_NativeFunction;
    static readonly int GetRelevantAnimTimeRemainingFraction_ParamsSize;
    static readonly int GetRelevantAnimTimeRemainingFraction_UpdateContext_Offset;
    static readonly int GetRelevantAnimTimeRemainingFraction_Node_Offset;
    static readonly int GetRelevantAnimTimeRemainingFraction_ReturnValue_Offset;
    
    public static float GetRelevantAnimTimeRemainingFraction(UnrealSharp.Engine.AnimUpdateContext updateContext, UnrealSharp.AnimGraphRuntime.AnimationStateResultReference node)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRelevantAnimTimeRemainingFraction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimUpdateContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetRelevantAnimTimeRemainingFraction_UpdateContext_Offset), 0, null, updateContext);
            UnrealSharp.AnimGraphRuntime.AnimationStateResultReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetRelevantAnimTimeRemainingFraction_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetRelevantAnimTimeRemainingFraction_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetRelevantAnimTimeRemainingFraction_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.AnimationStateMachineLibrary:GetRelevantAnimTimeRemaining
    static readonly IntPtr GetRelevantAnimTimeRemaining_NativeFunction;
    static readonly int GetRelevantAnimTimeRemaining_ParamsSize;
    static readonly int GetRelevantAnimTimeRemaining_UpdateContext_Offset;
    static readonly int GetRelevantAnimTimeRemaining_Node_Offset;
    static readonly int GetRelevantAnimTimeRemaining_ReturnValue_Offset;
    
    public static float GetRelevantAnimTimeRemaining(UnrealSharp.Engine.AnimUpdateContext updateContext, UnrealSharp.AnimGraphRuntime.AnimationStateResultReference node)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRelevantAnimTimeRemaining_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimUpdateContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetRelevantAnimTimeRemaining_UpdateContext_Offset), 0, null, updateContext);
            UnrealSharp.AnimGraphRuntime.AnimationStateResultReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetRelevantAnimTimeRemaining_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetRelevantAnimTimeRemaining_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetRelevantAnimTimeRemaining_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.AnimationStateMachineLibrary:ConvertToAnimationStateResultPure
    static readonly IntPtr ConvertToAnimationStateResultPure_NativeFunction;
    static readonly int ConvertToAnimationStateResultPure_ParamsSize;
    static readonly int ConvertToAnimationStateResultPure_Node_Offset;
    static readonly int ConvertToAnimationStateResultPure_AnimationState_Offset;
    static readonly int ConvertToAnimationStateResultPure_Result_Offset;
    
    public static void ConvertToAnimationStateResultPure(UnrealSharp.Engine.AnimNodeReference node, out UnrealSharp.AnimGraphRuntime.AnimationStateResultReference animationState, out bool result)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertToAnimationStateResultPure_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimNodeReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConvertToAnimationStateResultPure_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConvertToAnimationStateResultPure_NativeFunction, ParamsBuffer);
            
            animationState = UnrealSharp.AnimGraphRuntime.AnimationStateResultReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ConvertToAnimationStateResultPure_AnimationState_Offset), 0, null);
            result = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConvertToAnimationStateResultPure_Result_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimGraphRuntime.AnimationStateMachineLibrary:ConvertToAnimationStateResult
    static readonly IntPtr ConvertToAnimationStateResult_NativeFunction;
    static readonly int ConvertToAnimationStateResult_ParamsSize;
    static readonly int ConvertToAnimationStateResult_Node_Offset;
    static readonly int ConvertToAnimationStateResult_AnimationState_Offset;
    static readonly int ConvertToAnimationStateResult_Result_Offset;
    
    public static void ConvertToAnimationStateResult(UnrealSharp.Engine.AnimNodeReference node, out UnrealSharp.AnimGraphRuntime.AnimationStateResultReference animationState, out UnrealSharp.Engine.EAnimNodeReferenceConversionResult result)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertToAnimationStateResult_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimNodeReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConvertToAnimationStateResult_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConvertToAnimationStateResult_NativeFunction, ParamsBuffer);
            
            animationState = UnrealSharp.AnimGraphRuntime.AnimationStateResultReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ConvertToAnimationStateResult_AnimationState_Offset), 0, null);
            result = BlittableMarshaller<UnrealSharp.Engine.EAnimNodeReferenceConversionResult>.FromNative(IntPtr.Add(ParamsBuffer, ConvertToAnimationStateResult_Result_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimGraphRuntime.AnimationStateMachineLibrary:ConvertToAnimationStateMachinePure
    static readonly IntPtr ConvertToAnimationStateMachinePure_NativeFunction;
    static readonly int ConvertToAnimationStateMachinePure_ParamsSize;
    static readonly int ConvertToAnimationStateMachinePure_Node_Offset;
    static readonly int ConvertToAnimationStateMachinePure_AnimationState_Offset;
    static readonly int ConvertToAnimationStateMachinePure_Result_Offset;
    
    public static void ConvertToAnimationStateMachinePure(UnrealSharp.Engine.AnimNodeReference node, out UnrealSharp.AnimGraphRuntime.AnimationStateMachineReference animationState, out bool result)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertToAnimationStateMachinePure_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimNodeReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConvertToAnimationStateMachinePure_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConvertToAnimationStateMachinePure_NativeFunction, ParamsBuffer);
            
            animationState = UnrealSharp.AnimGraphRuntime.AnimationStateMachineReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ConvertToAnimationStateMachinePure_AnimationState_Offset), 0, null);
            result = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConvertToAnimationStateMachinePure_Result_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimGraphRuntime.AnimationStateMachineLibrary:ConvertToAnimationStateMachine
    static readonly IntPtr ConvertToAnimationStateMachine_NativeFunction;
    static readonly int ConvertToAnimationStateMachine_ParamsSize;
    static readonly int ConvertToAnimationStateMachine_Node_Offset;
    static readonly int ConvertToAnimationStateMachine_AnimationState_Offset;
    static readonly int ConvertToAnimationStateMachine_Result_Offset;
    
    public static void ConvertToAnimationStateMachine(UnrealSharp.Engine.AnimNodeReference node, out UnrealSharp.AnimGraphRuntime.AnimationStateMachineReference animationState, out UnrealSharp.Engine.EAnimNodeReferenceConversionResult result)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertToAnimationStateMachine_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimNodeReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConvertToAnimationStateMachine_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConvertToAnimationStateMachine_NativeFunction, ParamsBuffer);
            
            animationState = UnrealSharp.AnimGraphRuntime.AnimationStateMachineReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ConvertToAnimationStateMachine_AnimationState_Offset), 0, null);
            result = BlittableMarshaller<UnrealSharp.Engine.EAnimNodeReferenceConversionResult>.FromNative(IntPtr.Add(ParamsBuffer, ConvertToAnimationStateMachine_Result_Offset), 0, null);
            
        }
    }
    
    
}
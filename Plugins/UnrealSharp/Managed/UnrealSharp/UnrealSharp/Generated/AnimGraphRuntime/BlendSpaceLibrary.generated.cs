// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AnimGraphRuntime;

[UClass]
public partial class BlendSpaceLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static BlendSpaceLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("BlendSpaceLibrary");
        
        
        SnapToPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SnapToPosition");
        SnapToPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SnapToPosition_NativeFunction);
        SnapToPosition_BlendSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SnapToPosition_NativeFunction, "BlendSpace");
        SnapToPosition_NewPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SnapToPosition_NativeFunction, "NewPosition");
        GetPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPosition");
        GetPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPosition_NativeFunction);
        GetPosition_BlendSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPosition_NativeFunction, "BlendSpace");
        GetPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPosition_NativeFunction, "ReturnValue");
        GetFilteredPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFilteredPosition");
        GetFilteredPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFilteredPosition_NativeFunction);
        GetFilteredPosition_BlendSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFilteredPosition_NativeFunction, "BlendSpace");
        GetFilteredPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFilteredPosition_NativeFunction, "ReturnValue");
        ConvertToBlendSpacePure_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertToBlendSpacePure");
        ConvertToBlendSpacePure_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertToBlendSpacePure_NativeFunction);
        ConvertToBlendSpacePure_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToBlendSpacePure_NativeFunction, "Node");
        ConvertToBlendSpacePure_BlendSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToBlendSpacePure_NativeFunction, "BlendSpace");
        ConvertToBlendSpacePure_Result_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToBlendSpacePure_NativeFunction, "Result");
        ConvertToBlendSpace_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertToBlendSpace");
        ConvertToBlendSpace_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertToBlendSpace_NativeFunction);
        ConvertToBlendSpace_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToBlendSpace_NativeFunction, "Node");
        ConvertToBlendSpace_Result_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToBlendSpace_NativeFunction, "Result");
        ConvertToBlendSpace_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToBlendSpace_NativeFunction, "ReturnValue");
        
        
    }
    
    protected BlendSpaceLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AnimGraphRuntime.BlendSpaceLibrary:SnapToPosition
    static readonly IntPtr SnapToPosition_NativeFunction;
    static readonly int SnapToPosition_ParamsSize;
    static readonly int SnapToPosition_BlendSpace_Offset;
    static readonly int SnapToPosition_NewPosition_Offset;
    
    public static void SnapToPosition(UnrealSharp.AnimGraphRuntime.BlendSpaceReference blendSpace, System.DoubleNumerics.Vector3 newPosition)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SnapToPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.BlendSpaceReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SnapToPosition_BlendSpace_Offset), 0, null, blendSpace);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SnapToPosition_NewPosition_Offset), 0, null, newPosition);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SnapToPosition_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/AnimGraphRuntime.BlendSpaceLibrary:GetPosition
    static readonly IntPtr GetPosition_NativeFunction;
    static readonly int GetPosition_ParamsSize;
    static readonly int GetPosition_BlendSpace_Offset;
    static readonly int GetPosition_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetPosition(UnrealSharp.AnimGraphRuntime.BlendSpaceReference blendSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.BlendSpaceReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetPosition_BlendSpace_Offset), 0, null, blendSpace);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPosition_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.BlendSpaceLibrary:GetFilteredPosition
    static readonly IntPtr GetFilteredPosition_NativeFunction;
    static readonly int GetFilteredPosition_ParamsSize;
    static readonly int GetFilteredPosition_BlendSpace_Offset;
    static readonly int GetFilteredPosition_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetFilteredPosition(UnrealSharp.AnimGraphRuntime.BlendSpaceReference blendSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFilteredPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.BlendSpaceReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetFilteredPosition_BlendSpace_Offset), 0, null, blendSpace);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetFilteredPosition_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetFilteredPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.BlendSpaceLibrary:ConvertToBlendSpacePure
    static readonly IntPtr ConvertToBlendSpacePure_NativeFunction;
    static readonly int ConvertToBlendSpacePure_ParamsSize;
    static readonly int ConvertToBlendSpacePure_Node_Offset;
    static readonly int ConvertToBlendSpacePure_BlendSpace_Offset;
    static readonly int ConvertToBlendSpacePure_Result_Offset;
    
    public static void ConvertToBlendSpacePure(UnrealSharp.Engine.AnimNodeReference node, out UnrealSharp.AnimGraphRuntime.BlendSpaceReference blendSpace, out bool result)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertToBlendSpacePure_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimNodeReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConvertToBlendSpacePure_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConvertToBlendSpacePure_NativeFunction, ParamsBuffer);
            
            blendSpace = UnrealSharp.AnimGraphRuntime.BlendSpaceReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ConvertToBlendSpacePure_BlendSpace_Offset), 0, null);
            result = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConvertToBlendSpacePure_Result_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimGraphRuntime.BlendSpaceLibrary:ConvertToBlendSpace
    static readonly IntPtr ConvertToBlendSpace_NativeFunction;
    static readonly int ConvertToBlendSpace_ParamsSize;
    static readonly int ConvertToBlendSpace_Node_Offset;
    static readonly int ConvertToBlendSpace_Result_Offset;
    static readonly int ConvertToBlendSpace_ReturnValue_Offset;
    
    public static UnrealSharp.AnimGraphRuntime.BlendSpaceReference ConvertToBlendSpace(UnrealSharp.Engine.AnimNodeReference node, out UnrealSharp.Engine.EAnimNodeReferenceConversionResult result)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertToBlendSpace_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimNodeReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConvertToBlendSpace_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConvertToBlendSpace_NativeFunction, ParamsBuffer);
            
            result = BlittableMarshaller<UnrealSharp.Engine.EAnimNodeReferenceConversionResult>.FromNative(IntPtr.Add(ParamsBuffer, ConvertToBlendSpace_Result_Offset), 0, null);
            UnrealSharp.AnimGraphRuntime.BlendSpaceReference returnValue;
            returnValue = UnrealSharp.AnimGraphRuntime.BlendSpaceReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ConvertToBlendSpace_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
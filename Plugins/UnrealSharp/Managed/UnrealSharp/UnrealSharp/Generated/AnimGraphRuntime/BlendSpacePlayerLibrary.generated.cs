// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AnimGraphRuntime;

[UClass]
public partial class BlendSpacePlayerLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static BlendSpacePlayerLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("BlendSpacePlayerLibrary");
        
        
        SnapToPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SnapToPosition");
        SnapToPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SnapToPosition_NativeFunction);
        SnapToPosition_BlendSpacePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SnapToPosition_NativeFunction, "BlendSpacePlayer");
        SnapToPosition_NewPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SnapToPosition_NativeFunction, "NewPosition");
        ShouldResetPlayTimeWhenBlendSpaceChanges_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ShouldResetPlayTimeWhenBlendSpaceChanges");
        ShouldResetPlayTimeWhenBlendSpaceChanges_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ShouldResetPlayTimeWhenBlendSpaceChanges_NativeFunction);
        ShouldResetPlayTimeWhenBlendSpaceChanges_BlendSpacePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ShouldResetPlayTimeWhenBlendSpaceChanges_NativeFunction, "BlendSpacePlayer");
        ShouldResetPlayTimeWhenBlendSpaceChanges_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ShouldResetPlayTimeWhenBlendSpaceChanges_NativeFunction, "ReturnValue");
        SetResetPlayTimeWhenBlendSpaceChanges_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetResetPlayTimeWhenBlendSpaceChanges");
        SetResetPlayTimeWhenBlendSpaceChanges_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetResetPlayTimeWhenBlendSpaceChanges_NativeFunction);
        SetResetPlayTimeWhenBlendSpaceChanges_BlendSpacePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetResetPlayTimeWhenBlendSpaceChanges_NativeFunction, "BlendSpacePlayer");
        SetResetPlayTimeWhenBlendSpaceChanges_bReset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetResetPlayTimeWhenBlendSpaceChanges_NativeFunction, "bReset");
        SetResetPlayTimeWhenBlendSpaceChanges_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetResetPlayTimeWhenBlendSpaceChanges_NativeFunction, "ReturnValue");
        SetPlayRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlayRate");
        SetPlayRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlayRate_NativeFunction);
        SetPlayRate_BlendSpacePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlayRate_NativeFunction, "BlendSpacePlayer");
        SetPlayRate_PlayRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlayRate_NativeFunction, "PlayRate");
        SetPlayRate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlayRate_NativeFunction, "ReturnValue");
        SetLoop_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLoop");
        SetLoop_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLoop_NativeFunction);
        SetLoop_BlendSpacePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLoop_NativeFunction, "BlendSpacePlayer");
        SetLoop_bLoop_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLoop_NativeFunction, "bLoop");
        SetLoop_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLoop_NativeFunction, "ReturnValue");
        SetBlendSpaceWithInertialBlending_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBlendSpaceWithInertialBlending");
        SetBlendSpaceWithInertialBlending_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBlendSpaceWithInertialBlending_NativeFunction);
        SetBlendSpaceWithInertialBlending_UpdateContext_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBlendSpaceWithInertialBlending_NativeFunction, "UpdateContext");
        SetBlendSpaceWithInertialBlending_BlendSpacePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBlendSpaceWithInertialBlending_NativeFunction, "BlendSpacePlayer");
        SetBlendSpaceWithInertialBlending_BlendSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBlendSpaceWithInertialBlending_NativeFunction, "BlendSpace");
        SetBlendSpaceWithInertialBlending_BlendTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBlendSpaceWithInertialBlending_NativeFunction, "BlendTime");
        SetBlendSpaceWithInertialBlending_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBlendSpaceWithInertialBlending_NativeFunction, "ReturnValue");
        SetBlendSpace_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBlendSpace");
        SetBlendSpace_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBlendSpace_NativeFunction);
        SetBlendSpace_BlendSpacePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBlendSpace_NativeFunction, "BlendSpacePlayer");
        SetBlendSpace_BlendSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBlendSpace_NativeFunction, "BlendSpace");
        SetBlendSpace_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBlendSpace_NativeFunction, "ReturnValue");
        GetStartPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStartPosition");
        GetStartPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStartPosition_NativeFunction);
        GetStartPosition_BlendSpacePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStartPosition_NativeFunction, "BlendSpacePlayer");
        GetStartPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStartPosition_NativeFunction, "ReturnValue");
        GetPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPosition");
        GetPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPosition_NativeFunction);
        GetPosition_BlendSpacePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPosition_NativeFunction, "BlendSpacePlayer");
        GetPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPosition_NativeFunction, "ReturnValue");
        GetPlayRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayRate");
        GetPlayRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayRate_NativeFunction);
        GetPlayRate_BlendSpacePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayRate_NativeFunction, "BlendSpacePlayer");
        GetPlayRate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayRate_NativeFunction, "ReturnValue");
        GetLoop_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLoop");
        GetLoop_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLoop_NativeFunction);
        GetLoop_BlendSpacePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLoop_NativeFunction, "BlendSpacePlayer");
        GetLoop_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLoop_NativeFunction, "ReturnValue");
        GetBlendSpace_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBlendSpace");
        GetBlendSpace_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBlendSpace_NativeFunction);
        GetBlendSpace_BlendSpacePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBlendSpace_NativeFunction, "BlendSpacePlayer");
        GetBlendSpace_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBlendSpace_NativeFunction, "ReturnValue");
        ConvertToBlendSpacePlayerPure_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertToBlendSpacePlayerPure");
        ConvertToBlendSpacePlayerPure_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertToBlendSpacePlayerPure_NativeFunction);
        ConvertToBlendSpacePlayerPure_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToBlendSpacePlayerPure_NativeFunction, "Node");
        ConvertToBlendSpacePlayerPure_BlendSpacePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToBlendSpacePlayerPure_NativeFunction, "BlendSpacePlayer");
        ConvertToBlendSpacePlayerPure_Result_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToBlendSpacePlayerPure_NativeFunction, "Result");
        ConvertToBlendSpacePlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertToBlendSpacePlayer");
        ConvertToBlendSpacePlayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertToBlendSpacePlayer_NativeFunction);
        ConvertToBlendSpacePlayer_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToBlendSpacePlayer_NativeFunction, "Node");
        ConvertToBlendSpacePlayer_Result_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToBlendSpacePlayer_NativeFunction, "Result");
        ConvertToBlendSpacePlayer_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToBlendSpacePlayer_NativeFunction, "ReturnValue");
        
        
    }
    
    protected BlendSpacePlayerLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AnimGraphRuntime.BlendSpacePlayerLibrary:SnapToPosition
    static readonly IntPtr SnapToPosition_NativeFunction;
    static readonly int SnapToPosition_ParamsSize;
    static readonly int SnapToPosition_BlendSpacePlayer_Offset;
    static readonly int SnapToPosition_NewPosition_Offset;
    
    public static void SnapToPosition(UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference blendSpacePlayer, System.DoubleNumerics.Vector3 newPosition)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SnapToPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SnapToPosition_BlendSpacePlayer_Offset), 0, null, blendSpacePlayer);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SnapToPosition_NewPosition_Offset), 0, null, newPosition);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SnapToPosition_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/AnimGraphRuntime.BlendSpacePlayerLibrary:ShouldResetPlayTimeWhenBlendSpaceChanges
    static readonly IntPtr ShouldResetPlayTimeWhenBlendSpaceChanges_NativeFunction;
    static readonly int ShouldResetPlayTimeWhenBlendSpaceChanges_ParamsSize;
    static readonly int ShouldResetPlayTimeWhenBlendSpaceChanges_BlendSpacePlayer_Offset;
    static readonly int ShouldResetPlayTimeWhenBlendSpaceChanges_ReturnValue_Offset;
    
    public static bool ShouldResetPlayTimeWhenBlendSpaceChanges(UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference blendSpacePlayer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ShouldResetPlayTimeWhenBlendSpaceChanges_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ShouldResetPlayTimeWhenBlendSpaceChanges_BlendSpacePlayer_Offset), 0, null, blendSpacePlayer);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ShouldResetPlayTimeWhenBlendSpaceChanges_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ShouldResetPlayTimeWhenBlendSpaceChanges_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.BlendSpacePlayerLibrary:SetResetPlayTimeWhenBlendSpaceChanges
    static readonly IntPtr SetResetPlayTimeWhenBlendSpaceChanges_NativeFunction;
    static readonly int SetResetPlayTimeWhenBlendSpaceChanges_ParamsSize;
    static readonly int SetResetPlayTimeWhenBlendSpaceChanges_BlendSpacePlayer_Offset;
    static readonly int SetResetPlayTimeWhenBlendSpaceChanges_bReset_Offset;
    static readonly int SetResetPlayTimeWhenBlendSpaceChanges_ReturnValue_Offset;
    
    public static UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference SetResetPlayTimeWhenBlendSpaceChanges(UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference blendSpacePlayer, bool bReset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetResetPlayTimeWhenBlendSpaceChanges_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetResetPlayTimeWhenBlendSpaceChanges_BlendSpacePlayer_Offset), 0, null, blendSpacePlayer);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetResetPlayTimeWhenBlendSpaceChanges_bReset_Offset), 0, null, bReset);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetResetPlayTimeWhenBlendSpaceChanges_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference returnValue;
            returnValue = UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetResetPlayTimeWhenBlendSpaceChanges_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.BlendSpacePlayerLibrary:SetPlayRate
    static readonly IntPtr SetPlayRate_NativeFunction;
    static readonly int SetPlayRate_ParamsSize;
    static readonly int SetPlayRate_BlendSpacePlayer_Offset;
    static readonly int SetPlayRate_PlayRate_Offset;
    static readonly int SetPlayRate_ReturnValue_Offset;
    
    public static UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference SetPlayRate(UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference blendSpacePlayer, float playRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlayRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetPlayRate_BlendSpacePlayer_Offset), 0, null, blendSpacePlayer);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPlayRate_PlayRate_Offset), 0, null, playRate);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetPlayRate_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference returnValue;
            returnValue = UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetPlayRate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.BlendSpacePlayerLibrary:SetLoop
    static readonly IntPtr SetLoop_NativeFunction;
    static readonly int SetLoop_ParamsSize;
    static readonly int SetLoop_BlendSpacePlayer_Offset;
    static readonly int SetLoop_bLoop_Offset;
    static readonly int SetLoop_ReturnValue_Offset;
    
    public static UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference SetLoop(UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference blendSpacePlayer, bool bLoop)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLoop_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetLoop_BlendSpacePlayer_Offset), 0, null, blendSpacePlayer);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLoop_bLoop_Offset), 0, null, bLoop);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLoop_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference returnValue;
            returnValue = UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetLoop_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.BlendSpacePlayerLibrary:SetBlendSpaceWithInertialBlending
    static readonly IntPtr SetBlendSpaceWithInertialBlending_NativeFunction;
    static readonly int SetBlendSpaceWithInertialBlending_ParamsSize;
    static readonly int SetBlendSpaceWithInertialBlending_UpdateContext_Offset;
    static readonly int SetBlendSpaceWithInertialBlending_BlendSpacePlayer_Offset;
    static readonly int SetBlendSpaceWithInertialBlending_BlendSpace_Offset;
    static readonly int SetBlendSpaceWithInertialBlending_BlendTime_Offset;
    static readonly int SetBlendSpaceWithInertialBlending_ReturnValue_Offset;
    
    public static UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference SetBlendSpaceWithInertialBlending(UnrealSharp.Engine.AnimUpdateContext updateContext, UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference blendSpacePlayer, UnrealSharp.Engine.BlendSpace blendSpace, float blendTime = 0.200000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBlendSpaceWithInertialBlending_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimUpdateContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetBlendSpaceWithInertialBlending_UpdateContext_Offset), 0, null, updateContext);
            UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetBlendSpaceWithInertialBlending_BlendSpacePlayer_Offset), 0, null, blendSpacePlayer);
            ObjectMarshaller<UnrealSharp.Engine.BlendSpace>.ToNative(IntPtr.Add(ParamsBuffer, SetBlendSpaceWithInertialBlending_BlendSpace_Offset), 0, null, blendSpace);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetBlendSpaceWithInertialBlending_BlendTime_Offset), 0, null, blendTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetBlendSpaceWithInertialBlending_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference returnValue;
            returnValue = UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetBlendSpaceWithInertialBlending_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.BlendSpacePlayerLibrary:SetBlendSpace
    static readonly IntPtr SetBlendSpace_NativeFunction;
    static readonly int SetBlendSpace_ParamsSize;
    static readonly int SetBlendSpace_BlendSpacePlayer_Offset;
    static readonly int SetBlendSpace_BlendSpace_Offset;
    static readonly int SetBlendSpace_ReturnValue_Offset;
    
    public static UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference SetBlendSpace(UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference blendSpacePlayer, UnrealSharp.Engine.BlendSpace blendSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBlendSpace_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetBlendSpace_BlendSpacePlayer_Offset), 0, null, blendSpacePlayer);
            ObjectMarshaller<UnrealSharp.Engine.BlendSpace>.ToNative(IntPtr.Add(ParamsBuffer, SetBlendSpace_BlendSpace_Offset), 0, null, blendSpace);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetBlendSpace_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference returnValue;
            returnValue = UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetBlendSpace_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.BlendSpacePlayerLibrary:GetStartPosition
    static readonly IntPtr GetStartPosition_NativeFunction;
    static readonly int GetStartPosition_ParamsSize;
    static readonly int GetStartPosition_BlendSpacePlayer_Offset;
    static readonly int GetStartPosition_ReturnValue_Offset;
    
    public static float GetStartPosition(UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference blendSpacePlayer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStartPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetStartPosition_BlendSpacePlayer_Offset), 0, null, blendSpacePlayer);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetStartPosition_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetStartPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.BlendSpacePlayerLibrary:GetPosition
    static readonly IntPtr GetPosition_NativeFunction;
    static readonly int GetPosition_ParamsSize;
    static readonly int GetPosition_BlendSpacePlayer_Offset;
    static readonly int GetPosition_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetPosition(UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference blendSpacePlayer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetPosition_BlendSpacePlayer_Offset), 0, null, blendSpacePlayer);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPosition_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.BlendSpacePlayerLibrary:GetPlayRate
    static readonly IntPtr GetPlayRate_NativeFunction;
    static readonly int GetPlayRate_ParamsSize;
    static readonly int GetPlayRate_BlendSpacePlayer_Offset;
    static readonly int GetPlayRate_ReturnValue_Offset;
    
    public static float GetPlayRate(UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference blendSpacePlayer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetPlayRate_BlendSpacePlayer_Offset), 0, null, blendSpacePlayer);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlayRate_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetPlayRate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.BlendSpacePlayerLibrary:GetLoop
    static readonly IntPtr GetLoop_NativeFunction;
    static readonly int GetLoop_ParamsSize;
    static readonly int GetLoop_BlendSpacePlayer_Offset;
    static readonly int GetLoop_ReturnValue_Offset;
    
    public static bool GetLoop(UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference blendSpacePlayer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLoop_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetLoop_BlendSpacePlayer_Offset), 0, null, blendSpacePlayer);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLoop_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetLoop_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.BlendSpacePlayerLibrary:GetBlendSpace
    static readonly IntPtr GetBlendSpace_NativeFunction;
    static readonly int GetBlendSpace_ParamsSize;
    static readonly int GetBlendSpace_BlendSpacePlayer_Offset;
    static readonly int GetBlendSpace_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.BlendSpace GetBlendSpace(UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference blendSpacePlayer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBlendSpace_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetBlendSpace_BlendSpacePlayer_Offset), 0, null, blendSpacePlayer);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetBlendSpace_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.BlendSpace returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.BlendSpace>.FromNative(IntPtr.Add(ParamsBuffer, GetBlendSpace_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.BlendSpacePlayerLibrary:ConvertToBlendSpacePlayerPure
    static readonly IntPtr ConvertToBlendSpacePlayerPure_NativeFunction;
    static readonly int ConvertToBlendSpacePlayerPure_ParamsSize;
    static readonly int ConvertToBlendSpacePlayerPure_Node_Offset;
    static readonly int ConvertToBlendSpacePlayerPure_BlendSpacePlayer_Offset;
    static readonly int ConvertToBlendSpacePlayerPure_Result_Offset;
    
    public static void ConvertToBlendSpacePlayerPure(UnrealSharp.Engine.AnimNodeReference node, out UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference blendSpacePlayer, out bool result)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertToBlendSpacePlayerPure_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimNodeReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConvertToBlendSpacePlayerPure_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConvertToBlendSpacePlayerPure_NativeFunction, ParamsBuffer);
            
            blendSpacePlayer = UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ConvertToBlendSpacePlayerPure_BlendSpacePlayer_Offset), 0, null);
            result = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConvertToBlendSpacePlayerPure_Result_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimGraphRuntime.BlendSpacePlayerLibrary:ConvertToBlendSpacePlayer
    static readonly IntPtr ConvertToBlendSpacePlayer_NativeFunction;
    static readonly int ConvertToBlendSpacePlayer_ParamsSize;
    static readonly int ConvertToBlendSpacePlayer_Node_Offset;
    static readonly int ConvertToBlendSpacePlayer_Result_Offset;
    static readonly int ConvertToBlendSpacePlayer_ReturnValue_Offset;
    
    public static UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference ConvertToBlendSpacePlayer(UnrealSharp.Engine.AnimNodeReference node, out UnrealSharp.Engine.EAnimNodeReferenceConversionResult result)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertToBlendSpacePlayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimNodeReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConvertToBlendSpacePlayer_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConvertToBlendSpacePlayer_NativeFunction, ParamsBuffer);
            
            result = BlittableMarshaller<UnrealSharp.Engine.EAnimNodeReferenceConversionResult>.FromNative(IntPtr.Add(ParamsBuffer, ConvertToBlendSpacePlayer_Result_Offset), 0, null);
            UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReference returnValue;
            returnValue = UnrealSharp.AnimGraphRuntime.BlendSpacePlayerReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ConvertToBlendSpacePlayer_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
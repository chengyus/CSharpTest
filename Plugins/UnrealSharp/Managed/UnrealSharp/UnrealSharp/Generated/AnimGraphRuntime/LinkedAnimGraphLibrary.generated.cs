// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AnimGraphRuntime;

[UClass]
public partial class LinkedAnimGraphLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static LinkedAnimGraphLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("LinkedAnimGraphLibrary");
        
        
        HasLinkedAnimInstance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasLinkedAnimInstance");
        HasLinkedAnimInstance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasLinkedAnimInstance_NativeFunction);
        HasLinkedAnimInstance_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasLinkedAnimInstance_NativeFunction, "Node");
        HasLinkedAnimInstance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasLinkedAnimInstance_NativeFunction, "ReturnValue");
        GetLinkedAnimInstance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLinkedAnimInstance");
        GetLinkedAnimInstance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLinkedAnimInstance_NativeFunction);
        GetLinkedAnimInstance_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinkedAnimInstance_NativeFunction, "Node");
        GetLinkedAnimInstance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinkedAnimInstance_NativeFunction, "ReturnValue");
        ConvertToLinkedAnimGraphPure_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertToLinkedAnimGraphPure");
        ConvertToLinkedAnimGraphPure_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertToLinkedAnimGraphPure_NativeFunction);
        ConvertToLinkedAnimGraphPure_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToLinkedAnimGraphPure_NativeFunction, "Node");
        ConvertToLinkedAnimGraphPure_LinkedAnimGraph_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToLinkedAnimGraphPure_NativeFunction, "LinkedAnimGraph");
        ConvertToLinkedAnimGraphPure_Result_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToLinkedAnimGraphPure_NativeFunction, "Result");
        ConvertToLinkedAnimGraph_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertToLinkedAnimGraph");
        ConvertToLinkedAnimGraph_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertToLinkedAnimGraph_NativeFunction);
        ConvertToLinkedAnimGraph_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToLinkedAnimGraph_NativeFunction, "Node");
        ConvertToLinkedAnimGraph_Result_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToLinkedAnimGraph_NativeFunction, "Result");
        ConvertToLinkedAnimGraph_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToLinkedAnimGraph_NativeFunction, "ReturnValue");
        
        
    }
    
    protected LinkedAnimGraphLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AnimGraphRuntime.LinkedAnimGraphLibrary:HasLinkedAnimInstance
    static readonly IntPtr HasLinkedAnimInstance_NativeFunction;
    static readonly int HasLinkedAnimInstance_ParamsSize;
    static readonly int HasLinkedAnimInstance_Node_Offset;
    static readonly int HasLinkedAnimInstance_ReturnValue_Offset;
    
    public static bool HasLinkedAnimInstance(UnrealSharp.AnimGraphRuntime.LinkedAnimGraphReference node)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasLinkedAnimInstance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.LinkedAnimGraphReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, HasLinkedAnimInstance_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, HasLinkedAnimInstance_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasLinkedAnimInstance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.LinkedAnimGraphLibrary:GetLinkedAnimInstance
    static readonly IntPtr GetLinkedAnimInstance_NativeFunction;
    static readonly int GetLinkedAnimInstance_ParamsSize;
    static readonly int GetLinkedAnimInstance_Node_Offset;
    static readonly int GetLinkedAnimInstance_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.AnimInstance GetLinkedAnimInstance(UnrealSharp.AnimGraphRuntime.LinkedAnimGraphReference node)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLinkedAnimInstance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.LinkedAnimGraphReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetLinkedAnimInstance_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLinkedAnimInstance_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AnimInstance returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AnimInstance>.FromNative(IntPtr.Add(ParamsBuffer, GetLinkedAnimInstance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.LinkedAnimGraphLibrary:ConvertToLinkedAnimGraphPure
    static readonly IntPtr ConvertToLinkedAnimGraphPure_NativeFunction;
    static readonly int ConvertToLinkedAnimGraphPure_ParamsSize;
    static readonly int ConvertToLinkedAnimGraphPure_Node_Offset;
    static readonly int ConvertToLinkedAnimGraphPure_LinkedAnimGraph_Offset;
    static readonly int ConvertToLinkedAnimGraphPure_Result_Offset;
    
    public static void ConvertToLinkedAnimGraphPure(UnrealSharp.Engine.AnimNodeReference node, out UnrealSharp.AnimGraphRuntime.LinkedAnimGraphReference linkedAnimGraph, out bool result)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertToLinkedAnimGraphPure_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimNodeReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConvertToLinkedAnimGraphPure_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConvertToLinkedAnimGraphPure_NativeFunction, ParamsBuffer);
            
            linkedAnimGraph = UnrealSharp.AnimGraphRuntime.LinkedAnimGraphReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ConvertToLinkedAnimGraphPure_LinkedAnimGraph_Offset), 0, null);
            result = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConvertToLinkedAnimGraphPure_Result_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimGraphRuntime.LinkedAnimGraphLibrary:ConvertToLinkedAnimGraph
    static readonly IntPtr ConvertToLinkedAnimGraph_NativeFunction;
    static readonly int ConvertToLinkedAnimGraph_ParamsSize;
    static readonly int ConvertToLinkedAnimGraph_Node_Offset;
    static readonly int ConvertToLinkedAnimGraph_Result_Offset;
    static readonly int ConvertToLinkedAnimGraph_ReturnValue_Offset;
    
    public static UnrealSharp.AnimGraphRuntime.LinkedAnimGraphReference ConvertToLinkedAnimGraph(UnrealSharp.Engine.AnimNodeReference node, out UnrealSharp.Engine.EAnimNodeReferenceConversionResult result)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertToLinkedAnimGraph_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimNodeReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConvertToLinkedAnimGraph_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConvertToLinkedAnimGraph_NativeFunction, ParamsBuffer);
            
            result = BlittableMarshaller<UnrealSharp.Engine.EAnimNodeReferenceConversionResult>.FromNative(IntPtr.Add(ParamsBuffer, ConvertToLinkedAnimGraph_Result_Offset), 0, null);
            UnrealSharp.AnimGraphRuntime.LinkedAnimGraphReference returnValue;
            returnValue = UnrealSharp.AnimGraphRuntime.LinkedAnimGraphReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ConvertToLinkedAnimGraph_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
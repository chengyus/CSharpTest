// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AnimGraphRuntime;

[UClass]
public partial class SequenceEvaluatorLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static SequenceEvaluatorLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SequenceEvaluatorLibrary");
        
        
        SetSequenceWithInertialBlending_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSequenceWithInertialBlending");
        SetSequenceWithInertialBlending_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSequenceWithInertialBlending_NativeFunction);
        SetSequenceWithInertialBlending_UpdateContext_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSequenceWithInertialBlending_NativeFunction, "UpdateContext");
        SetSequenceWithInertialBlending_SequenceEvaluator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSequenceWithInertialBlending_NativeFunction, "SequenceEvaluator");
        SetSequenceWithInertialBlending_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSequenceWithInertialBlending_NativeFunction, "Sequence");
        SetSequenceWithInertialBlending_BlendTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSequenceWithInertialBlending_NativeFunction, "BlendTime");
        SetSequenceWithInertialBlending_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSequenceWithInertialBlending_NativeFunction, "ReturnValue");
        SetSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSequence");
        SetSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSequence_NativeFunction);
        SetSequence_SequenceEvaluator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSequence_NativeFunction, "SequenceEvaluator");
        SetSequence_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSequence_NativeFunction, "Sequence");
        SetSequence_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSequence_NativeFunction, "ReturnValue");
        SetExplicitTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetExplicitTime");
        SetExplicitTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetExplicitTime_NativeFunction);
        SetExplicitTime_SequenceEvaluator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetExplicitTime_NativeFunction, "SequenceEvaluator");
        SetExplicitTime_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetExplicitTime_NativeFunction, "Time");
        SetExplicitTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetExplicitTime_NativeFunction, "ReturnValue");
        GetSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSequence");
        GetSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSequence_NativeFunction);
        GetSequence_SequenceEvaluator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSequence_NativeFunction, "SequenceEvaluator");
        GetSequence_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSequence_NativeFunction, "ReturnValue");
        GetAccumulatedTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAccumulatedTime");
        GetAccumulatedTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAccumulatedTime_NativeFunction);
        GetAccumulatedTime_SequenceEvaluator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAccumulatedTime_NativeFunction, "SequenceEvaluator");
        GetAccumulatedTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAccumulatedTime_NativeFunction, "ReturnValue");
        ConvertToSequenceEvaluatorPure_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertToSequenceEvaluatorPure");
        ConvertToSequenceEvaluatorPure_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertToSequenceEvaluatorPure_NativeFunction);
        ConvertToSequenceEvaluatorPure_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToSequenceEvaluatorPure_NativeFunction, "Node");
        ConvertToSequenceEvaluatorPure_SequenceEvaluator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToSequenceEvaluatorPure_NativeFunction, "SequenceEvaluator");
        ConvertToSequenceEvaluatorPure_Result_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToSequenceEvaluatorPure_NativeFunction, "Result");
        ConvertToSequenceEvaluator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertToSequenceEvaluator");
        ConvertToSequenceEvaluator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertToSequenceEvaluator_NativeFunction);
        ConvertToSequenceEvaluator_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToSequenceEvaluator_NativeFunction, "Node");
        ConvertToSequenceEvaluator_Result_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToSequenceEvaluator_NativeFunction, "Result");
        ConvertToSequenceEvaluator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToSequenceEvaluator_NativeFunction, "ReturnValue");
        AdvanceTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AdvanceTime");
        AdvanceTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AdvanceTime_NativeFunction);
        AdvanceTime_UpdateContext_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AdvanceTime_NativeFunction, "UpdateContext");
        AdvanceTime_SequenceEvaluator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AdvanceTime_NativeFunction, "SequenceEvaluator");
        AdvanceTime_PlayRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AdvanceTime_NativeFunction, "PlayRate");
        AdvanceTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AdvanceTime_NativeFunction, "ReturnValue");
        
        
    }
    
    protected SequenceEvaluatorLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AnimGraphRuntime.SequenceEvaluatorLibrary:SetSequenceWithInertialBlending
    static readonly IntPtr SetSequenceWithInertialBlending_NativeFunction;
    static readonly int SetSequenceWithInertialBlending_ParamsSize;
    static readonly int SetSequenceWithInertialBlending_UpdateContext_Offset;
    static readonly int SetSequenceWithInertialBlending_SequenceEvaluator_Offset;
    static readonly int SetSequenceWithInertialBlending_Sequence_Offset;
    static readonly int SetSequenceWithInertialBlending_BlendTime_Offset;
    static readonly int SetSequenceWithInertialBlending_ReturnValue_Offset;
    
    public static UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReference SetSequenceWithInertialBlending(UnrealSharp.Engine.AnimUpdateContext updateContext, UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReference sequenceEvaluator, UnrealSharp.Engine.AnimSequenceBase sequence, float blendTime = 0.200000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSequenceWithInertialBlending_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimUpdateContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetSequenceWithInertialBlending_UpdateContext_Offset), 0, null, updateContext);
            UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetSequenceWithInertialBlending_SequenceEvaluator_Offset), 0, null, sequenceEvaluator);
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, SetSequenceWithInertialBlending_Sequence_Offset), 0, null, sequence);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSequenceWithInertialBlending_BlendTime_Offset), 0, null, blendTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetSequenceWithInertialBlending_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReference returnValue;
            returnValue = UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetSequenceWithInertialBlending_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.SequenceEvaluatorLibrary:SetSequence
    static readonly IntPtr SetSequence_NativeFunction;
    static readonly int SetSequence_ParamsSize;
    static readonly int SetSequence_SequenceEvaluator_Offset;
    static readonly int SetSequence_Sequence_Offset;
    static readonly int SetSequence_ReturnValue_Offset;
    
    public static UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReference SetSequence(UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReference sequenceEvaluator, UnrealSharp.Engine.AnimSequenceBase sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetSequence_SequenceEvaluator_Offset), 0, null, sequenceEvaluator);
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, SetSequence_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetSequence_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReference returnValue;
            returnValue = UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetSequence_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.SequenceEvaluatorLibrary:SetExplicitTime
    static readonly IntPtr SetExplicitTime_NativeFunction;
    static readonly int SetExplicitTime_ParamsSize;
    static readonly int SetExplicitTime_SequenceEvaluator_Offset;
    static readonly int SetExplicitTime_Time_Offset;
    static readonly int SetExplicitTime_ReturnValue_Offset;
    
    public static UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReference SetExplicitTime(UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReference sequenceEvaluator, float time)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetExplicitTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetExplicitTime_SequenceEvaluator_Offset), 0, null, sequenceEvaluator);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetExplicitTime_Time_Offset), 0, null, time);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetExplicitTime_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReference returnValue;
            returnValue = UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetExplicitTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.SequenceEvaluatorLibrary:GetSequence
    static readonly IntPtr GetSequence_NativeFunction;
    static readonly int GetSequence_ParamsSize;
    static readonly int GetSequence_SequenceEvaluator_Offset;
    static readonly int GetSequence_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.AnimSequenceBase GetSequence(UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReference sequenceEvaluator)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetSequence_SequenceEvaluator_Offset), 0, null, sequenceEvaluator);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSequence_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AnimSequenceBase returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.FromNative(IntPtr.Add(ParamsBuffer, GetSequence_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.SequenceEvaluatorLibrary:GetAccumulatedTime
    static readonly IntPtr GetAccumulatedTime_NativeFunction;
    static readonly int GetAccumulatedTime_ParamsSize;
    static readonly int GetAccumulatedTime_SequenceEvaluator_Offset;
    static readonly int GetAccumulatedTime_ReturnValue_Offset;
    
    public static float GetAccumulatedTime(UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReference sequenceEvaluator)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAccumulatedTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetAccumulatedTime_SequenceEvaluator_Offset), 0, null, sequenceEvaluator);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAccumulatedTime_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetAccumulatedTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.SequenceEvaluatorLibrary:ConvertToSequenceEvaluatorPure
    static readonly IntPtr ConvertToSequenceEvaluatorPure_NativeFunction;
    static readonly int ConvertToSequenceEvaluatorPure_ParamsSize;
    static readonly int ConvertToSequenceEvaluatorPure_Node_Offset;
    static readonly int ConvertToSequenceEvaluatorPure_SequenceEvaluator_Offset;
    static readonly int ConvertToSequenceEvaluatorPure_Result_Offset;
    
    public static void ConvertToSequenceEvaluatorPure(UnrealSharp.Engine.AnimNodeReference node, out UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReference sequenceEvaluator, out bool result)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertToSequenceEvaluatorPure_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimNodeReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConvertToSequenceEvaluatorPure_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConvertToSequenceEvaluatorPure_NativeFunction, ParamsBuffer);
            
            sequenceEvaluator = UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ConvertToSequenceEvaluatorPure_SequenceEvaluator_Offset), 0, null);
            result = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConvertToSequenceEvaluatorPure_Result_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimGraphRuntime.SequenceEvaluatorLibrary:ConvertToSequenceEvaluator
    static readonly IntPtr ConvertToSequenceEvaluator_NativeFunction;
    static readonly int ConvertToSequenceEvaluator_ParamsSize;
    static readonly int ConvertToSequenceEvaluator_Node_Offset;
    static readonly int ConvertToSequenceEvaluator_Result_Offset;
    static readonly int ConvertToSequenceEvaluator_ReturnValue_Offset;
    
    public static UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReference ConvertToSequenceEvaluator(UnrealSharp.Engine.AnimNodeReference node, out UnrealSharp.Engine.EAnimNodeReferenceConversionResult result)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertToSequenceEvaluator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimNodeReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConvertToSequenceEvaluator_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConvertToSequenceEvaluator_NativeFunction, ParamsBuffer);
            
            result = BlittableMarshaller<UnrealSharp.Engine.EAnimNodeReferenceConversionResult>.FromNative(IntPtr.Add(ParamsBuffer, ConvertToSequenceEvaluator_Result_Offset), 0, null);
            UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReference returnValue;
            returnValue = UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ConvertToSequenceEvaluator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.SequenceEvaluatorLibrary:AdvanceTime
    static readonly IntPtr AdvanceTime_NativeFunction;
    static readonly int AdvanceTime_ParamsSize;
    static readonly int AdvanceTime_UpdateContext_Offset;
    static readonly int AdvanceTime_SequenceEvaluator_Offset;
    static readonly int AdvanceTime_PlayRate_Offset;
    static readonly int AdvanceTime_ReturnValue_Offset;
    
    public static UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReference AdvanceTime(UnrealSharp.Engine.AnimUpdateContext updateContext, UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReference sequenceEvaluator, float playRate = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AdvanceTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimUpdateContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AdvanceTime_UpdateContext_Offset), 0, null, updateContext);
            UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AdvanceTime_SequenceEvaluator_Offset), 0, null, sequenceEvaluator);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AdvanceTime_PlayRate_Offset), 0, null, playRate);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AdvanceTime_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReference returnValue;
            returnValue = UnrealSharp.AnimGraphRuntime.SequenceEvaluatorReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, AdvanceTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
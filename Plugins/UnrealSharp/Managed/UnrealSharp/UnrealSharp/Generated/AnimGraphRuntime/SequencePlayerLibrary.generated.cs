// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AnimGraphRuntime;

[UClass]
public partial class SequencePlayerLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static SequencePlayerLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SequencePlayerLibrary");
        
        
        SetStartPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetStartPosition");
        SetStartPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetStartPosition_NativeFunction);
        SetStartPosition_SequencePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetStartPosition_NativeFunction, "SequencePlayer");
        SetStartPosition_StartPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetStartPosition_NativeFunction, "StartPosition");
        SetStartPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetStartPosition_NativeFunction, "ReturnValue");
        SetSequenceWithInertialBlending_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSequenceWithInertialBlending");
        SetSequenceWithInertialBlending_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSequenceWithInertialBlending_NativeFunction);
        SetSequenceWithInertialBlending_UpdateContext_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSequenceWithInertialBlending_NativeFunction, "UpdateContext");
        SetSequenceWithInertialBlending_SequencePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSequenceWithInertialBlending_NativeFunction, "SequencePlayer");
        SetSequenceWithInertialBlending_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSequenceWithInertialBlending_NativeFunction, "Sequence");
        SetSequenceWithInertialBlending_BlendTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSequenceWithInertialBlending_NativeFunction, "BlendTime");
        SetSequenceWithInertialBlending_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSequenceWithInertialBlending_NativeFunction, "ReturnValue");
        SetSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSequence");
        SetSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSequence_NativeFunction);
        SetSequence_SequencePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSequence_NativeFunction, "SequencePlayer");
        SetSequence_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSequence_NativeFunction, "Sequence");
        SetSequence_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSequence_NativeFunction, "ReturnValue");
        SetPlayRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlayRate");
        SetPlayRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlayRate_NativeFunction);
        SetPlayRate_SequencePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlayRate_NativeFunction, "SequencePlayer");
        SetPlayRate_PlayRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlayRate_NativeFunction, "PlayRate");
        SetPlayRate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlayRate_NativeFunction, "ReturnValue");
        SetAccumulatedTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAccumulatedTime");
        SetAccumulatedTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAccumulatedTime_NativeFunction);
        SetAccumulatedTime_SequencePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAccumulatedTime_NativeFunction, "SequencePlayer");
        SetAccumulatedTime_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAccumulatedTime_NativeFunction, "Time");
        SetAccumulatedTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAccumulatedTime_NativeFunction, "ReturnValue");
        GetStartPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStartPosition");
        GetStartPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStartPosition_NativeFunction);
        GetStartPosition_SequencePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStartPosition_NativeFunction, "SequencePlayer");
        GetStartPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStartPosition_NativeFunction, "ReturnValue");
        GetSequencePure_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSequencePure");
        GetSequencePure_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSequencePure_NativeFunction);
        GetSequencePure_SequencePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSequencePure_NativeFunction, "SequencePlayer");
        GetSequencePure_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSequencePure_NativeFunction, "ReturnValue");
        GetSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSequence");
        GetSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSequence_NativeFunction);
        GetSequence_SequencePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSequence_NativeFunction, "SequencePlayer");
        GetSequence_SequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSequence_NativeFunction, "SequenceBase");
        GetSequence_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSequence_NativeFunction, "ReturnValue");
        GetPlayRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayRate");
        GetPlayRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayRate_NativeFunction);
        GetPlayRate_SequencePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayRate_NativeFunction, "SequencePlayer");
        GetPlayRate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayRate_NativeFunction, "ReturnValue");
        GetLoopAnimation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLoopAnimation");
        GetLoopAnimation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLoopAnimation_NativeFunction);
        GetLoopAnimation_SequencePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLoopAnimation_NativeFunction, "SequencePlayer");
        GetLoopAnimation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLoopAnimation_NativeFunction, "ReturnValue");
        GetAccumulatedTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAccumulatedTime");
        GetAccumulatedTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAccumulatedTime_NativeFunction);
        GetAccumulatedTime_SequencePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAccumulatedTime_NativeFunction, "SequencePlayer");
        GetAccumulatedTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAccumulatedTime_NativeFunction, "ReturnValue");
        ConvertToSequencePlayerPure_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertToSequencePlayerPure");
        ConvertToSequencePlayerPure_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertToSequencePlayerPure_NativeFunction);
        ConvertToSequencePlayerPure_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToSequencePlayerPure_NativeFunction, "Node");
        ConvertToSequencePlayerPure_SequencePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToSequencePlayerPure_NativeFunction, "SequencePlayer");
        ConvertToSequencePlayerPure_Result_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToSequencePlayerPure_NativeFunction, "Result");
        ConvertToSequencePlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertToSequencePlayer");
        ConvertToSequencePlayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertToSequencePlayer_NativeFunction);
        ConvertToSequencePlayer_Node_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToSequencePlayer_NativeFunction, "Node");
        ConvertToSequencePlayer_Result_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToSequencePlayer_NativeFunction, "Result");
        ConvertToSequencePlayer_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToSequencePlayer_NativeFunction, "ReturnValue");
        ComputePlayRateFromDuration_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ComputePlayRateFromDuration");
        ComputePlayRateFromDuration_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ComputePlayRateFromDuration_NativeFunction);
        ComputePlayRateFromDuration_SequencePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComputePlayRateFromDuration_NativeFunction, "SequencePlayer");
        ComputePlayRateFromDuration_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComputePlayRateFromDuration_NativeFunction, "Duration");
        ComputePlayRateFromDuration_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComputePlayRateFromDuration_NativeFunction, "ReturnValue");
        
        
    }
    
    protected SequencePlayerLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AnimGraphRuntime.SequencePlayerLibrary:SetStartPosition
    static readonly IntPtr SetStartPosition_NativeFunction;
    static readonly int SetStartPosition_ParamsSize;
    static readonly int SetStartPosition_SequencePlayer_Offset;
    static readonly int SetStartPosition_StartPosition_Offset;
    static readonly int SetStartPosition_ReturnValue_Offset;
    
    public static UnrealSharp.AnimGraphRuntime.SequencePlayerReference SetStartPosition(UnrealSharp.AnimGraphRuntime.SequencePlayerReference sequencePlayer, float startPosition)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetStartPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.SequencePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetStartPosition_SequencePlayer_Offset), 0, null, sequencePlayer);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetStartPosition_StartPosition_Offset), 0, null, startPosition);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetStartPosition_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AnimGraphRuntime.SequencePlayerReference returnValue;
            returnValue = UnrealSharp.AnimGraphRuntime.SequencePlayerReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetStartPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.SequencePlayerLibrary:SetSequenceWithInertialBlending
    static readonly IntPtr SetSequenceWithInertialBlending_NativeFunction;
    static readonly int SetSequenceWithInertialBlending_ParamsSize;
    static readonly int SetSequenceWithInertialBlending_UpdateContext_Offset;
    static readonly int SetSequenceWithInertialBlending_SequencePlayer_Offset;
    static readonly int SetSequenceWithInertialBlending_Sequence_Offset;
    static readonly int SetSequenceWithInertialBlending_BlendTime_Offset;
    static readonly int SetSequenceWithInertialBlending_ReturnValue_Offset;
    
    public static UnrealSharp.AnimGraphRuntime.SequencePlayerReference SetSequenceWithInertialBlending(UnrealSharp.Engine.AnimUpdateContext updateContext, UnrealSharp.AnimGraphRuntime.SequencePlayerReference sequencePlayer, UnrealSharp.Engine.AnimSequenceBase sequence, float blendTime = 0.200000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSequenceWithInertialBlending_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimUpdateContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetSequenceWithInertialBlending_UpdateContext_Offset), 0, null, updateContext);
            UnrealSharp.AnimGraphRuntime.SequencePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetSequenceWithInertialBlending_SequencePlayer_Offset), 0, null, sequencePlayer);
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, SetSequenceWithInertialBlending_Sequence_Offset), 0, null, sequence);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSequenceWithInertialBlending_BlendTime_Offset), 0, null, blendTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetSequenceWithInertialBlending_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AnimGraphRuntime.SequencePlayerReference returnValue;
            returnValue = UnrealSharp.AnimGraphRuntime.SequencePlayerReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetSequenceWithInertialBlending_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.SequencePlayerLibrary:SetSequence
    static readonly IntPtr SetSequence_NativeFunction;
    static readonly int SetSequence_ParamsSize;
    static readonly int SetSequence_SequencePlayer_Offset;
    static readonly int SetSequence_Sequence_Offset;
    static readonly int SetSequence_ReturnValue_Offset;
    
    public static UnrealSharp.AnimGraphRuntime.SequencePlayerReference SetSequence(UnrealSharp.AnimGraphRuntime.SequencePlayerReference sequencePlayer, UnrealSharp.Engine.AnimSequenceBase sequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.SequencePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetSequence_SequencePlayer_Offset), 0, null, sequencePlayer);
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, SetSequence_Sequence_Offset), 0, null, sequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetSequence_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AnimGraphRuntime.SequencePlayerReference returnValue;
            returnValue = UnrealSharp.AnimGraphRuntime.SequencePlayerReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetSequence_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.SequencePlayerLibrary:SetPlayRate
    static readonly IntPtr SetPlayRate_NativeFunction;
    static readonly int SetPlayRate_ParamsSize;
    static readonly int SetPlayRate_SequencePlayer_Offset;
    static readonly int SetPlayRate_PlayRate_Offset;
    static readonly int SetPlayRate_ReturnValue_Offset;
    
    public static UnrealSharp.AnimGraphRuntime.SequencePlayerReference SetPlayRate(UnrealSharp.AnimGraphRuntime.SequencePlayerReference sequencePlayer, float playRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlayRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.SequencePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetPlayRate_SequencePlayer_Offset), 0, null, sequencePlayer);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPlayRate_PlayRate_Offset), 0, null, playRate);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetPlayRate_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AnimGraphRuntime.SequencePlayerReference returnValue;
            returnValue = UnrealSharp.AnimGraphRuntime.SequencePlayerReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetPlayRate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.SequencePlayerLibrary:SetAccumulatedTime
    static readonly IntPtr SetAccumulatedTime_NativeFunction;
    static readonly int SetAccumulatedTime_ParamsSize;
    static readonly int SetAccumulatedTime_SequencePlayer_Offset;
    static readonly int SetAccumulatedTime_Time_Offset;
    static readonly int SetAccumulatedTime_ReturnValue_Offset;
    
    public static UnrealSharp.AnimGraphRuntime.SequencePlayerReference SetAccumulatedTime(UnrealSharp.AnimGraphRuntime.SequencePlayerReference sequencePlayer, float time)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAccumulatedTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.SequencePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetAccumulatedTime_SequencePlayer_Offset), 0, null, sequencePlayer);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAccumulatedTime_Time_Offset), 0, null, time);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetAccumulatedTime_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AnimGraphRuntime.SequencePlayerReference returnValue;
            returnValue = UnrealSharp.AnimGraphRuntime.SequencePlayerReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetAccumulatedTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.SequencePlayerLibrary:GetStartPosition
    static readonly IntPtr GetStartPosition_NativeFunction;
    static readonly int GetStartPosition_ParamsSize;
    static readonly int GetStartPosition_SequencePlayer_Offset;
    static readonly int GetStartPosition_ReturnValue_Offset;
    
    public static float GetStartPosition(UnrealSharp.AnimGraphRuntime.SequencePlayerReference sequencePlayer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStartPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.SequencePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetStartPosition_SequencePlayer_Offset), 0, null, sequencePlayer);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetStartPosition_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetStartPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.SequencePlayerLibrary:GetSequencePure
    static readonly IntPtr GetSequencePure_NativeFunction;
    static readonly int GetSequencePure_ParamsSize;
    static readonly int GetSequencePure_SequencePlayer_Offset;
    static readonly int GetSequencePure_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.AnimSequenceBase GetSequencePure(UnrealSharp.AnimGraphRuntime.SequencePlayerReference sequencePlayer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSequencePure_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.SequencePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetSequencePure_SequencePlayer_Offset), 0, null, sequencePlayer);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSequencePure_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AnimSequenceBase returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.FromNative(IntPtr.Add(ParamsBuffer, GetSequencePure_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.SequencePlayerLibrary:GetSequence
    static readonly IntPtr GetSequence_NativeFunction;
    static readonly int GetSequence_ParamsSize;
    static readonly int GetSequence_SequencePlayer_Offset;
    static readonly int GetSequence_SequenceBase_Offset;
    static readonly int GetSequence_ReturnValue_Offset;
    
    [Obsolete("This function is obsolete")]
    public static UnrealSharp.AnimGraphRuntime.SequencePlayerReference GetSequence(UnrealSharp.AnimGraphRuntime.SequencePlayerReference sequencePlayer, ref UnrealSharp.Engine.AnimSequenceBase sequenceBase)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.SequencePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetSequence_SequencePlayer_Offset), 0, null, sequencePlayer);
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetSequence_SequenceBase_Offset), 0, null, sequenceBase);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSequence_NativeFunction, ParamsBuffer);
            
            sequenceBase = ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.FromNative(IntPtr.Add(ParamsBuffer, GetSequence_SequenceBase_Offset), 0, null);
            UnrealSharp.AnimGraphRuntime.SequencePlayerReference returnValue;
            returnValue = UnrealSharp.AnimGraphRuntime.SequencePlayerReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetSequence_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.SequencePlayerLibrary:GetPlayRate
    static readonly IntPtr GetPlayRate_NativeFunction;
    static readonly int GetPlayRate_ParamsSize;
    static readonly int GetPlayRate_SequencePlayer_Offset;
    static readonly int GetPlayRate_ReturnValue_Offset;
    
    public static float GetPlayRate(UnrealSharp.AnimGraphRuntime.SequencePlayerReference sequencePlayer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.SequencePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetPlayRate_SequencePlayer_Offset), 0, null, sequencePlayer);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlayRate_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetPlayRate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.SequencePlayerLibrary:GetLoopAnimation
    static readonly IntPtr GetLoopAnimation_NativeFunction;
    static readonly int GetLoopAnimation_ParamsSize;
    static readonly int GetLoopAnimation_SequencePlayer_Offset;
    static readonly int GetLoopAnimation_ReturnValue_Offset;
    
    public static bool GetLoopAnimation(UnrealSharp.AnimGraphRuntime.SequencePlayerReference sequencePlayer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLoopAnimation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.SequencePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetLoopAnimation_SequencePlayer_Offset), 0, null, sequencePlayer);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLoopAnimation_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetLoopAnimation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.SequencePlayerLibrary:GetAccumulatedTime
    static readonly IntPtr GetAccumulatedTime_NativeFunction;
    static readonly int GetAccumulatedTime_ParamsSize;
    static readonly int GetAccumulatedTime_SequencePlayer_Offset;
    static readonly int GetAccumulatedTime_ReturnValue_Offset;
    
    public static float GetAccumulatedTime(UnrealSharp.AnimGraphRuntime.SequencePlayerReference sequencePlayer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAccumulatedTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.SequencePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetAccumulatedTime_SequencePlayer_Offset), 0, null, sequencePlayer);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAccumulatedTime_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetAccumulatedTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.SequencePlayerLibrary:ConvertToSequencePlayerPure
    static readonly IntPtr ConvertToSequencePlayerPure_NativeFunction;
    static readonly int ConvertToSequencePlayerPure_ParamsSize;
    static readonly int ConvertToSequencePlayerPure_Node_Offset;
    static readonly int ConvertToSequencePlayerPure_SequencePlayer_Offset;
    static readonly int ConvertToSequencePlayerPure_Result_Offset;
    
    public static void ConvertToSequencePlayerPure(UnrealSharp.Engine.AnimNodeReference node, out UnrealSharp.AnimGraphRuntime.SequencePlayerReference sequencePlayer, out bool result)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertToSequencePlayerPure_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimNodeReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConvertToSequencePlayerPure_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConvertToSequencePlayerPure_NativeFunction, ParamsBuffer);
            
            sequencePlayer = UnrealSharp.AnimGraphRuntime.SequencePlayerReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ConvertToSequencePlayerPure_SequencePlayer_Offset), 0, null);
            result = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConvertToSequencePlayerPure_Result_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimGraphRuntime.SequencePlayerLibrary:ConvertToSequencePlayer
    static readonly IntPtr ConvertToSequencePlayer_NativeFunction;
    static readonly int ConvertToSequencePlayer_ParamsSize;
    static readonly int ConvertToSequencePlayer_Node_Offset;
    static readonly int ConvertToSequencePlayer_Result_Offset;
    static readonly int ConvertToSequencePlayer_ReturnValue_Offset;
    
    public static UnrealSharp.AnimGraphRuntime.SequencePlayerReference ConvertToSequencePlayer(UnrealSharp.Engine.AnimNodeReference node, out UnrealSharp.Engine.EAnimNodeReferenceConversionResult result)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertToSequencePlayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimNodeReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConvertToSequencePlayer_Node_Offset), 0, null, node);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConvertToSequencePlayer_NativeFunction, ParamsBuffer);
            
            result = BlittableMarshaller<UnrealSharp.Engine.EAnimNodeReferenceConversionResult>.FromNative(IntPtr.Add(ParamsBuffer, ConvertToSequencePlayer_Result_Offset), 0, null);
            UnrealSharp.AnimGraphRuntime.SequencePlayerReference returnValue;
            returnValue = UnrealSharp.AnimGraphRuntime.SequencePlayerReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ConvertToSequencePlayer_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimGraphRuntime.SequencePlayerLibrary:ComputePlayRateFromDuration
    static readonly IntPtr ComputePlayRateFromDuration_NativeFunction;
    static readonly int ComputePlayRateFromDuration_ParamsSize;
    static readonly int ComputePlayRateFromDuration_SequencePlayer_Offset;
    static readonly int ComputePlayRateFromDuration_Duration_Offset;
    static readonly int ComputePlayRateFromDuration_ReturnValue_Offset;
    
    public static float ComputePlayRateFromDuration(UnrealSharp.AnimGraphRuntime.SequencePlayerReference sequencePlayer, float duration = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ComputePlayRateFromDuration_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimGraphRuntime.SequencePlayerReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ComputePlayRateFromDuration_SequencePlayer_Offset), 0, null, sequencePlayer);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ComputePlayRateFromDuration_Duration_Offset), 0, null, duration);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ComputePlayRateFromDuration_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, ComputePlayRateFromDuration_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AnimationBlueprintLibrary;

[UClass]
public partial class AnimPoseExtensions : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static AnimPoseExtensions()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AnimPoseExtensions");
        
        
        SetBonePose_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBonePose");
        SetBonePose_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBonePose_NativeFunction);
        SetBonePose_Pose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBonePose_NativeFunction, "Pose");
        SetBonePose_Transform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBonePose_NativeFunction, "Transform");
        SetBonePose_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBonePose_NativeFunction, "BoneName");
        SetBonePose_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBonePose_NativeFunction, "Space");
        IsValid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValid");
        IsValid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValid_NativeFunction);
        IsValid_Pose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValid_NativeFunction, "Pose");
        IsValid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValid_NativeFunction, "ReturnValue");
        GetSocketPose_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSocketPose");
        GetSocketPose_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSocketPose_NativeFunction);
        GetSocketPose_Pose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSocketPose_NativeFunction, "Pose");
        GetSocketPose_SocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSocketPose_NativeFunction, "SocketName");
        GetSocketPose_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSocketPose_NativeFunction, "Space");
        GetSocketPose_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSocketPose_NativeFunction, "ReturnValue");
        GetSocketNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSocketNames");
        GetSocketNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSocketNames_NativeFunction);
        GetSocketNames_Pose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSocketNames_NativeFunction, "Pose");
        GetSocketNames_Sockets_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSocketNames_NativeFunction, "Sockets");
        GetSocketNames_Sockets_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSocketNames_NativeFunction, "Sockets");
        GetRelativeTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRelativeTransform");
        GetRelativeTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRelativeTransform_NativeFunction);
        GetRelativeTransform_Pose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRelativeTransform_NativeFunction, "Pose");
        GetRelativeTransform_FromBoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRelativeTransform_NativeFunction, "FromBoneName");
        GetRelativeTransform_ToBoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRelativeTransform_NativeFunction, "ToBoneName");
        GetRelativeTransform_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRelativeTransform_NativeFunction, "Space");
        GetRelativeTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRelativeTransform_NativeFunction, "ReturnValue");
        GetRelativeToRefPoseTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRelativeToRefPoseTransform");
        GetRelativeToRefPoseTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRelativeToRefPoseTransform_NativeFunction);
        GetRelativeToRefPoseTransform_Pose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRelativeToRefPoseTransform_NativeFunction, "Pose");
        GetRelativeToRefPoseTransform_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRelativeToRefPoseTransform_NativeFunction, "BoneName");
        GetRelativeToRefPoseTransform_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRelativeToRefPoseTransform_NativeFunction, "Space");
        GetRelativeToRefPoseTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRelativeToRefPoseTransform_NativeFunction, "ReturnValue");
        GetRefPoseRelativeTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRefPoseRelativeTransform");
        GetRefPoseRelativeTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRefPoseRelativeTransform_NativeFunction);
        GetRefPoseRelativeTransform_Pose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRefPoseRelativeTransform_NativeFunction, "Pose");
        GetRefPoseRelativeTransform_FromBoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRefPoseRelativeTransform_NativeFunction, "FromBoneName");
        GetRefPoseRelativeTransform_ToBoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRefPoseRelativeTransform_NativeFunction, "ToBoneName");
        GetRefPoseRelativeTransform_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRefPoseRelativeTransform_NativeFunction, "Space");
        GetRefPoseRelativeTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRefPoseRelativeTransform_NativeFunction, "ReturnValue");
        GetReferencePose_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetReferencePose");
        GetReferencePose_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetReferencePose_NativeFunction);
        GetReferencePose_Skeleton_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetReferencePose_NativeFunction, "Skeleton");
        GetReferencePose_OutPose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetReferencePose_NativeFunction, "OutPose");
        GetRefBonePose_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRefBonePose");
        GetRefBonePose_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRefBonePose_NativeFunction);
        GetRefBonePose_Pose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRefBonePose_NativeFunction, "Pose");
        GetRefBonePose_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRefBonePose_NativeFunction, "BoneName");
        GetRefBonePose_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRefBonePose_NativeFunction, "Space");
        GetRefBonePose_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRefBonePose_NativeFunction, "ReturnValue");
        GetCurveWeight_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurveWeight");
        GetCurveWeight_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurveWeight_NativeFunction);
        GetCurveWeight_Pose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurveWeight_NativeFunction, "Pose");
        GetCurveWeight_CurveName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurveWeight_NativeFunction, "CurveName");
        GetCurveWeight_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurveWeight_NativeFunction, "ReturnValue");
        GetCurveNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurveNames");
        GetCurveNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurveNames_NativeFunction);
        GetCurveNames_Pose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurveNames_NativeFunction, "Pose");
        GetCurveNames_Curves_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurveNames_NativeFunction, "Curves");
        GetCurveNames_Curves_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetCurveNames_NativeFunction, "Curves");
        GetBonePose_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBonePose");
        GetBonePose_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBonePose_NativeFunction);
        GetBonePose_Pose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePose_NativeFunction, "Pose");
        GetBonePose_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePose_NativeFunction, "BoneName");
        GetBonePose_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePose_NativeFunction, "Space");
        GetBonePose_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePose_NativeFunction, "ReturnValue");
        GetBoneNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBoneNames");
        GetBoneNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBoneNames_NativeFunction);
        GetBoneNames_Pose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoneNames_NativeFunction, "Pose");
        GetBoneNames_Bones_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoneNames_NativeFunction, "Bones");
        GetBoneNames_Bones_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetBoneNames_NativeFunction, "Bones");
        GetAnimPoseAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnimPoseAtTime");
        GetAnimPoseAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnimPoseAtTime_NativeFunction);
        GetAnimPoseAtTime_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimPoseAtTime_NativeFunction, "AnimationSequenceBase");
        GetAnimPoseAtTime_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimPoseAtTime_NativeFunction, "Time");
        GetAnimPoseAtTime_EvaluationOptions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimPoseAtTime_NativeFunction, "EvaluationOptions");
        GetAnimPoseAtTime_Pose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimPoseAtTime_NativeFunction, "Pose");
        GetAnimPoseAtFrame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnimPoseAtFrame");
        GetAnimPoseAtFrame_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnimPoseAtFrame_NativeFunction);
        GetAnimPoseAtFrame_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimPoseAtFrame_NativeFunction, "AnimationSequenceBase");
        GetAnimPoseAtFrame_FrameIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimPoseAtFrame_NativeFunction, "FrameIndex");
        GetAnimPoseAtFrame_EvaluationOptions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimPoseAtFrame_NativeFunction, "EvaluationOptions");
        GetAnimPoseAtFrame_Pose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimPoseAtFrame_NativeFunction, "Pose");
        EvaluateAnimationBlueprintWithInputPose_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EvaluateAnimationBlueprintWithInputPose");
        EvaluateAnimationBlueprintWithInputPose_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EvaluateAnimationBlueprintWithInputPose_NativeFunction);
        EvaluateAnimationBlueprintWithInputPose_InputPose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateAnimationBlueprintWithInputPose_NativeFunction, "InputPose");
        EvaluateAnimationBlueprintWithInputPose_TargetSkeletalMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateAnimationBlueprintWithInputPose_NativeFunction, "TargetSkeletalMesh");
        EvaluateAnimationBlueprintWithInputPose_AnimationBlueprint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateAnimationBlueprintWithInputPose_NativeFunction, "AnimationBlueprint");
        EvaluateAnimationBlueprintWithInputPose_OutPose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateAnimationBlueprintWithInputPose_NativeFunction, "OutPose");
        
        
    }
    
    protected AnimPoseExtensions(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AnimationBlueprintLibrary.AnimPoseExtensions:SetBonePose
    static readonly IntPtr SetBonePose_NativeFunction;
    static readonly int SetBonePose_ParamsSize;
    static readonly int SetBonePose_Pose_Offset;
    static readonly int SetBonePose_Transform_Offset;
    static readonly int SetBonePose_BoneName_Offset;
    static readonly int SetBonePose_Space_Offset;
    
    public static void SetBonePose(ref UnrealSharp.AnimationBlueprintLibrary.AnimPose pose, UnrealSharp.Transform transform, Name boneName, UnrealSharp.AnimationBlueprintLibrary.EAnimPoseSpaces space = UnrealSharp.AnimationBlueprintLibrary.EAnimPoseSpaces.Local)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBonePose_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimationBlueprintLibrary.AnimPoseMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetBonePose_Pose_Offset), 0, null, pose);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetBonePose_Transform_Offset), 0, null, transform);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetBonePose_BoneName_Offset), 0, null, boneName);
            BlittableMarshaller<UnrealSharp.AnimationBlueprintLibrary.EAnimPoseSpaces>.ToNative(IntPtr.Add(ParamsBuffer, SetBonePose_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetBonePose_NativeFunction, ParamsBuffer);
            
            pose = UnrealSharp.AnimationBlueprintLibrary.AnimPoseMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetBonePose_Pose_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimPoseExtensions:IsValid
    static readonly IntPtr IsValid_NativeFunction;
    static readonly int IsValid_ParamsSize;
    static readonly int IsValid_Pose_Offset;
    static readonly int IsValid_ReturnValue_Offset;
    
    public static bool IsValid(UnrealSharp.AnimationBlueprintLibrary.AnimPose pose)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimationBlueprintLibrary.AnimPoseMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsValid_Pose_Offset), 0, null, pose);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsValid_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValid_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimPoseExtensions:GetSocketPose
    static readonly IntPtr GetSocketPose_NativeFunction;
    static readonly int GetSocketPose_ParamsSize;
    static readonly int GetSocketPose_Pose_Offset;
    static readonly int GetSocketPose_SocketName_Offset;
    static readonly int GetSocketPose_Space_Offset;
    static readonly int GetSocketPose_ReturnValue_Offset;
    
    public static UnrealSharp.Transform GetSocketPose(UnrealSharp.AnimationBlueprintLibrary.AnimPose pose, Name socketName, UnrealSharp.AnimationBlueprintLibrary.EAnimPoseSpaces space = UnrealSharp.AnimationBlueprintLibrary.EAnimPoseSpaces.Local)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSocketPose_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimationBlueprintLibrary.AnimPoseMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetSocketPose_Pose_Offset), 0, null, pose);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetSocketPose_SocketName_Offset), 0, null, socketName);
            BlittableMarshaller<UnrealSharp.AnimationBlueprintLibrary.EAnimPoseSpaces>.ToNative(IntPtr.Add(ParamsBuffer, GetSocketPose_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSocketPose_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetSocketPose_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimPoseExtensions:GetSocketNames
    static readonly IntPtr GetSocketNames_NativeFunction;
    static readonly int GetSocketNames_ParamsSize;
    static readonly int GetSocketNames_Pose_Offset;
    static readonly int GetSocketNames_Sockets_Offset;
    static readonly int GetSocketNames_Sockets_ElementSize;
    
    public static void GetSocketNames(UnrealSharp.AnimationBlueprintLibrary.AnimPose pose, out System.Collections.Generic.IList<Name> sockets)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSocketNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimationBlueprintLibrary.AnimPoseMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetSocketNames_Pose_Offset), 0, null, pose);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSocketNames_NativeFunction, ParamsBuffer);
            
            IntPtr Sockets_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSocketNames_Sockets_Offset);
            UnrealArrayCopyMarshaler<Name> Sockets_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetSocketNames_Sockets_ElementSize);
            sockets = Sockets_Marshaler.FromNative(Sockets_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(Sockets_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimPoseExtensions:GetRelativeTransform
    static readonly IntPtr GetRelativeTransform_NativeFunction;
    static readonly int GetRelativeTransform_ParamsSize;
    static readonly int GetRelativeTransform_Pose_Offset;
    static readonly int GetRelativeTransform_FromBoneName_Offset;
    static readonly int GetRelativeTransform_ToBoneName_Offset;
    static readonly int GetRelativeTransform_Space_Offset;
    static readonly int GetRelativeTransform_ReturnValue_Offset;
    
    public static UnrealSharp.Transform GetRelativeTransform(UnrealSharp.AnimationBlueprintLibrary.AnimPose pose, Name fromBoneName, Name toBoneName, UnrealSharp.AnimationBlueprintLibrary.EAnimPoseSpaces space = UnrealSharp.AnimationBlueprintLibrary.EAnimPoseSpaces.Local)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRelativeTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimationBlueprintLibrary.AnimPoseMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetRelativeTransform_Pose_Offset), 0, null, pose);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetRelativeTransform_FromBoneName_Offset), 0, null, fromBoneName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetRelativeTransform_ToBoneName_Offset), 0, null, toBoneName);
            BlittableMarshaller<UnrealSharp.AnimationBlueprintLibrary.EAnimPoseSpaces>.ToNative(IntPtr.Add(ParamsBuffer, GetRelativeTransform_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetRelativeTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetRelativeTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimPoseExtensions:GetRelativeToRefPoseTransform
    static readonly IntPtr GetRelativeToRefPoseTransform_NativeFunction;
    static readonly int GetRelativeToRefPoseTransform_ParamsSize;
    static readonly int GetRelativeToRefPoseTransform_Pose_Offset;
    static readonly int GetRelativeToRefPoseTransform_BoneName_Offset;
    static readonly int GetRelativeToRefPoseTransform_Space_Offset;
    static readonly int GetRelativeToRefPoseTransform_ReturnValue_Offset;
    
    public static UnrealSharp.Transform GetRelativeToRefPoseTransform(UnrealSharp.AnimationBlueprintLibrary.AnimPose pose, Name boneName, UnrealSharp.AnimationBlueprintLibrary.EAnimPoseSpaces space = UnrealSharp.AnimationBlueprintLibrary.EAnimPoseSpaces.Local)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRelativeToRefPoseTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimationBlueprintLibrary.AnimPoseMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetRelativeToRefPoseTransform_Pose_Offset), 0, null, pose);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetRelativeToRefPoseTransform_BoneName_Offset), 0, null, boneName);
            BlittableMarshaller<UnrealSharp.AnimationBlueprintLibrary.EAnimPoseSpaces>.ToNative(IntPtr.Add(ParamsBuffer, GetRelativeToRefPoseTransform_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetRelativeToRefPoseTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetRelativeToRefPoseTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimPoseExtensions:GetRefPoseRelativeTransform
    static readonly IntPtr GetRefPoseRelativeTransform_NativeFunction;
    static readonly int GetRefPoseRelativeTransform_ParamsSize;
    static readonly int GetRefPoseRelativeTransform_Pose_Offset;
    static readonly int GetRefPoseRelativeTransform_FromBoneName_Offset;
    static readonly int GetRefPoseRelativeTransform_ToBoneName_Offset;
    static readonly int GetRefPoseRelativeTransform_Space_Offset;
    static readonly int GetRefPoseRelativeTransform_ReturnValue_Offset;
    
    public static UnrealSharp.Transform GetRefPoseRelativeTransform(UnrealSharp.AnimationBlueprintLibrary.AnimPose pose, Name fromBoneName, Name toBoneName, UnrealSharp.AnimationBlueprintLibrary.EAnimPoseSpaces space = UnrealSharp.AnimationBlueprintLibrary.EAnimPoseSpaces.Local)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRefPoseRelativeTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimationBlueprintLibrary.AnimPoseMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetRefPoseRelativeTransform_Pose_Offset), 0, null, pose);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetRefPoseRelativeTransform_FromBoneName_Offset), 0, null, fromBoneName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetRefPoseRelativeTransform_ToBoneName_Offset), 0, null, toBoneName);
            BlittableMarshaller<UnrealSharp.AnimationBlueprintLibrary.EAnimPoseSpaces>.ToNative(IntPtr.Add(ParamsBuffer, GetRefPoseRelativeTransform_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetRefPoseRelativeTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetRefPoseRelativeTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimPoseExtensions:GetReferencePose
    static readonly IntPtr GetReferencePose_NativeFunction;
    static readonly int GetReferencePose_ParamsSize;
    static readonly int GetReferencePose_Skeleton_Offset;
    static readonly int GetReferencePose_OutPose_Offset;
    
    public static void GetReferencePose(UnrealSharp.Engine.Skeleton skeleton, out UnrealSharp.AnimationBlueprintLibrary.AnimPose outPose)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetReferencePose_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Skeleton>.ToNative(IntPtr.Add(ParamsBuffer, GetReferencePose_Skeleton_Offset), 0, null, skeleton);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetReferencePose_NativeFunction, ParamsBuffer);
            
            outPose = UnrealSharp.AnimationBlueprintLibrary.AnimPoseMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetReferencePose_OutPose_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimPoseExtensions:GetRefBonePose
    static readonly IntPtr GetRefBonePose_NativeFunction;
    static readonly int GetRefBonePose_ParamsSize;
    static readonly int GetRefBonePose_Pose_Offset;
    static readonly int GetRefBonePose_BoneName_Offset;
    static readonly int GetRefBonePose_Space_Offset;
    static readonly int GetRefBonePose_ReturnValue_Offset;
    
    public static UnrealSharp.Transform GetRefBonePose(UnrealSharp.AnimationBlueprintLibrary.AnimPose pose, Name boneName, UnrealSharp.AnimationBlueprintLibrary.EAnimPoseSpaces space = UnrealSharp.AnimationBlueprintLibrary.EAnimPoseSpaces.Local)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRefBonePose_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimationBlueprintLibrary.AnimPoseMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetRefBonePose_Pose_Offset), 0, null, pose);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetRefBonePose_BoneName_Offset), 0, null, boneName);
            BlittableMarshaller<UnrealSharp.AnimationBlueprintLibrary.EAnimPoseSpaces>.ToNative(IntPtr.Add(ParamsBuffer, GetRefBonePose_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetRefBonePose_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetRefBonePose_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimPoseExtensions:GetCurveWeight
    static readonly IntPtr GetCurveWeight_NativeFunction;
    static readonly int GetCurveWeight_ParamsSize;
    static readonly int GetCurveWeight_Pose_Offset;
    static readonly int GetCurveWeight_CurveName_Offset;
    static readonly int GetCurveWeight_ReturnValue_Offset;
    
    public static float GetCurveWeight(UnrealSharp.AnimationBlueprintLibrary.AnimPose pose, Name curveName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurveWeight_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimationBlueprintLibrary.AnimPoseMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetCurveWeight_Pose_Offset), 0, null, pose);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetCurveWeight_CurveName_Offset), 0, null, curveName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetCurveWeight_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCurveWeight_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimPoseExtensions:GetCurveNames
    static readonly IntPtr GetCurveNames_NativeFunction;
    static readonly int GetCurveNames_ParamsSize;
    static readonly int GetCurveNames_Pose_Offset;
    static readonly int GetCurveNames_Curves_Offset;
    static readonly int GetCurveNames_Curves_ElementSize;
    
    public static void GetCurveNames(UnrealSharp.AnimationBlueprintLibrary.AnimPose pose, out System.Collections.Generic.IList<Name> curves)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurveNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimationBlueprintLibrary.AnimPoseMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetCurveNames_Pose_Offset), 0, null, pose);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetCurveNames_NativeFunction, ParamsBuffer);
            
            IntPtr Curves_NativeBuffer = IntPtr.Add(ParamsBuffer, GetCurveNames_Curves_Offset);
            UnrealArrayCopyMarshaler<Name> Curves_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetCurveNames_Curves_ElementSize);
            curves = Curves_Marshaler.FromNative(Curves_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(Curves_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimPoseExtensions:GetBonePose
    static readonly IntPtr GetBonePose_NativeFunction;
    static readonly int GetBonePose_ParamsSize;
    static readonly int GetBonePose_Pose_Offset;
    static readonly int GetBonePose_BoneName_Offset;
    static readonly int GetBonePose_Space_Offset;
    static readonly int GetBonePose_ReturnValue_Offset;
    
    public static UnrealSharp.Transform GetBonePose(UnrealSharp.AnimationBlueprintLibrary.AnimPose pose, Name boneName, UnrealSharp.AnimationBlueprintLibrary.EAnimPoseSpaces space = UnrealSharp.AnimationBlueprintLibrary.EAnimPoseSpaces.Local)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBonePose_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimationBlueprintLibrary.AnimPoseMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetBonePose_Pose_Offset), 0, null, pose);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetBonePose_BoneName_Offset), 0, null, boneName);
            BlittableMarshaller<UnrealSharp.AnimationBlueprintLibrary.EAnimPoseSpaces>.ToNative(IntPtr.Add(ParamsBuffer, GetBonePose_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetBonePose_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetBonePose_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimPoseExtensions:GetBoneNames
    static readonly IntPtr GetBoneNames_NativeFunction;
    static readonly int GetBoneNames_ParamsSize;
    static readonly int GetBoneNames_Pose_Offset;
    static readonly int GetBoneNames_Bones_Offset;
    static readonly int GetBoneNames_Bones_ElementSize;
    
    public static void GetBoneNames(UnrealSharp.AnimationBlueprintLibrary.AnimPose pose, out System.Collections.Generic.IList<Name> bones)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBoneNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimationBlueprintLibrary.AnimPoseMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetBoneNames_Pose_Offset), 0, null, pose);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetBoneNames_NativeFunction, ParamsBuffer);
            
            IntPtr Bones_NativeBuffer = IntPtr.Add(ParamsBuffer, GetBoneNames_Bones_Offset);
            UnrealArrayCopyMarshaler<Name> Bones_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetBoneNames_Bones_ElementSize);
            bones = Bones_Marshaler.FromNative(Bones_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(Bones_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimPoseExtensions:GetAnimPoseAtTime
    static readonly IntPtr GetAnimPoseAtTime_NativeFunction;
    static readonly int GetAnimPoseAtTime_ParamsSize;
    static readonly int GetAnimPoseAtTime_AnimationSequenceBase_Offset;
    static readonly int GetAnimPoseAtTime_Time_Offset;
    static readonly int GetAnimPoseAtTime_EvaluationOptions_Offset;
    static readonly int GetAnimPoseAtTime_Pose_Offset;
    
    public static void GetAnimPoseAtTime(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, double time, UnrealSharp.AnimationBlueprintLibrary.AnimPoseEvaluationOptions evaluationOptions, out UnrealSharp.AnimationBlueprintLibrary.AnimPose pose)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnimPoseAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetAnimPoseAtTime_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, GetAnimPoseAtTime_Time_Offset), 0, null, time);
            UnrealSharp.AnimationBlueprintLibrary.AnimPoseEvaluationOptionsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetAnimPoseAtTime_EvaluationOptions_Offset), 0, null, evaluationOptions);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAnimPoseAtTime_NativeFunction, ParamsBuffer);
            
            pose = UnrealSharp.AnimationBlueprintLibrary.AnimPoseMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetAnimPoseAtTime_Pose_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimPoseExtensions:GetAnimPoseAtFrame
    static readonly IntPtr GetAnimPoseAtFrame_NativeFunction;
    static readonly int GetAnimPoseAtFrame_ParamsSize;
    static readonly int GetAnimPoseAtFrame_AnimationSequenceBase_Offset;
    static readonly int GetAnimPoseAtFrame_FrameIndex_Offset;
    static readonly int GetAnimPoseAtFrame_EvaluationOptions_Offset;
    static readonly int GetAnimPoseAtFrame_Pose_Offset;
    
    public static void GetAnimPoseAtFrame(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, int frameIndex, UnrealSharp.AnimationBlueprintLibrary.AnimPoseEvaluationOptions evaluationOptions, out UnrealSharp.AnimationBlueprintLibrary.AnimPose pose)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnimPoseAtFrame_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetAnimPoseAtFrame_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetAnimPoseAtFrame_FrameIndex_Offset), 0, null, frameIndex);
            UnrealSharp.AnimationBlueprintLibrary.AnimPoseEvaluationOptionsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetAnimPoseAtFrame_EvaluationOptions_Offset), 0, null, evaluationOptions);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAnimPoseAtFrame_NativeFunction, ParamsBuffer);
            
            pose = UnrealSharp.AnimationBlueprintLibrary.AnimPoseMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetAnimPoseAtFrame_Pose_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimPoseExtensions:EvaluateAnimationBlueprintWithInputPose
    static readonly IntPtr EvaluateAnimationBlueprintWithInputPose_NativeFunction;
    static readonly int EvaluateAnimationBlueprintWithInputPose_ParamsSize;
    static readonly int EvaluateAnimationBlueprintWithInputPose_InputPose_Offset;
    static readonly int EvaluateAnimationBlueprintWithInputPose_TargetSkeletalMesh_Offset;
    static readonly int EvaluateAnimationBlueprintWithInputPose_AnimationBlueprint_Offset;
    static readonly int EvaluateAnimationBlueprintWithInputPose_OutPose_Offset;
    
    public static void EvaluateAnimationBlueprintWithInputPose(UnrealSharp.AnimationBlueprintLibrary.AnimPose inputPose, UnrealSharp.Engine.SkeletalMesh targetSkeletalMesh, UnrealSharp.Engine.AnimBlueprint animationBlueprint, out UnrealSharp.AnimationBlueprintLibrary.AnimPose outPose)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EvaluateAnimationBlueprintWithInputPose_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimationBlueprintLibrary.AnimPoseMarshaler.ToNative(IntPtr.Add(ParamsBuffer, EvaluateAnimationBlueprintWithInputPose_InputPose_Offset), 0, null, inputPose);
            ObjectMarshaller<UnrealSharp.Engine.SkeletalMesh>.ToNative(IntPtr.Add(ParamsBuffer, EvaluateAnimationBlueprintWithInputPose_TargetSkeletalMesh_Offset), 0, null, targetSkeletalMesh);
            ObjectMarshaller<UnrealSharp.Engine.AnimBlueprint>.ToNative(IntPtr.Add(ParamsBuffer, EvaluateAnimationBlueprintWithInputPose_AnimationBlueprint_Offset), 0, null, animationBlueprint);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EvaluateAnimationBlueprintWithInputPose_NativeFunction, ParamsBuffer);
            
            outPose = UnrealSharp.AnimationBlueprintLibrary.AnimPoseMarshaler.FromNative(IntPtr.Add(ParamsBuffer, EvaluateAnimationBlueprintWithInputPose_OutPose_Offset), 0, null);
            
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AnimationBlueprintLibrary;

[UClass]
public partial class AnimationLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static AnimationLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AnimationBlueprintLibrary");
        
        
        SetVariableFrameStrippingSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVariableFrameStrippingSettings");
        SetVariableFrameStrippingSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVariableFrameStrippingSettings_NativeFunction);
        SetVariableFrameStrippingSettings_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVariableFrameStrippingSettings_NativeFunction, "AnimationSequence");
        SetVariableFrameStrippingSettings_VariableFrameStrippingSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVariableFrameStrippingSettings_NativeFunction, "VariableFrameStrippingSettings");
        SetRootMotionLockType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRootMotionLockType");
        SetRootMotionLockType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRootMotionLockType_NativeFunction);
        SetRootMotionLockType_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRootMotionLockType_NativeFunction, "AnimationSequence");
        SetRootMotionLockType_RootMotionLockType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRootMotionLockType_NativeFunction, "RootMotionLockType");
        SetRootMotionEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRootMotionEnabled");
        SetRootMotionEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRootMotionEnabled_NativeFunction);
        SetRootMotionEnabled_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRootMotionEnabled_NativeFunction, "AnimationSequence");
        SetRootMotionEnabled_bEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRootMotionEnabled_NativeFunction, "bEnabled");
        SetRateScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRateScale");
        SetRateScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRateScale_NativeFunction);
        SetRateScale_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRateScale_NativeFunction, "AnimationSequenceBase");
        SetRateScale_RateScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRateScale_NativeFunction, "RateScale");
        SetIsRootMotionLockForced_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIsRootMotionLockForced");
        SetIsRootMotionLockForced_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIsRootMotionLockForced_NativeFunction);
        SetIsRootMotionLockForced_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIsRootMotionLockForced_NativeFunction, "AnimationSequence");
        SetIsRootMotionLockForced_bForced_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIsRootMotionLockForced_NativeFunction, "bForced");
        SetCurveCompressionSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCurveCompressionSettings");
        SetCurveCompressionSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCurveCompressionSettings_NativeFunction);
        SetCurveCompressionSettings_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCurveCompressionSettings_NativeFunction, "AnimationSequence");
        SetCurveCompressionSettings_CompressionSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCurveCompressionSettings_NativeFunction, "CompressionSettings");
        SetBoneCompressionSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBoneCompressionSettings");
        SetBoneCompressionSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBoneCompressionSettings_NativeFunction);
        SetBoneCompressionSettings_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoneCompressionSettings_NativeFunction, "AnimationSequence");
        SetBoneCompressionSettings_CompressionSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoneCompressionSettings_NativeFunction, "CompressionSettings");
        SetAnimationInterpolationType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAnimationInterpolationType");
        SetAnimationInterpolationType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAnimationInterpolationType_NativeFunction);
        SetAnimationInterpolationType_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnimationInterpolationType_NativeFunction, "AnimationSequence");
        SetAnimationInterpolationType_InterpolationType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnimationInterpolationType_NativeFunction, "InterpolationType");
        SetAdditiveBasePoseType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAdditiveBasePoseType");
        SetAdditiveBasePoseType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAdditiveBasePoseType_NativeFunction);
        SetAdditiveBasePoseType_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAdditiveBasePoseType_NativeFunction, "AnimationSequence");
        SetAdditiveBasePoseType_AdditiveBasePoseType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAdditiveBasePoseType_NativeFunction, "AdditiveBasePoseType");
        SetAdditiveAnimationType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAdditiveAnimationType");
        SetAdditiveAnimationType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAdditiveAnimationType_NativeFunction);
        SetAdditiveAnimationType_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAdditiveAnimationType_NativeFunction, "AnimationSequence");
        SetAdditiveAnimationType_AdditiveAnimationType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAdditiveAnimationType_NativeFunction, "AdditiveAnimationType");
        RemoveVirtualBones_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveVirtualBones");
        RemoveVirtualBones_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveVirtualBones_NativeFunction);
        RemoveVirtualBones_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveVirtualBones_NativeFunction, "AnimationSequence");
        RemoveVirtualBones_VirtualBoneNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveVirtualBones_NativeFunction, "VirtualBoneNames");
        RemoveVirtualBones_VirtualBoneNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(RemoveVirtualBones_NativeFunction, "VirtualBoneNames");
        RemoveVirtualBone_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveVirtualBone");
        RemoveVirtualBone_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveVirtualBone_NativeFunction);
        RemoveVirtualBone_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveVirtualBone_NativeFunction, "AnimationSequence");
        RemoveVirtualBone_VirtualBoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveVirtualBone_NativeFunction, "VirtualBoneName");
        RemoveMetaDataOfClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveMetaDataOfClass");
        RemoveMetaDataOfClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveMetaDataOfClass_NativeFunction);
        RemoveMetaDataOfClass_AnimationAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveMetaDataOfClass_NativeFunction, "AnimationAsset");
        RemoveMetaDataOfClass_MetaDataClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveMetaDataOfClass_NativeFunction, "MetaDataClass");
        RemoveMetaData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveMetaData");
        RemoveMetaData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveMetaData_NativeFunction);
        RemoveMetaData_AnimationAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveMetaData_NativeFunction, "AnimationAsset");
        RemoveMetaData_MetaDataObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveMetaData_NativeFunction, "MetaDataObject");
        RemoveCurve_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveCurve");
        RemoveCurve_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveCurve_NativeFunction);
        RemoveCurve_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveCurve_NativeFunction, "AnimationSequence");
        RemoveCurve_CurveName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveCurve_NativeFunction, "CurveName");
        RemoveCurve_bRemoveNameFromSkeleton_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveCurve_NativeFunction, "bRemoveNameFromSkeleton");
        RemoveBoneAnimation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveBoneAnimation");
        RemoveBoneAnimation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveBoneAnimation_NativeFunction);
        RemoveBoneAnimation_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveBoneAnimation_NativeFunction, "AnimationSequence");
        RemoveBoneAnimation_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveBoneAnimation_NativeFunction, "BoneName");
        RemoveBoneAnimation_bIncludeChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveBoneAnimation_NativeFunction, "bIncludeChildren");
        RemoveBoneAnimation_bFinalize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveBoneAnimation_NativeFunction, "bFinalize");
        RemoveAnimationSyncMarkersByTrack_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveAnimationSyncMarkersByTrack");
        RemoveAnimationSyncMarkersByTrack_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveAnimationSyncMarkersByTrack_NativeFunction);
        RemoveAnimationSyncMarkersByTrack_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAnimationSyncMarkersByTrack_NativeFunction, "AnimationSequence");
        RemoveAnimationSyncMarkersByTrack_NotifyTrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAnimationSyncMarkersByTrack_NativeFunction, "NotifyTrackName");
        RemoveAnimationSyncMarkersByTrack_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAnimationSyncMarkersByTrack_NativeFunction, "ReturnValue");
        RemoveAnimationSyncMarkersByName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveAnimationSyncMarkersByName");
        RemoveAnimationSyncMarkersByName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveAnimationSyncMarkersByName_NativeFunction);
        RemoveAnimationSyncMarkersByName_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAnimationSyncMarkersByName_NativeFunction, "AnimationSequence");
        RemoveAnimationSyncMarkersByName_MarkerName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAnimationSyncMarkersByName_NativeFunction, "MarkerName");
        RemoveAnimationSyncMarkersByName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAnimationSyncMarkersByName_NativeFunction, "ReturnValue");
        RemoveAnimationNotifyTrack_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveAnimationNotifyTrack");
        RemoveAnimationNotifyTrack_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveAnimationNotifyTrack_NativeFunction);
        RemoveAnimationNotifyTrack_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAnimationNotifyTrack_NativeFunction, "AnimationSequenceBase");
        RemoveAnimationNotifyTrack_NotifyTrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAnimationNotifyTrack_NativeFunction, "NotifyTrackName");
        RemoveAnimationNotifyEventsByTrack_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveAnimationNotifyEventsByTrack");
        RemoveAnimationNotifyEventsByTrack_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveAnimationNotifyEventsByTrack_NativeFunction);
        RemoveAnimationNotifyEventsByTrack_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAnimationNotifyEventsByTrack_NativeFunction, "AnimationSequenceBase");
        RemoveAnimationNotifyEventsByTrack_NotifyTrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAnimationNotifyEventsByTrack_NativeFunction, "NotifyTrackName");
        RemoveAnimationNotifyEventsByTrack_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAnimationNotifyEventsByTrack_NativeFunction, "ReturnValue");
        RemoveAnimationNotifyEventsByName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveAnimationNotifyEventsByName");
        RemoveAnimationNotifyEventsByName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveAnimationNotifyEventsByName_NativeFunction);
        RemoveAnimationNotifyEventsByName_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAnimationNotifyEventsByName_NativeFunction, "AnimationSequenceBase");
        RemoveAnimationNotifyEventsByName_NotifyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAnimationNotifyEventsByName_NativeFunction, "NotifyName");
        RemoveAnimationNotifyEventsByName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAnimationNotifyEventsByName_NativeFunction, "ReturnValue");
        RemoveAllVirtualBones_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveAllVirtualBones");
        RemoveAllVirtualBones_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveAllVirtualBones_NativeFunction);
        RemoveAllVirtualBones_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAllVirtualBones_NativeFunction, "AnimationSequence");
        RemoveAllMetaData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveAllMetaData");
        RemoveAllMetaData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveAllMetaData_NativeFunction);
        RemoveAllMetaData_AnimationAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAllMetaData_NativeFunction, "AnimationAsset");
        RemoveAllCurveData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveAllCurveData");
        RemoveAllCurveData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveAllCurveData_NativeFunction);
        RemoveAllCurveData_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAllCurveData_NativeFunction, "AnimationSequence");
        RemoveAllBoneAnimation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveAllBoneAnimation");
        RemoveAllBoneAnimation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveAllBoneAnimation_NativeFunction);
        RemoveAllBoneAnimation_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAllBoneAnimation_NativeFunction, "AnimationSequence");
        RemoveAllAnimationSyncMarkers_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveAllAnimationSyncMarkers");
        RemoveAllAnimationSyncMarkers_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveAllAnimationSyncMarkers_NativeFunction);
        RemoveAllAnimationSyncMarkers_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAllAnimationSyncMarkers_NativeFunction, "AnimationSequence");
        RemoveAllAnimationNotifyTracks_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveAllAnimationNotifyTracks");
        RemoveAllAnimationNotifyTracks_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveAllAnimationNotifyTracks_NativeFunction);
        RemoveAllAnimationNotifyTracks_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAllAnimationNotifyTracks_NativeFunction, "AnimationSequenceBase");
        IsValidTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValidTime");
        IsValidTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValidTime_NativeFunction);
        IsValidTime_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidTime_NativeFunction, "AnimationSequenceBase");
        IsValidTime_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidTime_NativeFunction, "Time");
        IsValidTime_IsValid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidTime_NativeFunction, "IsValid");
        IsValidRawAnimationTrackName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValidRawAnimationTrackName");
        IsValidRawAnimationTrackName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValidRawAnimationTrackName_NativeFunction);
        IsValidRawAnimationTrackName_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidRawAnimationTrackName_NativeFunction, "AnimationSequenceBase");
        IsValidRawAnimationTrackName_TrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidRawAnimationTrackName_NativeFunction, "TrackName");
        IsValidRawAnimationTrackName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidRawAnimationTrackName_NativeFunction, "ReturnValue");
        IsValidAnimNotifyTrackName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValidAnimNotifyTrackName");
        IsValidAnimNotifyTrackName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValidAnimNotifyTrackName_NativeFunction);
        IsValidAnimNotifyTrackName_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidAnimNotifyTrackName_NativeFunction, "AnimationSequenceBase");
        IsValidAnimNotifyTrackName_NotifyTrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidAnimNotifyTrackName_NativeFunction, "NotifyTrackName");
        IsValidAnimNotifyTrackName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidAnimNotifyTrackName_NativeFunction, "ReturnValue");
        IsValidAnimationSyncMarkerName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValidAnimationSyncMarkerName");
        IsValidAnimationSyncMarkerName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValidAnimationSyncMarkerName_NativeFunction);
        IsValidAnimationSyncMarkerName_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidAnimationSyncMarkerName_NativeFunction, "AnimationSequence");
        IsValidAnimationSyncMarkerName_MarkerName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidAnimationSyncMarkerName_NativeFunction, "MarkerName");
        IsValidAnimationSyncMarkerName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidAnimationSyncMarkerName_NativeFunction, "ReturnValue");
        IsRootMotionLockForced_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsRootMotionLockForced");
        IsRootMotionLockForced_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsRootMotionLockForced_NativeFunction);
        IsRootMotionLockForced_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsRootMotionLockForced_NativeFunction, "AnimationSequence");
        IsRootMotionLockForced_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsRootMotionLockForced_NativeFunction, "ReturnValue");
        IsRootMotionEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsRootMotionEnabled");
        IsRootMotionEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsRootMotionEnabled_NativeFunction);
        IsRootMotionEnabled_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsRootMotionEnabled_NativeFunction, "AnimationSequence");
        IsRootMotionEnabled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsRootMotionEnabled_NativeFunction, "ReturnValue");
        GetVectorKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVectorKeys");
        GetVectorKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVectorKeys_NativeFunction);
        GetVectorKeys_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorKeys_NativeFunction, "AnimationSequence");
        GetVectorKeys_CurveName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorKeys_NativeFunction, "CurveName");
        GetVectorKeys_Times_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorKeys_NativeFunction, "Times");
        GetVectorKeys_Times_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetVectorKeys_NativeFunction, "Times");
        GetVectorKeys_Values_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorKeys_NativeFunction, "Values");
        GetVectorKeys_Values_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetVectorKeys_NativeFunction, "Values");
        GetVariableFrameStrippingSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVariableFrameStrippingSettings");
        GetVariableFrameStrippingSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVariableFrameStrippingSettings_NativeFunction);
        GetVariableFrameStrippingSettings_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVariableFrameStrippingSettings_NativeFunction, "AnimationSequence");
        GetVariableFrameStrippingSettings_VariableFrameStrippingSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVariableFrameStrippingSettings_NativeFunction, "VariableFrameStrippingSettings");
        GetUniqueMarkerNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetUniqueMarkerNames");
        GetUniqueMarkerNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetUniqueMarkerNames_NativeFunction);
        GetUniqueMarkerNames_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUniqueMarkerNames_NativeFunction, "AnimationSequence");
        GetUniqueMarkerNames_MarkerNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUniqueMarkerNames_NativeFunction, "MarkerNames");
        GetUniqueMarkerNames_MarkerNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetUniqueMarkerNames_NativeFunction, "MarkerNames");
        GetTransformationKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTransformationKeys");
        GetTransformationKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTransformationKeys_NativeFunction);
        GetTransformationKeys_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformationKeys_NativeFunction, "AnimationSequence");
        GetTransformationKeys_CurveName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformationKeys_NativeFunction, "CurveName");
        GetTransformationKeys_Times_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformationKeys_NativeFunction, "Times");
        GetTransformationKeys_Times_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetTransformationKeys_NativeFunction, "Times");
        GetTransformationKeys_Values_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformationKeys_NativeFunction, "Values");
        GetTransformationKeys_Values_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetTransformationKeys_NativeFunction, "Values");
        GetTimeAtFrame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTimeAtFrame");
        GetTimeAtFrame_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTimeAtFrame_NativeFunction);
        GetTimeAtFrame_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTimeAtFrame_NativeFunction, "AnimationSequenceBase");
        GetTimeAtFrame_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTimeAtFrame_NativeFunction, "Frame");
        GetTimeAtFrame_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTimeAtFrame_NativeFunction, "Time");
        GetSequenceLength_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSequenceLength");
        GetSequenceLength_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSequenceLength_NativeFunction);
        GetSequenceLength_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSequenceLength_NativeFunction, "AnimationSequenceBase");
        GetSequenceLength_Length_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSequenceLength_NativeFunction, "Length");
        GetRootMotionLockType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRootMotionLockType");
        GetRootMotionLockType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRootMotionLockType_NativeFunction);
        GetRootMotionLockType_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRootMotionLockType_NativeFunction, "AnimationSequence");
        GetRootMotionLockType_LockType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRootMotionLockType_NativeFunction, "LockType");
        GetRawTrackScaleData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRawTrackScaleData");
        GetRawTrackScaleData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRawTrackScaleData_NativeFunction);
        GetRawTrackScaleData_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRawTrackScaleData_NativeFunction, "AnimationSequenceBase");
        GetRawTrackScaleData_TrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRawTrackScaleData_NativeFunction, "TrackName");
        GetRawTrackScaleData_ScaleData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRawTrackScaleData_NativeFunction, "ScaleData");
        GetRawTrackScaleData_ScaleData_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetRawTrackScaleData_NativeFunction, "ScaleData");
        GetRawTrackRotationData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRawTrackRotationData");
        GetRawTrackRotationData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRawTrackRotationData_NativeFunction);
        GetRawTrackRotationData_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRawTrackRotationData_NativeFunction, "AnimationSequenceBase");
        GetRawTrackRotationData_TrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRawTrackRotationData_NativeFunction, "TrackName");
        GetRawTrackRotationData_RotationData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRawTrackRotationData_NativeFunction, "RotationData");
        GetRawTrackRotationData_RotationData_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetRawTrackRotationData_NativeFunction, "RotationData");
        GetRawTrackPositionData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRawTrackPositionData");
        GetRawTrackPositionData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRawTrackPositionData_NativeFunction);
        GetRawTrackPositionData_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRawTrackPositionData_NativeFunction, "AnimationSequenceBase");
        GetRawTrackPositionData_TrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRawTrackPositionData_NativeFunction, "TrackName");
        GetRawTrackPositionData_PositionData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRawTrackPositionData_NativeFunction, "PositionData");
        GetRawTrackPositionData_PositionData_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetRawTrackPositionData_NativeFunction, "PositionData");
        GetRawTrackData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRawTrackData");
        GetRawTrackData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRawTrackData_NativeFunction);
        GetRawTrackData_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRawTrackData_NativeFunction, "AnimationSequenceBase");
        GetRawTrackData_TrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRawTrackData_NativeFunction, "TrackName");
        GetRawTrackData_PositionKeys_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRawTrackData_NativeFunction, "PositionKeys");
        GetRawTrackData_PositionKeys_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetRawTrackData_NativeFunction, "PositionKeys");
        GetRawTrackData_RotationKeys_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRawTrackData_NativeFunction, "RotationKeys");
        GetRawTrackData_RotationKeys_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetRawTrackData_NativeFunction, "RotationKeys");
        GetRawTrackData_ScalingKeys_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRawTrackData_NativeFunction, "ScalingKeys");
        GetRawTrackData_ScalingKeys_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetRawTrackData_NativeFunction, "ScalingKeys");
        GetRateScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRateScale");
        GetRateScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRateScale_NativeFunction);
        GetRateScale_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRateScale_NativeFunction, "AnimationSequenceBase");
        GetRateScale_RateScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRateScale_NativeFunction, "RateScale");
        GetNumKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumKeys");
        GetNumKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumKeys_NativeFunction);
        GetNumKeys_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumKeys_NativeFunction, "AnimationSequenceBase");
        GetNumKeys_NumKeys_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumKeys_NativeFunction, "NumKeys");
        GetNumFrames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumFrames");
        GetNumFrames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumFrames_NativeFunction);
        GetNumFrames_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumFrames_NativeFunction, "AnimationSequenceBase");
        GetNumFrames_NumFrames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumFrames_NativeFunction, "NumFrames");
        GetNodesOfClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNodesOfClass");
        GetNodesOfClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNodesOfClass_NativeFunction);
        GetNodesOfClass_AnimationBlueprint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodesOfClass_NativeFunction, "AnimationBlueprint");
        GetNodesOfClass_NodeClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodesOfClass_NativeFunction, "NodeClass");
        GetNodesOfClass_GraphNodes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodesOfClass_NativeFunction, "GraphNodes");
        GetNodesOfClass_GraphNodes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetNodesOfClass_NativeFunction, "GraphNodes");
        GetNodesOfClass_bIncludeChildClasses_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodesOfClass_NativeFunction, "bIncludeChildClasses");
        GetMontageSlotNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMontageSlotNames");
        GetMontageSlotNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMontageSlotNames_NativeFunction);
        GetMontageSlotNames_AnimationMontage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMontageSlotNames_NativeFunction, "AnimationMontage");
        GetMontageSlotNames_SlotNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMontageSlotNames_NativeFunction, "SlotNames");
        GetMontageSlotNames_SlotNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetMontageSlotNames_NativeFunction, "SlotNames");
        GetMetaDataOfClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMetaDataOfClass");
        GetMetaDataOfClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMetaDataOfClass_NativeFunction);
        GetMetaDataOfClass_AnimationAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMetaDataOfClass_NativeFunction, "AnimationAsset");
        GetMetaDataOfClass_MetaDataClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMetaDataOfClass_NativeFunction, "MetaDataClass");
        GetMetaDataOfClass_MetaDataOfClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMetaDataOfClass_NativeFunction, "MetaDataOfClass");
        GetMetaDataOfClass_MetaDataOfClass_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetMetaDataOfClass_NativeFunction, "MetaDataOfClass");
        GetMetaData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMetaData");
        GetMetaData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMetaData_NativeFunction);
        GetMetaData_AnimationAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMetaData_NativeFunction, "AnimationAsset");
        GetMetaData_MetaData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMetaData_NativeFunction, "MetaData");
        GetMetaData_MetaData_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetMetaData_NativeFunction, "MetaData");
        GetFrameAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFrameAtTime");
        GetFrameAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFrameAtTime_NativeFunction);
        GetFrameAtTime_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFrameAtTime_NativeFunction, "AnimationSequenceBase");
        GetFrameAtTime_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFrameAtTime_NativeFunction, "Time");
        GetFrameAtTime_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFrameAtTime_NativeFunction, "Frame");
        GetFloatKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFloatKeys");
        GetFloatKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFloatKeys_NativeFunction);
        GetFloatKeys_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatKeys_NativeFunction, "AnimationSequence");
        GetFloatKeys_CurveName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatKeys_NativeFunction, "CurveName");
        GetFloatKeys_Times_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatKeys_NativeFunction, "Times");
        GetFloatKeys_Times_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetFloatKeys_NativeFunction, "Times");
        GetFloatKeys_Values_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatKeys_NativeFunction, "Values");
        GetFloatKeys_Values_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetFloatKeys_NativeFunction, "Values");
        GetCurveCompressionSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurveCompressionSettings");
        GetCurveCompressionSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurveCompressionSettings_NativeFunction);
        GetCurveCompressionSettings_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurveCompressionSettings_NativeFunction, "AnimationSequence");
        GetCurveCompressionSettings_CompressionSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurveCompressionSettings_NativeFunction, "CompressionSettings");
        GetBonePosesForTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBonePosesForTime");
        GetBonePosesForTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBonePosesForTime_NativeFunction);
        GetBonePosesForTime_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePosesForTime_NativeFunction, "AnimationSequenceBase");
        GetBonePosesForTime_BoneNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePosesForTime_NativeFunction, "BoneNames");
        GetBonePosesForTime_BoneNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetBonePosesForTime_NativeFunction, "BoneNames");
        GetBonePosesForTime_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePosesForTime_NativeFunction, "Time");
        GetBonePosesForTime_bExtractRootMotion_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePosesForTime_NativeFunction, "bExtractRootMotion");
        GetBonePosesForTime_Poses_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePosesForTime_NativeFunction, "Poses");
        GetBonePosesForTime_Poses_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetBonePosesForTime_NativeFunction, "Poses");
        GetBonePosesForTime_PreviewMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePosesForTime_NativeFunction, "PreviewMesh");
        GetBonePosesForFrame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBonePosesForFrame");
        GetBonePosesForFrame_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBonePosesForFrame_NativeFunction);
        GetBonePosesForFrame_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePosesForFrame_NativeFunction, "AnimationSequenceBase");
        GetBonePosesForFrame_BoneNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePosesForFrame_NativeFunction, "BoneNames");
        GetBonePosesForFrame_BoneNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetBonePosesForFrame_NativeFunction, "BoneNames");
        GetBonePosesForFrame_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePosesForFrame_NativeFunction, "Frame");
        GetBonePosesForFrame_bExtractRootMotion_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePosesForFrame_NativeFunction, "bExtractRootMotion");
        GetBonePosesForFrame_Poses_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePosesForFrame_NativeFunction, "Poses");
        GetBonePosesForFrame_Poses_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetBonePosesForFrame_NativeFunction, "Poses");
        GetBonePosesForFrame_PreviewMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePosesForFrame_NativeFunction, "PreviewMesh");
        GetBonePoseForTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBonePoseForTime");
        GetBonePoseForTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBonePoseForTime_NativeFunction);
        GetBonePoseForTime_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePoseForTime_NativeFunction, "AnimationSequenceBase");
        GetBonePoseForTime_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePoseForTime_NativeFunction, "BoneName");
        GetBonePoseForTime_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePoseForTime_NativeFunction, "Time");
        GetBonePoseForTime_bExtractRootMotion_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePoseForTime_NativeFunction, "bExtractRootMotion");
        GetBonePoseForTime_Pose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePoseForTime_NativeFunction, "Pose");
        GetBonePoseForFrame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBonePoseForFrame");
        GetBonePoseForFrame_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBonePoseForFrame_NativeFunction);
        GetBonePoseForFrame_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePoseForFrame_NativeFunction, "AnimationSequenceBase");
        GetBonePoseForFrame_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePoseForFrame_NativeFunction, "BoneName");
        GetBonePoseForFrame_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePoseForFrame_NativeFunction, "Frame");
        GetBonePoseForFrame_bExtractRootMotion_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePoseForFrame_NativeFunction, "bExtractRootMotion");
        GetBonePoseForFrame_Pose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBonePoseForFrame_NativeFunction, "Pose");
        GetBoneCompressionSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBoneCompressionSettings");
        GetBoneCompressionSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBoneCompressionSettings_NativeFunction);
        GetBoneCompressionSettings_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoneCompressionSettings_NativeFunction, "AnimationSequence");
        GetBoneCompressionSettings_CompressionSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoneCompressionSettings_NativeFunction, "CompressionSettings");
        GetAnimNotifyEventTriggerTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnimNotifyEventTriggerTime");
        GetAnimNotifyEventTriggerTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnimNotifyEventTriggerTime_NativeFunction);
        GetAnimNotifyEventTriggerTime_NotifyEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimNotifyEventTriggerTime_NativeFunction, "NotifyEvent");
        GetAnimNotifyEventTriggerTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimNotifyEventTriggerTime_NativeFunction, "ReturnValue");
        GetAnimNotifyEventDuration_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnimNotifyEventDuration");
        GetAnimNotifyEventDuration_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnimNotifyEventDuration_NativeFunction);
        GetAnimNotifyEventDuration_NotifyEvent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimNotifyEventDuration_NativeFunction, "NotifyEvent");
        GetAnimNotifyEventDuration_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimNotifyEventDuration_NativeFunction, "ReturnValue");
        GetAnimationTrackNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnimationTrackNames");
        GetAnimationTrackNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnimationTrackNames_NativeFunction);
        GetAnimationTrackNames_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationTrackNames_NativeFunction, "AnimationSequenceBase");
        GetAnimationTrackNames_TrackNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationTrackNames_NativeFunction, "TrackNames");
        GetAnimationTrackNames_TrackNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAnimationTrackNames_NativeFunction, "TrackNames");
        GetAnimationSyncMarkersForTrack_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnimationSyncMarkersForTrack");
        GetAnimationSyncMarkersForTrack_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnimationSyncMarkersForTrack_NativeFunction);
        GetAnimationSyncMarkersForTrack_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationSyncMarkersForTrack_NativeFunction, "AnimationSequence");
        GetAnimationSyncMarkersForTrack_NotifyTrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationSyncMarkersForTrack_NativeFunction, "NotifyTrackName");
        GetAnimationSyncMarkersForTrack_Markers_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationSyncMarkersForTrack_NativeFunction, "Markers");
        GetAnimationSyncMarkersForTrack_Markers_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAnimationSyncMarkersForTrack_NativeFunction, "Markers");
        GetAnimationSyncMarkers_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnimationSyncMarkers");
        GetAnimationSyncMarkers_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnimationSyncMarkers_NativeFunction);
        GetAnimationSyncMarkers_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationSyncMarkers_NativeFunction, "AnimationSequence");
        GetAnimationSyncMarkers_Markers_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationSyncMarkers_NativeFunction, "Markers");
        GetAnimationSyncMarkers_Markers_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAnimationSyncMarkers_NativeFunction, "Markers");
        GetAnimationNotifyTrackNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnimationNotifyTrackNames");
        GetAnimationNotifyTrackNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnimationNotifyTrackNames_NativeFunction);
        GetAnimationNotifyTrackNames_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationNotifyTrackNames_NativeFunction, "AnimationSequenceBase");
        GetAnimationNotifyTrackNames_TrackNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationNotifyTrackNames_NativeFunction, "TrackNames");
        GetAnimationNotifyTrackNames_TrackNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAnimationNotifyTrackNames_NativeFunction, "TrackNames");
        GetAnimationNotifyEventsForTrack_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnimationNotifyEventsForTrack");
        GetAnimationNotifyEventsForTrack_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnimationNotifyEventsForTrack_NativeFunction);
        GetAnimationNotifyEventsForTrack_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationNotifyEventsForTrack_NativeFunction, "AnimationSequenceBase");
        GetAnimationNotifyEventsForTrack_NotifyTrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationNotifyEventsForTrack_NativeFunction, "NotifyTrackName");
        GetAnimationNotifyEventsForTrack_Events_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationNotifyEventsForTrack_NativeFunction, "Events");
        GetAnimationNotifyEventsForTrack_Events_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAnimationNotifyEventsForTrack_NativeFunction, "Events");
        GetAnimationNotifyEvents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnimationNotifyEvents");
        GetAnimationNotifyEvents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnimationNotifyEvents_NativeFunction);
        GetAnimationNotifyEvents_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationNotifyEvents_NativeFunction, "AnimationSequenceBase");
        GetAnimationNotifyEvents_NotifyEvents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationNotifyEvents_NativeFunction, "NotifyEvents");
        GetAnimationNotifyEvents_NotifyEvents_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAnimationNotifyEvents_NativeFunction, "NotifyEvents");
        GetAnimationNotifyEventNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnimationNotifyEventNames");
        GetAnimationNotifyEventNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnimationNotifyEventNames_NativeFunction);
        GetAnimationNotifyEventNames_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationNotifyEventNames_NativeFunction, "AnimationSequenceBase");
        GetAnimationNotifyEventNames_EventNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationNotifyEventNames_NativeFunction, "EventNames");
        GetAnimationNotifyEventNames_EventNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAnimationNotifyEventNames_NativeFunction, "EventNames");
        GetAnimationInterpolationType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnimationInterpolationType");
        GetAnimationInterpolationType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnimationInterpolationType_NativeFunction);
        GetAnimationInterpolationType_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationInterpolationType_NativeFunction, "AnimationSequence");
        GetAnimationInterpolationType_InterpolationType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationInterpolationType_NativeFunction, "InterpolationType");
        GetAnimationGraphs_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnimationGraphs");
        GetAnimationGraphs_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnimationGraphs_NativeFunction);
        GetAnimationGraphs_AnimationBlueprint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationGraphs_NativeFunction, "AnimationBlueprint");
        GetAnimationGraphs_AnimationGraphs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationGraphs_NativeFunction, "AnimationGraphs");
        GetAnimationGraphs_AnimationGraphs_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAnimationGraphs_NativeFunction, "AnimationGraphs");
        GetAnimationCurveNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnimationCurveNames");
        GetAnimationCurveNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnimationCurveNames_NativeFunction);
        GetAnimationCurveNames_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationCurveNames_NativeFunction, "AnimationSequence");
        GetAnimationCurveNames_CurveType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationCurveNames_NativeFunction, "CurveType");
        GetAnimationCurveNames_CurveNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationCurveNames_NativeFunction, "CurveNames");
        GetAnimationCurveNames_CurveNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAnimationCurveNames_NativeFunction, "CurveNames");
        GetAdditiveBasePoseType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAdditiveBasePoseType");
        GetAdditiveBasePoseType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAdditiveBasePoseType_NativeFunction);
        GetAdditiveBasePoseType_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAdditiveBasePoseType_NativeFunction, "AnimationSequence");
        GetAdditiveBasePoseType_AdditiveBasePoseType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAdditiveBasePoseType_NativeFunction, "AdditiveBasePoseType");
        GetAdditiveAnimationType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAdditiveAnimationType");
        GetAdditiveAnimationType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAdditiveAnimationType_NativeFunction);
        GetAdditiveAnimationType_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAdditiveAnimationType_NativeFunction, "AnimationSequence");
        GetAdditiveAnimationType_AdditiveAnimationType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAdditiveAnimationType_NativeFunction, "AdditiveAnimationType");
        FindBonePathToRoot_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindBonePathToRoot");
        FindBonePathToRoot_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindBonePathToRoot_NativeFunction);
        FindBonePathToRoot_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindBonePathToRoot_NativeFunction, "AnimationSequenceBase");
        FindBonePathToRoot_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindBonePathToRoot_NativeFunction, "BoneName");
        FindBonePathToRoot_BonePath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindBonePathToRoot_NativeFunction, "BonePath");
        FindBonePathToRoot_BonePath_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(FindBonePathToRoot_NativeFunction, "BonePath");
        FinalizeBoneAnimation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FinalizeBoneAnimation");
        FinalizeBoneAnimation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FinalizeBoneAnimation_NativeFunction);
        FinalizeBoneAnimation_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FinalizeBoneAnimation_NativeFunction, "AnimationSequence");
        EvaluateRootBoneTimecodeSubframeAttributeAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EvaluateRootBoneTimecodeSubframeAttributeAtTime");
        EvaluateRootBoneTimecodeSubframeAttributeAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EvaluateRootBoneTimecodeSubframeAttributeAtTime_NativeFunction);
        EvaluateRootBoneTimecodeSubframeAttributeAtTime_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateRootBoneTimecodeSubframeAttributeAtTime_NativeFunction, "AnimationSequenceBase");
        EvaluateRootBoneTimecodeSubframeAttributeAtTime_EvalTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateRootBoneTimecodeSubframeAttributeAtTime_NativeFunction, "EvalTime");
        EvaluateRootBoneTimecodeSubframeAttributeAtTime_OutSubframe_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateRootBoneTimecodeSubframeAttributeAtTime_NativeFunction, "OutSubframe");
        EvaluateRootBoneTimecodeSubframeAttributeAtTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateRootBoneTimecodeSubframeAttributeAtTime_NativeFunction, "ReturnValue");
        EvaluateRootBoneTimecodeAttributesAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EvaluateRootBoneTimecodeAttributesAtTime");
        EvaluateRootBoneTimecodeAttributesAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EvaluateRootBoneTimecodeAttributesAtTime_NativeFunction);
        EvaluateRootBoneTimecodeAttributesAtTime_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateRootBoneTimecodeAttributesAtTime_NativeFunction, "AnimationSequenceBase");
        EvaluateRootBoneTimecodeAttributesAtTime_EvalTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateRootBoneTimecodeAttributesAtTime_NativeFunction, "EvalTime");
        EvaluateRootBoneTimecodeAttributesAtTime_OutQualifiedFrameTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateRootBoneTimecodeAttributesAtTime_NativeFunction, "OutQualifiedFrameTime");
        EvaluateRootBoneTimecodeAttributesAtTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateRootBoneTimecodeAttributesAtTime_NativeFunction, "ReturnValue");
        DoesCurveExist_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DoesCurveExist");
        DoesCurveExist_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DoesCurveExist_NativeFunction);
        DoesCurveExist_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesCurveExist_NativeFunction, "AnimationSequence");
        DoesCurveExist_CurveName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesCurveExist_NativeFunction, "CurveName");
        DoesCurveExist_CurveType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesCurveExist_NativeFunction, "CurveType");
        DoesCurveExist_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesCurveExist_NativeFunction, "ReturnValue");
        DoesBoneNameExist_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DoesBoneNameExist");
        DoesBoneNameExist_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DoesBoneNameExist_NativeFunction);
        DoesBoneNameExist_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesBoneNameExist_NativeFunction, "AnimationSequence");
        DoesBoneNameExist_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesBoneNameExist_NativeFunction, "BoneName");
        DoesBoneNameExist_bExists_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesBoneNameExist_NativeFunction, "bExists");
        CopyAnimNotifiesFromSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CopyAnimNotifiesFromSequence");
        CopyAnimNotifiesFromSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CopyAnimNotifiesFromSequence_NativeFunction);
        CopyAnimNotifiesFromSequence_SourceAnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyAnimNotifiesFromSequence_NativeFunction, "SourceAnimationSequenceBase");
        CopyAnimNotifiesFromSequence_DestinationAnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyAnimNotifiesFromSequence_NativeFunction, "DestinationAnimationSequenceBase");
        CopyAnimNotifiesFromSequence_bDeleteExistingNotifies_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyAnimNotifiesFromSequence_NativeFunction, "bDeleteExistingNotifies");
        CopyAnimationCurveNamesToSkeleton_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CopyAnimationCurveNamesToSkeleton");
        CopyAnimationCurveNamesToSkeleton_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CopyAnimationCurveNamesToSkeleton_NativeFunction);
        CopyAnimationCurveNamesToSkeleton_OldSkeleton_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyAnimationCurveNamesToSkeleton_NativeFunction, "OldSkeleton");
        CopyAnimationCurveNamesToSkeleton_NewSkeleton_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyAnimationCurveNamesToSkeleton_NativeFunction, "NewSkeleton");
        CopyAnimationCurveNamesToSkeleton_SequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyAnimationCurveNamesToSkeleton_NativeFunction, "SequenceBase");
        CopyAnimationCurveNamesToSkeleton_CurveType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyAnimationCurveNamesToSkeleton_NativeFunction, "CurveType");
        ContainsMetaDataOfClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ContainsMetaDataOfClass");
        ContainsMetaDataOfClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ContainsMetaDataOfClass_NativeFunction);
        ContainsMetaDataOfClass_AnimationAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ContainsMetaDataOfClass_NativeFunction, "AnimationAsset");
        ContainsMetaDataOfClass_MetaDataClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ContainsMetaDataOfClass_NativeFunction, "MetaDataClass");
        ContainsMetaDataOfClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ContainsMetaDataOfClass_NativeFunction, "ReturnValue");
        AddVirtualBone_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddVirtualBone");
        AddVirtualBone_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddVirtualBone_NativeFunction);
        AddVirtualBone_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVirtualBone_NativeFunction, "AnimationSequence");
        AddVirtualBone_SourceBoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVirtualBone_NativeFunction, "SourceBoneName");
        AddVirtualBone_TargetBoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVirtualBone_NativeFunction, "TargetBoneName");
        AddVirtualBone_VirtualBoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVirtualBone_NativeFunction, "VirtualBoneName");
        AddVectorCurveKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddVectorCurveKeys");
        AddVectorCurveKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddVectorCurveKeys_NativeFunction);
        AddVectorCurveKeys_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVectorCurveKeys_NativeFunction, "AnimationSequence");
        AddVectorCurveKeys_CurveName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVectorCurveKeys_NativeFunction, "CurveName");
        AddVectorCurveKeys_Times_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVectorCurveKeys_NativeFunction, "Times");
        AddVectorCurveKeys_Times_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(AddVectorCurveKeys_NativeFunction, "Times");
        AddVectorCurveKeys_Vectors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVectorCurveKeys_NativeFunction, "Vectors");
        AddVectorCurveKeys_Vectors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(AddVectorCurveKeys_NativeFunction, "Vectors");
        AddVectorCurveKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddVectorCurveKey");
        AddVectorCurveKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddVectorCurveKey_NativeFunction);
        AddVectorCurveKey_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVectorCurveKey_NativeFunction, "AnimationSequence");
        AddVectorCurveKey_CurveName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVectorCurveKey_NativeFunction, "CurveName");
        AddVectorCurveKey_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVectorCurveKey_NativeFunction, "Time");
        AddVectorCurveKey_Vector_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVectorCurveKey_NativeFunction, "Vector");
        AddTransformationCurveKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddTransformationCurveKeys");
        AddTransformationCurveKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddTransformationCurveKeys_NativeFunction);
        AddTransformationCurveKeys_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTransformationCurveKeys_NativeFunction, "AnimationSequence");
        AddTransformationCurveKeys_CurveName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTransformationCurveKeys_NativeFunction, "CurveName");
        AddTransformationCurveKeys_Times_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTransformationCurveKeys_NativeFunction, "Times");
        AddTransformationCurveKeys_Times_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(AddTransformationCurveKeys_NativeFunction, "Times");
        AddTransformationCurveKeys_Transforms_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTransformationCurveKeys_NativeFunction, "Transforms");
        AddTransformationCurveKeys_Transforms_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(AddTransformationCurveKeys_NativeFunction, "Transforms");
        AddTransformationCurveKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddTransformationCurveKey");
        AddTransformationCurveKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddTransformationCurveKey_NativeFunction);
        AddTransformationCurveKey_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTransformationCurveKey_NativeFunction, "AnimationSequence");
        AddTransformationCurveKey_CurveName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTransformationCurveKey_NativeFunction, "CurveName");
        AddTransformationCurveKey_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTransformationCurveKey_NativeFunction, "Time");
        AddTransformationCurveKey_Transform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTransformationCurveKey_NativeFunction, "Transform");
        AddNodeAssetOverride_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddNodeAssetOverride");
        AddNodeAssetOverride_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddNodeAssetOverride_NativeFunction);
        AddNodeAssetOverride_AnimBlueprint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddNodeAssetOverride_NativeFunction, "AnimBlueprint");
        AddNodeAssetOverride_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddNodeAssetOverride_NativeFunction, "Target");
        AddNodeAssetOverride_Override_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddNodeAssetOverride_NativeFunction, "Override");
        AddNodeAssetOverride_bPrintAppliedOverrides_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddNodeAssetOverride_NativeFunction, "bPrintAppliedOverrides");
        AddMetaDataObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddMetaDataObject");
        AddMetaDataObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddMetaDataObject_NativeFunction);
        AddMetaDataObject_AnimationAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMetaDataObject_NativeFunction, "AnimationAsset");
        AddMetaDataObject_MetaDataObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMetaDataObject_NativeFunction, "MetaDataObject");
        AddMetaData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddMetaData");
        AddMetaData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddMetaData_NativeFunction);
        AddMetaData_AnimationAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMetaData_NativeFunction, "AnimationAsset");
        AddMetaData_MetaDataClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMetaData_NativeFunction, "MetaDataClass");
        AddMetaData_MetaDataInstance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMetaData_NativeFunction, "MetaDataInstance");
        AddFloatCurveKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddFloatCurveKeys");
        AddFloatCurveKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddFloatCurveKeys_NativeFunction);
        AddFloatCurveKeys_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddFloatCurveKeys_NativeFunction, "AnimationSequence");
        AddFloatCurveKeys_CurveName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddFloatCurveKeys_NativeFunction, "CurveName");
        AddFloatCurveKeys_Times_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddFloatCurveKeys_NativeFunction, "Times");
        AddFloatCurveKeys_Times_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(AddFloatCurveKeys_NativeFunction, "Times");
        AddFloatCurveKeys_Values_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddFloatCurveKeys_NativeFunction, "Values");
        AddFloatCurveKeys_Values_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(AddFloatCurveKeys_NativeFunction, "Values");
        AddFloatCurveKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddFloatCurveKey");
        AddFloatCurveKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddFloatCurveKey_NativeFunction);
        AddFloatCurveKey_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddFloatCurveKey_NativeFunction, "AnimationSequence");
        AddFloatCurveKey_CurveName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddFloatCurveKey_NativeFunction, "CurveName");
        AddFloatCurveKey_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddFloatCurveKey_NativeFunction, "Time");
        AddFloatCurveKey_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddFloatCurveKey_NativeFunction, "Value");
        AddCurve_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddCurve");
        AddCurve_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddCurve_NativeFunction);
        AddCurve_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddCurve_NativeFunction, "AnimationSequence");
        AddCurve_CurveName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddCurve_NativeFunction, "CurveName");
        AddCurve_CurveType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddCurve_NativeFunction, "CurveType");
        AddCurve_bMetaDataCurve_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddCurve_NativeFunction, "bMetaDataCurve");
        AddAnimationSyncMarker_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddAnimationSyncMarker");
        AddAnimationSyncMarker_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddAnimationSyncMarker_NativeFunction);
        AddAnimationSyncMarker_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationSyncMarker_NativeFunction, "AnimationSequence");
        AddAnimationSyncMarker_MarkerName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationSyncMarker_NativeFunction, "MarkerName");
        AddAnimationSyncMarker_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationSyncMarker_NativeFunction, "Time");
        AddAnimationSyncMarker_NotifyTrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationSyncMarker_NativeFunction, "NotifyTrackName");
        AddAnimationNotifyTrack_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddAnimationNotifyTrack");
        AddAnimationNotifyTrack_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddAnimationNotifyTrack_NativeFunction);
        AddAnimationNotifyTrack_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyTrack_NativeFunction, "AnimationSequenceBase");
        AddAnimationNotifyTrack_NotifyTrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyTrack_NativeFunction, "NotifyTrackName");
        AddAnimationNotifyTrack_TrackColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyTrack_NativeFunction, "TrackColor");
        AddAnimationNotifyStateEventObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddAnimationNotifyStateEventObject");
        AddAnimationNotifyStateEventObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddAnimationNotifyStateEventObject_NativeFunction);
        AddAnimationNotifyStateEventObject_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyStateEventObject_NativeFunction, "AnimationSequenceBase");
        AddAnimationNotifyStateEventObject_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyStateEventObject_NativeFunction, "StartTime");
        AddAnimationNotifyStateEventObject_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyStateEventObject_NativeFunction, "Duration");
        AddAnimationNotifyStateEventObject_NotifyState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyStateEventObject_NativeFunction, "NotifyState");
        AddAnimationNotifyStateEventObject_NotifyTrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyStateEventObject_NativeFunction, "NotifyTrackName");
        AddAnimationNotifyStateEvent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddAnimationNotifyStateEvent");
        AddAnimationNotifyStateEvent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddAnimationNotifyStateEvent_NativeFunction);
        AddAnimationNotifyStateEvent_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyStateEvent_NativeFunction, "AnimationSequenceBase");
        AddAnimationNotifyStateEvent_NotifyTrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyStateEvent_NativeFunction, "NotifyTrackName");
        AddAnimationNotifyStateEvent_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyStateEvent_NativeFunction, "StartTime");
        AddAnimationNotifyStateEvent_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyStateEvent_NativeFunction, "Duration");
        AddAnimationNotifyStateEvent_NotifyStateClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyStateEvent_NativeFunction, "NotifyStateClass");
        AddAnimationNotifyStateEvent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyStateEvent_NativeFunction, "ReturnValue");
        AddAnimationNotifyEventObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddAnimationNotifyEventObject");
        AddAnimationNotifyEventObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddAnimationNotifyEventObject_NativeFunction);
        AddAnimationNotifyEventObject_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyEventObject_NativeFunction, "AnimationSequenceBase");
        AddAnimationNotifyEventObject_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyEventObject_NativeFunction, "StartTime");
        AddAnimationNotifyEventObject_Notify_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyEventObject_NativeFunction, "Notify");
        AddAnimationNotifyEventObject_NotifyTrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyEventObject_NativeFunction, "NotifyTrackName");
        AddAnimationNotifyEvent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddAnimationNotifyEvent");
        AddAnimationNotifyEvent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddAnimationNotifyEvent_NativeFunction);
        AddAnimationNotifyEvent_AnimationSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyEvent_NativeFunction, "AnimationSequenceBase");
        AddAnimationNotifyEvent_NotifyTrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyEvent_NativeFunction, "NotifyTrackName");
        AddAnimationNotifyEvent_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyEvent_NativeFunction, "StartTime");
        AddAnimationNotifyEvent_NotifyClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyEvent_NativeFunction, "NotifyClass");
        AddAnimationNotifyEvent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAnimationNotifyEvent_NativeFunction, "ReturnValue");
        
        
    }
    
    protected AnimationLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:SetVariableFrameStrippingSettings
    static readonly IntPtr SetVariableFrameStrippingSettings_NativeFunction;
    static readonly int SetVariableFrameStrippingSettings_ParamsSize;
    static readonly int SetVariableFrameStrippingSettings_AnimationSequence_Offset;
    static readonly int SetVariableFrameStrippingSettings_VariableFrameStrippingSettings_Offset;
    
    public static void SetVariableFrameStrippingSettings(UnrealSharp.Engine.AnimSequence animationSequence, UnrealSharp.Engine.VariableFrameStrippingSettings variableFrameStrippingSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVariableFrameStrippingSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetVariableFrameStrippingSettings_AnimationSequence_Offset), 0, null, animationSequence);
            ObjectMarshaller<UnrealSharp.Engine.VariableFrameStrippingSettings>.ToNative(IntPtr.Add(ParamsBuffer, SetVariableFrameStrippingSettings_VariableFrameStrippingSettings_Offset), 0, null, variableFrameStrippingSettings);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetVariableFrameStrippingSettings_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:SetRootMotionLockType
    static readonly IntPtr SetRootMotionLockType_NativeFunction;
    static readonly int SetRootMotionLockType_ParamsSize;
    static readonly int SetRootMotionLockType_AnimationSequence_Offset;
    static readonly int SetRootMotionLockType_RootMotionLockType_Offset;
    
    public static void SetRootMotionLockType(UnrealSharp.Engine.AnimSequence animationSequence, UnrealSharp.Engine.ERootMotionRootLock rootMotionLockType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRootMotionLockType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetRootMotionLockType_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<UnrealSharp.Engine.ERootMotionRootLock>.ToNative(IntPtr.Add(ParamsBuffer, SetRootMotionLockType_RootMotionLockType_Offset), 0, null, rootMotionLockType);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetRootMotionLockType_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:SetRootMotionEnabled
    static readonly IntPtr SetRootMotionEnabled_NativeFunction;
    static readonly int SetRootMotionEnabled_ParamsSize;
    static readonly int SetRootMotionEnabled_AnimationSequence_Offset;
    static readonly int SetRootMotionEnabled_bEnabled_Offset;
    
    public static void SetRootMotionEnabled(UnrealSharp.Engine.AnimSequence animationSequence, bool bEnabled)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRootMotionEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetRootMotionEnabled_AnimationSequence_Offset), 0, null, animationSequence);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetRootMotionEnabled_bEnabled_Offset), 0, null, bEnabled);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetRootMotionEnabled_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:SetRateScale
    static readonly IntPtr SetRateScale_NativeFunction;
    static readonly int SetRateScale_ParamsSize;
    static readonly int SetRateScale_AnimationSequenceBase_Offset;
    static readonly int SetRateScale_RateScale_Offset;
    
    public static void SetRateScale(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, float rateScale)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRateScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, SetRateScale_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetRateScale_RateScale_Offset), 0, null, rateScale);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetRateScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:SetIsRootMotionLockForced
    static readonly IntPtr SetIsRootMotionLockForced_NativeFunction;
    static readonly int SetIsRootMotionLockForced_ParamsSize;
    static readonly int SetIsRootMotionLockForced_AnimationSequence_Offset;
    static readonly int SetIsRootMotionLockForced_bForced_Offset;
    
    public static void SetIsRootMotionLockForced(UnrealSharp.Engine.AnimSequence animationSequence, bool bForced)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIsRootMotionLockForced_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetIsRootMotionLockForced_AnimationSequence_Offset), 0, null, animationSequence);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetIsRootMotionLockForced_bForced_Offset), 0, null, bForced);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetIsRootMotionLockForced_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:SetCurveCompressionSettings
    static readonly IntPtr SetCurveCompressionSettings_NativeFunction;
    static readonly int SetCurveCompressionSettings_ParamsSize;
    static readonly int SetCurveCompressionSettings_AnimationSequence_Offset;
    static readonly int SetCurveCompressionSettings_CompressionSettings_Offset;
    
    public static void SetCurveCompressionSettings(UnrealSharp.Engine.AnimSequence animationSequence, UnrealSharp.Engine.AnimCurveCompressionSettings compressionSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCurveCompressionSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetCurveCompressionSettings_AnimationSequence_Offset), 0, null, animationSequence);
            ObjectMarshaller<UnrealSharp.Engine.AnimCurveCompressionSettings>.ToNative(IntPtr.Add(ParamsBuffer, SetCurveCompressionSettings_CompressionSettings_Offset), 0, null, compressionSettings);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetCurveCompressionSettings_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:SetBoneCompressionSettings
    static readonly IntPtr SetBoneCompressionSettings_NativeFunction;
    static readonly int SetBoneCompressionSettings_ParamsSize;
    static readonly int SetBoneCompressionSettings_AnimationSequence_Offset;
    static readonly int SetBoneCompressionSettings_CompressionSettings_Offset;
    
    public static void SetBoneCompressionSettings(UnrealSharp.Engine.AnimSequence animationSequence, UnrealSharp.Engine.AnimBoneCompressionSettings compressionSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBoneCompressionSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetBoneCompressionSettings_AnimationSequence_Offset), 0, null, animationSequence);
            ObjectMarshaller<UnrealSharp.Engine.AnimBoneCompressionSettings>.ToNative(IntPtr.Add(ParamsBuffer, SetBoneCompressionSettings_CompressionSettings_Offset), 0, null, compressionSettings);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetBoneCompressionSettings_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:SetAnimationInterpolationType
    static readonly IntPtr SetAnimationInterpolationType_NativeFunction;
    static readonly int SetAnimationInterpolationType_ParamsSize;
    static readonly int SetAnimationInterpolationType_AnimationSequence_Offset;
    static readonly int SetAnimationInterpolationType_InterpolationType_Offset;
    
    public static void SetAnimationInterpolationType(UnrealSharp.Engine.AnimSequence animationSequence, UnrealSharp.Engine.EAnimInterpolationType interpolationType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAnimationInterpolationType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetAnimationInterpolationType_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<UnrealSharp.Engine.EAnimInterpolationType>.ToNative(IntPtr.Add(ParamsBuffer, SetAnimationInterpolationType_InterpolationType_Offset), 0, null, interpolationType);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetAnimationInterpolationType_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:SetAdditiveBasePoseType
    static readonly IntPtr SetAdditiveBasePoseType_NativeFunction;
    static readonly int SetAdditiveBasePoseType_ParamsSize;
    static readonly int SetAdditiveBasePoseType_AnimationSequence_Offset;
    static readonly int SetAdditiveBasePoseType_AdditiveBasePoseType_Offset;
    
    public static void SetAdditiveBasePoseType(UnrealSharp.Engine.AnimSequence animationSequence, UnrealSharp.Engine.EAdditiveBasePoseType additiveBasePoseType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAdditiveBasePoseType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetAdditiveBasePoseType_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<UnrealSharp.Engine.EAdditiveBasePoseType>.ToNative(IntPtr.Add(ParamsBuffer, SetAdditiveBasePoseType_AdditiveBasePoseType_Offset), 0, null, additiveBasePoseType);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetAdditiveBasePoseType_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:SetAdditiveAnimationType
    static readonly IntPtr SetAdditiveAnimationType_NativeFunction;
    static readonly int SetAdditiveAnimationType_ParamsSize;
    static readonly int SetAdditiveAnimationType_AnimationSequence_Offset;
    static readonly int SetAdditiveAnimationType_AdditiveAnimationType_Offset;
    
    public static void SetAdditiveAnimationType(UnrealSharp.Engine.AnimSequence animationSequence, UnrealSharp.Engine.EAdditiveAnimationType additiveAnimationType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAdditiveAnimationType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetAdditiveAnimationType_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<UnrealSharp.Engine.EAdditiveAnimationType>.ToNative(IntPtr.Add(ParamsBuffer, SetAdditiveAnimationType_AdditiveAnimationType_Offset), 0, null, additiveAnimationType);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetAdditiveAnimationType_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:RemoveVirtualBones
    static readonly IntPtr RemoveVirtualBones_NativeFunction;
    static readonly int RemoveVirtualBones_ParamsSize;
    static readonly int RemoveVirtualBones_AnimationSequence_Offset;
    static readonly int RemoveVirtualBones_VirtualBoneNames_Offset;
    static readonly int RemoveVirtualBones_VirtualBoneNames_ElementSize;
    
    public static void RemoveVirtualBones(UnrealSharp.Engine.AnimSequence animationSequence, System.Collections.Generic.IList<Name> virtualBoneNames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveVirtualBones_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, RemoveVirtualBones_AnimationSequence_Offset), 0, null, animationSequence);
            IntPtr VirtualBoneNames_NativeBuffer = IntPtr.Add(ParamsBuffer, RemoveVirtualBones_VirtualBoneNames_Offset);
            UnrealArrayCopyMarshaler<Name> VirtualBoneNames_Marshaler = new UnrealArrayCopyMarshaler<Name>(1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, RemoveVirtualBones_VirtualBoneNames_ElementSize);
            VirtualBoneNames_Marshaler.ToNative(VirtualBoneNames_NativeBuffer, 0, null, virtualBoneNames);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveVirtualBones_NativeFunction, ParamsBuffer);
            
            UnrealArrayCopyMarshaler<Name>.DestructInstance(VirtualBoneNames_NativeBuffer, 0);
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:RemoveVirtualBone
    static readonly IntPtr RemoveVirtualBone_NativeFunction;
    static readonly int RemoveVirtualBone_ParamsSize;
    static readonly int RemoveVirtualBone_AnimationSequence_Offset;
    static readonly int RemoveVirtualBone_VirtualBoneName_Offset;
    
    public static void RemoveVirtualBone(UnrealSharp.Engine.AnimSequence animationSequence, Name virtualBoneName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveVirtualBone_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, RemoveVirtualBone_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RemoveVirtualBone_VirtualBoneName_Offset), 0, null, virtualBoneName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveVirtualBone_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:RemoveMetaDataOfClass
    static readonly IntPtr RemoveMetaDataOfClass_NativeFunction;
    static readonly int RemoveMetaDataOfClass_ParamsSize;
    static readonly int RemoveMetaDataOfClass_AnimationAsset_Offset;
    static readonly int RemoveMetaDataOfClass_MetaDataClass_Offset;
    
    public static void RemoveMetaDataOfClass(UnrealSharp.Engine.AnimationAsset animationAsset, SubclassOf<UnrealSharp.Engine.AnimMetaData> metaDataClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveMetaDataOfClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimationAsset>.ToNative(IntPtr.Add(ParamsBuffer, RemoveMetaDataOfClass_AnimationAsset_Offset), 0, null, animationAsset);
            SubclassOfMarshaller<UnrealSharp.Engine.AnimMetaData>.ToNative(IntPtr.Add(ParamsBuffer, RemoveMetaDataOfClass_MetaDataClass_Offset), 0, null, metaDataClass);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveMetaDataOfClass_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:RemoveMetaData
    static readonly IntPtr RemoveMetaData_NativeFunction;
    static readonly int RemoveMetaData_ParamsSize;
    static readonly int RemoveMetaData_AnimationAsset_Offset;
    static readonly int RemoveMetaData_MetaDataObject_Offset;
    
    public static void RemoveMetaData(UnrealSharp.Engine.AnimationAsset animationAsset, UnrealSharp.Engine.AnimMetaData metaDataObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveMetaData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimationAsset>.ToNative(IntPtr.Add(ParamsBuffer, RemoveMetaData_AnimationAsset_Offset), 0, null, animationAsset);
            ObjectMarshaller<UnrealSharp.Engine.AnimMetaData>.ToNative(IntPtr.Add(ParamsBuffer, RemoveMetaData_MetaDataObject_Offset), 0, null, metaDataObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveMetaData_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:RemoveCurve
    static readonly IntPtr RemoveCurve_NativeFunction;
    static readonly int RemoveCurve_ParamsSize;
    static readonly int RemoveCurve_AnimationSequence_Offset;
    static readonly int RemoveCurve_CurveName_Offset;
    static readonly int RemoveCurve_bRemoveNameFromSkeleton_Offset;
    
    public static void RemoveCurve(UnrealSharp.Engine.AnimSequence animationSequence, Name curveName, bool bRemoveNameFromSkeleton = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveCurve_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, RemoveCurve_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RemoveCurve_CurveName_Offset), 0, null, curveName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, RemoveCurve_bRemoveNameFromSkeleton_Offset), 0, null, bRemoveNameFromSkeleton);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveCurve_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:RemoveBoneAnimation
    static readonly IntPtr RemoveBoneAnimation_NativeFunction;
    static readonly int RemoveBoneAnimation_ParamsSize;
    static readonly int RemoveBoneAnimation_AnimationSequence_Offset;
    static readonly int RemoveBoneAnimation_BoneName_Offset;
    static readonly int RemoveBoneAnimation_bIncludeChildren_Offset;
    static readonly int RemoveBoneAnimation_bFinalize_Offset;
    
    public static void RemoveBoneAnimation(UnrealSharp.Engine.AnimSequence animationSequence, Name boneName, bool bIncludeChildren = true, bool bFinalize = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveBoneAnimation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, RemoveBoneAnimation_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RemoveBoneAnimation_BoneName_Offset), 0, null, boneName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, RemoveBoneAnimation_bIncludeChildren_Offset), 0, null, bIncludeChildren);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, RemoveBoneAnimation_bFinalize_Offset), 0, null, bFinalize);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveBoneAnimation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:RemoveAnimationSyncMarkersByTrack
    static readonly IntPtr RemoveAnimationSyncMarkersByTrack_NativeFunction;
    static readonly int RemoveAnimationSyncMarkersByTrack_ParamsSize;
    static readonly int RemoveAnimationSyncMarkersByTrack_AnimationSequence_Offset;
    static readonly int RemoveAnimationSyncMarkersByTrack_NotifyTrackName_Offset;
    static readonly int RemoveAnimationSyncMarkersByTrack_ReturnValue_Offset;
    
    public static int RemoveAnimationSyncMarkersByTrack(UnrealSharp.Engine.AnimSequence animationSequence, Name notifyTrackName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveAnimationSyncMarkersByTrack_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, RemoveAnimationSyncMarkersByTrack_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RemoveAnimationSyncMarkersByTrack_NotifyTrackName_Offset), 0, null, notifyTrackName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveAnimationSyncMarkersByTrack_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, RemoveAnimationSyncMarkersByTrack_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:RemoveAnimationSyncMarkersByName
    static readonly IntPtr RemoveAnimationSyncMarkersByName_NativeFunction;
    static readonly int RemoveAnimationSyncMarkersByName_ParamsSize;
    static readonly int RemoveAnimationSyncMarkersByName_AnimationSequence_Offset;
    static readonly int RemoveAnimationSyncMarkersByName_MarkerName_Offset;
    static readonly int RemoveAnimationSyncMarkersByName_ReturnValue_Offset;
    
    public static int RemoveAnimationSyncMarkersByName(UnrealSharp.Engine.AnimSequence animationSequence, Name markerName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveAnimationSyncMarkersByName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, RemoveAnimationSyncMarkersByName_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RemoveAnimationSyncMarkersByName_MarkerName_Offset), 0, null, markerName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveAnimationSyncMarkersByName_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, RemoveAnimationSyncMarkersByName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:RemoveAnimationNotifyTrack
    static readonly IntPtr RemoveAnimationNotifyTrack_NativeFunction;
    static readonly int RemoveAnimationNotifyTrack_ParamsSize;
    static readonly int RemoveAnimationNotifyTrack_AnimationSequenceBase_Offset;
    static readonly int RemoveAnimationNotifyTrack_NotifyTrackName_Offset;
    
    public static void RemoveAnimationNotifyTrack(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, Name notifyTrackName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveAnimationNotifyTrack_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, RemoveAnimationNotifyTrack_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RemoveAnimationNotifyTrack_NotifyTrackName_Offset), 0, null, notifyTrackName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveAnimationNotifyTrack_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:RemoveAnimationNotifyEventsByTrack
    static readonly IntPtr RemoveAnimationNotifyEventsByTrack_NativeFunction;
    static readonly int RemoveAnimationNotifyEventsByTrack_ParamsSize;
    static readonly int RemoveAnimationNotifyEventsByTrack_AnimationSequenceBase_Offset;
    static readonly int RemoveAnimationNotifyEventsByTrack_NotifyTrackName_Offset;
    static readonly int RemoveAnimationNotifyEventsByTrack_ReturnValue_Offset;
    
    public static int RemoveAnimationNotifyEventsByTrack(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, Name notifyTrackName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveAnimationNotifyEventsByTrack_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, RemoveAnimationNotifyEventsByTrack_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RemoveAnimationNotifyEventsByTrack_NotifyTrackName_Offset), 0, null, notifyTrackName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveAnimationNotifyEventsByTrack_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, RemoveAnimationNotifyEventsByTrack_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:RemoveAnimationNotifyEventsByName
    static readonly IntPtr RemoveAnimationNotifyEventsByName_NativeFunction;
    static readonly int RemoveAnimationNotifyEventsByName_ParamsSize;
    static readonly int RemoveAnimationNotifyEventsByName_AnimationSequenceBase_Offset;
    static readonly int RemoveAnimationNotifyEventsByName_NotifyName_Offset;
    static readonly int RemoveAnimationNotifyEventsByName_ReturnValue_Offset;
    
    public static int RemoveAnimationNotifyEventsByName(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, Name notifyName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveAnimationNotifyEventsByName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, RemoveAnimationNotifyEventsByName_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RemoveAnimationNotifyEventsByName_NotifyName_Offset), 0, null, notifyName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveAnimationNotifyEventsByName_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, RemoveAnimationNotifyEventsByName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:RemoveAllVirtualBones
    static readonly IntPtr RemoveAllVirtualBones_NativeFunction;
    static readonly int RemoveAllVirtualBones_ParamsSize;
    static readonly int RemoveAllVirtualBones_AnimationSequence_Offset;
    
    public static void RemoveAllVirtualBones(UnrealSharp.Engine.AnimSequence animationSequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveAllVirtualBones_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, RemoveAllVirtualBones_AnimationSequence_Offset), 0, null, animationSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveAllVirtualBones_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:RemoveAllMetaData
    static readonly IntPtr RemoveAllMetaData_NativeFunction;
    static readonly int RemoveAllMetaData_ParamsSize;
    static readonly int RemoveAllMetaData_AnimationAsset_Offset;
    
    public static void RemoveAllMetaData(UnrealSharp.Engine.AnimationAsset animationAsset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveAllMetaData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimationAsset>.ToNative(IntPtr.Add(ParamsBuffer, RemoveAllMetaData_AnimationAsset_Offset), 0, null, animationAsset);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveAllMetaData_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:RemoveAllCurveData
    static readonly IntPtr RemoveAllCurveData_NativeFunction;
    static readonly int RemoveAllCurveData_ParamsSize;
    static readonly int RemoveAllCurveData_AnimationSequence_Offset;
    
    public static void RemoveAllCurveData(UnrealSharp.Engine.AnimSequence animationSequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveAllCurveData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, RemoveAllCurveData_AnimationSequence_Offset), 0, null, animationSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveAllCurveData_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:RemoveAllBoneAnimation
    static readonly IntPtr RemoveAllBoneAnimation_NativeFunction;
    static readonly int RemoveAllBoneAnimation_ParamsSize;
    static readonly int RemoveAllBoneAnimation_AnimationSequence_Offset;
    
    public static void RemoveAllBoneAnimation(UnrealSharp.Engine.AnimSequence animationSequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveAllBoneAnimation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, RemoveAllBoneAnimation_AnimationSequence_Offset), 0, null, animationSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveAllBoneAnimation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:RemoveAllAnimationSyncMarkers
    static readonly IntPtr RemoveAllAnimationSyncMarkers_NativeFunction;
    static readonly int RemoveAllAnimationSyncMarkers_ParamsSize;
    static readonly int RemoveAllAnimationSyncMarkers_AnimationSequence_Offset;
    
    public static void RemoveAllAnimationSyncMarkers(UnrealSharp.Engine.AnimSequence animationSequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveAllAnimationSyncMarkers_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, RemoveAllAnimationSyncMarkers_AnimationSequence_Offset), 0, null, animationSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveAllAnimationSyncMarkers_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:RemoveAllAnimationNotifyTracks
    static readonly IntPtr RemoveAllAnimationNotifyTracks_NativeFunction;
    static readonly int RemoveAllAnimationNotifyTracks_ParamsSize;
    static readonly int RemoveAllAnimationNotifyTracks_AnimationSequenceBase_Offset;
    
    public static void RemoveAllAnimationNotifyTracks(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveAllAnimationNotifyTracks_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, RemoveAllAnimationNotifyTracks_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveAllAnimationNotifyTracks_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:IsValidTime
    static readonly IntPtr IsValidTime_NativeFunction;
    static readonly int IsValidTime_ParamsSize;
    static readonly int IsValidTime_AnimationSequenceBase_Offset;
    static readonly int IsValidTime_Time_Offset;
    static readonly int IsValidTime_IsValid_Offset;
    
    public static void IsValidTime(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, float time, out bool isValid)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValidTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, IsValidTime_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, IsValidTime_Time_Offset), 0, null, time);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsValidTime_NativeFunction, ParamsBuffer);
            
            isValid = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValidTime_IsValid_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:IsValidRawAnimationTrackName
    static readonly IntPtr IsValidRawAnimationTrackName_NativeFunction;
    static readonly int IsValidRawAnimationTrackName_ParamsSize;
    static readonly int IsValidRawAnimationTrackName_AnimationSequenceBase_Offset;
    static readonly int IsValidRawAnimationTrackName_TrackName_Offset;
    static readonly int IsValidRawAnimationTrackName_ReturnValue_Offset;
    
    public static bool IsValidRawAnimationTrackName(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, Name trackName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValidRawAnimationTrackName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, IsValidRawAnimationTrackName_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, IsValidRawAnimationTrackName_TrackName_Offset), 0, null, trackName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsValidRawAnimationTrackName_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValidRawAnimationTrackName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:IsValidAnimNotifyTrackName
    static readonly IntPtr IsValidAnimNotifyTrackName_NativeFunction;
    static readonly int IsValidAnimNotifyTrackName_ParamsSize;
    static readonly int IsValidAnimNotifyTrackName_AnimationSequenceBase_Offset;
    static readonly int IsValidAnimNotifyTrackName_NotifyTrackName_Offset;
    static readonly int IsValidAnimNotifyTrackName_ReturnValue_Offset;
    
    public static bool IsValidAnimNotifyTrackName(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, Name notifyTrackName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValidAnimNotifyTrackName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, IsValidAnimNotifyTrackName_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, IsValidAnimNotifyTrackName_NotifyTrackName_Offset), 0, null, notifyTrackName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsValidAnimNotifyTrackName_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValidAnimNotifyTrackName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:IsValidAnimationSyncMarkerName
    static readonly IntPtr IsValidAnimationSyncMarkerName_NativeFunction;
    static readonly int IsValidAnimationSyncMarkerName_ParamsSize;
    static readonly int IsValidAnimationSyncMarkerName_AnimationSequence_Offset;
    static readonly int IsValidAnimationSyncMarkerName_MarkerName_Offset;
    static readonly int IsValidAnimationSyncMarkerName_ReturnValue_Offset;
    
    public static bool IsValidAnimationSyncMarkerName(UnrealSharp.Engine.AnimSequence animationSequence, Name markerName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValidAnimationSyncMarkerName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, IsValidAnimationSyncMarkerName_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, IsValidAnimationSyncMarkerName_MarkerName_Offset), 0, null, markerName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsValidAnimationSyncMarkerName_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValidAnimationSyncMarkerName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:IsRootMotionLockForced
    static readonly IntPtr IsRootMotionLockForced_NativeFunction;
    static readonly int IsRootMotionLockForced_ParamsSize;
    static readonly int IsRootMotionLockForced_AnimationSequence_Offset;
    static readonly int IsRootMotionLockForced_ReturnValue_Offset;
    
    public static bool IsRootMotionLockForced(UnrealSharp.Engine.AnimSequence animationSequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsRootMotionLockForced_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, IsRootMotionLockForced_AnimationSequence_Offset), 0, null, animationSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsRootMotionLockForced_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsRootMotionLockForced_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:IsRootMotionEnabled
    static readonly IntPtr IsRootMotionEnabled_NativeFunction;
    static readonly int IsRootMotionEnabled_ParamsSize;
    static readonly int IsRootMotionEnabled_AnimationSequence_Offset;
    static readonly int IsRootMotionEnabled_ReturnValue_Offset;
    
    public static bool IsRootMotionEnabled(UnrealSharp.Engine.AnimSequence animationSequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsRootMotionEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, IsRootMotionEnabled_AnimationSequence_Offset), 0, null, animationSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsRootMotionEnabled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsRootMotionEnabled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetVectorKeys
    static readonly IntPtr GetVectorKeys_NativeFunction;
    static readonly int GetVectorKeys_ParamsSize;
    static readonly int GetVectorKeys_AnimationSequence_Offset;
    static readonly int GetVectorKeys_CurveName_Offset;
    static readonly int GetVectorKeys_Times_Offset;
    static readonly int GetVectorKeys_Times_ElementSize;
    static readonly int GetVectorKeys_Values_Offset;
    static readonly int GetVectorKeys_Values_ElementSize;
    
    public static void GetVectorKeys(UnrealSharp.Engine.AnimSequence animationSequence, Name curveName, out System.Collections.Generic.IList<float> times, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> values)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVectorKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetVectorKeys_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetVectorKeys_CurveName_Offset), 0, null, curveName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetVectorKeys_NativeFunction, ParamsBuffer);
            
            IntPtr Times_NativeBuffer = IntPtr.Add(ParamsBuffer, GetVectorKeys_Times_Offset);
            UnrealArrayCopyMarshaler<float> Times_Marshaler = new UnrealArrayCopyMarshaler<float> (1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, GetVectorKeys_Times_ElementSize);
            times = Times_Marshaler.FromNative(Times_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<float>.DestructInstance(Times_NativeBuffer, 0);
            IntPtr Values_NativeBuffer = IntPtr.Add(ParamsBuffer, GetVectorKeys_Values_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Values_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GetVectorKeys_Values_ElementSize);
            values = Values_Marshaler.FromNative(Values_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(Values_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetVariableFrameStrippingSettings
    static readonly IntPtr GetVariableFrameStrippingSettings_NativeFunction;
    static readonly int GetVariableFrameStrippingSettings_ParamsSize;
    static readonly int GetVariableFrameStrippingSettings_AnimationSequence_Offset;
    static readonly int GetVariableFrameStrippingSettings_VariableFrameStrippingSettings_Offset;
    
    public static void GetVariableFrameStrippingSettings(UnrealSharp.Engine.AnimSequence animationSequence, out UnrealSharp.Engine.VariableFrameStrippingSettings variableFrameStrippingSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVariableFrameStrippingSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetVariableFrameStrippingSettings_AnimationSequence_Offset), 0, null, animationSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetVariableFrameStrippingSettings_NativeFunction, ParamsBuffer);
            
            variableFrameStrippingSettings = ObjectMarshaller<UnrealSharp.Engine.VariableFrameStrippingSettings>.FromNative(IntPtr.Add(ParamsBuffer, GetVariableFrameStrippingSettings_VariableFrameStrippingSettings_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetUniqueMarkerNames
    static readonly IntPtr GetUniqueMarkerNames_NativeFunction;
    static readonly int GetUniqueMarkerNames_ParamsSize;
    static readonly int GetUniqueMarkerNames_AnimationSequence_Offset;
    static readonly int GetUniqueMarkerNames_MarkerNames_Offset;
    static readonly int GetUniqueMarkerNames_MarkerNames_ElementSize;
    
    public static void GetUniqueMarkerNames(UnrealSharp.Engine.AnimSequence animationSequence, out System.Collections.Generic.IList<Name> markerNames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetUniqueMarkerNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetUniqueMarkerNames_AnimationSequence_Offset), 0, null, animationSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetUniqueMarkerNames_NativeFunction, ParamsBuffer);
            
            IntPtr MarkerNames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetUniqueMarkerNames_MarkerNames_Offset);
            UnrealArrayCopyMarshaler<Name> MarkerNames_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetUniqueMarkerNames_MarkerNames_ElementSize);
            markerNames = MarkerNames_Marshaler.FromNative(MarkerNames_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(MarkerNames_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetTransformationKeys
    static readonly IntPtr GetTransformationKeys_NativeFunction;
    static readonly int GetTransformationKeys_ParamsSize;
    static readonly int GetTransformationKeys_AnimationSequence_Offset;
    static readonly int GetTransformationKeys_CurveName_Offset;
    static readonly int GetTransformationKeys_Times_Offset;
    static readonly int GetTransformationKeys_Times_ElementSize;
    static readonly int GetTransformationKeys_Values_Offset;
    static readonly int GetTransformationKeys_Values_ElementSize;
    
    public static void GetTransformationKeys(UnrealSharp.Engine.AnimSequence animationSequence, Name curveName, out System.Collections.Generic.IList<float> times, out System.Collections.Generic.IList<UnrealSharp.Transform> values)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTransformationKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetTransformationKeys_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetTransformationKeys_CurveName_Offset), 0, null, curveName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetTransformationKeys_NativeFunction, ParamsBuffer);
            
            IntPtr Times_NativeBuffer = IntPtr.Add(ParamsBuffer, GetTransformationKeys_Times_Offset);
            UnrealArrayCopyMarshaler<float> Times_Marshaler = new UnrealArrayCopyMarshaler<float> (1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, GetTransformationKeys_Times_ElementSize);
            times = Times_Marshaler.FromNative(Times_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<float>.DestructInstance(Times_NativeBuffer, 0);
            IntPtr Values_NativeBuffer = IntPtr.Add(ParamsBuffer, GetTransformationKeys_Values_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform> Values_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Transform> (1, BlittableMarshaller<UnrealSharp.Transform>.ToNative, BlittableMarshaller<UnrealSharp.Transform>.FromNative, GetTransformationKeys_Values_ElementSize);
            values = Values_Marshaler.FromNative(Values_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform>.DestructInstance(Values_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetTimeAtFrame
    static readonly IntPtr GetTimeAtFrame_NativeFunction;
    static readonly int GetTimeAtFrame_ParamsSize;
    static readonly int GetTimeAtFrame_AnimationSequenceBase_Offset;
    static readonly int GetTimeAtFrame_Frame_Offset;
    static readonly int GetTimeAtFrame_Time_Offset;
    
    public static void GetTimeAtFrame(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, int frame, out float time)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTimeAtFrame_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetTimeAtFrame_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetTimeAtFrame_Frame_Offset), 0, null, frame);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetTimeAtFrame_NativeFunction, ParamsBuffer);
            
            time = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetTimeAtFrame_Time_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetSequenceLength
    static readonly IntPtr GetSequenceLength_NativeFunction;
    static readonly int GetSequenceLength_ParamsSize;
    static readonly int GetSequenceLength_AnimationSequenceBase_Offset;
    static readonly int GetSequenceLength_Length_Offset;
    
    public static void GetSequenceLength(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, out float length)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSequenceLength_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetSequenceLength_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSequenceLength_NativeFunction, ParamsBuffer);
            
            length = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetSequenceLength_Length_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetRootMotionLockType
    static readonly IntPtr GetRootMotionLockType_NativeFunction;
    static readonly int GetRootMotionLockType_ParamsSize;
    static readonly int GetRootMotionLockType_AnimationSequence_Offset;
    static readonly int GetRootMotionLockType_LockType_Offset;
    
    public static void GetRootMotionLockType(UnrealSharp.Engine.AnimSequence animationSequence, out UnrealSharp.Engine.ERootMotionRootLock lockType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRootMotionLockType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetRootMotionLockType_AnimationSequence_Offset), 0, null, animationSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetRootMotionLockType_NativeFunction, ParamsBuffer);
            
            lockType = BlittableMarshaller<UnrealSharp.Engine.ERootMotionRootLock>.FromNative(IntPtr.Add(ParamsBuffer, GetRootMotionLockType_LockType_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetRawTrackScaleData
    static readonly IntPtr GetRawTrackScaleData_NativeFunction;
    static readonly int GetRawTrackScaleData_ParamsSize;
    static readonly int GetRawTrackScaleData_AnimationSequenceBase_Offset;
    static readonly int GetRawTrackScaleData_TrackName_Offset;
    static readonly int GetRawTrackScaleData_ScaleData_Offset;
    static readonly int GetRawTrackScaleData_ScaleData_ElementSize;
    
    public static void GetRawTrackScaleData(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, Name trackName, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> scaleData)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRawTrackScaleData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetRawTrackScaleData_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetRawTrackScaleData_TrackName_Offset), 0, null, trackName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetRawTrackScaleData_NativeFunction, ParamsBuffer);
            
            IntPtr ScaleData_NativeBuffer = IntPtr.Add(ParamsBuffer, GetRawTrackScaleData_ScaleData_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> ScaleData_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GetRawTrackScaleData_ScaleData_ElementSize);
            scaleData = ScaleData_Marshaler.FromNative(ScaleData_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(ScaleData_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetRawTrackRotationData
    static readonly IntPtr GetRawTrackRotationData_NativeFunction;
    static readonly int GetRawTrackRotationData_ParamsSize;
    static readonly int GetRawTrackRotationData_AnimationSequenceBase_Offset;
    static readonly int GetRawTrackRotationData_TrackName_Offset;
    static readonly int GetRawTrackRotationData_RotationData_Offset;
    static readonly int GetRawTrackRotationData_RotationData_ElementSize;
    
    public static void GetRawTrackRotationData(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, Name trackName, out System.Collections.Generic.IList<System.DoubleNumerics.Quaternion> rotationData)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRawTrackRotationData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetRawTrackRotationData_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetRawTrackRotationData_TrackName_Offset), 0, null, trackName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetRawTrackRotationData_NativeFunction, ParamsBuffer);
            
            IntPtr RotationData_NativeBuffer = IntPtr.Add(ParamsBuffer, GetRawTrackRotationData_RotationData_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Quaternion> RotationData_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Quaternion> (1, BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative, BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative, GetRawTrackRotationData_RotationData_ElementSize);
            rotationData = RotationData_Marshaler.FromNative(RotationData_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Quaternion>.DestructInstance(RotationData_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetRawTrackPositionData
    static readonly IntPtr GetRawTrackPositionData_NativeFunction;
    static readonly int GetRawTrackPositionData_ParamsSize;
    static readonly int GetRawTrackPositionData_AnimationSequenceBase_Offset;
    static readonly int GetRawTrackPositionData_TrackName_Offset;
    static readonly int GetRawTrackPositionData_PositionData_Offset;
    static readonly int GetRawTrackPositionData_PositionData_ElementSize;
    
    public static void GetRawTrackPositionData(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, Name trackName, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> positionData)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRawTrackPositionData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetRawTrackPositionData_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetRawTrackPositionData_TrackName_Offset), 0, null, trackName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetRawTrackPositionData_NativeFunction, ParamsBuffer);
            
            IntPtr PositionData_NativeBuffer = IntPtr.Add(ParamsBuffer, GetRawTrackPositionData_PositionData_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> PositionData_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GetRawTrackPositionData_PositionData_ElementSize);
            positionData = PositionData_Marshaler.FromNative(PositionData_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(PositionData_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetRawTrackData
    static readonly IntPtr GetRawTrackData_NativeFunction;
    static readonly int GetRawTrackData_ParamsSize;
    static readonly int GetRawTrackData_AnimationSequenceBase_Offset;
    static readonly int GetRawTrackData_TrackName_Offset;
    static readonly int GetRawTrackData_PositionKeys_Offset;
    static readonly int GetRawTrackData_PositionKeys_ElementSize;
    static readonly int GetRawTrackData_RotationKeys_Offset;
    static readonly int GetRawTrackData_RotationKeys_ElementSize;
    static readonly int GetRawTrackData_ScalingKeys_Offset;
    static readonly int GetRawTrackData_ScalingKeys_ElementSize;
    
    public static void GetRawTrackData(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, Name trackName, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> positionKeys, out System.Collections.Generic.IList<System.DoubleNumerics.Quaternion> rotationKeys, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> scalingKeys)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRawTrackData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetRawTrackData_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetRawTrackData_TrackName_Offset), 0, null, trackName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetRawTrackData_NativeFunction, ParamsBuffer);
            
            IntPtr PositionKeys_NativeBuffer = IntPtr.Add(ParamsBuffer, GetRawTrackData_PositionKeys_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> PositionKeys_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GetRawTrackData_PositionKeys_ElementSize);
            positionKeys = PositionKeys_Marshaler.FromNative(PositionKeys_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(PositionKeys_NativeBuffer, 0);
            IntPtr RotationKeys_NativeBuffer = IntPtr.Add(ParamsBuffer, GetRawTrackData_RotationKeys_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Quaternion> RotationKeys_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Quaternion> (1, BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative, BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative, GetRawTrackData_RotationKeys_ElementSize);
            rotationKeys = RotationKeys_Marshaler.FromNative(RotationKeys_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Quaternion>.DestructInstance(RotationKeys_NativeBuffer, 0);
            IntPtr ScalingKeys_NativeBuffer = IntPtr.Add(ParamsBuffer, GetRawTrackData_ScalingKeys_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> ScalingKeys_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GetRawTrackData_ScalingKeys_ElementSize);
            scalingKeys = ScalingKeys_Marshaler.FromNative(ScalingKeys_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(ScalingKeys_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetRateScale
    static readonly IntPtr GetRateScale_NativeFunction;
    static readonly int GetRateScale_ParamsSize;
    static readonly int GetRateScale_AnimationSequenceBase_Offset;
    static readonly int GetRateScale_RateScale_Offset;
    
    public static void GetRateScale(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, out float rateScale)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRateScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetRateScale_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetRateScale_NativeFunction, ParamsBuffer);
            
            rateScale = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetRateScale_RateScale_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetNumKeys
    static readonly IntPtr GetNumKeys_NativeFunction;
    static readonly int GetNumKeys_ParamsSize;
    static readonly int GetNumKeys_AnimationSequenceBase_Offset;
    static readonly int GetNumKeys_NumKeys_Offset;
    
    public static void GetNumKeys(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, out int numKeys)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetNumKeys_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetNumKeys_NativeFunction, ParamsBuffer);
            
            numKeys = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumKeys_NumKeys_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetNumFrames
    static readonly IntPtr GetNumFrames_NativeFunction;
    static readonly int GetNumFrames_ParamsSize;
    static readonly int GetNumFrames_AnimationSequenceBase_Offset;
    static readonly int GetNumFrames_NumFrames_Offset;
    
    public static void GetNumFrames(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, out int numFrames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumFrames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetNumFrames_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetNumFrames_NativeFunction, ParamsBuffer);
            
            numFrames = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumFrames_NumFrames_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetNodesOfClass
    static readonly IntPtr GetNodesOfClass_NativeFunction;
    static readonly int GetNodesOfClass_ParamsSize;
    static readonly int GetNodesOfClass_AnimationBlueprint_Offset;
    static readonly int GetNodesOfClass_NodeClass_Offset;
    static readonly int GetNodesOfClass_GraphNodes_Offset;
    static readonly int GetNodesOfClass_GraphNodes_ElementSize;
    static readonly int GetNodesOfClass_bIncludeChildClasses_Offset;
    
    public static void GetNodesOfClass(UnrealSharp.Engine.AnimBlueprint animationBlueprint, SubclassOf<UnrealSharp.AnimGraph.AnimGraphNode_Base> nodeClass, out System.Collections.Generic.IList<UnrealSharp.AnimGraph.AnimGraphNode_Base> graphNodes, bool bIncludeChildClasses = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNodesOfClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimBlueprint>.ToNative(IntPtr.Add(ParamsBuffer, GetNodesOfClass_AnimationBlueprint_Offset), 0, null, animationBlueprint);
            SubclassOfMarshaller<UnrealSharp.AnimGraph.AnimGraphNode_Base>.ToNative(IntPtr.Add(ParamsBuffer, GetNodesOfClass_NodeClass_Offset), 0, null, nodeClass);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetNodesOfClass_bIncludeChildClasses_Offset), 0, null, bIncludeChildClasses);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetNodesOfClass_NativeFunction, ParamsBuffer);
            
            IntPtr GraphNodes_NativeBuffer = IntPtr.Add(ParamsBuffer, GetNodesOfClass_GraphNodes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.AnimGraph.AnimGraphNode_Base> GraphNodes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.AnimGraph.AnimGraphNode_Base> (1, ObjectMarshaller<UnrealSharp.AnimGraph.AnimGraphNode_Base>.ToNative, ObjectMarshaller<UnrealSharp.AnimGraph.AnimGraphNode_Base>.FromNative, GetNodesOfClass_GraphNodes_ElementSize);
            graphNodes = GraphNodes_Marshaler.FromNative(GraphNodes_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.AnimGraph.AnimGraphNode_Base>.DestructInstance(GraphNodes_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetMontageSlotNames
    static readonly IntPtr GetMontageSlotNames_NativeFunction;
    static readonly int GetMontageSlotNames_ParamsSize;
    static readonly int GetMontageSlotNames_AnimationMontage_Offset;
    static readonly int GetMontageSlotNames_SlotNames_Offset;
    static readonly int GetMontageSlotNames_SlotNames_ElementSize;
    
    public static void GetMontageSlotNames(UnrealSharp.Engine.AnimMontage animationMontage, out System.Collections.Generic.IList<Name> slotNames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMontageSlotNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, GetMontageSlotNames_AnimationMontage_Offset), 0, null, animationMontage);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMontageSlotNames_NativeFunction, ParamsBuffer);
            
            IntPtr SlotNames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetMontageSlotNames_SlotNames_Offset);
            UnrealArrayCopyMarshaler<Name> SlotNames_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetMontageSlotNames_SlotNames_ElementSize);
            slotNames = SlotNames_Marshaler.FromNative(SlotNames_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(SlotNames_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetMetaDataOfClass
    static readonly IntPtr GetMetaDataOfClass_NativeFunction;
    static readonly int GetMetaDataOfClass_ParamsSize;
    static readonly int GetMetaDataOfClass_AnimationAsset_Offset;
    static readonly int GetMetaDataOfClass_MetaDataClass_Offset;
    static readonly int GetMetaDataOfClass_MetaDataOfClass_Offset;
    static readonly int GetMetaDataOfClass_MetaDataOfClass_ElementSize;
    
    public static void GetMetaDataOfClass(UnrealSharp.Engine.AnimationAsset animationAsset, SubclassOf<UnrealSharp.Engine.AnimMetaData> metaDataClass, out System.Collections.Generic.IList<UnrealSharp.Engine.AnimMetaData> metaDataOfClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMetaDataOfClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimationAsset>.ToNative(IntPtr.Add(ParamsBuffer, GetMetaDataOfClass_AnimationAsset_Offset), 0, null, animationAsset);
            SubclassOfMarshaller<UnrealSharp.Engine.AnimMetaData>.ToNative(IntPtr.Add(ParamsBuffer, GetMetaDataOfClass_MetaDataClass_Offset), 0, null, metaDataClass);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMetaDataOfClass_NativeFunction, ParamsBuffer);
            
            IntPtr MetaDataOfClass_NativeBuffer = IntPtr.Add(ParamsBuffer, GetMetaDataOfClass_MetaDataOfClass_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimMetaData> MetaDataOfClass_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimMetaData> (1, ObjectMarshaller<UnrealSharp.Engine.AnimMetaData>.ToNative, ObjectMarshaller<UnrealSharp.Engine.AnimMetaData>.FromNative, GetMetaDataOfClass_MetaDataOfClass_ElementSize);
            metaDataOfClass = MetaDataOfClass_Marshaler.FromNative(MetaDataOfClass_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimMetaData>.DestructInstance(MetaDataOfClass_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetMetaData
    static readonly IntPtr GetMetaData_NativeFunction;
    static readonly int GetMetaData_ParamsSize;
    static readonly int GetMetaData_AnimationAsset_Offset;
    static readonly int GetMetaData_MetaData_Offset;
    static readonly int GetMetaData_MetaData_ElementSize;
    
    public static void GetMetaData(UnrealSharp.Engine.AnimationAsset animationAsset, out System.Collections.Generic.IList<UnrealSharp.Engine.AnimMetaData> metaData)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMetaData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimationAsset>.ToNative(IntPtr.Add(ParamsBuffer, GetMetaData_AnimationAsset_Offset), 0, null, animationAsset);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMetaData_NativeFunction, ParamsBuffer);
            
            IntPtr MetaData_NativeBuffer = IntPtr.Add(ParamsBuffer, GetMetaData_MetaData_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimMetaData> MetaData_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimMetaData> (1, ObjectMarshaller<UnrealSharp.Engine.AnimMetaData>.ToNative, ObjectMarshaller<UnrealSharp.Engine.AnimMetaData>.FromNative, GetMetaData_MetaData_ElementSize);
            metaData = MetaData_Marshaler.FromNative(MetaData_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimMetaData>.DestructInstance(MetaData_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetFrameAtTime
    static readonly IntPtr GetFrameAtTime_NativeFunction;
    static readonly int GetFrameAtTime_ParamsSize;
    static readonly int GetFrameAtTime_AnimationSequenceBase_Offset;
    static readonly int GetFrameAtTime_Time_Offset;
    static readonly int GetFrameAtTime_Frame_Offset;
    
    public static void GetFrameAtTime(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, float time, out int frame)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFrameAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetFrameAtTime_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetFrameAtTime_Time_Offset), 0, null, time);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetFrameAtTime_NativeFunction, ParamsBuffer);
            
            frame = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetFrameAtTime_Frame_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetFloatKeys
    static readonly IntPtr GetFloatKeys_NativeFunction;
    static readonly int GetFloatKeys_ParamsSize;
    static readonly int GetFloatKeys_AnimationSequence_Offset;
    static readonly int GetFloatKeys_CurveName_Offset;
    static readonly int GetFloatKeys_Times_Offset;
    static readonly int GetFloatKeys_Times_ElementSize;
    static readonly int GetFloatKeys_Values_Offset;
    static readonly int GetFloatKeys_Values_ElementSize;
    
    public static void GetFloatKeys(UnrealSharp.Engine.AnimSequence animationSequence, Name curveName, out System.Collections.Generic.IList<float> times, out System.Collections.Generic.IList<float> values)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFloatKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetFloatKeys_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetFloatKeys_CurveName_Offset), 0, null, curveName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetFloatKeys_NativeFunction, ParamsBuffer);
            
            IntPtr Times_NativeBuffer = IntPtr.Add(ParamsBuffer, GetFloatKeys_Times_Offset);
            UnrealArrayCopyMarshaler<float> Times_Marshaler = new UnrealArrayCopyMarshaler<float> (1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, GetFloatKeys_Times_ElementSize);
            times = Times_Marshaler.FromNative(Times_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<float>.DestructInstance(Times_NativeBuffer, 0);
            IntPtr Values_NativeBuffer = IntPtr.Add(ParamsBuffer, GetFloatKeys_Values_Offset);
            UnrealArrayCopyMarshaler<float> Values_Marshaler = new UnrealArrayCopyMarshaler<float> (1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, GetFloatKeys_Values_ElementSize);
            values = Values_Marshaler.FromNative(Values_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<float>.DestructInstance(Values_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetCurveCompressionSettings
    static readonly IntPtr GetCurveCompressionSettings_NativeFunction;
    static readonly int GetCurveCompressionSettings_ParamsSize;
    static readonly int GetCurveCompressionSettings_AnimationSequence_Offset;
    static readonly int GetCurveCompressionSettings_CompressionSettings_Offset;
    
    public static void GetCurveCompressionSettings(UnrealSharp.Engine.AnimSequence animationSequence, out UnrealSharp.Engine.AnimCurveCompressionSettings compressionSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurveCompressionSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetCurveCompressionSettings_AnimationSequence_Offset), 0, null, animationSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetCurveCompressionSettings_NativeFunction, ParamsBuffer);
            
            compressionSettings = ObjectMarshaller<UnrealSharp.Engine.AnimCurveCompressionSettings>.FromNative(IntPtr.Add(ParamsBuffer, GetCurveCompressionSettings_CompressionSettings_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetBonePosesForTime
    static readonly IntPtr GetBonePosesForTime_NativeFunction;
    static readonly int GetBonePosesForTime_ParamsSize;
    static readonly int GetBonePosesForTime_AnimationSequenceBase_Offset;
    static readonly int GetBonePosesForTime_BoneNames_Offset;
    static readonly int GetBonePosesForTime_BoneNames_ElementSize;
    static readonly int GetBonePosesForTime_Time_Offset;
    static readonly int GetBonePosesForTime_bExtractRootMotion_Offset;
    static readonly int GetBonePosesForTime_Poses_Offset;
    static readonly int GetBonePosesForTime_Poses_ElementSize;
    static readonly int GetBonePosesForTime_PreviewMesh_Offset;
    
    public static void GetBonePosesForTime(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, System.Collections.Generic.IList<Name> boneNames, float time, bool bExtractRootMotion, out System.Collections.Generic.IList<UnrealSharp.Transform> poses, UnrealSharp.Engine.SkeletalMesh previewMesh = default(UnrealSharp.Engine.SkeletalMesh))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBonePosesForTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetBonePosesForTime_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            IntPtr BoneNames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetBonePosesForTime_BoneNames_Offset);
            UnrealArrayCopyMarshaler<Name> BoneNames_Marshaler = new UnrealArrayCopyMarshaler<Name>(1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetBonePosesForTime_BoneNames_ElementSize);
            BoneNames_Marshaler.ToNative(BoneNames_NativeBuffer, 0, null, boneNames);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetBonePosesForTime_Time_Offset), 0, null, time);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetBonePosesForTime_bExtractRootMotion_Offset), 0, null, bExtractRootMotion);
            ObjectMarshaller<UnrealSharp.Engine.SkeletalMesh>.ToNative(IntPtr.Add(ParamsBuffer, GetBonePosesForTime_PreviewMesh_Offset), 0, null, previewMesh);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetBonePosesForTime_NativeFunction, ParamsBuffer);
            
            IntPtr Poses_NativeBuffer = IntPtr.Add(ParamsBuffer, GetBonePosesForTime_Poses_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform> Poses_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Transform> (1, BlittableMarshaller<UnrealSharp.Transform>.ToNative, BlittableMarshaller<UnrealSharp.Transform>.FromNative, GetBonePosesForTime_Poses_ElementSize);
            poses = Poses_Marshaler.FromNative(Poses_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform>.DestructInstance(Poses_NativeBuffer, 0);
            
            UnrealArrayCopyMarshaler<Name>.DestructInstance(BoneNames_NativeBuffer, 0);
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetBonePosesForFrame
    static readonly IntPtr GetBonePosesForFrame_NativeFunction;
    static readonly int GetBonePosesForFrame_ParamsSize;
    static readonly int GetBonePosesForFrame_AnimationSequenceBase_Offset;
    static readonly int GetBonePosesForFrame_BoneNames_Offset;
    static readonly int GetBonePosesForFrame_BoneNames_ElementSize;
    static readonly int GetBonePosesForFrame_Frame_Offset;
    static readonly int GetBonePosesForFrame_bExtractRootMotion_Offset;
    static readonly int GetBonePosesForFrame_Poses_Offset;
    static readonly int GetBonePosesForFrame_Poses_ElementSize;
    static readonly int GetBonePosesForFrame_PreviewMesh_Offset;
    
    public static void GetBonePosesForFrame(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, System.Collections.Generic.IList<Name> boneNames, int frame, bool bExtractRootMotion, out System.Collections.Generic.IList<UnrealSharp.Transform> poses, UnrealSharp.Engine.SkeletalMesh previewMesh = default(UnrealSharp.Engine.SkeletalMesh))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBonePosesForFrame_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetBonePosesForFrame_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            IntPtr BoneNames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetBonePosesForFrame_BoneNames_Offset);
            UnrealArrayCopyMarshaler<Name> BoneNames_Marshaler = new UnrealArrayCopyMarshaler<Name>(1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetBonePosesForFrame_BoneNames_ElementSize);
            BoneNames_Marshaler.ToNative(BoneNames_NativeBuffer, 0, null, boneNames);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetBonePosesForFrame_Frame_Offset), 0, null, frame);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetBonePosesForFrame_bExtractRootMotion_Offset), 0, null, bExtractRootMotion);
            ObjectMarshaller<UnrealSharp.Engine.SkeletalMesh>.ToNative(IntPtr.Add(ParamsBuffer, GetBonePosesForFrame_PreviewMesh_Offset), 0, null, previewMesh);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetBonePosesForFrame_NativeFunction, ParamsBuffer);
            
            IntPtr Poses_NativeBuffer = IntPtr.Add(ParamsBuffer, GetBonePosesForFrame_Poses_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform> Poses_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Transform> (1, BlittableMarshaller<UnrealSharp.Transform>.ToNative, BlittableMarshaller<UnrealSharp.Transform>.FromNative, GetBonePosesForFrame_Poses_ElementSize);
            poses = Poses_Marshaler.FromNative(Poses_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform>.DestructInstance(Poses_NativeBuffer, 0);
            
            UnrealArrayCopyMarshaler<Name>.DestructInstance(BoneNames_NativeBuffer, 0);
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetBonePoseForTime
    static readonly IntPtr GetBonePoseForTime_NativeFunction;
    static readonly int GetBonePoseForTime_ParamsSize;
    static readonly int GetBonePoseForTime_AnimationSequenceBase_Offset;
    static readonly int GetBonePoseForTime_BoneName_Offset;
    static readonly int GetBonePoseForTime_Time_Offset;
    static readonly int GetBonePoseForTime_bExtractRootMotion_Offset;
    static readonly int GetBonePoseForTime_Pose_Offset;
    
    public static void GetBonePoseForTime(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, Name boneName, float time, bool bExtractRootMotion, out UnrealSharp.Transform pose)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBonePoseForTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetBonePoseForTime_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetBonePoseForTime_BoneName_Offset), 0, null, boneName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetBonePoseForTime_Time_Offset), 0, null, time);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetBonePoseForTime_bExtractRootMotion_Offset), 0, null, bExtractRootMotion);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetBonePoseForTime_NativeFunction, ParamsBuffer);
            
            pose = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetBonePoseForTime_Pose_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetBonePoseForFrame
    static readonly IntPtr GetBonePoseForFrame_NativeFunction;
    static readonly int GetBonePoseForFrame_ParamsSize;
    static readonly int GetBonePoseForFrame_AnimationSequenceBase_Offset;
    static readonly int GetBonePoseForFrame_BoneName_Offset;
    static readonly int GetBonePoseForFrame_Frame_Offset;
    static readonly int GetBonePoseForFrame_bExtractRootMotion_Offset;
    static readonly int GetBonePoseForFrame_Pose_Offset;
    
    public static void GetBonePoseForFrame(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, Name boneName, int frame, bool bExtractRootMotion, out UnrealSharp.Transform pose)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBonePoseForFrame_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetBonePoseForFrame_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetBonePoseForFrame_BoneName_Offset), 0, null, boneName);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetBonePoseForFrame_Frame_Offset), 0, null, frame);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetBonePoseForFrame_bExtractRootMotion_Offset), 0, null, bExtractRootMotion);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetBonePoseForFrame_NativeFunction, ParamsBuffer);
            
            pose = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetBonePoseForFrame_Pose_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetBoneCompressionSettings
    static readonly IntPtr GetBoneCompressionSettings_NativeFunction;
    static readonly int GetBoneCompressionSettings_ParamsSize;
    static readonly int GetBoneCompressionSettings_AnimationSequence_Offset;
    static readonly int GetBoneCompressionSettings_CompressionSettings_Offset;
    
    public static void GetBoneCompressionSettings(UnrealSharp.Engine.AnimSequence animationSequence, out UnrealSharp.Engine.AnimBoneCompressionSettings compressionSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBoneCompressionSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetBoneCompressionSettings_AnimationSequence_Offset), 0, null, animationSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetBoneCompressionSettings_NativeFunction, ParamsBuffer);
            
            compressionSettings = ObjectMarshaller<UnrealSharp.Engine.AnimBoneCompressionSettings>.FromNative(IntPtr.Add(ParamsBuffer, GetBoneCompressionSettings_CompressionSettings_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetAnimNotifyEventTriggerTime
    static readonly IntPtr GetAnimNotifyEventTriggerTime_NativeFunction;
    static readonly int GetAnimNotifyEventTriggerTime_ParamsSize;
    static readonly int GetAnimNotifyEventTriggerTime_NotifyEvent_Offset;
    static readonly int GetAnimNotifyEventTriggerTime_ReturnValue_Offset;
    
    public static float GetAnimNotifyEventTriggerTime(UnrealSharp.Engine.AnimNotifyEvent notifyEvent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnimNotifyEventTriggerTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimNotifyEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetAnimNotifyEventTriggerTime_NotifyEvent_Offset), 0, null, notifyEvent);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAnimNotifyEventTriggerTime_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetAnimNotifyEventTriggerTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetAnimNotifyEventDuration
    static readonly IntPtr GetAnimNotifyEventDuration_NativeFunction;
    static readonly int GetAnimNotifyEventDuration_ParamsSize;
    static readonly int GetAnimNotifyEventDuration_NotifyEvent_Offset;
    static readonly int GetAnimNotifyEventDuration_ReturnValue_Offset;
    
    public static float GetAnimNotifyEventDuration(UnrealSharp.Engine.AnimNotifyEvent notifyEvent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnimNotifyEventDuration_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimNotifyEventMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetAnimNotifyEventDuration_NotifyEvent_Offset), 0, null, notifyEvent);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAnimNotifyEventDuration_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetAnimNotifyEventDuration_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetAnimationTrackNames
    static readonly IntPtr GetAnimationTrackNames_NativeFunction;
    static readonly int GetAnimationTrackNames_ParamsSize;
    static readonly int GetAnimationTrackNames_AnimationSequenceBase_Offset;
    static readonly int GetAnimationTrackNames_TrackNames_Offset;
    static readonly int GetAnimationTrackNames_TrackNames_ElementSize;
    
    public static void GetAnimationTrackNames(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, out System.Collections.Generic.IList<Name> trackNames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnimationTrackNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetAnimationTrackNames_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAnimationTrackNames_NativeFunction, ParamsBuffer);
            
            IntPtr TrackNames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAnimationTrackNames_TrackNames_Offset);
            UnrealArrayCopyMarshaler<Name> TrackNames_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetAnimationTrackNames_TrackNames_ElementSize);
            trackNames = TrackNames_Marshaler.FromNative(TrackNames_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(TrackNames_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetAnimationSyncMarkersForTrack
    static readonly IntPtr GetAnimationSyncMarkersForTrack_NativeFunction;
    static readonly int GetAnimationSyncMarkersForTrack_ParamsSize;
    static readonly int GetAnimationSyncMarkersForTrack_AnimationSequence_Offset;
    static readonly int GetAnimationSyncMarkersForTrack_NotifyTrackName_Offset;
    static readonly int GetAnimationSyncMarkersForTrack_Markers_Offset;
    static readonly int GetAnimationSyncMarkersForTrack_Markers_ElementSize;
    
    public static void GetAnimationSyncMarkersForTrack(UnrealSharp.Engine.AnimSequence animationSequence, Name notifyTrackName, out System.Collections.Generic.IList<UnrealSharp.Engine.AnimSyncMarker> markers)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnimationSyncMarkersForTrack_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetAnimationSyncMarkersForTrack_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetAnimationSyncMarkersForTrack_NotifyTrackName_Offset), 0, null, notifyTrackName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAnimationSyncMarkersForTrack_NativeFunction, ParamsBuffer);
            
            IntPtr Markers_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAnimationSyncMarkersForTrack_Markers_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimSyncMarker> Markers_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimSyncMarker> (1, UnrealSharp.Engine.AnimSyncMarkerMarshaler.ToNative, UnrealSharp.Engine.AnimSyncMarkerMarshaler.FromNative, GetAnimationSyncMarkersForTrack_Markers_ElementSize);
            markers = Markers_Marshaler.FromNative(Markers_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimSyncMarker>.DestructInstance(Markers_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetAnimationSyncMarkers
    static readonly IntPtr GetAnimationSyncMarkers_NativeFunction;
    static readonly int GetAnimationSyncMarkers_ParamsSize;
    static readonly int GetAnimationSyncMarkers_AnimationSequence_Offset;
    static readonly int GetAnimationSyncMarkers_Markers_Offset;
    static readonly int GetAnimationSyncMarkers_Markers_ElementSize;
    
    public static void GetAnimationSyncMarkers(UnrealSharp.Engine.AnimSequence animationSequence, out System.Collections.Generic.IList<UnrealSharp.Engine.AnimSyncMarker> markers)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnimationSyncMarkers_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetAnimationSyncMarkers_AnimationSequence_Offset), 0, null, animationSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAnimationSyncMarkers_NativeFunction, ParamsBuffer);
            
            IntPtr Markers_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAnimationSyncMarkers_Markers_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimSyncMarker> Markers_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimSyncMarker> (1, UnrealSharp.Engine.AnimSyncMarkerMarshaler.ToNative, UnrealSharp.Engine.AnimSyncMarkerMarshaler.FromNative, GetAnimationSyncMarkers_Markers_ElementSize);
            markers = Markers_Marshaler.FromNative(Markers_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimSyncMarker>.DestructInstance(Markers_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetAnimationNotifyTrackNames
    static readonly IntPtr GetAnimationNotifyTrackNames_NativeFunction;
    static readonly int GetAnimationNotifyTrackNames_ParamsSize;
    static readonly int GetAnimationNotifyTrackNames_AnimationSequenceBase_Offset;
    static readonly int GetAnimationNotifyTrackNames_TrackNames_Offset;
    static readonly int GetAnimationNotifyTrackNames_TrackNames_ElementSize;
    
    public static void GetAnimationNotifyTrackNames(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, out System.Collections.Generic.IList<Name> trackNames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnimationNotifyTrackNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetAnimationNotifyTrackNames_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAnimationNotifyTrackNames_NativeFunction, ParamsBuffer);
            
            IntPtr TrackNames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAnimationNotifyTrackNames_TrackNames_Offset);
            UnrealArrayCopyMarshaler<Name> TrackNames_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetAnimationNotifyTrackNames_TrackNames_ElementSize);
            trackNames = TrackNames_Marshaler.FromNative(TrackNames_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(TrackNames_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetAnimationNotifyEventsForTrack
    static readonly IntPtr GetAnimationNotifyEventsForTrack_NativeFunction;
    static readonly int GetAnimationNotifyEventsForTrack_ParamsSize;
    static readonly int GetAnimationNotifyEventsForTrack_AnimationSequenceBase_Offset;
    static readonly int GetAnimationNotifyEventsForTrack_NotifyTrackName_Offset;
    static readonly int GetAnimationNotifyEventsForTrack_Events_Offset;
    static readonly int GetAnimationNotifyEventsForTrack_Events_ElementSize;
    
    public static void GetAnimationNotifyEventsForTrack(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, Name notifyTrackName, out System.Collections.Generic.IList<UnrealSharp.Engine.AnimNotifyEvent> events)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnimationNotifyEventsForTrack_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetAnimationNotifyEventsForTrack_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetAnimationNotifyEventsForTrack_NotifyTrackName_Offset), 0, null, notifyTrackName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAnimationNotifyEventsForTrack_NativeFunction, ParamsBuffer);
            
            IntPtr Events_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAnimationNotifyEventsForTrack_Events_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimNotifyEvent> Events_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimNotifyEvent> (1, UnrealSharp.Engine.AnimNotifyEventMarshaler.ToNative, UnrealSharp.Engine.AnimNotifyEventMarshaler.FromNative, GetAnimationNotifyEventsForTrack_Events_ElementSize);
            events = Events_Marshaler.FromNative(Events_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimNotifyEvent>.DestructInstance(Events_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetAnimationNotifyEvents
    static readonly IntPtr GetAnimationNotifyEvents_NativeFunction;
    static readonly int GetAnimationNotifyEvents_ParamsSize;
    static readonly int GetAnimationNotifyEvents_AnimationSequenceBase_Offset;
    static readonly int GetAnimationNotifyEvents_NotifyEvents_Offset;
    static readonly int GetAnimationNotifyEvents_NotifyEvents_ElementSize;
    
    public static void GetAnimationNotifyEvents(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, out System.Collections.Generic.IList<UnrealSharp.Engine.AnimNotifyEvent> notifyEvents)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnimationNotifyEvents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetAnimationNotifyEvents_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAnimationNotifyEvents_NativeFunction, ParamsBuffer);
            
            IntPtr NotifyEvents_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAnimationNotifyEvents_NotifyEvents_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimNotifyEvent> NotifyEvents_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimNotifyEvent> (1, UnrealSharp.Engine.AnimNotifyEventMarshaler.ToNative, UnrealSharp.Engine.AnimNotifyEventMarshaler.FromNative, GetAnimationNotifyEvents_NotifyEvents_ElementSize);
            notifyEvents = NotifyEvents_Marshaler.FromNative(NotifyEvents_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimNotifyEvent>.DestructInstance(NotifyEvents_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetAnimationNotifyEventNames
    static readonly IntPtr GetAnimationNotifyEventNames_NativeFunction;
    static readonly int GetAnimationNotifyEventNames_ParamsSize;
    static readonly int GetAnimationNotifyEventNames_AnimationSequenceBase_Offset;
    static readonly int GetAnimationNotifyEventNames_EventNames_Offset;
    static readonly int GetAnimationNotifyEventNames_EventNames_ElementSize;
    
    public static void GetAnimationNotifyEventNames(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, out System.Collections.Generic.IList<Name> eventNames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnimationNotifyEventNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, GetAnimationNotifyEventNames_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAnimationNotifyEventNames_NativeFunction, ParamsBuffer);
            
            IntPtr EventNames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAnimationNotifyEventNames_EventNames_Offset);
            UnrealArrayCopyMarshaler<Name> EventNames_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetAnimationNotifyEventNames_EventNames_ElementSize);
            eventNames = EventNames_Marshaler.FromNative(EventNames_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(EventNames_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetAnimationInterpolationType
    static readonly IntPtr GetAnimationInterpolationType_NativeFunction;
    static readonly int GetAnimationInterpolationType_ParamsSize;
    static readonly int GetAnimationInterpolationType_AnimationSequence_Offset;
    static readonly int GetAnimationInterpolationType_InterpolationType_Offset;
    
    public static void GetAnimationInterpolationType(UnrealSharp.Engine.AnimSequence animationSequence, out UnrealSharp.Engine.EAnimInterpolationType interpolationType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnimationInterpolationType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetAnimationInterpolationType_AnimationSequence_Offset), 0, null, animationSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAnimationInterpolationType_NativeFunction, ParamsBuffer);
            
            interpolationType = BlittableMarshaller<UnrealSharp.Engine.EAnimInterpolationType>.FromNative(IntPtr.Add(ParamsBuffer, GetAnimationInterpolationType_InterpolationType_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetAnimationGraphs
    static readonly IntPtr GetAnimationGraphs_NativeFunction;
    static readonly int GetAnimationGraphs_ParamsSize;
    static readonly int GetAnimationGraphs_AnimationBlueprint_Offset;
    static readonly int GetAnimationGraphs_AnimationGraphs_Offset;
    static readonly int GetAnimationGraphs_AnimationGraphs_ElementSize;
    
    public static void GetAnimationGraphs(UnrealSharp.Engine.AnimBlueprint animationBlueprint, out System.Collections.Generic.IList<UnrealSharp.AnimGraph.AnimationGraph> animationGraphs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnimationGraphs_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimBlueprint>.ToNative(IntPtr.Add(ParamsBuffer, GetAnimationGraphs_AnimationBlueprint_Offset), 0, null, animationBlueprint);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAnimationGraphs_NativeFunction, ParamsBuffer);
            
            IntPtr AnimationGraphs_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAnimationGraphs_AnimationGraphs_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.AnimGraph.AnimationGraph> AnimationGraphs_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.AnimGraph.AnimationGraph> (1, ObjectMarshaller<UnrealSharp.AnimGraph.AnimationGraph>.ToNative, ObjectMarshaller<UnrealSharp.AnimGraph.AnimationGraph>.FromNative, GetAnimationGraphs_AnimationGraphs_ElementSize);
            animationGraphs = AnimationGraphs_Marshaler.FromNative(AnimationGraphs_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.AnimGraph.AnimationGraph>.DestructInstance(AnimationGraphs_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetAnimationCurveNames
    static readonly IntPtr GetAnimationCurveNames_NativeFunction;
    static readonly int GetAnimationCurveNames_ParamsSize;
    static readonly int GetAnimationCurveNames_AnimationSequence_Offset;
    static readonly int GetAnimationCurveNames_CurveType_Offset;
    static readonly int GetAnimationCurveNames_CurveNames_Offset;
    static readonly int GetAnimationCurveNames_CurveNames_ElementSize;
    
    public static void GetAnimationCurveNames(UnrealSharp.Engine.AnimSequence animationSequence, UnrealSharp.Engine.ERawCurveTrackTypes curveType, out System.Collections.Generic.IList<Name> curveNames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnimationCurveNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetAnimationCurveNames_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<UnrealSharp.Engine.ERawCurveTrackTypes>.ToNative(IntPtr.Add(ParamsBuffer, GetAnimationCurveNames_CurveType_Offset), 0, null, curveType);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAnimationCurveNames_NativeFunction, ParamsBuffer);
            
            IntPtr CurveNames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAnimationCurveNames_CurveNames_Offset);
            UnrealArrayCopyMarshaler<Name> CurveNames_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetAnimationCurveNames_CurveNames_ElementSize);
            curveNames = CurveNames_Marshaler.FromNative(CurveNames_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(CurveNames_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetAdditiveBasePoseType
    static readonly IntPtr GetAdditiveBasePoseType_NativeFunction;
    static readonly int GetAdditiveBasePoseType_ParamsSize;
    static readonly int GetAdditiveBasePoseType_AnimationSequence_Offset;
    static readonly int GetAdditiveBasePoseType_AdditiveBasePoseType_Offset;
    
    public static void GetAdditiveBasePoseType(UnrealSharp.Engine.AnimSequence animationSequence, out UnrealSharp.Engine.EAdditiveBasePoseType additiveBasePoseType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAdditiveBasePoseType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetAdditiveBasePoseType_AnimationSequence_Offset), 0, null, animationSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAdditiveBasePoseType_NativeFunction, ParamsBuffer);
            
            additiveBasePoseType = BlittableMarshaller<UnrealSharp.Engine.EAdditiveBasePoseType>.FromNative(IntPtr.Add(ParamsBuffer, GetAdditiveBasePoseType_AdditiveBasePoseType_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:GetAdditiveAnimationType
    static readonly IntPtr GetAdditiveAnimationType_NativeFunction;
    static readonly int GetAdditiveAnimationType_ParamsSize;
    static readonly int GetAdditiveAnimationType_AnimationSequence_Offset;
    static readonly int GetAdditiveAnimationType_AdditiveAnimationType_Offset;
    
    public static void GetAdditiveAnimationType(UnrealSharp.Engine.AnimSequence animationSequence, out UnrealSharp.Engine.EAdditiveAnimationType additiveAnimationType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAdditiveAnimationType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetAdditiveAnimationType_AnimationSequence_Offset), 0, null, animationSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAdditiveAnimationType_NativeFunction, ParamsBuffer);
            
            additiveAnimationType = BlittableMarshaller<UnrealSharp.Engine.EAdditiveAnimationType>.FromNative(IntPtr.Add(ParamsBuffer, GetAdditiveAnimationType_AdditiveAnimationType_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:FindBonePathToRoot
    static readonly IntPtr FindBonePathToRoot_NativeFunction;
    static readonly int FindBonePathToRoot_ParamsSize;
    static readonly int FindBonePathToRoot_AnimationSequenceBase_Offset;
    static readonly int FindBonePathToRoot_BoneName_Offset;
    static readonly int FindBonePathToRoot_BonePath_Offset;
    static readonly int FindBonePathToRoot_BonePath_ElementSize;
    
    public static void FindBonePathToRoot(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, Name boneName, out System.Collections.Generic.IList<Name> bonePath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindBonePathToRoot_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, FindBonePathToRoot_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, FindBonePathToRoot_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindBonePathToRoot_NativeFunction, ParamsBuffer);
            
            IntPtr BonePath_NativeBuffer = IntPtr.Add(ParamsBuffer, FindBonePathToRoot_BonePath_Offset);
            UnrealArrayCopyMarshaler<Name> BonePath_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, FindBonePathToRoot_BonePath_ElementSize);
            bonePath = BonePath_Marshaler.FromNative(BonePath_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(BonePath_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:FinalizeBoneAnimation
    static readonly IntPtr FinalizeBoneAnimation_NativeFunction;
    static readonly int FinalizeBoneAnimation_ParamsSize;
    static readonly int FinalizeBoneAnimation_AnimationSequence_Offset;
    
    [Obsolete("FinalizeBoneAnimation has been deprecated, use UAnimDataController instead")]
    public static void FinalizeBoneAnimation(UnrealSharp.Engine.AnimSequence animationSequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FinalizeBoneAnimation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, FinalizeBoneAnimation_AnimationSequence_Offset), 0, null, animationSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FinalizeBoneAnimation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:EvaluateRootBoneTimecodeSubframeAttributeAtTime
    static readonly IntPtr EvaluateRootBoneTimecodeSubframeAttributeAtTime_NativeFunction;
    static readonly int EvaluateRootBoneTimecodeSubframeAttributeAtTime_ParamsSize;
    static readonly int EvaluateRootBoneTimecodeSubframeAttributeAtTime_AnimationSequenceBase_Offset;
    static readonly int EvaluateRootBoneTimecodeSubframeAttributeAtTime_EvalTime_Offset;
    static readonly int EvaluateRootBoneTimecodeSubframeAttributeAtTime_OutSubframe_Offset;
    static readonly int EvaluateRootBoneTimecodeSubframeAttributeAtTime_ReturnValue_Offset;
    
    public static bool EvaluateRootBoneTimecodeSubframeAttributeAtTime(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, float evalTime, out float outSubframe)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EvaluateRootBoneTimecodeSubframeAttributeAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, EvaluateRootBoneTimecodeSubframeAttributeAtTime_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, EvaluateRootBoneTimecodeSubframeAttributeAtTime_EvalTime_Offset), 0, null, evalTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EvaluateRootBoneTimecodeSubframeAttributeAtTime_NativeFunction, ParamsBuffer);
            
            outSubframe = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, EvaluateRootBoneTimecodeSubframeAttributeAtTime_OutSubframe_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EvaluateRootBoneTimecodeSubframeAttributeAtTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:EvaluateRootBoneTimecodeAttributesAtTime
    static readonly IntPtr EvaluateRootBoneTimecodeAttributesAtTime_NativeFunction;
    static readonly int EvaluateRootBoneTimecodeAttributesAtTime_ParamsSize;
    static readonly int EvaluateRootBoneTimecodeAttributesAtTime_AnimationSequenceBase_Offset;
    static readonly int EvaluateRootBoneTimecodeAttributesAtTime_EvalTime_Offset;
    static readonly int EvaluateRootBoneTimecodeAttributesAtTime_OutQualifiedFrameTime_Offset;
    static readonly int EvaluateRootBoneTimecodeAttributesAtTime_ReturnValue_Offset;
    
    public static bool EvaluateRootBoneTimecodeAttributesAtTime(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, float evalTime, out UnrealSharp.CoreUObject.QualifiedTime outQualifiedFrameTime)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EvaluateRootBoneTimecodeAttributesAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, EvaluateRootBoneTimecodeAttributesAtTime_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, EvaluateRootBoneTimecodeAttributesAtTime_EvalTime_Offset), 0, null, evalTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EvaluateRootBoneTimecodeAttributesAtTime_NativeFunction, ParamsBuffer);
            
            outQualifiedFrameTime = BlittableMarshaller<UnrealSharp.CoreUObject.QualifiedTime>.FromNative(IntPtr.Add(ParamsBuffer, EvaluateRootBoneTimecodeAttributesAtTime_OutQualifiedFrameTime_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EvaluateRootBoneTimecodeAttributesAtTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:DoesCurveExist
    static readonly IntPtr DoesCurveExist_NativeFunction;
    static readonly int DoesCurveExist_ParamsSize;
    static readonly int DoesCurveExist_AnimationSequence_Offset;
    static readonly int DoesCurveExist_CurveName_Offset;
    static readonly int DoesCurveExist_CurveType_Offset;
    static readonly int DoesCurveExist_ReturnValue_Offset;
    
    public static bool DoesCurveExist(UnrealSharp.Engine.AnimSequence animationSequence, Name curveName, UnrealSharp.Engine.ERawCurveTrackTypes curveType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DoesCurveExist_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, DoesCurveExist_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, DoesCurveExist_CurveName_Offset), 0, null, curveName);
            BlittableMarshaller<UnrealSharp.Engine.ERawCurveTrackTypes>.ToNative(IntPtr.Add(ParamsBuffer, DoesCurveExist_CurveType_Offset), 0, null, curveType);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DoesCurveExist_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DoesCurveExist_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:DoesBoneNameExist
    static readonly IntPtr DoesBoneNameExist_NativeFunction;
    static readonly int DoesBoneNameExist_ParamsSize;
    static readonly int DoesBoneNameExist_AnimationSequence_Offset;
    static readonly int DoesBoneNameExist_BoneName_Offset;
    static readonly int DoesBoneNameExist_bExists_Offset;
    
    public static void DoesBoneNameExist(UnrealSharp.Engine.AnimSequence animationSequence, Name boneName, out bool bExists)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DoesBoneNameExist_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, DoesBoneNameExist_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, DoesBoneNameExist_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DoesBoneNameExist_NativeFunction, ParamsBuffer);
            
            bExists = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DoesBoneNameExist_bExists_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:CopyAnimNotifiesFromSequence
    static readonly IntPtr CopyAnimNotifiesFromSequence_NativeFunction;
    static readonly int CopyAnimNotifiesFromSequence_ParamsSize;
    static readonly int CopyAnimNotifiesFromSequence_SourceAnimationSequenceBase_Offset;
    static readonly int CopyAnimNotifiesFromSequence_DestinationAnimationSequenceBase_Offset;
    static readonly int CopyAnimNotifiesFromSequence_bDeleteExistingNotifies_Offset;
    
    public static void CopyAnimNotifiesFromSequence(UnrealSharp.Engine.AnimSequenceBase sourceAnimationSequenceBase, UnrealSharp.Engine.AnimSequenceBase destinationAnimationSequenceBase, bool bDeleteExistingNotifies = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CopyAnimNotifiesFromSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, CopyAnimNotifiesFromSequence_SourceAnimationSequenceBase_Offset), 0, null, sourceAnimationSequenceBase);
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, CopyAnimNotifiesFromSequence_DestinationAnimationSequenceBase_Offset), 0, null, destinationAnimationSequenceBase);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CopyAnimNotifiesFromSequence_bDeleteExistingNotifies_Offset), 0, null, bDeleteExistingNotifies);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CopyAnimNotifiesFromSequence_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:CopyAnimationCurveNamesToSkeleton
    static readonly IntPtr CopyAnimationCurveNamesToSkeleton_NativeFunction;
    static readonly int CopyAnimationCurveNamesToSkeleton_ParamsSize;
    static readonly int CopyAnimationCurveNamesToSkeleton_OldSkeleton_Offset;
    static readonly int CopyAnimationCurveNamesToSkeleton_NewSkeleton_Offset;
    static readonly int CopyAnimationCurveNamesToSkeleton_SequenceBase_Offset;
    static readonly int CopyAnimationCurveNamesToSkeleton_CurveType_Offset;
    
    [Obsolete("It is no longer necessary to copy curve names to the skeleton. If metadata is required to be updated, please use the metadata setting APIs.")]
    public static void CopyAnimationCurveNamesToSkeleton(UnrealSharp.Engine.Skeleton oldSkeleton, UnrealSharp.Engine.Skeleton newSkeleton, UnrealSharp.Engine.AnimSequenceBase sequenceBase, UnrealSharp.Engine.ERawCurveTrackTypes curveType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CopyAnimationCurveNamesToSkeleton_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Skeleton>.ToNative(IntPtr.Add(ParamsBuffer, CopyAnimationCurveNamesToSkeleton_OldSkeleton_Offset), 0, null, oldSkeleton);
            ObjectMarshaller<UnrealSharp.Engine.Skeleton>.ToNative(IntPtr.Add(ParamsBuffer, CopyAnimationCurveNamesToSkeleton_NewSkeleton_Offset), 0, null, newSkeleton);
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, CopyAnimationCurveNamesToSkeleton_SequenceBase_Offset), 0, null, sequenceBase);
            BlittableMarshaller<UnrealSharp.Engine.ERawCurveTrackTypes>.ToNative(IntPtr.Add(ParamsBuffer, CopyAnimationCurveNamesToSkeleton_CurveType_Offset), 0, null, curveType);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CopyAnimationCurveNamesToSkeleton_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:ContainsMetaDataOfClass
    static readonly IntPtr ContainsMetaDataOfClass_NativeFunction;
    static readonly int ContainsMetaDataOfClass_ParamsSize;
    static readonly int ContainsMetaDataOfClass_AnimationAsset_Offset;
    static readonly int ContainsMetaDataOfClass_MetaDataClass_Offset;
    static readonly int ContainsMetaDataOfClass_ReturnValue_Offset;
    
    public static bool ContainsMetaDataOfClass(UnrealSharp.Engine.AnimationAsset animationAsset, SubclassOf<UnrealSharp.Engine.AnimMetaData> metaDataClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ContainsMetaDataOfClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimationAsset>.ToNative(IntPtr.Add(ParamsBuffer, ContainsMetaDataOfClass_AnimationAsset_Offset), 0, null, animationAsset);
            SubclassOfMarshaller<UnrealSharp.Engine.AnimMetaData>.ToNative(IntPtr.Add(ParamsBuffer, ContainsMetaDataOfClass_MetaDataClass_Offset), 0, null, metaDataClass);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ContainsMetaDataOfClass_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ContainsMetaDataOfClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:AddVirtualBone
    static readonly IntPtr AddVirtualBone_NativeFunction;
    static readonly int AddVirtualBone_ParamsSize;
    static readonly int AddVirtualBone_AnimationSequence_Offset;
    static readonly int AddVirtualBone_SourceBoneName_Offset;
    static readonly int AddVirtualBone_TargetBoneName_Offset;
    static readonly int AddVirtualBone_VirtualBoneName_Offset;
    
    public static void AddVirtualBone(UnrealSharp.Engine.AnimSequence animationSequence, Name sourceBoneName, Name targetBoneName, out Name virtualBoneName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddVirtualBone_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, AddVirtualBone_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddVirtualBone_SourceBoneName_Offset), 0, null, sourceBoneName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddVirtualBone_TargetBoneName_Offset), 0, null, targetBoneName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddVirtualBone_NativeFunction, ParamsBuffer);
            
            virtualBoneName = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, AddVirtualBone_VirtualBoneName_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:AddVectorCurveKeys
    static readonly IntPtr AddVectorCurveKeys_NativeFunction;
    static readonly int AddVectorCurveKeys_ParamsSize;
    static readonly int AddVectorCurveKeys_AnimationSequence_Offset;
    static readonly int AddVectorCurveKeys_CurveName_Offset;
    static readonly int AddVectorCurveKeys_Times_Offset;
    static readonly int AddVectorCurveKeys_Times_ElementSize;
    static readonly int AddVectorCurveKeys_Vectors_Offset;
    static readonly int AddVectorCurveKeys_Vectors_ElementSize;
    
    public static void AddVectorCurveKeys(UnrealSharp.Engine.AnimSequence animationSequence, Name curveName, System.Collections.Generic.IList<float> times, System.Collections.Generic.IList<System.DoubleNumerics.Vector3> vectors)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddVectorCurveKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, AddVectorCurveKeys_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddVectorCurveKeys_CurveName_Offset), 0, null, curveName);
            IntPtr Times_NativeBuffer = IntPtr.Add(ParamsBuffer, AddVectorCurveKeys_Times_Offset);
            UnrealArrayCopyMarshaler<float> Times_Marshaler = new UnrealArrayCopyMarshaler<float>(1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, AddVectorCurveKeys_Times_ElementSize);
            Times_Marshaler.ToNative(Times_NativeBuffer, 0, null, times);
            IntPtr Vectors_NativeBuffer = IntPtr.Add(ParamsBuffer, AddVectorCurveKeys_Vectors_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Vectors_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, AddVectorCurveKeys_Vectors_ElementSize);
            Vectors_Marshaler.ToNative(Vectors_NativeBuffer, 0, null, vectors);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddVectorCurveKeys_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:AddVectorCurveKey
    static readonly IntPtr AddVectorCurveKey_NativeFunction;
    static readonly int AddVectorCurveKey_ParamsSize;
    static readonly int AddVectorCurveKey_AnimationSequence_Offset;
    static readonly int AddVectorCurveKey_CurveName_Offset;
    static readonly int AddVectorCurveKey_Time_Offset;
    static readonly int AddVectorCurveKey_Vector_Offset;
    
    public static void AddVectorCurveKey(UnrealSharp.Engine.AnimSequence animationSequence, Name curveName, float time, System.DoubleNumerics.Vector3 vector)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddVectorCurveKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, AddVectorCurveKey_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddVectorCurveKey_CurveName_Offset), 0, null, curveName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddVectorCurveKey_Time_Offset), 0, null, time);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddVectorCurveKey_Vector_Offset), 0, null, vector);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddVectorCurveKey_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:AddTransformationCurveKeys
    static readonly IntPtr AddTransformationCurveKeys_NativeFunction;
    static readonly int AddTransformationCurveKeys_ParamsSize;
    static readonly int AddTransformationCurveKeys_AnimationSequence_Offset;
    static readonly int AddTransformationCurveKeys_CurveName_Offset;
    static readonly int AddTransformationCurveKeys_Times_Offset;
    static readonly int AddTransformationCurveKeys_Times_ElementSize;
    static readonly int AddTransformationCurveKeys_Transforms_Offset;
    static readonly int AddTransformationCurveKeys_Transforms_ElementSize;
    
    public static void AddTransformationCurveKeys(UnrealSharp.Engine.AnimSequence animationSequence, Name curveName, System.Collections.Generic.IList<float> times, System.Collections.Generic.IList<UnrealSharp.Transform> transforms)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddTransformationCurveKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, AddTransformationCurveKeys_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddTransformationCurveKeys_CurveName_Offset), 0, null, curveName);
            IntPtr Times_NativeBuffer = IntPtr.Add(ParamsBuffer, AddTransformationCurveKeys_Times_Offset);
            UnrealArrayCopyMarshaler<float> Times_Marshaler = new UnrealArrayCopyMarshaler<float>(1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, AddTransformationCurveKeys_Times_ElementSize);
            Times_Marshaler.ToNative(Times_NativeBuffer, 0, null, times);
            IntPtr Transforms_NativeBuffer = IntPtr.Add(ParamsBuffer, AddTransformationCurveKeys_Transforms_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform> Transforms_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Transform>(1, BlittableMarshaller<UnrealSharp.Transform>.ToNative, BlittableMarshaller<UnrealSharp.Transform>.FromNative, AddTransformationCurveKeys_Transforms_ElementSize);
            Transforms_Marshaler.ToNative(Transforms_NativeBuffer, 0, null, transforms);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddTransformationCurveKeys_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:AddTransformationCurveKey
    static readonly IntPtr AddTransformationCurveKey_NativeFunction;
    static readonly int AddTransformationCurveKey_ParamsSize;
    static readonly int AddTransformationCurveKey_AnimationSequence_Offset;
    static readonly int AddTransformationCurveKey_CurveName_Offset;
    static readonly int AddTransformationCurveKey_Time_Offset;
    static readonly int AddTransformationCurveKey_Transform_Offset;
    
    public static void AddTransformationCurveKey(UnrealSharp.Engine.AnimSequence animationSequence, Name curveName, float time, UnrealSharp.Transform transform)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddTransformationCurveKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, AddTransformationCurveKey_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddTransformationCurveKey_CurveName_Offset), 0, null, curveName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddTransformationCurveKey_Time_Offset), 0, null, time);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, AddTransformationCurveKey_Transform_Offset), 0, null, transform);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddTransformationCurveKey_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:AddNodeAssetOverride
    static readonly IntPtr AddNodeAssetOverride_NativeFunction;
    static readonly int AddNodeAssetOverride_ParamsSize;
    static readonly int AddNodeAssetOverride_AnimBlueprint_Offset;
    static readonly int AddNodeAssetOverride_Target_Offset;
    static readonly int AddNodeAssetOverride_Override_Offset;
    static readonly int AddNodeAssetOverride_bPrintAppliedOverrides_Offset;
    
    public static void AddNodeAssetOverride(UnrealSharp.Engine.AnimBlueprint animBlueprint, UnrealSharp.Engine.AnimationAsset target, UnrealSharp.Engine.AnimationAsset @override, bool bPrintAppliedOverrides = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddNodeAssetOverride_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimBlueprint>.ToNative(IntPtr.Add(ParamsBuffer, AddNodeAssetOverride_AnimBlueprint_Offset), 0, null, animBlueprint);
            ObjectMarshaller<UnrealSharp.Engine.AnimationAsset>.ToNative(IntPtr.Add(ParamsBuffer, AddNodeAssetOverride_Target_Offset), 0, null, target);
            ObjectMarshaller<UnrealSharp.Engine.AnimationAsset>.ToNative(IntPtr.Add(ParamsBuffer, AddNodeAssetOverride_Override_Offset), 0, null, @override);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddNodeAssetOverride_bPrintAppliedOverrides_Offset), 0, null, bPrintAppliedOverrides);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddNodeAssetOverride_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:AddMetaDataObject
    static readonly IntPtr AddMetaDataObject_NativeFunction;
    static readonly int AddMetaDataObject_ParamsSize;
    static readonly int AddMetaDataObject_AnimationAsset_Offset;
    static readonly int AddMetaDataObject_MetaDataObject_Offset;
    
    public static void AddMetaDataObject(UnrealSharp.Engine.AnimationAsset animationAsset, UnrealSharp.Engine.AnimMetaData metaDataObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddMetaDataObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimationAsset>.ToNative(IntPtr.Add(ParamsBuffer, AddMetaDataObject_AnimationAsset_Offset), 0, null, animationAsset);
            ObjectMarshaller<UnrealSharp.Engine.AnimMetaData>.ToNative(IntPtr.Add(ParamsBuffer, AddMetaDataObject_MetaDataObject_Offset), 0, null, metaDataObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddMetaDataObject_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:AddMetaData
    static readonly IntPtr AddMetaData_NativeFunction;
    static readonly int AddMetaData_ParamsSize;
    static readonly int AddMetaData_AnimationAsset_Offset;
    static readonly int AddMetaData_MetaDataClass_Offset;
    static readonly int AddMetaData_MetaDataInstance_Offset;
    
    public static void AddMetaData(UnrealSharp.Engine.AnimationAsset animationAsset, SubclassOf<UnrealSharp.Engine.AnimMetaData> metaDataClass, out UnrealSharp.Engine.AnimMetaData metaDataInstance)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddMetaData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimationAsset>.ToNative(IntPtr.Add(ParamsBuffer, AddMetaData_AnimationAsset_Offset), 0, null, animationAsset);
            SubclassOfMarshaller<UnrealSharp.Engine.AnimMetaData>.ToNative(IntPtr.Add(ParamsBuffer, AddMetaData_MetaDataClass_Offset), 0, null, metaDataClass);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddMetaData_NativeFunction, ParamsBuffer);
            
            metaDataInstance = ObjectMarshaller<UnrealSharp.Engine.AnimMetaData>.FromNative(IntPtr.Add(ParamsBuffer, AddMetaData_MetaDataInstance_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:AddFloatCurveKeys
    static readonly IntPtr AddFloatCurveKeys_NativeFunction;
    static readonly int AddFloatCurveKeys_ParamsSize;
    static readonly int AddFloatCurveKeys_AnimationSequence_Offset;
    static readonly int AddFloatCurveKeys_CurveName_Offset;
    static readonly int AddFloatCurveKeys_Times_Offset;
    static readonly int AddFloatCurveKeys_Times_ElementSize;
    static readonly int AddFloatCurveKeys_Values_Offset;
    static readonly int AddFloatCurveKeys_Values_ElementSize;
    
    public static void AddFloatCurveKeys(UnrealSharp.Engine.AnimSequence animationSequence, Name curveName, System.Collections.Generic.IList<float> times, System.Collections.Generic.IList<float> values)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddFloatCurveKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, AddFloatCurveKeys_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddFloatCurveKeys_CurveName_Offset), 0, null, curveName);
            IntPtr Times_NativeBuffer = IntPtr.Add(ParamsBuffer, AddFloatCurveKeys_Times_Offset);
            UnrealArrayCopyMarshaler<float> Times_Marshaler = new UnrealArrayCopyMarshaler<float>(1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, AddFloatCurveKeys_Times_ElementSize);
            Times_Marshaler.ToNative(Times_NativeBuffer, 0, null, times);
            IntPtr Values_NativeBuffer = IntPtr.Add(ParamsBuffer, AddFloatCurveKeys_Values_Offset);
            UnrealArrayCopyMarshaler<float> Values_Marshaler = new UnrealArrayCopyMarshaler<float>(1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, AddFloatCurveKeys_Values_ElementSize);
            Values_Marshaler.ToNative(Values_NativeBuffer, 0, null, values);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddFloatCurveKeys_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:AddFloatCurveKey
    static readonly IntPtr AddFloatCurveKey_NativeFunction;
    static readonly int AddFloatCurveKey_ParamsSize;
    static readonly int AddFloatCurveKey_AnimationSequence_Offset;
    static readonly int AddFloatCurveKey_CurveName_Offset;
    static readonly int AddFloatCurveKey_Time_Offset;
    static readonly int AddFloatCurveKey_Value_Offset;
    
    public static void AddFloatCurveKey(UnrealSharp.Engine.AnimSequence animationSequence, Name curveName, float time, float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddFloatCurveKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, AddFloatCurveKey_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddFloatCurveKey_CurveName_Offset), 0, null, curveName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddFloatCurveKey_Time_Offset), 0, null, time);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddFloatCurveKey_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddFloatCurveKey_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:AddCurve
    static readonly IntPtr AddCurve_NativeFunction;
    static readonly int AddCurve_ParamsSize;
    static readonly int AddCurve_AnimationSequence_Offset;
    static readonly int AddCurve_CurveName_Offset;
    static readonly int AddCurve_CurveType_Offset;
    static readonly int AddCurve_bMetaDataCurve_Offset;
    
    public static void AddCurve(UnrealSharp.Engine.AnimSequence animationSequence, Name curveName, UnrealSharp.Engine.ERawCurveTrackTypes curveType = UnrealSharp.Engine.ERawCurveTrackTypes.RCT_Float, bool bMetaDataCurve = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddCurve_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, AddCurve_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddCurve_CurveName_Offset), 0, null, curveName);
            BlittableMarshaller<UnrealSharp.Engine.ERawCurveTrackTypes>.ToNative(IntPtr.Add(ParamsBuffer, AddCurve_CurveType_Offset), 0, null, curveType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddCurve_bMetaDataCurve_Offset), 0, null, bMetaDataCurve);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddCurve_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:AddAnimationSyncMarker
    static readonly IntPtr AddAnimationSyncMarker_NativeFunction;
    static readonly int AddAnimationSyncMarker_ParamsSize;
    static readonly int AddAnimationSyncMarker_AnimationSequence_Offset;
    static readonly int AddAnimationSyncMarker_MarkerName_Offset;
    static readonly int AddAnimationSyncMarker_Time_Offset;
    static readonly int AddAnimationSyncMarker_NotifyTrackName_Offset;
    
    public static void AddAnimationSyncMarker(UnrealSharp.Engine.AnimSequence animationSequence, Name markerName, float time, Name notifyTrackName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddAnimationSyncMarker_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationSyncMarker_AnimationSequence_Offset), 0, null, animationSequence);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationSyncMarker_MarkerName_Offset), 0, null, markerName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationSyncMarker_Time_Offset), 0, null, time);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationSyncMarker_NotifyTrackName_Offset), 0, null, notifyTrackName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddAnimationSyncMarker_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:AddAnimationNotifyTrack
    static readonly IntPtr AddAnimationNotifyTrack_NativeFunction;
    static readonly int AddAnimationNotifyTrack_ParamsSize;
    static readonly int AddAnimationNotifyTrack_AnimationSequenceBase_Offset;
    static readonly int AddAnimationNotifyTrack_NotifyTrackName_Offset;
    static readonly int AddAnimationNotifyTrack_TrackColor_Offset;
    
    public static void AddAnimationNotifyTrack(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, Name notifyTrackName)
    {
        UnrealSharp.CoreUObject.LinearColor trackColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        AddAnimationNotifyTrack(animationSequenceBase, notifyTrackName, trackColor);
    }
    
    public static void AddAnimationNotifyTrack(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, Name notifyTrackName, UnrealSharp.CoreUObject.LinearColor trackColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddAnimationNotifyTrack_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyTrack_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyTrack_NotifyTrackName_Offset), 0, null, notifyTrackName);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyTrack_TrackColor_Offset), 0, null, trackColor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddAnimationNotifyTrack_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:AddAnimationNotifyStateEventObject
    static readonly IntPtr AddAnimationNotifyStateEventObject_NativeFunction;
    static readonly int AddAnimationNotifyStateEventObject_ParamsSize;
    static readonly int AddAnimationNotifyStateEventObject_AnimationSequenceBase_Offset;
    static readonly int AddAnimationNotifyStateEventObject_StartTime_Offset;
    static readonly int AddAnimationNotifyStateEventObject_Duration_Offset;
    static readonly int AddAnimationNotifyStateEventObject_NotifyState_Offset;
    static readonly int AddAnimationNotifyStateEventObject_NotifyTrackName_Offset;
    
    public static void AddAnimationNotifyStateEventObject(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, float startTime, float duration, UnrealSharp.Engine.AnimNotifyState notifyState, Name notifyTrackName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddAnimationNotifyStateEventObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyStateEventObject_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyStateEventObject_StartTime_Offset), 0, null, startTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyStateEventObject_Duration_Offset), 0, null, duration);
            ObjectMarshaller<UnrealSharp.Engine.AnimNotifyState>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyStateEventObject_NotifyState_Offset), 0, null, notifyState);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyStateEventObject_NotifyTrackName_Offset), 0, null, notifyTrackName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddAnimationNotifyStateEventObject_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:AddAnimationNotifyStateEvent
    static readonly IntPtr AddAnimationNotifyStateEvent_NativeFunction;
    static readonly int AddAnimationNotifyStateEvent_ParamsSize;
    static readonly int AddAnimationNotifyStateEvent_AnimationSequenceBase_Offset;
    static readonly int AddAnimationNotifyStateEvent_NotifyTrackName_Offset;
    static readonly int AddAnimationNotifyStateEvent_StartTime_Offset;
    static readonly int AddAnimationNotifyStateEvent_Duration_Offset;
    static readonly int AddAnimationNotifyStateEvent_NotifyStateClass_Offset;
    static readonly int AddAnimationNotifyStateEvent_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.AnimNotifyState AddAnimationNotifyStateEvent(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, Name notifyTrackName, float startTime, float duration, SubclassOf<UnrealSharp.Engine.AnimNotifyState> notifyStateClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddAnimationNotifyStateEvent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyStateEvent_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyStateEvent_NotifyTrackName_Offset), 0, null, notifyTrackName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyStateEvent_StartTime_Offset), 0, null, startTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyStateEvent_Duration_Offset), 0, null, duration);
            SubclassOfMarshaller<UnrealSharp.Engine.AnimNotifyState>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyStateEvent_NotifyStateClass_Offset), 0, null, notifyStateClass);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddAnimationNotifyStateEvent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AnimNotifyState returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AnimNotifyState>.FromNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyStateEvent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:AddAnimationNotifyEventObject
    static readonly IntPtr AddAnimationNotifyEventObject_NativeFunction;
    static readonly int AddAnimationNotifyEventObject_ParamsSize;
    static readonly int AddAnimationNotifyEventObject_AnimationSequenceBase_Offset;
    static readonly int AddAnimationNotifyEventObject_StartTime_Offset;
    static readonly int AddAnimationNotifyEventObject_Notify_Offset;
    static readonly int AddAnimationNotifyEventObject_NotifyTrackName_Offset;
    
    public static void AddAnimationNotifyEventObject(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, float startTime, UnrealSharp.Engine.AnimNotify notify, Name notifyTrackName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddAnimationNotifyEventObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyEventObject_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyEventObject_StartTime_Offset), 0, null, startTime);
            ObjectMarshaller<UnrealSharp.Engine.AnimNotify>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyEventObject_Notify_Offset), 0, null, notify);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyEventObject_NotifyTrackName_Offset), 0, null, notifyTrackName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddAnimationNotifyEventObject_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AnimationBlueprintLibrary.AnimationBlueprintLibrary:AddAnimationNotifyEvent
    static readonly IntPtr AddAnimationNotifyEvent_NativeFunction;
    static readonly int AddAnimationNotifyEvent_ParamsSize;
    static readonly int AddAnimationNotifyEvent_AnimationSequenceBase_Offset;
    static readonly int AddAnimationNotifyEvent_NotifyTrackName_Offset;
    static readonly int AddAnimationNotifyEvent_StartTime_Offset;
    static readonly int AddAnimationNotifyEvent_NotifyClass_Offset;
    static readonly int AddAnimationNotifyEvent_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.AnimNotify AddAnimationNotifyEvent(UnrealSharp.Engine.AnimSequenceBase animationSequenceBase, Name notifyTrackName, float startTime, SubclassOf<UnrealSharp.Engine.AnimNotify> notifyClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddAnimationNotifyEvent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyEvent_AnimationSequenceBase_Offset), 0, null, animationSequenceBase);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyEvent_NotifyTrackName_Offset), 0, null, notifyTrackName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyEvent_StartTime_Offset), 0, null, startTime);
            SubclassOfMarshaller<UnrealSharp.Engine.AnimNotify>.ToNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyEvent_NotifyClass_Offset), 0, null, notifyClass);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddAnimationNotifyEvent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AnimNotify returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AnimNotify>.FromNative(IntPtr.Add(ParamsBuffer, AddAnimationNotifyEvent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
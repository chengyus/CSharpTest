// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AnimationModifierLibrary;

[UClass]
public partial class MotionExtractorModifier : UnrealSharp.AnimationModifiers.AnimationModifier
{
    
    static MotionExtractorModifier()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MotionExtractorModifier");
        
        BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BoneName");
        MotionType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MotionType");
        Axis_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Axis");
        bRemoveCurveOnRevert_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bRemoveCurveOnRevert");
        bRelativeToFirstFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bRelativeToFirstFrame");
        bComponentSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bComponentSpace");
        bAbsoluteValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAbsoluteValue");
        MathOperation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MathOperation");
        Modifier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Modifier");
        bNormalize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bNormalize");
        bUseCustomCurveName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseCustomCurveName");
        CustomCurveName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CustomCurveName");
        
        
        
    }
    
    protected MotionExtractorModifier(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // NameProperty /Script/AnimationModifierLibrary.MotionExtractorModifier:BoneName
    static readonly int BoneName_Offset;
    
    public Name BoneName
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, BoneName_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, BoneName_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/AnimationModifierLibrary.MotionExtractorModifier:MotionType
    static readonly int MotionType_Offset;
    
    public UnrealSharp.AnimationModifierLibrary.EMotionExtractor_MotionType MotionType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.AnimationModifierLibrary.EMotionExtractor_MotionType>.FromNative(IntPtr.Add(NativeObject, MotionType_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.AnimationModifierLibrary.EMotionExtractor_MotionType>.ToNative(IntPtr.Add(NativeObject, MotionType_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/AnimationModifierLibrary.MotionExtractorModifier:Axis
    static readonly int Axis_Offset;
    
    public UnrealSharp.AnimationModifierLibrary.EMotionExtractor_Axis Axis
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.AnimationModifierLibrary.EMotionExtractor_Axis>.FromNative(IntPtr.Add(NativeObject, Axis_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.AnimationModifierLibrary.EMotionExtractor_Axis>.ToNative(IntPtr.Add(NativeObject, Axis_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/AnimationModifierLibrary.MotionExtractorModifier:bRemoveCurveOnRevert
    static readonly int bRemoveCurveOnRevert_Offset;
    
    public bool bRemoveCurveOnRevert
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bRemoveCurveOnRevert_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bRemoveCurveOnRevert_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/AnimationModifierLibrary.MotionExtractorModifier:bRelativeToFirstFrame
    static readonly int bRelativeToFirstFrame_Offset;
    
    public bool bRelativeToFirstFrame
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bRelativeToFirstFrame_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bRelativeToFirstFrame_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/AnimationModifierLibrary.MotionExtractorModifier:bComponentSpace
    static readonly int bComponentSpace_Offset;
    
    public bool bComponentSpace
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bComponentSpace_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bComponentSpace_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/AnimationModifierLibrary.MotionExtractorModifier:bAbsoluteValue
    static readonly int bAbsoluteValue_Offset;
    
    public bool bAbsoluteValue
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAbsoluteValue_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAbsoluteValue_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/AnimationModifierLibrary.MotionExtractorModifier:MathOperation
    static readonly int MathOperation_Offset;
    
    public UnrealSharp.AnimationModifierLibrary.EMotionExtractor_MathOperation MathOperation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.AnimationModifierLibrary.EMotionExtractor_MathOperation>.FromNative(IntPtr.Add(NativeObject, MathOperation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.AnimationModifierLibrary.EMotionExtractor_MathOperation>.ToNative(IntPtr.Add(NativeObject, MathOperation_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/AnimationModifierLibrary.MotionExtractorModifier:Modifier
    static readonly int Modifier_Offset;
    
    public float Modifier
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Modifier_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Modifier_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/AnimationModifierLibrary.MotionExtractorModifier:bNormalize
    static readonly int bNormalize_Offset;
    
    public bool bNormalize
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bNormalize_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bNormalize_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/AnimationModifierLibrary.MotionExtractorModifier:bUseCustomCurveName
    static readonly int bUseCustomCurveName_Offset;
    
    public bool bUseCustomCurveName
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseCustomCurveName_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bUseCustomCurveName_Offset), 0, this, value);
        }
    }
    
    // NameProperty /Script/AnimationModifierLibrary.MotionExtractorModifier:CustomCurveName
    static readonly int CustomCurveName_Offset;
    
    public Name CustomCurveName
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, CustomCurveName_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, CustomCurveName_Offset), 0, this, value);
        }
    }
    
    
}
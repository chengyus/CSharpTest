// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AnimationModifierLibrary;

[UClass]
public partial class MotionExtractorUtilityLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static MotionExtractorUtilityLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MotionExtractorUtilityLibrary");
        
        
        GetStoppedRangesFromRootMotion_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStoppedRangesFromRootMotion");
        GetStoppedRangesFromRootMotion_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStoppedRangesFromRootMotion_NativeFunction);
        GetStoppedRangesFromRootMotion_AnimSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStoppedRangesFromRootMotion_NativeFunction, "AnimSequence");
        GetStoppedRangesFromRootMotion_StopSpeedThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStoppedRangesFromRootMotion_NativeFunction, "StopSpeedThreshold");
        GetStoppedRangesFromRootMotion_SampleRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStoppedRangesFromRootMotion_NativeFunction, "SampleRate");
        GetStoppedRangesFromRootMotion_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStoppedRangesFromRootMotion_NativeFunction, "ReturnValue");
        GetStoppedRangesFromRootMotion_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetStoppedRangesFromRootMotion_NativeFunction, "ReturnValue");
        GetMovingRangesFromRootMotion_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMovingRangesFromRootMotion");
        GetMovingRangesFromRootMotion_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMovingRangesFromRootMotion_NativeFunction);
        GetMovingRangesFromRootMotion_AnimSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMovingRangesFromRootMotion_NativeFunction, "AnimSequence");
        GetMovingRangesFromRootMotion_StopSpeedThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMovingRangesFromRootMotion_NativeFunction, "StopSpeedThreshold");
        GetMovingRangesFromRootMotion_SampleRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMovingRangesFromRootMotion_NativeFunction, "SampleRate");
        GetMovingRangesFromRootMotion_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMovingRangesFromRootMotion_NativeFunction, "ReturnValue");
        GetMovingRangesFromRootMotion_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetMovingRangesFromRootMotion_NativeFunction, "ReturnValue");
        GetDesiredValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDesiredValue");
        GetDesiredValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDesiredValue_NativeFunction);
        GetDesiredValue_BoneTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDesiredValue_NativeFunction, "BoneTransform");
        GetDesiredValue_LastBoneTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDesiredValue_NativeFunction, "LastBoneTransform");
        GetDesiredValue_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDesiredValue_NativeFunction, "DeltaTime");
        GetDesiredValue_MotionType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDesiredValue_NativeFunction, "MotionType");
        GetDesiredValue_Axis_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDesiredValue_NativeFunction, "Axis");
        GetDesiredValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDesiredValue_NativeFunction, "ReturnValue");
        GenerateCurveName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GenerateCurveName");
        GenerateCurveName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GenerateCurveName_NativeFunction);
        GenerateCurveName_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GenerateCurveName_NativeFunction, "BoneName");
        GenerateCurveName_MotionType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GenerateCurveName_NativeFunction, "MotionType");
        GenerateCurveName_Axis_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GenerateCurveName_NativeFunction, "Axis");
        GenerateCurveName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GenerateCurveName_NativeFunction, "ReturnValue");
        
        
    }
    
    protected MotionExtractorUtilityLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AnimationModifierLibrary.MotionExtractorUtilityLibrary:GetStoppedRangesFromRootMotion
    static readonly IntPtr GetStoppedRangesFromRootMotion_NativeFunction;
    static readonly int GetStoppedRangesFromRootMotion_ParamsSize;
    static readonly int GetStoppedRangesFromRootMotion_AnimSequence_Offset;
    static readonly int GetStoppedRangesFromRootMotion_StopSpeedThreshold_Offset;
    static readonly int GetStoppedRangesFromRootMotion_SampleRate_Offset;
    static readonly int GetStoppedRangesFromRootMotion_ReturnValue_Offset;
    static readonly int GetStoppedRangesFromRootMotion_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<System.DoubleNumerics.Vector2> GetStoppedRangesFromRootMotion(UnrealSharp.Engine.AnimSequence animSequence, float stopSpeedThreshold = 10.000000f, float sampleRate = 120.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStoppedRangesFromRootMotion_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetStoppedRangesFromRootMotion_AnimSequence_Offset), 0, null, animSequence);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetStoppedRangesFromRootMotion_StopSpeedThreshold_Offset), 0, null, stopSpeedThreshold);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetStoppedRangesFromRootMotion_SampleRate_Offset), 0, null, sampleRate);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetStoppedRangesFromRootMotion_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<System.DoubleNumerics.Vector2> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetStoppedRangesFromRootMotion_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> (1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, GetStoppedRangesFromRootMotion_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationModifierLibrary.MotionExtractorUtilityLibrary:GetMovingRangesFromRootMotion
    static readonly IntPtr GetMovingRangesFromRootMotion_NativeFunction;
    static readonly int GetMovingRangesFromRootMotion_ParamsSize;
    static readonly int GetMovingRangesFromRootMotion_AnimSequence_Offset;
    static readonly int GetMovingRangesFromRootMotion_StopSpeedThreshold_Offset;
    static readonly int GetMovingRangesFromRootMotion_SampleRate_Offset;
    static readonly int GetMovingRangesFromRootMotion_ReturnValue_Offset;
    static readonly int GetMovingRangesFromRootMotion_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<System.DoubleNumerics.Vector2> GetMovingRangesFromRootMotion(UnrealSharp.Engine.AnimSequence animSequence, float stopSpeedThreshold = 10.000000f, float sampleRate = 120.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMovingRangesFromRootMotion_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetMovingRangesFromRootMotion_AnimSequence_Offset), 0, null, animSequence);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetMovingRangesFromRootMotion_StopSpeedThreshold_Offset), 0, null, stopSpeedThreshold);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetMovingRangesFromRootMotion_SampleRate_Offset), 0, null, sampleRate);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMovingRangesFromRootMotion_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<System.DoubleNumerics.Vector2> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetMovingRangesFromRootMotion_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> (1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, GetMovingRangesFromRootMotion_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationModifierLibrary.MotionExtractorUtilityLibrary:GetDesiredValue
    static readonly IntPtr GetDesiredValue_NativeFunction;
    static readonly int GetDesiredValue_ParamsSize;
    static readonly int GetDesiredValue_BoneTransform_Offset;
    static readonly int GetDesiredValue_LastBoneTransform_Offset;
    static readonly int GetDesiredValue_DeltaTime_Offset;
    static readonly int GetDesiredValue_MotionType_Offset;
    static readonly int GetDesiredValue_Axis_Offset;
    static readonly int GetDesiredValue_ReturnValue_Offset;
    
    public static float GetDesiredValue(UnrealSharp.Transform boneTransform, UnrealSharp.Transform lastBoneTransform, float deltaTime, UnrealSharp.AnimationModifierLibrary.EMotionExtractor_MotionType motionType, UnrealSharp.AnimationModifierLibrary.EMotionExtractor_Axis axis)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDesiredValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, GetDesiredValue_BoneTransform_Offset), 0, null, boneTransform);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, GetDesiredValue_LastBoneTransform_Offset), 0, null, lastBoneTransform);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetDesiredValue_DeltaTime_Offset), 0, null, deltaTime);
            BlittableMarshaller<UnrealSharp.AnimationModifierLibrary.EMotionExtractor_MotionType>.ToNative(IntPtr.Add(ParamsBuffer, GetDesiredValue_MotionType_Offset), 0, null, motionType);
            BlittableMarshaller<UnrealSharp.AnimationModifierLibrary.EMotionExtractor_Axis>.ToNative(IntPtr.Add(ParamsBuffer, GetDesiredValue_Axis_Offset), 0, null, axis);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetDesiredValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetDesiredValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AnimationModifierLibrary.MotionExtractorUtilityLibrary:GenerateCurveName
    static readonly IntPtr GenerateCurveName_NativeFunction;
    static readonly int GenerateCurveName_ParamsSize;
    static readonly int GenerateCurveName_BoneName_Offset;
    static readonly int GenerateCurveName_MotionType_Offset;
    static readonly int GenerateCurveName_Axis_Offset;
    static readonly int GenerateCurveName_ReturnValue_Offset;
    
    public static Name GenerateCurveName(Name boneName, UnrealSharp.AnimationModifierLibrary.EMotionExtractor_MotionType motionType, UnrealSharp.AnimationModifierLibrary.EMotionExtractor_Axis axis)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GenerateCurveName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GenerateCurveName_BoneName_Offset), 0, null, boneName);
            BlittableMarshaller<UnrealSharp.AnimationModifierLibrary.EMotionExtractor_MotionType>.ToNative(IntPtr.Add(ParamsBuffer, GenerateCurveName_MotionType_Offset), 0, null, motionType);
            BlittableMarshaller<UnrealSharp.AnimationModifierLibrary.EMotionExtractor_Axis>.ToNative(IntPtr.Add(ParamsBuffer, GenerateCurveName_Axis_Offset), 0, null, axis);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GenerateCurveName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GenerateCurveName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
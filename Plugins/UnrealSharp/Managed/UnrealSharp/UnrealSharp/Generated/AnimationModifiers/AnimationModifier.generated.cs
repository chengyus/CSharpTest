// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AnimationModifiers;

[UClass]
public partial class AnimationModifier : UnrealSharp.CoreUObject.Object
{
    
    static AnimationModifier()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AnimationModifier");
        
        
        
        IntPtr OnRevert_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnRevert");
        OnRevert_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnRevert_NativeFunction);
        OnRevert_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnRevert_NativeFunction, "AnimationSequence");
        
        IntPtr OnApply_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnApply");
        OnApply_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnApply_NativeFunction);
        OnApply_AnimationSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnApply_NativeFunction, "AnimationSequence");
        
        
    }
    
    protected AnimationModifier(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AnimationModifiers.AnimationModifier:OnRevert
    IntPtr OnRevert_NativeFunction;
    static readonly int OnRevert_ParamsSize;
    static readonly int OnRevert_AnimationSequence_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnRevert(UnrealSharp.Engine.AnimSequence animationSequence)
    {
        unsafe
        {
            if (OnRevert_NativeFunction == IntPtr.Zero)
            {
                OnRevert_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnRevert");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnRevert_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, OnRevert_AnimationSequence_Offset), 0, null, animationSequence);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnRevert_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnRevert_Implementation(UnrealSharp.Engine.AnimSequence animationSequence)
    {
    }
    void Invoke_OnRevert(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.AnimSequence animationSequence = ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.FromNative(IntPtr.Add(buffer, OnRevert_AnimationSequence_Offset), 0, null);
            OnRevert_Implementation(animationSequence);
        }
    }
    
    // Function /Script/AnimationModifiers.AnimationModifier:OnApply
    IntPtr OnApply_NativeFunction;
    static readonly int OnApply_ParamsSize;
    static readonly int OnApply_AnimationSequence_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnApply(UnrealSharp.Engine.AnimSequence animationSequence)
    {
        unsafe
        {
            if (OnApply_NativeFunction == IntPtr.Zero)
            {
                OnApply_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnApply");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnApply_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, OnApply_AnimationSequence_Offset), 0, null, animationSequence);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnApply_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnApply_Implementation(UnrealSharp.Engine.AnimSequence animationSequence)
    {
    }
    void Invoke_OnApply(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.AnimSequence animationSequence = ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.FromNative(IntPtr.Add(buffer, OnApply_AnimationSequence_Offset), 0, null);
            OnApply_Implementation(animationSequence);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AnimationSharing;

[UClass]
public partial class AnimSharingStateInstance : UnrealSharp.Engine.AnimInstance
{
    
    static AnimSharingStateInstance()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AnimSharingStateInstance");
        
        AnimationToPlay_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AnimationToPlay");
        PermutationTimeOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PermutationTimeOffset");
        PlayRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PlayRate");
        bStateBool_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bStateBool");
        
        GetInstancedActors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInstancedActors");
        GetInstancedActors_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInstancedActors_NativeFunction);
        GetInstancedActors_Actors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInstancedActors_NativeFunction, "Actors");
        GetInstancedActors_Actors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetInstancedActors_NativeFunction, "Actors");
        
        
    }
    
    protected AnimSharingStateInstance(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/AnimationSharing.AnimSharingStateInstance:AnimationToPlay
    static readonly int AnimationToPlay_Offset;
    
    public UnrealSharp.Engine.AnimSequence AnimationToPlay
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.FromNative(IntPtr.Add(NativeObject, AnimationToPlay_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/AnimationSharing.AnimSharingStateInstance:PermutationTimeOffset
    static readonly int PermutationTimeOffset_Offset;
    
    public float PermutationTimeOffset
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PermutationTimeOffset_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/AnimationSharing.AnimSharingStateInstance:PlayRate
    static readonly int PlayRate_Offset;
    
    public float PlayRate
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PlayRate_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/AnimationSharing.AnimSharingStateInstance:bStateBool
    static readonly int bStateBool_Offset;
    
    public bool bStateBool
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bStateBool_Offset), 0, this);
        }
    }
    
    // Function /Script/AnimationSharing.AnimSharingStateInstance:GetInstancedActors
    static readonly IntPtr GetInstancedActors_NativeFunction;
    static readonly int GetInstancedActors_ParamsSize;
    static readonly int GetInstancedActors_Actors_Offset;
    static readonly int GetInstancedActors_Actors_ElementSize;
    
    protected void GetInstancedActors(out System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actors)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInstancedActors_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInstancedActors_NativeFunction, ParamsBuffer);
            
            IntPtr Actors_NativeBuffer = IntPtr.Add(ParamsBuffer, GetInstancedActors_Actors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> Actors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, GetInstancedActors_Actors_ElementSize);
            actors = Actors_Marshaler.FromNative(Actors_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(Actors_NativeBuffer, 0);
            
        }
    }
    
    
}
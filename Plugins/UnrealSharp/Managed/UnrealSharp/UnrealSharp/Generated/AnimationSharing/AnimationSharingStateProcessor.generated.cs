// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AnimationSharing;

[UClass]
public partial class AnimationSharingStateProcessor : UnrealSharp.CoreUObject.Object
{
    
    static AnimationSharingStateProcessor()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AnimationSharingStateProcessor");
        
        
        
        IntPtr ProcessActorState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ProcessActorState");
        ProcessActorState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ProcessActorState_NativeFunction);
        ProcessActorState_OutState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProcessActorState_NativeFunction, "OutState");
        ProcessActorState_InActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProcessActorState_NativeFunction, "InActor");
        ProcessActorState_CurrentState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProcessActorState_NativeFunction, "CurrentState");
        ProcessActorState_OnDemandState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProcessActorState_NativeFunction, "OnDemandState");
        ProcessActorState_bShouldProcess_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProcessActorState_NativeFunction, "bShouldProcess");
        
        IntPtr GetAnimationStateEnum_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnimationStateEnum");
        GetAnimationStateEnum_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnimationStateEnum_NativeFunction);
        GetAnimationStateEnum_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationStateEnum_NativeFunction, "ReturnValue");
        
        
    }
    
    protected AnimationSharingStateProcessor(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AnimationSharing.AnimationSharingStateProcessor:ProcessActorState
    IntPtr ProcessActorState_NativeFunction;
    static readonly int ProcessActorState_ParamsSize;
    static readonly int ProcessActorState_OutState_Offset;
    static readonly int ProcessActorState_InActor_Offset;
    static readonly int ProcessActorState_CurrentState_Offset;
    static readonly int ProcessActorState_OnDemandState_Offset;
    static readonly int ProcessActorState_bShouldProcess_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ProcessActorState(out int outState, UnrealSharp.Engine.Actor inActor, byte currentState, byte onDemandState, out bool bShouldProcess)
    {
        unsafe
        {
            if (ProcessActorState_NativeFunction == IntPtr.Zero)
            {
                ProcessActorState_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ProcessActorState");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ProcessActorState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ProcessActorState_InActor_Offset), 0, null, inActor);
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, ProcessActorState_CurrentState_Offset), 0, null, currentState);
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, ProcessActorState_OnDemandState_Offset), 0, null, onDemandState);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ProcessActorState_NativeFunction, ParamsBuffer);
            
            outState = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, ProcessActorState_OutState_Offset), 0, null);
            bShouldProcess = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ProcessActorState_bShouldProcess_Offset), 0, null);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ProcessActorState_Implementation(out int outState, UnrealSharp.Engine.Actor inActor, byte currentState, byte onDemandState, out bool bShouldProcess)
    {
        outState = default(int);
        bShouldProcess = default(bool);
    }
    void Invoke_ProcessActorState(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            int outState = default;
            UnrealSharp.Engine.Actor inActor = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, ProcessActorState_InActor_Offset), 0, null);
            byte currentState = BlittableMarshaller<byte>.FromNative(IntPtr.Add(buffer, ProcessActorState_CurrentState_Offset), 0, null);
            byte onDemandState = BlittableMarshaller<byte>.FromNative(IntPtr.Add(buffer, ProcessActorState_OnDemandState_Offset), 0, null);
            bool bShouldProcess = default;
            ProcessActorState_Implementation(out outState, inActor, currentState, onDemandState, out bShouldProcess);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(buffer, ProcessActorState_OutState_Offset), 0, null, outState);
            BoolMarshaller.ToNative(IntPtr.Add(buffer, ProcessActorState_bShouldProcess_Offset), 0, null, bShouldProcess);
        }
    }
    
    // Function /Script/AnimationSharing.AnimationSharingStateProcessor:GetAnimationStateEnum
    IntPtr GetAnimationStateEnum_NativeFunction;
    static readonly int GetAnimationStateEnum_ParamsSize;
    static readonly int GetAnimationStateEnum_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.CoreUObject.Enum GetAnimationStateEnum()
    {
        unsafe
        {
            if (GetAnimationStateEnum_NativeFunction == IntPtr.Zero)
            {
                GetAnimationStateEnum_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "GetAnimationStateEnum");
            }
            byte* ParamsBufferAllocation = stackalloc byte[GetAnimationStateEnum_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAnimationStateEnum_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Enum returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.CoreUObject.Enum>.FromNative(IntPtr.Add(ParamsBuffer, GetAnimationStateEnum_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.CoreUObject.Enum GetAnimationStateEnum_Implementation()
    {
        return default(UnrealSharp.CoreUObject.Enum);
    }
    void Invoke_GetAnimationStateEnum(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.CoreUObject.Enum returnValue = GetAnimationStateEnum_Implementation();
            ObjectMarshaller<UnrealSharp.CoreUObject.Enum>.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    
}
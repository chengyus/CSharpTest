// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AudioCapture;

[UClass]
public partial class AudioCapture : UnrealSharp.AudioMixer.AudioGenerator
{
    
    static AudioCapture()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AudioCapture");
        
        
        StopCapturingAudio_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopCapturingAudio");
        StartCapturingAudio_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartCapturingAudio");
        IsCapturingAudio_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsCapturingAudio");
        IsCapturingAudio_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsCapturingAudio_NativeFunction);
        IsCapturingAudio_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsCapturingAudio_NativeFunction, "ReturnValue");
        GetAudioCaptureDeviceInfo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAudioCaptureDeviceInfo");
        GetAudioCaptureDeviceInfo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAudioCaptureDeviceInfo_NativeFunction);
        GetAudioCaptureDeviceInfo_OutInfo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAudioCaptureDeviceInfo_NativeFunction, "OutInfo");
        GetAudioCaptureDeviceInfo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAudioCaptureDeviceInfo_NativeFunction, "ReturnValue");
        
        
    }
    
    protected AudioCapture(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AudioCapture.AudioCapture:StopCapturingAudio
    static readonly IntPtr StopCapturingAudio_NativeFunction;
    
    public void StopCapturingAudio()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopCapturingAudio_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/AudioCapture.AudioCapture:StartCapturingAudio
    static readonly IntPtr StartCapturingAudio_NativeFunction;
    
    public void StartCapturingAudio()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StartCapturingAudio_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/AudioCapture.AudioCapture:IsCapturingAudio
    static readonly IntPtr IsCapturingAudio_NativeFunction;
    static readonly int IsCapturingAudio_ParamsSize;
    static readonly int IsCapturingAudio_ReturnValue_Offset;
    
    public bool IsCapturingAudio()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsCapturingAudio_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsCapturingAudio_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsCapturingAudio_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioCapture.AudioCapture:GetAudioCaptureDeviceInfo
    static readonly IntPtr GetAudioCaptureDeviceInfo_NativeFunction;
    static readonly int GetAudioCaptureDeviceInfo_ParamsSize;
    static readonly int GetAudioCaptureDeviceInfo_OutInfo_Offset;
    static readonly int GetAudioCaptureDeviceInfo_ReturnValue_Offset;
    
    public bool GetAudioCaptureDeviceInfo(out UnrealSharp.AudioCapture.AudioCaptureDeviceInfo outInfo)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAudioCaptureDeviceInfo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAudioCaptureDeviceInfo_NativeFunction, ParamsBuffer);
            
            outInfo = BlittableMarshaller<UnrealSharp.AudioCapture.AudioCaptureDeviceInfo>.FromNative(IntPtr.Add(ParamsBuffer, GetAudioCaptureDeviceInfo_OutInfo_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetAudioCaptureDeviceInfo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AudioCapture;

[UClass]
public partial class AudioCaptureFunctionLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static AudioCaptureFunctionLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AudioCaptureFunctionLibrary");
        
        
        CreateAudioCapture_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateAudioCapture");
        CreateAudioCapture_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateAudioCapture_NativeFunction);
        CreateAudioCapture_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateAudioCapture_NativeFunction, "ReturnValue");
        
        
    }
    
    protected AudioCaptureFunctionLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AudioCapture.AudioCaptureFunctionLibrary:CreateAudioCapture
    static readonly IntPtr CreateAudioCapture_NativeFunction;
    static readonly int CreateAudioCapture_ParamsSize;
    static readonly int CreateAudioCapture_ReturnValue_Offset;
    
    public static UnrealSharp.AudioCapture.AudioCapture CreateAudioCapture()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateAudioCapture_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateAudioCapture_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AudioCapture.AudioCapture returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.AudioCapture.AudioCapture>.FromNative(IntPtr.Add(ParamsBuffer, CreateAudioCapture_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AudioMixer;

[UClass]
public partial class AudioMixerLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static AudioMixerLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AudioMixerBlueprintLibrary");
        
        
        TrimAudioCache_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TrimAudioCache");
        TrimAudioCache_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TrimAudioCache_NativeFunction);
        TrimAudioCache_InMegabytesToFree_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TrimAudioCache_NativeFunction, "InMegabytesToFree");
        TrimAudioCache_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TrimAudioCache_NativeFunction, "ReturnValue");
        StopRecordingOutput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopRecordingOutput");
        StopRecordingOutput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StopRecordingOutput_NativeFunction);
        StopRecordingOutput_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopRecordingOutput_NativeFunction, "WorldContextObject");
        StopRecordingOutput_ExportType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopRecordingOutput_NativeFunction, "ExportType");
        StopRecordingOutput_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopRecordingOutput_NativeFunction, "Name");
        StopRecordingOutput_Path_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopRecordingOutput_NativeFunction, "Path");
        StopRecordingOutput_SubmixToRecord_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopRecordingOutput_NativeFunction, "SubmixToRecord");
        StopRecordingOutput_ExistingSoundWaveToOverwrite_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopRecordingOutput_NativeFunction, "ExistingSoundWaveToOverwrite");
        StopRecordingOutput_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopRecordingOutput_NativeFunction, "ReturnValue");
        StopAudioBus_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopAudioBus");
        StopAudioBus_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StopAudioBus_NativeFunction);
        StopAudioBus_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopAudioBus_NativeFunction, "WorldContextObject");
        StopAudioBus_AudioBus_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopAudioBus_NativeFunction, "AudioBus");
        StopAnalyzingOutput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopAnalyzingOutput");
        StopAnalyzingOutput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StopAnalyzingOutput_NativeFunction);
        StopAnalyzingOutput_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopAnalyzingOutput_NativeFunction, "WorldContextObject");
        StopAnalyzingOutput_SubmixToStopAnalyzing_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopAnalyzingOutput_NativeFunction, "SubmixToStopAnalyzing");
        StartRecordingOutput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartRecordingOutput");
        StartRecordingOutput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StartRecordingOutput_NativeFunction);
        StartRecordingOutput_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartRecordingOutput_NativeFunction, "WorldContextObject");
        StartRecordingOutput_ExpectedDuration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartRecordingOutput_NativeFunction, "ExpectedDuration");
        StartRecordingOutput_SubmixToRecord_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartRecordingOutput_NativeFunction, "SubmixToRecord");
        StartAudioBus_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartAudioBus");
        StartAudioBus_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StartAudioBus_NativeFunction);
        StartAudioBus_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartAudioBus_NativeFunction, "WorldContextObject");
        StartAudioBus_AudioBus_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartAudioBus_NativeFunction, "AudioBus");
        StartAnalyzingOutput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartAnalyzingOutput");
        StartAnalyzingOutput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StartAnalyzingOutput_NativeFunction);
        StartAnalyzingOutput_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartAnalyzingOutput_NativeFunction, "WorldContextObject");
        StartAnalyzingOutput_SubmixToAnalyze_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartAnalyzingOutput_NativeFunction, "SubmixToAnalyze");
        StartAnalyzingOutput_FFTSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartAnalyzingOutput_NativeFunction, "FFTSize");
        StartAnalyzingOutput_InterpolationMethod_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartAnalyzingOutput_NativeFunction, "InterpolationMethod");
        StartAnalyzingOutput_WindowType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartAnalyzingOutput_NativeFunction, "WindowType");
        StartAnalyzingOutput_HopSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartAnalyzingOutput_NativeFunction, "HopSize");
        StartAnalyzingOutput_SpectrumType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartAnalyzingOutput_NativeFunction, "SpectrumType");
        SetSubmixEffectChainOverride_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSubmixEffectChainOverride");
        SetSubmixEffectChainOverride_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSubmixEffectChainOverride_NativeFunction);
        SetSubmixEffectChainOverride_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSubmixEffectChainOverride_NativeFunction, "WorldContextObject");
        SetSubmixEffectChainOverride_SoundSubmix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSubmixEffectChainOverride_NativeFunction, "SoundSubmix");
        SetSubmixEffectChainOverride_SubmixEffectPresetChain_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSubmixEffectChainOverride_NativeFunction, "SubmixEffectPresetChain");
        SetSubmixEffectChainOverride_SubmixEffectPresetChain_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetSubmixEffectChainOverride_NativeFunction, "SubmixEffectPresetChain");
        SetSubmixEffectChainOverride_FadeTimeSec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSubmixEffectChainOverride_NativeFunction, "FadeTimeSec");
        SetBypassSourceEffectChainEntry_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBypassSourceEffectChainEntry");
        SetBypassSourceEffectChainEntry_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBypassSourceEffectChainEntry_NativeFunction);
        SetBypassSourceEffectChainEntry_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBypassSourceEffectChainEntry_NativeFunction, "WorldContextObject");
        SetBypassSourceEffectChainEntry_PresetChain_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBypassSourceEffectChainEntry_NativeFunction, "PresetChain");
        SetBypassSourceEffectChainEntry_EntryIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBypassSourceEffectChainEntry_NativeFunction, "EntryIndex");
        SetBypassSourceEffectChainEntry_bBypassed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBypassSourceEffectChainEntry_NativeFunction, "bBypassed");
        ResumeRecordingOutput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResumeRecordingOutput");
        ResumeRecordingOutput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ResumeRecordingOutput_NativeFunction);
        ResumeRecordingOutput_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResumeRecordingOutput_NativeFunction, "WorldContextObject");
        ResumeRecordingOutput_SubmixToPause_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResumeRecordingOutput_NativeFunction, "SubmixToPause");
        ReplaceSubmixEffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReplaceSubmixEffect");
        ReplaceSubmixEffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReplaceSubmixEffect_NativeFunction);
        ReplaceSubmixEffect_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceSubmixEffect_NativeFunction, "WorldContextObject");
        ReplaceSubmixEffect_InSoundSubmix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceSubmixEffect_NativeFunction, "InSoundSubmix");
        ReplaceSubmixEffect_SubmixChainIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceSubmixEffect_NativeFunction, "SubmixChainIndex");
        ReplaceSubmixEffect_SubmixEffectPreset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceSubmixEffect_NativeFunction, "SubmixEffectPreset");
        ReplaceSoundEffectSubmix_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReplaceSoundEffectSubmix");
        ReplaceSoundEffectSubmix_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReplaceSoundEffectSubmix_NativeFunction);
        ReplaceSoundEffectSubmix_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceSoundEffectSubmix_NativeFunction, "WorldContextObject");
        ReplaceSoundEffectSubmix_InSoundSubmix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceSoundEffectSubmix_NativeFunction, "InSoundSubmix");
        ReplaceSoundEffectSubmix_SubmixChainIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceSoundEffectSubmix_NativeFunction, "SubmixChainIndex");
        ReplaceSoundEffectSubmix_SubmixEffectPreset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceSoundEffectSubmix_NativeFunction, "SubmixEffectPreset");
        RemoveSubmixEffectPresetAtIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveSubmixEffectPresetAtIndex");
        RemoveSubmixEffectPresetAtIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveSubmixEffectPresetAtIndex_NativeFunction);
        RemoveSubmixEffectPresetAtIndex_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSubmixEffectPresetAtIndex_NativeFunction, "WorldContextObject");
        RemoveSubmixEffectPresetAtIndex_SoundSubmix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSubmixEffectPresetAtIndex_NativeFunction, "SoundSubmix");
        RemoveSubmixEffectPresetAtIndex_SubmixChainIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSubmixEffectPresetAtIndex_NativeFunction, "SubmixChainIndex");
        RemoveSubmixEffectPreset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveSubmixEffectPreset");
        RemoveSubmixEffectPreset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveSubmixEffectPreset_NativeFunction);
        RemoveSubmixEffectPreset_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSubmixEffectPreset_NativeFunction, "WorldContextObject");
        RemoveSubmixEffectPreset_SoundSubmix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSubmixEffectPreset_NativeFunction, "SoundSubmix");
        RemoveSubmixEffectPreset_SubmixEffectPreset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSubmixEffectPreset_NativeFunction, "SubmixEffectPreset");
        RemoveSubmixEffectAtIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveSubmixEffectAtIndex");
        RemoveSubmixEffectAtIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveSubmixEffectAtIndex_NativeFunction);
        RemoveSubmixEffectAtIndex_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSubmixEffectAtIndex_NativeFunction, "WorldContextObject");
        RemoveSubmixEffectAtIndex_SoundSubmix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSubmixEffectAtIndex_NativeFunction, "SoundSubmix");
        RemoveSubmixEffectAtIndex_SubmixChainIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSubmixEffectAtIndex_NativeFunction, "SubmixChainIndex");
        RemoveSubmixEffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveSubmixEffect");
        RemoveSubmixEffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveSubmixEffect_NativeFunction);
        RemoveSubmixEffect_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSubmixEffect_NativeFunction, "WorldContextObject");
        RemoveSubmixEffect_SoundSubmix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSubmixEffect_NativeFunction, "SoundSubmix");
        RemoveSubmixEffect_SubmixEffectPreset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSubmixEffect_NativeFunction, "SubmixEffectPreset");
        RemoveSourceEffectFromPresetChain_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveSourceEffectFromPresetChain");
        RemoveSourceEffectFromPresetChain_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveSourceEffectFromPresetChain_NativeFunction);
        RemoveSourceEffectFromPresetChain_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSourceEffectFromPresetChain_NativeFunction, "WorldContextObject");
        RemoveSourceEffectFromPresetChain_PresetChain_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSourceEffectFromPresetChain_NativeFunction, "PresetChain");
        RemoveSourceEffectFromPresetChain_EntryIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSourceEffectFromPresetChain_NativeFunction, "EntryIndex");
        RemoveMasterSubmixEffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveMasterSubmixEffect");
        RemoveMasterSubmixEffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveMasterSubmixEffect_NativeFunction);
        RemoveMasterSubmixEffect_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveMasterSubmixEffect_NativeFunction, "WorldContextObject");
        RemoveMasterSubmixEffect_SubmixEffectPreset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveMasterSubmixEffect_NativeFunction, "SubmixEffectPreset");
        PrimeSoundCueForPlayback_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PrimeSoundCueForPlayback");
        PrimeSoundCueForPlayback_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PrimeSoundCueForPlayback_NativeFunction);
        PrimeSoundCueForPlayback_SoundCue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PrimeSoundCueForPlayback_NativeFunction, "SoundCue");
        PauseRecordingOutput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PauseRecordingOutput");
        PauseRecordingOutput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PauseRecordingOutput_NativeFunction);
        PauseRecordingOutput_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PauseRecordingOutput_NativeFunction, "WorldContextObject");
        PauseRecordingOutput_SubmixToPause_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PauseRecordingOutput_NativeFunction, "SubmixToPause");
        MakePresetSpectralAnalysisBandSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakePresetSpectralAnalysisBandSettings");
        MakePresetSpectralAnalysisBandSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakePresetSpectralAnalysisBandSettings_NativeFunction);
        MakePresetSpectralAnalysisBandSettings_InBandPresetType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakePresetSpectralAnalysisBandSettings_NativeFunction, "InBandPresetType");
        MakePresetSpectralAnalysisBandSettings_InNumBands_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakePresetSpectralAnalysisBandSettings_NativeFunction, "InNumBands");
        MakePresetSpectralAnalysisBandSettings_InAttackTimeMsec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakePresetSpectralAnalysisBandSettings_NativeFunction, "InAttackTimeMsec");
        MakePresetSpectralAnalysisBandSettings_InReleaseTimeMsec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakePresetSpectralAnalysisBandSettings_NativeFunction, "InReleaseTimeMsec");
        MakePresetSpectralAnalysisBandSettings_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakePresetSpectralAnalysisBandSettings_NativeFunction, "ReturnValue");
        MakePresetSpectralAnalysisBandSettings_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(MakePresetSpectralAnalysisBandSettings_NativeFunction, "ReturnValue");
        MakeMusicalSpectralAnalysisBandSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeMusicalSpectralAnalysisBandSettings");
        MakeMusicalSpectralAnalysisBandSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeMusicalSpectralAnalysisBandSettings_NativeFunction);
        MakeMusicalSpectralAnalysisBandSettings_InNumSemitones_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeMusicalSpectralAnalysisBandSettings_NativeFunction, "InNumSemitones");
        MakeMusicalSpectralAnalysisBandSettings_InStartingMusicalNote_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeMusicalSpectralAnalysisBandSettings_NativeFunction, "InStartingMusicalNote");
        MakeMusicalSpectralAnalysisBandSettings_InStartingOctave_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeMusicalSpectralAnalysisBandSettings_NativeFunction, "InStartingOctave");
        MakeMusicalSpectralAnalysisBandSettings_InAttackTimeMsec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeMusicalSpectralAnalysisBandSettings_NativeFunction, "InAttackTimeMsec");
        MakeMusicalSpectralAnalysisBandSettings_InReleaseTimeMsec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeMusicalSpectralAnalysisBandSettings_NativeFunction, "InReleaseTimeMsec");
        MakeMusicalSpectralAnalysisBandSettings_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeMusicalSpectralAnalysisBandSettings_NativeFunction, "ReturnValue");
        MakeMusicalSpectralAnalysisBandSettings_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(MakeMusicalSpectralAnalysisBandSettings_NativeFunction, "ReturnValue");
        MakeFullSpectrumSpectralAnalysisBandSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeFullSpectrumSpectralAnalysisBandSettings");
        MakeFullSpectrumSpectralAnalysisBandSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeFullSpectrumSpectralAnalysisBandSettings_NativeFunction);
        MakeFullSpectrumSpectralAnalysisBandSettings_InNumBands_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeFullSpectrumSpectralAnalysisBandSettings_NativeFunction, "InNumBands");
        MakeFullSpectrumSpectralAnalysisBandSettings_InMinimumFrequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeFullSpectrumSpectralAnalysisBandSettings_NativeFunction, "InMinimumFrequency");
        MakeFullSpectrumSpectralAnalysisBandSettings_InMaximumFrequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeFullSpectrumSpectralAnalysisBandSettings_NativeFunction, "InMaximumFrequency");
        MakeFullSpectrumSpectralAnalysisBandSettings_InAttackTimeMsec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeFullSpectrumSpectralAnalysisBandSettings_NativeFunction, "InAttackTimeMsec");
        MakeFullSpectrumSpectralAnalysisBandSettings_InReleaseTimeMsec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeFullSpectrumSpectralAnalysisBandSettings_NativeFunction, "InReleaseTimeMsec");
        MakeFullSpectrumSpectralAnalysisBandSettings_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeFullSpectrumSpectralAnalysisBandSettings_NativeFunction, "ReturnValue");
        MakeFullSpectrumSpectralAnalysisBandSettings_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(MakeFullSpectrumSpectralAnalysisBandSettings_NativeFunction, "ReturnValue");
        IsAudioBusActive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsAudioBusActive");
        IsAudioBusActive_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsAudioBusActive_NativeFunction);
        IsAudioBusActive_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAudioBusActive_NativeFunction, "WorldContextObject");
        IsAudioBusActive_AudioBus_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAudioBusActive_NativeFunction, "AudioBus");
        IsAudioBusActive_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAudioBusActive_NativeFunction, "ReturnValue");
        GetPhaseForFrequencies_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPhaseForFrequencies");
        GetPhaseForFrequencies_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPhaseForFrequencies_NativeFunction);
        GetPhaseForFrequencies_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhaseForFrequencies_NativeFunction, "WorldContextObject");
        GetPhaseForFrequencies_Frequencies_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhaseForFrequencies_NativeFunction, "Frequencies");
        GetPhaseForFrequencies_Frequencies_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetPhaseForFrequencies_NativeFunction, "Frequencies");
        GetPhaseForFrequencies_Phases_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhaseForFrequencies_NativeFunction, "Phases");
        GetPhaseForFrequencies_Phases_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetPhaseForFrequencies_NativeFunction, "Phases");
        GetPhaseForFrequencies_SubmixToAnalyze_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhaseForFrequencies_NativeFunction, "SubmixToAnalyze");
        GetNumberOfEntriesInSourceEffectChain_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumberOfEntriesInSourceEffectChain");
        GetNumberOfEntriesInSourceEffectChain_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumberOfEntriesInSourceEffectChain_NativeFunction);
        GetNumberOfEntriesInSourceEffectChain_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumberOfEntriesInSourceEffectChain_NativeFunction, "WorldContextObject");
        GetNumberOfEntriesInSourceEffectChain_PresetChain_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumberOfEntriesInSourceEffectChain_NativeFunction, "PresetChain");
        GetNumberOfEntriesInSourceEffectChain_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumberOfEntriesInSourceEffectChain_NativeFunction, "ReturnValue");
        GetMagnitudeForFrequencies_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMagnitudeForFrequencies");
        GetMagnitudeForFrequencies_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMagnitudeForFrequencies_NativeFunction);
        GetMagnitudeForFrequencies_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMagnitudeForFrequencies_NativeFunction, "WorldContextObject");
        GetMagnitudeForFrequencies_Frequencies_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMagnitudeForFrequencies_NativeFunction, "Frequencies");
        GetMagnitudeForFrequencies_Frequencies_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetMagnitudeForFrequencies_NativeFunction, "Frequencies");
        GetMagnitudeForFrequencies_Magnitudes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMagnitudeForFrequencies_NativeFunction, "Magnitudes");
        GetMagnitudeForFrequencies_Magnitudes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetMagnitudeForFrequencies_NativeFunction, "Magnitudes");
        GetMagnitudeForFrequencies_SubmixToAnalyze_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMagnitudeForFrequencies_NativeFunction, "SubmixToAnalyze");
        Conv_AudioOutputDeviceInfoToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_AudioOutputDeviceInfoToString");
        Conv_AudioOutputDeviceInfoToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_AudioOutputDeviceInfoToString_NativeFunction);
        Conv_AudioOutputDeviceInfoToString_Info_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_AudioOutputDeviceInfoToString_NativeFunction, "Info");
        Conv_AudioOutputDeviceInfoToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_AudioOutputDeviceInfoToString_NativeFunction, "ReturnValue");
        ClearSubmixEffects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearSubmixEffects");
        ClearSubmixEffects_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClearSubmixEffects_NativeFunction);
        ClearSubmixEffects_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearSubmixEffects_NativeFunction, "WorldContextObject");
        ClearSubmixEffects_SoundSubmix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearSubmixEffects_NativeFunction, "SoundSubmix");
        ClearSubmixEffectChainOverride_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearSubmixEffectChainOverride");
        ClearSubmixEffectChainOverride_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClearSubmixEffectChainOverride_NativeFunction);
        ClearSubmixEffectChainOverride_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearSubmixEffectChainOverride_NativeFunction, "WorldContextObject");
        ClearSubmixEffectChainOverride_SoundSubmix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearSubmixEffectChainOverride_NativeFunction, "SoundSubmix");
        ClearSubmixEffectChainOverride_FadeTimeSec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearSubmixEffectChainOverride_NativeFunction, "FadeTimeSec");
        ClearMasterSubmixEffects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearMasterSubmixEffects");
        ClearMasterSubmixEffects_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClearMasterSubmixEffects_NativeFunction);
        ClearMasterSubmixEffects_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearMasterSubmixEffects_NativeFunction, "WorldContextObject");
        AddSubmixEffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddSubmixEffect");
        AddSubmixEffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddSubmixEffect_NativeFunction);
        AddSubmixEffect_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSubmixEffect_NativeFunction, "WorldContextObject");
        AddSubmixEffect_SoundSubmix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSubmixEffect_NativeFunction, "SoundSubmix");
        AddSubmixEffect_SubmixEffectPreset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSubmixEffect_NativeFunction, "SubmixEffectPreset");
        AddSubmixEffect_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSubmixEffect_NativeFunction, "ReturnValue");
        AddSourceEffectToPresetChain_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddSourceEffectToPresetChain");
        AddSourceEffectToPresetChain_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddSourceEffectToPresetChain_NativeFunction);
        AddSourceEffectToPresetChain_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSourceEffectToPresetChain_NativeFunction, "WorldContextObject");
        AddSourceEffectToPresetChain_PresetChain_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSourceEffectToPresetChain_NativeFunction, "PresetChain");
        AddSourceEffectToPresetChain_Entry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSourceEffectToPresetChain_NativeFunction, "Entry");
        AddMasterSubmixEffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddMasterSubmixEffect");
        AddMasterSubmixEffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddMasterSubmixEffect_NativeFunction);
        AddMasterSubmixEffect_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMasterSubmixEffect_NativeFunction, "WorldContextObject");
        AddMasterSubmixEffect_SubmixEffectPreset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMasterSubmixEffect_NativeFunction, "SubmixEffectPreset");
        
        
    }
    
    protected AudioMixerLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:TrimAudioCache
    static readonly IntPtr TrimAudioCache_NativeFunction;
    static readonly int TrimAudioCache_ParamsSize;
    static readonly int TrimAudioCache_InMegabytesToFree_Offset;
    static readonly int TrimAudioCache_ReturnValue_Offset;
    
    public static float TrimAudioCache(float inMegabytesToFree)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TrimAudioCache_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, TrimAudioCache_InMegabytesToFree_Offset), 0, null, inMegabytesToFree);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, TrimAudioCache_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, TrimAudioCache_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:StopRecordingOutput
    static readonly IntPtr StopRecordingOutput_NativeFunction;
    static readonly int StopRecordingOutput_ParamsSize;
    static readonly int StopRecordingOutput_WorldContextObject_Offset;
    static readonly int StopRecordingOutput_ExportType_Offset;
    static readonly int StopRecordingOutput_Name_Offset;
    static readonly int StopRecordingOutput_Path_Offset;
    static readonly int StopRecordingOutput_SubmixToRecord_Offset;
    static readonly int StopRecordingOutput_ExistingSoundWaveToOverwrite_Offset;
    static readonly int StopRecordingOutput_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.SoundWave StopRecordingOutput(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.EAudioRecordingExportType exportType, string name, string path, UnrealSharp.Engine.SoundSubmix submixToRecord = default(UnrealSharp.Engine.SoundSubmix), UnrealSharp.Engine.SoundWave existingSoundWaveToOverwrite = default(UnrealSharp.Engine.SoundWave))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StopRecordingOutput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, StopRecordingOutput_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<UnrealSharp.Engine.EAudioRecordingExportType>.ToNative(IntPtr.Add(ParamsBuffer, StopRecordingOutput_ExportType_Offset), 0, null, exportType);
            IntPtr Name_NativePtr = IntPtr.Add(ParamsBuffer,StopRecordingOutput_Name_Offset);
            StringMarshaller.ToNative(Name_NativePtr,0,null,name);
            IntPtr Path_NativePtr = IntPtr.Add(ParamsBuffer,StopRecordingOutput_Path_Offset);
            StringMarshaller.ToNative(Path_NativePtr,0,null,path);
            ObjectMarshaller<UnrealSharp.Engine.SoundSubmix>.ToNative(IntPtr.Add(ParamsBuffer, StopRecordingOutput_SubmixToRecord_Offset), 0, null, submixToRecord);
            ObjectMarshaller<UnrealSharp.Engine.SoundWave>.ToNative(IntPtr.Add(ParamsBuffer, StopRecordingOutput_ExistingSoundWaveToOverwrite_Offset), 0, null, existingSoundWaveToOverwrite);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, StopRecordingOutput_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.SoundWave returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.SoundWave>.FromNative(IntPtr.Add(ParamsBuffer, StopRecordingOutput_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(Name_NativePtr, 0);
            StringMarshaller.DestructInstance(Path_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:StopAudioBus
    static readonly IntPtr StopAudioBus_NativeFunction;
    static readonly int StopAudioBus_ParamsSize;
    static readonly int StopAudioBus_WorldContextObject_Offset;
    static readonly int StopAudioBus_AudioBus_Offset;
    
    public static void StopAudioBus(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.AudioBus audioBus)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StopAudioBus_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, StopAudioBus_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.AudioBus>.ToNative(IntPtr.Add(ParamsBuffer, StopAudioBus_AudioBus_Offset), 0, null, audioBus);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, StopAudioBus_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:StopAnalyzingOutput
    static readonly IntPtr StopAnalyzingOutput_NativeFunction;
    static readonly int StopAnalyzingOutput_ParamsSize;
    static readonly int StopAnalyzingOutput_WorldContextObject_Offset;
    static readonly int StopAnalyzingOutput_SubmixToStopAnalyzing_Offset;
    
    public static void StopAnalyzingOutput(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundSubmix submixToStopAnalyzing = default(UnrealSharp.Engine.SoundSubmix))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StopAnalyzingOutput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, StopAnalyzingOutput_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundSubmix>.ToNative(IntPtr.Add(ParamsBuffer, StopAnalyzingOutput_SubmixToStopAnalyzing_Offset), 0, null, submixToStopAnalyzing);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, StopAnalyzingOutput_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:StartRecordingOutput
    static readonly IntPtr StartRecordingOutput_NativeFunction;
    static readonly int StartRecordingOutput_ParamsSize;
    static readonly int StartRecordingOutput_WorldContextObject_Offset;
    static readonly int StartRecordingOutput_ExpectedDuration_Offset;
    static readonly int StartRecordingOutput_SubmixToRecord_Offset;
    
    public static void StartRecordingOutput(UnrealSharp.CoreUObject.Object worldContextObject, float expectedDuration, UnrealSharp.Engine.SoundSubmix submixToRecord = default(UnrealSharp.Engine.SoundSubmix))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StartRecordingOutput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, StartRecordingOutput_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, StartRecordingOutput_ExpectedDuration_Offset), 0, null, expectedDuration);
            ObjectMarshaller<UnrealSharp.Engine.SoundSubmix>.ToNative(IntPtr.Add(ParamsBuffer, StartRecordingOutput_SubmixToRecord_Offset), 0, null, submixToRecord);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, StartRecordingOutput_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:StartAudioBus
    static readonly IntPtr StartAudioBus_NativeFunction;
    static readonly int StartAudioBus_ParamsSize;
    static readonly int StartAudioBus_WorldContextObject_Offset;
    static readonly int StartAudioBus_AudioBus_Offset;
    
    public static void StartAudioBus(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.AudioBus audioBus)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StartAudioBus_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, StartAudioBus_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.AudioBus>.ToNative(IntPtr.Add(ParamsBuffer, StartAudioBus_AudioBus_Offset), 0, null, audioBus);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, StartAudioBus_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:StartAnalyzingOutput
    static readonly IntPtr StartAnalyzingOutput_NativeFunction;
    static readonly int StartAnalyzingOutput_ParamsSize;
    static readonly int StartAnalyzingOutput_WorldContextObject_Offset;
    static readonly int StartAnalyzingOutput_SubmixToAnalyze_Offset;
    static readonly int StartAnalyzingOutput_FFTSize_Offset;
    static readonly int StartAnalyzingOutput_InterpolationMethod_Offset;
    static readonly int StartAnalyzingOutput_WindowType_Offset;
    static readonly int StartAnalyzingOutput_HopSize_Offset;
    static readonly int StartAnalyzingOutput_SpectrumType_Offset;
    
    public static void StartAnalyzingOutput(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundSubmix submixToAnalyze = default(UnrealSharp.Engine.SoundSubmix), UnrealSharp.Engine.EFFTSize fFTSize = UnrealSharp.Engine.EFFTSize.DefaultSize, UnrealSharp.Engine.EFFTPeakInterpolationMethod interpolationMethod = UnrealSharp.Engine.EFFTPeakInterpolationMethod.Linear, UnrealSharp.Engine.EFFTWindowType windowType = UnrealSharp.Engine.EFFTWindowType.Hann, float hopSize = 0.000000f, UnrealSharp.Engine.EAudioSpectrumType spectrumType = UnrealSharp.Engine.EAudioSpectrumType.MagnitudeSpectrum)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StartAnalyzingOutput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, StartAnalyzingOutput_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundSubmix>.ToNative(IntPtr.Add(ParamsBuffer, StartAnalyzingOutput_SubmixToAnalyze_Offset), 0, null, submixToAnalyze);
            BlittableMarshaller<UnrealSharp.Engine.EFFTSize>.ToNative(IntPtr.Add(ParamsBuffer, StartAnalyzingOutput_FFTSize_Offset), 0, null, fFTSize);
            BlittableMarshaller<UnrealSharp.Engine.EFFTPeakInterpolationMethod>.ToNative(IntPtr.Add(ParamsBuffer, StartAnalyzingOutput_InterpolationMethod_Offset), 0, null, interpolationMethod);
            BlittableMarshaller<UnrealSharp.Engine.EFFTWindowType>.ToNative(IntPtr.Add(ParamsBuffer, StartAnalyzingOutput_WindowType_Offset), 0, null, windowType);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, StartAnalyzingOutput_HopSize_Offset), 0, null, hopSize);
            BlittableMarshaller<UnrealSharp.Engine.EAudioSpectrumType>.ToNative(IntPtr.Add(ParamsBuffer, StartAnalyzingOutput_SpectrumType_Offset), 0, null, spectrumType);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, StartAnalyzingOutput_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:SetSubmixEffectChainOverride
    static readonly IntPtr SetSubmixEffectChainOverride_NativeFunction;
    static readonly int SetSubmixEffectChainOverride_ParamsSize;
    static readonly int SetSubmixEffectChainOverride_WorldContextObject_Offset;
    static readonly int SetSubmixEffectChainOverride_SoundSubmix_Offset;
    static readonly int SetSubmixEffectChainOverride_SubmixEffectPresetChain_Offset;
    static readonly int SetSubmixEffectChainOverride_SubmixEffectPresetChain_ElementSize;
    static readonly int SetSubmixEffectChainOverride_FadeTimeSec_Offset;
    
    public static void SetSubmixEffectChainOverride(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundSubmix soundSubmix, System.Collections.Generic.IList<UnrealSharp.Engine.SoundEffectSubmixPreset> submixEffectPresetChain, float fadeTimeSec)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSubmixEffectChainOverride_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetSubmixEffectChainOverride_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundSubmix>.ToNative(IntPtr.Add(ParamsBuffer, SetSubmixEffectChainOverride_SoundSubmix_Offset), 0, null, soundSubmix);
            IntPtr SubmixEffectPresetChain_NativeBuffer = IntPtr.Add(ParamsBuffer, SetSubmixEffectChainOverride_SubmixEffectPresetChain_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.SoundEffectSubmixPreset> SubmixEffectPresetChain_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.SoundEffectSubmixPreset>(1, ObjectMarshaller<UnrealSharp.Engine.SoundEffectSubmixPreset>.ToNative, ObjectMarshaller<UnrealSharp.Engine.SoundEffectSubmixPreset>.FromNative, SetSubmixEffectChainOverride_SubmixEffectPresetChain_ElementSize);
            SubmixEffectPresetChain_Marshaler.ToNative(SubmixEffectPresetChain_NativeBuffer, 0, null, submixEffectPresetChain);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSubmixEffectChainOverride_FadeTimeSec_Offset), 0, null, fadeTimeSec);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetSubmixEffectChainOverride_NativeFunction, ParamsBuffer);
            
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.SoundEffectSubmixPreset>.DestructInstance(SubmixEffectPresetChain_NativeBuffer, 0);
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:SetBypassSourceEffectChainEntry
    static readonly IntPtr SetBypassSourceEffectChainEntry_NativeFunction;
    static readonly int SetBypassSourceEffectChainEntry_ParamsSize;
    static readonly int SetBypassSourceEffectChainEntry_WorldContextObject_Offset;
    static readonly int SetBypassSourceEffectChainEntry_PresetChain_Offset;
    static readonly int SetBypassSourceEffectChainEntry_EntryIndex_Offset;
    static readonly int SetBypassSourceEffectChainEntry_bBypassed_Offset;
    
    public static void SetBypassSourceEffectChainEntry(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundEffectSourcePresetChain presetChain, int entryIndex, bool bBypassed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBypassSourceEffectChainEntry_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetBypassSourceEffectChainEntry_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundEffectSourcePresetChain>.ToNative(IntPtr.Add(ParamsBuffer, SetBypassSourceEffectChainEntry_PresetChain_Offset), 0, null, presetChain);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetBypassSourceEffectChainEntry_EntryIndex_Offset), 0, null, entryIndex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetBypassSourceEffectChainEntry_bBypassed_Offset), 0, null, bBypassed);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetBypassSourceEffectChainEntry_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:ResumeRecordingOutput
    static readonly IntPtr ResumeRecordingOutput_NativeFunction;
    static readonly int ResumeRecordingOutput_ParamsSize;
    static readonly int ResumeRecordingOutput_WorldContextObject_Offset;
    static readonly int ResumeRecordingOutput_SubmixToPause_Offset;
    
    public static void ResumeRecordingOutput(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundSubmix submixToPause = default(UnrealSharp.Engine.SoundSubmix))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ResumeRecordingOutput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ResumeRecordingOutput_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundSubmix>.ToNative(IntPtr.Add(ParamsBuffer, ResumeRecordingOutput_SubmixToPause_Offset), 0, null, submixToPause);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ResumeRecordingOutput_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:ReplaceSubmixEffect
    static readonly IntPtr ReplaceSubmixEffect_NativeFunction;
    static readonly int ReplaceSubmixEffect_ParamsSize;
    static readonly int ReplaceSubmixEffect_WorldContextObject_Offset;
    static readonly int ReplaceSubmixEffect_InSoundSubmix_Offset;
    static readonly int ReplaceSubmixEffect_SubmixChainIndex_Offset;
    static readonly int ReplaceSubmixEffect_SubmixEffectPreset_Offset;
    
    public static void ReplaceSubmixEffect(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundSubmix inSoundSubmix, int submixChainIndex, UnrealSharp.Engine.SoundEffectSubmixPreset submixEffectPreset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReplaceSubmixEffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ReplaceSubmixEffect_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundSubmix>.ToNative(IntPtr.Add(ParamsBuffer, ReplaceSubmixEffect_InSoundSubmix_Offset), 0, null, inSoundSubmix);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReplaceSubmixEffect_SubmixChainIndex_Offset), 0, null, submixChainIndex);
            ObjectMarshaller<UnrealSharp.Engine.SoundEffectSubmixPreset>.ToNative(IntPtr.Add(ParamsBuffer, ReplaceSubmixEffect_SubmixEffectPreset_Offset), 0, null, submixEffectPreset);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ReplaceSubmixEffect_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:ReplaceSoundEffectSubmix
    static readonly IntPtr ReplaceSoundEffectSubmix_NativeFunction;
    static readonly int ReplaceSoundEffectSubmix_ParamsSize;
    static readonly int ReplaceSoundEffectSubmix_WorldContextObject_Offset;
    static readonly int ReplaceSoundEffectSubmix_InSoundSubmix_Offset;
    static readonly int ReplaceSoundEffectSubmix_SubmixChainIndex_Offset;
    static readonly int ReplaceSoundEffectSubmix_SubmixEffectPreset_Offset;
    
    [Obsolete("This function is obsolete")]
    public static void ReplaceSoundEffectSubmix(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundSubmix inSoundSubmix, int submixChainIndex, UnrealSharp.Engine.SoundEffectSubmixPreset submixEffectPreset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReplaceSoundEffectSubmix_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ReplaceSoundEffectSubmix_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundSubmix>.ToNative(IntPtr.Add(ParamsBuffer, ReplaceSoundEffectSubmix_InSoundSubmix_Offset), 0, null, inSoundSubmix);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReplaceSoundEffectSubmix_SubmixChainIndex_Offset), 0, null, submixChainIndex);
            ObjectMarshaller<UnrealSharp.Engine.SoundEffectSubmixPreset>.ToNative(IntPtr.Add(ParamsBuffer, ReplaceSoundEffectSubmix_SubmixEffectPreset_Offset), 0, null, submixEffectPreset);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ReplaceSoundEffectSubmix_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:RemoveSubmixEffectPresetAtIndex
    static readonly IntPtr RemoveSubmixEffectPresetAtIndex_NativeFunction;
    static readonly int RemoveSubmixEffectPresetAtIndex_ParamsSize;
    static readonly int RemoveSubmixEffectPresetAtIndex_WorldContextObject_Offset;
    static readonly int RemoveSubmixEffectPresetAtIndex_SoundSubmix_Offset;
    static readonly int RemoveSubmixEffectPresetAtIndex_SubmixChainIndex_Offset;
    
    [Obsolete("This function is obsolete")]
    public static void RemoveSubmixEffectPresetAtIndex(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundSubmix soundSubmix, int submixChainIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveSubmixEffectPresetAtIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, RemoveSubmixEffectPresetAtIndex_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundSubmix>.ToNative(IntPtr.Add(ParamsBuffer, RemoveSubmixEffectPresetAtIndex_SoundSubmix_Offset), 0, null, soundSubmix);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, RemoveSubmixEffectPresetAtIndex_SubmixChainIndex_Offset), 0, null, submixChainIndex);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveSubmixEffectPresetAtIndex_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:RemoveSubmixEffectPreset
    static readonly IntPtr RemoveSubmixEffectPreset_NativeFunction;
    static readonly int RemoveSubmixEffectPreset_ParamsSize;
    static readonly int RemoveSubmixEffectPreset_WorldContextObject_Offset;
    static readonly int RemoveSubmixEffectPreset_SoundSubmix_Offset;
    static readonly int RemoveSubmixEffectPreset_SubmixEffectPreset_Offset;
    
    [Obsolete("This function is obsolete")]
    public static void RemoveSubmixEffectPreset(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundSubmix soundSubmix, UnrealSharp.Engine.SoundEffectSubmixPreset submixEffectPreset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveSubmixEffectPreset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, RemoveSubmixEffectPreset_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundSubmix>.ToNative(IntPtr.Add(ParamsBuffer, RemoveSubmixEffectPreset_SoundSubmix_Offset), 0, null, soundSubmix);
            ObjectMarshaller<UnrealSharp.Engine.SoundEffectSubmixPreset>.ToNative(IntPtr.Add(ParamsBuffer, RemoveSubmixEffectPreset_SubmixEffectPreset_Offset), 0, null, submixEffectPreset);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveSubmixEffectPreset_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:RemoveSubmixEffectAtIndex
    static readonly IntPtr RemoveSubmixEffectAtIndex_NativeFunction;
    static readonly int RemoveSubmixEffectAtIndex_ParamsSize;
    static readonly int RemoveSubmixEffectAtIndex_WorldContextObject_Offset;
    static readonly int RemoveSubmixEffectAtIndex_SoundSubmix_Offset;
    static readonly int RemoveSubmixEffectAtIndex_SubmixChainIndex_Offset;
    
    public static void RemoveSubmixEffectAtIndex(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundSubmix soundSubmix, int submixChainIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveSubmixEffectAtIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, RemoveSubmixEffectAtIndex_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundSubmix>.ToNative(IntPtr.Add(ParamsBuffer, RemoveSubmixEffectAtIndex_SoundSubmix_Offset), 0, null, soundSubmix);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, RemoveSubmixEffectAtIndex_SubmixChainIndex_Offset), 0, null, submixChainIndex);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveSubmixEffectAtIndex_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:RemoveSubmixEffect
    static readonly IntPtr RemoveSubmixEffect_NativeFunction;
    static readonly int RemoveSubmixEffect_ParamsSize;
    static readonly int RemoveSubmixEffect_WorldContextObject_Offset;
    static readonly int RemoveSubmixEffect_SoundSubmix_Offset;
    static readonly int RemoveSubmixEffect_SubmixEffectPreset_Offset;
    
    public static void RemoveSubmixEffect(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundSubmix soundSubmix, UnrealSharp.Engine.SoundEffectSubmixPreset submixEffectPreset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveSubmixEffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, RemoveSubmixEffect_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundSubmix>.ToNative(IntPtr.Add(ParamsBuffer, RemoveSubmixEffect_SoundSubmix_Offset), 0, null, soundSubmix);
            ObjectMarshaller<UnrealSharp.Engine.SoundEffectSubmixPreset>.ToNative(IntPtr.Add(ParamsBuffer, RemoveSubmixEffect_SubmixEffectPreset_Offset), 0, null, submixEffectPreset);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveSubmixEffect_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:RemoveSourceEffectFromPresetChain
    static readonly IntPtr RemoveSourceEffectFromPresetChain_NativeFunction;
    static readonly int RemoveSourceEffectFromPresetChain_ParamsSize;
    static readonly int RemoveSourceEffectFromPresetChain_WorldContextObject_Offset;
    static readonly int RemoveSourceEffectFromPresetChain_PresetChain_Offset;
    static readonly int RemoveSourceEffectFromPresetChain_EntryIndex_Offset;
    
    public static void RemoveSourceEffectFromPresetChain(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundEffectSourcePresetChain presetChain, int entryIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveSourceEffectFromPresetChain_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, RemoveSourceEffectFromPresetChain_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundEffectSourcePresetChain>.ToNative(IntPtr.Add(ParamsBuffer, RemoveSourceEffectFromPresetChain_PresetChain_Offset), 0, null, presetChain);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, RemoveSourceEffectFromPresetChain_EntryIndex_Offset), 0, null, entryIndex);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveSourceEffectFromPresetChain_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:RemoveMasterSubmixEffect
    static readonly IntPtr RemoveMasterSubmixEffect_NativeFunction;
    static readonly int RemoveMasterSubmixEffect_ParamsSize;
    static readonly int RemoveMasterSubmixEffect_WorldContextObject_Offset;
    static readonly int RemoveMasterSubmixEffect_SubmixEffectPreset_Offset;
    
    public static void RemoveMasterSubmixEffect(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundEffectSubmixPreset submixEffectPreset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveMasterSubmixEffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, RemoveMasterSubmixEffect_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundEffectSubmixPreset>.ToNative(IntPtr.Add(ParamsBuffer, RemoveMasterSubmixEffect_SubmixEffectPreset_Offset), 0, null, submixEffectPreset);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveMasterSubmixEffect_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:PrimeSoundCueForPlayback
    static readonly IntPtr PrimeSoundCueForPlayback_NativeFunction;
    static readonly int PrimeSoundCueForPlayback_ParamsSize;
    static readonly int PrimeSoundCueForPlayback_SoundCue_Offset;
    
    public static void PrimeSoundCueForPlayback(UnrealSharp.Engine.SoundCue soundCue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PrimeSoundCueForPlayback_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SoundCue>.ToNative(IntPtr.Add(ParamsBuffer, PrimeSoundCueForPlayback_SoundCue_Offset), 0, null, soundCue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, PrimeSoundCueForPlayback_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:PauseRecordingOutput
    static readonly IntPtr PauseRecordingOutput_NativeFunction;
    static readonly int PauseRecordingOutput_ParamsSize;
    static readonly int PauseRecordingOutput_WorldContextObject_Offset;
    static readonly int PauseRecordingOutput_SubmixToPause_Offset;
    
    public static void PauseRecordingOutput(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundSubmix submixToPause = default(UnrealSharp.Engine.SoundSubmix))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PauseRecordingOutput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, PauseRecordingOutput_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundSubmix>.ToNative(IntPtr.Add(ParamsBuffer, PauseRecordingOutput_SubmixToPause_Offset), 0, null, submixToPause);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, PauseRecordingOutput_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:MakePresetSpectralAnalysisBandSettings
    static readonly IntPtr MakePresetSpectralAnalysisBandSettings_NativeFunction;
    static readonly int MakePresetSpectralAnalysisBandSettings_ParamsSize;
    static readonly int MakePresetSpectralAnalysisBandSettings_InBandPresetType_Offset;
    static readonly int MakePresetSpectralAnalysisBandSettings_InNumBands_Offset;
    static readonly int MakePresetSpectralAnalysisBandSettings_InAttackTimeMsec_Offset;
    static readonly int MakePresetSpectralAnalysisBandSettings_InReleaseTimeMsec_Offset;
    static readonly int MakePresetSpectralAnalysisBandSettings_ReturnValue_Offset;
    static readonly int MakePresetSpectralAnalysisBandSettings_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.Engine.SoundSubmixSpectralAnalysisBandSettings> MakePresetSpectralAnalysisBandSettings(UnrealSharp.Engine.EAudioSpectrumBandPresetType inBandPresetType, int inNumBands = 10, int inAttackTimeMsec = 10, int inReleaseTimeMsec = 10)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakePresetSpectralAnalysisBandSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EAudioSpectrumBandPresetType>.ToNative(IntPtr.Add(ParamsBuffer, MakePresetSpectralAnalysisBandSettings_InBandPresetType_Offset), 0, null, inBandPresetType);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, MakePresetSpectralAnalysisBandSettings_InNumBands_Offset), 0, null, inNumBands);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, MakePresetSpectralAnalysisBandSettings_InAttackTimeMsec_Offset), 0, null, inAttackTimeMsec);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, MakePresetSpectralAnalysisBandSettings_InReleaseTimeMsec_Offset), 0, null, inReleaseTimeMsec);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakePresetSpectralAnalysisBandSettings_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.Engine.SoundSubmixSpectralAnalysisBandSettings> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, MakePresetSpectralAnalysisBandSettings_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.SoundSubmixSpectralAnalysisBandSettings> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.SoundSubmixSpectralAnalysisBandSettings> (1, BlittableMarshaller<UnrealSharp.Engine.SoundSubmixSpectralAnalysisBandSettings>.ToNative, BlittableMarshaller<UnrealSharp.Engine.SoundSubmixSpectralAnalysisBandSettings>.FromNative, MakePresetSpectralAnalysisBandSettings_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.SoundSubmixSpectralAnalysisBandSettings>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:MakeMusicalSpectralAnalysisBandSettings
    static readonly IntPtr MakeMusicalSpectralAnalysisBandSettings_NativeFunction;
    static readonly int MakeMusicalSpectralAnalysisBandSettings_ParamsSize;
    static readonly int MakeMusicalSpectralAnalysisBandSettings_InNumSemitones_Offset;
    static readonly int MakeMusicalSpectralAnalysisBandSettings_InStartingMusicalNote_Offset;
    static readonly int MakeMusicalSpectralAnalysisBandSettings_InStartingOctave_Offset;
    static readonly int MakeMusicalSpectralAnalysisBandSettings_InAttackTimeMsec_Offset;
    static readonly int MakeMusicalSpectralAnalysisBandSettings_InReleaseTimeMsec_Offset;
    static readonly int MakeMusicalSpectralAnalysisBandSettings_ReturnValue_Offset;
    static readonly int MakeMusicalSpectralAnalysisBandSettings_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.Engine.SoundSubmixSpectralAnalysisBandSettings> MakeMusicalSpectralAnalysisBandSettings(int inNumSemitones = 60, UnrealSharp.AudioMixer.EMusicalNoteName inStartingMusicalNote = UnrealSharp.AudioMixer.EMusicalNoteName.C, int inStartingOctave = 2, int inAttackTimeMsec = 10, int inReleaseTimeMsec = 10)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeMusicalSpectralAnalysisBandSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, MakeMusicalSpectralAnalysisBandSettings_InNumSemitones_Offset), 0, null, inNumSemitones);
            BlittableMarshaller<UnrealSharp.AudioMixer.EMusicalNoteName>.ToNative(IntPtr.Add(ParamsBuffer, MakeMusicalSpectralAnalysisBandSettings_InStartingMusicalNote_Offset), 0, null, inStartingMusicalNote);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, MakeMusicalSpectralAnalysisBandSettings_InStartingOctave_Offset), 0, null, inStartingOctave);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, MakeMusicalSpectralAnalysisBandSettings_InAttackTimeMsec_Offset), 0, null, inAttackTimeMsec);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, MakeMusicalSpectralAnalysisBandSettings_InReleaseTimeMsec_Offset), 0, null, inReleaseTimeMsec);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeMusicalSpectralAnalysisBandSettings_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.Engine.SoundSubmixSpectralAnalysisBandSettings> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, MakeMusicalSpectralAnalysisBandSettings_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.SoundSubmixSpectralAnalysisBandSettings> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.SoundSubmixSpectralAnalysisBandSettings> (1, BlittableMarshaller<UnrealSharp.Engine.SoundSubmixSpectralAnalysisBandSettings>.ToNative, BlittableMarshaller<UnrealSharp.Engine.SoundSubmixSpectralAnalysisBandSettings>.FromNative, MakeMusicalSpectralAnalysisBandSettings_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.SoundSubmixSpectralAnalysisBandSettings>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:MakeFullSpectrumSpectralAnalysisBandSettings
    static readonly IntPtr MakeFullSpectrumSpectralAnalysisBandSettings_NativeFunction;
    static readonly int MakeFullSpectrumSpectralAnalysisBandSettings_ParamsSize;
    static readonly int MakeFullSpectrumSpectralAnalysisBandSettings_InNumBands_Offset;
    static readonly int MakeFullSpectrumSpectralAnalysisBandSettings_InMinimumFrequency_Offset;
    static readonly int MakeFullSpectrumSpectralAnalysisBandSettings_InMaximumFrequency_Offset;
    static readonly int MakeFullSpectrumSpectralAnalysisBandSettings_InAttackTimeMsec_Offset;
    static readonly int MakeFullSpectrumSpectralAnalysisBandSettings_InReleaseTimeMsec_Offset;
    static readonly int MakeFullSpectrumSpectralAnalysisBandSettings_ReturnValue_Offset;
    static readonly int MakeFullSpectrumSpectralAnalysisBandSettings_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.Engine.SoundSubmixSpectralAnalysisBandSettings> MakeFullSpectrumSpectralAnalysisBandSettings(int inNumBands = 30, float inMinimumFrequency = 40.000000f, float inMaximumFrequency = 16000.000000f, int inAttackTimeMsec = 10, int inReleaseTimeMsec = 10)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeFullSpectrumSpectralAnalysisBandSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, MakeFullSpectrumSpectralAnalysisBandSettings_InNumBands_Offset), 0, null, inNumBands);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, MakeFullSpectrumSpectralAnalysisBandSettings_InMinimumFrequency_Offset), 0, null, inMinimumFrequency);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, MakeFullSpectrumSpectralAnalysisBandSettings_InMaximumFrequency_Offset), 0, null, inMaximumFrequency);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, MakeFullSpectrumSpectralAnalysisBandSettings_InAttackTimeMsec_Offset), 0, null, inAttackTimeMsec);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, MakeFullSpectrumSpectralAnalysisBandSettings_InReleaseTimeMsec_Offset), 0, null, inReleaseTimeMsec);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeFullSpectrumSpectralAnalysisBandSettings_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.Engine.SoundSubmixSpectralAnalysisBandSettings> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, MakeFullSpectrumSpectralAnalysisBandSettings_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.SoundSubmixSpectralAnalysisBandSettings> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.SoundSubmixSpectralAnalysisBandSettings> (1, BlittableMarshaller<UnrealSharp.Engine.SoundSubmixSpectralAnalysisBandSettings>.ToNative, BlittableMarshaller<UnrealSharp.Engine.SoundSubmixSpectralAnalysisBandSettings>.FromNative, MakeFullSpectrumSpectralAnalysisBandSettings_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.SoundSubmixSpectralAnalysisBandSettings>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:IsAudioBusActive
    static readonly IntPtr IsAudioBusActive_NativeFunction;
    static readonly int IsAudioBusActive_ParamsSize;
    static readonly int IsAudioBusActive_WorldContextObject_Offset;
    static readonly int IsAudioBusActive_AudioBus_Offset;
    static readonly int IsAudioBusActive_ReturnValue_Offset;
    
    public static bool IsAudioBusActive(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.AudioBus audioBus)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsAudioBusActive_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, IsAudioBusActive_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.AudioBus>.ToNative(IntPtr.Add(ParamsBuffer, IsAudioBusActive_AudioBus_Offset), 0, null, audioBus);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsAudioBusActive_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsAudioBusActive_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:GetPhaseForFrequencies
    static readonly IntPtr GetPhaseForFrequencies_NativeFunction;
    static readonly int GetPhaseForFrequencies_ParamsSize;
    static readonly int GetPhaseForFrequencies_WorldContextObject_Offset;
    static readonly int GetPhaseForFrequencies_Frequencies_Offset;
    static readonly int GetPhaseForFrequencies_Frequencies_ElementSize;
    static readonly int GetPhaseForFrequencies_Phases_Offset;
    static readonly int GetPhaseForFrequencies_Phases_ElementSize;
    static readonly int GetPhaseForFrequencies_SubmixToAnalyze_Offset;
    
    public static void GetPhaseForFrequencies(UnrealSharp.CoreUObject.Object worldContextObject, System.Collections.Generic.IList<float> frequencies, out System.Collections.Generic.IList<float> phases, UnrealSharp.Engine.SoundSubmix submixToAnalyze = default(UnrealSharp.Engine.SoundSubmix))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPhaseForFrequencies_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetPhaseForFrequencies_WorldContextObject_Offset), 0, null, worldContextObject);
            IntPtr Frequencies_NativeBuffer = IntPtr.Add(ParamsBuffer, GetPhaseForFrequencies_Frequencies_Offset);
            UnrealArrayCopyMarshaler<float> Frequencies_Marshaler = new UnrealArrayCopyMarshaler<float>(1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, GetPhaseForFrequencies_Frequencies_ElementSize);
            Frequencies_Marshaler.ToNative(Frequencies_NativeBuffer, 0, null, frequencies);
            ObjectMarshaller<UnrealSharp.Engine.SoundSubmix>.ToNative(IntPtr.Add(ParamsBuffer, GetPhaseForFrequencies_SubmixToAnalyze_Offset), 0, null, submixToAnalyze);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPhaseForFrequencies_NativeFunction, ParamsBuffer);
            
            IntPtr Phases_NativeBuffer = IntPtr.Add(ParamsBuffer, GetPhaseForFrequencies_Phases_Offset);
            UnrealArrayCopyMarshaler<float> Phases_Marshaler = new UnrealArrayCopyMarshaler<float> (1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, GetPhaseForFrequencies_Phases_ElementSize);
            phases = Phases_Marshaler.FromNative(Phases_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<float>.DestructInstance(Phases_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:GetNumberOfEntriesInSourceEffectChain
    static readonly IntPtr GetNumberOfEntriesInSourceEffectChain_NativeFunction;
    static readonly int GetNumberOfEntriesInSourceEffectChain_ParamsSize;
    static readonly int GetNumberOfEntriesInSourceEffectChain_WorldContextObject_Offset;
    static readonly int GetNumberOfEntriesInSourceEffectChain_PresetChain_Offset;
    static readonly int GetNumberOfEntriesInSourceEffectChain_ReturnValue_Offset;
    
    public static int GetNumberOfEntriesInSourceEffectChain(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundEffectSourcePresetChain presetChain)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumberOfEntriesInSourceEffectChain_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetNumberOfEntriesInSourceEffectChain_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundEffectSourcePresetChain>.ToNative(IntPtr.Add(ParamsBuffer, GetNumberOfEntriesInSourceEffectChain_PresetChain_Offset), 0, null, presetChain);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetNumberOfEntriesInSourceEffectChain_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumberOfEntriesInSourceEffectChain_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:GetMagnitudeForFrequencies
    static readonly IntPtr GetMagnitudeForFrequencies_NativeFunction;
    static readonly int GetMagnitudeForFrequencies_ParamsSize;
    static readonly int GetMagnitudeForFrequencies_WorldContextObject_Offset;
    static readonly int GetMagnitudeForFrequencies_Frequencies_Offset;
    static readonly int GetMagnitudeForFrequencies_Frequencies_ElementSize;
    static readonly int GetMagnitudeForFrequencies_Magnitudes_Offset;
    static readonly int GetMagnitudeForFrequencies_Magnitudes_ElementSize;
    static readonly int GetMagnitudeForFrequencies_SubmixToAnalyze_Offset;
    
    public static void GetMagnitudeForFrequencies(UnrealSharp.CoreUObject.Object worldContextObject, System.Collections.Generic.IList<float> frequencies, out System.Collections.Generic.IList<float> magnitudes, UnrealSharp.Engine.SoundSubmix submixToAnalyze = default(UnrealSharp.Engine.SoundSubmix))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMagnitudeForFrequencies_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetMagnitudeForFrequencies_WorldContextObject_Offset), 0, null, worldContextObject);
            IntPtr Frequencies_NativeBuffer = IntPtr.Add(ParamsBuffer, GetMagnitudeForFrequencies_Frequencies_Offset);
            UnrealArrayCopyMarshaler<float> Frequencies_Marshaler = new UnrealArrayCopyMarshaler<float>(1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, GetMagnitudeForFrequencies_Frequencies_ElementSize);
            Frequencies_Marshaler.ToNative(Frequencies_NativeBuffer, 0, null, frequencies);
            ObjectMarshaller<UnrealSharp.Engine.SoundSubmix>.ToNative(IntPtr.Add(ParamsBuffer, GetMagnitudeForFrequencies_SubmixToAnalyze_Offset), 0, null, submixToAnalyze);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMagnitudeForFrequencies_NativeFunction, ParamsBuffer);
            
            IntPtr Magnitudes_NativeBuffer = IntPtr.Add(ParamsBuffer, GetMagnitudeForFrequencies_Magnitudes_Offset);
            UnrealArrayCopyMarshaler<float> Magnitudes_Marshaler = new UnrealArrayCopyMarshaler<float> (1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, GetMagnitudeForFrequencies_Magnitudes_ElementSize);
            magnitudes = Magnitudes_Marshaler.FromNative(Magnitudes_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<float>.DestructInstance(Magnitudes_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:Conv_AudioOutputDeviceInfoToString
    static readonly IntPtr Conv_AudioOutputDeviceInfoToString_NativeFunction;
    static readonly int Conv_AudioOutputDeviceInfoToString_ParamsSize;
    static readonly int Conv_AudioOutputDeviceInfoToString_Info_Offset;
    static readonly int Conv_AudioOutputDeviceInfoToString_ReturnValue_Offset;
    
    public static string Conv_AudioOutputDeviceInfoToString(UnrealSharp.AudioMixer.AudioOutputDeviceInfo info)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_AudioOutputDeviceInfoToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AudioMixer.AudioOutputDeviceInfoMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Conv_AudioOutputDeviceInfoToString_Info_Offset), 0, null, info);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_AudioOutputDeviceInfoToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_AudioOutputDeviceInfoToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:ClearSubmixEffects
    static readonly IntPtr ClearSubmixEffects_NativeFunction;
    static readonly int ClearSubmixEffects_ParamsSize;
    static readonly int ClearSubmixEffects_WorldContextObject_Offset;
    static readonly int ClearSubmixEffects_SoundSubmix_Offset;
    
    public static void ClearSubmixEffects(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundSubmix soundSubmix)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClearSubmixEffects_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ClearSubmixEffects_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundSubmix>.ToNative(IntPtr.Add(ParamsBuffer, ClearSubmixEffects_SoundSubmix_Offset), 0, null, soundSubmix);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ClearSubmixEffects_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:ClearSubmixEffectChainOverride
    static readonly IntPtr ClearSubmixEffectChainOverride_NativeFunction;
    static readonly int ClearSubmixEffectChainOverride_ParamsSize;
    static readonly int ClearSubmixEffectChainOverride_WorldContextObject_Offset;
    static readonly int ClearSubmixEffectChainOverride_SoundSubmix_Offset;
    static readonly int ClearSubmixEffectChainOverride_FadeTimeSec_Offset;
    
    public static void ClearSubmixEffectChainOverride(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundSubmix soundSubmix, float fadeTimeSec)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClearSubmixEffectChainOverride_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ClearSubmixEffectChainOverride_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundSubmix>.ToNative(IntPtr.Add(ParamsBuffer, ClearSubmixEffectChainOverride_SoundSubmix_Offset), 0, null, soundSubmix);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ClearSubmixEffectChainOverride_FadeTimeSec_Offset), 0, null, fadeTimeSec);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ClearSubmixEffectChainOverride_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:ClearMasterSubmixEffects
    static readonly IntPtr ClearMasterSubmixEffects_NativeFunction;
    static readonly int ClearMasterSubmixEffects_ParamsSize;
    static readonly int ClearMasterSubmixEffects_WorldContextObject_Offset;
    
    public static void ClearMasterSubmixEffects(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClearMasterSubmixEffects_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ClearMasterSubmixEffects_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ClearMasterSubmixEffects_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:AddSubmixEffect
    static readonly IntPtr AddSubmixEffect_NativeFunction;
    static readonly int AddSubmixEffect_ParamsSize;
    static readonly int AddSubmixEffect_WorldContextObject_Offset;
    static readonly int AddSubmixEffect_SoundSubmix_Offset;
    static readonly int AddSubmixEffect_SubmixEffectPreset_Offset;
    static readonly int AddSubmixEffect_ReturnValue_Offset;
    
    public static int AddSubmixEffect(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundSubmix soundSubmix, UnrealSharp.Engine.SoundEffectSubmixPreset submixEffectPreset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddSubmixEffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AddSubmixEffect_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundSubmix>.ToNative(IntPtr.Add(ParamsBuffer, AddSubmixEffect_SoundSubmix_Offset), 0, null, soundSubmix);
            ObjectMarshaller<UnrealSharp.Engine.SoundEffectSubmixPreset>.ToNative(IntPtr.Add(ParamsBuffer, AddSubmixEffect_SubmixEffectPreset_Offset), 0, null, submixEffectPreset);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddSubmixEffect_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, AddSubmixEffect_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:AddSourceEffectToPresetChain
    static readonly IntPtr AddSourceEffectToPresetChain_NativeFunction;
    static readonly int AddSourceEffectToPresetChain_ParamsSize;
    static readonly int AddSourceEffectToPresetChain_WorldContextObject_Offset;
    static readonly int AddSourceEffectToPresetChain_PresetChain_Offset;
    static readonly int AddSourceEffectToPresetChain_Entry_Offset;
    
    public static void AddSourceEffectToPresetChain(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundEffectSourcePresetChain presetChain, UnrealSharp.Engine.SourceEffectChainEntry entry)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddSourceEffectToPresetChain_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AddSourceEffectToPresetChain_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundEffectSourcePresetChain>.ToNative(IntPtr.Add(ParamsBuffer, AddSourceEffectToPresetChain_PresetChain_Offset), 0, null, presetChain);
            UnrealSharp.Engine.SourceEffectChainEntryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AddSourceEffectToPresetChain_Entry_Offset), 0, null, entry);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddSourceEffectToPresetChain_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.AudioMixerBlueprintLibrary:AddMasterSubmixEffect
    static readonly IntPtr AddMasterSubmixEffect_NativeFunction;
    static readonly int AddMasterSubmixEffect_ParamsSize;
    static readonly int AddMasterSubmixEffect_WorldContextObject_Offset;
    static readonly int AddMasterSubmixEffect_SubmixEffectPreset_Offset;
    
    public static void AddMasterSubmixEffect(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundEffectSubmixPreset submixEffectPreset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddMasterSubmixEffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AddMasterSubmixEffect_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundEffectSubmixPreset>.ToNative(IntPtr.Add(ParamsBuffer, AddMasterSubmixEffect_SubmixEffectPreset_Offset), 0, null, submixEffectPreset);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddMasterSubmixEffect_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
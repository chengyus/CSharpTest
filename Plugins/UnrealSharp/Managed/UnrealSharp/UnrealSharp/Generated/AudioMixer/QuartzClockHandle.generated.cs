// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AudioMixer;

[UClass]
public partial class QuartzClockHandle : UnrealSharp.CoreUObject.Object
{
    
    static QuartzClockHandle()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("QuartzClockHandle");
        
        
        UnsubscribeFromTimeDivision_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UnsubscribeFromTimeDivision");
        UnsubscribeFromTimeDivision_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UnsubscribeFromTimeDivision_NativeFunction);
        UnsubscribeFromTimeDivision_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnsubscribeFromTimeDivision_NativeFunction, "WorldContextObject");
        UnsubscribeFromTimeDivision_InQuantizationBoundary_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnsubscribeFromTimeDivision_NativeFunction, "InQuantizationBoundary");
        UnsubscribeFromTimeDivision_ClockHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnsubscribeFromTimeDivision_NativeFunction, "ClockHandle");
        UnsubscribeFromAllTimeDivisions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UnsubscribeFromAllTimeDivisions");
        UnsubscribeFromAllTimeDivisions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UnsubscribeFromAllTimeDivisions_NativeFunction);
        UnsubscribeFromAllTimeDivisions_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnsubscribeFromAllTimeDivisions_NativeFunction, "WorldContextObject");
        UnsubscribeFromAllTimeDivisions_ClockHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnsubscribeFromAllTimeDivisions_NativeFunction, "ClockHandle");
        StopClock_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopClock");
        StopClock_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StopClock_NativeFunction);
        StopClock_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopClock_NativeFunction, "WorldContextObject");
        StopClock_CancelPendingEvents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopClock_NativeFunction, "CancelPendingEvents");
        StopClock_ClockHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopClock_NativeFunction, "ClockHandle");
        StartClock_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartClock");
        StartClock_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StartClock_NativeFunction);
        StartClock_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartClock_NativeFunction, "WorldContextObject");
        StartClock_ClockHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartClock_NativeFunction, "ClockHandle");
        ResumeClock_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResumeClock");
        ResumeClock_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ResumeClock_NativeFunction);
        ResumeClock_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResumeClock_NativeFunction, "WorldContextObject");
        ResumeClock_ClockHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResumeClock_NativeFunction, "ClockHandle");
        PauseClock_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PauseClock");
        PauseClock_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PauseClock_NativeFunction);
        PauseClock_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PauseClock_NativeFunction, "WorldContextObject");
        PauseClock_ClockHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PauseClock_NativeFunction, "ClockHandle");
        IsClockRunning_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsClockRunning");
        IsClockRunning_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsClockRunning_NativeFunction);
        IsClockRunning_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsClockRunning_NativeFunction, "WorldContextObject");
        IsClockRunning_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsClockRunning_NativeFunction, "ReturnValue");
        GetTicksPerSecond_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTicksPerSecond");
        GetTicksPerSecond_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTicksPerSecond_NativeFunction);
        GetTicksPerSecond_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTicksPerSecond_NativeFunction, "WorldContextObject");
        GetTicksPerSecond_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTicksPerSecond_NativeFunction, "ReturnValue");
        GetThirtySecondNotesPerMinute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetThirtySecondNotesPerMinute");
        GetThirtySecondNotesPerMinute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetThirtySecondNotesPerMinute_NativeFunction);
        GetThirtySecondNotesPerMinute_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetThirtySecondNotesPerMinute_NativeFunction, "WorldContextObject");
        GetThirtySecondNotesPerMinute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetThirtySecondNotesPerMinute_NativeFunction, "ReturnValue");
        GetSecondsPerTick_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSecondsPerTick");
        GetSecondsPerTick_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSecondsPerTick_NativeFunction);
        GetSecondsPerTick_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSecondsPerTick_NativeFunction, "WorldContextObject");
        GetSecondsPerTick_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSecondsPerTick_NativeFunction, "ReturnValue");
        GetMillisecondsPerTick_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMillisecondsPerTick");
        GetMillisecondsPerTick_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMillisecondsPerTick_NativeFunction);
        GetMillisecondsPerTick_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMillisecondsPerTick_NativeFunction, "WorldContextObject");
        GetMillisecondsPerTick_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMillisecondsPerTick_NativeFunction, "ReturnValue");
        GetEstimatedRunTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEstimatedRunTime");
        GetEstimatedRunTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEstimatedRunTime_NativeFunction);
        GetEstimatedRunTime_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEstimatedRunTime_NativeFunction, "WorldContextObject");
        GetEstimatedRunTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEstimatedRunTime_NativeFunction, "ReturnValue");
        GetDurationOfQuantizationTypeInSeconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDurationOfQuantizationTypeInSeconds");
        GetDurationOfQuantizationTypeInSeconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDurationOfQuantizationTypeInSeconds_NativeFunction);
        GetDurationOfQuantizationTypeInSeconds_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDurationOfQuantizationTypeInSeconds_NativeFunction, "WorldContextObject");
        GetDurationOfQuantizationTypeInSeconds_QuantizationType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDurationOfQuantizationTypeInSeconds_NativeFunction, "QuantizationType");
        GetDurationOfQuantizationTypeInSeconds_Multiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDurationOfQuantizationTypeInSeconds_NativeFunction, "Multiplier");
        GetDurationOfQuantizationTypeInSeconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDurationOfQuantizationTypeInSeconds_NativeFunction, "ReturnValue");
        GetCurrentTimestamp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentTimestamp");
        GetCurrentTimestamp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentTimestamp_NativeFunction);
        GetCurrentTimestamp_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentTimestamp_NativeFunction, "WorldContextObject");
        GetCurrentTimestamp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentTimestamp_NativeFunction, "ReturnValue");
        GetBeatsPerMinute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBeatsPerMinute");
        GetBeatsPerMinute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBeatsPerMinute_NativeFunction);
        GetBeatsPerMinute_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeatsPerMinute_NativeFunction, "WorldContextObject");
        GetBeatsPerMinute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeatsPerMinute_NativeFunction, "ReturnValue");
        GetBeatProgressPercent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBeatProgressPercent");
        GetBeatProgressPercent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBeatProgressPercent_NativeFunction);
        GetBeatProgressPercent_QuantizationBoundary_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeatProgressPercent_NativeFunction, "QuantizationBoundary");
        GetBeatProgressPercent_PhaseOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeatProgressPercent_NativeFunction, "PhaseOffset");
        GetBeatProgressPercent_MsOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeatProgressPercent_NativeFunction, "MsOffset");
        GetBeatProgressPercent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeatProgressPercent_NativeFunction, "ReturnValue");
        
        
    }
    
    protected QuartzClockHandle(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AudioMixer.QuartzClockHandle:UnsubscribeFromTimeDivision
    static readonly IntPtr UnsubscribeFromTimeDivision_NativeFunction;
    static readonly int UnsubscribeFromTimeDivision_ParamsSize;
    static readonly int UnsubscribeFromTimeDivision_WorldContextObject_Offset;
    static readonly int UnsubscribeFromTimeDivision_InQuantizationBoundary_Offset;
    static readonly int UnsubscribeFromTimeDivision_ClockHandle_Offset;
    
    public void UnsubscribeFromTimeDivision(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.EQuartzCommandQuantization inQuantizationBoundary, out UnrealSharp.AudioMixer.QuartzClockHandle clockHandle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UnsubscribeFromTimeDivision_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, UnsubscribeFromTimeDivision_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<UnrealSharp.Engine.EQuartzCommandQuantization>.ToNative(IntPtr.Add(ParamsBuffer, UnsubscribeFromTimeDivision_InQuantizationBoundary_Offset), 0, null, inQuantizationBoundary);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UnsubscribeFromTimeDivision_NativeFunction, ParamsBuffer);
            
            clockHandle = ObjectMarshaller<UnrealSharp.AudioMixer.QuartzClockHandle>.FromNative(IntPtr.Add(ParamsBuffer, UnsubscribeFromTimeDivision_ClockHandle_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AudioMixer.QuartzClockHandle:UnsubscribeFromAllTimeDivisions
    static readonly IntPtr UnsubscribeFromAllTimeDivisions_NativeFunction;
    static readonly int UnsubscribeFromAllTimeDivisions_ParamsSize;
    static readonly int UnsubscribeFromAllTimeDivisions_WorldContextObject_Offset;
    static readonly int UnsubscribeFromAllTimeDivisions_ClockHandle_Offset;
    
    public void UnsubscribeFromAllTimeDivisions(UnrealSharp.CoreUObject.Object worldContextObject, out UnrealSharp.AudioMixer.QuartzClockHandle clockHandle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UnsubscribeFromAllTimeDivisions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, UnsubscribeFromAllTimeDivisions_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UnsubscribeFromAllTimeDivisions_NativeFunction, ParamsBuffer);
            
            clockHandle = ObjectMarshaller<UnrealSharp.AudioMixer.QuartzClockHandle>.FromNative(IntPtr.Add(ParamsBuffer, UnsubscribeFromAllTimeDivisions_ClockHandle_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AudioMixer.QuartzClockHandle:StopClock
    static readonly IntPtr StopClock_NativeFunction;
    static readonly int StopClock_ParamsSize;
    static readonly int StopClock_WorldContextObject_Offset;
    static readonly int StopClock_CancelPendingEvents_Offset;
    static readonly int StopClock_ClockHandle_Offset;
    
    public void StopClock(UnrealSharp.CoreUObject.Object worldContextObject, bool cancelPendingEvents, out UnrealSharp.AudioMixer.QuartzClockHandle clockHandle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StopClock_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, StopClock_WorldContextObject_Offset), 0, null, worldContextObject);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, StopClock_CancelPendingEvents_Offset), 0, null, cancelPendingEvents);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopClock_NativeFunction, ParamsBuffer);
            
            clockHandle = ObjectMarshaller<UnrealSharp.AudioMixer.QuartzClockHandle>.FromNative(IntPtr.Add(ParamsBuffer, StopClock_ClockHandle_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AudioMixer.QuartzClockHandle:StartClock
    static readonly IntPtr StartClock_NativeFunction;
    static readonly int StartClock_ParamsSize;
    static readonly int StartClock_WorldContextObject_Offset;
    static readonly int StartClock_ClockHandle_Offset;
    
    public void StartClock(UnrealSharp.CoreUObject.Object worldContextObject, out UnrealSharp.AudioMixer.QuartzClockHandle clockHandle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StartClock_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, StartClock_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StartClock_NativeFunction, ParamsBuffer);
            
            clockHandle = ObjectMarshaller<UnrealSharp.AudioMixer.QuartzClockHandle>.FromNative(IntPtr.Add(ParamsBuffer, StartClock_ClockHandle_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AudioMixer.QuartzClockHandle:ResumeClock
    static readonly IntPtr ResumeClock_NativeFunction;
    static readonly int ResumeClock_ParamsSize;
    static readonly int ResumeClock_WorldContextObject_Offset;
    static readonly int ResumeClock_ClockHandle_Offset;
    
    public void ResumeClock(UnrealSharp.CoreUObject.Object worldContextObject, out UnrealSharp.AudioMixer.QuartzClockHandle clockHandle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ResumeClock_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ResumeClock_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResumeClock_NativeFunction, ParamsBuffer);
            
            clockHandle = ObjectMarshaller<UnrealSharp.AudioMixer.QuartzClockHandle>.FromNative(IntPtr.Add(ParamsBuffer, ResumeClock_ClockHandle_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AudioMixer.QuartzClockHandle:PauseClock
    static readonly IntPtr PauseClock_NativeFunction;
    static readonly int PauseClock_ParamsSize;
    static readonly int PauseClock_WorldContextObject_Offset;
    static readonly int PauseClock_ClockHandle_Offset;
    
    public void PauseClock(UnrealSharp.CoreUObject.Object worldContextObject, out UnrealSharp.AudioMixer.QuartzClockHandle clockHandle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PauseClock_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, PauseClock_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PauseClock_NativeFunction, ParamsBuffer);
            
            clockHandle = ObjectMarshaller<UnrealSharp.AudioMixer.QuartzClockHandle>.FromNative(IntPtr.Add(ParamsBuffer, PauseClock_ClockHandle_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AudioMixer.QuartzClockHandle:IsClockRunning
    static readonly IntPtr IsClockRunning_NativeFunction;
    static readonly int IsClockRunning_ParamsSize;
    static readonly int IsClockRunning_WorldContextObject_Offset;
    static readonly int IsClockRunning_ReturnValue_Offset;
    
    public bool IsClockRunning(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsClockRunning_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, IsClockRunning_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsClockRunning_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsClockRunning_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioMixer.QuartzClockHandle:GetTicksPerSecond
    static readonly IntPtr GetTicksPerSecond_NativeFunction;
    static readonly int GetTicksPerSecond_ParamsSize;
    static readonly int GetTicksPerSecond_WorldContextObject_Offset;
    static readonly int GetTicksPerSecond_ReturnValue_Offset;
    
    public float GetTicksPerSecond(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTicksPerSecond_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetTicksPerSecond_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTicksPerSecond_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetTicksPerSecond_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioMixer.QuartzClockHandle:GetThirtySecondNotesPerMinute
    static readonly IntPtr GetThirtySecondNotesPerMinute_NativeFunction;
    static readonly int GetThirtySecondNotesPerMinute_ParamsSize;
    static readonly int GetThirtySecondNotesPerMinute_WorldContextObject_Offset;
    static readonly int GetThirtySecondNotesPerMinute_ReturnValue_Offset;
    
    public float GetThirtySecondNotesPerMinute(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetThirtySecondNotesPerMinute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetThirtySecondNotesPerMinute_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetThirtySecondNotesPerMinute_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetThirtySecondNotesPerMinute_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioMixer.QuartzClockHandle:GetSecondsPerTick
    static readonly IntPtr GetSecondsPerTick_NativeFunction;
    static readonly int GetSecondsPerTick_ParamsSize;
    static readonly int GetSecondsPerTick_WorldContextObject_Offset;
    static readonly int GetSecondsPerTick_ReturnValue_Offset;
    
    public float GetSecondsPerTick(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSecondsPerTick_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetSecondsPerTick_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSecondsPerTick_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetSecondsPerTick_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioMixer.QuartzClockHandle:GetMillisecondsPerTick
    static readonly IntPtr GetMillisecondsPerTick_NativeFunction;
    static readonly int GetMillisecondsPerTick_ParamsSize;
    static readonly int GetMillisecondsPerTick_WorldContextObject_Offset;
    static readonly int GetMillisecondsPerTick_ReturnValue_Offset;
    
    public float GetMillisecondsPerTick(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMillisecondsPerTick_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetMillisecondsPerTick_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMillisecondsPerTick_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetMillisecondsPerTick_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioMixer.QuartzClockHandle:GetEstimatedRunTime
    static readonly IntPtr GetEstimatedRunTime_NativeFunction;
    static readonly int GetEstimatedRunTime_ParamsSize;
    static readonly int GetEstimatedRunTime_WorldContextObject_Offset;
    static readonly int GetEstimatedRunTime_ReturnValue_Offset;
    
    public float GetEstimatedRunTime(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEstimatedRunTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetEstimatedRunTime_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetEstimatedRunTime_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetEstimatedRunTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioMixer.QuartzClockHandle:GetDurationOfQuantizationTypeInSeconds
    static readonly IntPtr GetDurationOfQuantizationTypeInSeconds_NativeFunction;
    static readonly int GetDurationOfQuantizationTypeInSeconds_ParamsSize;
    static readonly int GetDurationOfQuantizationTypeInSeconds_WorldContextObject_Offset;
    static readonly int GetDurationOfQuantizationTypeInSeconds_QuantizationType_Offset;
    static readonly int GetDurationOfQuantizationTypeInSeconds_Multiplier_Offset;
    static readonly int GetDurationOfQuantizationTypeInSeconds_ReturnValue_Offset;
    
    public float GetDurationOfQuantizationTypeInSeconds(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.EQuartzCommandQuantization quantizationType, float multiplier = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDurationOfQuantizationTypeInSeconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetDurationOfQuantizationTypeInSeconds_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<UnrealSharp.Engine.EQuartzCommandQuantization>.ToNative(IntPtr.Add(ParamsBuffer, GetDurationOfQuantizationTypeInSeconds_QuantizationType_Offset), 0, null, quantizationType);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetDurationOfQuantizationTypeInSeconds_Multiplier_Offset), 0, null, multiplier);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDurationOfQuantizationTypeInSeconds_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetDurationOfQuantizationTypeInSeconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioMixer.QuartzClockHandle:GetCurrentTimestamp
    static readonly IntPtr GetCurrentTimestamp_NativeFunction;
    static readonly int GetCurrentTimestamp_ParamsSize;
    static readonly int GetCurrentTimestamp_WorldContextObject_Offset;
    static readonly int GetCurrentTimestamp_ReturnValue_Offset;
    
    public UnrealSharp.Engine.QuartzTransportTimeStamp GetCurrentTimestamp(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentTimestamp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetCurrentTimestamp_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurrentTimestamp_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.QuartzTransportTimeStamp returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Engine.QuartzTransportTimeStamp>.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentTimestamp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioMixer.QuartzClockHandle:GetBeatsPerMinute
    static readonly IntPtr GetBeatsPerMinute_NativeFunction;
    static readonly int GetBeatsPerMinute_ParamsSize;
    static readonly int GetBeatsPerMinute_WorldContextObject_Offset;
    static readonly int GetBeatsPerMinute_ReturnValue_Offset;
    
    public float GetBeatsPerMinute(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBeatsPerMinute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetBeatsPerMinute_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBeatsPerMinute_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetBeatsPerMinute_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioMixer.QuartzClockHandle:GetBeatProgressPercent
    static readonly IntPtr GetBeatProgressPercent_NativeFunction;
    static readonly int GetBeatProgressPercent_ParamsSize;
    static readonly int GetBeatProgressPercent_QuantizationBoundary_Offset;
    static readonly int GetBeatProgressPercent_PhaseOffset_Offset;
    static readonly int GetBeatProgressPercent_MsOffset_Offset;
    static readonly int GetBeatProgressPercent_ReturnValue_Offset;
    
    public float GetBeatProgressPercent(UnrealSharp.Engine.EQuartzCommandQuantization quantizationBoundary = UnrealSharp.Engine.EQuartzCommandQuantization.Beat, float phaseOffset = 0.000000f, float msOffset = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBeatProgressPercent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EQuartzCommandQuantization>.ToNative(IntPtr.Add(ParamsBuffer, GetBeatProgressPercent_QuantizationBoundary_Offset), 0, null, quantizationBoundary);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetBeatProgressPercent_PhaseOffset_Offset), 0, null, phaseOffset);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetBeatProgressPercent_MsOffset_Offset), 0, null, msOffset);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBeatProgressPercent_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetBeatProgressPercent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
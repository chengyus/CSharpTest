// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AudioMixer;

[UClass]
abstract public partial class SynthComponent : UnrealSharp.Engine.SceneComponent
{
    
    static SynthComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SynthComponent");
        
        bAllowSpatialization_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAllowSpatialization");
        bAllowSpatialization_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAllowSpatialization");
        bOverrideAttenuation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOverrideAttenuation");
        bOverrideAttenuation_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bOverrideAttenuation");
        bEnableBusSends_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableBusSends");
        bEnableBusSends_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableBusSends");
        AttenuationSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AttenuationSettings");
        AttenuationOverrides_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AttenuationOverrides");
        ModulationRouting_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ModulationRouting");
        SoundSubmixSends_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SoundSubmixSends");
        SoundSubmixSends_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "SoundSubmixSends");
        BusSends_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BusSends");
        BusSends_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "BusSends");
        PreEffectBusSends_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PreEffectBusSends");
        PreEffectBusSends_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "PreEffectBusSends");
        bIsUISound_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsUISound");
        bIsUISound_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIsUISound");
        EnvelopeFollowerAttackTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "EnvelopeFollowerAttackTime");
        EnvelopeFollowerReleaseTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "EnvelopeFollowerReleaseTime");
        
        Stop_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Stop");
        Start_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Start");
        SetVolumeMultiplier_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVolumeMultiplier");
        SetVolumeMultiplier_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVolumeMultiplier_NativeFunction);
        SetVolumeMultiplier_VolumeMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVolumeMultiplier_NativeFunction, "VolumeMultiplier");
        SetSubmixSend_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSubmixSend");
        SetSubmixSend_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSubmixSend_NativeFunction);
        SetSubmixSend_Submix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSubmixSend_NativeFunction, "Submix");
        SetSubmixSend_SendLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSubmixSend_NativeFunction, "SendLevel");
        SetSourceBusSendPreEffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSourceBusSendPreEffect");
        SetSourceBusSendPreEffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSourceBusSendPreEffect_NativeFunction);
        SetSourceBusSendPreEffect_SoundSourceBus_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSourceBusSendPreEffect_NativeFunction, "SoundSourceBus");
        SetSourceBusSendPreEffect_SourceBusSendLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSourceBusSendPreEffect_NativeFunction, "SourceBusSendLevel");
        SetSourceBusSendPostEffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSourceBusSendPostEffect");
        SetSourceBusSendPostEffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSourceBusSendPostEffect_NativeFunction);
        SetSourceBusSendPostEffect_SoundSourceBus_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSourceBusSendPostEffect_NativeFunction, "SoundSourceBus");
        SetSourceBusSendPostEffect_SourceBusSendLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSourceBusSendPostEffect_NativeFunction, "SourceBusSendLevel");
        SetOutputToBusOnly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOutputToBusOnly");
        SetOutputToBusOnly_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOutputToBusOnly_NativeFunction);
        SetOutputToBusOnly_bInOutputToBusOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOutputToBusOnly_NativeFunction, "bInOutputToBusOnly");
        SetLowPassFilterFrequency_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLowPassFilterFrequency");
        SetLowPassFilterFrequency_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLowPassFilterFrequency_NativeFunction);
        SetLowPassFilterFrequency_InLowPassFilterFrequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLowPassFilterFrequency_NativeFunction, "InLowPassFilterFrequency");
        SetLowPassFilterEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLowPassFilterEnabled");
        SetLowPassFilterEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLowPassFilterEnabled_NativeFunction);
        SetLowPassFilterEnabled_InLowPassFilterEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLowPassFilterEnabled_NativeFunction, "InLowPassFilterEnabled");
        SetAudioBusSendPreEffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAudioBusSendPreEffect");
        SetAudioBusSendPreEffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAudioBusSendPreEffect_NativeFunction);
        SetAudioBusSendPreEffect_AudioBus_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAudioBusSendPreEffect_NativeFunction, "AudioBus");
        SetAudioBusSendPreEffect_AudioBusSendLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAudioBusSendPreEffect_NativeFunction, "AudioBusSendLevel");
        SetAudioBusSendPostEffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAudioBusSendPostEffect");
        SetAudioBusSendPostEffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAudioBusSendPostEffect_NativeFunction);
        SetAudioBusSendPostEffect_AudioBus_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAudioBusSendPostEffect_NativeFunction, "AudioBus");
        SetAudioBusSendPostEffect_AudioBusSendLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAudioBusSendPostEffect_NativeFunction, "AudioBusSendLevel");
        IsPlaying_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPlaying");
        IsPlaying_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPlaying_NativeFunction);
        IsPlaying_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPlaying_NativeFunction, "ReturnValue");
        FadeOut_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FadeOut");
        FadeOut_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FadeOut_NativeFunction);
        FadeOut_FadeOutDuration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FadeOut_NativeFunction, "FadeOutDuration");
        FadeOut_FadeVolumeLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FadeOut_NativeFunction, "FadeVolumeLevel");
        FadeOut_FadeCurve_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FadeOut_NativeFunction, "FadeCurve");
        FadeIn_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FadeIn");
        FadeIn_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FadeIn_NativeFunction);
        FadeIn_FadeInDuration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FadeIn_NativeFunction, "FadeInDuration");
        FadeIn_FadeVolumeLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FadeIn_NativeFunction, "FadeVolumeLevel");
        FadeIn_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FadeIn_NativeFunction, "StartTime");
        FadeIn_FadeCurve_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FadeIn_NativeFunction, "FadeCurve");
        AdjustVolume_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AdjustVolume");
        AdjustVolume_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AdjustVolume_NativeFunction);
        AdjustVolume_AdjustVolumeDuration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AdjustVolume_NativeFunction, "AdjustVolumeDuration");
        AdjustVolume_AdjustVolumeLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AdjustVolume_NativeFunction, "AdjustVolumeLevel");
        AdjustVolume_FadeCurve_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AdjustVolume_NativeFunction, "FadeCurve");
        
        
    }
    
    protected SynthComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/AudioMixer.SynthComponent:bAllowSpatialization
    static readonly int bAllowSpatialization_Offset;
    static readonly IntPtr bAllowSpatialization_NativeProperty;
    
    public bool bAllowSpatialization
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAllowSpatialization_NativeProperty, bAllowSpatialization_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bAllowSpatialization_NativeProperty, bAllowSpatialization_Offset, value);
        }
    }
    
    // BoolProperty /Script/AudioMixer.SynthComponent:bOverrideAttenuation
    static readonly int bOverrideAttenuation_Offset;
    static readonly IntPtr bOverrideAttenuation_NativeProperty;
    
    public bool bOverrideAttenuation
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bOverrideAttenuation_NativeProperty, bOverrideAttenuation_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bOverrideAttenuation_NativeProperty, bOverrideAttenuation_Offset, value);
        }
    }
    
    // BoolProperty /Script/AudioMixer.SynthComponent:bEnableBusSends
    static readonly int bEnableBusSends_Offset;
    static readonly IntPtr bEnableBusSends_NativeProperty;
    
    public bool bEnableBusSends
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableBusSends_NativeProperty, bEnableBusSends_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bEnableBusSends_NativeProperty, bEnableBusSends_Offset, value);
        }
    }
    
    // ObjectProperty /Script/AudioMixer.SynthComponent:AttenuationSettings
    static readonly int AttenuationSettings_Offset;
    
    public UnrealSharp.Engine.SoundAttenuation AttenuationSettings
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.SoundAttenuation>.FromNative(IntPtr.Add(NativeObject, AttenuationSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.SoundAttenuation>.ToNative(IntPtr.Add(NativeObject, AttenuationSettings_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/AudioMixer.SynthComponent:AttenuationOverrides
    static readonly int AttenuationOverrides_Offset;
    
    public UnrealSharp.Engine.SoundAttenuationSettings AttenuationOverrides
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.SoundAttenuationSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, AttenuationOverrides_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.Engine.SoundAttenuationSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, AttenuationOverrides_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/AudioMixer.SynthComponent:ModulationRouting
    static readonly int ModulationRouting_Offset;
    
    public UnrealSharp.Engine.SoundModulationDefaultRoutingSettings ModulationRouting
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.SoundModulationDefaultRoutingSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, ModulationRouting_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.Engine.SoundModulationDefaultRoutingSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, ModulationRouting_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/AudioMixer.SynthComponent:SoundSubmixSends
    static readonly int SoundSubmixSends_Offset;
    static readonly IntPtr SoundSubmixSends_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.SoundSubmixSendInfo> SoundSubmixSends_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.SoundSubmixSendInfo> SoundSubmixSends
    {
        get
        {
            if(SoundSubmixSends_Wrapper == null)
            {
                SoundSubmixSends_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.SoundSubmixSendInfo>(1, SoundSubmixSends_NativeProperty, UnrealSharp.Engine.SoundSubmixSendInfoMarshaler.ToNative, UnrealSharp.Engine.SoundSubmixSendInfoMarshaler.FromNative);
            }
            
            return SoundSubmixSends_Wrapper.FromNative(IntPtr.Add(NativeObject,SoundSubmixSends_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/AudioMixer.SynthComponent:BusSends
    static readonly int BusSends_Offset;
    static readonly IntPtr BusSends_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.SoundSourceBusSendInfo> BusSends_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.SoundSourceBusSendInfo> BusSends
    {
        get
        {
            if(BusSends_Wrapper == null)
            {
                BusSends_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.SoundSourceBusSendInfo>(1, BusSends_NativeProperty, UnrealSharp.Engine.SoundSourceBusSendInfoMarshaler.ToNative, UnrealSharp.Engine.SoundSourceBusSendInfoMarshaler.FromNative);
            }
            
            return BusSends_Wrapper.FromNative(IntPtr.Add(NativeObject,BusSends_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/AudioMixer.SynthComponent:PreEffectBusSends
    static readonly int PreEffectBusSends_Offset;
    static readonly IntPtr PreEffectBusSends_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.SoundSourceBusSendInfo> PreEffectBusSends_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.SoundSourceBusSendInfo> PreEffectBusSends
    {
        get
        {
            if(PreEffectBusSends_Wrapper == null)
            {
                PreEffectBusSends_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.SoundSourceBusSendInfo>(1, PreEffectBusSends_NativeProperty, UnrealSharp.Engine.SoundSourceBusSendInfoMarshaler.ToNative, UnrealSharp.Engine.SoundSourceBusSendInfoMarshaler.FromNative);
            }
            
            return PreEffectBusSends_Wrapper.FromNative(IntPtr.Add(NativeObject,PreEffectBusSends_Offset),0,this);
        }
    }
    
    // BoolProperty /Script/AudioMixer.SynthComponent:bIsUISound
    static readonly int bIsUISound_Offset;
    static readonly IntPtr bIsUISound_NativeProperty;
    
    public bool bIsUISound
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIsUISound_NativeProperty, bIsUISound_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bIsUISound_NativeProperty, bIsUISound_Offset, value);
        }
    }
    
    // IntProperty /Script/AudioMixer.SynthComponent:EnvelopeFollowerAttackTime
    static readonly int EnvelopeFollowerAttackTime_Offset;
    
    public int EnvelopeFollowerAttackTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, EnvelopeFollowerAttackTime_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, EnvelopeFollowerAttackTime_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/AudioMixer.SynthComponent:EnvelopeFollowerReleaseTime
    static readonly int EnvelopeFollowerReleaseTime_Offset;
    
    public int EnvelopeFollowerReleaseTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, EnvelopeFollowerReleaseTime_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, EnvelopeFollowerReleaseTime_Offset), 0, this, value);
        }
    }
    
    // Function /Script/AudioMixer.SynthComponent:Stop
    static readonly IntPtr Stop_NativeFunction;
    
    public void Stop()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Stop_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/AudioMixer.SynthComponent:Start
    static readonly IntPtr Start_NativeFunction;
    
    public void Start()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Start_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/AudioMixer.SynthComponent:SetVolumeMultiplier
    static readonly IntPtr SetVolumeMultiplier_NativeFunction;
    static readonly int SetVolumeMultiplier_ParamsSize;
    static readonly int SetVolumeMultiplier_VolumeMultiplier_Offset;
    
    public void SetVolumeMultiplier(float volumeMultiplier)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVolumeMultiplier_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetVolumeMultiplier_VolumeMultiplier_Offset), 0, null, volumeMultiplier);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVolumeMultiplier_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.SynthComponent:SetSubmixSend
    static readonly IntPtr SetSubmixSend_NativeFunction;
    static readonly int SetSubmixSend_ParamsSize;
    static readonly int SetSubmixSend_Submix_Offset;
    static readonly int SetSubmixSend_SendLevel_Offset;
    
    public void SetSubmixSend(UnrealSharp.Engine.SoundSubmixBase submix, float sendLevel)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSubmixSend_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SoundSubmixBase>.ToNative(IntPtr.Add(ParamsBuffer, SetSubmixSend_Submix_Offset), 0, null, submix);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSubmixSend_SendLevel_Offset), 0, null, sendLevel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSubmixSend_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.SynthComponent:SetSourceBusSendPreEffect
    static readonly IntPtr SetSourceBusSendPreEffect_NativeFunction;
    static readonly int SetSourceBusSendPreEffect_ParamsSize;
    static readonly int SetSourceBusSendPreEffect_SoundSourceBus_Offset;
    static readonly int SetSourceBusSendPreEffect_SourceBusSendLevel_Offset;
    
    public void SetSourceBusSendPreEffect(UnrealSharp.Engine.SoundSourceBus soundSourceBus, float sourceBusSendLevel)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSourceBusSendPreEffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SoundSourceBus>.ToNative(IntPtr.Add(ParamsBuffer, SetSourceBusSendPreEffect_SoundSourceBus_Offset), 0, null, soundSourceBus);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSourceBusSendPreEffect_SourceBusSendLevel_Offset), 0, null, sourceBusSendLevel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSourceBusSendPreEffect_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.SynthComponent:SetSourceBusSendPostEffect
    static readonly IntPtr SetSourceBusSendPostEffect_NativeFunction;
    static readonly int SetSourceBusSendPostEffect_ParamsSize;
    static readonly int SetSourceBusSendPostEffect_SoundSourceBus_Offset;
    static readonly int SetSourceBusSendPostEffect_SourceBusSendLevel_Offset;
    
    public void SetSourceBusSendPostEffect(UnrealSharp.Engine.SoundSourceBus soundSourceBus, float sourceBusSendLevel)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSourceBusSendPostEffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SoundSourceBus>.ToNative(IntPtr.Add(ParamsBuffer, SetSourceBusSendPostEffect_SoundSourceBus_Offset), 0, null, soundSourceBus);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSourceBusSendPostEffect_SourceBusSendLevel_Offset), 0, null, sourceBusSendLevel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSourceBusSendPostEffect_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.SynthComponent:SetOutputToBusOnly
    static readonly IntPtr SetOutputToBusOnly_NativeFunction;
    static readonly int SetOutputToBusOnly_ParamsSize;
    static readonly int SetOutputToBusOnly_bInOutputToBusOnly_Offset;
    
    public void SetOutputToBusOnly(bool bInOutputToBusOnly)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOutputToBusOnly_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetOutputToBusOnly_bInOutputToBusOnly_Offset), 0, null, bInOutputToBusOnly);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOutputToBusOnly_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.SynthComponent:SetLowPassFilterFrequency
    static readonly IntPtr SetLowPassFilterFrequency_NativeFunction;
    static readonly int SetLowPassFilterFrequency_ParamsSize;
    static readonly int SetLowPassFilterFrequency_InLowPassFilterFrequency_Offset;
    
    public void SetLowPassFilterFrequency(float inLowPassFilterFrequency)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLowPassFilterFrequency_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLowPassFilterFrequency_InLowPassFilterFrequency_Offset), 0, null, inLowPassFilterFrequency);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLowPassFilterFrequency_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.SynthComponent:SetLowPassFilterEnabled
    static readonly IntPtr SetLowPassFilterEnabled_NativeFunction;
    static readonly int SetLowPassFilterEnabled_ParamsSize;
    static readonly int SetLowPassFilterEnabled_InLowPassFilterEnabled_Offset;
    
    public void SetLowPassFilterEnabled(bool inLowPassFilterEnabled)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLowPassFilterEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLowPassFilterEnabled_InLowPassFilterEnabled_Offset), 0, null, inLowPassFilterEnabled);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLowPassFilterEnabled_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.SynthComponent:SetAudioBusSendPreEffect
    static readonly IntPtr SetAudioBusSendPreEffect_NativeFunction;
    static readonly int SetAudioBusSendPreEffect_ParamsSize;
    static readonly int SetAudioBusSendPreEffect_AudioBus_Offset;
    static readonly int SetAudioBusSendPreEffect_AudioBusSendLevel_Offset;
    
    public void SetAudioBusSendPreEffect(UnrealSharp.Engine.AudioBus audioBus, float audioBusSendLevel)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAudioBusSendPreEffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AudioBus>.ToNative(IntPtr.Add(ParamsBuffer, SetAudioBusSendPreEffect_AudioBus_Offset), 0, null, audioBus);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAudioBusSendPreEffect_AudioBusSendLevel_Offset), 0, null, audioBusSendLevel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAudioBusSendPreEffect_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.SynthComponent:SetAudioBusSendPostEffect
    static readonly IntPtr SetAudioBusSendPostEffect_NativeFunction;
    static readonly int SetAudioBusSendPostEffect_ParamsSize;
    static readonly int SetAudioBusSendPostEffect_AudioBus_Offset;
    static readonly int SetAudioBusSendPostEffect_AudioBusSendLevel_Offset;
    
    public void SetAudioBusSendPostEffect(UnrealSharp.Engine.AudioBus audioBus, float audioBusSendLevel)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAudioBusSendPostEffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AudioBus>.ToNative(IntPtr.Add(ParamsBuffer, SetAudioBusSendPostEffect_AudioBus_Offset), 0, null, audioBus);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAudioBusSendPostEffect_AudioBusSendLevel_Offset), 0, null, audioBusSendLevel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAudioBusSendPostEffect_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.SynthComponent:IsPlaying
    static readonly IntPtr IsPlaying_NativeFunction;
    static readonly int IsPlaying_ParamsSize;
    static readonly int IsPlaying_ReturnValue_Offset;
    
    public bool IsPlaying()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPlaying_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsPlaying_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPlaying_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioMixer.SynthComponent:FadeOut
    static readonly IntPtr FadeOut_NativeFunction;
    static readonly int FadeOut_ParamsSize;
    static readonly int FadeOut_FadeOutDuration_Offset;
    static readonly int FadeOut_FadeVolumeLevel_Offset;
    static readonly int FadeOut_FadeCurve_Offset;
    
    public void FadeOut(float fadeOutDuration, float fadeVolumeLevel, UnrealSharp.Engine.EAudioFaderCurve fadeCurve = UnrealSharp.Engine.EAudioFaderCurve.Linear)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FadeOut_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FadeOut_FadeOutDuration_Offset), 0, null, fadeOutDuration);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FadeOut_FadeVolumeLevel_Offset), 0, null, fadeVolumeLevel);
            BlittableMarshaller<UnrealSharp.Engine.EAudioFaderCurve>.ToNative(IntPtr.Add(ParamsBuffer, FadeOut_FadeCurve_Offset), 0, null, fadeCurve);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FadeOut_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.SynthComponent:FadeIn
    static readonly IntPtr FadeIn_NativeFunction;
    static readonly int FadeIn_ParamsSize;
    static readonly int FadeIn_FadeInDuration_Offset;
    static readonly int FadeIn_FadeVolumeLevel_Offset;
    static readonly int FadeIn_StartTime_Offset;
    static readonly int FadeIn_FadeCurve_Offset;
    
    public void FadeIn(float fadeInDuration, float fadeVolumeLevel = 1.000000f, float startTime = 0.000000f, UnrealSharp.Engine.EAudioFaderCurve fadeCurve = UnrealSharp.Engine.EAudioFaderCurve.Linear)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FadeIn_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FadeIn_FadeInDuration_Offset), 0, null, fadeInDuration);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FadeIn_FadeVolumeLevel_Offset), 0, null, fadeVolumeLevel);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FadeIn_StartTime_Offset), 0, null, startTime);
            BlittableMarshaller<UnrealSharp.Engine.EAudioFaderCurve>.ToNative(IntPtr.Add(ParamsBuffer, FadeIn_FadeCurve_Offset), 0, null, fadeCurve);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FadeIn_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioMixer.SynthComponent:AdjustVolume
    static readonly IntPtr AdjustVolume_NativeFunction;
    static readonly int AdjustVolume_ParamsSize;
    static readonly int AdjustVolume_AdjustVolumeDuration_Offset;
    static readonly int AdjustVolume_AdjustVolumeLevel_Offset;
    static readonly int AdjustVolume_FadeCurve_Offset;
    
    public void AdjustVolume(float adjustVolumeDuration, float adjustVolumeLevel, UnrealSharp.Engine.EAudioFaderCurve fadeCurve = UnrealSharp.Engine.EAudioFaderCurve.Linear)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AdjustVolume_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AdjustVolume_AdjustVolumeDuration_Offset), 0, null, adjustVolumeDuration);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AdjustVolume_AdjustVolumeLevel_Offset), 0, null, adjustVolumeLevel);
            BlittableMarshaller<UnrealSharp.Engine.EAudioFaderCurve>.ToNative(IntPtr.Add(ParamsBuffer, AdjustVolume_FadeCurve_Offset), 0, null, fadeCurve);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AdjustVolume_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AudioSynesthesia;

[UClass]
public partial class ConstantQNRT : UnrealSharp.AudioSynesthesia.AudioSynesthesiaNRT
{
    
    static ConstantQNRT()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ConstantQNRT");
        
        Settings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Settings");
        
        GetNormalizedChannelConstantQAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNormalizedChannelConstantQAtTime");
        GetNormalizedChannelConstantQAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNormalizedChannelConstantQAtTime_NativeFunction);
        GetNormalizedChannelConstantQAtTime_InSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNormalizedChannelConstantQAtTime_NativeFunction, "InSeconds");
        GetNormalizedChannelConstantQAtTime_InChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNormalizedChannelConstantQAtTime_NativeFunction, "InChannel");
        GetNormalizedChannelConstantQAtTime_OutConstantQ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNormalizedChannelConstantQAtTime_NativeFunction, "OutConstantQ");
        GetNormalizedChannelConstantQAtTime_OutConstantQ_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetNormalizedChannelConstantQAtTime_NativeFunction, "OutConstantQ");
        GetChannelConstantQAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetChannelConstantQAtTime");
        GetChannelConstantQAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetChannelConstantQAtTime_NativeFunction);
        GetChannelConstantQAtTime_InSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChannelConstantQAtTime_NativeFunction, "InSeconds");
        GetChannelConstantQAtTime_InChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChannelConstantQAtTime_NativeFunction, "InChannel");
        GetChannelConstantQAtTime_OutConstantQ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChannelConstantQAtTime_NativeFunction, "OutConstantQ");
        GetChannelConstantQAtTime_OutConstantQ_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetChannelConstantQAtTime_NativeFunction, "OutConstantQ");
        
        
    }
    
    protected ConstantQNRT(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/AudioSynesthesia.ConstantQNRT:Settings
    static readonly int Settings_Offset;
    
    public UnrealSharp.AudioSynesthesia.ConstantQNRTSettings Settings
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.AudioSynesthesia.ConstantQNRTSettings>.FromNative(IntPtr.Add(NativeObject, Settings_Offset), 0, this);
        }
    }
    
    // Function /Script/AudioSynesthesia.ConstantQNRT:GetNormalizedChannelConstantQAtTime
    static readonly IntPtr GetNormalizedChannelConstantQAtTime_NativeFunction;
    static readonly int GetNormalizedChannelConstantQAtTime_ParamsSize;
    static readonly int GetNormalizedChannelConstantQAtTime_InSeconds_Offset;
    static readonly int GetNormalizedChannelConstantQAtTime_InChannel_Offset;
    static readonly int GetNormalizedChannelConstantQAtTime_OutConstantQ_Offset;
    static readonly int GetNormalizedChannelConstantQAtTime_OutConstantQ_ElementSize;
    
    public void GetNormalizedChannelConstantQAtTime(float inSeconds, int inChannel, out System.Collections.Generic.IList<float> outConstantQ)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNormalizedChannelConstantQAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetNormalizedChannelConstantQAtTime_InSeconds_Offset), 0, null, inSeconds);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetNormalizedChannelConstantQAtTime_InChannel_Offset), 0, null, inChannel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNormalizedChannelConstantQAtTime_NativeFunction, ParamsBuffer);
            
            IntPtr OutConstantQ_NativeBuffer = IntPtr.Add(ParamsBuffer, GetNormalizedChannelConstantQAtTime_OutConstantQ_Offset);
            UnrealArrayCopyMarshaler<float> OutConstantQ_Marshaler = new UnrealArrayCopyMarshaler<float> (1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, GetNormalizedChannelConstantQAtTime_OutConstantQ_ElementSize);
            outConstantQ = OutConstantQ_Marshaler.FromNative(OutConstantQ_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<float>.DestructInstance(OutConstantQ_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AudioSynesthesia.ConstantQNRT:GetChannelConstantQAtTime
    static readonly IntPtr GetChannelConstantQAtTime_NativeFunction;
    static readonly int GetChannelConstantQAtTime_ParamsSize;
    static readonly int GetChannelConstantQAtTime_InSeconds_Offset;
    static readonly int GetChannelConstantQAtTime_InChannel_Offset;
    static readonly int GetChannelConstantQAtTime_OutConstantQ_Offset;
    static readonly int GetChannelConstantQAtTime_OutConstantQ_ElementSize;
    
    public void GetChannelConstantQAtTime(float inSeconds, int inChannel, out System.Collections.Generic.IList<float> outConstantQ)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetChannelConstantQAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetChannelConstantQAtTime_InSeconds_Offset), 0, null, inSeconds);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetChannelConstantQAtTime_InChannel_Offset), 0, null, inChannel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetChannelConstantQAtTime_NativeFunction, ParamsBuffer);
            
            IntPtr OutConstantQ_NativeBuffer = IntPtr.Add(ParamsBuffer, GetChannelConstantQAtTime_OutConstantQ_Offset);
            UnrealArrayCopyMarshaler<float> OutConstantQ_Marshaler = new UnrealArrayCopyMarshaler<float> (1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, GetChannelConstantQAtTime_OutConstantQ_ElementSize);
            outConstantQ = OutConstantQ_Marshaler.FromNative(OutConstantQ_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<float>.DestructInstance(OutConstantQ_NativeBuffer, 0);
            
        }
    }
    
    
}
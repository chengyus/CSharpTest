// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AudioSynesthesia;

[UClass]
public partial class ConstantQNRTSettings : UnrealSharp.AudioSynesthesia.AudioSynesthesiaNRTSettings
{
    
    static ConstantQNRTSettings()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ConstantQNRTSettings");
        
        StartingFrequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StartingFrequency");
        NumBands_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NumBands");
        NumBandsPerOctave_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NumBandsPerOctave");
        AnalysisPeriod_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AnalysisPeriod");
        bDownmixToMono_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bDownmixToMono");
        FFTSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FFTSize");
        WindowType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WindowType");
        SpectrumType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SpectrumType");
        BandWidthStretch_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BandWidthStretch");
        CQTNormalization_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CQTNormalization");
        NoiseFloorDb_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NoiseFloorDb");
        
        
        
    }
    
    protected ConstantQNRTSettings(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/AudioSynesthesia.ConstantQNRTSettings:StartingFrequency
    static readonly int StartingFrequency_Offset;
    
    public float StartingFrequency
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, StartingFrequency_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/AudioSynesthesia.ConstantQNRTSettings:NumBands
    static readonly int NumBands_Offset;
    
    public int NumBands
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, NumBands_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/AudioSynesthesia.ConstantQNRTSettings:NumBandsPerOctave
    static readonly int NumBandsPerOctave_Offset;
    
    public float NumBandsPerOctave
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, NumBandsPerOctave_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/AudioSynesthesia.ConstantQNRTSettings:AnalysisPeriod
    static readonly int AnalysisPeriod_Offset;
    
    public float AnalysisPeriod
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AnalysisPeriod_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/AudioSynesthesia.ConstantQNRTSettings:bDownmixToMono
    static readonly int bDownmixToMono_Offset;
    
    public bool bDownmixToMono
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bDownmixToMono_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/AudioSynesthesia.ConstantQNRTSettings:FFTSize
    static readonly int FFTSize_Offset;
    
    public UnrealSharp.AudioSynesthesia.EConstantQFFTSizeEnum FFTSize
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.AudioSynesthesia.EConstantQFFTSizeEnum>.FromNative(IntPtr.Add(NativeObject, FFTSize_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/AudioSynesthesia.ConstantQNRTSettings:WindowType
    static readonly int WindowType_Offset;
    
    public UnrealSharp.Engine.EFFTWindowType WindowType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EFFTWindowType>.FromNative(IntPtr.Add(NativeObject, WindowType_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/AudioSynesthesia.ConstantQNRTSettings:SpectrumType
    static readonly int SpectrumType_Offset;
    
    public UnrealSharp.Engine.EAudioSpectrumType SpectrumType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EAudioSpectrumType>.FromNative(IntPtr.Add(NativeObject, SpectrumType_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/AudioSynesthesia.ConstantQNRTSettings:BandWidthStretch
    static readonly int BandWidthStretch_Offset;
    
    public float BandWidthStretch
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, BandWidthStretch_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/AudioSynesthesia.ConstantQNRTSettings:CQTNormalization
    static readonly int CQTNormalization_Offset;
    
    public UnrealSharp.AudioSynesthesia.EConstantQNormalizationEnum CQTNormalization
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.AudioSynesthesia.EConstantQNormalizationEnum>.FromNative(IntPtr.Add(NativeObject, CQTNormalization_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/AudioSynesthesia.ConstantQNRTSettings:NoiseFloorDb
    static readonly int NoiseFloorDb_Offset;
    
    public float NoiseFloorDb
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, NoiseFloorDb_Offset), 0, this);
        }
    }
    
    
}
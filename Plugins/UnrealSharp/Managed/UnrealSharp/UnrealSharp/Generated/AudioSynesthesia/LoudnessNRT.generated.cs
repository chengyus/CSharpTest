// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AudioSynesthesia;

[UClass]
public partial class LoudnessNRT : UnrealSharp.AudioSynesthesia.AudioSynesthesiaNRT
{
    
    static LoudnessNRT()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("LoudnessNRT");
        
        Settings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Settings");
        
        GetNormalizedLoudnessAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNormalizedLoudnessAtTime");
        GetNormalizedLoudnessAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNormalizedLoudnessAtTime_NativeFunction);
        GetNormalizedLoudnessAtTime_InSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNormalizedLoudnessAtTime_NativeFunction, "InSeconds");
        GetNormalizedLoudnessAtTime_OutLoudness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNormalizedLoudnessAtTime_NativeFunction, "OutLoudness");
        GetNormalizedChannelLoudnessAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNormalizedChannelLoudnessAtTime");
        GetNormalizedChannelLoudnessAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNormalizedChannelLoudnessAtTime_NativeFunction);
        GetNormalizedChannelLoudnessAtTime_InSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNormalizedChannelLoudnessAtTime_NativeFunction, "InSeconds");
        GetNormalizedChannelLoudnessAtTime_InChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNormalizedChannelLoudnessAtTime_NativeFunction, "InChannel");
        GetNormalizedChannelLoudnessAtTime_OutLoudness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNormalizedChannelLoudnessAtTime_NativeFunction, "OutLoudness");
        GetLoudnessAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLoudnessAtTime");
        GetLoudnessAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLoudnessAtTime_NativeFunction);
        GetLoudnessAtTime_InSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLoudnessAtTime_NativeFunction, "InSeconds");
        GetLoudnessAtTime_OutLoudness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLoudnessAtTime_NativeFunction, "OutLoudness");
        GetChannelLoudnessAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetChannelLoudnessAtTime");
        GetChannelLoudnessAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetChannelLoudnessAtTime_NativeFunction);
        GetChannelLoudnessAtTime_InSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChannelLoudnessAtTime_NativeFunction, "InSeconds");
        GetChannelLoudnessAtTime_InChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChannelLoudnessAtTime_NativeFunction, "InChannel");
        GetChannelLoudnessAtTime_OutLoudness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChannelLoudnessAtTime_NativeFunction, "OutLoudness");
        
        
    }
    
    protected LoudnessNRT(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/AudioSynesthesia.LoudnessNRT:Settings
    static readonly int Settings_Offset;
    
    public UnrealSharp.AudioSynesthesia.LoudnessNRTSettings Settings
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.AudioSynesthesia.LoudnessNRTSettings>.FromNative(IntPtr.Add(NativeObject, Settings_Offset), 0, this);
        }
    }
    
    // Function /Script/AudioSynesthesia.LoudnessNRT:GetNormalizedLoudnessAtTime
    static readonly IntPtr GetNormalizedLoudnessAtTime_NativeFunction;
    static readonly int GetNormalizedLoudnessAtTime_ParamsSize;
    static readonly int GetNormalizedLoudnessAtTime_InSeconds_Offset;
    static readonly int GetNormalizedLoudnessAtTime_OutLoudness_Offset;
    
    public void GetNormalizedLoudnessAtTime(float inSeconds, out float outLoudness)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNormalizedLoudnessAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetNormalizedLoudnessAtTime_InSeconds_Offset), 0, null, inSeconds);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNormalizedLoudnessAtTime_NativeFunction, ParamsBuffer);
            
            outLoudness = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetNormalizedLoudnessAtTime_OutLoudness_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AudioSynesthesia.LoudnessNRT:GetNormalizedChannelLoudnessAtTime
    static readonly IntPtr GetNormalizedChannelLoudnessAtTime_NativeFunction;
    static readonly int GetNormalizedChannelLoudnessAtTime_ParamsSize;
    static readonly int GetNormalizedChannelLoudnessAtTime_InSeconds_Offset;
    static readonly int GetNormalizedChannelLoudnessAtTime_InChannel_Offset;
    static readonly int GetNormalizedChannelLoudnessAtTime_OutLoudness_Offset;
    
    public void GetNormalizedChannelLoudnessAtTime(float inSeconds, int inChannel, out float outLoudness)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNormalizedChannelLoudnessAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetNormalizedChannelLoudnessAtTime_InSeconds_Offset), 0, null, inSeconds);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetNormalizedChannelLoudnessAtTime_InChannel_Offset), 0, null, inChannel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNormalizedChannelLoudnessAtTime_NativeFunction, ParamsBuffer);
            
            outLoudness = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetNormalizedChannelLoudnessAtTime_OutLoudness_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AudioSynesthesia.LoudnessNRT:GetLoudnessAtTime
    static readonly IntPtr GetLoudnessAtTime_NativeFunction;
    static readonly int GetLoudnessAtTime_ParamsSize;
    static readonly int GetLoudnessAtTime_InSeconds_Offset;
    static readonly int GetLoudnessAtTime_OutLoudness_Offset;
    
    public void GetLoudnessAtTime(float inSeconds, out float outLoudness)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLoudnessAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetLoudnessAtTime_InSeconds_Offset), 0, null, inSeconds);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLoudnessAtTime_NativeFunction, ParamsBuffer);
            
            outLoudness = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetLoudnessAtTime_OutLoudness_Offset), 0, null);
            
        }
    }
    
    // Function /Script/AudioSynesthesia.LoudnessNRT:GetChannelLoudnessAtTime
    static readonly IntPtr GetChannelLoudnessAtTime_NativeFunction;
    static readonly int GetChannelLoudnessAtTime_ParamsSize;
    static readonly int GetChannelLoudnessAtTime_InSeconds_Offset;
    static readonly int GetChannelLoudnessAtTime_InChannel_Offset;
    static readonly int GetChannelLoudnessAtTime_OutLoudness_Offset;
    
    public void GetChannelLoudnessAtTime(float inSeconds, int inChannel, out float outLoudness)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetChannelLoudnessAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetChannelLoudnessAtTime_InSeconds_Offset), 0, null, inSeconds);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetChannelLoudnessAtTime_InChannel_Offset), 0, null, inChannel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetChannelLoudnessAtTime_NativeFunction, ParamsBuffer);
            
            outLoudness = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetChannelLoudnessAtTime_OutLoudness_Offset), 0, null);
            
        }
    }
    
    
}
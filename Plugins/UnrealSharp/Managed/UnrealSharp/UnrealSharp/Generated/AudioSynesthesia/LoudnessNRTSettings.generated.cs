// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AudioSynesthesia;

[UClass]
public partial class LoudnessNRTSettings : UnrealSharp.AudioSynesthesia.AudioSynesthesiaNRTSettings
{
    
    static LoudnessNRTSettings()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("LoudnessNRTSettings");
        
        AnalysisPeriod_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AnalysisPeriod");
        MinimumFrequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinimumFrequency");
        MaximumFrequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaximumFrequency");
        CurveType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CurveType");
        NoiseFloorDb_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NoiseFloorDb");
        
        
        
    }
    
    protected LoudnessNRTSettings(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/AudioSynesthesia.LoudnessNRTSettings:AnalysisPeriod
    static readonly int AnalysisPeriod_Offset;
    
    public float AnalysisPeriod
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AnalysisPeriod_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/AudioSynesthesia.LoudnessNRTSettings:MinimumFrequency
    static readonly int MinimumFrequency_Offset;
    
    public float MinimumFrequency
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinimumFrequency_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/AudioSynesthesia.LoudnessNRTSettings:MaximumFrequency
    static readonly int MaximumFrequency_Offset;
    
    public float MaximumFrequency
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaximumFrequency_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/AudioSynesthesia.LoudnessNRTSettings:CurveType
    static readonly int CurveType_Offset;
    
    public UnrealSharp.AudioSynesthesia.ELoudnessNRTCurveTypeEnum CurveType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.AudioSynesthesia.ELoudnessNRTCurveTypeEnum>.FromNative(IntPtr.Add(NativeObject, CurveType_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/AudioSynesthesia.LoudnessNRTSettings:NoiseFloorDb
    static readonly int NoiseFloorDb_Offset;
    
    public float NoiseFloorDb
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, NoiseFloorDb_Offset), 0, this);
        }
    }
    
    
}
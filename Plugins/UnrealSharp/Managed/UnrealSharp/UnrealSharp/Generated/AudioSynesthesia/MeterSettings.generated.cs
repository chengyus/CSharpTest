// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AudioSynesthesia;

[UClass]
public partial class MeterSettings : UnrealSharp.AudioSynesthesia.AudioSynesthesiaSettings
{
    
    static MeterSettings()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MeterSettings");
        
        AnalysisPeriod_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AnalysisPeriod");
        PeakMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PeakMode");
        MeterAttackTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MeterAttackTime");
        MeterReleaseTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MeterReleaseTime");
        PeakHoldTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PeakHoldTime");
        ClippingThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ClippingThreshold");
        
        
        
    }
    
    protected MeterSettings(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/AudioSynesthesia.MeterSettings:AnalysisPeriod
    static readonly int AnalysisPeriod_Offset;
    
    public float AnalysisPeriod
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AnalysisPeriod_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/AudioSynesthesia.MeterSettings:PeakMode
    static readonly int PeakMode_Offset;
    
    public UnrealSharp.AudioSynesthesia.EMeterPeakType PeakMode
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.AudioSynesthesia.EMeterPeakType>.FromNative(IntPtr.Add(NativeObject, PeakMode_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/AudioSynesthesia.MeterSettings:MeterAttackTime
    static readonly int MeterAttackTime_Offset;
    
    public int MeterAttackTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, MeterAttackTime_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/AudioSynesthesia.MeterSettings:MeterReleaseTime
    static readonly int MeterReleaseTime_Offset;
    
    public int MeterReleaseTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, MeterReleaseTime_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/AudioSynesthesia.MeterSettings:PeakHoldTime
    static readonly int PeakHoldTime_Offset;
    
    public int PeakHoldTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, PeakHoldTime_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/AudioSynesthesia.MeterSettings:ClippingThreshold
    static readonly int ClippingThreshold_Offset;
    
    public float ClippingThreshold
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ClippingThreshold_Offset), 0, this);
        }
    }
    
    
}
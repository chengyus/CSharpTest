// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AudioSynesthesia;

[UClass]
public partial class OnsetNRT : UnrealSharp.AudioSynesthesia.AudioSynesthesiaNRT
{
    
    static OnsetNRT()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("OnsetNRT");
        
        Settings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Settings");
        
        GetNormalizedChannelOnsetsBetweenTimes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNormalizedChannelOnsetsBetweenTimes");
        GetNormalizedChannelOnsetsBetweenTimes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNormalizedChannelOnsetsBetweenTimes_NativeFunction);
        GetNormalizedChannelOnsetsBetweenTimes_InStartSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNormalizedChannelOnsetsBetweenTimes_NativeFunction, "InStartSeconds");
        GetNormalizedChannelOnsetsBetweenTimes_InEndSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNormalizedChannelOnsetsBetweenTimes_NativeFunction, "InEndSeconds");
        GetNormalizedChannelOnsetsBetweenTimes_InChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNormalizedChannelOnsetsBetweenTimes_NativeFunction, "InChannel");
        GetNormalizedChannelOnsetsBetweenTimes_OutOnsetTimestamps_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNormalizedChannelOnsetsBetweenTimes_NativeFunction, "OutOnsetTimestamps");
        GetNormalizedChannelOnsetsBetweenTimes_OutOnsetTimestamps_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetNormalizedChannelOnsetsBetweenTimes_NativeFunction, "OutOnsetTimestamps");
        GetNormalizedChannelOnsetsBetweenTimes_OutOnsetStrengths_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNormalizedChannelOnsetsBetweenTimes_NativeFunction, "OutOnsetStrengths");
        GetNormalizedChannelOnsetsBetweenTimes_OutOnsetStrengths_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetNormalizedChannelOnsetsBetweenTimes_NativeFunction, "OutOnsetStrengths");
        GetChannelOnsetsBetweenTimes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetChannelOnsetsBetweenTimes");
        GetChannelOnsetsBetweenTimes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetChannelOnsetsBetweenTimes_NativeFunction);
        GetChannelOnsetsBetweenTimes_InStartSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChannelOnsetsBetweenTimes_NativeFunction, "InStartSeconds");
        GetChannelOnsetsBetweenTimes_InEndSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChannelOnsetsBetweenTimes_NativeFunction, "InEndSeconds");
        GetChannelOnsetsBetweenTimes_InChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChannelOnsetsBetweenTimes_NativeFunction, "InChannel");
        GetChannelOnsetsBetweenTimes_OutOnsetTimestamps_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChannelOnsetsBetweenTimes_NativeFunction, "OutOnsetTimestamps");
        GetChannelOnsetsBetweenTimes_OutOnsetTimestamps_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetChannelOnsetsBetweenTimes_NativeFunction, "OutOnsetTimestamps");
        GetChannelOnsetsBetweenTimes_OutOnsetStrengths_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChannelOnsetsBetweenTimes_NativeFunction, "OutOnsetStrengths");
        GetChannelOnsetsBetweenTimes_OutOnsetStrengths_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetChannelOnsetsBetweenTimes_NativeFunction, "OutOnsetStrengths");
        
        
    }
    
    protected OnsetNRT(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/AudioSynesthesia.OnsetNRT:Settings
    static readonly int Settings_Offset;
    
    public UnrealSharp.AudioSynesthesia.OnsetNRTSettings Settings
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.AudioSynesthesia.OnsetNRTSettings>.FromNative(IntPtr.Add(NativeObject, Settings_Offset), 0, this);
        }
    }
    
    // Function /Script/AudioSynesthesia.OnsetNRT:GetNormalizedChannelOnsetsBetweenTimes
    static readonly IntPtr GetNormalizedChannelOnsetsBetweenTimes_NativeFunction;
    static readonly int GetNormalizedChannelOnsetsBetweenTimes_ParamsSize;
    static readonly int GetNormalizedChannelOnsetsBetweenTimes_InStartSeconds_Offset;
    static readonly int GetNormalizedChannelOnsetsBetweenTimes_InEndSeconds_Offset;
    static readonly int GetNormalizedChannelOnsetsBetweenTimes_InChannel_Offset;
    static readonly int GetNormalizedChannelOnsetsBetweenTimes_OutOnsetTimestamps_Offset;
    static readonly int GetNormalizedChannelOnsetsBetweenTimes_OutOnsetTimestamps_ElementSize;
    static readonly int GetNormalizedChannelOnsetsBetweenTimes_OutOnsetStrengths_Offset;
    static readonly int GetNormalizedChannelOnsetsBetweenTimes_OutOnsetStrengths_ElementSize;
    
    public void GetNormalizedChannelOnsetsBetweenTimes(float inStartSeconds, float inEndSeconds, int inChannel, out System.Collections.Generic.IList<float> outOnsetTimestamps, out System.Collections.Generic.IList<float> outOnsetStrengths)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNormalizedChannelOnsetsBetweenTimes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetNormalizedChannelOnsetsBetweenTimes_InStartSeconds_Offset), 0, null, inStartSeconds);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetNormalizedChannelOnsetsBetweenTimes_InEndSeconds_Offset), 0, null, inEndSeconds);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetNormalizedChannelOnsetsBetweenTimes_InChannel_Offset), 0, null, inChannel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNormalizedChannelOnsetsBetweenTimes_NativeFunction, ParamsBuffer);
            
            IntPtr OutOnsetTimestamps_NativeBuffer = IntPtr.Add(ParamsBuffer, GetNormalizedChannelOnsetsBetweenTimes_OutOnsetTimestamps_Offset);
            UnrealArrayCopyMarshaler<float> OutOnsetTimestamps_Marshaler = new UnrealArrayCopyMarshaler<float> (1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, GetNormalizedChannelOnsetsBetweenTimes_OutOnsetTimestamps_ElementSize);
            outOnsetTimestamps = OutOnsetTimestamps_Marshaler.FromNative(OutOnsetTimestamps_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<float>.DestructInstance(OutOnsetTimestamps_NativeBuffer, 0);
            IntPtr OutOnsetStrengths_NativeBuffer = IntPtr.Add(ParamsBuffer, GetNormalizedChannelOnsetsBetweenTimes_OutOnsetStrengths_Offset);
            UnrealArrayCopyMarshaler<float> OutOnsetStrengths_Marshaler = new UnrealArrayCopyMarshaler<float> (1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, GetNormalizedChannelOnsetsBetweenTimes_OutOnsetStrengths_ElementSize);
            outOnsetStrengths = OutOnsetStrengths_Marshaler.FromNative(OutOnsetStrengths_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<float>.DestructInstance(OutOnsetStrengths_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/AudioSynesthesia.OnsetNRT:GetChannelOnsetsBetweenTimes
    static readonly IntPtr GetChannelOnsetsBetweenTimes_NativeFunction;
    static readonly int GetChannelOnsetsBetweenTimes_ParamsSize;
    static readonly int GetChannelOnsetsBetweenTimes_InStartSeconds_Offset;
    static readonly int GetChannelOnsetsBetweenTimes_InEndSeconds_Offset;
    static readonly int GetChannelOnsetsBetweenTimes_InChannel_Offset;
    static readonly int GetChannelOnsetsBetweenTimes_OutOnsetTimestamps_Offset;
    static readonly int GetChannelOnsetsBetweenTimes_OutOnsetTimestamps_ElementSize;
    static readonly int GetChannelOnsetsBetweenTimes_OutOnsetStrengths_Offset;
    static readonly int GetChannelOnsetsBetweenTimes_OutOnsetStrengths_ElementSize;
    
    public void GetChannelOnsetsBetweenTimes(float inStartSeconds, float inEndSeconds, int inChannel, out System.Collections.Generic.IList<float> outOnsetTimestamps, out System.Collections.Generic.IList<float> outOnsetStrengths)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetChannelOnsetsBetweenTimes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetChannelOnsetsBetweenTimes_InStartSeconds_Offset), 0, null, inStartSeconds);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetChannelOnsetsBetweenTimes_InEndSeconds_Offset), 0, null, inEndSeconds);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetChannelOnsetsBetweenTimes_InChannel_Offset), 0, null, inChannel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetChannelOnsetsBetweenTimes_NativeFunction, ParamsBuffer);
            
            IntPtr OutOnsetTimestamps_NativeBuffer = IntPtr.Add(ParamsBuffer, GetChannelOnsetsBetweenTimes_OutOnsetTimestamps_Offset);
            UnrealArrayCopyMarshaler<float> OutOnsetTimestamps_Marshaler = new UnrealArrayCopyMarshaler<float> (1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, GetChannelOnsetsBetweenTimes_OutOnsetTimestamps_ElementSize);
            outOnsetTimestamps = OutOnsetTimestamps_Marshaler.FromNative(OutOnsetTimestamps_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<float>.DestructInstance(OutOnsetTimestamps_NativeBuffer, 0);
            IntPtr OutOnsetStrengths_NativeBuffer = IntPtr.Add(ParamsBuffer, GetChannelOnsetsBetweenTimes_OutOnsetStrengths_Offset);
            UnrealArrayCopyMarshaler<float> OutOnsetStrengths_Marshaler = new UnrealArrayCopyMarshaler<float> (1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, GetChannelOnsetsBetweenTimes_OutOnsetStrengths_ElementSize);
            outOnsetStrengths = OutOnsetStrengths_Marshaler.FromNative(OutOnsetStrengths_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<float>.DestructInstance(OutOnsetStrengths_NativeBuffer, 0);
            
        }
    }
    
    
}
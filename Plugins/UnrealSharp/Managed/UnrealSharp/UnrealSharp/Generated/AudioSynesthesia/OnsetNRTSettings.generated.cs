// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AudioSynesthesia;

[UClass]
public partial class OnsetNRTSettings : UnrealSharp.AudioSynesthesia.AudioSynesthesiaNRTSettings
{
    
    static OnsetNRTSettings()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("OnsetNRTSettings");
        
        bDownmixToMono_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bDownmixToMono");
        GranularityInSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "GranularityInSeconds");
        Sensitivity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Sensitivity");
        MinimumFrequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinimumFrequency");
        MaximumFrequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaximumFrequency");
        
        
        
    }
    
    protected OnsetNRTSettings(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/AudioSynesthesia.OnsetNRTSettings:bDownmixToMono
    static readonly int bDownmixToMono_Offset;
    
    public bool bDownmixToMono
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bDownmixToMono_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/AudioSynesthesia.OnsetNRTSettings:GranularityInSeconds
    static readonly int GranularityInSeconds_Offset;
    
    public float GranularityInSeconds
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, GranularityInSeconds_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/AudioSynesthesia.OnsetNRTSettings:Sensitivity
    static readonly int Sensitivity_Offset;
    
    public float Sensitivity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Sensitivity_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/AudioSynesthesia.OnsetNRTSettings:MinimumFrequency
    static readonly int MinimumFrequency_Offset;
    
    public float MinimumFrequency
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinimumFrequency_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/AudioSynesthesia.OnsetNRTSettings:MaximumFrequency
    static readonly int MaximumFrequency_Offset;
    
    public float MaximumFrequency
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaximumFrequency_Offset), 0, this);
        }
    }
    
    
}
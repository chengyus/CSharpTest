// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AudioSynesthesia;

[UClass]
public partial class SynesthesiaSpectrumAnalysisSettings : UnrealSharp.AudioSynesthesia.AudioSynesthesiaSettings
{
    
    static SynesthesiaSpectrumAnalysisSettings()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SynesthesiaSpectrumAnalysisSettings");
        
        AnalysisPeriod_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AnalysisPeriod");
        FFTSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FFTSize");
        SpectrumType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SpectrumType");
        WindowType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WindowType");
        bDownmixToMono_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bDownmixToMono");
        
        
        
    }
    
    protected SynesthesiaSpectrumAnalysisSettings(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/AudioSynesthesia.SynesthesiaSpectrumAnalysisSettings:AnalysisPeriod
    static readonly int AnalysisPeriod_Offset;
    
    public float AnalysisPeriod
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AnalysisPeriod_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/AudioSynesthesia.SynesthesiaSpectrumAnalysisSettings:FFTSize
    static readonly int FFTSize_Offset;
    
    public UnrealSharp.Engine.EFFTSize FFTSize
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EFFTSize>.FromNative(IntPtr.Add(NativeObject, FFTSize_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/AudioSynesthesia.SynesthesiaSpectrumAnalysisSettings:SpectrumType
    static readonly int SpectrumType_Offset;
    
    public UnrealSharp.Engine.EAudioSpectrumType SpectrumType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EAudioSpectrumType>.FromNative(IntPtr.Add(NativeObject, SpectrumType_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/AudioSynesthesia.SynesthesiaSpectrumAnalysisSettings:WindowType
    static readonly int WindowType_Offset;
    
    public UnrealSharp.Engine.EFFTWindowType WindowType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EFFTWindowType>.FromNative(IntPtr.Add(NativeObject, WindowType_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/AudioSynesthesia.SynesthesiaSpectrumAnalysisSettings:bDownmixToMono
    static readonly int bDownmixToMono_Offset;
    
    public bool bDownmixToMono
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bDownmixToMono_Offset), 0, this);
        }
    }
    
    
}
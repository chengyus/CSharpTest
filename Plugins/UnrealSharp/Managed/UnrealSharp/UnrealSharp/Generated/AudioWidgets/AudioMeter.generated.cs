// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AudioWidgets;

[UClass]
public partial class AudioMeter : UnrealSharp.UMG.Widget
{
    
    static AudioMeter()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AudioMeter");
        
        WidgetStyle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WidgetStyle");
        Orientation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Orientation");
        BackgroundColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BackgroundColor");
        MeterBackgroundColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MeterBackgroundColor");
        MeterValueColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MeterValueColor");
        MeterPeakColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MeterPeakColor");
        MeterClippingColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MeterClippingColor");
        MeterScaleColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MeterScaleColor");
        MeterScaleLabelColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MeterScaleLabelColor");
        
        SetMeterValueColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMeterValueColor");
        SetMeterValueColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMeterValueColor_NativeFunction);
        SetMeterValueColor_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMeterValueColor_NativeFunction, "InValue");
        SetMeterScaleLabelColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMeterScaleLabelColor");
        SetMeterScaleLabelColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMeterScaleLabelColor_NativeFunction);
        SetMeterScaleLabelColor_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMeterScaleLabelColor_NativeFunction, "InValue");
        SetMeterScaleColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMeterScaleColor");
        SetMeterScaleColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMeterScaleColor_NativeFunction);
        SetMeterScaleColor_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMeterScaleColor_NativeFunction, "InValue");
        SetMeterPeakColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMeterPeakColor");
        SetMeterPeakColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMeterPeakColor_NativeFunction);
        SetMeterPeakColor_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMeterPeakColor_NativeFunction, "InValue");
        SetMeterClippingColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMeterClippingColor");
        SetMeterClippingColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMeterClippingColor_NativeFunction);
        SetMeterClippingColor_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMeterClippingColor_NativeFunction, "InValue");
        SetMeterChannelInfo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMeterChannelInfo");
        SetMeterChannelInfo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMeterChannelInfo_NativeFunction);
        SetMeterChannelInfo_InMeterChannelInfo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMeterChannelInfo_NativeFunction, "InMeterChannelInfo");
        SetMeterChannelInfo_InMeterChannelInfo_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetMeterChannelInfo_NativeFunction, "InMeterChannelInfo");
        SetMeterBackgroundColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMeterBackgroundColor");
        SetMeterBackgroundColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMeterBackgroundColor_NativeFunction);
        SetMeterBackgroundColor_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMeterBackgroundColor_NativeFunction, "InValue");
        SetBackgroundColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBackgroundColor");
        SetBackgroundColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBackgroundColor_NativeFunction);
        SetBackgroundColor_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBackgroundColor_NativeFunction, "InValue");
        GetMeterChannelInfo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMeterChannelInfo");
        GetMeterChannelInfo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMeterChannelInfo_NativeFunction);
        GetMeterChannelInfo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMeterChannelInfo_NativeFunction, "ReturnValue");
        GetMeterChannelInfo_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetMeterChannelInfo_NativeFunction, "ReturnValue");
        
        
    }
    
    protected AudioMeter(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/AudioWidgets.AudioMeter:WidgetStyle
    static readonly int WidgetStyle_Offset;
    
    public UnrealSharp.AudioWidgets.AudioMeterStyle WidgetStyle
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.AudioWidgets.AudioMeterStyleMarshaler.FromNative(IntPtr.Add(NativeObject, WidgetStyle_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.AudioWidgets.AudioMeterStyleMarshaler.ToNative(IntPtr.Add(NativeObject, WidgetStyle_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/AudioWidgets.AudioMeter:Orientation
    static readonly int Orientation_Offset;
    
    public UnrealSharp.SlateCore.EOrientation Orientation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.SlateCore.EOrientation>.FromNative(IntPtr.Add(NativeObject, Orientation_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/AudioWidgets.AudioMeter:BackgroundColor
    static readonly int BackgroundColor_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor BackgroundColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, BackgroundColor_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/AudioWidgets.AudioMeter:MeterBackgroundColor
    static readonly int MeterBackgroundColor_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor MeterBackgroundColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, MeterBackgroundColor_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/AudioWidgets.AudioMeter:MeterValueColor
    static readonly int MeterValueColor_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor MeterValueColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, MeterValueColor_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/AudioWidgets.AudioMeter:MeterPeakColor
    static readonly int MeterPeakColor_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor MeterPeakColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, MeterPeakColor_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/AudioWidgets.AudioMeter:MeterClippingColor
    static readonly int MeterClippingColor_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor MeterClippingColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, MeterClippingColor_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/AudioWidgets.AudioMeter:MeterScaleColor
    static readonly int MeterScaleColor_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor MeterScaleColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, MeterScaleColor_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/AudioWidgets.AudioMeter:MeterScaleLabelColor
    static readonly int MeterScaleLabelColor_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor MeterScaleLabelColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, MeterScaleLabelColor_Offset), 0, this);
        }
    }
    
    // Function /Script/AudioWidgets.AudioMeter:SetMeterValueColor
    static readonly IntPtr SetMeterValueColor_NativeFunction;
    static readonly int SetMeterValueColor_ParamsSize;
    static readonly int SetMeterValueColor_InValue_Offset;
    
    public void SetMeterValueColor(UnrealSharp.CoreUObject.LinearColor inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMeterValueColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetMeterValueColor_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMeterValueColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioMeter:SetMeterScaleLabelColor
    static readonly IntPtr SetMeterScaleLabelColor_NativeFunction;
    static readonly int SetMeterScaleLabelColor_ParamsSize;
    static readonly int SetMeterScaleLabelColor_InValue_Offset;
    
    public void SetMeterScaleLabelColor(UnrealSharp.CoreUObject.LinearColor inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMeterScaleLabelColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetMeterScaleLabelColor_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMeterScaleLabelColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioMeter:SetMeterScaleColor
    static readonly IntPtr SetMeterScaleColor_NativeFunction;
    static readonly int SetMeterScaleColor_ParamsSize;
    static readonly int SetMeterScaleColor_InValue_Offset;
    
    public void SetMeterScaleColor(UnrealSharp.CoreUObject.LinearColor inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMeterScaleColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetMeterScaleColor_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMeterScaleColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioMeter:SetMeterPeakColor
    static readonly IntPtr SetMeterPeakColor_NativeFunction;
    static readonly int SetMeterPeakColor_ParamsSize;
    static readonly int SetMeterPeakColor_InValue_Offset;
    
    public void SetMeterPeakColor(UnrealSharp.CoreUObject.LinearColor inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMeterPeakColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetMeterPeakColor_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMeterPeakColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioMeter:SetMeterClippingColor
    static readonly IntPtr SetMeterClippingColor_NativeFunction;
    static readonly int SetMeterClippingColor_ParamsSize;
    static readonly int SetMeterClippingColor_InValue_Offset;
    
    public void SetMeterClippingColor(UnrealSharp.CoreUObject.LinearColor inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMeterClippingColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetMeterClippingColor_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMeterClippingColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioMeter:SetMeterChannelInfo
    static readonly IntPtr SetMeterChannelInfo_NativeFunction;
    static readonly int SetMeterChannelInfo_ParamsSize;
    static readonly int SetMeterChannelInfo_InMeterChannelInfo_Offset;
    static readonly int SetMeterChannelInfo_InMeterChannelInfo_ElementSize;
    
    public void SetMeterChannelInfo(System.Collections.Generic.IList<UnrealSharp.AudioWidgets.MeterChannelInfo> inMeterChannelInfo)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMeterChannelInfo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InMeterChannelInfo_NativeBuffer = IntPtr.Add(ParamsBuffer, SetMeterChannelInfo_InMeterChannelInfo_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.AudioWidgets.MeterChannelInfo> InMeterChannelInfo_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.AudioWidgets.MeterChannelInfo>(1, BlittableMarshaller<UnrealSharp.AudioWidgets.MeterChannelInfo>.ToNative, BlittableMarshaller<UnrealSharp.AudioWidgets.MeterChannelInfo>.FromNative, SetMeterChannelInfo_InMeterChannelInfo_ElementSize);
            InMeterChannelInfo_Marshaler.ToNative(InMeterChannelInfo_NativeBuffer, 0, null, inMeterChannelInfo);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMeterChannelInfo_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioMeter:SetMeterBackgroundColor
    static readonly IntPtr SetMeterBackgroundColor_NativeFunction;
    static readonly int SetMeterBackgroundColor_ParamsSize;
    static readonly int SetMeterBackgroundColor_InValue_Offset;
    
    public void SetMeterBackgroundColor(UnrealSharp.CoreUObject.LinearColor inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMeterBackgroundColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetMeterBackgroundColor_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMeterBackgroundColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioMeter:SetBackgroundColor
    static readonly IntPtr SetBackgroundColor_NativeFunction;
    static readonly int SetBackgroundColor_ParamsSize;
    static readonly int SetBackgroundColor_InValue_Offset;
    
    public void SetBackgroundColor(UnrealSharp.CoreUObject.LinearColor inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBackgroundColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetBackgroundColor_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBackgroundColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioMeter:GetMeterChannelInfo
    static readonly IntPtr GetMeterChannelInfo_NativeFunction;
    static readonly int GetMeterChannelInfo_ParamsSize;
    static readonly int GetMeterChannelInfo_ReturnValue_Offset;
    static readonly int GetMeterChannelInfo_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.AudioWidgets.MeterChannelInfo> GetMeterChannelInfo()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMeterChannelInfo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMeterChannelInfo_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.AudioWidgets.MeterChannelInfo> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetMeterChannelInfo_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.AudioWidgets.MeterChannelInfo> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.AudioWidgets.MeterChannelInfo> (1, BlittableMarshaller<UnrealSharp.AudioWidgets.MeterChannelInfo>.ToNative, BlittableMarshaller<UnrealSharp.AudioWidgets.MeterChannelInfo>.FromNative, GetMeterChannelInfo_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.AudioWidgets.MeterChannelInfo>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AudioWidgets;

[UClass]
public partial class AudioRadialSlider : UnrealSharp.UMG.Widget
{
    
    static AudioRadialSlider()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AudioRadialSlider");
        
        
        SetWidgetLayout_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWidgetLayout");
        SetWidgetLayout_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWidgetLayout_NativeFunction);
        SetWidgetLayout_InLayout_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWidgetLayout_NativeFunction, "InLayout");
        SetValueTextReadOnly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueTextReadOnly");
        SetValueTextReadOnly_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueTextReadOnly_NativeFunction);
        SetValueTextReadOnly_bIsReadOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueTextReadOnly_NativeFunction, "bIsReadOnly");
        SetUnitsTextReadOnly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetUnitsTextReadOnly");
        SetUnitsTextReadOnly_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetUnitsTextReadOnly_NativeFunction);
        SetUnitsTextReadOnly_bIsReadOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUnitsTextReadOnly_NativeFunction, "bIsReadOnly");
        SetTextLabelBackgroundColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTextLabelBackgroundColor");
        SetTextLabelBackgroundColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTextLabelBackgroundColor_NativeFunction);
        SetTextLabelBackgroundColor_InColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTextLabelBackgroundColor_NativeFunction, "InColor");
        SetSliderThickness_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSliderThickness");
        SetSliderThickness_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSliderThickness_NativeFunction);
        SetSliderThickness_InThickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSliderThickness_NativeFunction, "InThickness");
        SetSliderProgressColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSliderProgressColor");
        SetSliderProgressColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSliderProgressColor_NativeFunction);
        SetSliderProgressColor_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSliderProgressColor_NativeFunction, "InValue");
        SetSliderBarColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSliderBarColor");
        SetSliderBarColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSliderBarColor_NativeFunction);
        SetSliderBarColor_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSliderBarColor_NativeFunction, "InValue");
        SetShowUnitsText_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetShowUnitsText");
        SetShowUnitsText_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetShowUnitsText_NativeFunction);
        SetShowUnitsText_bShowUnitsText_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetShowUnitsText_NativeFunction, "bShowUnitsText");
        SetShowLabelOnlyOnHover_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetShowLabelOnlyOnHover");
        SetShowLabelOnlyOnHover_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetShowLabelOnlyOnHover_NativeFunction);
        SetShowLabelOnlyOnHover_bShowLabelOnlyOnHover_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetShowLabelOnlyOnHover_NativeFunction, "bShowLabelOnlyOnHover");
        SetOutputRange_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOutputRange");
        SetOutputRange_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOutputRange_NativeFunction);
        SetOutputRange_InOutputRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOutputRange_NativeFunction, "InOutputRange");
        SetHandStartEndRatio_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetHandStartEndRatio");
        SetHandStartEndRatio_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetHandStartEndRatio_NativeFunction);
        SetHandStartEndRatio_InHandStartEndRatio_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetHandStartEndRatio_NativeFunction, "InHandStartEndRatio");
        SetCenterBackgroundColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCenterBackgroundColor");
        SetCenterBackgroundColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCenterBackgroundColor_NativeFunction);
        SetCenterBackgroundColor_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCenterBackgroundColor_NativeFunction, "InValue");
        GetSliderValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSliderValue");
        GetSliderValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSliderValue_NativeFunction);
        GetSliderValue_OutputValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSliderValue_NativeFunction, "OutputValue");
        GetSliderValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSliderValue_NativeFunction, "ReturnValue");
        GetOutputValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOutputValue");
        GetOutputValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOutputValue_NativeFunction);
        GetOutputValue_InSliderValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOutputValue_NativeFunction, "InSliderValue");
        GetOutputValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOutputValue_NativeFunction, "ReturnValue");
        
        
    }
    
    protected AudioRadialSlider(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/AudioWidgets.AudioRadialSlider:SetWidgetLayout
    static readonly IntPtr SetWidgetLayout_NativeFunction;
    static readonly int SetWidgetLayout_ParamsSize;
    static readonly int SetWidgetLayout_InLayout_Offset;
    
    public void SetWidgetLayout(UnrealSharp.AudioWidgets.EAudioRadialSliderLayout inLayout)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWidgetLayout_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.AudioWidgets.EAudioRadialSliderLayout>.ToNative(IntPtr.Add(ParamsBuffer, SetWidgetLayout_InLayout_Offset), 0, null, inLayout);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetWidgetLayout_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioRadialSlider:SetValueTextReadOnly
    static readonly IntPtr SetValueTextReadOnly_NativeFunction;
    static readonly int SetValueTextReadOnly_ParamsSize;
    static readonly int SetValueTextReadOnly_bIsReadOnly_Offset;
    
    public void SetValueTextReadOnly(bool bIsReadOnly)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueTextReadOnly_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetValueTextReadOnly_bIsReadOnly_Offset), 0, null, bIsReadOnly);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetValueTextReadOnly_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioRadialSlider:SetUnitsTextReadOnly
    static readonly IntPtr SetUnitsTextReadOnly_NativeFunction;
    static readonly int SetUnitsTextReadOnly_ParamsSize;
    static readonly int SetUnitsTextReadOnly_bIsReadOnly_Offset;
    
    public void SetUnitsTextReadOnly(bool bIsReadOnly)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetUnitsTextReadOnly_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetUnitsTextReadOnly_bIsReadOnly_Offset), 0, null, bIsReadOnly);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetUnitsTextReadOnly_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioRadialSlider:SetTextLabelBackgroundColor
    static readonly IntPtr SetTextLabelBackgroundColor_NativeFunction;
    static readonly int SetTextLabelBackgroundColor_ParamsSize;
    static readonly int SetTextLabelBackgroundColor_InColor_Offset;
    
    public void SetTextLabelBackgroundColor(UnrealSharp.SlateCore.SlateColor inColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTextLabelBackgroundColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.SlateColorMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetTextLabelBackgroundColor_InColor_Offset), 0, null, inColor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTextLabelBackgroundColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioRadialSlider:SetSliderThickness
    static readonly IntPtr SetSliderThickness_NativeFunction;
    static readonly int SetSliderThickness_ParamsSize;
    static readonly int SetSliderThickness_InThickness_Offset;
    
    public void SetSliderThickness(float inThickness)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSliderThickness_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSliderThickness_InThickness_Offset), 0, null, inThickness);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSliderThickness_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioRadialSlider:SetSliderProgressColor
    static readonly IntPtr SetSliderProgressColor_NativeFunction;
    static readonly int SetSliderProgressColor_ParamsSize;
    static readonly int SetSliderProgressColor_InValue_Offset;
    
    public void SetSliderProgressColor(UnrealSharp.CoreUObject.LinearColor inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSliderProgressColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetSliderProgressColor_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSliderProgressColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioRadialSlider:SetSliderBarColor
    static readonly IntPtr SetSliderBarColor_NativeFunction;
    static readonly int SetSliderBarColor_ParamsSize;
    static readonly int SetSliderBarColor_InValue_Offset;
    
    public void SetSliderBarColor(UnrealSharp.CoreUObject.LinearColor inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSliderBarColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetSliderBarColor_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSliderBarColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioRadialSlider:SetShowUnitsText
    static readonly IntPtr SetShowUnitsText_NativeFunction;
    static readonly int SetShowUnitsText_ParamsSize;
    static readonly int SetShowUnitsText_bShowUnitsText_Offset;
    
    public void SetShowUnitsText(bool bShowUnitsText)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetShowUnitsText_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetShowUnitsText_bShowUnitsText_Offset), 0, null, bShowUnitsText);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetShowUnitsText_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioRadialSlider:SetShowLabelOnlyOnHover
    static readonly IntPtr SetShowLabelOnlyOnHover_NativeFunction;
    static readonly int SetShowLabelOnlyOnHover_ParamsSize;
    static readonly int SetShowLabelOnlyOnHover_bShowLabelOnlyOnHover_Offset;
    
    public void SetShowLabelOnlyOnHover(bool bShowLabelOnlyOnHover)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetShowLabelOnlyOnHover_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetShowLabelOnlyOnHover_bShowLabelOnlyOnHover_Offset), 0, null, bShowLabelOnlyOnHover);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetShowLabelOnlyOnHover_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioRadialSlider:SetOutputRange
    static readonly IntPtr SetOutputRange_NativeFunction;
    static readonly int SetOutputRange_ParamsSize;
    static readonly int SetOutputRange_InOutputRange_Offset;
    
    public void SetOutputRange(System.DoubleNumerics.Vector2 inOutputRange)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOutputRange_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetOutputRange_InOutputRange_Offset), 0, null, inOutputRange);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOutputRange_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioRadialSlider:SetHandStartEndRatio
    static readonly IntPtr SetHandStartEndRatio_NativeFunction;
    static readonly int SetHandStartEndRatio_ParamsSize;
    static readonly int SetHandStartEndRatio_InHandStartEndRatio_Offset;
    
    public void SetHandStartEndRatio(System.DoubleNumerics.Vector2 inHandStartEndRatio)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetHandStartEndRatio_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetHandStartEndRatio_InHandStartEndRatio_Offset), 0, null, inHandStartEndRatio);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetHandStartEndRatio_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioRadialSlider:SetCenterBackgroundColor
    static readonly IntPtr SetCenterBackgroundColor_NativeFunction;
    static readonly int SetCenterBackgroundColor_ParamsSize;
    static readonly int SetCenterBackgroundColor_InValue_Offset;
    
    public void SetCenterBackgroundColor(UnrealSharp.CoreUObject.LinearColor inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCenterBackgroundColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetCenterBackgroundColor_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCenterBackgroundColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioRadialSlider:GetSliderValue
    static readonly IntPtr GetSliderValue_NativeFunction;
    static readonly int GetSliderValue_ParamsSize;
    static readonly int GetSliderValue_OutputValue_Offset;
    static readonly int GetSliderValue_ReturnValue_Offset;
    
    public float GetSliderValue(float outputValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSliderValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetSliderValue_OutputValue_Offset), 0, null, outputValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSliderValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetSliderValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioWidgets.AudioRadialSlider:GetOutputValue
    static readonly IntPtr GetOutputValue_NativeFunction;
    static readonly int GetOutputValue_ParamsSize;
    static readonly int GetOutputValue_InSliderValue_Offset;
    static readonly int GetOutputValue_ReturnValue_Offset;
    
    public float GetOutputValue(float inSliderValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOutputValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetOutputValue_InSliderValue_Offset), 0, null, inSliderValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOutputValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetOutputValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
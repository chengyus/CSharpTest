// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.AudioWidgets;

[UClass]
abstract public partial class AudioSliderBase : UnrealSharp.UMG.Widget
{
    
    static AudioSliderBase()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AudioSliderBase");
        
        Orientation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Orientation");
        
        SetWidgetBackgroundColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWidgetBackgroundColor");
        SetWidgetBackgroundColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWidgetBackgroundColor_NativeFunction);
        SetWidgetBackgroundColor_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWidgetBackgroundColor_NativeFunction, "InValue");
        SetValueTextReadOnly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetValueTextReadOnly");
        SetValueTextReadOnly_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetValueTextReadOnly_NativeFunction);
        SetValueTextReadOnly_bIsReadOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetValueTextReadOnly_NativeFunction, "bIsReadOnly");
        SetUnitsTextReadOnly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetUnitsTextReadOnly");
        SetUnitsTextReadOnly_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetUnitsTextReadOnly_NativeFunction);
        SetUnitsTextReadOnly_bIsReadOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUnitsTextReadOnly_NativeFunction, "bIsReadOnly");
        SetTextLabelBackgroundColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTextLabelBackgroundColor");
        SetTextLabelBackgroundColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTextLabelBackgroundColor_NativeFunction);
        SetTextLabelBackgroundColor_InColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTextLabelBackgroundColor_NativeFunction, "InColor");
        SetSliderThumbColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSliderThumbColor");
        SetSliderThumbColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSliderThumbColor_NativeFunction);
        SetSliderThumbColor_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSliderThumbColor_NativeFunction, "InValue");
        SetSliderBarColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSliderBarColor");
        SetSliderBarColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSliderBarColor_NativeFunction);
        SetSliderBarColor_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSliderBarColor_NativeFunction, "InValue");
        SetSliderBackgroundColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSliderBackgroundColor");
        SetSliderBackgroundColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSliderBackgroundColor_NativeFunction);
        SetSliderBackgroundColor_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSliderBackgroundColor_NativeFunction, "InValue");
        SetShowUnitsText_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetShowUnitsText");
        SetShowUnitsText_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetShowUnitsText_NativeFunction);
        SetShowUnitsText_bShowUnitsText_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetShowUnitsText_NativeFunction, "bShowUnitsText");
        SetShowLabelOnlyOnHover_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetShowLabelOnlyOnHover");
        SetShowLabelOnlyOnHover_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetShowLabelOnlyOnHover_NativeFunction);
        SetShowLabelOnlyOnHover_bShowLabelOnlyOnHover_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetShowLabelOnlyOnHover_NativeFunction, "bShowLabelOnlyOnHover");
        GetSliderValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSliderValue");
        GetSliderValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSliderValue_NativeFunction);
        GetSliderValue_OutputValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSliderValue_NativeFunction, "OutputValue");
        GetSliderValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSliderValue_NativeFunction, "ReturnValue");
        GetOutputValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOutputValue");
        GetOutputValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOutputValue_NativeFunction);
        GetOutputValue_InSliderValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOutputValue_NativeFunction, "InSliderValue");
        GetOutputValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOutputValue_NativeFunction, "ReturnValue");
        GetLinValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLinValue");
        GetLinValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLinValue_NativeFunction);
        GetLinValue_OutputValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinValue_NativeFunction, "OutputValue");
        GetLinValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinValue_NativeFunction, "ReturnValue");
        
        
    }
    
    protected AudioSliderBase(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ByteProperty /Script/AudioWidgets.AudioSliderBase:Orientation
    static readonly int Orientation_Offset;
    
    public UnrealSharp.SlateCore.EOrientation Orientation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.SlateCore.EOrientation>.FromNative(IntPtr.Add(NativeObject, Orientation_Offset), 0, this);
        }
    }
    
    // Function /Script/AudioWidgets.AudioSliderBase:SetWidgetBackgroundColor
    static readonly IntPtr SetWidgetBackgroundColor_NativeFunction;
    static readonly int SetWidgetBackgroundColor_ParamsSize;
    static readonly int SetWidgetBackgroundColor_InValue_Offset;
    
    public void SetWidgetBackgroundColor(UnrealSharp.CoreUObject.LinearColor inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWidgetBackgroundColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetWidgetBackgroundColor_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetWidgetBackgroundColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioSliderBase:SetValueTextReadOnly
    static readonly IntPtr SetValueTextReadOnly_NativeFunction;
    static readonly int SetValueTextReadOnly_ParamsSize;
    static readonly int SetValueTextReadOnly_bIsReadOnly_Offset;
    
    public void SetValueTextReadOnly(bool bIsReadOnly)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetValueTextReadOnly_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetValueTextReadOnly_bIsReadOnly_Offset), 0, null, bIsReadOnly);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetValueTextReadOnly_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioSliderBase:SetUnitsTextReadOnly
    static readonly IntPtr SetUnitsTextReadOnly_NativeFunction;
    static readonly int SetUnitsTextReadOnly_ParamsSize;
    static readonly int SetUnitsTextReadOnly_bIsReadOnly_Offset;
    
    public void SetUnitsTextReadOnly(bool bIsReadOnly)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetUnitsTextReadOnly_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetUnitsTextReadOnly_bIsReadOnly_Offset), 0, null, bIsReadOnly);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetUnitsTextReadOnly_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioSliderBase:SetTextLabelBackgroundColor
    static readonly IntPtr SetTextLabelBackgroundColor_NativeFunction;
    static readonly int SetTextLabelBackgroundColor_ParamsSize;
    static readonly int SetTextLabelBackgroundColor_InColor_Offset;
    
    public void SetTextLabelBackgroundColor(UnrealSharp.SlateCore.SlateColor inColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTextLabelBackgroundColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.SlateCore.SlateColorMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetTextLabelBackgroundColor_InColor_Offset), 0, null, inColor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTextLabelBackgroundColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioSliderBase:SetSliderThumbColor
    static readonly IntPtr SetSliderThumbColor_NativeFunction;
    static readonly int SetSliderThumbColor_ParamsSize;
    static readonly int SetSliderThumbColor_InValue_Offset;
    
    public void SetSliderThumbColor(UnrealSharp.CoreUObject.LinearColor inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSliderThumbColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetSliderThumbColor_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSliderThumbColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioSliderBase:SetSliderBarColor
    static readonly IntPtr SetSliderBarColor_NativeFunction;
    static readonly int SetSliderBarColor_ParamsSize;
    static readonly int SetSliderBarColor_InValue_Offset;
    
    public void SetSliderBarColor(UnrealSharp.CoreUObject.LinearColor inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSliderBarColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetSliderBarColor_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSliderBarColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioSliderBase:SetSliderBackgroundColor
    static readonly IntPtr SetSliderBackgroundColor_NativeFunction;
    static readonly int SetSliderBackgroundColor_ParamsSize;
    static readonly int SetSliderBackgroundColor_InValue_Offset;
    
    public void SetSliderBackgroundColor(UnrealSharp.CoreUObject.LinearColor inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSliderBackgroundColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetSliderBackgroundColor_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSliderBackgroundColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioSliderBase:SetShowUnitsText
    static readonly IntPtr SetShowUnitsText_NativeFunction;
    static readonly int SetShowUnitsText_ParamsSize;
    static readonly int SetShowUnitsText_bShowUnitsText_Offset;
    
    public void SetShowUnitsText(bool bShowUnitsText)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetShowUnitsText_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetShowUnitsText_bShowUnitsText_Offset), 0, null, bShowUnitsText);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetShowUnitsText_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioSliderBase:SetShowLabelOnlyOnHover
    static readonly IntPtr SetShowLabelOnlyOnHover_NativeFunction;
    static readonly int SetShowLabelOnlyOnHover_ParamsSize;
    static readonly int SetShowLabelOnlyOnHover_bShowLabelOnlyOnHover_Offset;
    
    public void SetShowLabelOnlyOnHover(bool bShowLabelOnlyOnHover)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetShowLabelOnlyOnHover_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetShowLabelOnlyOnHover_bShowLabelOnlyOnHover_Offset), 0, null, bShowLabelOnlyOnHover);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetShowLabelOnlyOnHover_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/AudioWidgets.AudioSliderBase:GetSliderValue
    static readonly IntPtr GetSliderValue_NativeFunction;
    static readonly int GetSliderValue_ParamsSize;
    static readonly int GetSliderValue_OutputValue_Offset;
    static readonly int GetSliderValue_ReturnValue_Offset;
    
    public float GetSliderValue(float outputValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSliderValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetSliderValue_OutputValue_Offset), 0, null, outputValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSliderValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetSliderValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioWidgets.AudioSliderBase:GetOutputValue
    static readonly IntPtr GetOutputValue_NativeFunction;
    static readonly int GetOutputValue_ParamsSize;
    static readonly int GetOutputValue_InSliderValue_Offset;
    static readonly int GetOutputValue_ReturnValue_Offset;
    
    public float GetOutputValue(float inSliderValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOutputValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetOutputValue_InSliderValue_Offset), 0, null, inSliderValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOutputValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetOutputValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/AudioWidgets.AudioSliderBase:GetLinValue
    static readonly IntPtr GetLinValue_NativeFunction;
    static readonly int GetLinValue_ParamsSize;
    static readonly int GetLinValue_OutputValue_Offset;
    static readonly int GetLinValue_ReturnValue_Offset;
    
    [Obsolete("5.1 - GetLinValue is deprecated, please use GetSliderValue instead.")]
    public float GetLinValue(float outputValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLinValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetLinValue_OutputValue_Offset), 0, null, outputValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLinValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetLinValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
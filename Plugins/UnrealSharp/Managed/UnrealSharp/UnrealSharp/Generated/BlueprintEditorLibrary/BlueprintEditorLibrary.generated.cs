// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.BlueprintEditorLibrary;

[UClass]
public partial class BlueprintEditorLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static BlueprintEditorLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("BlueprintEditorLibrary");
        
        
        UpgradeOperatorNodes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UpgradeOperatorNodes");
        UpgradeOperatorNodes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UpgradeOperatorNodes_NativeFunction);
        UpgradeOperatorNodes_Blueprint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpgradeOperatorNodes_NativeFunction, "Blueprint");
        SetBlueprintVariableInstanceEditable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBlueprintVariableInstanceEditable");
        SetBlueprintVariableInstanceEditable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBlueprintVariableInstanceEditable_NativeFunction);
        SetBlueprintVariableInstanceEditable_Blueprint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBlueprintVariableInstanceEditable_NativeFunction, "Blueprint");
        SetBlueprintVariableInstanceEditable_VariableName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBlueprintVariableInstanceEditable_NativeFunction, "VariableName");
        SetBlueprintVariableInstanceEditable_bInstanceEditable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBlueprintVariableInstanceEditable_NativeFunction, "bInstanceEditable");
        SetBlueprintVariableExposeToCinematics_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBlueprintVariableExposeToCinematics");
        SetBlueprintVariableExposeToCinematics_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBlueprintVariableExposeToCinematics_NativeFunction);
        SetBlueprintVariableExposeToCinematics_Blueprint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBlueprintVariableExposeToCinematics_NativeFunction, "Blueprint");
        SetBlueprintVariableExposeToCinematics_VariableName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBlueprintVariableExposeToCinematics_NativeFunction, "VariableName");
        SetBlueprintVariableExposeToCinematics_bExposeToCinematics_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBlueprintVariableExposeToCinematics_NativeFunction, "bExposeToCinematics");
        SetBlueprintVariableExposeOnSpawn_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBlueprintVariableExposeOnSpawn");
        SetBlueprintVariableExposeOnSpawn_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBlueprintVariableExposeOnSpawn_NativeFunction);
        SetBlueprintVariableExposeOnSpawn_Blueprint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBlueprintVariableExposeOnSpawn_NativeFunction, "Blueprint");
        SetBlueprintVariableExposeOnSpawn_VariableName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBlueprintVariableExposeOnSpawn_NativeFunction, "VariableName");
        SetBlueprintVariableExposeOnSpawn_bExposeOnSpawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBlueprintVariableExposeOnSpawn_NativeFunction, "bExposeOnSpawn");
        ReplaceVariableReferences_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReplaceVariableReferences");
        ReplaceVariableReferences_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReplaceVariableReferences_NativeFunction);
        ReplaceVariableReferences_Blueprint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceVariableReferences_NativeFunction, "Blueprint");
        ReplaceVariableReferences_OldVarName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceVariableReferences_NativeFunction, "OldVarName");
        ReplaceVariableReferences_NewVarName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceVariableReferences_NativeFunction, "NewVarName");
        ReparentBlueprint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReparentBlueprint");
        ReparentBlueprint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReparentBlueprint_NativeFunction);
        ReparentBlueprint_Blueprint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReparentBlueprint_NativeFunction, "Blueprint");
        ReparentBlueprint_NewParentClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReparentBlueprint_NativeFunction, "NewParentClass");
        RenameGraph_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RenameGraph");
        RenameGraph_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RenameGraph_NativeFunction);
        RenameGraph_Graph_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenameGraph_NativeFunction, "Graph");
        RenameGraph_NewNameStr_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenameGraph_NativeFunction, "NewNameStr");
        RemoveUnusedVariables_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveUnusedVariables");
        RemoveUnusedVariables_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveUnusedVariables_NativeFunction);
        RemoveUnusedVariables_Blueprint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveUnusedVariables_NativeFunction, "Blueprint");
        RemoveUnusedVariables_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveUnusedVariables_NativeFunction, "ReturnValue");
        RemoveUnusedNodes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveUnusedNodes");
        RemoveUnusedNodes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveUnusedNodes_NativeFunction);
        RemoveUnusedNodes_Blueprint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveUnusedNodes_NativeFunction, "Blueprint");
        RemoveGraph_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveGraph");
        RemoveGraph_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveGraph_NativeFunction);
        RemoveGraph_Blueprint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveGraph_NativeFunction, "Blueprint");
        RemoveGraph_Graph_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveGraph_NativeFunction, "Graph");
        RemoveFunctionGraph_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveFunctionGraph");
        RemoveFunctionGraph_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveFunctionGraph_NativeFunction);
        RemoveFunctionGraph_Blueprint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveFunctionGraph_NativeFunction, "Blueprint");
        RemoveFunctionGraph_FuncName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveFunctionGraph_NativeFunction, "FuncName");
        RefreshOpenEditorsForBlueprint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RefreshOpenEditorsForBlueprint");
        RefreshOpenEditorsForBlueprint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RefreshOpenEditorsForBlueprint_NativeFunction);
        RefreshOpenEditorsForBlueprint_BP_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RefreshOpenEditorsForBlueprint_NativeFunction, "BP");
        RefreshAllOpenBlueprintEditors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RefreshAllOpenBlueprintEditors");
        GetBlueprintAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBlueprintAsset");
        GetBlueprintAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBlueprintAsset_NativeFunction);
        GetBlueprintAsset_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBlueprintAsset_NativeFunction, "Object");
        GetBlueprintAsset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBlueprintAsset_NativeFunction, "ReturnValue");
        GeneratedClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GeneratedClass");
        GeneratedClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GeneratedClass_NativeFunction);
        GeneratedClass_BlueprintObj_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GeneratedClass_NativeFunction, "BlueprintObj");
        GeneratedClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GeneratedClass_NativeFunction, "ReturnValue");
        FindGraph_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindGraph");
        FindGraph_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindGraph_NativeFunction);
        FindGraph_Blueprint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindGraph_NativeFunction, "Blueprint");
        FindGraph_GraphName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindGraph_NativeFunction, "GraphName");
        FindGraph_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindGraph_NativeFunction, "ReturnValue");
        FindEventGraph_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindEventGraph");
        FindEventGraph_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindEventGraph_NativeFunction);
        FindEventGraph_Blueprint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindEventGraph_NativeFunction, "Blueprint");
        FindEventGraph_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindEventGraph_NativeFunction, "ReturnValue");
        CompileBlueprint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CompileBlueprint");
        CompileBlueprint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CompileBlueprint_NativeFunction);
        CompileBlueprint_Blueprint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CompileBlueprint_NativeFunction, "Blueprint");
        AddFunctionGraph_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddFunctionGraph");
        AddFunctionGraph_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddFunctionGraph_NativeFunction);
        AddFunctionGraph_Blueprint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddFunctionGraph_NativeFunction, "Blueprint");
        AddFunctionGraph_FuncName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddFunctionGraph_NativeFunction, "FuncName");
        AddFunctionGraph_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddFunctionGraph_NativeFunction, "ReturnValue");
        
        
    }
    
    protected BlueprintEditorLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/BlueprintEditorLibrary.BlueprintEditorLibrary:UpgradeOperatorNodes
    static readonly IntPtr UpgradeOperatorNodes_NativeFunction;
    static readonly int UpgradeOperatorNodes_ParamsSize;
    static readonly int UpgradeOperatorNodes_Blueprint_Offset;
    
    public static void UpgradeOperatorNodes(UnrealSharp.Engine.Blueprint blueprint)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UpgradeOperatorNodes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Blueprint>.ToNative(IntPtr.Add(ParamsBuffer, UpgradeOperatorNodes_Blueprint_Offset), 0, null, blueprint);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, UpgradeOperatorNodes_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/BlueprintEditorLibrary.BlueprintEditorLibrary:SetBlueprintVariableInstanceEditable
    static readonly IntPtr SetBlueprintVariableInstanceEditable_NativeFunction;
    static readonly int SetBlueprintVariableInstanceEditable_ParamsSize;
    static readonly int SetBlueprintVariableInstanceEditable_Blueprint_Offset;
    static readonly int SetBlueprintVariableInstanceEditable_VariableName_Offset;
    static readonly int SetBlueprintVariableInstanceEditable_bInstanceEditable_Offset;
    
    public static void SetBlueprintVariableInstanceEditable(UnrealSharp.Engine.Blueprint blueprint, Name variableName, bool bInstanceEditable)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBlueprintVariableInstanceEditable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Blueprint>.ToNative(IntPtr.Add(ParamsBuffer, SetBlueprintVariableInstanceEditable_Blueprint_Offset), 0, null, blueprint);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetBlueprintVariableInstanceEditable_VariableName_Offset), 0, null, variableName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetBlueprintVariableInstanceEditable_bInstanceEditable_Offset), 0, null, bInstanceEditable);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetBlueprintVariableInstanceEditable_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/BlueprintEditorLibrary.BlueprintEditorLibrary:SetBlueprintVariableExposeToCinematics
    static readonly IntPtr SetBlueprintVariableExposeToCinematics_NativeFunction;
    static readonly int SetBlueprintVariableExposeToCinematics_ParamsSize;
    static readonly int SetBlueprintVariableExposeToCinematics_Blueprint_Offset;
    static readonly int SetBlueprintVariableExposeToCinematics_VariableName_Offset;
    static readonly int SetBlueprintVariableExposeToCinematics_bExposeToCinematics_Offset;
    
    public static void SetBlueprintVariableExposeToCinematics(UnrealSharp.Engine.Blueprint blueprint, Name variableName, bool bExposeToCinematics)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBlueprintVariableExposeToCinematics_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Blueprint>.ToNative(IntPtr.Add(ParamsBuffer, SetBlueprintVariableExposeToCinematics_Blueprint_Offset), 0, null, blueprint);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetBlueprintVariableExposeToCinematics_VariableName_Offset), 0, null, variableName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetBlueprintVariableExposeToCinematics_bExposeToCinematics_Offset), 0, null, bExposeToCinematics);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetBlueprintVariableExposeToCinematics_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/BlueprintEditorLibrary.BlueprintEditorLibrary:SetBlueprintVariableExposeOnSpawn
    static readonly IntPtr SetBlueprintVariableExposeOnSpawn_NativeFunction;
    static readonly int SetBlueprintVariableExposeOnSpawn_ParamsSize;
    static readonly int SetBlueprintVariableExposeOnSpawn_Blueprint_Offset;
    static readonly int SetBlueprintVariableExposeOnSpawn_VariableName_Offset;
    static readonly int SetBlueprintVariableExposeOnSpawn_bExposeOnSpawn_Offset;
    
    public static void SetBlueprintVariableExposeOnSpawn(UnrealSharp.Engine.Blueprint blueprint, Name variableName, bool bExposeOnSpawn)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBlueprintVariableExposeOnSpawn_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Blueprint>.ToNative(IntPtr.Add(ParamsBuffer, SetBlueprintVariableExposeOnSpawn_Blueprint_Offset), 0, null, blueprint);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetBlueprintVariableExposeOnSpawn_VariableName_Offset), 0, null, variableName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetBlueprintVariableExposeOnSpawn_bExposeOnSpawn_Offset), 0, null, bExposeOnSpawn);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetBlueprintVariableExposeOnSpawn_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/BlueprintEditorLibrary.BlueprintEditorLibrary:ReplaceVariableReferences
    static readonly IntPtr ReplaceVariableReferences_NativeFunction;
    static readonly int ReplaceVariableReferences_ParamsSize;
    static readonly int ReplaceVariableReferences_Blueprint_Offset;
    static readonly int ReplaceVariableReferences_OldVarName_Offset;
    static readonly int ReplaceVariableReferences_NewVarName_Offset;
    
    public static void ReplaceVariableReferences(UnrealSharp.Engine.Blueprint blueprint, Name oldVarName, Name newVarName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReplaceVariableReferences_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Blueprint>.ToNative(IntPtr.Add(ParamsBuffer, ReplaceVariableReferences_Blueprint_Offset), 0, null, blueprint);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReplaceVariableReferences_OldVarName_Offset), 0, null, oldVarName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReplaceVariableReferences_NewVarName_Offset), 0, null, newVarName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ReplaceVariableReferences_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/BlueprintEditorLibrary.BlueprintEditorLibrary:ReparentBlueprint
    static readonly IntPtr ReparentBlueprint_NativeFunction;
    static readonly int ReparentBlueprint_ParamsSize;
    static readonly int ReparentBlueprint_Blueprint_Offset;
    static readonly int ReparentBlueprint_NewParentClass_Offset;
    
    public static void ReparentBlueprint(UnrealSharp.Engine.Blueprint blueprint, SubclassOf<UnrealSharp.CoreUObject.Object> newParentClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReparentBlueprint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Blueprint>.ToNative(IntPtr.Add(ParamsBuffer, ReparentBlueprint_Blueprint_Offset), 0, null, blueprint);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ReparentBlueprint_NewParentClass_Offset), 0, null, newParentClass);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ReparentBlueprint_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/BlueprintEditorLibrary.BlueprintEditorLibrary:RenameGraph
    static readonly IntPtr RenameGraph_NativeFunction;
    static readonly int RenameGraph_ParamsSize;
    static readonly int RenameGraph_Graph_Offset;
    static readonly int RenameGraph_NewNameStr_Offset;
    
    public static void RenameGraph(UnrealSharp.Engine.EdGraph graph, string newNameStr = "NewGraph")
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RenameGraph_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.EdGraph>.ToNative(IntPtr.Add(ParamsBuffer, RenameGraph_Graph_Offset), 0, null, graph);
            IntPtr NewNameStr_NativePtr = IntPtr.Add(ParamsBuffer,RenameGraph_NewNameStr_Offset);
            StringMarshaller.ToNative(NewNameStr_NativePtr,0,null,newNameStr);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RenameGraph_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(NewNameStr_NativePtr, 0);
        }
    }
    
    // Function /Script/BlueprintEditorLibrary.BlueprintEditorLibrary:RemoveUnusedVariables
    static readonly IntPtr RemoveUnusedVariables_NativeFunction;
    static readonly int RemoveUnusedVariables_ParamsSize;
    static readonly int RemoveUnusedVariables_Blueprint_Offset;
    static readonly int RemoveUnusedVariables_ReturnValue_Offset;
    
    public static int RemoveUnusedVariables(UnrealSharp.Engine.Blueprint blueprint)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveUnusedVariables_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Blueprint>.ToNative(IntPtr.Add(ParamsBuffer, RemoveUnusedVariables_Blueprint_Offset), 0, null, blueprint);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveUnusedVariables_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, RemoveUnusedVariables_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/BlueprintEditorLibrary.BlueprintEditorLibrary:RemoveUnusedNodes
    static readonly IntPtr RemoveUnusedNodes_NativeFunction;
    static readonly int RemoveUnusedNodes_ParamsSize;
    static readonly int RemoveUnusedNodes_Blueprint_Offset;
    
    public static void RemoveUnusedNodes(UnrealSharp.Engine.Blueprint blueprint)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveUnusedNodes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Blueprint>.ToNative(IntPtr.Add(ParamsBuffer, RemoveUnusedNodes_Blueprint_Offset), 0, null, blueprint);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveUnusedNodes_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/BlueprintEditorLibrary.BlueprintEditorLibrary:RemoveGraph
    static readonly IntPtr RemoveGraph_NativeFunction;
    static readonly int RemoveGraph_ParamsSize;
    static readonly int RemoveGraph_Blueprint_Offset;
    static readonly int RemoveGraph_Graph_Offset;
    
    public static void RemoveGraph(UnrealSharp.Engine.Blueprint blueprint, UnrealSharp.Engine.EdGraph graph)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveGraph_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Blueprint>.ToNative(IntPtr.Add(ParamsBuffer, RemoveGraph_Blueprint_Offset), 0, null, blueprint);
            ObjectMarshaller<UnrealSharp.Engine.EdGraph>.ToNative(IntPtr.Add(ParamsBuffer, RemoveGraph_Graph_Offset), 0, null, graph);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveGraph_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/BlueprintEditorLibrary.BlueprintEditorLibrary:RemoveFunctionGraph
    static readonly IntPtr RemoveFunctionGraph_NativeFunction;
    static readonly int RemoveFunctionGraph_ParamsSize;
    static readonly int RemoveFunctionGraph_Blueprint_Offset;
    static readonly int RemoveFunctionGraph_FuncName_Offset;
    
    public static void RemoveFunctionGraph(UnrealSharp.Engine.Blueprint blueprint, Name funcName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveFunctionGraph_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Blueprint>.ToNative(IntPtr.Add(ParamsBuffer, RemoveFunctionGraph_Blueprint_Offset), 0, null, blueprint);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RemoveFunctionGraph_FuncName_Offset), 0, null, funcName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveFunctionGraph_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/BlueprintEditorLibrary.BlueprintEditorLibrary:RefreshOpenEditorsForBlueprint
    static readonly IntPtr RefreshOpenEditorsForBlueprint_NativeFunction;
    static readonly int RefreshOpenEditorsForBlueprint_ParamsSize;
    static readonly int RefreshOpenEditorsForBlueprint_BP_Offset;
    
    public static void RefreshOpenEditorsForBlueprint(UnrealSharp.Engine.Blueprint bP)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RefreshOpenEditorsForBlueprint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Blueprint>.ToNative(IntPtr.Add(ParamsBuffer, RefreshOpenEditorsForBlueprint_BP_Offset), 0, null, bP);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RefreshOpenEditorsForBlueprint_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/BlueprintEditorLibrary.BlueprintEditorLibrary:RefreshAllOpenBlueprintEditors
    static readonly IntPtr RefreshAllOpenBlueprintEditors_NativeFunction;
    
    public static void RefreshAllOpenBlueprintEditors()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RefreshAllOpenBlueprintEditors_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/BlueprintEditorLibrary.BlueprintEditorLibrary:GetBlueprintAsset
    static readonly IntPtr GetBlueprintAsset_NativeFunction;
    static readonly int GetBlueprintAsset_ParamsSize;
    static readonly int GetBlueprintAsset_Object_Offset;
    static readonly int GetBlueprintAsset_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.Blueprint GetBlueprintAsset(UnrealSharp.CoreUObject.Object @object)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBlueprintAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetBlueprintAsset_Object_Offset), 0, null, @object);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetBlueprintAsset_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Blueprint returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Blueprint>.FromNative(IntPtr.Add(ParamsBuffer, GetBlueprintAsset_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/BlueprintEditorLibrary.BlueprintEditorLibrary:GeneratedClass
    static readonly IntPtr GeneratedClass_NativeFunction;
    static readonly int GeneratedClass_ParamsSize;
    static readonly int GeneratedClass_BlueprintObj_Offset;
    static readonly int GeneratedClass_ReturnValue_Offset;
    
    public static SubclassOf<UnrealSharp.CoreUObject.Object> GeneratedClass(UnrealSharp.Engine.Blueprint blueprintObj)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GeneratedClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Blueprint>.ToNative(IntPtr.Add(ParamsBuffer, GeneratedClass_BlueprintObj_Offset), 0, null, blueprintObj);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GeneratedClass_NativeFunction, ParamsBuffer);
            
            SubclassOf<UnrealSharp.CoreUObject.Object> returnValue;
            returnValue = SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GeneratedClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/BlueprintEditorLibrary.BlueprintEditorLibrary:FindGraph
    static readonly IntPtr FindGraph_NativeFunction;
    static readonly int FindGraph_ParamsSize;
    static readonly int FindGraph_Blueprint_Offset;
    static readonly int FindGraph_GraphName_Offset;
    static readonly int FindGraph_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.EdGraph FindGraph(UnrealSharp.Engine.Blueprint blueprint, Name graphName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindGraph_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Blueprint>.ToNative(IntPtr.Add(ParamsBuffer, FindGraph_Blueprint_Offset), 0, null, blueprint);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, FindGraph_GraphName_Offset), 0, null, graphName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindGraph_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.EdGraph returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.EdGraph>.FromNative(IntPtr.Add(ParamsBuffer, FindGraph_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/BlueprintEditorLibrary.BlueprintEditorLibrary:FindEventGraph
    static readonly IntPtr FindEventGraph_NativeFunction;
    static readonly int FindEventGraph_ParamsSize;
    static readonly int FindEventGraph_Blueprint_Offset;
    static readonly int FindEventGraph_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.EdGraph FindEventGraph(UnrealSharp.Engine.Blueprint blueprint)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindEventGraph_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Blueprint>.ToNative(IntPtr.Add(ParamsBuffer, FindEventGraph_Blueprint_Offset), 0, null, blueprint);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindEventGraph_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.EdGraph returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.EdGraph>.FromNative(IntPtr.Add(ParamsBuffer, FindEventGraph_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/BlueprintEditorLibrary.BlueprintEditorLibrary:CompileBlueprint
    static readonly IntPtr CompileBlueprint_NativeFunction;
    static readonly int CompileBlueprint_ParamsSize;
    static readonly int CompileBlueprint_Blueprint_Offset;
    
    public static void CompileBlueprint(UnrealSharp.Engine.Blueprint blueprint)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CompileBlueprint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Blueprint>.ToNative(IntPtr.Add(ParamsBuffer, CompileBlueprint_Blueprint_Offset), 0, null, blueprint);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CompileBlueprint_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/BlueprintEditorLibrary.BlueprintEditorLibrary:AddFunctionGraph
    static readonly IntPtr AddFunctionGraph_NativeFunction;
    static readonly int AddFunctionGraph_ParamsSize;
    static readonly int AddFunctionGraph_Blueprint_Offset;
    static readonly int AddFunctionGraph_FuncName_Offset;
    static readonly int AddFunctionGraph_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.EdGraph AddFunctionGraph(UnrealSharp.Engine.Blueprint blueprint, string funcName = "NewFunction")
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddFunctionGraph_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Blueprint>.ToNative(IntPtr.Add(ParamsBuffer, AddFunctionGraph_Blueprint_Offset), 0, null, blueprint);
            IntPtr FuncName_NativePtr = IntPtr.Add(ParamsBuffer,AddFunctionGraph_FuncName_Offset);
            StringMarshaller.ToNative(FuncName_NativePtr,0,null,funcName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddFunctionGraph_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.EdGraph returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.EdGraph>.FromNative(IntPtr.Add(ParamsBuffer, AddFunctionGraph_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(FuncName_NativePtr, 0);
            return returnValue;
        }
    }
    
    
}
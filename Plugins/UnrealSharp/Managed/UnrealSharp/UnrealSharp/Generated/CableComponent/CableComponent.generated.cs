// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.CableComponent;

[UClass]
public partial class CableComponent : UnrealSharp.Engine.MeshComponent
{
    
    static CableComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("CableComponent");
        
        bAttachStart_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAttachStart");
        bAttachEnd_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAttachEnd");
        EndLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "EndLocation");
        CableLength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CableLength");
        NumSegments_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NumSegments");
        SubstepTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SubstepTime");
        SolverIterations_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SolverIterations");
        bEnableStiffness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableStiffness");
        bUseSubstepping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseSubstepping");
        bSkipCableUpdateWhenNotVisible_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSkipCableUpdateWhenNotVisible");
        bSkipCableUpdateWhenNotOwnerRecentlyRendered_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSkipCableUpdateWhenNotOwnerRecentlyRendered");
        bEnableCollision_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableCollision");
        CollisionFriction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CollisionFriction");
        CableForce_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CableForce");
        CableGravityScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CableGravityScale");
        CableWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CableWidth");
        NumSides_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NumSides");
        TileMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TileMaterial");
        
        SetAttachEndToComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAttachEndToComponent");
        SetAttachEndToComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAttachEndToComponent_NativeFunction);
        SetAttachEndToComponent_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAttachEndToComponent_NativeFunction, "Component");
        SetAttachEndToComponent_SocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAttachEndToComponent_NativeFunction, "SocketName");
        SetAttachEndTo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAttachEndTo");
        SetAttachEndTo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAttachEndTo_NativeFunction);
        SetAttachEndTo_Actor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAttachEndTo_NativeFunction, "Actor");
        SetAttachEndTo_ComponentProperty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAttachEndTo_NativeFunction, "ComponentProperty");
        SetAttachEndTo_SocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAttachEndTo_NativeFunction, "SocketName");
        GetCableParticleLocations_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCableParticleLocations");
        GetCableParticleLocations_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCableParticleLocations_NativeFunction);
        GetCableParticleLocations_Locations_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCableParticleLocations_NativeFunction, "Locations");
        GetCableParticleLocations_Locations_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetCableParticleLocations_NativeFunction, "Locations");
        GetAttachedComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAttachedComponent");
        GetAttachedComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAttachedComponent_NativeFunction);
        GetAttachedComponent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAttachedComponent_NativeFunction, "ReturnValue");
        GetAttachedActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAttachedActor");
        GetAttachedActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAttachedActor_NativeFunction);
        GetAttachedActor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAttachedActor_NativeFunction, "ReturnValue");
        
        
    }
    
    protected CableComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/CableComponent.CableComponent:bAttachStart
    static readonly int bAttachStart_Offset;
    
    public bool bAttachStart
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAttachStart_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAttachStart_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/CableComponent.CableComponent:bAttachEnd
    static readonly int bAttachEnd_Offset;
    
    public bool bAttachEnd
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAttachEnd_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAttachEnd_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/CableComponent.CableComponent:EndLocation
    static readonly int EndLocation_Offset;
    
    public System.DoubleNumerics.Vector3 EndLocation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, EndLocation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, EndLocation_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/CableComponent.CableComponent:CableLength
    static readonly int CableLength_Offset;
    
    public float CableLength
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CableLength_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, CableLength_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/CableComponent.CableComponent:NumSegments
    static readonly int NumSegments_Offset;
    
    public int NumSegments
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, NumSegments_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/CableComponent.CableComponent:SubstepTime
    static readonly int SubstepTime_Offset;
    
    public float SubstepTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SubstepTime_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/CableComponent.CableComponent:SolverIterations
    static readonly int SolverIterations_Offset;
    
    public int SolverIterations
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, SolverIterations_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, SolverIterations_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/CableComponent.CableComponent:bEnableStiffness
    static readonly int bEnableStiffness_Offset;
    
    public bool bEnableStiffness
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bEnableStiffness_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bEnableStiffness_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/CableComponent.CableComponent:bUseSubstepping
    static readonly int bUseSubstepping_Offset;
    
    public bool bUseSubstepping
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseSubstepping_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bUseSubstepping_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/CableComponent.CableComponent:bSkipCableUpdateWhenNotVisible
    static readonly int bSkipCableUpdateWhenNotVisible_Offset;
    
    public bool bSkipCableUpdateWhenNotVisible
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bSkipCableUpdateWhenNotVisible_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bSkipCableUpdateWhenNotVisible_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/CableComponent.CableComponent:bSkipCableUpdateWhenNotOwnerRecentlyRendered
    static readonly int bSkipCableUpdateWhenNotOwnerRecentlyRendered_Offset;
    
    public bool bSkipCableUpdateWhenNotOwnerRecentlyRendered
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bSkipCableUpdateWhenNotOwnerRecentlyRendered_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bSkipCableUpdateWhenNotOwnerRecentlyRendered_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/CableComponent.CableComponent:bEnableCollision
    static readonly int bEnableCollision_Offset;
    
    public bool bEnableCollision
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bEnableCollision_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bEnableCollision_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/CableComponent.CableComponent:CollisionFriction
    static readonly int CollisionFriction_Offset;
    
    public float CollisionFriction
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CollisionFriction_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, CollisionFriction_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/CableComponent.CableComponent:CableForce
    static readonly int CableForce_Offset;
    
    public System.DoubleNumerics.Vector3 CableForce
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, CableForce_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, CableForce_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/CableComponent.CableComponent:CableGravityScale
    static readonly int CableGravityScale_Offset;
    
    public float CableGravityScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CableGravityScale_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, CableGravityScale_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/CableComponent.CableComponent:CableWidth
    static readonly int CableWidth_Offset;
    
    public float CableWidth
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CableWidth_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, CableWidth_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/CableComponent.CableComponent:NumSides
    static readonly int NumSides_Offset;
    
    public int NumSides
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, NumSides_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/CableComponent.CableComponent:TileMaterial
    static readonly int TileMaterial_Offset;
    
    public float TileMaterial
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, TileMaterial_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, TileMaterial_Offset), 0, this, value);
        }
    }
    
    // Function /Script/CableComponent.CableComponent:SetAttachEndToComponent
    static readonly IntPtr SetAttachEndToComponent_NativeFunction;
    static readonly int SetAttachEndToComponent_ParamsSize;
    static readonly int SetAttachEndToComponent_Component_Offset;
    static readonly int SetAttachEndToComponent_SocketName_Offset;
    
    public void SetAttachEndToComponent(UnrealSharp.Engine.SceneComponent component, Name socketName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAttachEndToComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.ToNative(IntPtr.Add(ParamsBuffer, SetAttachEndToComponent_Component_Offset), 0, null, component);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetAttachEndToComponent_SocketName_Offset), 0, null, socketName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAttachEndToComponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/CableComponent.CableComponent:SetAttachEndTo
    static readonly IntPtr SetAttachEndTo_NativeFunction;
    static readonly int SetAttachEndTo_ParamsSize;
    static readonly int SetAttachEndTo_Actor_Offset;
    static readonly int SetAttachEndTo_ComponentProperty_Offset;
    static readonly int SetAttachEndTo_SocketName_Offset;
    
    public void SetAttachEndTo(UnrealSharp.Engine.Actor actor, Name componentProperty, Name socketName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAttachEndTo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, SetAttachEndTo_Actor_Offset), 0, null, actor);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetAttachEndTo_ComponentProperty_Offset), 0, null, componentProperty);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetAttachEndTo_SocketName_Offset), 0, null, socketName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAttachEndTo_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/CableComponent.CableComponent:GetCableParticleLocations
    static readonly IntPtr GetCableParticleLocations_NativeFunction;
    static readonly int GetCableParticleLocations_ParamsSize;
    static readonly int GetCableParticleLocations_Locations_Offset;
    static readonly int GetCableParticleLocations_Locations_ElementSize;
    
    public void GetCableParticleLocations(out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> locations)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCableParticleLocations_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCableParticleLocations_NativeFunction, ParamsBuffer);
            
            IntPtr Locations_NativeBuffer = IntPtr.Add(ParamsBuffer, GetCableParticleLocations_Locations_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Locations_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GetCableParticleLocations_Locations_ElementSize);
            locations = Locations_Marshaler.FromNative(Locations_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(Locations_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/CableComponent.CableComponent:GetAttachedComponent
    static readonly IntPtr GetAttachedComponent_NativeFunction;
    static readonly int GetAttachedComponent_ParamsSize;
    static readonly int GetAttachedComponent_ReturnValue_Offset;
    
    public UnrealSharp.Engine.SceneComponent GetAttachedComponent()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAttachedComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAttachedComponent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.SceneComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.FromNative(IntPtr.Add(ParamsBuffer, GetAttachedComponent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/CableComponent.CableComponent:GetAttachedActor
    static readonly IntPtr GetAttachedActor_NativeFunction;
    static readonly int GetAttachedActor_ParamsSize;
    static readonly int GetAttachedActor_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Actor GetAttachedActor()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAttachedActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAttachedActor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Actor returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(ParamsBuffer, GetAttachedActor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
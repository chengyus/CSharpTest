// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.ChaosCaching;

[UClass]
public partial class ChaosCacheManager : UnrealSharp.Engine.Actor
{
    
    static ChaosCacheManager()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ChaosCacheManager");
        
        StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StartTime");
        
        TriggerComponentByCache_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TriggerComponentByCache");
        TriggerComponentByCache_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TriggerComponentByCache_NativeFunction);
        TriggerComponentByCache_InCacheName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TriggerComponentByCache_NativeFunction, "InCacheName");
        TriggerComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TriggerComponent");
        TriggerComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TriggerComponent_NativeFunction);
        TriggerComponent_InComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TriggerComponent_NativeFunction, "InComponent");
        TriggerAll_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TriggerAll");
        SetCacheCollection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCacheCollection");
        SetCacheCollection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCacheCollection_NativeFunction);
        SetCacheCollection_InCacheCollection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCacheCollection_NativeFunction, "InCacheCollection");
        ResetSingleTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetSingleTransform");
        ResetSingleTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ResetSingleTransform_NativeFunction);
        ResetSingleTransform_InIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResetSingleTransform_NativeFunction, "InIndex");
        ResetAllComponentTransforms_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetAllComponentTransforms");
        EnablePlaybackByCache_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EnablePlaybackByCache");
        EnablePlaybackByCache_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EnablePlaybackByCache_NativeFunction);
        EnablePlaybackByCache_InCacheName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EnablePlaybackByCache_NativeFunction, "InCacheName");
        EnablePlaybackByCache_bEnable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EnablePlaybackByCache_NativeFunction, "bEnable");
        EnablePlayback_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EnablePlayback");
        EnablePlayback_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EnablePlayback_NativeFunction);
        EnablePlayback_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EnablePlayback_NativeFunction, "Index");
        EnablePlayback_bEnable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EnablePlayback_NativeFunction, "bEnable");
        
        
    }
    
    protected ChaosCacheManager(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/ChaosCaching.ChaosCacheManager:StartTime
    static readonly int StartTime_Offset;
    
    public float StartTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, StartTime_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, StartTime_Offset), 0, this, value);
        }
    }
    
    // Function /Script/ChaosCaching.ChaosCacheManager:TriggerComponentByCache
    static readonly IntPtr TriggerComponentByCache_NativeFunction;
    static readonly int TriggerComponentByCache_ParamsSize;
    static readonly int TriggerComponentByCache_InCacheName_Offset;
    
    protected void TriggerComponentByCache(Name inCacheName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TriggerComponentByCache_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, TriggerComponentByCache_InCacheName_Offset), 0, null, inCacheName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, TriggerComponentByCache_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ChaosCaching.ChaosCacheManager:TriggerComponent
    static readonly IntPtr TriggerComponent_NativeFunction;
    static readonly int TriggerComponent_ParamsSize;
    static readonly int TriggerComponent_InComponent_Offset;
    
    protected void TriggerComponent(UnrealSharp.Engine.PrimitiveComponent inComponent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TriggerComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative(IntPtr.Add(ParamsBuffer, TriggerComponent_InComponent_Offset), 0, null, inComponent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, TriggerComponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ChaosCaching.ChaosCacheManager:TriggerAll
    static readonly IntPtr TriggerAll_NativeFunction;
    
    protected void TriggerAll()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, TriggerAll_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/ChaosCaching.ChaosCacheManager:SetCacheCollection
    static readonly IntPtr SetCacheCollection_NativeFunction;
    static readonly int SetCacheCollection_ParamsSize;
    static readonly int SetCacheCollection_InCacheCollection_Offset;
    
    protected void SetCacheCollection(UnrealSharp.ChaosCaching.ChaosCacheCollection inCacheCollection)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCacheCollection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ChaosCaching.ChaosCacheCollection>.ToNative(IntPtr.Add(ParamsBuffer, SetCacheCollection_InCacheCollection_Offset), 0, null, inCacheCollection);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCacheCollection_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ChaosCaching.ChaosCacheManager:ResetSingleTransform
    static readonly IntPtr ResetSingleTransform_NativeFunction;
    static readonly int ResetSingleTransform_ParamsSize;
    static readonly int ResetSingleTransform_InIndex_Offset;
    
    public void ResetSingleTransform(int inIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ResetSingleTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ResetSingleTransform_InIndex_Offset), 0, null, inIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetSingleTransform_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ChaosCaching.ChaosCacheManager:ResetAllComponentTransforms
    static readonly IntPtr ResetAllComponentTransforms_NativeFunction;
    
    public void ResetAllComponentTransforms()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetAllComponentTransforms_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/ChaosCaching.ChaosCacheManager:EnablePlaybackByCache
    static readonly IntPtr EnablePlaybackByCache_NativeFunction;
    static readonly int EnablePlaybackByCache_ParamsSize;
    static readonly int EnablePlaybackByCache_InCacheName_Offset;
    static readonly int EnablePlaybackByCache_bEnable_Offset;
    
    protected void EnablePlaybackByCache(Name inCacheName, bool bEnable)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EnablePlaybackByCache_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, EnablePlaybackByCache_InCacheName_Offset), 0, null, inCacheName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, EnablePlaybackByCache_bEnable_Offset), 0, null, bEnable);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, EnablePlaybackByCache_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ChaosCaching.ChaosCacheManager:EnablePlayback
    static readonly IntPtr EnablePlayback_NativeFunction;
    static readonly int EnablePlayback_ParamsSize;
    static readonly int EnablePlayback_Index_Offset;
    static readonly int EnablePlayback_bEnable_Offset;
    
    protected void EnablePlayback(int index, bool bEnable)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EnablePlayback_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, EnablePlayback_Index_Offset), 0, null, index);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, EnablePlayback_bEnable_Offset), 0, null, bEnable);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, EnablePlayback_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
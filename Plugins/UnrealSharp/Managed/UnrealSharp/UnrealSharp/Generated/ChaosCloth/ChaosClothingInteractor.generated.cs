// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.ChaosCloth;

[UClass]
public partial class ChaosClothingInteractor : UnrealSharp.ClothingSystemRuntimeInterface.ClothingInteractor
{
    
    static ChaosClothingInteractor()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ChaosClothingInteractor");
        
        
        SetWind_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWind");
        SetWind_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWind_NativeFunction);
        SetWind_Drag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWind_NativeFunction, "Drag");
        SetWind_Lift_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWind_NativeFunction, "Lift");
        SetWind_AirDensity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWind_NativeFunction, "AirDensity");
        SetWind_WindVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWind_NativeFunction, "WindVelocity");
        SetVelocityScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVelocityScale");
        SetVelocityScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVelocityScale_NativeFunction);
        SetVelocityScale_LinearVelocityScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVelocityScale_NativeFunction, "LinearVelocityScale");
        SetVelocityScale_AngularVelocityScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVelocityScale_NativeFunction, "AngularVelocityScale");
        SetVelocityScale_FictitiousAngularScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVelocityScale_NativeFunction, "FictitiousAngularScale");
        SetPressure_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPressure");
        SetPressure_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPressure_NativeFunction);
        SetPressure_Pressure_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPressure_NativeFunction, "Pressure");
        SetMaterialLinear_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMaterialLinear");
        SetMaterialLinear_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMaterialLinear_NativeFunction);
        SetMaterialLinear_EdgeStiffness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialLinear_NativeFunction, "EdgeStiffness");
        SetMaterialLinear_BendingStiffness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialLinear_NativeFunction, "BendingStiffness");
        SetMaterialLinear_AreaStiffness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialLinear_NativeFunction, "AreaStiffness");
        SetMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMaterial");
        SetMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMaterial_NativeFunction);
        SetMaterial_EdgeStiffness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterial_NativeFunction, "EdgeStiffness");
        SetMaterial_BendingStiffness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterial_NativeFunction, "BendingStiffness");
        SetMaterial_AreaStiffness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterial_NativeFunction, "AreaStiffness");
        SetLongRangeAttachmentLinear_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLongRangeAttachmentLinear");
        SetLongRangeAttachmentLinear_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLongRangeAttachmentLinear_NativeFunction);
        SetLongRangeAttachmentLinear_TetherStiffness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLongRangeAttachmentLinear_NativeFunction, "TetherStiffness");
        SetLongRangeAttachmentLinear_TetherScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLongRangeAttachmentLinear_NativeFunction, "TetherScale");
        SetLongRangeAttachment_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLongRangeAttachment");
        SetLongRangeAttachment_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLongRangeAttachment_NativeFunction);
        SetLongRangeAttachment_TetherStiffness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLongRangeAttachment_NativeFunction, "TetherStiffness");
        SetLongRangeAttachment_TetherScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLongRangeAttachment_NativeFunction, "TetherScale");
        SetGravity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGravity");
        SetGravity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGravity_NativeFunction);
        SetGravity_GravityScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGravity_NativeFunction, "GravityScale");
        SetGravity_bIsGravityOverridden_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGravity_NativeFunction, "bIsGravityOverridden");
        SetGravity_GravityOverride_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGravity_NativeFunction, "GravityOverride");
        SetDamping_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDamping");
        SetDamping_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDamping_NativeFunction);
        SetDamping_DampingCoefficient_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDamping_NativeFunction, "DampingCoefficient");
        SetDamping_LocalDampingCoefficient_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDamping_NativeFunction, "LocalDampingCoefficient");
        SetCollision_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCollision");
        SetCollision_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCollision_NativeFunction);
        SetCollision_CollisionThickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCollision_NativeFunction, "CollisionThickness");
        SetCollision_FrictionCoefficient_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCollision_NativeFunction, "FrictionCoefficient");
        SetCollision_bUseCCD_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCollision_NativeFunction, "bUseCCD");
        SetCollision_SelfCollisionThickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCollision_NativeFunction, "SelfCollisionThickness");
        SetBackstop_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBackstop");
        SetBackstop_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBackstop_NativeFunction);
        SetBackstop_bEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBackstop_NativeFunction, "bEnabled");
        SetAnimDriveLinear_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAnimDriveLinear");
        SetAnimDriveLinear_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAnimDriveLinear_NativeFunction);
        SetAnimDriveLinear_AnimDriveStiffness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnimDriveLinear_NativeFunction, "AnimDriveStiffness");
        SetAnimDrive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAnimDrive");
        SetAnimDrive_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAnimDrive_NativeFunction);
        SetAnimDrive_AnimDriveStiffness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnimDrive_NativeFunction, "AnimDriveStiffness");
        SetAnimDrive_AnimDriveDamping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnimDrive_NativeFunction, "AnimDriveDamping");
        SetAerodynamics_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAerodynamics");
        SetAerodynamics_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAerodynamics_NativeFunction);
        SetAerodynamics_DragCoefficient_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAerodynamics_NativeFunction, "DragCoefficient");
        SetAerodynamics_LiftCoefficient_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAerodynamics_NativeFunction, "LiftCoefficient");
        SetAerodynamics_WindVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAerodynamics_NativeFunction, "WindVelocity");
        ResetAndTeleport_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetAndTeleport");
        ResetAndTeleport_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ResetAndTeleport_NativeFunction);
        ResetAndTeleport_bReset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResetAndTeleport_NativeFunction, "bReset");
        ResetAndTeleport_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResetAndTeleport_NativeFunction, "bTeleport");
        
        
    }
    
    protected ChaosClothingInteractor(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/ChaosCloth.ChaosClothingInteractor:SetWind
    static readonly IntPtr SetWind_NativeFunction;
    static readonly int SetWind_ParamsSize;
    static readonly int SetWind_Drag_Offset;
    static readonly int SetWind_Lift_Offset;
    static readonly int SetWind_AirDensity_Offset;
    static readonly int SetWind_WindVelocity_Offset;
    
    public void SetWind()
    {
        System.DoubleNumerics.Vector2 drag = new System.DoubleNumerics.Vector2
        {
            X=0.070f,
            Y=0.500f,
        };
        SetWind(drag);
    }
    
    public void SetWind(System.DoubleNumerics.Vector2 drag)
    {
        System.DoubleNumerics.Vector2 lift = new System.DoubleNumerics.Vector2
        {
            X=0.070f,
            Y=0.500f,
        };
        SetWind(drag, lift);
    }
    
    public void SetWind(System.DoubleNumerics.Vector2 drag, System.DoubleNumerics.Vector2 lift, float airDensity = 0.000001f)
    {
        System.DoubleNumerics.Vector3 windVelocity = new System.DoubleNumerics.Vector3
        {
            X=0.000000f,
            Y=0.000000f,
            Z=0.000000f,
        };
        SetWind(drag, lift, airDensity, windVelocity);
    }
    
    public void SetWind(System.DoubleNumerics.Vector2 drag, System.DoubleNumerics.Vector2 lift, float airDensity, System.DoubleNumerics.Vector3 windVelocity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWind_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetWind_Drag_Offset), 0, null, drag);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetWind_Lift_Offset), 0, null, lift);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetWind_AirDensity_Offset), 0, null, airDensity);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetWind_WindVelocity_Offset), 0, null, windVelocity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetWind_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ChaosCloth.ChaosClothingInteractor:SetVelocityScale
    static readonly IntPtr SetVelocityScale_NativeFunction;
    static readonly int SetVelocityScale_ParamsSize;
    static readonly int SetVelocityScale_LinearVelocityScale_Offset;
    static readonly int SetVelocityScale_AngularVelocityScale_Offset;
    static readonly int SetVelocityScale_FictitiousAngularScale_Offset;
    
    public void SetVelocityScale()
    {
        System.DoubleNumerics.Vector3 linearVelocityScale = new System.DoubleNumerics.Vector3
        {
            X=0.750000f,
            Y=0.750000f,
            Z=0.750000f,
        };
        SetVelocityScale(linearVelocityScale);
    }
    
    public void SetVelocityScale(System.DoubleNumerics.Vector3 linearVelocityScale, float angularVelocityScale = 0.750000f, float fictitiousAngularScale = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVelocityScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetVelocityScale_LinearVelocityScale_Offset), 0, null, linearVelocityScale);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetVelocityScale_AngularVelocityScale_Offset), 0, null, angularVelocityScale);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetVelocityScale_FictitiousAngularScale_Offset), 0, null, fictitiousAngularScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVelocityScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ChaosCloth.ChaosClothingInteractor:SetPressure
    static readonly IntPtr SetPressure_NativeFunction;
    static readonly int SetPressure_ParamsSize;
    static readonly int SetPressure_Pressure_Offset;
    
    public void SetPressure()
    {
        System.DoubleNumerics.Vector2 pressure = new System.DoubleNumerics.Vector2
        {
            X=0.000f,
            Y=1.000f,
        };
        SetPressure(pressure);
    }
    
    public void SetPressure(System.DoubleNumerics.Vector2 pressure)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPressure_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetPressure_Pressure_Offset), 0, null, pressure);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPressure_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ChaosCloth.ChaosClothingInteractor:SetMaterialLinear
    static readonly IntPtr SetMaterialLinear_NativeFunction;
    static readonly int SetMaterialLinear_ParamsSize;
    static readonly int SetMaterialLinear_EdgeStiffness_Offset;
    static readonly int SetMaterialLinear_BendingStiffness_Offset;
    static readonly int SetMaterialLinear_AreaStiffness_Offset;
    
    public void SetMaterialLinear(float edgeStiffness = 1.000000f, float bendingStiffness = 1.000000f, float areaStiffness = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMaterialLinear_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialLinear_EdgeStiffness_Offset), 0, null, edgeStiffness);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialLinear_BendingStiffness_Offset), 0, null, bendingStiffness);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialLinear_AreaStiffness_Offset), 0, null, areaStiffness);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMaterialLinear_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ChaosCloth.ChaosClothingInteractor:SetMaterial
    static readonly IntPtr SetMaterial_NativeFunction;
    static readonly int SetMaterial_ParamsSize;
    static readonly int SetMaterial_EdgeStiffness_Offset;
    static readonly int SetMaterial_BendingStiffness_Offset;
    static readonly int SetMaterial_AreaStiffness_Offset;
    
    public void SetMaterial()
    {
        System.DoubleNumerics.Vector2 edgeStiffness = new System.DoubleNumerics.Vector2
        {
            X=1.000f,
            Y=1.000f,
        };
        SetMaterial(edgeStiffness);
    }
    
    public void SetMaterial(System.DoubleNumerics.Vector2 edgeStiffness)
    {
        System.DoubleNumerics.Vector2 bendingStiffness = new System.DoubleNumerics.Vector2
        {
            X=1.000f,
            Y=1.000f,
        };
        SetMaterial(edgeStiffness, bendingStiffness);
    }
    
    public void SetMaterial(System.DoubleNumerics.Vector2 edgeStiffness, System.DoubleNumerics.Vector2 bendingStiffness)
    {
        System.DoubleNumerics.Vector2 areaStiffness = new System.DoubleNumerics.Vector2
        {
            X=1.000f,
            Y=1.000f,
        };
        SetMaterial(edgeStiffness, bendingStiffness, areaStiffness);
    }
    
    public void SetMaterial(System.DoubleNumerics.Vector2 edgeStiffness, System.DoubleNumerics.Vector2 bendingStiffness, System.DoubleNumerics.Vector2 areaStiffness)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterial_EdgeStiffness_Offset), 0, null, edgeStiffness);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterial_BendingStiffness_Offset), 0, null, bendingStiffness);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterial_AreaStiffness_Offset), 0, null, areaStiffness);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMaterial_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ChaosCloth.ChaosClothingInteractor:SetLongRangeAttachmentLinear
    static readonly IntPtr SetLongRangeAttachmentLinear_NativeFunction;
    static readonly int SetLongRangeAttachmentLinear_ParamsSize;
    static readonly int SetLongRangeAttachmentLinear_TetherStiffness_Offset;
    static readonly int SetLongRangeAttachmentLinear_TetherScale_Offset;
    
    public void SetLongRangeAttachmentLinear(float tetherStiffness = 1.000000f, float tetherScale = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLongRangeAttachmentLinear_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLongRangeAttachmentLinear_TetherStiffness_Offset), 0, null, tetherStiffness);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLongRangeAttachmentLinear_TetherScale_Offset), 0, null, tetherScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLongRangeAttachmentLinear_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ChaosCloth.ChaosClothingInteractor:SetLongRangeAttachment
    static readonly IntPtr SetLongRangeAttachment_NativeFunction;
    static readonly int SetLongRangeAttachment_ParamsSize;
    static readonly int SetLongRangeAttachment_TetherStiffness_Offset;
    static readonly int SetLongRangeAttachment_TetherScale_Offset;
    
    public void SetLongRangeAttachment()
    {
        System.DoubleNumerics.Vector2 tetherStiffness = new System.DoubleNumerics.Vector2
        {
            X=1.000f,
            Y=1.000f,
        };
        SetLongRangeAttachment(tetherStiffness);
    }
    
    public void SetLongRangeAttachment(System.DoubleNumerics.Vector2 tetherStiffness)
    {
        System.DoubleNumerics.Vector2 tetherScale = new System.DoubleNumerics.Vector2
        {
            X=1.000f,
            Y=1.000f,
        };
        SetLongRangeAttachment(tetherStiffness, tetherScale);
    }
    
    public void SetLongRangeAttachment(System.DoubleNumerics.Vector2 tetherStiffness, System.DoubleNumerics.Vector2 tetherScale)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLongRangeAttachment_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetLongRangeAttachment_TetherStiffness_Offset), 0, null, tetherStiffness);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetLongRangeAttachment_TetherScale_Offset), 0, null, tetherScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLongRangeAttachment_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ChaosCloth.ChaosClothingInteractor:SetGravity
    static readonly IntPtr SetGravity_NativeFunction;
    static readonly int SetGravity_ParamsSize;
    static readonly int SetGravity_GravityScale_Offset;
    static readonly int SetGravity_bIsGravityOverridden_Offset;
    static readonly int SetGravity_GravityOverride_Offset;
    
    public void SetGravity(float gravityScale = 1.000000f, bool bIsGravityOverridden = false)
    {
        System.DoubleNumerics.Vector3 gravityOverride = new System.DoubleNumerics.Vector3
        {
            X=0.000000f,
            Y=0.000000f,
            Z=-981.000000f,
        };
        SetGravity(gravityScale, bIsGravityOverridden, gravityOverride);
    }
    
    public void SetGravity(float gravityScale, bool bIsGravityOverridden, System.DoubleNumerics.Vector3 gravityOverride)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGravity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetGravity_GravityScale_Offset), 0, null, gravityScale);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetGravity_bIsGravityOverridden_Offset), 0, null, bIsGravityOverridden);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetGravity_GravityOverride_Offset), 0, null, gravityOverride);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetGravity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ChaosCloth.ChaosClothingInteractor:SetDamping
    static readonly IntPtr SetDamping_NativeFunction;
    static readonly int SetDamping_ParamsSize;
    static readonly int SetDamping_DampingCoefficient_Offset;
    static readonly int SetDamping_LocalDampingCoefficient_Offset;
    
    public void SetDamping(float dampingCoefficient = 0.010000f, float localDampingCoefficient = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDamping_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetDamping_DampingCoefficient_Offset), 0, null, dampingCoefficient);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetDamping_LocalDampingCoefficient_Offset), 0, null, localDampingCoefficient);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDamping_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ChaosCloth.ChaosClothingInteractor:SetCollision
    static readonly IntPtr SetCollision_NativeFunction;
    static readonly int SetCollision_ParamsSize;
    static readonly int SetCollision_CollisionThickness_Offset;
    static readonly int SetCollision_FrictionCoefficient_Offset;
    static readonly int SetCollision_bUseCCD_Offset;
    static readonly int SetCollision_SelfCollisionThickness_Offset;
    
    public void SetCollision(float collisionThickness = 1.000000f, float frictionCoefficient = 0.800000f, bool bUseCCD = false, float selfCollisionThickness = 2.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCollision_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCollision_CollisionThickness_Offset), 0, null, collisionThickness);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCollision_FrictionCoefficient_Offset), 0, null, frictionCoefficient);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCollision_bUseCCD_Offset), 0, null, bUseCCD);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCollision_SelfCollisionThickness_Offset), 0, null, selfCollisionThickness);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCollision_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ChaosCloth.ChaosClothingInteractor:SetBackstop
    static readonly IntPtr SetBackstop_NativeFunction;
    static readonly int SetBackstop_ParamsSize;
    static readonly int SetBackstop_bEnabled_Offset;
    
    public void SetBackstop(bool bEnabled = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBackstop_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetBackstop_bEnabled_Offset), 0, null, bEnabled);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBackstop_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ChaosCloth.ChaosClothingInteractor:SetAnimDriveLinear
    static readonly IntPtr SetAnimDriveLinear_NativeFunction;
    static readonly int SetAnimDriveLinear_ParamsSize;
    static readonly int SetAnimDriveLinear_AnimDriveStiffness_Offset;
    
    public void SetAnimDriveLinear(float animDriveStiffness = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAnimDriveLinear_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAnimDriveLinear_AnimDriveStiffness_Offset), 0, null, animDriveStiffness);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAnimDriveLinear_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ChaosCloth.ChaosClothingInteractor:SetAnimDrive
    static readonly IntPtr SetAnimDrive_NativeFunction;
    static readonly int SetAnimDrive_ParamsSize;
    static readonly int SetAnimDrive_AnimDriveStiffness_Offset;
    static readonly int SetAnimDrive_AnimDriveDamping_Offset;
    
    public void SetAnimDrive()
    {
        System.DoubleNumerics.Vector2 animDriveStiffness = new System.DoubleNumerics.Vector2
        {
            X=0.000f,
            Y=1.000f,
        };
        SetAnimDrive(animDriveStiffness);
    }
    
    public void SetAnimDrive(System.DoubleNumerics.Vector2 animDriveStiffness)
    {
        System.DoubleNumerics.Vector2 animDriveDamping = new System.DoubleNumerics.Vector2
        {
            X=0.000f,
            Y=1.000f,
        };
        SetAnimDrive(animDriveStiffness, animDriveDamping);
    }
    
    public void SetAnimDrive(System.DoubleNumerics.Vector2 animDriveStiffness, System.DoubleNumerics.Vector2 animDriveDamping)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAnimDrive_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetAnimDrive_AnimDriveStiffness_Offset), 0, null, animDriveStiffness);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetAnimDrive_AnimDriveDamping_Offset), 0, null, animDriveDamping);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAnimDrive_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ChaosCloth.ChaosClothingInteractor:SetAerodynamics
    static readonly IntPtr SetAerodynamics_NativeFunction;
    static readonly int SetAerodynamics_ParamsSize;
    static readonly int SetAerodynamics_DragCoefficient_Offset;
    static readonly int SetAerodynamics_LiftCoefficient_Offset;
    static readonly int SetAerodynamics_WindVelocity_Offset;
    
    public void SetAerodynamics(float dragCoefficient = 0.070000f, float liftCoefficient = 0.035000f)
    {
        System.DoubleNumerics.Vector3 windVelocity = new System.DoubleNumerics.Vector3
        {
            X=0.000000f,
            Y=0.000000f,
            Z=0.000000f,
        };
        SetAerodynamics(dragCoefficient, liftCoefficient, windVelocity);
    }
    
    public void SetAerodynamics(float dragCoefficient, float liftCoefficient, System.DoubleNumerics.Vector3 windVelocity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAerodynamics_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAerodynamics_DragCoefficient_Offset), 0, null, dragCoefficient);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAerodynamics_LiftCoefficient_Offset), 0, null, liftCoefficient);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetAerodynamics_WindVelocity_Offset), 0, null, windVelocity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAerodynamics_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ChaosCloth.ChaosClothingInteractor:ResetAndTeleport
    static readonly IntPtr ResetAndTeleport_NativeFunction;
    static readonly int ResetAndTeleport_ParamsSize;
    static readonly int ResetAndTeleport_bReset_Offset;
    static readonly int ResetAndTeleport_bTeleport_Offset;
    
    public void ResetAndTeleport(bool bReset = false, bool bTeleport = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ResetAndTeleport_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ResetAndTeleport_bReset_Offset), 0, null, bReset);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ResetAndTeleport_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetAndTeleport_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
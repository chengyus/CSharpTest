// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Constraints;

[UClass]
abstract public partial class TickableTransformConstraint : UnrealSharp.Constraints.TickableConstraint
{
    
    static TickableTransformConstraint()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("TickableTransformConstraint");
        
        ParentTRSHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ParentTRSHandle");
        ChildTRSHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ChildTRSHandle");
        bMaintainOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bMaintainOffset");
        bDynamicOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bDynamicOffset");
        
        
        
    }
    
    protected TickableTransformConstraint(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Constraints.TickableTransformConstraint:ParentTRSHandle
    static readonly int ParentTRSHandle_Offset;
    
    public UnrealSharp.Constraints.TransformableHandle ParentTRSHandle
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Constraints.TransformableHandle>.FromNative(IntPtr.Add(NativeObject, ParentTRSHandle_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Constraints.TransformableHandle>.ToNative(IntPtr.Add(NativeObject, ParentTRSHandle_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/Constraints.TickableTransformConstraint:ChildTRSHandle
    static readonly int ChildTRSHandle_Offset;
    
    public UnrealSharp.Constraints.TransformableHandle ChildTRSHandle
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Constraints.TransformableHandle>.FromNative(IntPtr.Add(NativeObject, ChildTRSHandle_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Constraints.TransformableHandle>.ToNative(IntPtr.Add(NativeObject, ChildTRSHandle_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Constraints.TickableTransformConstraint:bMaintainOffset
    static readonly int bMaintainOffset_Offset;
    
    public bool bMaintainOffset
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bMaintainOffset_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bMaintainOffset_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Constraints.TickableTransformConstraint:bDynamicOffset
    static readonly int bDynamicOffset_Offset;
    
    public bool bDynamicOffset
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bDynamicOffset_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bDynamicOffset_Offset), 0, this, value);
        }
    }
    
    
}
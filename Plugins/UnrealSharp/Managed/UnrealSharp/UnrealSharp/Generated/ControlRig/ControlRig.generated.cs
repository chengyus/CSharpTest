// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.ControlRig;

[UClass]
abstract public partial class ControlRig : UnrealSharp.RigVM.RigVMHost
{
    
    static readonly IntPtr NativeClassPtr;
    static ControlRig()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ControlRig");
        
        InteractionRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InteractionRig");
        InteractionRigClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InteractionRigClass");
        
        SelectControl_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SelectControl");
        SelectControl_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SelectControl_NativeFunction);
        SelectControl_InControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectControl_NativeFunction, "InControlName");
        SelectControl_bSelect_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectControl_NativeFunction, "bSelect");
        RequestConstruction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RequestConstruction");
        IsControlSelected_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsControlSelected");
        IsControlSelected_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsControlSelected_NativeFunction);
        IsControlSelected_InControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsControlSelected_NativeFunction, "InControlName");
        IsControlSelected_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsControlSelected_NativeFunction, "ReturnValue");
        GetHostingActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHostingActor");
        GetHostingActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHostingActor_NativeFunction);
        GetHostingActor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHostingActor_NativeFunction, "ReturnValue");
        GetHierarchy_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHierarchy");
        GetHierarchy_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHierarchy_NativeFunction);
        GetHierarchy_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHierarchy_NativeFunction, "ReturnValue");
        FindControlRigs_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindControlRigs");
        FindControlRigs_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindControlRigs_NativeFunction);
        FindControlRigs_Outer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindControlRigs_NativeFunction, "Outer");
        FindControlRigs_OptionalClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindControlRigs_NativeFunction, "OptionalClass");
        FindControlRigs_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindControlRigs_NativeFunction, "ReturnValue");
        FindControlRigs_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(FindControlRigs_NativeFunction, "ReturnValue");
        CurrentControlSelection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CurrentControlSelection");
        CurrentControlSelection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CurrentControlSelection_NativeFunction);
        CurrentControlSelection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CurrentControlSelection_NativeFunction, "ReturnValue");
        CurrentControlSelection_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CurrentControlSelection_NativeFunction, "ReturnValue");
        CreateTransformableControlHandle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateTransformableControlHandle");
        CreateTransformableControlHandle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateTransformableControlHandle_NativeFunction);
        CreateTransformableControlHandle_Outer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateTransformableControlHandle_NativeFunction, "Outer");
        CreateTransformableControlHandle_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateTransformableControlHandle_NativeFunction, "ControlName");
        CreateTransformableControlHandle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateTransformableControlHandle_NativeFunction, "ReturnValue");
        ClearControlSelection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearControlSelection");
        ClearControlSelection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClearControlSelection_NativeFunction);
        ClearControlSelection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearControlSelection_NativeFunction, "ReturnValue");
        
        
    }
    
    protected ControlRig(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/ControlRig.ControlRig:InteractionRig
    static readonly int InteractionRig_Offset;
    
    public UnrealSharp.ControlRig.ControlRig InteractionRig
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.FromNative(IntPtr.Add(NativeObject, InteractionRig_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(NativeObject, InteractionRig_Offset), 0, this, value);
        }
    }
    
    // ClassProperty /Script/ControlRig.ControlRig:InteractionRigClass
    static readonly int InteractionRigClass_Offset;
    
    public SubclassOf<UnrealSharp.ControlRig.ControlRig> InteractionRigClass
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.ControlRig.ControlRig>.FromNative(IntPtr.Add(NativeObject, InteractionRigClass_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            SubclassOfMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(NativeObject, InteractionRigClass_Offset), 0, this, value);
        }
    }
    
    // Function /Script/ControlRig.ControlRig:SelectControl
    static readonly IntPtr SelectControl_NativeFunction;
    static readonly int SelectControl_ParamsSize;
    static readonly int SelectControl_InControlName_Offset;
    static readonly int SelectControl_bSelect_Offset;
    
    public void SelectControl(Name inControlName, bool bSelect = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SelectControl_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SelectControl_InControlName_Offset), 0, null, inControlName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SelectControl_bSelect_Offset), 0, null, bSelect);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SelectControl_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/ControlRig.ControlRig:RequestConstruction
    static readonly IntPtr RequestConstruction_NativeFunction;
    
    public void RequestConstruction()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RequestConstruction_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/ControlRig.ControlRig:IsControlSelected
    static readonly IntPtr IsControlSelected_NativeFunction;
    static readonly int IsControlSelected_ParamsSize;
    static readonly int IsControlSelected_InControlName_Offset;
    static readonly int IsControlSelected_ReturnValue_Offset;
    
    public bool IsControlSelected(Name inControlName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsControlSelected_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, IsControlSelected_InControlName_Offset), 0, null, inControlName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsControlSelected_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsControlSelected_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRig:GetHostingActor
    static readonly IntPtr GetHostingActor_NativeFunction;
    static readonly int GetHostingActor_ParamsSize;
    static readonly int GetHostingActor_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Actor GetHostingActor()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHostingActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetHostingActor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Actor returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(ParamsBuffer, GetHostingActor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRig:GetHierarchy
    static readonly IntPtr GetHierarchy_NativeFunction;
    static readonly int GetHierarchy_ParamsSize;
    static readonly int GetHierarchy_ReturnValue_Offset;
    
    public UnrealSharp.ControlRig.RigHierarchy GetHierarchy()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHierarchy_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetHierarchy_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigHierarchy returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.ControlRig.RigHierarchy>.FromNative(IntPtr.Add(ParamsBuffer, GetHierarchy_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRig:FindControlRigs
    static readonly IntPtr FindControlRigs_NativeFunction;
    static readonly int FindControlRigs_ParamsSize;
    static readonly int FindControlRigs_Outer_Offset;
    static readonly int FindControlRigs_OptionalClass_Offset;
    static readonly int FindControlRigs_ReturnValue_Offset;
    static readonly int FindControlRigs_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.ControlRig.ControlRig> FindControlRigs(UnrealSharp.CoreUObject.Object outer, SubclassOf<UnrealSharp.ControlRig.ControlRig> optionalClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindControlRigs_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, FindControlRigs_Outer_Offset), 0, null, outer);
            SubclassOfMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, FindControlRigs_OptionalClass_Offset), 0, null, optionalClass);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindControlRigs_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.ControlRig.ControlRig> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, FindControlRigs_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.ControlRig> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.ControlRig> (1, ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative, ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.FromNative, FindControlRigs_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.ControlRig>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRig:CurrentControlSelection
    static readonly IntPtr CurrentControlSelection_NativeFunction;
    static readonly int CurrentControlSelection_ParamsSize;
    static readonly int CurrentControlSelection_ReturnValue_Offset;
    static readonly int CurrentControlSelection_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<Name> CurrentControlSelection()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CurrentControlSelection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CurrentControlSelection_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<Name> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, CurrentControlSelection_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<Name> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, CurrentControlSelection_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRig:CreateTransformableControlHandle
    static readonly IntPtr CreateTransformableControlHandle_NativeFunction;
    static readonly int CreateTransformableControlHandle_ParamsSize;
    static readonly int CreateTransformableControlHandle_Outer_Offset;
    static readonly int CreateTransformableControlHandle_ControlName_Offset;
    static readonly int CreateTransformableControlHandle_ReturnValue_Offset;
    
    public UnrealSharp.ControlRig.TransformableControlHandle CreateTransformableControlHandle(UnrealSharp.CoreUObject.Object outer, Name controlName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateTransformableControlHandle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CreateTransformableControlHandle_Outer_Offset), 0, null, outer);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, CreateTransformableControlHandle_ControlName_Offset), 0, null, controlName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreateTransformableControlHandle_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.TransformableControlHandle returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.ControlRig.TransformableControlHandle>.FromNative(IntPtr.Add(ParamsBuffer, CreateTransformableControlHandle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRig:ClearControlSelection
    static readonly IntPtr ClearControlSelection_NativeFunction;
    static readonly int ClearControlSelection_ParamsSize;
    static readonly int ClearControlSelection_ReturnValue_Offset;
    
    public bool ClearControlSelection()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClearControlSelection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearControlSelection_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ClearControlSelection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.ControlRig;

[UClass]
public partial class ControlRigComponent : UnrealSharp.Engine.PrimitiveComponent
{
    
    static ControlRigComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ControlRigComponent");
        
        ControlRigClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ControlRigClass");
        
        Update_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Update");
        Update_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Update_NativeFunction);
        Update_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Update_NativeFunction, "DeltaTime");
        SetObjectBinding_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetObjectBinding");
        SetObjectBinding_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetObjectBinding_NativeFunction);
        SetObjectBinding_InObjectToBind_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetObjectBinding_NativeFunction, "InObjectToBind");
        SetMappedElements_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMappedElements");
        SetMappedElements_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMappedElements_NativeFunction);
        SetMappedElements_NewMappedElements_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMappedElements_NativeFunction, "NewMappedElements");
        SetMappedElements_NewMappedElements_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetMappedElements_NativeFunction, "NewMappedElements");
        SetInitialSpaceTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetInitialSpaceTransform");
        SetInitialSpaceTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetInitialSpaceTransform_NativeFunction);
        SetInitialSpaceTransform_SpaceName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInitialSpaceTransform_NativeFunction, "SpaceName");
        SetInitialSpaceTransform_InitialTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInitialSpaceTransform_NativeFunction, "InitialTransform");
        SetInitialSpaceTransform_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInitialSpaceTransform_NativeFunction, "Space");
        SetInitialBoneTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetInitialBoneTransform");
        SetInitialBoneTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetInitialBoneTransform_NativeFunction);
        SetInitialBoneTransform_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInitialBoneTransform_NativeFunction, "BoneName");
        SetInitialBoneTransform_InitialTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInitialBoneTransform_NativeFunction, "InitialTransform");
        SetInitialBoneTransform_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInitialBoneTransform_NativeFunction, "Space");
        SetInitialBoneTransform_bPropagateToChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInitialBoneTransform_NativeFunction, "bPropagateToChildren");
        SetControlVector2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlVector2D");
        SetControlVector2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlVector2D_NativeFunction);
        SetControlVector2D_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlVector2D_NativeFunction, "ControlName");
        SetControlVector2D_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlVector2D_NativeFunction, "Value");
        SetControlTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlTransform");
        SetControlTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlTransform_NativeFunction);
        SetControlTransform_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlTransform_NativeFunction, "ControlName");
        SetControlTransform_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlTransform_NativeFunction, "Value");
        SetControlTransform_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlTransform_NativeFunction, "Space");
        SetControlScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlScale");
        SetControlScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlScale_NativeFunction);
        SetControlScale_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlScale_NativeFunction, "ControlName");
        SetControlScale_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlScale_NativeFunction, "Value");
        SetControlScale_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlScale_NativeFunction, "Space");
        SetControlRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlRotator");
        SetControlRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlRotator_NativeFunction);
        SetControlRotator_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRotator_NativeFunction, "ControlName");
        SetControlRotator_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRotator_NativeFunction, "Value");
        SetControlRotator_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRotator_NativeFunction, "Space");
        SetControlRigClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlRigClass");
        SetControlRigClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlRigClass_NativeFunction);
        SetControlRigClass_InControlRigClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigClass_NativeFunction, "InControlRigClass");
        SetControlPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlPosition");
        SetControlPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlPosition_NativeFunction);
        SetControlPosition_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPosition_NativeFunction, "ControlName");
        SetControlPosition_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPosition_NativeFunction, "Value");
        SetControlPosition_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPosition_NativeFunction, "Space");
        SetControlOffset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlOffset");
        SetControlOffset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlOffset_NativeFunction);
        SetControlOffset_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlOffset_NativeFunction, "ControlName");
        SetControlOffset_OffsetTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlOffset_NativeFunction, "OffsetTransform");
        SetControlOffset_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlOffset_NativeFunction, "Space");
        SetControlInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlInt");
        SetControlInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlInt_NativeFunction);
        SetControlInt_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlInt_NativeFunction, "ControlName");
        SetControlInt_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlInt_NativeFunction, "Value");
        SetControlFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlFloat");
        SetControlFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlFloat_NativeFunction);
        SetControlFloat_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlFloat_NativeFunction, "ControlName");
        SetControlFloat_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlFloat_NativeFunction, "Value");
        SetControlBool_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlBool");
        SetControlBool_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlBool_NativeFunction);
        SetControlBool_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlBool_NativeFunction, "ControlName");
        SetControlBool_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlBool_NativeFunction, "Value");
        SetBoneTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBoneTransform");
        SetBoneTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBoneTransform_NativeFunction);
        SetBoneTransform_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoneTransform_NativeFunction, "BoneName");
        SetBoneTransform_Transform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoneTransform_NativeFunction, "Transform");
        SetBoneTransform_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoneTransform_NativeFunction, "Space");
        SetBoneTransform_Weight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoneTransform_NativeFunction, "Weight");
        SetBoneTransform_bPropagateToChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoneTransform_NativeFunction, "bPropagateToChildren");
        SetBoneInitialTransformsFromSkeletalMesh_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBoneInitialTransformsFromSkeletalMesh");
        SetBoneInitialTransformsFromSkeletalMesh_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBoneInitialTransformsFromSkeletalMesh_NativeFunction);
        SetBoneInitialTransformsFromSkeletalMesh_InSkeletalMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoneInitialTransformsFromSkeletalMesh_NativeFunction, "InSkeletalMesh");
        Initialize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Initialize");
        GetSpaceTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSpaceTransform");
        GetSpaceTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSpaceTransform_NativeFunction);
        GetSpaceTransform_SpaceName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSpaceTransform_NativeFunction, "SpaceName");
        GetSpaceTransform_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSpaceTransform_NativeFunction, "Space");
        GetSpaceTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSpaceTransform_NativeFunction, "ReturnValue");
        GetInitialSpaceTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInitialSpaceTransform");
        GetInitialSpaceTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInitialSpaceTransform_NativeFunction);
        GetInitialSpaceTransform_SpaceName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInitialSpaceTransform_NativeFunction, "SpaceName");
        GetInitialSpaceTransform_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInitialSpaceTransform_NativeFunction, "Space");
        GetInitialSpaceTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInitialSpaceTransform_NativeFunction, "ReturnValue");
        GetInitialBoneTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInitialBoneTransform");
        GetInitialBoneTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInitialBoneTransform_NativeFunction);
        GetInitialBoneTransform_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInitialBoneTransform_NativeFunction, "BoneName");
        GetInitialBoneTransform_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInitialBoneTransform_NativeFunction, "Space");
        GetInitialBoneTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInitialBoneTransform_NativeFunction, "ReturnValue");
        GetElementNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetElementNames");
        GetElementNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetElementNames_NativeFunction);
        GetElementNames_ElementType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetElementNames_NativeFunction, "ElementType");
        GetElementNames_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetElementNames_NativeFunction, "ReturnValue");
        GetElementNames_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetElementNames_NativeFunction, "ReturnValue");
        GetControlVector2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlVector2D");
        GetControlVector2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlVector2D_NativeFunction);
        GetControlVector2D_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlVector2D_NativeFunction, "ControlName");
        GetControlVector2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlVector2D_NativeFunction, "ReturnValue");
        GetControlTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlTransform");
        GetControlTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlTransform_NativeFunction);
        GetControlTransform_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlTransform_NativeFunction, "ControlName");
        GetControlTransform_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlTransform_NativeFunction, "Space");
        GetControlTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlTransform_NativeFunction, "ReturnValue");
        GetControlScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlScale");
        GetControlScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlScale_NativeFunction);
        GetControlScale_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlScale_NativeFunction, "ControlName");
        GetControlScale_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlScale_NativeFunction, "Space");
        GetControlScale_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlScale_NativeFunction, "ReturnValue");
        GetControlRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlRotator");
        GetControlRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlRotator_NativeFunction);
        GetControlRotator_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlRotator_NativeFunction, "ControlName");
        GetControlRotator_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlRotator_NativeFunction, "Space");
        GetControlRotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlRotator_NativeFunction, "ReturnValue");
        GetControlRig_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlRig");
        GetControlRig_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlRig_NativeFunction);
        GetControlRig_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlRig_NativeFunction, "ReturnValue");
        GetControlPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlPosition");
        GetControlPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlPosition_NativeFunction);
        GetControlPosition_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPosition_NativeFunction, "ControlName");
        GetControlPosition_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPosition_NativeFunction, "Space");
        GetControlPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPosition_NativeFunction, "ReturnValue");
        GetControlOffset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlOffset");
        GetControlOffset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlOffset_NativeFunction);
        GetControlOffset_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlOffset_NativeFunction, "ControlName");
        GetControlOffset_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlOffset_NativeFunction, "Space");
        GetControlOffset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlOffset_NativeFunction, "ReturnValue");
        GetControlInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlInt");
        GetControlInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlInt_NativeFunction);
        GetControlInt_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlInt_NativeFunction, "ControlName");
        GetControlInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlInt_NativeFunction, "ReturnValue");
        GetControlFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlFloat");
        GetControlFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlFloat_NativeFunction);
        GetControlFloat_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlFloat_NativeFunction, "ControlName");
        GetControlFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlFloat_NativeFunction, "ReturnValue");
        GetControlBool_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlBool");
        GetControlBool_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlBool_NativeFunction);
        GetControlBool_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlBool_NativeFunction, "ControlName");
        GetControlBool_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlBool_NativeFunction, "ReturnValue");
        GetBoneTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBoneTransform");
        GetBoneTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBoneTransform_NativeFunction);
        GetBoneTransform_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoneTransform_NativeFunction, "BoneName");
        GetBoneTransform_Space_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoneTransform_NativeFunction, "Space");
        GetBoneTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoneTransform_NativeFunction, "ReturnValue");
        GetAbsoluteTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAbsoluteTime");
        GetAbsoluteTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAbsoluteTime_NativeFunction);
        GetAbsoluteTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAbsoluteTime_NativeFunction, "ReturnValue");
        DoesElementExist_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DoesElementExist");
        DoesElementExist_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DoesElementExist_NativeFunction);
        DoesElementExist_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesElementExist_NativeFunction, "Name");
        DoesElementExist_ElementType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesElementExist_NativeFunction, "ElementType");
        DoesElementExist_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesElementExist_NativeFunction, "ReturnValue");
        ClearMappedElements_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearMappedElements");
        CanExecute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CanExecute");
        CanExecute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CanExecute_NativeFunction);
        CanExecute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanExecute_NativeFunction, "ReturnValue");
        AddMappedSkeletalMesh_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddMappedSkeletalMesh");
        AddMappedSkeletalMesh_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddMappedSkeletalMesh_NativeFunction);
        AddMappedSkeletalMesh_SkeletalMeshComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMappedSkeletalMesh_NativeFunction, "SkeletalMeshComponent");
        AddMappedSkeletalMesh_Bones_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMappedSkeletalMesh_NativeFunction, "Bones");
        AddMappedSkeletalMesh_Bones_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(AddMappedSkeletalMesh_NativeFunction, "Bones");
        AddMappedSkeletalMesh_Curves_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMappedSkeletalMesh_NativeFunction, "Curves");
        AddMappedSkeletalMesh_Curves_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(AddMappedSkeletalMesh_NativeFunction, "Curves");
        AddMappedElements_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddMappedElements");
        AddMappedElements_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddMappedElements_NativeFunction);
        AddMappedElements_NewMappedElements_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMappedElements_NativeFunction, "NewMappedElements");
        AddMappedElements_NewMappedElements_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(AddMappedElements_NativeFunction, "NewMappedElements");
        AddMappedComponents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddMappedComponents");
        AddMappedComponents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddMappedComponents_NativeFunction);
        AddMappedComponents_Components_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMappedComponents_NativeFunction, "Components");
        AddMappedComponents_Components_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(AddMappedComponents_NativeFunction, "Components");
        AddMappedCompleteSkeletalMesh_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddMappedCompleteSkeletalMesh");
        AddMappedCompleteSkeletalMesh_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddMappedCompleteSkeletalMesh_NativeFunction);
        AddMappedCompleteSkeletalMesh_SkeletalMeshComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMappedCompleteSkeletalMesh_NativeFunction, "SkeletalMeshComponent");
        
        IntPtr OnPreInitialize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnPreInitialize");
        OnPreInitialize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnPreInitialize_NativeFunction);
        OnPreInitialize_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnPreInitialize_NativeFunction, "Component");
        
        IntPtr OnPreForwardsSolve_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnPreForwardsSolve");
        OnPreForwardsSolve_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnPreForwardsSolve_NativeFunction);
        OnPreForwardsSolve_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnPreForwardsSolve_NativeFunction, "Component");
        
        IntPtr OnPreConstruction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnPreConstruction");
        OnPreConstruction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnPreConstruction_NativeFunction);
        OnPreConstruction_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnPreConstruction_NativeFunction, "Component");
        
        IntPtr OnPostInitialize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnPostInitialize");
        OnPostInitialize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnPostInitialize_NativeFunction);
        OnPostInitialize_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnPostInitialize_NativeFunction, "Component");
        
        IntPtr OnPostForwardsSolve_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnPostForwardsSolve");
        OnPostForwardsSolve_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnPostForwardsSolve_NativeFunction);
        OnPostForwardsSolve_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnPostForwardsSolve_NativeFunction, "Component");
        
        IntPtr OnPostConstruction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnPostConstruction");
        OnPostConstruction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnPostConstruction_NativeFunction);
        OnPostConstruction_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnPostConstruction_NativeFunction, "Component");
        
        
    }
    
    protected ControlRigComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ClassProperty /Script/ControlRig.ControlRigComponent:ControlRigClass
    static readonly int ControlRigClass_Offset;
    
    public SubclassOf<UnrealSharp.ControlRig.ControlRig> ControlRigClass
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.ControlRig.ControlRig>.FromNative(IntPtr.Add(NativeObject, ControlRigClass_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            SubclassOfMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(NativeObject, ControlRigClass_Offset), 0, this, value);
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:Update
    static readonly IntPtr Update_NativeFunction;
    static readonly int Update_ParamsSize;
    static readonly int Update_DeltaTime_Offset;
    
    public void Update(float deltaTime = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Update_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Update_DeltaTime_Offset), 0, null, deltaTime);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Update_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:SetObjectBinding
    static readonly IntPtr SetObjectBinding_NativeFunction;
    static readonly int SetObjectBinding_ParamsSize;
    static readonly int SetObjectBinding_InObjectToBind_Offset;
    
    public void SetObjectBinding(UnrealSharp.CoreUObject.Object inObjectToBind)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetObjectBinding_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetObjectBinding_InObjectToBind_Offset), 0, null, inObjectToBind);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetObjectBinding_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:SetMappedElements
    static readonly IntPtr SetMappedElements_NativeFunction;
    static readonly int SetMappedElements_ParamsSize;
    static readonly int SetMappedElements_NewMappedElements_Offset;
    static readonly int SetMappedElements_NewMappedElements_ElementSize;
    
    public void SetMappedElements(System.Collections.Generic.IList<UnrealSharp.ControlRig.ControlRigComponentMappedElement> newMappedElements)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMappedElements_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NewMappedElements_NativeBuffer = IntPtr.Add(ParamsBuffer, SetMappedElements_NewMappedElements_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.ControlRigComponentMappedElement> NewMappedElements_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.ControlRigComponentMappedElement>(1, UnrealSharp.ControlRig.ControlRigComponentMappedElementMarshaler.ToNative, UnrealSharp.ControlRig.ControlRigComponentMappedElementMarshaler.FromNative, SetMappedElements_NewMappedElements_ElementSize);
            NewMappedElements_Marshaler.ToNative(NewMappedElements_NativeBuffer, 0, null, newMappedElements);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMappedElements_NativeFunction, ParamsBuffer);
            
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.ControlRigComponentMappedElement>.DestructInstance(NewMappedElements_NativeBuffer, 0);
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:SetInitialSpaceTransform
    static readonly IntPtr SetInitialSpaceTransform_NativeFunction;
    static readonly int SetInitialSpaceTransform_ParamsSize;
    static readonly int SetInitialSpaceTransform_SpaceName_Offset;
    static readonly int SetInitialSpaceTransform_InitialTransform_Offset;
    static readonly int SetInitialSpaceTransform_Space_Offset;
    
    public void SetInitialSpaceTransform(Name spaceName, UnrealSharp.Transform initialTransform, UnrealSharp.ControlRig.EControlRigComponentSpace space = UnrealSharp.ControlRig.EControlRigComponentSpace.RigSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetInitialSpaceTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetInitialSpaceTransform_SpaceName_Offset), 0, null, spaceName);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetInitialSpaceTransform_InitialTransform_Offset), 0, null, initialTransform);
            BlittableMarshaller<UnrealSharp.ControlRig.EControlRigComponentSpace>.ToNative(IntPtr.Add(ParamsBuffer, SetInitialSpaceTransform_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetInitialSpaceTransform_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:SetInitialBoneTransform
    static readonly IntPtr SetInitialBoneTransform_NativeFunction;
    static readonly int SetInitialBoneTransform_ParamsSize;
    static readonly int SetInitialBoneTransform_BoneName_Offset;
    static readonly int SetInitialBoneTransform_InitialTransform_Offset;
    static readonly int SetInitialBoneTransform_Space_Offset;
    static readonly int SetInitialBoneTransform_bPropagateToChildren_Offset;
    
    public void SetInitialBoneTransform(Name boneName, UnrealSharp.Transform initialTransform, UnrealSharp.ControlRig.EControlRigComponentSpace space = UnrealSharp.ControlRig.EControlRigComponentSpace.RigSpace, bool bPropagateToChildren = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetInitialBoneTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetInitialBoneTransform_BoneName_Offset), 0, null, boneName);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetInitialBoneTransform_InitialTransform_Offset), 0, null, initialTransform);
            BlittableMarshaller<UnrealSharp.ControlRig.EControlRigComponentSpace>.ToNative(IntPtr.Add(ParamsBuffer, SetInitialBoneTransform_Space_Offset), 0, null, space);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetInitialBoneTransform_bPropagateToChildren_Offset), 0, null, bPropagateToChildren);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetInitialBoneTransform_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:SetControlVector2D
    static readonly IntPtr SetControlVector2D_NativeFunction;
    static readonly int SetControlVector2D_ParamsSize;
    static readonly int SetControlVector2D_ControlName_Offset;
    static readonly int SetControlVector2D_Value_Offset;
    
    public void SetControlVector2D(Name controlName, System.DoubleNumerics.Vector2 value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlVector2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetControlVector2D_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetControlVector2D_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlVector2D_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:SetControlTransform
    static readonly IntPtr SetControlTransform_NativeFunction;
    static readonly int SetControlTransform_ParamsSize;
    static readonly int SetControlTransform_ControlName_Offset;
    static readonly int SetControlTransform_Value_Offset;
    static readonly int SetControlTransform_Space_Offset;
    
    public void SetControlTransform(Name controlName, UnrealSharp.Transform value, UnrealSharp.ControlRig.EControlRigComponentSpace space = UnrealSharp.ControlRig.EControlRigComponentSpace.RigSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetControlTransform_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetControlTransform_Value_Offset), 0, null, value);
            BlittableMarshaller<UnrealSharp.ControlRig.EControlRigComponentSpace>.ToNative(IntPtr.Add(ParamsBuffer, SetControlTransform_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlTransform_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:SetControlScale
    static readonly IntPtr SetControlScale_NativeFunction;
    static readonly int SetControlScale_ParamsSize;
    static readonly int SetControlScale_ControlName_Offset;
    static readonly int SetControlScale_Value_Offset;
    static readonly int SetControlScale_Space_Offset;
    
    public void SetControlScale(Name controlName, System.DoubleNumerics.Vector3 value, UnrealSharp.ControlRig.EControlRigComponentSpace space = UnrealSharp.ControlRig.EControlRigComponentSpace.LocalSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetControlScale_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetControlScale_Value_Offset), 0, null, value);
            BlittableMarshaller<UnrealSharp.ControlRig.EControlRigComponentSpace>.ToNative(IntPtr.Add(ParamsBuffer, SetControlScale_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:SetControlRotator
    static readonly IntPtr SetControlRotator_NativeFunction;
    static readonly int SetControlRotator_ParamsSize;
    static readonly int SetControlRotator_ControlName_Offset;
    static readonly int SetControlRotator_Value_Offset;
    static readonly int SetControlRotator_Space_Offset;
    
    public void SetControlRotator(Name controlName, UnrealSharp.Rotator value, UnrealSharp.ControlRig.EControlRigComponentSpace space = UnrealSharp.ControlRig.EControlRigComponentSpace.LocalSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRotator_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRotator_Value_Offset), 0, null, value);
            BlittableMarshaller<UnrealSharp.ControlRig.EControlRigComponentSpace>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRotator_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlRotator_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:SetControlRigClass
    static readonly IntPtr SetControlRigClass_NativeFunction;
    static readonly int SetControlRigClass_ParamsSize;
    static readonly int SetControlRigClass_InControlRigClass_Offset;
    
    public void SetControlRigClass(SubclassOf<UnrealSharp.ControlRig.ControlRig> inControlRigClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlRigClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRigClass_InControlRigClass_Offset), 0, null, inControlRigClass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlRigClass_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:SetControlPosition
    static readonly IntPtr SetControlPosition_NativeFunction;
    static readonly int SetControlPosition_ParamsSize;
    static readonly int SetControlPosition_ControlName_Offset;
    static readonly int SetControlPosition_Value_Offset;
    static readonly int SetControlPosition_Space_Offset;
    
    public void SetControlPosition(Name controlName, System.DoubleNumerics.Vector3 value, UnrealSharp.ControlRig.EControlRigComponentSpace space = UnrealSharp.ControlRig.EControlRigComponentSpace.LocalSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetControlPosition_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetControlPosition_Value_Offset), 0, null, value);
            BlittableMarshaller<UnrealSharp.ControlRig.EControlRigComponentSpace>.ToNative(IntPtr.Add(ParamsBuffer, SetControlPosition_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlPosition_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:SetControlOffset
    static readonly IntPtr SetControlOffset_NativeFunction;
    static readonly int SetControlOffset_ParamsSize;
    static readonly int SetControlOffset_ControlName_Offset;
    static readonly int SetControlOffset_OffsetTransform_Offset;
    static readonly int SetControlOffset_Space_Offset;
    
    public void SetControlOffset(Name controlName, UnrealSharp.Transform offsetTransform, UnrealSharp.ControlRig.EControlRigComponentSpace space = UnrealSharp.ControlRig.EControlRigComponentSpace.RigSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlOffset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetControlOffset_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetControlOffset_OffsetTransform_Offset), 0, null, offsetTransform);
            BlittableMarshaller<UnrealSharp.ControlRig.EControlRigComponentSpace>.ToNative(IntPtr.Add(ParamsBuffer, SetControlOffset_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlOffset_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:SetControlInt
    static readonly IntPtr SetControlInt_NativeFunction;
    static readonly int SetControlInt_ParamsSize;
    static readonly int SetControlInt_ControlName_Offset;
    static readonly int SetControlInt_Value_Offset;
    
    public void SetControlInt(Name controlName, int value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetControlInt_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetControlInt_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlInt_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:SetControlFloat
    static readonly IntPtr SetControlFloat_NativeFunction;
    static readonly int SetControlFloat_ParamsSize;
    static readonly int SetControlFloat_ControlName_Offset;
    static readonly int SetControlFloat_Value_Offset;
    
    public void SetControlFloat(Name controlName, float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetControlFloat_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetControlFloat_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlFloat_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:SetControlBool
    static readonly IntPtr SetControlBool_NativeFunction;
    static readonly int SetControlBool_ParamsSize;
    static readonly int SetControlBool_ControlName_Offset;
    static readonly int SetControlBool_Value_Offset;
    
    public void SetControlBool(Name controlName, bool value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlBool_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetControlBool_ControlName_Offset), 0, null, controlName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlBool_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlBool_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:SetBoneTransform
    static readonly IntPtr SetBoneTransform_NativeFunction;
    static readonly int SetBoneTransform_ParamsSize;
    static readonly int SetBoneTransform_BoneName_Offset;
    static readonly int SetBoneTransform_Transform_Offset;
    static readonly int SetBoneTransform_Space_Offset;
    static readonly int SetBoneTransform_Weight_Offset;
    static readonly int SetBoneTransform_bPropagateToChildren_Offset;
    
    public void SetBoneTransform(Name boneName, UnrealSharp.Transform transform, UnrealSharp.ControlRig.EControlRigComponentSpace space = UnrealSharp.ControlRig.EControlRigComponentSpace.RigSpace, float weight = 1.000000f, bool bPropagateToChildren = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBoneTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetBoneTransform_BoneName_Offset), 0, null, boneName);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetBoneTransform_Transform_Offset), 0, null, transform);
            BlittableMarshaller<UnrealSharp.ControlRig.EControlRigComponentSpace>.ToNative(IntPtr.Add(ParamsBuffer, SetBoneTransform_Space_Offset), 0, null, space);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetBoneTransform_Weight_Offset), 0, null, weight);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetBoneTransform_bPropagateToChildren_Offset), 0, null, bPropagateToChildren);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBoneTransform_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:SetBoneInitialTransformsFromSkeletalMesh
    static readonly IntPtr SetBoneInitialTransformsFromSkeletalMesh_NativeFunction;
    static readonly int SetBoneInitialTransformsFromSkeletalMesh_ParamsSize;
    static readonly int SetBoneInitialTransformsFromSkeletalMesh_InSkeletalMesh_Offset;
    
    public void SetBoneInitialTransformsFromSkeletalMesh(UnrealSharp.Engine.SkeletalMesh inSkeletalMesh)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBoneInitialTransformsFromSkeletalMesh_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SkeletalMesh>.ToNative(IntPtr.Add(ParamsBuffer, SetBoneInitialTransformsFromSkeletalMesh_InSkeletalMesh_Offset), 0, null, inSkeletalMesh);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBoneInitialTransformsFromSkeletalMesh_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:Initialize
    static readonly IntPtr Initialize_NativeFunction;
    
    public void Initialize()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Initialize_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:GetSpaceTransform
    static readonly IntPtr GetSpaceTransform_NativeFunction;
    static readonly int GetSpaceTransform_ParamsSize;
    static readonly int GetSpaceTransform_SpaceName_Offset;
    static readonly int GetSpaceTransform_Space_Offset;
    static readonly int GetSpaceTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetSpaceTransform(Name spaceName, UnrealSharp.ControlRig.EControlRigComponentSpace space = UnrealSharp.ControlRig.EControlRigComponentSpace.RigSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSpaceTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetSpaceTransform_SpaceName_Offset), 0, null, spaceName);
            BlittableMarshaller<UnrealSharp.ControlRig.EControlRigComponentSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetSpaceTransform_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSpaceTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetSpaceTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:GetInitialSpaceTransform
    static readonly IntPtr GetInitialSpaceTransform_NativeFunction;
    static readonly int GetInitialSpaceTransform_ParamsSize;
    static readonly int GetInitialSpaceTransform_SpaceName_Offset;
    static readonly int GetInitialSpaceTransform_Space_Offset;
    static readonly int GetInitialSpaceTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetInitialSpaceTransform(Name spaceName, UnrealSharp.ControlRig.EControlRigComponentSpace space = UnrealSharp.ControlRig.EControlRigComponentSpace.RigSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInitialSpaceTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetInitialSpaceTransform_SpaceName_Offset), 0, null, spaceName);
            BlittableMarshaller<UnrealSharp.ControlRig.EControlRigComponentSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetInitialSpaceTransform_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInitialSpaceTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetInitialSpaceTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:GetInitialBoneTransform
    static readonly IntPtr GetInitialBoneTransform_NativeFunction;
    static readonly int GetInitialBoneTransform_ParamsSize;
    static readonly int GetInitialBoneTransform_BoneName_Offset;
    static readonly int GetInitialBoneTransform_Space_Offset;
    static readonly int GetInitialBoneTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetInitialBoneTransform(Name boneName, UnrealSharp.ControlRig.EControlRigComponentSpace space = UnrealSharp.ControlRig.EControlRigComponentSpace.RigSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInitialBoneTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetInitialBoneTransform_BoneName_Offset), 0, null, boneName);
            BlittableMarshaller<UnrealSharp.ControlRig.EControlRigComponentSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetInitialBoneTransform_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInitialBoneTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetInitialBoneTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:GetElementNames
    static readonly IntPtr GetElementNames_NativeFunction;
    static readonly int GetElementNames_ParamsSize;
    static readonly int GetElementNames_ElementType_Offset;
    static readonly int GetElementNames_ReturnValue_Offset;
    static readonly int GetElementNames_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<Name> GetElementNames(UnrealSharp.ControlRig.ERigElementType elementType = UnrealSharp.ControlRig.ERigElementType.Bone)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetElementNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.ControlRig.ERigElementType>.ToNative(IntPtr.Add(ParamsBuffer, GetElementNames_ElementType_Offset), 0, null, elementType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetElementNames_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<Name> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetElementNames_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<Name> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetElementNames_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:GetControlVector2D
    static readonly IntPtr GetControlVector2D_NativeFunction;
    static readonly int GetControlVector2D_ParamsSize;
    static readonly int GetControlVector2D_ControlName_Offset;
    static readonly int GetControlVector2D_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector2 GetControlVector2D(Name controlName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlVector2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetControlVector2D_ControlName_Offset), 0, null, controlName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlVector2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, GetControlVector2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:GetControlTransform
    static readonly IntPtr GetControlTransform_NativeFunction;
    static readonly int GetControlTransform_ParamsSize;
    static readonly int GetControlTransform_ControlName_Offset;
    static readonly int GetControlTransform_Space_Offset;
    static readonly int GetControlTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetControlTransform(Name controlName, UnrealSharp.ControlRig.EControlRigComponentSpace space = UnrealSharp.ControlRig.EControlRigComponentSpace.RigSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetControlTransform_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.ControlRig.EControlRigComponentSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetControlTransform_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetControlTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:GetControlScale
    static readonly IntPtr GetControlScale_NativeFunction;
    static readonly int GetControlScale_ParamsSize;
    static readonly int GetControlScale_ControlName_Offset;
    static readonly int GetControlScale_Space_Offset;
    static readonly int GetControlScale_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetControlScale(Name controlName, UnrealSharp.ControlRig.EControlRigComponentSpace space = UnrealSharp.ControlRig.EControlRigComponentSpace.LocalSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetControlScale_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.ControlRig.EControlRigComponentSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetControlScale_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlScale_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetControlScale_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:GetControlRotator
    static readonly IntPtr GetControlRotator_NativeFunction;
    static readonly int GetControlRotator_ParamsSize;
    static readonly int GetControlRotator_ControlName_Offset;
    static readonly int GetControlRotator_Space_Offset;
    static readonly int GetControlRotator_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetControlRotator(Name controlName, UnrealSharp.ControlRig.EControlRigComponentSpace space = UnrealSharp.ControlRig.EControlRigComponentSpace.LocalSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetControlRotator_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.ControlRig.EControlRigComponentSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetControlRotator_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlRotator_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetControlRotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:GetControlRig
    static readonly IntPtr GetControlRig_NativeFunction;
    static readonly int GetControlRig_ParamsSize;
    static readonly int GetControlRig_ReturnValue_Offset;
    
    public UnrealSharp.ControlRig.ControlRig GetControlRig()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlRig_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlRig_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.ControlRig returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.FromNative(IntPtr.Add(ParamsBuffer, GetControlRig_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:GetControlPosition
    static readonly IntPtr GetControlPosition_NativeFunction;
    static readonly int GetControlPosition_ParamsSize;
    static readonly int GetControlPosition_ControlName_Offset;
    static readonly int GetControlPosition_Space_Offset;
    static readonly int GetControlPosition_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetControlPosition(Name controlName, UnrealSharp.ControlRig.EControlRigComponentSpace space = UnrealSharp.ControlRig.EControlRigComponentSpace.LocalSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetControlPosition_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.ControlRig.EControlRigComponentSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetControlPosition_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlPosition_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetControlPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:GetControlOffset
    static readonly IntPtr GetControlOffset_NativeFunction;
    static readonly int GetControlOffset_ParamsSize;
    static readonly int GetControlOffset_ControlName_Offset;
    static readonly int GetControlOffset_Space_Offset;
    static readonly int GetControlOffset_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetControlOffset(Name controlName, UnrealSharp.ControlRig.EControlRigComponentSpace space = UnrealSharp.ControlRig.EControlRigComponentSpace.RigSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlOffset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetControlOffset_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.ControlRig.EControlRigComponentSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetControlOffset_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlOffset_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetControlOffset_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:GetControlInt
    static readonly IntPtr GetControlInt_NativeFunction;
    static readonly int GetControlInt_ParamsSize;
    static readonly int GetControlInt_ControlName_Offset;
    static readonly int GetControlInt_ReturnValue_Offset;
    
    public int GetControlInt(Name controlName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetControlInt_ControlName_Offset), 0, null, controlName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlInt_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetControlInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:GetControlFloat
    static readonly IntPtr GetControlFloat_NativeFunction;
    static readonly int GetControlFloat_ParamsSize;
    static readonly int GetControlFloat_ControlName_Offset;
    static readonly int GetControlFloat_ReturnValue_Offset;
    
    public float GetControlFloat(Name controlName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetControlFloat_ControlName_Offset), 0, null, controlName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlFloat_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetControlFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:GetControlBool
    static readonly IntPtr GetControlBool_NativeFunction;
    static readonly int GetControlBool_ParamsSize;
    static readonly int GetControlBool_ControlName_Offset;
    static readonly int GetControlBool_ReturnValue_Offset;
    
    public bool GetControlBool(Name controlName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlBool_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetControlBool_ControlName_Offset), 0, null, controlName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlBool_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetControlBool_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:GetBoneTransform
    static readonly IntPtr GetBoneTransform_NativeFunction;
    static readonly int GetBoneTransform_ParamsSize;
    static readonly int GetBoneTransform_BoneName_Offset;
    static readonly int GetBoneTransform_Space_Offset;
    static readonly int GetBoneTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetBoneTransform(Name boneName, UnrealSharp.ControlRig.EControlRigComponentSpace space = UnrealSharp.ControlRig.EControlRigComponentSpace.RigSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBoneTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetBoneTransform_BoneName_Offset), 0, null, boneName);
            BlittableMarshaller<UnrealSharp.ControlRig.EControlRigComponentSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetBoneTransform_Space_Offset), 0, null, space);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBoneTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetBoneTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:GetAbsoluteTime
    static readonly IntPtr GetAbsoluteTime_NativeFunction;
    static readonly int GetAbsoluteTime_ParamsSize;
    static readonly int GetAbsoluteTime_ReturnValue_Offset;
    
    public float GetAbsoluteTime()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAbsoluteTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAbsoluteTime_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetAbsoluteTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:DoesElementExist
    static readonly IntPtr DoesElementExist_NativeFunction;
    static readonly int DoesElementExist_ParamsSize;
    static readonly int DoesElementExist_Name_Offset;
    static readonly int DoesElementExist_ElementType_Offset;
    static readonly int DoesElementExist_ReturnValue_Offset;
    
    public bool DoesElementExist(Name name, UnrealSharp.ControlRig.ERigElementType elementType = UnrealSharp.ControlRig.ERigElementType.Bone)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DoesElementExist_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, DoesElementExist_Name_Offset), 0, null, name);
            BlittableMarshaller<UnrealSharp.ControlRig.ERigElementType>.ToNative(IntPtr.Add(ParamsBuffer, DoesElementExist_ElementType_Offset), 0, null, elementType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DoesElementExist_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DoesElementExist_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:ClearMappedElements
    static readonly IntPtr ClearMappedElements_NativeFunction;
    
    public void ClearMappedElements()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearMappedElements_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:CanExecute
    static readonly IntPtr CanExecute_NativeFunction;
    static readonly int CanExecute_ParamsSize;
    static readonly int CanExecute_ReturnValue_Offset;
    
    public bool CanExecute()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CanExecute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CanExecute_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CanExecute_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:AddMappedSkeletalMesh
    static readonly IntPtr AddMappedSkeletalMesh_NativeFunction;
    static readonly int AddMappedSkeletalMesh_ParamsSize;
    static readonly int AddMappedSkeletalMesh_SkeletalMeshComponent_Offset;
    static readonly int AddMappedSkeletalMesh_Bones_Offset;
    static readonly int AddMappedSkeletalMesh_Bones_ElementSize;
    static readonly int AddMappedSkeletalMesh_Curves_Offset;
    static readonly int AddMappedSkeletalMesh_Curves_ElementSize;
    
    public void AddMappedSkeletalMesh(UnrealSharp.Engine.SkeletalMeshComponent skeletalMeshComponent, System.Collections.Generic.IList<UnrealSharp.ControlRig.ControlRigComponentMappedBone> bones, System.Collections.Generic.IList<UnrealSharp.ControlRig.ControlRigComponentMappedCurve> curves)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddMappedSkeletalMesh_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SkeletalMeshComponent>.ToNative(IntPtr.Add(ParamsBuffer, AddMappedSkeletalMesh_SkeletalMeshComponent_Offset), 0, null, skeletalMeshComponent);
            IntPtr Bones_NativeBuffer = IntPtr.Add(ParamsBuffer, AddMappedSkeletalMesh_Bones_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.ControlRigComponentMappedBone> Bones_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.ControlRigComponentMappedBone>(1, BlittableMarshaller<UnrealSharp.ControlRig.ControlRigComponentMappedBone>.ToNative, BlittableMarshaller<UnrealSharp.ControlRig.ControlRigComponentMappedBone>.FromNative, AddMappedSkeletalMesh_Bones_ElementSize);
            Bones_Marshaler.ToNative(Bones_NativeBuffer, 0, null, bones);
            IntPtr Curves_NativeBuffer = IntPtr.Add(ParamsBuffer, AddMappedSkeletalMesh_Curves_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.ControlRigComponentMappedCurve> Curves_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.ControlRigComponentMappedCurve>(1, BlittableMarshaller<UnrealSharp.ControlRig.ControlRigComponentMappedCurve>.ToNative, BlittableMarshaller<UnrealSharp.ControlRig.ControlRigComponentMappedCurve>.FromNative, AddMappedSkeletalMesh_Curves_ElementSize);
            Curves_Marshaler.ToNative(Curves_NativeBuffer, 0, null, curves);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddMappedSkeletalMesh_NativeFunction, ParamsBuffer);
            
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.ControlRigComponentMappedBone>.DestructInstance(Bones_NativeBuffer, 0);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.ControlRigComponentMappedCurve>.DestructInstance(Curves_NativeBuffer, 0);
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:AddMappedElements
    static readonly IntPtr AddMappedElements_NativeFunction;
    static readonly int AddMappedElements_ParamsSize;
    static readonly int AddMappedElements_NewMappedElements_Offset;
    static readonly int AddMappedElements_NewMappedElements_ElementSize;
    
    public void AddMappedElements(System.Collections.Generic.IList<UnrealSharp.ControlRig.ControlRigComponentMappedElement> newMappedElements)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddMappedElements_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NewMappedElements_NativeBuffer = IntPtr.Add(ParamsBuffer, AddMappedElements_NewMappedElements_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.ControlRigComponentMappedElement> NewMappedElements_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.ControlRigComponentMappedElement>(1, UnrealSharp.ControlRig.ControlRigComponentMappedElementMarshaler.ToNative, UnrealSharp.ControlRig.ControlRigComponentMappedElementMarshaler.FromNative, AddMappedElements_NewMappedElements_ElementSize);
            NewMappedElements_Marshaler.ToNative(NewMappedElements_NativeBuffer, 0, null, newMappedElements);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddMappedElements_NativeFunction, ParamsBuffer);
            
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.ControlRigComponentMappedElement>.DestructInstance(NewMappedElements_NativeBuffer, 0);
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:AddMappedComponents
    static readonly IntPtr AddMappedComponents_NativeFunction;
    static readonly int AddMappedComponents_ParamsSize;
    static readonly int AddMappedComponents_Components_Offset;
    static readonly int AddMappedComponents_Components_ElementSize;
    
    public void AddMappedComponents(System.Collections.Generic.IList<UnrealSharp.ControlRig.ControlRigComponentMappedComponent> components)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddMappedComponents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Components_NativeBuffer = IntPtr.Add(ParamsBuffer, AddMappedComponents_Components_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.ControlRigComponentMappedComponent> Components_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.ControlRigComponentMappedComponent>(1, UnrealSharp.ControlRig.ControlRigComponentMappedComponentMarshaler.ToNative, UnrealSharp.ControlRig.ControlRigComponentMappedComponentMarshaler.FromNative, AddMappedComponents_Components_ElementSize);
            Components_Marshaler.ToNative(Components_NativeBuffer, 0, null, components);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddMappedComponents_NativeFunction, ParamsBuffer);
            
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.ControlRigComponentMappedComponent>.DestructInstance(Components_NativeBuffer, 0);
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:AddMappedCompleteSkeletalMesh
    static readonly IntPtr AddMappedCompleteSkeletalMesh_NativeFunction;
    static readonly int AddMappedCompleteSkeletalMesh_ParamsSize;
    static readonly int AddMappedCompleteSkeletalMesh_SkeletalMeshComponent_Offset;
    
    public void AddMappedCompleteSkeletalMesh(UnrealSharp.Engine.SkeletalMeshComponent skeletalMeshComponent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddMappedCompleteSkeletalMesh_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SkeletalMeshComponent>.ToNative(IntPtr.Add(ParamsBuffer, AddMappedCompleteSkeletalMesh_SkeletalMeshComponent_Offset), 0, null, skeletalMeshComponent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddMappedCompleteSkeletalMesh_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:OnPreInitialize
    IntPtr OnPreInitialize_NativeFunction;
    static readonly int OnPreInitialize_ParamsSize;
    static readonly int OnPreInitialize_Component_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnPreInitialize(UnrealSharp.ControlRig.ControlRigComponent component)
    {
        unsafe
        {
            if (OnPreInitialize_NativeFunction == IntPtr.Zero)
            {
                OnPreInitialize_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnPreInitialize");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnPreInitialize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRigComponent>.ToNative(IntPtr.Add(ParamsBuffer, OnPreInitialize_Component_Offset), 0, null, component);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnPreInitialize_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnPreInitialize_Implementation(UnrealSharp.ControlRig.ControlRigComponent component)
    {
    }
    void Invoke_OnPreInitialize(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.ControlRig.ControlRigComponent component = ObjectMarshaller<UnrealSharp.ControlRig.ControlRigComponent>.FromNative(IntPtr.Add(buffer, OnPreInitialize_Component_Offset), 0, null);
            OnPreInitialize_Implementation(component);
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:OnPreForwardsSolve
    IntPtr OnPreForwardsSolve_NativeFunction;
    static readonly int OnPreForwardsSolve_ParamsSize;
    static readonly int OnPreForwardsSolve_Component_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnPreForwardsSolve(UnrealSharp.ControlRig.ControlRigComponent component)
    {
        unsafe
        {
            if (OnPreForwardsSolve_NativeFunction == IntPtr.Zero)
            {
                OnPreForwardsSolve_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnPreForwardsSolve");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnPreForwardsSolve_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRigComponent>.ToNative(IntPtr.Add(ParamsBuffer, OnPreForwardsSolve_Component_Offset), 0, null, component);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnPreForwardsSolve_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnPreForwardsSolve_Implementation(UnrealSharp.ControlRig.ControlRigComponent component)
    {
    }
    void Invoke_OnPreForwardsSolve(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.ControlRig.ControlRigComponent component = ObjectMarshaller<UnrealSharp.ControlRig.ControlRigComponent>.FromNative(IntPtr.Add(buffer, OnPreForwardsSolve_Component_Offset), 0, null);
            OnPreForwardsSolve_Implementation(component);
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:OnPreConstruction
    IntPtr OnPreConstruction_NativeFunction;
    static readonly int OnPreConstruction_ParamsSize;
    static readonly int OnPreConstruction_Component_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnPreConstruction(UnrealSharp.ControlRig.ControlRigComponent component)
    {
        unsafe
        {
            if (OnPreConstruction_NativeFunction == IntPtr.Zero)
            {
                OnPreConstruction_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnPreConstruction");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnPreConstruction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRigComponent>.ToNative(IntPtr.Add(ParamsBuffer, OnPreConstruction_Component_Offset), 0, null, component);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnPreConstruction_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnPreConstruction_Implementation(UnrealSharp.ControlRig.ControlRigComponent component)
    {
    }
    void Invoke_OnPreConstruction(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.ControlRig.ControlRigComponent component = ObjectMarshaller<UnrealSharp.ControlRig.ControlRigComponent>.FromNative(IntPtr.Add(buffer, OnPreConstruction_Component_Offset), 0, null);
            OnPreConstruction_Implementation(component);
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:OnPostInitialize
    IntPtr OnPostInitialize_NativeFunction;
    static readonly int OnPostInitialize_ParamsSize;
    static readonly int OnPostInitialize_Component_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnPostInitialize(UnrealSharp.ControlRig.ControlRigComponent component)
    {
        unsafe
        {
            if (OnPostInitialize_NativeFunction == IntPtr.Zero)
            {
                OnPostInitialize_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnPostInitialize");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnPostInitialize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRigComponent>.ToNative(IntPtr.Add(ParamsBuffer, OnPostInitialize_Component_Offset), 0, null, component);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnPostInitialize_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnPostInitialize_Implementation(UnrealSharp.ControlRig.ControlRigComponent component)
    {
    }
    void Invoke_OnPostInitialize(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.ControlRig.ControlRigComponent component = ObjectMarshaller<UnrealSharp.ControlRig.ControlRigComponent>.FromNative(IntPtr.Add(buffer, OnPostInitialize_Component_Offset), 0, null);
            OnPostInitialize_Implementation(component);
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:OnPostForwardsSolve
    IntPtr OnPostForwardsSolve_NativeFunction;
    static readonly int OnPostForwardsSolve_ParamsSize;
    static readonly int OnPostForwardsSolve_Component_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnPostForwardsSolve(UnrealSharp.ControlRig.ControlRigComponent component)
    {
        unsafe
        {
            if (OnPostForwardsSolve_NativeFunction == IntPtr.Zero)
            {
                OnPostForwardsSolve_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnPostForwardsSolve");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnPostForwardsSolve_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRigComponent>.ToNative(IntPtr.Add(ParamsBuffer, OnPostForwardsSolve_Component_Offset), 0, null, component);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnPostForwardsSolve_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnPostForwardsSolve_Implementation(UnrealSharp.ControlRig.ControlRigComponent component)
    {
    }
    void Invoke_OnPostForwardsSolve(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.ControlRig.ControlRigComponent component = ObjectMarshaller<UnrealSharp.ControlRig.ControlRigComponent>.FromNative(IntPtr.Add(buffer, OnPostForwardsSolve_Component_Offset), 0, null);
            OnPostForwardsSolve_Implementation(component);
        }
    }
    
    // Function /Script/ControlRig.ControlRigComponent:OnPostConstruction
    IntPtr OnPostConstruction_NativeFunction;
    static readonly int OnPostConstruction_ParamsSize;
    static readonly int OnPostConstruction_Component_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnPostConstruction(UnrealSharp.ControlRig.ControlRigComponent component)
    {
        unsafe
        {
            if (OnPostConstruction_NativeFunction == IntPtr.Zero)
            {
                OnPostConstruction_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnPostConstruction");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnPostConstruction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRigComponent>.ToNative(IntPtr.Add(ParamsBuffer, OnPostConstruction_Component_Offset), 0, null, component);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnPostConstruction_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnPostConstruction_Implementation(UnrealSharp.ControlRig.ControlRigComponent component)
    {
    }
    void Invoke_OnPostConstruction(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.ControlRig.ControlRigComponent component = ObjectMarshaller<UnrealSharp.ControlRig.ControlRigComponent>.FromNative(IntPtr.Add(buffer, OnPostConstruction_Component_Offset), 0, null);
            OnPostConstruction_Implementation(component);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.ControlRig;

[UClass]
public partial class ControlRigControlActor : UnrealSharp.Engine.Actor
{
    
    static ControlRigControlActor()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ControlRigControlActor");
        
        ActorToTrack_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ActorToTrack");
        ControlRigClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ControlRigClass");
        bRefreshOnTick_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bRefreshOnTick");
        bIsSelectable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsSelectable");
        MaterialOverride_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaterialOverride");
        ColorParameter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ColorParameter");
        ColorParameter_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "ColorParameter");
        bCastShadows_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastShadows");
        
        ResetControlActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetControlActor");
        Refresh_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Refresh");
        Clear_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Clear");
        
        
    }
    
    protected ControlRigControlActor(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/ControlRig.ControlRigControlActor:ActorToTrack
    static readonly int ActorToTrack_Offset;
    
    public UnrealSharp.Engine.Actor ActorToTrack
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(NativeObject, ActorToTrack_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(NativeObject, ActorToTrack_Offset), 0, this, value);
        }
    }
    
    // ClassProperty /Script/ControlRig.ControlRigControlActor:ControlRigClass
    static readonly int ControlRigClass_Offset;
    
    public SubclassOf<UnrealSharp.ControlRig.ControlRig> ControlRigClass
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.ControlRig.ControlRig>.FromNative(IntPtr.Add(NativeObject, ControlRigClass_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            SubclassOfMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(NativeObject, ControlRigClass_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/ControlRig.ControlRigControlActor:bRefreshOnTick
    static readonly int bRefreshOnTick_Offset;
    
    public bool bRefreshOnTick
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bRefreshOnTick_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bRefreshOnTick_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/ControlRig.ControlRigControlActor:bIsSelectable
    static readonly int bIsSelectable_Offset;
    
    public bool bIsSelectable
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bIsSelectable_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bIsSelectable_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/ControlRig.ControlRigControlActor:MaterialOverride
    static readonly int MaterialOverride_Offset;
    
    public UnrealSharp.Engine.MaterialInterface MaterialOverride
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.FromNative(IntPtr.Add(NativeObject, MaterialOverride_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(NativeObject, MaterialOverride_Offset), 0, this, value);
        }
    }
    
    // StrProperty /Script/ControlRig.ControlRigControlActor:ColorParameter
    static readonly int ColorParameter_Offset;
    static readonly IntPtr ColorParameter_NativeProperty;
    
    public string ColorParameter
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,ColorParameter_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,ColorParameter_Offset),0,this,value);
        }
    }
    
    // BoolProperty /Script/ControlRig.ControlRigControlActor:bCastShadows
    static readonly int bCastShadows_Offset;
    
    public bool bCastShadows
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bCastShadows_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bCastShadows_Offset), 0, this, value);
        }
    }
    
    // Function /Script/ControlRig.ControlRigControlActor:ResetControlActor
    static readonly IntPtr ResetControlActor_NativeFunction;
    
    public void ResetControlActor()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetControlActor_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/ControlRig.ControlRigControlActor:Refresh
    static readonly IntPtr Refresh_NativeFunction;
    
    public void Refresh()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Refresh_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/ControlRig.ControlRigControlActor:Clear
    static readonly IntPtr Clear_NativeFunction;
    
    public void Clear()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Clear_NativeFunction, IntPtr.Zero);
        }
    }
    
    
}
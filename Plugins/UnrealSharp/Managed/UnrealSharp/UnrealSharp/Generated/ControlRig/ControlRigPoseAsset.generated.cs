// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.ControlRig;

[UClass]
public partial class ControlRigPoseAsset : UnrealSharp.CoreUObject.Object
{
    
    static ControlRigPoseAsset()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ControlRigPoseAsset");
        
        Pose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Pose");
        
        SelectControls_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SelectControls");
        SelectControls_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SelectControls_NativeFunction);
        SelectControls_InControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectControls_NativeFunction, "InControlRig");
        SelectControls_bDoMirror_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectControls_NativeFunction, "bDoMirror");
        SavePose_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SavePose");
        SavePose_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SavePose_NativeFunction);
        SavePose_InControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SavePose_NativeFunction, "InControlRig");
        SavePose_bUseAll_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SavePose_NativeFunction, "bUseAll");
        ReplaceControlName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReplaceControlName");
        ReplaceControlName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReplaceControlName_NativeFunction);
        ReplaceControlName_CurrentName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceControlName_NativeFunction, "CurrentName");
        ReplaceControlName_NewName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceControlName_NativeFunction, "NewName");
        PastePose_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PastePose");
        PastePose_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PastePose_NativeFunction);
        PastePose_InControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PastePose_NativeFunction, "InControlRig");
        PastePose_bDoKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PastePose_NativeFunction, "bDoKey");
        PastePose_bDoMirror_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PastePose_NativeFunction, "bDoMirror");
        GetCurrentPose_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentPose");
        GetCurrentPose_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentPose_NativeFunction);
        GetCurrentPose_InControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentPose_NativeFunction, "InControlRig");
        GetCurrentPose_OutPose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentPose_NativeFunction, "OutPose");
        GetControlNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlNames");
        GetControlNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlNames_NativeFunction);
        GetControlNames_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlNames_NativeFunction, "ReturnValue");
        GetControlNames_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetControlNames_NativeFunction, "ReturnValue");
        DoesMirrorMatch_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DoesMirrorMatch");
        DoesMirrorMatch_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DoesMirrorMatch_NativeFunction);
        DoesMirrorMatch_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesMirrorMatch_NativeFunction, "ControlRig");
        DoesMirrorMatch_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesMirrorMatch_NativeFunction, "ControlName");
        DoesMirrorMatch_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesMirrorMatch_NativeFunction, "ReturnValue");
        
        
    }
    
    protected ControlRigPoseAsset(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/ControlRig.ControlRigPoseAsset:Pose
    static readonly int Pose_Offset;
    
    public UnrealSharp.ControlRig.ControlRigControlPose Pose
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.ControlRig.ControlRigControlPoseMarshaler.FromNative(IntPtr.Add(NativeObject, Pose_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.ControlRig.ControlRigControlPoseMarshaler.ToNative(IntPtr.Add(NativeObject, Pose_Offset), 0, this, value);
        }
    }
    
    // Function /Script/ControlRig.ControlRigPoseAsset:SelectControls
    static readonly IntPtr SelectControls_NativeFunction;
    static readonly int SelectControls_ParamsSize;
    static readonly int SelectControls_InControlRig_Offset;
    static readonly int SelectControls_bDoMirror_Offset;
    
    public void SelectControls(UnrealSharp.ControlRig.ControlRig inControlRig, bool bDoMirror = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SelectControls_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SelectControls_InControlRig_Offset), 0, null, inControlRig);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SelectControls_bDoMirror_Offset), 0, null, bDoMirror);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SelectControls_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigPoseAsset:SavePose
    static readonly IntPtr SavePose_NativeFunction;
    static readonly int SavePose_ParamsSize;
    static readonly int SavePose_InControlRig_Offset;
    static readonly int SavePose_bUseAll_Offset;
    
    public void SavePose(UnrealSharp.ControlRig.ControlRig inControlRig, bool bUseAll)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SavePose_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SavePose_InControlRig_Offset), 0, null, inControlRig);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SavePose_bUseAll_Offset), 0, null, bUseAll);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SavePose_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigPoseAsset:ReplaceControlName
    static readonly IntPtr ReplaceControlName_NativeFunction;
    static readonly int ReplaceControlName_ParamsSize;
    static readonly int ReplaceControlName_CurrentName_Offset;
    static readonly int ReplaceControlName_NewName_Offset;
    
    public void ReplaceControlName(Name currentName, Name newName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReplaceControlName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReplaceControlName_CurrentName_Offset), 0, null, currentName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReplaceControlName_NewName_Offset), 0, null, newName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReplaceControlName_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigPoseAsset:PastePose
    static readonly IntPtr PastePose_NativeFunction;
    static readonly int PastePose_ParamsSize;
    static readonly int PastePose_InControlRig_Offset;
    static readonly int PastePose_bDoKey_Offset;
    static readonly int PastePose_bDoMirror_Offset;
    
    public void PastePose(UnrealSharp.ControlRig.ControlRig inControlRig, bool bDoKey = false, bool bDoMirror = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PastePose_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, PastePose_InControlRig_Offset), 0, null, inControlRig);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, PastePose_bDoKey_Offset), 0, null, bDoKey);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, PastePose_bDoMirror_Offset), 0, null, bDoMirror);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PastePose_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigPoseAsset:GetCurrentPose
    static readonly IntPtr GetCurrentPose_NativeFunction;
    static readonly int GetCurrentPose_ParamsSize;
    static readonly int GetCurrentPose_InControlRig_Offset;
    static readonly int GetCurrentPose_OutPose_Offset;
    
    public void GetCurrentPose(UnrealSharp.ControlRig.ControlRig inControlRig, out UnrealSharp.ControlRig.ControlRigControlPose outPose)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentPose_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetCurrentPose_InControlRig_Offset), 0, null, inControlRig);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurrentPose_NativeFunction, ParamsBuffer);
            
            outPose = UnrealSharp.ControlRig.ControlRigControlPoseMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentPose_OutPose_Offset), 0, null);
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigPoseAsset:GetControlNames
    static readonly IntPtr GetControlNames_NativeFunction;
    static readonly int GetControlNames_ParamsSize;
    static readonly int GetControlNames_ReturnValue_Offset;
    static readonly int GetControlNames_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<Name> GetControlNames()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlNames_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<Name> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetControlNames_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<Name> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetControlNames_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigPoseAsset:DoesMirrorMatch
    static readonly IntPtr DoesMirrorMatch_NativeFunction;
    static readonly int DoesMirrorMatch_ParamsSize;
    static readonly int DoesMirrorMatch_ControlRig_Offset;
    static readonly int DoesMirrorMatch_ControlName_Offset;
    static readonly int DoesMirrorMatch_ReturnValue_Offset;
    
    public bool DoesMirrorMatch(UnrealSharp.ControlRig.ControlRig controlRig, Name controlName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DoesMirrorMatch_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, DoesMirrorMatch_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, DoesMirrorMatch_ControlName_Offset), 0, null, controlName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DoesMirrorMatch_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DoesMirrorMatch_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
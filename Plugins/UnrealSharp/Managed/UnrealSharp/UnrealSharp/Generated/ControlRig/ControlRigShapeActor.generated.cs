// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.ControlRig;

[UClass]
public partial class ControlRigShapeActor : UnrealSharp.Engine.Actor
{
    
    static ControlRigShapeActor()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ControlRigShapeActor");
        
        StaticMeshComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StaticMeshComponent");
        bSelected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSelected");
        bSelected_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bSelected");
        bHovered_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bHovered");
        bHovered_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bHovered");
        
        SetGlobalTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGlobalTransform");
        SetGlobalTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGlobalTransform_NativeFunction);
        SetGlobalTransform_InTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalTransform_NativeFunction, "InTransform");
        GetGlobalTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGlobalTransform");
        GetGlobalTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGlobalTransform_NativeFunction);
        GetGlobalTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGlobalTransform_NativeFunction, "ReturnValue");
        
        IntPtr OnTransformChanged_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnTransformChanged");
        OnTransformChanged_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnTransformChanged_NativeFunction);
        OnTransformChanged_NewTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnTransformChanged_NativeFunction, "NewTransform");
        
        IntPtr OnSelectionChanged_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnSelectionChanged");
        OnSelectionChanged_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnSelectionChanged_NativeFunction);
        OnSelectionChanged_bIsSelected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnSelectionChanged_NativeFunction, "bIsSelected");
        
        IntPtr OnManipulatingChanged_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnManipulatingChanged");
        OnManipulatingChanged_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnManipulatingChanged_NativeFunction);
        OnManipulatingChanged_bIsManipulating_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnManipulatingChanged_NativeFunction, "bIsManipulating");
        
        IntPtr OnHoveredChanged_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnHoveredChanged");
        OnHoveredChanged_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnHoveredChanged_NativeFunction);
        OnHoveredChanged_bIsSelected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnHoveredChanged_NativeFunction, "bIsSelected");
        
        IntPtr OnEnabledChanged_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnEnabledChanged");
        OnEnabledChanged_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnEnabledChanged_NativeFunction);
        OnEnabledChanged_bIsEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnEnabledChanged_NativeFunction, "bIsEnabled");
        
        
    }
    
    protected ControlRigShapeActor(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/ControlRig.ControlRigShapeActor:StaticMeshComponent
    static readonly int StaticMeshComponent_Offset;
    
    public UnrealSharp.Engine.StaticMeshComponent StaticMeshComponent
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.StaticMeshComponent>.FromNative(IntPtr.Add(NativeObject, StaticMeshComponent_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/ControlRig.ControlRigShapeActor:bSelected
    static readonly int bSelected_Offset;
    static readonly IntPtr bSelected_NativeProperty;
    
    public bool bSelected
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bSelected_NativeProperty, bSelected_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bSelected_NativeProperty, bSelected_Offset, value);
        }
    }
    
    // BoolProperty /Script/ControlRig.ControlRigShapeActor:bHovered
    static readonly int bHovered_Offset;
    static readonly IntPtr bHovered_NativeProperty;
    
    public bool bHovered
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bHovered_NativeProperty, bHovered_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bHovered_NativeProperty, bHovered_Offset, value);
        }
    }
    
    // Function /Script/ControlRig.ControlRigShapeActor:SetGlobalTransform
    static readonly IntPtr SetGlobalTransform_NativeFunction;
    static readonly int SetGlobalTransform_ParamsSize;
    static readonly int SetGlobalTransform_InTransform_Offset;
    
    public void SetGlobalTransform(UnrealSharp.Transform inTransform)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGlobalTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalTransform_InTransform_Offset), 0, null, inTransform);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetGlobalTransform_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/ControlRig.ControlRigShapeActor:GetGlobalTransform
    static readonly IntPtr GetGlobalTransform_NativeFunction;
    static readonly int GetGlobalTransform_ParamsSize;
    static readonly int GetGlobalTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetGlobalTransform()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGlobalTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetGlobalTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetGlobalTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigShapeActor:OnTransformChanged
    IntPtr OnTransformChanged_NativeFunction;
    static readonly int OnTransformChanged_ParamsSize;
    static readonly int OnTransformChanged_NewTransform_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnTransformChanged(UnrealSharp.Transform newTransform)
    {
        unsafe
        {
            if (OnTransformChanged_NativeFunction == IntPtr.Zero)
            {
                OnTransformChanged_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnTransformChanged");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnTransformChanged_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, OnTransformChanged_NewTransform_Offset), 0, null, newTransform);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnTransformChanged_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnTransformChanged_Implementation(UnrealSharp.Transform newTransform)
    {
    }
    void Invoke_OnTransformChanged(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Transform newTransform = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(buffer, OnTransformChanged_NewTransform_Offset), 0, null);
            OnTransformChanged_Implementation(newTransform);
        }
    }
    
    // Function /Script/ControlRig.ControlRigShapeActor:OnSelectionChanged
    IntPtr OnSelectionChanged_NativeFunction;
    static readonly int OnSelectionChanged_ParamsSize;
    static readonly int OnSelectionChanged_bIsSelected_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnSelectionChanged(bool bIsSelected)
    {
        unsafe
        {
            if (OnSelectionChanged_NativeFunction == IntPtr.Zero)
            {
                OnSelectionChanged_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnSelectionChanged");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnSelectionChanged_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, OnSelectionChanged_bIsSelected_Offset), 0, null, bIsSelected);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnSelectionChanged_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnSelectionChanged_Implementation(bool bIsSelected)
    {
    }
    void Invoke_OnSelectionChanged(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            bool bIsSelected = BoolMarshaller.FromNative(IntPtr.Add(buffer, OnSelectionChanged_bIsSelected_Offset), 0, null);
            OnSelectionChanged_Implementation(bIsSelected);
        }
    }
    
    // Function /Script/ControlRig.ControlRigShapeActor:OnManipulatingChanged
    IntPtr OnManipulatingChanged_NativeFunction;
    static readonly int OnManipulatingChanged_ParamsSize;
    static readonly int OnManipulatingChanged_bIsManipulating_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnManipulatingChanged(bool bIsManipulating)
    {
        unsafe
        {
            if (OnManipulatingChanged_NativeFunction == IntPtr.Zero)
            {
                OnManipulatingChanged_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnManipulatingChanged");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnManipulatingChanged_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, OnManipulatingChanged_bIsManipulating_Offset), 0, null, bIsManipulating);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnManipulatingChanged_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnManipulatingChanged_Implementation(bool bIsManipulating)
    {
    }
    void Invoke_OnManipulatingChanged(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            bool bIsManipulating = BoolMarshaller.FromNative(IntPtr.Add(buffer, OnManipulatingChanged_bIsManipulating_Offset), 0, null);
            OnManipulatingChanged_Implementation(bIsManipulating);
        }
    }
    
    // Function /Script/ControlRig.ControlRigShapeActor:OnHoveredChanged
    IntPtr OnHoveredChanged_NativeFunction;
    static readonly int OnHoveredChanged_ParamsSize;
    static readonly int OnHoveredChanged_bIsSelected_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnHoveredChanged(bool bIsSelected)
    {
        unsafe
        {
            if (OnHoveredChanged_NativeFunction == IntPtr.Zero)
            {
                OnHoveredChanged_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnHoveredChanged");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnHoveredChanged_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, OnHoveredChanged_bIsSelected_Offset), 0, null, bIsSelected);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnHoveredChanged_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnHoveredChanged_Implementation(bool bIsSelected)
    {
    }
    void Invoke_OnHoveredChanged(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            bool bIsSelected = BoolMarshaller.FromNative(IntPtr.Add(buffer, OnHoveredChanged_bIsSelected_Offset), 0, null);
            OnHoveredChanged_Implementation(bIsSelected);
        }
    }
    
    // Function /Script/ControlRig.ControlRigShapeActor:OnEnabledChanged
    IntPtr OnEnabledChanged_NativeFunction;
    static readonly int OnEnabledChanged_ParamsSize;
    static readonly int OnEnabledChanged_bIsEnabled_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnEnabledChanged(bool bIsEnabled)
    {
        unsafe
        {
            if (OnEnabledChanged_NativeFunction == IntPtr.Zero)
            {
                OnEnabledChanged_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnEnabledChanged");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnEnabledChanged_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, OnEnabledChanged_bIsEnabled_Offset), 0, null, bIsEnabled);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnEnabledChanged_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnEnabledChanged_Implementation(bool bIsEnabled)
    {
    }
    void Invoke_OnEnabledChanged(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            bool bIsEnabled = BoolMarshaller.FromNative(IntPtr.Add(buffer, OnEnabledChanged_bIsEnabled_Offset), 0, null);
            OnEnabledChanged_Implementation(bIsEnabled);
        }
    }
    
    
}
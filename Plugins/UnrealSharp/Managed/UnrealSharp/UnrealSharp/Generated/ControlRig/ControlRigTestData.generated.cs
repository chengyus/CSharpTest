// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.ControlRig;

[UClass]
public partial class ControlRigTestData : UnrealSharp.CoreUObject.Object
{
    
    static readonly IntPtr NativeClassPtr;
    static ControlRigTestData()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ControlRigTestData");
        
        ControlRigObjectPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ControlRigObjectPath");
        Initial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Initial");
        InputFrames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InputFrames");
        InputFrames_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "InputFrames");
        OutputFrames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OutputFrames");
        OutputFrames_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "OutputFrames");
        FramesToSkip_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FramesToSkip");
        FramesToSkip_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "FramesToSkip");
        Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Tolerance");
        
        SetupReplay_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetupReplay");
        SetupReplay_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetupReplay_NativeFunction);
        SetupReplay_InControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetupReplay_NativeFunction, "InControlRig");
        SetupReplay_bGroundTruth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetupReplay_NativeFunction, "bGroundTruth");
        SetupReplay_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetupReplay_NativeFunction, "ReturnValue");
        ReleaseReplay_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReleaseReplay");
        Record_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Record");
        Record_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Record_NativeFunction);
        Record_InControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Record_NativeFunction, "InControlRig");
        Record_InRecordingDuration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Record_NativeFunction, "InRecordingDuration");
        Record_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Record_NativeFunction, "ReturnValue");
        IsReplaying_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsReplaying");
        IsReplaying_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsReplaying_NativeFunction);
        IsReplaying_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsReplaying_NativeFunction, "ReturnValue");
        IsRecording_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsRecording");
        IsRecording_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsRecording_NativeFunction);
        IsRecording_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsRecording_NativeFunction, "ReturnValue");
        GetTimeRange_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTimeRange");
        GetTimeRange_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTimeRange_NativeFunction);
        GetTimeRange_bInput_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTimeRange_NativeFunction, "bInput");
        GetTimeRange_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTimeRange_NativeFunction, "ReturnValue");
        GetPlaybackMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlaybackMode");
        GetPlaybackMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlaybackMode_NativeFunction);
        GetPlaybackMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlaybackMode_NativeFunction, "ReturnValue");
        GetFrameIndexForTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFrameIndexForTime");
        GetFrameIndexForTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFrameIndexForTime_NativeFunction);
        GetFrameIndexForTime_InSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFrameIndexForTime_NativeFunction, "InSeconds");
        GetFrameIndexForTime_bInput_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFrameIndexForTime_NativeFunction, "bInput");
        GetFrameIndexForTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFrameIndexForTime_NativeFunction, "ReturnValue");
        CreateNewAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateNewAsset");
        CreateNewAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateNewAsset_NativeFunction);
        CreateNewAsset_InDesiredPackagePath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateNewAsset_NativeFunction, "InDesiredPackagePath");
        CreateNewAsset_InBlueprintPathName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateNewAsset_NativeFunction, "InBlueprintPathName");
        CreateNewAsset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateNewAsset_NativeFunction, "ReturnValue");
        
        
    }
    
    protected ControlRigTestData(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/ControlRig.ControlRigTestData:ControlRigObjectPath
    static readonly int ControlRigObjectPath_Offset;
    
    public UnrealSharp.CoreUObject.SoftObjectPath ControlRigObjectPath
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.CoreUObject.SoftObjectPathMarshaler.FromNative(IntPtr.Add(NativeObject, ControlRigObjectPath_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/ControlRig.ControlRigTestData:Initial
    static readonly int Initial_Offset;
    
    public UnrealSharp.ControlRig.ControlRigTestDataFrame Initial
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.ControlRig.ControlRigTestDataFrameMarshaler.FromNative(IntPtr.Add(NativeObject, Initial_Offset), 0, this);
        }
    }
    
    // ArrayProperty /Script/ControlRig.ControlRigTestData:InputFrames
    static readonly int InputFrames_Offset;
    static readonly IntPtr InputFrames_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.ControlRig.ControlRigTestDataFrame> InputFrames_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.ControlRig.ControlRigTestDataFrame> InputFrames
    {
        get
        {
            if(InputFrames_Wrapper == null)
            {
                InputFrames_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.ControlRig.ControlRigTestDataFrame>(1, InputFrames_NativeProperty, UnrealSharp.ControlRig.ControlRigTestDataFrameMarshaler.ToNative, UnrealSharp.ControlRig.ControlRigTestDataFrameMarshaler.FromNative);
            }
            
            return InputFrames_Wrapper.FromNative(IntPtr.Add(NativeObject,InputFrames_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/ControlRig.ControlRigTestData:OutputFrames
    static readonly int OutputFrames_Offset;
    static readonly IntPtr OutputFrames_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.ControlRig.ControlRigTestDataFrame> OutputFrames_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.ControlRig.ControlRigTestDataFrame> OutputFrames
    {
        get
        {
            if(OutputFrames_Wrapper == null)
            {
                OutputFrames_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.ControlRig.ControlRigTestDataFrame>(1, OutputFrames_NativeProperty, UnrealSharp.ControlRig.ControlRigTestDataFrameMarshaler.ToNative, UnrealSharp.ControlRig.ControlRigTestDataFrameMarshaler.FromNative);
            }
            
            return OutputFrames_Wrapper.FromNative(IntPtr.Add(NativeObject,OutputFrames_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/ControlRig.ControlRigTestData:FramesToSkip
    static readonly int FramesToSkip_Offset;
    static readonly IntPtr FramesToSkip_NativeProperty;
    UnrealArrayReadOnlyMarshaler<int> FramesToSkip_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<int> FramesToSkip
    {
        get
        {
            if(FramesToSkip_Wrapper == null)
            {
                FramesToSkip_Wrapper = new UnrealArrayReadOnlyMarshaler<int>(1, FramesToSkip_NativeProperty, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative);
            }
            
            return FramesToSkip_Wrapper.FromNative(IntPtr.Add(NativeObject,FramesToSkip_Offset),0,this);
        }
    }
    
    // DoubleProperty /Script/ControlRig.ControlRigTestData:Tolerance
    static readonly int Tolerance_Offset;
    
    public double Tolerance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<double>.FromNative(IntPtr.Add(NativeObject, Tolerance_Offset), 0, this);
        }
    }
    
    // Function /Script/ControlRig.ControlRigTestData:SetupReplay
    static readonly IntPtr SetupReplay_NativeFunction;
    static readonly int SetupReplay_ParamsSize;
    static readonly int SetupReplay_InControlRig_Offset;
    static readonly int SetupReplay_bGroundTruth_Offset;
    static readonly int SetupReplay_ReturnValue_Offset;
    
    public bool SetupReplay(UnrealSharp.ControlRig.ControlRig inControlRig, bool bGroundTruth = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetupReplay_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetupReplay_InControlRig_Offset), 0, null, inControlRig);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetupReplay_bGroundTruth_Offset), 0, null, bGroundTruth);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetupReplay_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetupReplay_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigTestData:ReleaseReplay
    static readonly IntPtr ReleaseReplay_NativeFunction;
    
    public void ReleaseReplay()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReleaseReplay_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/ControlRig.ControlRigTestData:Record
    static readonly IntPtr Record_NativeFunction;
    static readonly int Record_ParamsSize;
    static readonly int Record_InControlRig_Offset;
    static readonly int Record_InRecordingDuration_Offset;
    static readonly int Record_ReturnValue_Offset;
    
    public bool Record(UnrealSharp.ControlRig.ControlRig inControlRig, double inRecordingDuration = 0.000000)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Record_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, Record_InControlRig_Offset), 0, null, inControlRig);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Record_InRecordingDuration_Offset), 0, null, inRecordingDuration);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Record_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Record_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigTestData:IsReplaying
    static readonly IntPtr IsReplaying_NativeFunction;
    static readonly int IsReplaying_ParamsSize;
    static readonly int IsReplaying_ReturnValue_Offset;
    
    public bool IsReplaying()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsReplaying_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsReplaying_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsReplaying_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigTestData:IsRecording
    static readonly IntPtr IsRecording_NativeFunction;
    static readonly int IsRecording_ParamsSize;
    static readonly int IsRecording_ReturnValue_Offset;
    
    public bool IsRecording()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsRecording_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsRecording_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsRecording_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigTestData:GetTimeRange
    static readonly IntPtr GetTimeRange_NativeFunction;
    static readonly int GetTimeRange_ParamsSize;
    static readonly int GetTimeRange_bInput_Offset;
    static readonly int GetTimeRange_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector2 GetTimeRange(bool bInput = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTimeRange_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetTimeRange_bInput_Offset), 0, null, bInput);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTimeRange_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, GetTimeRange_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigTestData:GetPlaybackMode
    static readonly IntPtr GetPlaybackMode_NativeFunction;
    static readonly int GetPlaybackMode_ParamsSize;
    static readonly int GetPlaybackMode_ReturnValue_Offset;
    
    public UnrealSharp.ControlRig.EControlRigTestDataPlaybackMode GetPlaybackMode()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlaybackMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPlaybackMode_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.EControlRigTestDataPlaybackMode returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.ControlRig.EControlRigTestDataPlaybackMode>.FromNative(IntPtr.Add(ParamsBuffer, GetPlaybackMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigTestData:GetFrameIndexForTime
    static readonly IntPtr GetFrameIndexForTime_NativeFunction;
    static readonly int GetFrameIndexForTime_ParamsSize;
    static readonly int GetFrameIndexForTime_InSeconds_Offset;
    static readonly int GetFrameIndexForTime_bInput_Offset;
    static readonly int GetFrameIndexForTime_ReturnValue_Offset;
    
    public int GetFrameIndexForTime(double inSeconds, bool bInput = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFrameIndexForTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, GetFrameIndexForTime_InSeconds_Offset), 0, null, inSeconds);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetFrameIndexForTime_bInput_Offset), 0, null, bInput);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFrameIndexForTime_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetFrameIndexForTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.ControlRigTestData:CreateNewAsset
    static readonly IntPtr CreateNewAsset_NativeFunction;
    static readonly int CreateNewAsset_ParamsSize;
    static readonly int CreateNewAsset_InDesiredPackagePath_Offset;
    static readonly int CreateNewAsset_InBlueprintPathName_Offset;
    static readonly int CreateNewAsset_ReturnValue_Offset;
    
    public static UnrealSharp.ControlRig.ControlRigTestData CreateNewAsset(string inDesiredPackagePath, string inBlueprintPathName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateNewAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InDesiredPackagePath_NativePtr = IntPtr.Add(ParamsBuffer,CreateNewAsset_InDesiredPackagePath_Offset);
            StringMarshaller.ToNative(InDesiredPackagePath_NativePtr,0,null,inDesiredPackagePath);
            IntPtr InBlueprintPathName_NativePtr = IntPtr.Add(ParamsBuffer,CreateNewAsset_InBlueprintPathName_Offset);
            StringMarshaller.ToNative(InBlueprintPathName_NativePtr,0,null,inBlueprintPathName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateNewAsset_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.ControlRigTestData returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.ControlRig.ControlRigTestData>.FromNative(IntPtr.Add(ParamsBuffer, CreateNewAsset_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InDesiredPackagePath_NativePtr, 0);
            StringMarshaller.DestructInstance(InBlueprintPathName_NativePtr, 0);
            return returnValue;
        }
    }
    
    
}
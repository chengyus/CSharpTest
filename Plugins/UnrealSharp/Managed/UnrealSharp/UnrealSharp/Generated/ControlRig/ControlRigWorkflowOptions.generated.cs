// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.ControlRig;

[UClass]
public partial class ControlRigWorkflowOptions : UnrealSharp.RigVM.RigVMUserWorkflowOptions
{
    
    static ControlRigWorkflowOptions()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ControlRigWorkflowOptions");
        
        Hierarchy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Hierarchy");
        Selection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Selection");
        Selection_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Selection");
        
        EnsureAtLeastOneRigElementSelected_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EnsureAtLeastOneRigElementSelected");
        EnsureAtLeastOneRigElementSelected_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EnsureAtLeastOneRigElementSelected_NativeFunction);
        EnsureAtLeastOneRigElementSelected_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EnsureAtLeastOneRigElementSelected_NativeFunction, "ReturnValue");
        
        
    }
    
    protected ControlRigWorkflowOptions(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/ControlRig.ControlRigWorkflowOptions:Hierarchy
    static readonly int Hierarchy_Offset;
    
    public UnrealSharp.ControlRig.RigHierarchy Hierarchy
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.ControlRig.RigHierarchy>.FromNative(IntPtr.Add(NativeObject, Hierarchy_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.ControlRig.RigHierarchy>.ToNative(IntPtr.Add(NativeObject, Hierarchy_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/ControlRig.ControlRigWorkflowOptions:Selection
    static readonly int Selection_Offset;
    static readonly IntPtr Selection_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.ControlRig.RigElementKey> Selection_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> Selection
    {
        get
        {
            if(Selection_Wrapper == null)
            {
                Selection_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.ControlRig.RigElementKey>(1, Selection_NativeProperty, UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative, UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative);
            }
            
            return Selection_Wrapper.FromNative(IntPtr.Add(NativeObject,Selection_Offset),0,this);
        }
    }
    
    // Function /Script/ControlRig.ControlRigWorkflowOptions:EnsureAtLeastOneRigElementSelected
    static readonly IntPtr EnsureAtLeastOneRigElementSelected_NativeFunction;
    static readonly int EnsureAtLeastOneRigElementSelected_ParamsSize;
    static readonly int EnsureAtLeastOneRigElementSelected_ReturnValue_Offset;
    
    public bool EnsureAtLeastOneRigElementSelected()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EnsureAtLeastOneRigElementSelected_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, EnsureAtLeastOneRigElementSelected_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EnsureAtLeastOneRigElementSelected_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
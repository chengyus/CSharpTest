// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.ControlRig;

[UClass]
public partial class RigHierarchy : UnrealSharp.CoreUObject.Object
{
    
    static readonly IntPtr NativeClassPtr;
    static RigHierarchy()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("RigHierarchy");
        
        
        UnsetCurveValueByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UnsetCurveValueByIndex");
        UnsetCurveValueByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UnsetCurveValueByIndex_NativeFunction);
        UnsetCurveValueByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnsetCurveValueByIndex_NativeFunction, "InElementIndex");
        UnsetCurveValueByIndex_bSetupUndo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnsetCurveValueByIndex_NativeFunction, "bSetupUndo");
        UnsetCurveValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UnsetCurveValue");
        UnsetCurveValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UnsetCurveValue_NativeFunction);
        UnsetCurveValue_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnsetCurveValue_NativeFunction, "InKey");
        UnsetCurveValue_bSetupUndo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnsetCurveValue_NativeFunction, "bSetupUndo");
        SwitchToWorldSpace_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SwitchToWorldSpace");
        SwitchToWorldSpace_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SwitchToWorldSpace_NativeFunction);
        SwitchToWorldSpace_InChild_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SwitchToWorldSpace_NativeFunction, "InChild");
        SwitchToWorldSpace_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SwitchToWorldSpace_NativeFunction, "bInitial");
        SwitchToWorldSpace_bAffectChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SwitchToWorldSpace_NativeFunction, "bAffectChildren");
        SwitchToWorldSpace_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SwitchToWorldSpace_NativeFunction, "ReturnValue");
        SwitchToParent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SwitchToParent");
        SwitchToParent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SwitchToParent_NativeFunction);
        SwitchToParent_InChild_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SwitchToParent_NativeFunction, "InChild");
        SwitchToParent_InParent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SwitchToParent_NativeFunction, "InParent");
        SwitchToParent_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SwitchToParent_NativeFunction, "bInitial");
        SwitchToParent_bAffectChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SwitchToParent_NativeFunction, "bAffectChildren");
        SwitchToParent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SwitchToParent_NativeFunction, "ReturnValue");
        SwitchToDefaultParent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SwitchToDefaultParent");
        SwitchToDefaultParent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SwitchToDefaultParent_NativeFunction);
        SwitchToDefaultParent_InChild_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SwitchToDefaultParent_NativeFunction, "InChild");
        SwitchToDefaultParent_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SwitchToDefaultParent_NativeFunction, "bInitial");
        SwitchToDefaultParent_bAffectChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SwitchToDefaultParent_NativeFunction, "bAffectChildren");
        SwitchToDefaultParent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SwitchToDefaultParent_NativeFunction, "ReturnValue");
        SortKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SortKeys");
        SortKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SortKeys_NativeFunction);
        SortKeys_InKeys_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SortKeys_NativeFunction, "InKeys");
        SortKeys_InKeys_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SortKeys_NativeFunction, "InKeys");
        SortKeys_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SortKeys_NativeFunction, "ReturnValue");
        SortKeys_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SortKeys_NativeFunction, "ReturnValue");
        SetVectorMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVectorMetadata");
        SetVectorMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVectorMetadata_NativeFunction);
        SetVectorMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVectorMetadata_NativeFunction, "InItem");
        SetVectorMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVectorMetadata_NativeFunction, "InMetadataName");
        SetVectorMetadata_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVectorMetadata_NativeFunction, "InValue");
        SetVectorMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVectorMetadata_NativeFunction, "ReturnValue");
        SetVectorArrayMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVectorArrayMetadata");
        SetVectorArrayMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVectorArrayMetadata_NativeFunction);
        SetVectorArrayMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVectorArrayMetadata_NativeFunction, "InItem");
        SetVectorArrayMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVectorArrayMetadata_NativeFunction, "InMetadataName");
        SetVectorArrayMetadata_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVectorArrayMetadata_NativeFunction, "InValue");
        SetVectorArrayMetadata_InValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetVectorArrayMetadata_NativeFunction, "InValue");
        SetVectorArrayMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVectorArrayMetadata_NativeFunction, "ReturnValue");
        SetTransformMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTransformMetadata");
        SetTransformMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTransformMetadata_NativeFunction);
        SetTransformMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTransformMetadata_NativeFunction, "InItem");
        SetTransformMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTransformMetadata_NativeFunction, "InMetadataName");
        SetTransformMetadata_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTransformMetadata_NativeFunction, "InValue");
        SetTransformMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTransformMetadata_NativeFunction, "ReturnValue");
        SetTransformArrayMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTransformArrayMetadata");
        SetTransformArrayMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTransformArrayMetadata_NativeFunction);
        SetTransformArrayMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTransformArrayMetadata_NativeFunction, "InItem");
        SetTransformArrayMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTransformArrayMetadata_NativeFunction, "InMetadataName");
        SetTransformArrayMetadata_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTransformArrayMetadata_NativeFunction, "InValue");
        SetTransformArrayMetadata_InValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetTransformArrayMetadata_NativeFunction, "InValue");
        SetTransformArrayMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTransformArrayMetadata_NativeFunction, "ReturnValue");
        SetTag_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTag");
        SetTag_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTag_NativeFunction);
        SetTag_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTag_NativeFunction, "InItem");
        SetTag_InTag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTag_NativeFunction, "InTag");
        SetTag_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTag_NativeFunction, "ReturnValue");
        SetRotatorMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRotatorMetadata");
        SetRotatorMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRotatorMetadata_NativeFunction);
        SetRotatorMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRotatorMetadata_NativeFunction, "InItem");
        SetRotatorMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRotatorMetadata_NativeFunction, "InMetadataName");
        SetRotatorMetadata_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRotatorMetadata_NativeFunction, "InValue");
        SetRotatorMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRotatorMetadata_NativeFunction, "ReturnValue");
        SetRotatorArrayMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRotatorArrayMetadata");
        SetRotatorArrayMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRotatorArrayMetadata_NativeFunction);
        SetRotatorArrayMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRotatorArrayMetadata_NativeFunction, "InItem");
        SetRotatorArrayMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRotatorArrayMetadata_NativeFunction, "InMetadataName");
        SetRotatorArrayMetadata_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRotatorArrayMetadata_NativeFunction, "InValue");
        SetRotatorArrayMetadata_InValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetRotatorArrayMetadata_NativeFunction, "InValue");
        SetRotatorArrayMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRotatorArrayMetadata_NativeFunction, "ReturnValue");
        SetRigElementKeyMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRigElementKeyMetadata");
        SetRigElementKeyMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRigElementKeyMetadata_NativeFunction);
        SetRigElementKeyMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRigElementKeyMetadata_NativeFunction, "InItem");
        SetRigElementKeyMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRigElementKeyMetadata_NativeFunction, "InMetadataName");
        SetRigElementKeyMetadata_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRigElementKeyMetadata_NativeFunction, "InValue");
        SetRigElementKeyMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRigElementKeyMetadata_NativeFunction, "ReturnValue");
        SetRigElementKeyArrayMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRigElementKeyArrayMetadata");
        SetRigElementKeyArrayMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRigElementKeyArrayMetadata_NativeFunction);
        SetRigElementKeyArrayMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRigElementKeyArrayMetadata_NativeFunction, "InItem");
        SetRigElementKeyArrayMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRigElementKeyArrayMetadata_NativeFunction, "InMetadataName");
        SetRigElementKeyArrayMetadata_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRigElementKeyArrayMetadata_NativeFunction, "InValue");
        SetRigElementKeyArrayMetadata_InValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetRigElementKeyArrayMetadata_NativeFunction, "InValue");
        SetRigElementKeyArrayMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRigElementKeyArrayMetadata_NativeFunction, "ReturnValue");
        SetQuatMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetQuatMetadata");
        SetQuatMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetQuatMetadata_NativeFunction);
        SetQuatMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetQuatMetadata_NativeFunction, "InItem");
        SetQuatMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetQuatMetadata_NativeFunction, "InMetadataName");
        SetQuatMetadata_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetQuatMetadata_NativeFunction, "InValue");
        SetQuatMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetQuatMetadata_NativeFunction, "ReturnValue");
        SetQuatArrayMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetQuatArrayMetadata");
        SetQuatArrayMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetQuatArrayMetadata_NativeFunction);
        SetQuatArrayMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetQuatArrayMetadata_NativeFunction, "InItem");
        SetQuatArrayMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetQuatArrayMetadata_NativeFunction, "InMetadataName");
        SetQuatArrayMetadata_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetQuatArrayMetadata_NativeFunction, "InValue");
        SetQuatArrayMetadata_InValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetQuatArrayMetadata_NativeFunction, "InValue");
        SetQuatArrayMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetQuatArrayMetadata_NativeFunction, "ReturnValue");
        SetPose_ForBlueprint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPose_ForBlueprint");
        SetPose_ForBlueprint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPose_ForBlueprint_NativeFunction);
        SetPose_ForBlueprint_InPose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPose_ForBlueprint_NativeFunction, "InPose");
        SetParentWeightArray_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetParentWeightArray");
        SetParentWeightArray_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetParentWeightArray_NativeFunction);
        SetParentWeightArray_InChild_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetParentWeightArray_NativeFunction, "InChild");
        SetParentWeightArray_InWeights_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetParentWeightArray_NativeFunction, "InWeights");
        SetParentWeightArray_InWeights_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetParentWeightArray_NativeFunction, "InWeights");
        SetParentWeightArray_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetParentWeightArray_NativeFunction, "bInitial");
        SetParentWeightArray_bAffectChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetParentWeightArray_NativeFunction, "bAffectChildren");
        SetParentWeightArray_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetParentWeightArray_NativeFunction, "ReturnValue");
        SetParentWeight_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetParentWeight");
        SetParentWeight_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetParentWeight_NativeFunction);
        SetParentWeight_InChild_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetParentWeight_NativeFunction, "InChild");
        SetParentWeight_InParent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetParentWeight_NativeFunction, "InParent");
        SetParentWeight_InWeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetParentWeight_NativeFunction, "InWeight");
        SetParentWeight_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetParentWeight_NativeFunction, "bInitial");
        SetParentWeight_bAffectChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetParentWeight_NativeFunction, "bAffectChildren");
        SetParentWeight_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetParentWeight_NativeFunction, "ReturnValue");
        SetNameMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNameMetadata");
        SetNameMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNameMetadata_NativeFunction);
        SetNameMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNameMetadata_NativeFunction, "InItem");
        SetNameMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNameMetadata_NativeFunction, "InMetadataName");
        SetNameMetadata_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNameMetadata_NativeFunction, "InValue");
        SetNameMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNameMetadata_NativeFunction, "ReturnValue");
        SetNameArrayMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNameArrayMetadata");
        SetNameArrayMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNameArrayMetadata_NativeFunction);
        SetNameArrayMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNameArrayMetadata_NativeFunction, "InItem");
        SetNameArrayMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNameArrayMetadata_NativeFunction, "InMetadataName");
        SetNameArrayMetadata_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNameArrayMetadata_NativeFunction, "InValue");
        SetNameArrayMetadata_InValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetNameArrayMetadata_NativeFunction, "InValue");
        SetNameArrayMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNameArrayMetadata_NativeFunction, "ReturnValue");
        SetLocalTransformByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalTransformByIndex");
        SetLocalTransformByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalTransformByIndex_NativeFunction);
        SetLocalTransformByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalTransformByIndex_NativeFunction, "InElementIndex");
        SetLocalTransformByIndex_InTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalTransformByIndex_NativeFunction, "InTransform");
        SetLocalTransformByIndex_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalTransformByIndex_NativeFunction, "bInitial");
        SetLocalTransformByIndex_bAffectChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalTransformByIndex_NativeFunction, "bAffectChildren");
        SetLocalTransformByIndex_bSetupUndo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalTransformByIndex_NativeFunction, "bSetupUndo");
        SetLocalTransformByIndex_bPrintPythonCommands_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalTransformByIndex_NativeFunction, "bPrintPythonCommands");
        SetLocalTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalTransform");
        SetLocalTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalTransform_NativeFunction);
        SetLocalTransform_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalTransform_NativeFunction, "InKey");
        SetLocalTransform_InTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalTransform_NativeFunction, "InTransform");
        SetLocalTransform_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalTransform_NativeFunction, "bInitial");
        SetLocalTransform_bAffectChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalTransform_NativeFunction, "bAffectChildren");
        SetLocalTransform_bSetupUndo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalTransform_NativeFunction, "bSetupUndo");
        SetLocalTransform_bPrintPythonCommands_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalTransform_NativeFunction, "bPrintPythonCommands");
        SetLinearColorMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLinearColorMetadata");
        SetLinearColorMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLinearColorMetadata_NativeFunction);
        SetLinearColorMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearColorMetadata_NativeFunction, "InItem");
        SetLinearColorMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearColorMetadata_NativeFunction, "InMetadataName");
        SetLinearColorMetadata_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearColorMetadata_NativeFunction, "InValue");
        SetLinearColorMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearColorMetadata_NativeFunction, "ReturnValue");
        SetLinearColorArrayMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLinearColorArrayMetadata");
        SetLinearColorArrayMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLinearColorArrayMetadata_NativeFunction);
        SetLinearColorArrayMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearColorArrayMetadata_NativeFunction, "InItem");
        SetLinearColorArrayMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearColorArrayMetadata_NativeFunction, "InMetadataName");
        SetLinearColorArrayMetadata_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearColorArrayMetadata_NativeFunction, "InValue");
        SetLinearColorArrayMetadata_InValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLinearColorArrayMetadata_NativeFunction, "InValue");
        SetLinearColorArrayMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearColorArrayMetadata_NativeFunction, "ReturnValue");
        SetInt32Metadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetInt32Metadata");
        SetInt32Metadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetInt32Metadata_NativeFunction);
        SetInt32Metadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInt32Metadata_NativeFunction, "InItem");
        SetInt32Metadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInt32Metadata_NativeFunction, "InMetadataName");
        SetInt32Metadata_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInt32Metadata_NativeFunction, "InValue");
        SetInt32Metadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInt32Metadata_NativeFunction, "ReturnValue");
        SetInt32ArrayMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetInt32ArrayMetadata");
        SetInt32ArrayMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetInt32ArrayMetadata_NativeFunction);
        SetInt32ArrayMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInt32ArrayMetadata_NativeFunction, "InItem");
        SetInt32ArrayMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInt32ArrayMetadata_NativeFunction, "InMetadataName");
        SetInt32ArrayMetadata_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInt32ArrayMetadata_NativeFunction, "InValue");
        SetInt32ArrayMetadata_InValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetInt32ArrayMetadata_NativeFunction, "InValue");
        SetInt32ArrayMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInt32ArrayMetadata_NativeFunction, "ReturnValue");
        SetGlobalTransformByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGlobalTransformByIndex");
        SetGlobalTransformByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGlobalTransformByIndex_NativeFunction);
        SetGlobalTransformByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalTransformByIndex_NativeFunction, "InElementIndex");
        SetGlobalTransformByIndex_InTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalTransformByIndex_NativeFunction, "InTransform");
        SetGlobalTransformByIndex_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalTransformByIndex_NativeFunction, "bInitial");
        SetGlobalTransformByIndex_bAffectChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalTransformByIndex_NativeFunction, "bAffectChildren");
        SetGlobalTransformByIndex_bSetupUndo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalTransformByIndex_NativeFunction, "bSetupUndo");
        SetGlobalTransformByIndex_bPrintPythonCommand_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalTransformByIndex_NativeFunction, "bPrintPythonCommand");
        SetGlobalTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGlobalTransform");
        SetGlobalTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGlobalTransform_NativeFunction);
        SetGlobalTransform_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalTransform_NativeFunction, "InKey");
        SetGlobalTransform_InTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalTransform_NativeFunction, "InTransform");
        SetGlobalTransform_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalTransform_NativeFunction, "bInitial");
        SetGlobalTransform_bAffectChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalTransform_NativeFunction, "bAffectChildren");
        SetGlobalTransform_bSetupUndo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalTransform_NativeFunction, "bSetupUndo");
        SetGlobalTransform_bPrintPythonCommand_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalTransform_NativeFunction, "bPrintPythonCommand");
        SetFloatMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFloatMetadata");
        SetFloatMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFloatMetadata_NativeFunction);
        SetFloatMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFloatMetadata_NativeFunction, "InItem");
        SetFloatMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFloatMetadata_NativeFunction, "InMetadataName");
        SetFloatMetadata_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFloatMetadata_NativeFunction, "InValue");
        SetFloatMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFloatMetadata_NativeFunction, "ReturnValue");
        SetFloatArrayMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFloatArrayMetadata");
        SetFloatArrayMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFloatArrayMetadata_NativeFunction);
        SetFloatArrayMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFloatArrayMetadata_NativeFunction, "InItem");
        SetFloatArrayMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFloatArrayMetadata_NativeFunction, "InMetadataName");
        SetFloatArrayMetadata_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFloatArrayMetadata_NativeFunction, "InValue");
        SetFloatArrayMetadata_InValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetFloatArrayMetadata_NativeFunction, "InValue");
        SetFloatArrayMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFloatArrayMetadata_NativeFunction, "ReturnValue");
        SetCurveValueByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCurveValueByIndex");
        SetCurveValueByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCurveValueByIndex_NativeFunction);
        SetCurveValueByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCurveValueByIndex_NativeFunction, "InElementIndex");
        SetCurveValueByIndex_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCurveValueByIndex_NativeFunction, "InValue");
        SetCurveValueByIndex_bSetupUndo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCurveValueByIndex_NativeFunction, "bSetupUndo");
        SetCurveValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCurveValue");
        SetCurveValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCurveValue_NativeFunction);
        SetCurveValue_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCurveValue_NativeFunction, "InKey");
        SetCurveValue_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCurveValue_NativeFunction, "InValue");
        SetCurveValue_bSetupUndo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCurveValue_NativeFunction, "bSetupUndo");
        SetControlVisibilityByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlVisibilityByIndex");
        SetControlVisibilityByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlVisibilityByIndex_NativeFunction);
        SetControlVisibilityByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlVisibilityByIndex_NativeFunction, "InElementIndex");
        SetControlVisibilityByIndex_bVisibility_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlVisibilityByIndex_NativeFunction, "bVisibility");
        SetControlVisibility_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlVisibility");
        SetControlVisibility_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlVisibility_NativeFunction);
        SetControlVisibility_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlVisibility_NativeFunction, "InKey");
        SetControlVisibility_bVisibility_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlVisibility_NativeFunction, "bVisibility");
        SetControlValueByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlValueByIndex");
        SetControlValueByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlValueByIndex_NativeFunction);
        SetControlValueByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlValueByIndex_NativeFunction, "InElementIndex");
        SetControlValueByIndex_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlValueByIndex_NativeFunction, "InValue");
        SetControlValueByIndex_InValueType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlValueByIndex_NativeFunction, "InValueType");
        SetControlValueByIndex_bSetupUndo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlValueByIndex_NativeFunction, "bSetupUndo");
        SetControlValueByIndex_bPrintPythonCommands_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlValueByIndex_NativeFunction, "bPrintPythonCommands");
        SetControlValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlValue");
        SetControlValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlValue_NativeFunction);
        SetControlValue_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlValue_NativeFunction, "InKey");
        SetControlValue_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlValue_NativeFunction, "InValue");
        SetControlValue_InValueType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlValue_NativeFunction, "InValueType");
        SetControlValue_bSetupUndo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlValue_NativeFunction, "bSetupUndo");
        SetControlValue_bPrintPythonCommands_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlValue_NativeFunction, "bPrintPythonCommands");
        SetControlShapeTransformByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlShapeTransformByIndex");
        SetControlShapeTransformByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlShapeTransformByIndex_NativeFunction);
        SetControlShapeTransformByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlShapeTransformByIndex_NativeFunction, "InElementIndex");
        SetControlShapeTransformByIndex_InTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlShapeTransformByIndex_NativeFunction, "InTransform");
        SetControlShapeTransformByIndex_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlShapeTransformByIndex_NativeFunction, "bInitial");
        SetControlShapeTransformByIndex_bSetupUndo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlShapeTransformByIndex_NativeFunction, "bSetupUndo");
        SetControlShapeTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlShapeTransform");
        SetControlShapeTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlShapeTransform_NativeFunction);
        SetControlShapeTransform_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlShapeTransform_NativeFunction, "InKey");
        SetControlShapeTransform_InTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlShapeTransform_NativeFunction, "InTransform");
        SetControlShapeTransform_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlShapeTransform_NativeFunction, "bInitial");
        SetControlShapeTransform_bSetupUndo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlShapeTransform_NativeFunction, "bSetupUndo");
        SetControlSettingsByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlSettingsByIndex");
        SetControlSettingsByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlSettingsByIndex_NativeFunction);
        SetControlSettingsByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlSettingsByIndex_NativeFunction, "InElementIndex");
        SetControlSettingsByIndex_InSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlSettingsByIndex_NativeFunction, "InSettings");
        SetControlSettingsByIndex_bSetupUndo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlSettingsByIndex_NativeFunction, "bSetupUndo");
        SetControlSettingsByIndex_bForce_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlSettingsByIndex_NativeFunction, "bForce");
        SetControlSettingsByIndex_bPrintPythonCommands_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlSettingsByIndex_NativeFunction, "bPrintPythonCommands");
        SetControlSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlSettings");
        SetControlSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlSettings_NativeFunction);
        SetControlSettings_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlSettings_NativeFunction, "InKey");
        SetControlSettings_InSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlSettings_NativeFunction, "InSettings");
        SetControlSettings_bSetupUndo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlSettings_NativeFunction, "bSetupUndo");
        SetControlSettings_bForce_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlSettings_NativeFunction, "bForce");
        SetControlSettings_bPrintPythonCommands_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlSettings_NativeFunction, "bPrintPythonCommands");
        SetControlPreferredRotatorByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlPreferredRotatorByIndex");
        SetControlPreferredRotatorByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlPreferredRotatorByIndex_NativeFunction);
        SetControlPreferredRotatorByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredRotatorByIndex_NativeFunction, "InElementIndex");
        SetControlPreferredRotatorByIndex_InRotator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredRotatorByIndex_NativeFunction, "InRotator");
        SetControlPreferredRotatorByIndex_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredRotatorByIndex_NativeFunction, "bInitial");
        SetControlPreferredRotatorByIndex_bFixEulerFlips_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredRotatorByIndex_NativeFunction, "bFixEulerFlips");
        SetControlPreferredRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlPreferredRotator");
        SetControlPreferredRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlPreferredRotator_NativeFunction);
        SetControlPreferredRotator_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredRotator_NativeFunction, "InKey");
        SetControlPreferredRotator_InRotator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredRotator_NativeFunction, "InRotator");
        SetControlPreferredRotator_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredRotator_NativeFunction, "bInitial");
        SetControlPreferredRotator_bFixEulerFlips_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredRotator_NativeFunction, "bFixEulerFlips");
        SetControlPreferredRotationOrderByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlPreferredRotationOrderByIndex");
        SetControlPreferredRotationOrderByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlPreferredRotationOrderByIndex_NativeFunction);
        SetControlPreferredRotationOrderByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredRotationOrderByIndex_NativeFunction, "InElementIndex");
        SetControlPreferredRotationOrderByIndex_InRotationOrder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredRotationOrderByIndex_NativeFunction, "InRotationOrder");
        SetControlPreferredRotationOrder_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlPreferredRotationOrder");
        SetControlPreferredRotationOrder_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlPreferredRotationOrder_NativeFunction);
        SetControlPreferredRotationOrder_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredRotationOrder_NativeFunction, "InKey");
        SetControlPreferredRotationOrder_InRotationOrder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredRotationOrder_NativeFunction, "InRotationOrder");
        SetControlPreferredEulerAnglesByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlPreferredEulerAnglesByIndex");
        SetControlPreferredEulerAnglesByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlPreferredEulerAnglesByIndex_NativeFunction);
        SetControlPreferredEulerAnglesByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredEulerAnglesByIndex_NativeFunction, "InElementIndex");
        SetControlPreferredEulerAnglesByIndex_InEulerAngles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredEulerAnglesByIndex_NativeFunction, "InEulerAngles");
        SetControlPreferredEulerAnglesByIndex_InRotationOrder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredEulerAnglesByIndex_NativeFunction, "InRotationOrder");
        SetControlPreferredEulerAnglesByIndex_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredEulerAnglesByIndex_NativeFunction, "bInitial");
        SetControlPreferredEulerAnglesByIndex_bFixEulerFlips_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredEulerAnglesByIndex_NativeFunction, "bFixEulerFlips");
        SetControlPreferredEulerAngles_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlPreferredEulerAngles");
        SetControlPreferredEulerAngles_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlPreferredEulerAngles_NativeFunction);
        SetControlPreferredEulerAngles_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredEulerAngles_NativeFunction, "InKey");
        SetControlPreferredEulerAngles_InEulerAngles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredEulerAngles_NativeFunction, "InEulerAngles");
        SetControlPreferredEulerAngles_InRotationOrder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredEulerAngles_NativeFunction, "InRotationOrder");
        SetControlPreferredEulerAngles_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredEulerAngles_NativeFunction, "bInitial");
        SetControlPreferredEulerAngles_bFixEulerFlips_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlPreferredEulerAngles_NativeFunction, "bFixEulerFlips");
        SetControlOffsetTransformByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlOffsetTransformByIndex");
        SetControlOffsetTransformByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlOffsetTransformByIndex_NativeFunction);
        SetControlOffsetTransformByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlOffsetTransformByIndex_NativeFunction, "InElementIndex");
        SetControlOffsetTransformByIndex_InTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlOffsetTransformByIndex_NativeFunction, "InTransform");
        SetControlOffsetTransformByIndex_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlOffsetTransformByIndex_NativeFunction, "bInitial");
        SetControlOffsetTransformByIndex_bAffectChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlOffsetTransformByIndex_NativeFunction, "bAffectChildren");
        SetControlOffsetTransformByIndex_bSetupUndo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlOffsetTransformByIndex_NativeFunction, "bSetupUndo");
        SetControlOffsetTransformByIndex_bPrintPythonCommands_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlOffsetTransformByIndex_NativeFunction, "bPrintPythonCommands");
        SetControlOffsetTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlOffsetTransform");
        SetControlOffsetTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlOffsetTransform_NativeFunction);
        SetControlOffsetTransform_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlOffsetTransform_NativeFunction, "InKey");
        SetControlOffsetTransform_InTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlOffsetTransform_NativeFunction, "InTransform");
        SetControlOffsetTransform_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlOffsetTransform_NativeFunction, "bInitial");
        SetControlOffsetTransform_bAffectChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlOffsetTransform_NativeFunction, "bAffectChildren");
        SetControlOffsetTransform_bSetupUndo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlOffsetTransform_NativeFunction, "bSetupUndo");
        SetControlOffsetTransform_bPrintPythonCommands_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlOffsetTransform_NativeFunction, "bPrintPythonCommands");
        SetBoolMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBoolMetadata");
        SetBoolMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBoolMetadata_NativeFunction);
        SetBoolMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoolMetadata_NativeFunction, "InItem");
        SetBoolMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoolMetadata_NativeFunction, "InMetadataName");
        SetBoolMetadata_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoolMetadata_NativeFunction, "InValue");
        SetBoolMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoolMetadata_NativeFunction, "ReturnValue");
        SetBoolArrayMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBoolArrayMetadata");
        SetBoolArrayMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBoolArrayMetadata_NativeFunction);
        SetBoolArrayMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoolArrayMetadata_NativeFunction, "InItem");
        SetBoolArrayMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoolArrayMetadata_NativeFunction, "InMetadataName");
        SetBoolArrayMetadata_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoolArrayMetadata_NativeFunction, "InValue");
        SetBoolArrayMetadata_InValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetBoolArrayMetadata_NativeFunction, "InValue");
        SetBoolArrayMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoolArrayMetadata_NativeFunction, "ReturnValue");
        SendAutoKeyEvent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SendAutoKeyEvent");
        SendAutoKeyEvent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SendAutoKeyEvent_NativeFunction);
        SendAutoKeyEvent_InElement_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SendAutoKeyEvent_NativeFunction, "InElement");
        SendAutoKeyEvent_InOffsetInSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SendAutoKeyEvent_NativeFunction, "InOffsetInSeconds");
        SendAutoKeyEvent_bAsynchronous_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SendAutoKeyEvent_NativeFunction, "bAsynchronous");
        ResetToDefault_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetToDefault");
        ResetPoseToInitial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetPoseToInitial");
        ResetPoseToInitial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ResetPoseToInitial_NativeFunction);
        ResetPoseToInitial_InTypeFilter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResetPoseToInitial_NativeFunction, "InTypeFilter");
        ResetCurveValues_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetCurveValues");
        Reset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Reset");
        RemoveMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveMetadata");
        RemoveMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveMetadata_NativeFunction);
        RemoveMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveMetadata_NativeFunction, "InItem");
        RemoveMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveMetadata_NativeFunction, "InMetadataName");
        RemoveMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveMetadata_NativeFunction, "ReturnValue");
        RemoveAllMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveAllMetadata");
        RemoveAllMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveAllMetadata_NativeFunction);
        RemoveAllMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAllMetadata_NativeFunction, "InItem");
        RemoveAllMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAllMetadata_NativeFunction, "ReturnValue");
        Num_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Num");
        Num_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Num_NativeFunction);
        Num_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Num_NativeFunction, "ReturnValue");
        MakeControlValueFromVector2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeControlValueFromVector2D");
        MakeControlValueFromVector2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeControlValueFromVector2D_NativeFunction);
        MakeControlValueFromVector2D_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeControlValueFromVector2D_NativeFunction, "InValue");
        MakeControlValueFromVector2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeControlValueFromVector2D_NativeFunction, "ReturnValue");
        MakeControlValueFromVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeControlValueFromVector");
        MakeControlValueFromVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeControlValueFromVector_NativeFunction);
        MakeControlValueFromVector_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeControlValueFromVector_NativeFunction, "InValue");
        MakeControlValueFromVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeControlValueFromVector_NativeFunction, "ReturnValue");
        MakeControlValueFromTransformNoScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeControlValueFromTransformNoScale");
        MakeControlValueFromTransformNoScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeControlValueFromTransformNoScale_NativeFunction);
        MakeControlValueFromTransformNoScale_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeControlValueFromTransformNoScale_NativeFunction, "InValue");
        MakeControlValueFromTransformNoScale_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeControlValueFromTransformNoScale_NativeFunction, "ReturnValue");
        MakeControlValueFromTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeControlValueFromTransform");
        MakeControlValueFromTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeControlValueFromTransform_NativeFunction);
        MakeControlValueFromTransform_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeControlValueFromTransform_NativeFunction, "InValue");
        MakeControlValueFromTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeControlValueFromTransform_NativeFunction, "ReturnValue");
        MakeControlValueFromRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeControlValueFromRotator");
        MakeControlValueFromRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeControlValueFromRotator_NativeFunction);
        MakeControlValueFromRotator_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeControlValueFromRotator_NativeFunction, "InValue");
        MakeControlValueFromRotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeControlValueFromRotator_NativeFunction, "ReturnValue");
        MakeControlValueFromInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeControlValueFromInt");
        MakeControlValueFromInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeControlValueFromInt_NativeFunction);
        MakeControlValueFromInt_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeControlValueFromInt_NativeFunction, "InValue");
        MakeControlValueFromInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeControlValueFromInt_NativeFunction, "ReturnValue");
        MakeControlValueFromFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeControlValueFromFloat");
        MakeControlValueFromFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeControlValueFromFloat_NativeFunction);
        MakeControlValueFromFloat_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeControlValueFromFloat_NativeFunction, "InValue");
        MakeControlValueFromFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeControlValueFromFloat_NativeFunction, "ReturnValue");
        MakeControlValueFromEulerTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeControlValueFromEulerTransform");
        MakeControlValueFromEulerTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeControlValueFromEulerTransform_NativeFunction);
        MakeControlValueFromEulerTransform_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeControlValueFromEulerTransform_NativeFunction, "InValue");
        MakeControlValueFromEulerTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeControlValueFromEulerTransform_NativeFunction, "ReturnValue");
        MakeControlValueFromBool_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeControlValueFromBool");
        MakeControlValueFromBool_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeControlValueFromBool_NativeFunction);
        MakeControlValueFromBool_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeControlValueFromBool_NativeFunction, "InValue");
        MakeControlValueFromBool_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeControlValueFromBool_NativeFunction, "ReturnValue");
        IsValidIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValidIndex");
        IsValidIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValidIndex_NativeFunction);
        IsValidIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidIndex_NativeFunction, "InElementIndex");
        IsValidIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidIndex_NativeFunction, "ReturnValue");
        IsSelectedByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsSelectedByIndex");
        IsSelectedByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsSelectedByIndex_NativeFunction);
        IsSelectedByIndex_InIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSelectedByIndex_NativeFunction, "InIndex");
        IsSelectedByIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSelectedByIndex_NativeFunction, "ReturnValue");
        IsSelected_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsSelected");
        IsSelected_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsSelected_NativeFunction);
        IsSelected_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSelected_NativeFunction, "InKey");
        IsSelected_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSelected_NativeFunction, "ReturnValue");
        IsProcedural_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsProcedural");
        IsProcedural_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsProcedural_NativeFunction);
        IsProcedural_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsProcedural_NativeFunction, "InKey");
        IsProcedural_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsProcedural_NativeFunction, "ReturnValue");
        IsParentedTo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsParentedTo");
        IsParentedTo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsParentedTo_NativeFunction);
        IsParentedTo_InChild_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsParentedTo_NativeFunction, "InChild");
        IsParentedTo_InParent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsParentedTo_NativeFunction, "InParent");
        IsParentedTo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsParentedTo_NativeFunction, "ReturnValue");
        IsCurveValueSetByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsCurveValueSetByIndex");
        IsCurveValueSetByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsCurveValueSetByIndex_NativeFunction);
        IsCurveValueSetByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsCurveValueSetByIndex_NativeFunction, "InElementIndex");
        IsCurveValueSetByIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsCurveValueSetByIndex_NativeFunction, "ReturnValue");
        IsCurveValueSet_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsCurveValueSet");
        IsCurveValueSet_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsCurveValueSet_NativeFunction);
        IsCurveValueSet_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsCurveValueSet_NativeFunction, "InKey");
        IsCurveValueSet_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsCurveValueSet_NativeFunction, "ReturnValue");
        IsControllerAvailable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsControllerAvailable");
        IsControllerAvailable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsControllerAvailable_NativeFunction);
        IsControllerAvailable_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsControllerAvailable_NativeFunction, "ReturnValue");
        HasTag_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasTag");
        HasTag_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasTag_NativeFunction);
        HasTag_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasTag_NativeFunction, "InItem");
        HasTag_InTag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasTag_NativeFunction, "InTag");
        HasTag_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasTag_NativeFunction, "ReturnValue");
        GetVectorMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVectorMetadata");
        GetVectorMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVectorMetadata_NativeFunction);
        GetVectorMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorMetadata_NativeFunction, "InItem");
        GetVectorMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorMetadata_NativeFunction, "InMetadataName");
        GetVectorMetadata_DefaultValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorMetadata_NativeFunction, "DefaultValue");
        GetVectorMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorMetadata_NativeFunction, "ReturnValue");
        GetVectorFromControlValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVectorFromControlValue");
        GetVectorFromControlValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVectorFromControlValue_NativeFunction);
        GetVectorFromControlValue_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorFromControlValue_NativeFunction, "InValue");
        GetVectorFromControlValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorFromControlValue_NativeFunction, "ReturnValue");
        GetVectorArrayMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVectorArrayMetadata");
        GetVectorArrayMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVectorArrayMetadata_NativeFunction);
        GetVectorArrayMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorArrayMetadata_NativeFunction, "InItem");
        GetVectorArrayMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorArrayMetadata_NativeFunction, "InMetadataName");
        GetVectorArrayMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorArrayMetadata_NativeFunction, "ReturnValue");
        GetVectorArrayMetadata_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetVectorArrayMetadata_NativeFunction, "ReturnValue");
        GetVector2DFromControlValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVector2DFromControlValue");
        GetVector2DFromControlValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVector2DFromControlValue_NativeFunction);
        GetVector2DFromControlValue_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVector2DFromControlValue_NativeFunction, "InValue");
        GetVector2DFromControlValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVector2DFromControlValue_NativeFunction, "ReturnValue");
        GetTransformNoScaleFromControlValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTransformNoScaleFromControlValue");
        GetTransformNoScaleFromControlValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTransformNoScaleFromControlValue_NativeFunction);
        GetTransformNoScaleFromControlValue_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformNoScaleFromControlValue_NativeFunction, "InValue");
        GetTransformNoScaleFromControlValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformNoScaleFromControlValue_NativeFunction, "ReturnValue");
        GetTransformMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTransformMetadata");
        GetTransformMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTransformMetadata_NativeFunction);
        GetTransformMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformMetadata_NativeFunction, "InItem");
        GetTransformMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformMetadata_NativeFunction, "InMetadataName");
        GetTransformMetadata_DefaultValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformMetadata_NativeFunction, "DefaultValue");
        GetTransformMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformMetadata_NativeFunction, "ReturnValue");
        GetTransformFromControlValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTransformFromControlValue");
        GetTransformFromControlValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTransformFromControlValue_NativeFunction);
        GetTransformFromControlValue_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformFromControlValue_NativeFunction, "InValue");
        GetTransformFromControlValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformFromControlValue_NativeFunction, "ReturnValue");
        GetTransformArrayMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTransformArrayMetadata");
        GetTransformArrayMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTransformArrayMetadata_NativeFunction);
        GetTransformArrayMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformArrayMetadata_NativeFunction, "InItem");
        GetTransformArrayMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformArrayMetadata_NativeFunction, "InMetadataName");
        GetTransformArrayMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformArrayMetadata_NativeFunction, "ReturnValue");
        GetTransformArrayMetadata_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetTransformArrayMetadata_NativeFunction, "ReturnValue");
        GetTags_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTags");
        GetTags_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTags_NativeFunction);
        GetTags_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTags_NativeFunction, "InItem");
        GetTags_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTags_NativeFunction, "ReturnValue");
        GetTags_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetTags_NativeFunction, "ReturnValue");
        GetSelectedKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSelectedKeys");
        GetSelectedKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSelectedKeys_NativeFunction);
        GetSelectedKeys_InTypeFilter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSelectedKeys_NativeFunction, "InTypeFilter");
        GetSelectedKeys_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSelectedKeys_NativeFunction, "ReturnValue");
        GetSelectedKeys_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSelectedKeys_NativeFunction, "ReturnValue");
        GetRotatorMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRotatorMetadata");
        GetRotatorMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRotatorMetadata_NativeFunction);
        GetRotatorMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotatorMetadata_NativeFunction, "InItem");
        GetRotatorMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotatorMetadata_NativeFunction, "InMetadataName");
        GetRotatorMetadata_DefaultValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotatorMetadata_NativeFunction, "DefaultValue");
        GetRotatorMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotatorMetadata_NativeFunction, "ReturnValue");
        GetRotatorFromControlValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRotatorFromControlValue");
        GetRotatorFromControlValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRotatorFromControlValue_NativeFunction);
        GetRotatorFromControlValue_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotatorFromControlValue_NativeFunction, "InValue");
        GetRotatorFromControlValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotatorFromControlValue_NativeFunction, "ReturnValue");
        GetRotatorArrayMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRotatorArrayMetadata");
        GetRotatorArrayMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRotatorArrayMetadata_NativeFunction);
        GetRotatorArrayMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotatorArrayMetadata_NativeFunction, "InItem");
        GetRotatorArrayMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotatorArrayMetadata_NativeFunction, "InMetadataName");
        GetRotatorArrayMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotatorArrayMetadata_NativeFunction, "ReturnValue");
        GetRotatorArrayMetadata_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetRotatorArrayMetadata_NativeFunction, "ReturnValue");
        GetRootElementKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRootElementKeys");
        GetRootElementKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRootElementKeys_NativeFunction);
        GetRootElementKeys_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRootElementKeys_NativeFunction, "ReturnValue");
        GetRootElementKeys_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetRootElementKeys_NativeFunction, "ReturnValue");
        GetRigidBodyKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRigidBodyKeys");
        GetRigidBodyKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRigidBodyKeys_NativeFunction);
        GetRigidBodyKeys_bTraverse_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRigidBodyKeys_NativeFunction, "bTraverse");
        GetRigidBodyKeys_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRigidBodyKeys_NativeFunction, "ReturnValue");
        GetRigidBodyKeys_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetRigidBodyKeys_NativeFunction, "ReturnValue");
        GetRigElementKeyMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRigElementKeyMetadata");
        GetRigElementKeyMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRigElementKeyMetadata_NativeFunction);
        GetRigElementKeyMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRigElementKeyMetadata_NativeFunction, "InItem");
        GetRigElementKeyMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRigElementKeyMetadata_NativeFunction, "InMetadataName");
        GetRigElementKeyMetadata_DefaultValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRigElementKeyMetadata_NativeFunction, "DefaultValue");
        GetRigElementKeyMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRigElementKeyMetadata_NativeFunction, "ReturnValue");
        GetRigElementKeyArrayMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRigElementKeyArrayMetadata");
        GetRigElementKeyArrayMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRigElementKeyArrayMetadata_NativeFunction);
        GetRigElementKeyArrayMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRigElementKeyArrayMetadata_NativeFunction, "InItem");
        GetRigElementKeyArrayMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRigElementKeyArrayMetadata_NativeFunction, "InMetadataName");
        GetRigElementKeyArrayMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRigElementKeyArrayMetadata_NativeFunction, "ReturnValue");
        GetRigElementKeyArrayMetadata_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetRigElementKeyArrayMetadata_NativeFunction, "ReturnValue");
        GetReferenceKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetReferenceKeys");
        GetReferenceKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetReferenceKeys_NativeFunction);
        GetReferenceKeys_bTraverse_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetReferenceKeys_NativeFunction, "bTraverse");
        GetReferenceKeys_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetReferenceKeys_NativeFunction, "ReturnValue");
        GetReferenceKeys_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetReferenceKeys_NativeFunction, "ReturnValue");
        GetQuatMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetQuatMetadata");
        GetQuatMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetQuatMetadata_NativeFunction);
        GetQuatMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetQuatMetadata_NativeFunction, "InItem");
        GetQuatMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetQuatMetadata_NativeFunction, "InMetadataName");
        GetQuatMetadata_DefaultValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetQuatMetadata_NativeFunction, "DefaultValue");
        GetQuatMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetQuatMetadata_NativeFunction, "ReturnValue");
        GetQuatArrayMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetQuatArrayMetadata");
        GetQuatArrayMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetQuatArrayMetadata_NativeFunction);
        GetQuatArrayMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetQuatArrayMetadata_NativeFunction, "InItem");
        GetQuatArrayMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetQuatArrayMetadata_NativeFunction, "InMetadataName");
        GetQuatArrayMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetQuatArrayMetadata_NativeFunction, "ReturnValue");
        GetQuatArrayMetadata_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetQuatArrayMetadata_NativeFunction, "ReturnValue");
        GetPreviousParent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPreviousParent");
        GetPreviousParent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPreviousParent_NativeFunction);
        GetPreviousParent_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPreviousParent_NativeFunction, "InKey");
        GetPreviousParent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPreviousParent_NativeFunction, "ReturnValue");
        GetPreviousName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPreviousName");
        GetPreviousName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPreviousName_NativeFunction);
        GetPreviousName_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPreviousName_NativeFunction, "InKey");
        GetPreviousName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPreviousName_NativeFunction, "ReturnValue");
        GetPose_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPose");
        GetPose_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPose_NativeFunction);
        GetPose_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPose_NativeFunction, "bInitial");
        GetPose_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPose_NativeFunction, "ReturnValue");
        GetParentWeightArray_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetParentWeightArray");
        GetParentWeightArray_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetParentWeightArray_NativeFunction);
        GetParentWeightArray_InChild_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParentWeightArray_NativeFunction, "InChild");
        GetParentWeightArray_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParentWeightArray_NativeFunction, "bInitial");
        GetParentWeightArray_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParentWeightArray_NativeFunction, "ReturnValue");
        GetParentWeightArray_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetParentWeightArray_NativeFunction, "ReturnValue");
        GetParentWeight_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetParentWeight");
        GetParentWeight_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetParentWeight_NativeFunction);
        GetParentWeight_InChild_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParentWeight_NativeFunction, "InChild");
        GetParentWeight_InParent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParentWeight_NativeFunction, "InParent");
        GetParentWeight_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParentWeight_NativeFunction, "bInitial");
        GetParentWeight_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParentWeight_NativeFunction, "ReturnValue");
        GetParentTransformByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetParentTransformByIndex");
        GetParentTransformByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetParentTransformByIndex_NativeFunction);
        GetParentTransformByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParentTransformByIndex_NativeFunction, "InElementIndex");
        GetParentTransformByIndex_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParentTransformByIndex_NativeFunction, "bInitial");
        GetParentTransformByIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParentTransformByIndex_NativeFunction, "ReturnValue");
        GetParentTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetParentTransform");
        GetParentTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetParentTransform_NativeFunction);
        GetParentTransform_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParentTransform_NativeFunction, "InKey");
        GetParentTransform_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParentTransform_NativeFunction, "bInitial");
        GetParentTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParentTransform_NativeFunction, "ReturnValue");
        GetParents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetParents");
        GetParents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetParents_NativeFunction);
        GetParents_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParents_NativeFunction, "InKey");
        GetParents_bRecursive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParents_NativeFunction, "bRecursive");
        GetParents_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParents_NativeFunction, "ReturnValue");
        GetParents_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetParents_NativeFunction, "ReturnValue");
        GetNumberOfParents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumberOfParents");
        GetNumberOfParents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumberOfParents_NativeFunction);
        GetNumberOfParents_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumberOfParents_NativeFunction, "InKey");
        GetNumberOfParents_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumberOfParents_NativeFunction, "ReturnValue");
        GetNullKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNullKeys");
        GetNullKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNullKeys_NativeFunction);
        GetNullKeys_bTraverse_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNullKeys_NativeFunction, "bTraverse");
        GetNullKeys_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNullKeys_NativeFunction, "ReturnValue");
        GetNullKeys_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetNullKeys_NativeFunction, "ReturnValue");
        GetNameMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNameMetadata");
        GetNameMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNameMetadata_NativeFunction);
        GetNameMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNameMetadata_NativeFunction, "InItem");
        GetNameMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNameMetadata_NativeFunction, "InMetadataName");
        GetNameMetadata_DefaultValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNameMetadata_NativeFunction, "DefaultValue");
        GetNameMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNameMetadata_NativeFunction, "ReturnValue");
        GetNameArrayMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNameArrayMetadata");
        GetNameArrayMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNameArrayMetadata_NativeFunction);
        GetNameArrayMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNameArrayMetadata_NativeFunction, "InItem");
        GetNameArrayMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNameArrayMetadata_NativeFunction, "InMetadataName");
        GetNameArrayMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNameArrayMetadata_NativeFunction, "ReturnValue");
        GetNameArrayMetadata_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetNameArrayMetadata_NativeFunction, "ReturnValue");
        GetMetadataType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMetadataType");
        GetMetadataType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMetadataType_NativeFunction);
        GetMetadataType_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMetadataType_NativeFunction, "InItem");
        GetMetadataType_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMetadataType_NativeFunction, "InMetadataName");
        GetMetadataType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMetadataType_NativeFunction, "ReturnValue");
        GetMetadataNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMetadataNames");
        GetMetadataNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMetadataNames_NativeFunction);
        GetMetadataNames_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMetadataNames_NativeFunction, "InItem");
        GetMetadataNames_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMetadataNames_NativeFunction, "ReturnValue");
        GetMetadataNames_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetMetadataNames_NativeFunction, "ReturnValue");
        GetLocalTransformByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalTransformByIndex");
        GetLocalTransformByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalTransformByIndex_NativeFunction);
        GetLocalTransformByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalTransformByIndex_NativeFunction, "InElementIndex");
        GetLocalTransformByIndex_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalTransformByIndex_NativeFunction, "bInitial");
        GetLocalTransformByIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalTransformByIndex_NativeFunction, "ReturnValue");
        GetLocalTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalTransform");
        GetLocalTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalTransform_NativeFunction);
        GetLocalTransform_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalTransform_NativeFunction, "InKey");
        GetLocalTransform_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalTransform_NativeFunction, "bInitial");
        GetLocalTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalTransform_NativeFunction, "ReturnValue");
        GetLocalIndex_ForBlueprint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalIndex_ForBlueprint");
        GetLocalIndex_ForBlueprint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalIndex_ForBlueprint_NativeFunction);
        GetLocalIndex_ForBlueprint_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalIndex_ForBlueprint_NativeFunction, "InKey");
        GetLocalIndex_ForBlueprint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalIndex_ForBlueprint_NativeFunction, "ReturnValue");
        GetLocalControlShapeTransformByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlShapeTransformByIndex");
        GetLocalControlShapeTransformByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlShapeTransformByIndex_NativeFunction);
        GetLocalControlShapeTransformByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlShapeTransformByIndex_NativeFunction, "InElementIndex");
        GetLocalControlShapeTransformByIndex_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlShapeTransformByIndex_NativeFunction, "bInitial");
        GetLocalControlShapeTransformByIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlShapeTransformByIndex_NativeFunction, "ReturnValue");
        GetLocalControlShapeTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlShapeTransform");
        GetLocalControlShapeTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlShapeTransform_NativeFunction);
        GetLocalControlShapeTransform_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlShapeTransform_NativeFunction, "InKey");
        GetLocalControlShapeTransform_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlShapeTransform_NativeFunction, "bInitial");
        GetLocalControlShapeTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlShapeTransform_NativeFunction, "ReturnValue");
        GetLinearColorMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLinearColorMetadata");
        GetLinearColorMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLinearColorMetadata_NativeFunction);
        GetLinearColorMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinearColorMetadata_NativeFunction, "InItem");
        GetLinearColorMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinearColorMetadata_NativeFunction, "InMetadataName");
        GetLinearColorMetadata_DefaultValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinearColorMetadata_NativeFunction, "DefaultValue");
        GetLinearColorMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinearColorMetadata_NativeFunction, "ReturnValue");
        GetLinearColorArrayMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLinearColorArrayMetadata");
        GetLinearColorArrayMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLinearColorArrayMetadata_NativeFunction);
        GetLinearColorArrayMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinearColorArrayMetadata_NativeFunction, "InItem");
        GetLinearColorArrayMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinearColorArrayMetadata_NativeFunction, "InMetadataName");
        GetLinearColorArrayMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinearColorArrayMetadata_NativeFunction, "ReturnValue");
        GetLinearColorArrayMetadata_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLinearColorArrayMetadata_NativeFunction, "ReturnValue");
        GetKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetKeys");
        GetKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetKeys_NativeFunction);
        GetKeys_InElementIndices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetKeys_NativeFunction, "InElementIndices");
        GetKeys_InElementIndices_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetKeys_NativeFunction, "InElementIndices");
        GetKeys_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetKeys_NativeFunction, "ReturnValue");
        GetKeys_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetKeys_NativeFunction, "ReturnValue");
        GetKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetKey");
        GetKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetKey_NativeFunction);
        GetKey_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetKey_NativeFunction, "InElementIndex");
        GetKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetKey_NativeFunction, "ReturnValue");
        GetIntFromControlValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetIntFromControlValue");
        GetIntFromControlValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetIntFromControlValue_NativeFunction);
        GetIntFromControlValue_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetIntFromControlValue_NativeFunction, "InValue");
        GetIntFromControlValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetIntFromControlValue_NativeFunction, "ReturnValue");
        GetInt32Metadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInt32Metadata");
        GetInt32Metadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInt32Metadata_NativeFunction);
        GetInt32Metadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInt32Metadata_NativeFunction, "InItem");
        GetInt32Metadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInt32Metadata_NativeFunction, "InMetadataName");
        GetInt32Metadata_DefaultValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInt32Metadata_NativeFunction, "DefaultValue");
        GetInt32Metadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInt32Metadata_NativeFunction, "ReturnValue");
        GetInt32ArrayMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInt32ArrayMetadata");
        GetInt32ArrayMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInt32ArrayMetadata_NativeFunction);
        GetInt32ArrayMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInt32ArrayMetadata_NativeFunction, "InItem");
        GetInt32ArrayMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInt32ArrayMetadata_NativeFunction, "InMetadataName");
        GetInt32ArrayMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInt32ArrayMetadata_NativeFunction, "ReturnValue");
        GetInt32ArrayMetadata_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetInt32ArrayMetadata_NativeFunction, "ReturnValue");
        GetIndex_ForBlueprint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetIndex_ForBlueprint");
        GetIndex_ForBlueprint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetIndex_ForBlueprint_NativeFunction);
        GetIndex_ForBlueprint_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetIndex_ForBlueprint_NativeFunction, "InKey");
        GetIndex_ForBlueprint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetIndex_ForBlueprint_NativeFunction, "ReturnValue");
        GetGlobalTransformByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGlobalTransformByIndex");
        GetGlobalTransformByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGlobalTransformByIndex_NativeFunction);
        GetGlobalTransformByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGlobalTransformByIndex_NativeFunction, "InElementIndex");
        GetGlobalTransformByIndex_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGlobalTransformByIndex_NativeFunction, "bInitial");
        GetGlobalTransformByIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGlobalTransformByIndex_NativeFunction, "ReturnValue");
        GetGlobalTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGlobalTransform");
        GetGlobalTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGlobalTransform_NativeFunction);
        GetGlobalTransform_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGlobalTransform_NativeFunction, "InKey");
        GetGlobalTransform_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGlobalTransform_NativeFunction, "bInitial");
        GetGlobalTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGlobalTransform_NativeFunction, "ReturnValue");
        GetGlobalControlShapeTransformByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGlobalControlShapeTransformByIndex");
        GetGlobalControlShapeTransformByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGlobalControlShapeTransformByIndex_NativeFunction);
        GetGlobalControlShapeTransformByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGlobalControlShapeTransformByIndex_NativeFunction, "InElementIndex");
        GetGlobalControlShapeTransformByIndex_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGlobalControlShapeTransformByIndex_NativeFunction, "bInitial");
        GetGlobalControlShapeTransformByIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGlobalControlShapeTransformByIndex_NativeFunction, "ReturnValue");
        GetGlobalControlShapeTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGlobalControlShapeTransform");
        GetGlobalControlShapeTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGlobalControlShapeTransform_NativeFunction);
        GetGlobalControlShapeTransform_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGlobalControlShapeTransform_NativeFunction, "InKey");
        GetGlobalControlShapeTransform_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGlobalControlShapeTransform_NativeFunction, "bInitial");
        GetGlobalControlShapeTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGlobalControlShapeTransform_NativeFunction, "ReturnValue");
        GetGlobalControlOffsetTransformByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGlobalControlOffsetTransformByIndex");
        GetGlobalControlOffsetTransformByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGlobalControlOffsetTransformByIndex_NativeFunction);
        GetGlobalControlOffsetTransformByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGlobalControlOffsetTransformByIndex_NativeFunction, "InElementIndex");
        GetGlobalControlOffsetTransformByIndex_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGlobalControlOffsetTransformByIndex_NativeFunction, "bInitial");
        GetGlobalControlOffsetTransformByIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGlobalControlOffsetTransformByIndex_NativeFunction, "ReturnValue");
        GetGlobalControlOffsetTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGlobalControlOffsetTransform");
        GetGlobalControlOffsetTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGlobalControlOffsetTransform_NativeFunction);
        GetGlobalControlOffsetTransform_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGlobalControlOffsetTransform_NativeFunction, "InKey");
        GetGlobalControlOffsetTransform_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGlobalControlOffsetTransform_NativeFunction, "bInitial");
        GetGlobalControlOffsetTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGlobalControlOffsetTransform_NativeFunction, "ReturnValue");
        GetFloatMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFloatMetadata");
        GetFloatMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFloatMetadata_NativeFunction);
        GetFloatMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatMetadata_NativeFunction, "InItem");
        GetFloatMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatMetadata_NativeFunction, "InMetadataName");
        GetFloatMetadata_DefaultValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatMetadata_NativeFunction, "DefaultValue");
        GetFloatMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatMetadata_NativeFunction, "ReturnValue");
        GetFloatFromControlValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFloatFromControlValue");
        GetFloatFromControlValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFloatFromControlValue_NativeFunction);
        GetFloatFromControlValue_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatFromControlValue_NativeFunction, "InValue");
        GetFloatFromControlValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatFromControlValue_NativeFunction, "ReturnValue");
        GetFloatArrayMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFloatArrayMetadata");
        GetFloatArrayMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFloatArrayMetadata_NativeFunction);
        GetFloatArrayMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatArrayMetadata_NativeFunction, "InItem");
        GetFloatArrayMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatArrayMetadata_NativeFunction, "InMetadataName");
        GetFloatArrayMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatArrayMetadata_NativeFunction, "ReturnValue");
        GetFloatArrayMetadata_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetFloatArrayMetadata_NativeFunction, "ReturnValue");
        GetFirstParent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFirstParent");
        GetFirstParent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFirstParent_NativeFunction);
        GetFirstParent_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFirstParent_NativeFunction, "InKey");
        GetFirstParent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFirstParent_NativeFunction, "ReturnValue");
        GetEulerTransformFromControlValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEulerTransformFromControlValue");
        GetEulerTransformFromControlValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEulerTransformFromControlValue_NativeFunction);
        GetEulerTransformFromControlValue_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEulerTransformFromControlValue_NativeFunction, "InValue");
        GetEulerTransformFromControlValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEulerTransformFromControlValue_NativeFunction, "ReturnValue");
        GetDefaultParent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDefaultParent");
        GetDefaultParent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDefaultParent_NativeFunction);
        GetDefaultParent_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultParent_NativeFunction, "InKey");
        GetDefaultParent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultParent_NativeFunction, "ReturnValue");
        GetCurveValueByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurveValueByIndex");
        GetCurveValueByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurveValueByIndex_NativeFunction);
        GetCurveValueByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurveValueByIndex_NativeFunction, "InElementIndex");
        GetCurveValueByIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurveValueByIndex_NativeFunction, "ReturnValue");
        GetCurveValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurveValue");
        GetCurveValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurveValue_NativeFunction);
        GetCurveValue_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurveValue_NativeFunction, "InKey");
        GetCurveValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurveValue_NativeFunction, "ReturnValue");
        GetCurveKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurveKeys");
        GetCurveKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurveKeys_NativeFunction);
        GetCurveKeys_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurveKeys_NativeFunction, "ReturnValue");
        GetCurveKeys_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetCurveKeys_NativeFunction, "ReturnValue");
        GetControlValueByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlValueByIndex");
        GetControlValueByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlValueByIndex_NativeFunction);
        GetControlValueByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlValueByIndex_NativeFunction, "InElementIndex");
        GetControlValueByIndex_InValueType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlValueByIndex_NativeFunction, "InValueType");
        GetControlValueByIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlValueByIndex_NativeFunction, "ReturnValue");
        GetControlValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlValue");
        GetControlValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlValue_NativeFunction);
        GetControlValue_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlValue_NativeFunction, "InKey");
        GetControlValue_InValueType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlValue_NativeFunction, "InValueType");
        GetControlValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlValue_NativeFunction, "ReturnValue");
        GetControlPreferredRotatorByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlPreferredRotatorByIndex");
        GetControlPreferredRotatorByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlPreferredRotatorByIndex_NativeFunction);
        GetControlPreferredRotatorByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPreferredRotatorByIndex_NativeFunction, "InElementIndex");
        GetControlPreferredRotatorByIndex_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPreferredRotatorByIndex_NativeFunction, "bInitial");
        GetControlPreferredRotatorByIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPreferredRotatorByIndex_NativeFunction, "ReturnValue");
        GetControlPreferredRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlPreferredRotator");
        GetControlPreferredRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlPreferredRotator_NativeFunction);
        GetControlPreferredRotator_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPreferredRotator_NativeFunction, "InKey");
        GetControlPreferredRotator_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPreferredRotator_NativeFunction, "bInitial");
        GetControlPreferredRotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPreferredRotator_NativeFunction, "ReturnValue");
        GetControlPreferredEulerRotationOrderByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlPreferredEulerRotationOrderByIndex");
        GetControlPreferredEulerRotationOrderByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlPreferredEulerRotationOrderByIndex_NativeFunction);
        GetControlPreferredEulerRotationOrderByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPreferredEulerRotationOrderByIndex_NativeFunction, "InElementIndex");
        GetControlPreferredEulerRotationOrderByIndex_bFromSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPreferredEulerRotationOrderByIndex_NativeFunction, "bFromSettings");
        GetControlPreferredEulerRotationOrderByIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPreferredEulerRotationOrderByIndex_NativeFunction, "ReturnValue");
        GetControlPreferredEulerRotationOrder_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlPreferredEulerRotationOrder");
        GetControlPreferredEulerRotationOrder_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlPreferredEulerRotationOrder_NativeFunction);
        GetControlPreferredEulerRotationOrder_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPreferredEulerRotationOrder_NativeFunction, "InKey");
        GetControlPreferredEulerRotationOrder_bFromSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPreferredEulerRotationOrder_NativeFunction, "bFromSettings");
        GetControlPreferredEulerRotationOrder_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPreferredEulerRotationOrder_NativeFunction, "ReturnValue");
        GetControlPreferredEulerAnglesByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlPreferredEulerAnglesByIndex");
        GetControlPreferredEulerAnglesByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlPreferredEulerAnglesByIndex_NativeFunction);
        GetControlPreferredEulerAnglesByIndex_InElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPreferredEulerAnglesByIndex_NativeFunction, "InElementIndex");
        GetControlPreferredEulerAnglesByIndex_InRotationOrder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPreferredEulerAnglesByIndex_NativeFunction, "InRotationOrder");
        GetControlPreferredEulerAnglesByIndex_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPreferredEulerAnglesByIndex_NativeFunction, "bInitial");
        GetControlPreferredEulerAnglesByIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPreferredEulerAnglesByIndex_NativeFunction, "ReturnValue");
        GetControlPreferredEulerAngles_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlPreferredEulerAngles");
        GetControlPreferredEulerAngles_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlPreferredEulerAngles_NativeFunction);
        GetControlPreferredEulerAngles_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPreferredEulerAngles_NativeFunction, "InKey");
        GetControlPreferredEulerAngles_InRotationOrder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPreferredEulerAngles_NativeFunction, "InRotationOrder");
        GetControlPreferredEulerAngles_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPreferredEulerAngles_NativeFunction, "bInitial");
        GetControlPreferredEulerAngles_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlPreferredEulerAngles_NativeFunction, "ReturnValue");
        GetController_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetController");
        GetController_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetController_NativeFunction);
        GetController_bCreateIfNeeded_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetController_NativeFunction, "bCreateIfNeeded");
        GetController_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetController_NativeFunction, "ReturnValue");
        GetControlKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlKeys");
        GetControlKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlKeys_NativeFunction);
        GetControlKeys_bTraverse_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlKeys_NativeFunction, "bTraverse");
        GetControlKeys_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlKeys_NativeFunction, "ReturnValue");
        GetControlKeys_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetControlKeys_NativeFunction, "ReturnValue");
        GetChildren_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetChildren");
        GetChildren_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetChildren_NativeFunction);
        GetChildren_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildren_NativeFunction, "InKey");
        GetChildren_bRecursive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildren_NativeFunction, "bRecursive");
        GetChildren_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildren_NativeFunction, "ReturnValue");
        GetChildren_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetChildren_NativeFunction, "ReturnValue");
        GetBoolMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBoolMetadata");
        GetBoolMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBoolMetadata_NativeFunction);
        GetBoolMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoolMetadata_NativeFunction, "InItem");
        GetBoolMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoolMetadata_NativeFunction, "InMetadataName");
        GetBoolMetadata_DefaultValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoolMetadata_NativeFunction, "DefaultValue");
        GetBoolMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoolMetadata_NativeFunction, "ReturnValue");
        GetBoolArrayMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBoolArrayMetadata");
        GetBoolArrayMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBoolArrayMetadata_NativeFunction);
        GetBoolArrayMetadata_InItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoolArrayMetadata_NativeFunction, "InItem");
        GetBoolArrayMetadata_InMetadataName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoolArrayMetadata_NativeFunction, "InMetadataName");
        GetBoolArrayMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoolArrayMetadata_NativeFunction, "ReturnValue");
        GetBoolArrayMetadata_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetBoolArrayMetadata_NativeFunction, "ReturnValue");
        GetBoneKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBoneKeys");
        GetBoneKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBoneKeys_NativeFunction);
        GetBoneKeys_bTraverse_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoneKeys_NativeFunction, "bTraverse");
        GetBoneKeys_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoneKeys_NativeFunction, "ReturnValue");
        GetBoneKeys_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetBoneKeys_NativeFunction, "ReturnValue");
        GetAllKeys_ForBlueprint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAllKeys_ForBlueprint");
        GetAllKeys_ForBlueprint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAllKeys_ForBlueprint_NativeFunction);
        GetAllKeys_ForBlueprint_bTraverse_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllKeys_ForBlueprint_NativeFunction, "bTraverse");
        GetAllKeys_ForBlueprint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllKeys_ForBlueprint_NativeFunction, "ReturnValue");
        GetAllKeys_ForBlueprint_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAllKeys_ForBlueprint_NativeFunction, "ReturnValue");
        FindNull_ForBlueprintOnly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindNull_ForBlueprintOnly");
        FindNull_ForBlueprintOnly_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindNull_ForBlueprintOnly_NativeFunction);
        FindNull_ForBlueprintOnly_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNull_ForBlueprintOnly_NativeFunction, "InKey");
        FindNull_ForBlueprintOnly_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNull_ForBlueprintOnly_NativeFunction, "ReturnValue");
        FindControl_ForBlueprintOnly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindControl_ForBlueprintOnly");
        FindControl_ForBlueprintOnly_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindControl_ForBlueprintOnly_NativeFunction);
        FindControl_ForBlueprintOnly_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindControl_ForBlueprintOnly_NativeFunction, "InKey");
        FindControl_ForBlueprintOnly_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindControl_ForBlueprintOnly_NativeFunction, "ReturnValue");
        FindBone_ForBlueprintOnly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindBone_ForBlueprintOnly");
        FindBone_ForBlueprintOnly_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindBone_ForBlueprintOnly_NativeFunction);
        FindBone_ForBlueprintOnly_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindBone_ForBlueprintOnly_NativeFunction, "InKey");
        FindBone_ForBlueprintOnly_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindBone_ForBlueprintOnly_NativeFunction, "ReturnValue");
        CopyPose_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CopyPose");
        CopyPose_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CopyPose_NativeFunction);
        CopyPose_InHierarchy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyPose_NativeFunction, "InHierarchy");
        CopyPose_bCurrent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyPose_NativeFunction, "bCurrent");
        CopyPose_bInitial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyPose_NativeFunction, "bInitial");
        CopyPose_bWeights_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyPose_NativeFunction, "bWeights");
        CopyPose_bMatchPoseInGlobalIfNeeded_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyPose_NativeFunction, "bMatchPoseInGlobalIfNeeded");
        CopyHierarchy_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CopyHierarchy");
        CopyHierarchy_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CopyHierarchy_NativeFunction);
        CopyHierarchy_InHierarchy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyHierarchy_NativeFunction, "InHierarchy");
        Contains_ForBlueprint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Contains_ForBlueprint");
        Contains_ForBlueprint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Contains_ForBlueprint_NativeFunction);
        Contains_ForBlueprint_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Contains_ForBlueprint_NativeFunction, "InKey");
        Contains_ForBlueprint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Contains_ForBlueprint_NativeFunction, "ReturnValue");
        
        
    }
    
    protected RigHierarchy(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/ControlRig.RigHierarchy:UnsetCurveValueByIndex
    static readonly IntPtr UnsetCurveValueByIndex_NativeFunction;
    static readonly int UnsetCurveValueByIndex_ParamsSize;
    static readonly int UnsetCurveValueByIndex_InElementIndex_Offset;
    static readonly int UnsetCurveValueByIndex_bSetupUndo_Offset;
    
    public void UnsetCurveValueByIndex(int inElementIndex, bool bSetupUndo = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UnsetCurveValueByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, UnsetCurveValueByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, UnsetCurveValueByIndex_bSetupUndo_Offset), 0, null, bSetupUndo);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UnsetCurveValueByIndex_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:UnsetCurveValue
    static readonly IntPtr UnsetCurveValue_NativeFunction;
    static readonly int UnsetCurveValue_ParamsSize;
    static readonly int UnsetCurveValue_InKey_Offset;
    static readonly int UnsetCurveValue_bSetupUndo_Offset;
    
    public void UnsetCurveValue(UnrealSharp.ControlRig.RigElementKey inKey, bool bSetupUndo = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UnsetCurveValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, UnsetCurveValue_InKey_Offset), 0, null, inKey);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, UnsetCurveValue_bSetupUndo_Offset), 0, null, bSetupUndo);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UnsetCurveValue_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SwitchToWorldSpace
    static readonly IntPtr SwitchToWorldSpace_NativeFunction;
    static readonly int SwitchToWorldSpace_ParamsSize;
    static readonly int SwitchToWorldSpace_InChild_Offset;
    static readonly int SwitchToWorldSpace_bInitial_Offset;
    static readonly int SwitchToWorldSpace_bAffectChildren_Offset;
    static readonly int SwitchToWorldSpace_ReturnValue_Offset;
    
    public bool SwitchToWorldSpace(UnrealSharp.ControlRig.RigElementKey inChild, bool bInitial = false, bool bAffectChildren = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SwitchToWorldSpace_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SwitchToWorldSpace_InChild_Offset), 0, null, inChild);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SwitchToWorldSpace_bInitial_Offset), 0, null, bInitial);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SwitchToWorldSpace_bAffectChildren_Offset), 0, null, bAffectChildren);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SwitchToWorldSpace_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SwitchToWorldSpace_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SwitchToParent
    static readonly IntPtr SwitchToParent_NativeFunction;
    static readonly int SwitchToParent_ParamsSize;
    static readonly int SwitchToParent_InChild_Offset;
    static readonly int SwitchToParent_InParent_Offset;
    static readonly int SwitchToParent_bInitial_Offset;
    static readonly int SwitchToParent_bAffectChildren_Offset;
    static readonly int SwitchToParent_ReturnValue_Offset;
    
    public bool SwitchToParent(UnrealSharp.ControlRig.RigElementKey inChild, UnrealSharp.ControlRig.RigElementKey inParent, bool bInitial = false, bool bAffectChildren = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SwitchToParent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SwitchToParent_InChild_Offset), 0, null, inChild);
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SwitchToParent_InParent_Offset), 0, null, inParent);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SwitchToParent_bInitial_Offset), 0, null, bInitial);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SwitchToParent_bAffectChildren_Offset), 0, null, bAffectChildren);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SwitchToParent_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SwitchToParent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SwitchToDefaultParent
    static readonly IntPtr SwitchToDefaultParent_NativeFunction;
    static readonly int SwitchToDefaultParent_ParamsSize;
    static readonly int SwitchToDefaultParent_InChild_Offset;
    static readonly int SwitchToDefaultParent_bInitial_Offset;
    static readonly int SwitchToDefaultParent_bAffectChildren_Offset;
    static readonly int SwitchToDefaultParent_ReturnValue_Offset;
    
    public bool SwitchToDefaultParent(UnrealSharp.ControlRig.RigElementKey inChild, bool bInitial = false, bool bAffectChildren = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SwitchToDefaultParent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SwitchToDefaultParent_InChild_Offset), 0, null, inChild);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SwitchToDefaultParent_bInitial_Offset), 0, null, bInitial);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SwitchToDefaultParent_bAffectChildren_Offset), 0, null, bAffectChildren);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SwitchToDefaultParent_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SwitchToDefaultParent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SortKeys
    static readonly IntPtr SortKeys_NativeFunction;
    static readonly int SortKeys_ParamsSize;
    static readonly int SortKeys_InKeys_Offset;
    static readonly int SortKeys_InKeys_ElementSize;
    static readonly int SortKeys_ReturnValue_Offset;
    static readonly int SortKeys_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> SortKeys(System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> inKeys)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SortKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InKeys_NativeBuffer = IntPtr.Add(ParamsBuffer, SortKeys_InKeys_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> InKeys_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey>(1, UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative, UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative, SortKeys_InKeys_ElementSize);
            InKeys_Marshaler.ToNative(InKeys_NativeBuffer, 0, null, inKeys);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SortKeys_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, SortKeys_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> (1, UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative, UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative, SortKeys_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetVectorMetadata
    static readonly IntPtr SetVectorMetadata_NativeFunction;
    static readonly int SetVectorMetadata_ParamsSize;
    static readonly int SetVectorMetadata_InItem_Offset;
    static readonly int SetVectorMetadata_InMetadataName_Offset;
    static readonly int SetVectorMetadata_InValue_Offset;
    static readonly int SetVectorMetadata_ReturnValue_Offset;
    
    public bool SetVectorMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, System.DoubleNumerics.Vector3 inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVectorMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetVectorMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetVectorMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetVectorMetadata_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVectorMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetVectorMetadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetVectorArrayMetadata
    static readonly IntPtr SetVectorArrayMetadata_NativeFunction;
    static readonly int SetVectorArrayMetadata_ParamsSize;
    static readonly int SetVectorArrayMetadata_InItem_Offset;
    static readonly int SetVectorArrayMetadata_InMetadataName_Offset;
    static readonly int SetVectorArrayMetadata_InValue_Offset;
    static readonly int SetVectorArrayMetadata_InValue_ElementSize;
    static readonly int SetVectorArrayMetadata_ReturnValue_Offset;
    
    public bool SetVectorArrayMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, System.Collections.Generic.IList<System.DoubleNumerics.Vector3> inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVectorArrayMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetVectorArrayMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetVectorArrayMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            IntPtr InValue_NativeBuffer = IntPtr.Add(ParamsBuffer, SetVectorArrayMetadata_InValue_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> InValue_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, SetVectorArrayMetadata_InValue_ElementSize);
            InValue_Marshaler.ToNative(InValue_NativeBuffer, 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVectorArrayMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetVectorArrayMetadata_ReturnValue_Offset), 0, null);
            
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(InValue_NativeBuffer, 0);
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetTransformMetadata
    static readonly IntPtr SetTransformMetadata_NativeFunction;
    static readonly int SetTransformMetadata_ParamsSize;
    static readonly int SetTransformMetadata_InItem_Offset;
    static readonly int SetTransformMetadata_InMetadataName_Offset;
    static readonly int SetTransformMetadata_InValue_Offset;
    static readonly int SetTransformMetadata_ReturnValue_Offset;
    
    public bool SetTransformMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, UnrealSharp.Transform inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTransformMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetTransformMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetTransformMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetTransformMetadata_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTransformMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetTransformMetadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetTransformArrayMetadata
    static readonly IntPtr SetTransformArrayMetadata_NativeFunction;
    static readonly int SetTransformArrayMetadata_ParamsSize;
    static readonly int SetTransformArrayMetadata_InItem_Offset;
    static readonly int SetTransformArrayMetadata_InMetadataName_Offset;
    static readonly int SetTransformArrayMetadata_InValue_Offset;
    static readonly int SetTransformArrayMetadata_InValue_ElementSize;
    static readonly int SetTransformArrayMetadata_ReturnValue_Offset;
    
    public bool SetTransformArrayMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, System.Collections.Generic.IList<UnrealSharp.Transform> inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTransformArrayMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetTransformArrayMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetTransformArrayMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            IntPtr InValue_NativeBuffer = IntPtr.Add(ParamsBuffer, SetTransformArrayMetadata_InValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform> InValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Transform>(1, BlittableMarshaller<UnrealSharp.Transform>.ToNative, BlittableMarshaller<UnrealSharp.Transform>.FromNative, SetTransformArrayMetadata_InValue_ElementSize);
            InValue_Marshaler.ToNative(InValue_NativeBuffer, 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTransformArrayMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetTransformArrayMetadata_ReturnValue_Offset), 0, null);
            
            UnrealArrayCopyMarshaler<UnrealSharp.Transform>.DestructInstance(InValue_NativeBuffer, 0);
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetTag
    static readonly IntPtr SetTag_NativeFunction;
    static readonly int SetTag_ParamsSize;
    static readonly int SetTag_InItem_Offset;
    static readonly int SetTag_InTag_Offset;
    static readonly int SetTag_ReturnValue_Offset;
    
    public bool SetTag(UnrealSharp.ControlRig.RigElementKey inItem, Name inTag)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTag_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetTag_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetTag_InTag_Offset), 0, null, inTag);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTag_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetTag_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetRotatorMetadata
    static readonly IntPtr SetRotatorMetadata_NativeFunction;
    static readonly int SetRotatorMetadata_ParamsSize;
    static readonly int SetRotatorMetadata_InItem_Offset;
    static readonly int SetRotatorMetadata_InMetadataName_Offset;
    static readonly int SetRotatorMetadata_InValue_Offset;
    static readonly int SetRotatorMetadata_ReturnValue_Offset;
    
    public bool SetRotatorMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, UnrealSharp.Rotator inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRotatorMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetRotatorMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetRotatorMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SetRotatorMetadata_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRotatorMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetRotatorMetadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetRotatorArrayMetadata
    static readonly IntPtr SetRotatorArrayMetadata_NativeFunction;
    static readonly int SetRotatorArrayMetadata_ParamsSize;
    static readonly int SetRotatorArrayMetadata_InItem_Offset;
    static readonly int SetRotatorArrayMetadata_InMetadataName_Offset;
    static readonly int SetRotatorArrayMetadata_InValue_Offset;
    static readonly int SetRotatorArrayMetadata_InValue_ElementSize;
    static readonly int SetRotatorArrayMetadata_ReturnValue_Offset;
    
    public bool SetRotatorArrayMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, System.Collections.Generic.IList<UnrealSharp.Rotator> inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRotatorArrayMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetRotatorArrayMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetRotatorArrayMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            IntPtr InValue_NativeBuffer = IntPtr.Add(ParamsBuffer, SetRotatorArrayMetadata_InValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Rotator> InValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Rotator>(1, BlittableMarshaller<UnrealSharp.Rotator>.ToNative, BlittableMarshaller<UnrealSharp.Rotator>.FromNative, SetRotatorArrayMetadata_InValue_ElementSize);
            InValue_Marshaler.ToNative(InValue_NativeBuffer, 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRotatorArrayMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetRotatorArrayMetadata_ReturnValue_Offset), 0, null);
            
            UnrealArrayCopyMarshaler<UnrealSharp.Rotator>.DestructInstance(InValue_NativeBuffer, 0);
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetRigElementKeyMetadata
    static readonly IntPtr SetRigElementKeyMetadata_NativeFunction;
    static readonly int SetRigElementKeyMetadata_ParamsSize;
    static readonly int SetRigElementKeyMetadata_InItem_Offset;
    static readonly int SetRigElementKeyMetadata_InMetadataName_Offset;
    static readonly int SetRigElementKeyMetadata_InValue_Offset;
    static readonly int SetRigElementKeyMetadata_ReturnValue_Offset;
    
    public bool SetRigElementKeyMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, UnrealSharp.ControlRig.RigElementKey inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRigElementKeyMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetRigElementKeyMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetRigElementKeyMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetRigElementKeyMetadata_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRigElementKeyMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetRigElementKeyMetadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetRigElementKeyArrayMetadata
    static readonly IntPtr SetRigElementKeyArrayMetadata_NativeFunction;
    static readonly int SetRigElementKeyArrayMetadata_ParamsSize;
    static readonly int SetRigElementKeyArrayMetadata_InItem_Offset;
    static readonly int SetRigElementKeyArrayMetadata_InMetadataName_Offset;
    static readonly int SetRigElementKeyArrayMetadata_InValue_Offset;
    static readonly int SetRigElementKeyArrayMetadata_InValue_ElementSize;
    static readonly int SetRigElementKeyArrayMetadata_ReturnValue_Offset;
    
    public bool SetRigElementKeyArrayMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRigElementKeyArrayMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetRigElementKeyArrayMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetRigElementKeyArrayMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            IntPtr InValue_NativeBuffer = IntPtr.Add(ParamsBuffer, SetRigElementKeyArrayMetadata_InValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> InValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey>(1, UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative, UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative, SetRigElementKeyArrayMetadata_InValue_ElementSize);
            InValue_Marshaler.ToNative(InValue_NativeBuffer, 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRigElementKeyArrayMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetRigElementKeyArrayMetadata_ReturnValue_Offset), 0, null);
            
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey>.DestructInstance(InValue_NativeBuffer, 0);
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetQuatMetadata
    static readonly IntPtr SetQuatMetadata_NativeFunction;
    static readonly int SetQuatMetadata_ParamsSize;
    static readonly int SetQuatMetadata_InItem_Offset;
    static readonly int SetQuatMetadata_InMetadataName_Offset;
    static readonly int SetQuatMetadata_InValue_Offset;
    static readonly int SetQuatMetadata_ReturnValue_Offset;
    
    public bool SetQuatMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, System.DoubleNumerics.Quaternion inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetQuatMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetQuatMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetQuatMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, SetQuatMetadata_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetQuatMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetQuatMetadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetQuatArrayMetadata
    static readonly IntPtr SetQuatArrayMetadata_NativeFunction;
    static readonly int SetQuatArrayMetadata_ParamsSize;
    static readonly int SetQuatArrayMetadata_InItem_Offset;
    static readonly int SetQuatArrayMetadata_InMetadataName_Offset;
    static readonly int SetQuatArrayMetadata_InValue_Offset;
    static readonly int SetQuatArrayMetadata_InValue_ElementSize;
    static readonly int SetQuatArrayMetadata_ReturnValue_Offset;
    
    public bool SetQuatArrayMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, System.Collections.Generic.IList<System.DoubleNumerics.Quaternion> inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetQuatArrayMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetQuatArrayMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetQuatArrayMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            IntPtr InValue_NativeBuffer = IntPtr.Add(ParamsBuffer, SetQuatArrayMetadata_InValue_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Quaternion> InValue_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Quaternion>(1, BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative, BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative, SetQuatArrayMetadata_InValue_ElementSize);
            InValue_Marshaler.ToNative(InValue_NativeBuffer, 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetQuatArrayMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetQuatArrayMetadata_ReturnValue_Offset), 0, null);
            
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Quaternion>.DestructInstance(InValue_NativeBuffer, 0);
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetPose_ForBlueprint
    static readonly IntPtr SetPose_ForBlueprint_NativeFunction;
    static readonly int SetPose_ForBlueprint_ParamsSize;
    static readonly int SetPose_ForBlueprint_InPose_Offset;
    
    public void SetPose(UnrealSharp.ControlRig.RigPose inPose)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPose_ForBlueprint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigPoseMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetPose_ForBlueprint_InPose_Offset), 0, null, inPose);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPose_ForBlueprint_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetParentWeightArray
    static readonly IntPtr SetParentWeightArray_NativeFunction;
    static readonly int SetParentWeightArray_ParamsSize;
    static readonly int SetParentWeightArray_InChild_Offset;
    static readonly int SetParentWeightArray_InWeights_Offset;
    static readonly int SetParentWeightArray_InWeights_ElementSize;
    static readonly int SetParentWeightArray_bInitial_Offset;
    static readonly int SetParentWeightArray_bAffectChildren_Offset;
    static readonly int SetParentWeightArray_ReturnValue_Offset;
    
    public bool SetParentWeightArray(UnrealSharp.ControlRig.RigElementKey inChild, System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementWeight> inWeights, bool bInitial = false, bool bAffectChildren = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetParentWeightArray_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetParentWeightArray_InChild_Offset), 0, null, inChild);
            IntPtr InWeights_NativeBuffer = IntPtr.Add(ParamsBuffer, SetParentWeightArray_InWeights_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementWeight> InWeights_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementWeight>(1, BlittableMarshaller<UnrealSharp.ControlRig.RigElementWeight>.ToNative, BlittableMarshaller<UnrealSharp.ControlRig.RigElementWeight>.FromNative, SetParentWeightArray_InWeights_ElementSize);
            InWeights_Marshaler.ToNative(InWeights_NativeBuffer, 0, null, inWeights);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetParentWeightArray_bInitial_Offset), 0, null, bInitial);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetParentWeightArray_bAffectChildren_Offset), 0, null, bAffectChildren);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetParentWeightArray_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetParentWeightArray_ReturnValue_Offset), 0, null);
            
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementWeight>.DestructInstance(InWeights_NativeBuffer, 0);
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetParentWeight
    static readonly IntPtr SetParentWeight_NativeFunction;
    static readonly int SetParentWeight_ParamsSize;
    static readonly int SetParentWeight_InChild_Offset;
    static readonly int SetParentWeight_InParent_Offset;
    static readonly int SetParentWeight_InWeight_Offset;
    static readonly int SetParentWeight_bInitial_Offset;
    static readonly int SetParentWeight_bAffectChildren_Offset;
    static readonly int SetParentWeight_ReturnValue_Offset;
    
    public bool SetParentWeight(UnrealSharp.ControlRig.RigElementKey inChild, UnrealSharp.ControlRig.RigElementKey inParent, UnrealSharp.ControlRig.RigElementWeight inWeight, bool bInitial = false, bool bAffectChildren = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetParentWeight_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetParentWeight_InChild_Offset), 0, null, inChild);
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetParentWeight_InParent_Offset), 0, null, inParent);
            BlittableMarshaller<UnrealSharp.ControlRig.RigElementWeight>.ToNative(IntPtr.Add(ParamsBuffer, SetParentWeight_InWeight_Offset), 0, null, inWeight);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetParentWeight_bInitial_Offset), 0, null, bInitial);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetParentWeight_bAffectChildren_Offset), 0, null, bAffectChildren);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetParentWeight_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetParentWeight_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetNameMetadata
    static readonly IntPtr SetNameMetadata_NativeFunction;
    static readonly int SetNameMetadata_ParamsSize;
    static readonly int SetNameMetadata_InItem_Offset;
    static readonly int SetNameMetadata_InMetadataName_Offset;
    static readonly int SetNameMetadata_InValue_Offset;
    static readonly int SetNameMetadata_ReturnValue_Offset;
    
    public bool SetNameMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, Name inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNameMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetNameMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetNameMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetNameMetadata_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNameMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetNameMetadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetNameArrayMetadata
    static readonly IntPtr SetNameArrayMetadata_NativeFunction;
    static readonly int SetNameArrayMetadata_ParamsSize;
    static readonly int SetNameArrayMetadata_InItem_Offset;
    static readonly int SetNameArrayMetadata_InMetadataName_Offset;
    static readonly int SetNameArrayMetadata_InValue_Offset;
    static readonly int SetNameArrayMetadata_InValue_ElementSize;
    static readonly int SetNameArrayMetadata_ReturnValue_Offset;
    
    public bool SetNameArrayMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, System.Collections.Generic.IList<Name> inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNameArrayMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetNameArrayMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetNameArrayMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            IntPtr InValue_NativeBuffer = IntPtr.Add(ParamsBuffer, SetNameArrayMetadata_InValue_Offset);
            UnrealArrayCopyMarshaler<Name> InValue_Marshaler = new UnrealArrayCopyMarshaler<Name>(1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, SetNameArrayMetadata_InValue_ElementSize);
            InValue_Marshaler.ToNative(InValue_NativeBuffer, 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNameArrayMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetNameArrayMetadata_ReturnValue_Offset), 0, null);
            
            UnrealArrayCopyMarshaler<Name>.DestructInstance(InValue_NativeBuffer, 0);
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetLocalTransformByIndex
    static readonly IntPtr SetLocalTransformByIndex_NativeFunction;
    static readonly int SetLocalTransformByIndex_ParamsSize;
    static readonly int SetLocalTransformByIndex_InElementIndex_Offset;
    static readonly int SetLocalTransformByIndex_InTransform_Offset;
    static readonly int SetLocalTransformByIndex_bInitial_Offset;
    static readonly int SetLocalTransformByIndex_bAffectChildren_Offset;
    static readonly int SetLocalTransformByIndex_bSetupUndo_Offset;
    static readonly int SetLocalTransformByIndex_bPrintPythonCommands_Offset;
    
    public void SetLocalTransformByIndex(int inElementIndex, UnrealSharp.Transform inTransform, bool bInitial = false, bool bAffectChildren = true, bool bSetupUndo = false, bool bPrintPythonCommands = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalTransformByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalTransformByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalTransformByIndex_InTransform_Offset), 0, null, inTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocalTransformByIndex_bInitial_Offset), 0, null, bInitial);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocalTransformByIndex_bAffectChildren_Offset), 0, null, bAffectChildren);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocalTransformByIndex_bSetupUndo_Offset), 0, null, bSetupUndo);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocalTransformByIndex_bPrintPythonCommands_Offset), 0, null, bPrintPythonCommands);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLocalTransformByIndex_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetLocalTransform
    static readonly IntPtr SetLocalTransform_NativeFunction;
    static readonly int SetLocalTransform_ParamsSize;
    static readonly int SetLocalTransform_InKey_Offset;
    static readonly int SetLocalTransform_InTransform_Offset;
    static readonly int SetLocalTransform_bInitial_Offset;
    static readonly int SetLocalTransform_bAffectChildren_Offset;
    static readonly int SetLocalTransform_bSetupUndo_Offset;
    static readonly int SetLocalTransform_bPrintPythonCommands_Offset;
    
    public void SetLocalTransform(UnrealSharp.ControlRig.RigElementKey inKey, UnrealSharp.Transform inTransform, bool bInitial = false, bool bAffectChildren = true, bool bSetupUndo = false, bool bPrintPythonCommands = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetLocalTransform_InKey_Offset), 0, null, inKey);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalTransform_InTransform_Offset), 0, null, inTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocalTransform_bInitial_Offset), 0, null, bInitial);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocalTransform_bAffectChildren_Offset), 0, null, bAffectChildren);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocalTransform_bSetupUndo_Offset), 0, null, bSetupUndo);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocalTransform_bPrintPythonCommands_Offset), 0, null, bPrintPythonCommands);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLocalTransform_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetLinearColorMetadata
    static readonly IntPtr SetLinearColorMetadata_NativeFunction;
    static readonly int SetLinearColorMetadata_ParamsSize;
    static readonly int SetLinearColorMetadata_InItem_Offset;
    static readonly int SetLinearColorMetadata_InMetadataName_Offset;
    static readonly int SetLinearColorMetadata_InValue_Offset;
    static readonly int SetLinearColorMetadata_ReturnValue_Offset;
    
    public bool SetLinearColorMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, UnrealSharp.CoreUObject.LinearColor inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLinearColorMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetLinearColorMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearColorMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearColorMetadata_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLinearColorMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetLinearColorMetadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetLinearColorArrayMetadata
    static readonly IntPtr SetLinearColorArrayMetadata_NativeFunction;
    static readonly int SetLinearColorArrayMetadata_ParamsSize;
    static readonly int SetLinearColorArrayMetadata_InItem_Offset;
    static readonly int SetLinearColorArrayMetadata_InMetadataName_Offset;
    static readonly int SetLinearColorArrayMetadata_InValue_Offset;
    static readonly int SetLinearColorArrayMetadata_InValue_ElementSize;
    static readonly int SetLinearColorArrayMetadata_ReturnValue_Offset;
    
    public bool SetLinearColorArrayMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.LinearColor> inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLinearColorArrayMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetLinearColorArrayMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearColorArrayMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            IntPtr InValue_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLinearColorArrayMetadata_InValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor> InValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor>(1, BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative, SetLinearColorArrayMetadata_InValue_ElementSize);
            InValue_Marshaler.ToNative(InValue_NativeBuffer, 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLinearColorArrayMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetLinearColorArrayMetadata_ReturnValue_Offset), 0, null);
            
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor>.DestructInstance(InValue_NativeBuffer, 0);
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetInt32Metadata
    static readonly IntPtr SetInt32Metadata_NativeFunction;
    static readonly int SetInt32Metadata_ParamsSize;
    static readonly int SetInt32Metadata_InItem_Offset;
    static readonly int SetInt32Metadata_InMetadataName_Offset;
    static readonly int SetInt32Metadata_InValue_Offset;
    static readonly int SetInt32Metadata_ReturnValue_Offset;
    
    public bool SetInt32Metadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, int inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetInt32Metadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetInt32Metadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetInt32Metadata_InMetadataName_Offset), 0, null, inMetadataName);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetInt32Metadata_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetInt32Metadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetInt32Metadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetInt32ArrayMetadata
    static readonly IntPtr SetInt32ArrayMetadata_NativeFunction;
    static readonly int SetInt32ArrayMetadata_ParamsSize;
    static readonly int SetInt32ArrayMetadata_InItem_Offset;
    static readonly int SetInt32ArrayMetadata_InMetadataName_Offset;
    static readonly int SetInt32ArrayMetadata_InValue_Offset;
    static readonly int SetInt32ArrayMetadata_InValue_ElementSize;
    static readonly int SetInt32ArrayMetadata_ReturnValue_Offset;
    
    public bool SetInt32ArrayMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, System.Collections.Generic.IList<int> inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetInt32ArrayMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetInt32ArrayMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetInt32ArrayMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            IntPtr InValue_NativeBuffer = IntPtr.Add(ParamsBuffer, SetInt32ArrayMetadata_InValue_Offset);
            UnrealArrayCopyMarshaler<int> InValue_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, SetInt32ArrayMetadata_InValue_ElementSize);
            InValue_Marshaler.ToNative(InValue_NativeBuffer, 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetInt32ArrayMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetInt32ArrayMetadata_ReturnValue_Offset), 0, null);
            
            UnrealArrayCopyMarshaler<int>.DestructInstance(InValue_NativeBuffer, 0);
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetGlobalTransformByIndex
    static readonly IntPtr SetGlobalTransformByIndex_NativeFunction;
    static readonly int SetGlobalTransformByIndex_ParamsSize;
    static readonly int SetGlobalTransformByIndex_InElementIndex_Offset;
    static readonly int SetGlobalTransformByIndex_InTransform_Offset;
    static readonly int SetGlobalTransformByIndex_bInitial_Offset;
    static readonly int SetGlobalTransformByIndex_bAffectChildren_Offset;
    static readonly int SetGlobalTransformByIndex_bSetupUndo_Offset;
    static readonly int SetGlobalTransformByIndex_bPrintPythonCommand_Offset;
    
    public void SetGlobalTransformByIndex(int inElementIndex, UnrealSharp.Transform inTransform, bool bInitial = false, bool bAffectChildren = true, bool bSetupUndo = false, bool bPrintPythonCommand = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGlobalTransformByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalTransformByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalTransformByIndex_InTransform_Offset), 0, null, inTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalTransformByIndex_bInitial_Offset), 0, null, bInitial);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalTransformByIndex_bAffectChildren_Offset), 0, null, bAffectChildren);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalTransformByIndex_bSetupUndo_Offset), 0, null, bSetupUndo);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalTransformByIndex_bPrintPythonCommand_Offset), 0, null, bPrintPythonCommand);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetGlobalTransformByIndex_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetGlobalTransform
    static readonly IntPtr SetGlobalTransform_NativeFunction;
    static readonly int SetGlobalTransform_ParamsSize;
    static readonly int SetGlobalTransform_InKey_Offset;
    static readonly int SetGlobalTransform_InTransform_Offset;
    static readonly int SetGlobalTransform_bInitial_Offset;
    static readonly int SetGlobalTransform_bAffectChildren_Offset;
    static readonly int SetGlobalTransform_bSetupUndo_Offset;
    static readonly int SetGlobalTransform_bPrintPythonCommand_Offset;
    
    public void SetGlobalTransform(UnrealSharp.ControlRig.RigElementKey inKey, UnrealSharp.Transform inTransform, bool bInitial = false, bool bAffectChildren = true, bool bSetupUndo = false, bool bPrintPythonCommand = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGlobalTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalTransform_InKey_Offset), 0, null, inKey);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalTransform_InTransform_Offset), 0, null, inTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalTransform_bInitial_Offset), 0, null, bInitial);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalTransform_bAffectChildren_Offset), 0, null, bAffectChildren);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalTransform_bSetupUndo_Offset), 0, null, bSetupUndo);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalTransform_bPrintPythonCommand_Offset), 0, null, bPrintPythonCommand);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetGlobalTransform_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetFloatMetadata
    static readonly IntPtr SetFloatMetadata_NativeFunction;
    static readonly int SetFloatMetadata_ParamsSize;
    static readonly int SetFloatMetadata_InItem_Offset;
    static readonly int SetFloatMetadata_InMetadataName_Offset;
    static readonly int SetFloatMetadata_InValue_Offset;
    static readonly int SetFloatMetadata_ReturnValue_Offset;
    
    public bool SetFloatMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, float inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFloatMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetFloatMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetFloatMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetFloatMetadata_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFloatMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetFloatMetadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetFloatArrayMetadata
    static readonly IntPtr SetFloatArrayMetadata_NativeFunction;
    static readonly int SetFloatArrayMetadata_ParamsSize;
    static readonly int SetFloatArrayMetadata_InItem_Offset;
    static readonly int SetFloatArrayMetadata_InMetadataName_Offset;
    static readonly int SetFloatArrayMetadata_InValue_Offset;
    static readonly int SetFloatArrayMetadata_InValue_ElementSize;
    static readonly int SetFloatArrayMetadata_ReturnValue_Offset;
    
    public bool SetFloatArrayMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, System.Collections.Generic.IList<float> inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFloatArrayMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetFloatArrayMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetFloatArrayMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            IntPtr InValue_NativeBuffer = IntPtr.Add(ParamsBuffer, SetFloatArrayMetadata_InValue_Offset);
            UnrealArrayCopyMarshaler<float> InValue_Marshaler = new UnrealArrayCopyMarshaler<float>(1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, SetFloatArrayMetadata_InValue_ElementSize);
            InValue_Marshaler.ToNative(InValue_NativeBuffer, 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFloatArrayMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetFloatArrayMetadata_ReturnValue_Offset), 0, null);
            
            UnrealArrayCopyMarshaler<float>.DestructInstance(InValue_NativeBuffer, 0);
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetCurveValueByIndex
    static readonly IntPtr SetCurveValueByIndex_NativeFunction;
    static readonly int SetCurveValueByIndex_ParamsSize;
    static readonly int SetCurveValueByIndex_InElementIndex_Offset;
    static readonly int SetCurveValueByIndex_InValue_Offset;
    static readonly int SetCurveValueByIndex_bSetupUndo_Offset;
    
    public void SetCurveValueByIndex(int inElementIndex, float inValue, bool bSetupUndo = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCurveValueByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetCurveValueByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCurveValueByIndex_InValue_Offset), 0, null, inValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCurveValueByIndex_bSetupUndo_Offset), 0, null, bSetupUndo);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCurveValueByIndex_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetCurveValue
    static readonly IntPtr SetCurveValue_NativeFunction;
    static readonly int SetCurveValue_ParamsSize;
    static readonly int SetCurveValue_InKey_Offset;
    static readonly int SetCurveValue_InValue_Offset;
    static readonly int SetCurveValue_bSetupUndo_Offset;
    
    public void SetCurveValue(UnrealSharp.ControlRig.RigElementKey inKey, float inValue, bool bSetupUndo = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCurveValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetCurveValue_InKey_Offset), 0, null, inKey);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCurveValue_InValue_Offset), 0, null, inValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCurveValue_bSetupUndo_Offset), 0, null, bSetupUndo);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCurveValue_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetControlVisibilityByIndex
    static readonly IntPtr SetControlVisibilityByIndex_NativeFunction;
    static readonly int SetControlVisibilityByIndex_ParamsSize;
    static readonly int SetControlVisibilityByIndex_InElementIndex_Offset;
    static readonly int SetControlVisibilityByIndex_bVisibility_Offset;
    
    public void SetControlVisibilityByIndex(int inElementIndex, bool bVisibility)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlVisibilityByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetControlVisibilityByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlVisibilityByIndex_bVisibility_Offset), 0, null, bVisibility);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlVisibilityByIndex_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetControlVisibility
    static readonly IntPtr SetControlVisibility_NativeFunction;
    static readonly int SetControlVisibility_ParamsSize;
    static readonly int SetControlVisibility_InKey_Offset;
    static readonly int SetControlVisibility_bVisibility_Offset;
    
    public void SetControlVisibility(UnrealSharp.ControlRig.RigElementKey inKey, bool bVisibility)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlVisibility_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetControlVisibility_InKey_Offset), 0, null, inKey);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlVisibility_bVisibility_Offset), 0, null, bVisibility);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlVisibility_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetControlValueByIndex
    static readonly IntPtr SetControlValueByIndex_NativeFunction;
    static readonly int SetControlValueByIndex_ParamsSize;
    static readonly int SetControlValueByIndex_InElementIndex_Offset;
    static readonly int SetControlValueByIndex_InValue_Offset;
    static readonly int SetControlValueByIndex_InValueType_Offset;
    static readonly int SetControlValueByIndex_bSetupUndo_Offset;
    static readonly int SetControlValueByIndex_bPrintPythonCommands_Offset;
    
    public void SetControlValueByIndex(int inElementIndex, UnrealSharp.ControlRig.RigControlValue inValue, UnrealSharp.ControlRig.ERigControlValueType inValueType = UnrealSharp.ControlRig.ERigControlValueType.Current, bool bSetupUndo = false, bool bPrintPythonCommands = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlValueByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetControlValueByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            UnrealSharp.ControlRig.RigControlValueMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetControlValueByIndex_InValue_Offset), 0, null, inValue);
            BlittableMarshaller<UnrealSharp.ControlRig.ERigControlValueType>.ToNative(IntPtr.Add(ParamsBuffer, SetControlValueByIndex_InValueType_Offset), 0, null, inValueType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlValueByIndex_bSetupUndo_Offset), 0, null, bSetupUndo);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlValueByIndex_bPrintPythonCommands_Offset), 0, null, bPrintPythonCommands);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlValueByIndex_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetControlValue
    static readonly IntPtr SetControlValue_NativeFunction;
    static readonly int SetControlValue_ParamsSize;
    static readonly int SetControlValue_InKey_Offset;
    static readonly int SetControlValue_InValue_Offset;
    static readonly int SetControlValue_InValueType_Offset;
    static readonly int SetControlValue_bSetupUndo_Offset;
    static readonly int SetControlValue_bPrintPythonCommands_Offset;
    
    public void SetControlValue(UnrealSharp.ControlRig.RigElementKey inKey, UnrealSharp.ControlRig.RigControlValue inValue, UnrealSharp.ControlRig.ERigControlValueType inValueType = UnrealSharp.ControlRig.ERigControlValueType.Current, bool bSetupUndo = false, bool bPrintPythonCommands = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetControlValue_InKey_Offset), 0, null, inKey);
            UnrealSharp.ControlRig.RigControlValueMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetControlValue_InValue_Offset), 0, null, inValue);
            BlittableMarshaller<UnrealSharp.ControlRig.ERigControlValueType>.ToNative(IntPtr.Add(ParamsBuffer, SetControlValue_InValueType_Offset), 0, null, inValueType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlValue_bSetupUndo_Offset), 0, null, bSetupUndo);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlValue_bPrintPythonCommands_Offset), 0, null, bPrintPythonCommands);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlValue_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetControlShapeTransformByIndex
    static readonly IntPtr SetControlShapeTransformByIndex_NativeFunction;
    static readonly int SetControlShapeTransformByIndex_ParamsSize;
    static readonly int SetControlShapeTransformByIndex_InElementIndex_Offset;
    static readonly int SetControlShapeTransformByIndex_InTransform_Offset;
    static readonly int SetControlShapeTransformByIndex_bInitial_Offset;
    static readonly int SetControlShapeTransformByIndex_bSetupUndo_Offset;
    
    public void SetControlShapeTransformByIndex(int inElementIndex, UnrealSharp.Transform inTransform, bool bInitial = false, bool bSetupUndo = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlShapeTransformByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetControlShapeTransformByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetControlShapeTransformByIndex_InTransform_Offset), 0, null, inTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlShapeTransformByIndex_bInitial_Offset), 0, null, bInitial);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlShapeTransformByIndex_bSetupUndo_Offset), 0, null, bSetupUndo);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlShapeTransformByIndex_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetControlShapeTransform
    static readonly IntPtr SetControlShapeTransform_NativeFunction;
    static readonly int SetControlShapeTransform_ParamsSize;
    static readonly int SetControlShapeTransform_InKey_Offset;
    static readonly int SetControlShapeTransform_InTransform_Offset;
    static readonly int SetControlShapeTransform_bInitial_Offset;
    static readonly int SetControlShapeTransform_bSetupUndo_Offset;
    
    public void SetControlShapeTransform(UnrealSharp.ControlRig.RigElementKey inKey, UnrealSharp.Transform inTransform, bool bInitial = false, bool bSetupUndo = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlShapeTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetControlShapeTransform_InKey_Offset), 0, null, inKey);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetControlShapeTransform_InTransform_Offset), 0, null, inTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlShapeTransform_bInitial_Offset), 0, null, bInitial);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlShapeTransform_bSetupUndo_Offset), 0, null, bSetupUndo);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlShapeTransform_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetControlSettingsByIndex
    static readonly IntPtr SetControlSettingsByIndex_NativeFunction;
    static readonly int SetControlSettingsByIndex_ParamsSize;
    static readonly int SetControlSettingsByIndex_InElementIndex_Offset;
    static readonly int SetControlSettingsByIndex_InSettings_Offset;
    static readonly int SetControlSettingsByIndex_bSetupUndo_Offset;
    static readonly int SetControlSettingsByIndex_bForce_Offset;
    static readonly int SetControlSettingsByIndex_bPrintPythonCommands_Offset;
    
    public void SetControlSettingsByIndex(int inElementIndex, UnrealSharp.ControlRig.RigControlSettings inSettings, bool bSetupUndo = false, bool bForce = false, bool bPrintPythonCommands = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlSettingsByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetControlSettingsByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            UnrealSharp.ControlRig.RigControlSettingsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetControlSettingsByIndex_InSettings_Offset), 0, null, inSettings);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlSettingsByIndex_bSetupUndo_Offset), 0, null, bSetupUndo);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlSettingsByIndex_bForce_Offset), 0, null, bForce);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlSettingsByIndex_bPrintPythonCommands_Offset), 0, null, bPrintPythonCommands);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlSettingsByIndex_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetControlSettings
    static readonly IntPtr SetControlSettings_NativeFunction;
    static readonly int SetControlSettings_ParamsSize;
    static readonly int SetControlSettings_InKey_Offset;
    static readonly int SetControlSettings_InSettings_Offset;
    static readonly int SetControlSettings_bSetupUndo_Offset;
    static readonly int SetControlSettings_bForce_Offset;
    static readonly int SetControlSettings_bPrintPythonCommands_Offset;
    
    public void SetControlSettings(UnrealSharp.ControlRig.RigElementKey inKey, UnrealSharp.ControlRig.RigControlSettings inSettings, bool bSetupUndo = false, bool bForce = false, bool bPrintPythonCommands = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetControlSettings_InKey_Offset), 0, null, inKey);
            UnrealSharp.ControlRig.RigControlSettingsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetControlSettings_InSettings_Offset), 0, null, inSettings);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlSettings_bSetupUndo_Offset), 0, null, bSetupUndo);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlSettings_bForce_Offset), 0, null, bForce);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlSettings_bPrintPythonCommands_Offset), 0, null, bPrintPythonCommands);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlSettings_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetControlPreferredRotatorByIndex
    static readonly IntPtr SetControlPreferredRotatorByIndex_NativeFunction;
    static readonly int SetControlPreferredRotatorByIndex_ParamsSize;
    static readonly int SetControlPreferredRotatorByIndex_InElementIndex_Offset;
    static readonly int SetControlPreferredRotatorByIndex_InRotator_Offset;
    static readonly int SetControlPreferredRotatorByIndex_bInitial_Offset;
    static readonly int SetControlPreferredRotatorByIndex_bFixEulerFlips_Offset;
    
    public void SetControlPreferredRotatorByIndex(int inElementIndex, UnrealSharp.Rotator inRotator, bool bInitial = false, bool bFixEulerFlips = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlPreferredRotatorByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredRotatorByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredRotatorByIndex_InRotator_Offset), 0, null, inRotator);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredRotatorByIndex_bInitial_Offset), 0, null, bInitial);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredRotatorByIndex_bFixEulerFlips_Offset), 0, null, bFixEulerFlips);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlPreferredRotatorByIndex_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetControlPreferredRotator
    static readonly IntPtr SetControlPreferredRotator_NativeFunction;
    static readonly int SetControlPreferredRotator_ParamsSize;
    static readonly int SetControlPreferredRotator_InKey_Offset;
    static readonly int SetControlPreferredRotator_InRotator_Offset;
    static readonly int SetControlPreferredRotator_bInitial_Offset;
    static readonly int SetControlPreferredRotator_bFixEulerFlips_Offset;
    
    public void SetControlPreferredRotator(UnrealSharp.ControlRig.RigElementKey inKey, UnrealSharp.Rotator inRotator, bool bInitial = false, bool bFixEulerFlips = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlPreferredRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredRotator_InKey_Offset), 0, null, inKey);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredRotator_InRotator_Offset), 0, null, inRotator);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredRotator_bInitial_Offset), 0, null, bInitial);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredRotator_bFixEulerFlips_Offset), 0, null, bFixEulerFlips);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlPreferredRotator_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetControlPreferredRotationOrderByIndex
    static readonly IntPtr SetControlPreferredRotationOrderByIndex_NativeFunction;
    static readonly int SetControlPreferredRotationOrderByIndex_ParamsSize;
    static readonly int SetControlPreferredRotationOrderByIndex_InElementIndex_Offset;
    static readonly int SetControlPreferredRotationOrderByIndex_InRotationOrder_Offset;
    
    public void SetControlPreferredRotationOrderByIndex(int inElementIndex, UnrealSharp.AnimationCore.EEulerRotationOrder inRotationOrder)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlPreferredRotationOrderByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredRotationOrderByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            BlittableMarshaller<UnrealSharp.AnimationCore.EEulerRotationOrder>.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredRotationOrderByIndex_InRotationOrder_Offset), 0, null, inRotationOrder);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlPreferredRotationOrderByIndex_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetControlPreferredRotationOrder
    static readonly IntPtr SetControlPreferredRotationOrder_NativeFunction;
    static readonly int SetControlPreferredRotationOrder_ParamsSize;
    static readonly int SetControlPreferredRotationOrder_InKey_Offset;
    static readonly int SetControlPreferredRotationOrder_InRotationOrder_Offset;
    
    public void SetControlPreferredRotationOrder(UnrealSharp.ControlRig.RigElementKey inKey, UnrealSharp.AnimationCore.EEulerRotationOrder inRotationOrder)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlPreferredRotationOrder_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredRotationOrder_InKey_Offset), 0, null, inKey);
            BlittableMarshaller<UnrealSharp.AnimationCore.EEulerRotationOrder>.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredRotationOrder_InRotationOrder_Offset), 0, null, inRotationOrder);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlPreferredRotationOrder_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetControlPreferredEulerAnglesByIndex
    static readonly IntPtr SetControlPreferredEulerAnglesByIndex_NativeFunction;
    static readonly int SetControlPreferredEulerAnglesByIndex_ParamsSize;
    static readonly int SetControlPreferredEulerAnglesByIndex_InElementIndex_Offset;
    static readonly int SetControlPreferredEulerAnglesByIndex_InEulerAngles_Offset;
    static readonly int SetControlPreferredEulerAnglesByIndex_InRotationOrder_Offset;
    static readonly int SetControlPreferredEulerAnglesByIndex_bInitial_Offset;
    static readonly int SetControlPreferredEulerAnglesByIndex_bFixEulerFlips_Offset;
    
    public void SetControlPreferredEulerAnglesByIndex(int inElementIndex, System.DoubleNumerics.Vector3 inEulerAngles, UnrealSharp.AnimationCore.EEulerRotationOrder inRotationOrder, bool bInitial = false, bool bFixEulerFlips = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlPreferredEulerAnglesByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredEulerAnglesByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredEulerAnglesByIndex_InEulerAngles_Offset), 0, null, inEulerAngles);
            BlittableMarshaller<UnrealSharp.AnimationCore.EEulerRotationOrder>.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredEulerAnglesByIndex_InRotationOrder_Offset), 0, null, inRotationOrder);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredEulerAnglesByIndex_bInitial_Offset), 0, null, bInitial);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredEulerAnglesByIndex_bFixEulerFlips_Offset), 0, null, bFixEulerFlips);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlPreferredEulerAnglesByIndex_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetControlPreferredEulerAngles
    static readonly IntPtr SetControlPreferredEulerAngles_NativeFunction;
    static readonly int SetControlPreferredEulerAngles_ParamsSize;
    static readonly int SetControlPreferredEulerAngles_InKey_Offset;
    static readonly int SetControlPreferredEulerAngles_InEulerAngles_Offset;
    static readonly int SetControlPreferredEulerAngles_InRotationOrder_Offset;
    static readonly int SetControlPreferredEulerAngles_bInitial_Offset;
    static readonly int SetControlPreferredEulerAngles_bFixEulerFlips_Offset;
    
    public void SetControlPreferredEulerAngles(UnrealSharp.ControlRig.RigElementKey inKey, System.DoubleNumerics.Vector3 inEulerAngles, UnrealSharp.AnimationCore.EEulerRotationOrder inRotationOrder, bool bInitial = false, bool bFixEulerFlips = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlPreferredEulerAngles_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredEulerAngles_InKey_Offset), 0, null, inKey);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredEulerAngles_InEulerAngles_Offset), 0, null, inEulerAngles);
            BlittableMarshaller<UnrealSharp.AnimationCore.EEulerRotationOrder>.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredEulerAngles_InRotationOrder_Offset), 0, null, inRotationOrder);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredEulerAngles_bInitial_Offset), 0, null, bInitial);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlPreferredEulerAngles_bFixEulerFlips_Offset), 0, null, bFixEulerFlips);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlPreferredEulerAngles_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetControlOffsetTransformByIndex
    static readonly IntPtr SetControlOffsetTransformByIndex_NativeFunction;
    static readonly int SetControlOffsetTransformByIndex_ParamsSize;
    static readonly int SetControlOffsetTransformByIndex_InElementIndex_Offset;
    static readonly int SetControlOffsetTransformByIndex_InTransform_Offset;
    static readonly int SetControlOffsetTransformByIndex_bInitial_Offset;
    static readonly int SetControlOffsetTransformByIndex_bAffectChildren_Offset;
    static readonly int SetControlOffsetTransformByIndex_bSetupUndo_Offset;
    static readonly int SetControlOffsetTransformByIndex_bPrintPythonCommands_Offset;
    
    public void SetControlOffsetTransformByIndex(int inElementIndex, UnrealSharp.Transform inTransform, bool bInitial = false, bool bAffectChildren = true, bool bSetupUndo = false, bool bPrintPythonCommands = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlOffsetTransformByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetControlOffsetTransformByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetControlOffsetTransformByIndex_InTransform_Offset), 0, null, inTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlOffsetTransformByIndex_bInitial_Offset), 0, null, bInitial);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlOffsetTransformByIndex_bAffectChildren_Offset), 0, null, bAffectChildren);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlOffsetTransformByIndex_bSetupUndo_Offset), 0, null, bSetupUndo);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlOffsetTransformByIndex_bPrintPythonCommands_Offset), 0, null, bPrintPythonCommands);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlOffsetTransformByIndex_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetControlOffsetTransform
    static readonly IntPtr SetControlOffsetTransform_NativeFunction;
    static readonly int SetControlOffsetTransform_ParamsSize;
    static readonly int SetControlOffsetTransform_InKey_Offset;
    static readonly int SetControlOffsetTransform_InTransform_Offset;
    static readonly int SetControlOffsetTransform_bInitial_Offset;
    static readonly int SetControlOffsetTransform_bAffectChildren_Offset;
    static readonly int SetControlOffsetTransform_bSetupUndo_Offset;
    static readonly int SetControlOffsetTransform_bPrintPythonCommands_Offset;
    
    public void SetControlOffsetTransform(UnrealSharp.ControlRig.RigElementKey inKey, UnrealSharp.Transform inTransform, bool bInitial = false, bool bAffectChildren = true, bool bSetupUndo = false, bool bPrintPythonCommands = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlOffsetTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetControlOffsetTransform_InKey_Offset), 0, null, inKey);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetControlOffsetTransform_InTransform_Offset), 0, null, inTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlOffsetTransform_bInitial_Offset), 0, null, bInitial);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlOffsetTransform_bAffectChildren_Offset), 0, null, bAffectChildren);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlOffsetTransform_bSetupUndo_Offset), 0, null, bSetupUndo);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlOffsetTransform_bPrintPythonCommands_Offset), 0, null, bPrintPythonCommands);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlOffsetTransform_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetBoolMetadata
    static readonly IntPtr SetBoolMetadata_NativeFunction;
    static readonly int SetBoolMetadata_ParamsSize;
    static readonly int SetBoolMetadata_InItem_Offset;
    static readonly int SetBoolMetadata_InMetadataName_Offset;
    static readonly int SetBoolMetadata_InValue_Offset;
    static readonly int SetBoolMetadata_ReturnValue_Offset;
    
    public bool SetBoolMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, bool inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBoolMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetBoolMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetBoolMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetBoolMetadata_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBoolMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetBoolMetadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SetBoolArrayMetadata
    static readonly IntPtr SetBoolArrayMetadata_NativeFunction;
    static readonly int SetBoolArrayMetadata_ParamsSize;
    static readonly int SetBoolArrayMetadata_InItem_Offset;
    static readonly int SetBoolArrayMetadata_InMetadataName_Offset;
    static readonly int SetBoolArrayMetadata_InValue_Offset;
    static readonly int SetBoolArrayMetadata_InValue_ElementSize;
    static readonly int SetBoolArrayMetadata_ReturnValue_Offset;
    
    public bool SetBoolArrayMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, System.Collections.Generic.IList<bool> inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBoolArrayMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetBoolArrayMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetBoolArrayMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            IntPtr InValue_NativeBuffer = IntPtr.Add(ParamsBuffer, SetBoolArrayMetadata_InValue_Offset);
            UnrealArrayCopyMarshaler<bool> InValue_Marshaler = new UnrealArrayCopyMarshaler<bool>(1, BoolMarshaller.ToNative, BoolMarshaller.FromNative, SetBoolArrayMetadata_InValue_ElementSize);
            InValue_Marshaler.ToNative(InValue_NativeBuffer, 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBoolArrayMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetBoolArrayMetadata_ReturnValue_Offset), 0, null);
            
            UnrealArrayCopyMarshaler<bool>.DestructInstance(InValue_NativeBuffer, 0);
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:SendAutoKeyEvent
    static readonly IntPtr SendAutoKeyEvent_NativeFunction;
    static readonly int SendAutoKeyEvent_ParamsSize;
    static readonly int SendAutoKeyEvent_InElement_Offset;
    static readonly int SendAutoKeyEvent_InOffsetInSeconds_Offset;
    static readonly int SendAutoKeyEvent_bAsynchronous_Offset;
    
    public void SendAutoKeyEvent(UnrealSharp.ControlRig.RigElementKey inElement, float inOffsetInSeconds = 0.000000f, bool bAsynchronous = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SendAutoKeyEvent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SendAutoKeyEvent_InElement_Offset), 0, null, inElement);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SendAutoKeyEvent_InOffsetInSeconds_Offset), 0, null, inOffsetInSeconds);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SendAutoKeyEvent_bAsynchronous_Offset), 0, null, bAsynchronous);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SendAutoKeyEvent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:ResetToDefault
    static readonly IntPtr ResetToDefault_NativeFunction;
    
    public void ResetToDefault()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetToDefault_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:ResetPoseToInitial
    static readonly IntPtr ResetPoseToInitial_NativeFunction;
    static readonly int ResetPoseToInitial_ParamsSize;
    static readonly int ResetPoseToInitial_InTypeFilter_Offset;
    
    public void ResetPoseToInitial(UnrealSharp.ControlRig.ERigElementType inTypeFilter)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ResetPoseToInitial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.ControlRig.ERigElementType>.ToNative(IntPtr.Add(ParamsBuffer, ResetPoseToInitial_InTypeFilter_Offset), 0, null, inTypeFilter);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetPoseToInitial_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:ResetCurveValues
    static readonly IntPtr ResetCurveValues_NativeFunction;
    
    public void ResetCurveValues()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetCurveValues_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:Reset
    static readonly IntPtr Reset_NativeFunction;
    
    public void Reset()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Reset_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:RemoveMetadata
    static readonly IntPtr RemoveMetadata_NativeFunction;
    static readonly int RemoveMetadata_ParamsSize;
    static readonly int RemoveMetadata_InItem_Offset;
    static readonly int RemoveMetadata_InMetadataName_Offset;
    static readonly int RemoveMetadata_ReturnValue_Offset;
    
    public bool RemoveMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, RemoveMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RemoveMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RemoveMetadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:RemoveAllMetadata
    static readonly IntPtr RemoveAllMetadata_NativeFunction;
    static readonly int RemoveAllMetadata_ParamsSize;
    static readonly int RemoveAllMetadata_InItem_Offset;
    static readonly int RemoveAllMetadata_ReturnValue_Offset;
    
    public bool RemoveAllMetadata(UnrealSharp.ControlRig.RigElementKey inItem)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveAllMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, RemoveAllMetadata_InItem_Offset), 0, null, inItem);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveAllMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RemoveAllMetadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:Num
    static readonly IntPtr Num_NativeFunction;
    static readonly int Num_ParamsSize;
    static readonly int Num_ReturnValue_Offset;
    
    public int Num()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Num_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Num_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Num_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:MakeControlValueFromVector2D
    static readonly IntPtr MakeControlValueFromVector2D_NativeFunction;
    static readonly int MakeControlValueFromVector2D_ParamsSize;
    static readonly int MakeControlValueFromVector2D_InValue_Offset;
    static readonly int MakeControlValueFromVector2D_ReturnValue_Offset;
    
    public static UnrealSharp.ControlRig.RigControlValue MakeControlValueFromVector2D(System.DoubleNumerics.Vector2 inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeControlValueFromVector2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, MakeControlValueFromVector2D_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeControlValueFromVector2D_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigControlValue returnValue;
            returnValue = UnrealSharp.ControlRig.RigControlValueMarshaler.FromNative(IntPtr.Add(ParamsBuffer, MakeControlValueFromVector2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:MakeControlValueFromVector
    static readonly IntPtr MakeControlValueFromVector_NativeFunction;
    static readonly int MakeControlValueFromVector_ParamsSize;
    static readonly int MakeControlValueFromVector_InValue_Offset;
    static readonly int MakeControlValueFromVector_ReturnValue_Offset;
    
    public static UnrealSharp.ControlRig.RigControlValue MakeControlValueFromVector(System.DoubleNumerics.Vector3 inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeControlValueFromVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakeControlValueFromVector_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeControlValueFromVector_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigControlValue returnValue;
            returnValue = UnrealSharp.ControlRig.RigControlValueMarshaler.FromNative(IntPtr.Add(ParamsBuffer, MakeControlValueFromVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:MakeControlValueFromTransformNoScale
    static readonly IntPtr MakeControlValueFromTransformNoScale_NativeFunction;
    static readonly int MakeControlValueFromTransformNoScale_ParamsSize;
    static readonly int MakeControlValueFromTransformNoScale_InValue_Offset;
    static readonly int MakeControlValueFromTransformNoScale_ReturnValue_Offset;
    
    public static UnrealSharp.ControlRig.RigControlValue MakeControlValueFromTransformNoScale(UnrealSharp.AnimationCore.TransformNoScale inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeControlValueFromTransformNoScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.AnimationCore.TransformNoScaleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, MakeControlValueFromTransformNoScale_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeControlValueFromTransformNoScale_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigControlValue returnValue;
            returnValue = UnrealSharp.ControlRig.RigControlValueMarshaler.FromNative(IntPtr.Add(ParamsBuffer, MakeControlValueFromTransformNoScale_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:MakeControlValueFromTransform
    static readonly IntPtr MakeControlValueFromTransform_NativeFunction;
    static readonly int MakeControlValueFromTransform_ParamsSize;
    static readonly int MakeControlValueFromTransform_InValue_Offset;
    static readonly int MakeControlValueFromTransform_ReturnValue_Offset;
    
    public static UnrealSharp.ControlRig.RigControlValue MakeControlValueFromTransform(UnrealSharp.Transform inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeControlValueFromTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, MakeControlValueFromTransform_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeControlValueFromTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigControlValue returnValue;
            returnValue = UnrealSharp.ControlRig.RigControlValueMarshaler.FromNative(IntPtr.Add(ParamsBuffer, MakeControlValueFromTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:MakeControlValueFromRotator
    static readonly IntPtr MakeControlValueFromRotator_NativeFunction;
    static readonly int MakeControlValueFromRotator_ParamsSize;
    static readonly int MakeControlValueFromRotator_InValue_Offset;
    static readonly int MakeControlValueFromRotator_ReturnValue_Offset;
    
    public static UnrealSharp.ControlRig.RigControlValue MakeControlValueFromRotator(UnrealSharp.Rotator inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeControlValueFromRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, MakeControlValueFromRotator_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeControlValueFromRotator_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigControlValue returnValue;
            returnValue = UnrealSharp.ControlRig.RigControlValueMarshaler.FromNative(IntPtr.Add(ParamsBuffer, MakeControlValueFromRotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:MakeControlValueFromInt
    static readonly IntPtr MakeControlValueFromInt_NativeFunction;
    static readonly int MakeControlValueFromInt_ParamsSize;
    static readonly int MakeControlValueFromInt_InValue_Offset;
    static readonly int MakeControlValueFromInt_ReturnValue_Offset;
    
    public static UnrealSharp.ControlRig.RigControlValue MakeControlValueFromInt(int inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeControlValueFromInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, MakeControlValueFromInt_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeControlValueFromInt_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigControlValue returnValue;
            returnValue = UnrealSharp.ControlRig.RigControlValueMarshaler.FromNative(IntPtr.Add(ParamsBuffer, MakeControlValueFromInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:MakeControlValueFromFloat
    static readonly IntPtr MakeControlValueFromFloat_NativeFunction;
    static readonly int MakeControlValueFromFloat_ParamsSize;
    static readonly int MakeControlValueFromFloat_InValue_Offset;
    static readonly int MakeControlValueFromFloat_ReturnValue_Offset;
    
    public static UnrealSharp.ControlRig.RigControlValue MakeControlValueFromFloat(float inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeControlValueFromFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, MakeControlValueFromFloat_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeControlValueFromFloat_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigControlValue returnValue;
            returnValue = UnrealSharp.ControlRig.RigControlValueMarshaler.FromNative(IntPtr.Add(ParamsBuffer, MakeControlValueFromFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:MakeControlValueFromEulerTransform
    static readonly IntPtr MakeControlValueFromEulerTransform_NativeFunction;
    static readonly int MakeControlValueFromEulerTransform_ParamsSize;
    static readonly int MakeControlValueFromEulerTransform_InValue_Offset;
    static readonly int MakeControlValueFromEulerTransform_ReturnValue_Offset;
    
    public static UnrealSharp.ControlRig.RigControlValue MakeControlValueFromEulerTransform(UnrealSharp.AnimationCore.EulerTransform inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeControlValueFromEulerTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.AnimationCore.EulerTransform>.ToNative(IntPtr.Add(ParamsBuffer, MakeControlValueFromEulerTransform_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeControlValueFromEulerTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigControlValue returnValue;
            returnValue = UnrealSharp.ControlRig.RigControlValueMarshaler.FromNative(IntPtr.Add(ParamsBuffer, MakeControlValueFromEulerTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:MakeControlValueFromBool
    static readonly IntPtr MakeControlValueFromBool_NativeFunction;
    static readonly int MakeControlValueFromBool_ParamsSize;
    static readonly int MakeControlValueFromBool_InValue_Offset;
    static readonly int MakeControlValueFromBool_ReturnValue_Offset;
    
    public static UnrealSharp.ControlRig.RigControlValue MakeControlValueFromBool(bool inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeControlValueFromBool_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, MakeControlValueFromBool_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeControlValueFromBool_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigControlValue returnValue;
            returnValue = UnrealSharp.ControlRig.RigControlValueMarshaler.FromNative(IntPtr.Add(ParamsBuffer, MakeControlValueFromBool_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:IsValidIndex
    static readonly IntPtr IsValidIndex_NativeFunction;
    static readonly int IsValidIndex_ParamsSize;
    static readonly int IsValidIndex_InElementIndex_Offset;
    static readonly int IsValidIndex_ReturnValue_Offset;
    
    public bool IsValidIndex(int inElementIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValidIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, IsValidIndex_InElementIndex_Offset), 0, null, inElementIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsValidIndex_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValidIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:IsSelectedByIndex
    static readonly IntPtr IsSelectedByIndex_NativeFunction;
    static readonly int IsSelectedByIndex_ParamsSize;
    static readonly int IsSelectedByIndex_InIndex_Offset;
    static readonly int IsSelectedByIndex_ReturnValue_Offset;
    
    public bool IsSelectedByIndex(int inIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsSelectedByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, IsSelectedByIndex_InIndex_Offset), 0, null, inIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsSelectedByIndex_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsSelectedByIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:IsSelected
    static readonly IntPtr IsSelected_NativeFunction;
    static readonly int IsSelected_ParamsSize;
    static readonly int IsSelected_InKey_Offset;
    static readonly int IsSelected_ReturnValue_Offset;
    
    public bool IsSelected(UnrealSharp.ControlRig.RigElementKey inKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsSelected_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsSelected_InKey_Offset), 0, null, inKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsSelected_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsSelected_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:IsProcedural
    static readonly IntPtr IsProcedural_NativeFunction;
    static readonly int IsProcedural_ParamsSize;
    static readonly int IsProcedural_InKey_Offset;
    static readonly int IsProcedural_ReturnValue_Offset;
    
    public bool IsProcedural(UnrealSharp.ControlRig.RigElementKey inKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsProcedural_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsProcedural_InKey_Offset), 0, null, inKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsProcedural_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsProcedural_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:IsParentedTo
    static readonly IntPtr IsParentedTo_NativeFunction;
    static readonly int IsParentedTo_ParamsSize;
    static readonly int IsParentedTo_InChild_Offset;
    static readonly int IsParentedTo_InParent_Offset;
    static readonly int IsParentedTo_ReturnValue_Offset;
    
    public bool IsParentedTo(UnrealSharp.ControlRig.RigElementKey inChild, UnrealSharp.ControlRig.RigElementKey inParent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsParentedTo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsParentedTo_InChild_Offset), 0, null, inChild);
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsParentedTo_InParent_Offset), 0, null, inParent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsParentedTo_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsParentedTo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:IsCurveValueSetByIndex
    static readonly IntPtr IsCurveValueSetByIndex_NativeFunction;
    static readonly int IsCurveValueSetByIndex_ParamsSize;
    static readonly int IsCurveValueSetByIndex_InElementIndex_Offset;
    static readonly int IsCurveValueSetByIndex_ReturnValue_Offset;
    
    public bool IsCurveValueSetByIndex(int inElementIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsCurveValueSetByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, IsCurveValueSetByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsCurveValueSetByIndex_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsCurveValueSetByIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:IsCurveValueSet
    static readonly IntPtr IsCurveValueSet_NativeFunction;
    static readonly int IsCurveValueSet_ParamsSize;
    static readonly int IsCurveValueSet_InKey_Offset;
    static readonly int IsCurveValueSet_ReturnValue_Offset;
    
    public bool IsCurveValueSet(UnrealSharp.ControlRig.RigElementKey inKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsCurveValueSet_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsCurveValueSet_InKey_Offset), 0, null, inKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsCurveValueSet_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsCurveValueSet_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:IsControllerAvailable
    static readonly IntPtr IsControllerAvailable_NativeFunction;
    static readonly int IsControllerAvailable_ParamsSize;
    static readonly int IsControllerAvailable_ReturnValue_Offset;
    
    public bool IsControllerAvailable()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsControllerAvailable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsControllerAvailable_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsControllerAvailable_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:HasTag
    static readonly IntPtr HasTag_NativeFunction;
    static readonly int HasTag_ParamsSize;
    static readonly int HasTag_InItem_Offset;
    static readonly int HasTag_InTag_Offset;
    static readonly int HasTag_ReturnValue_Offset;
    
    public bool HasTag(UnrealSharp.ControlRig.RigElementKey inItem, Name inTag)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasTag_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, HasTag_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, HasTag_InTag_Offset), 0, null, inTag);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasTag_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasTag_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetVectorMetadata
    static readonly IntPtr GetVectorMetadata_NativeFunction;
    static readonly int GetVectorMetadata_ParamsSize;
    static readonly int GetVectorMetadata_InItem_Offset;
    static readonly int GetVectorMetadata_InMetadataName_Offset;
    static readonly int GetVectorMetadata_DefaultValue_Offset;
    static readonly int GetVectorMetadata_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetVectorMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, System.DoubleNumerics.Vector3 defaultValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVectorMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetVectorMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetVectorMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetVectorMetadata_DefaultValue_Offset), 0, null, defaultValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVectorMetadata_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetVectorMetadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetVectorFromControlValue
    static readonly IntPtr GetVectorFromControlValue_NativeFunction;
    static readonly int GetVectorFromControlValue_ParamsSize;
    static readonly int GetVectorFromControlValue_InValue_Offset;
    static readonly int GetVectorFromControlValue_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetVectorFromControlValue(UnrealSharp.ControlRig.RigControlValue inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVectorFromControlValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigControlValueMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetVectorFromControlValue_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetVectorFromControlValue_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetVectorFromControlValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetVectorArrayMetadata
    static readonly IntPtr GetVectorArrayMetadata_NativeFunction;
    static readonly int GetVectorArrayMetadata_ParamsSize;
    static readonly int GetVectorArrayMetadata_InItem_Offset;
    static readonly int GetVectorArrayMetadata_InMetadataName_Offset;
    static readonly int GetVectorArrayMetadata_ReturnValue_Offset;
    static readonly int GetVectorArrayMetadata_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<System.DoubleNumerics.Vector3> GetVectorArrayMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVectorArrayMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetVectorArrayMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetVectorArrayMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVectorArrayMetadata_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<System.DoubleNumerics.Vector3> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetVectorArrayMetadata_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GetVectorArrayMetadata_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetVector2DFromControlValue
    static readonly IntPtr GetVector2DFromControlValue_NativeFunction;
    static readonly int GetVector2DFromControlValue_ParamsSize;
    static readonly int GetVector2DFromControlValue_InValue_Offset;
    static readonly int GetVector2DFromControlValue_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 GetVector2DFromControlValue(UnrealSharp.ControlRig.RigControlValue inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVector2DFromControlValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigControlValueMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetVector2DFromControlValue_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetVector2DFromControlValue_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, GetVector2DFromControlValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetTransformNoScaleFromControlValue
    static readonly IntPtr GetTransformNoScaleFromControlValue_NativeFunction;
    static readonly int GetTransformNoScaleFromControlValue_ParamsSize;
    static readonly int GetTransformNoScaleFromControlValue_InValue_Offset;
    static readonly int GetTransformNoScaleFromControlValue_ReturnValue_Offset;
    
    public static UnrealSharp.AnimationCore.TransformNoScale GetTransformNoScaleFromControlValue(UnrealSharp.ControlRig.RigControlValue inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTransformNoScaleFromControlValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigControlValueMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetTransformNoScaleFromControlValue_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetTransformNoScaleFromControlValue_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AnimationCore.TransformNoScale returnValue;
            returnValue = UnrealSharp.AnimationCore.TransformNoScaleMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetTransformNoScaleFromControlValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetTransformMetadata
    static readonly IntPtr GetTransformMetadata_NativeFunction;
    static readonly int GetTransformMetadata_ParamsSize;
    static readonly int GetTransformMetadata_InItem_Offset;
    static readonly int GetTransformMetadata_InMetadataName_Offset;
    static readonly int GetTransformMetadata_DefaultValue_Offset;
    static readonly int GetTransformMetadata_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetTransformMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, UnrealSharp.Transform defaultValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTransformMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetTransformMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetTransformMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, GetTransformMetadata_DefaultValue_Offset), 0, null, defaultValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTransformMetadata_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetTransformMetadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetTransformFromControlValue
    static readonly IntPtr GetTransformFromControlValue_NativeFunction;
    static readonly int GetTransformFromControlValue_ParamsSize;
    static readonly int GetTransformFromControlValue_InValue_Offset;
    static readonly int GetTransformFromControlValue_ReturnValue_Offset;
    
    public static UnrealSharp.Transform GetTransformFromControlValue(UnrealSharp.ControlRig.RigControlValue inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTransformFromControlValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigControlValueMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetTransformFromControlValue_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetTransformFromControlValue_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetTransformFromControlValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetTransformArrayMetadata
    static readonly IntPtr GetTransformArrayMetadata_NativeFunction;
    static readonly int GetTransformArrayMetadata_ParamsSize;
    static readonly int GetTransformArrayMetadata_InItem_Offset;
    static readonly int GetTransformArrayMetadata_InMetadataName_Offset;
    static readonly int GetTransformArrayMetadata_ReturnValue_Offset;
    static readonly int GetTransformArrayMetadata_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.Transform> GetTransformArrayMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTransformArrayMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetTransformArrayMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetTransformArrayMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTransformArrayMetadata_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.Transform> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetTransformArrayMetadata_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Transform> (1, BlittableMarshaller<UnrealSharp.Transform>.ToNative, BlittableMarshaller<UnrealSharp.Transform>.FromNative, GetTransformArrayMetadata_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetTags
    static readonly IntPtr GetTags_NativeFunction;
    static readonly int GetTags_ParamsSize;
    static readonly int GetTags_InItem_Offset;
    static readonly int GetTags_ReturnValue_Offset;
    static readonly int GetTags_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<Name> GetTags(UnrealSharp.ControlRig.RigElementKey inItem)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTags_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetTags_InItem_Offset), 0, null, inItem);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTags_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<Name> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetTags_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<Name> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetTags_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetSelectedKeys
    static readonly IntPtr GetSelectedKeys_NativeFunction;
    static readonly int GetSelectedKeys_ParamsSize;
    static readonly int GetSelectedKeys_InTypeFilter_Offset;
    static readonly int GetSelectedKeys_ReturnValue_Offset;
    static readonly int GetSelectedKeys_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> GetSelectedKeys(UnrealSharp.ControlRig.ERigElementType inTypeFilter = UnrealSharp.ControlRig.ERigElementType.All)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSelectedKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.ControlRig.ERigElementType>.ToNative(IntPtr.Add(ParamsBuffer, GetSelectedKeys_InTypeFilter_Offset), 0, null, inTypeFilter);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSelectedKeys_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSelectedKeys_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> (1, UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative, UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative, GetSelectedKeys_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetRotatorMetadata
    static readonly IntPtr GetRotatorMetadata_NativeFunction;
    static readonly int GetRotatorMetadata_ParamsSize;
    static readonly int GetRotatorMetadata_InItem_Offset;
    static readonly int GetRotatorMetadata_InMetadataName_Offset;
    static readonly int GetRotatorMetadata_DefaultValue_Offset;
    static readonly int GetRotatorMetadata_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetRotatorMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, UnrealSharp.Rotator defaultValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRotatorMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetRotatorMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetRotatorMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, GetRotatorMetadata_DefaultValue_Offset), 0, null, defaultValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRotatorMetadata_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetRotatorMetadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetRotatorFromControlValue
    static readonly IntPtr GetRotatorFromControlValue_NativeFunction;
    static readonly int GetRotatorFromControlValue_ParamsSize;
    static readonly int GetRotatorFromControlValue_InValue_Offset;
    static readonly int GetRotatorFromControlValue_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator GetRotatorFromControlValue(UnrealSharp.ControlRig.RigControlValue inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRotatorFromControlValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigControlValueMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetRotatorFromControlValue_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetRotatorFromControlValue_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetRotatorFromControlValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetRotatorArrayMetadata
    static readonly IntPtr GetRotatorArrayMetadata_NativeFunction;
    static readonly int GetRotatorArrayMetadata_ParamsSize;
    static readonly int GetRotatorArrayMetadata_InItem_Offset;
    static readonly int GetRotatorArrayMetadata_InMetadataName_Offset;
    static readonly int GetRotatorArrayMetadata_ReturnValue_Offset;
    static readonly int GetRotatorArrayMetadata_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.Rotator> GetRotatorArrayMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRotatorArrayMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetRotatorArrayMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetRotatorArrayMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRotatorArrayMetadata_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.Rotator> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetRotatorArrayMetadata_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Rotator> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Rotator> (1, BlittableMarshaller<UnrealSharp.Rotator>.ToNative, BlittableMarshaller<UnrealSharp.Rotator>.FromNative, GetRotatorArrayMetadata_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Rotator>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetRootElementKeys
    static readonly IntPtr GetRootElementKeys_NativeFunction;
    static readonly int GetRootElementKeys_ParamsSize;
    static readonly int GetRootElementKeys_ReturnValue_Offset;
    static readonly int GetRootElementKeys_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> GetRootElements()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRootElementKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRootElementKeys_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetRootElementKeys_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> (1, UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative, UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative, GetRootElementKeys_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetRigidBodyKeys
    static readonly IntPtr GetRigidBodyKeys_NativeFunction;
    static readonly int GetRigidBodyKeys_ParamsSize;
    static readonly int GetRigidBodyKeys_bTraverse_Offset;
    static readonly int GetRigidBodyKeys_ReturnValue_Offset;
    static readonly int GetRigidBodyKeys_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> GetRigidBodies(bool bTraverse = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRigidBodyKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetRigidBodyKeys_bTraverse_Offset), 0, null, bTraverse);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRigidBodyKeys_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetRigidBodyKeys_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> (1, UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative, UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative, GetRigidBodyKeys_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetRigElementKeyMetadata
    static readonly IntPtr GetRigElementKeyMetadata_NativeFunction;
    static readonly int GetRigElementKeyMetadata_ParamsSize;
    static readonly int GetRigElementKeyMetadata_InItem_Offset;
    static readonly int GetRigElementKeyMetadata_InMetadataName_Offset;
    static readonly int GetRigElementKeyMetadata_DefaultValue_Offset;
    static readonly int GetRigElementKeyMetadata_ReturnValue_Offset;
    
    public UnrealSharp.ControlRig.RigElementKey GetRigElementKeyMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, UnrealSharp.ControlRig.RigElementKey defaultValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRigElementKeyMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetRigElementKeyMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetRigElementKeyMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetRigElementKeyMetadata_DefaultValue_Offset), 0, null, defaultValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRigElementKeyMetadata_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigElementKey returnValue;
            returnValue = UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetRigElementKeyMetadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetRigElementKeyArrayMetadata
    static readonly IntPtr GetRigElementKeyArrayMetadata_NativeFunction;
    static readonly int GetRigElementKeyArrayMetadata_ParamsSize;
    static readonly int GetRigElementKeyArrayMetadata_InItem_Offset;
    static readonly int GetRigElementKeyArrayMetadata_InMetadataName_Offset;
    static readonly int GetRigElementKeyArrayMetadata_ReturnValue_Offset;
    static readonly int GetRigElementKeyArrayMetadata_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> GetRigElementKeyArrayMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRigElementKeyArrayMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetRigElementKeyArrayMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetRigElementKeyArrayMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRigElementKeyArrayMetadata_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetRigElementKeyArrayMetadata_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> (1, UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative, UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative, GetRigElementKeyArrayMetadata_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetReferenceKeys
    static readonly IntPtr GetReferenceKeys_NativeFunction;
    static readonly int GetReferenceKeys_ParamsSize;
    static readonly int GetReferenceKeys_bTraverse_Offset;
    static readonly int GetReferenceKeys_ReturnValue_Offset;
    static readonly int GetReferenceKeys_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> GetReferences(bool bTraverse = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetReferenceKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetReferenceKeys_bTraverse_Offset), 0, null, bTraverse);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetReferenceKeys_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetReferenceKeys_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> (1, UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative, UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative, GetReferenceKeys_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetQuatMetadata
    static readonly IntPtr GetQuatMetadata_NativeFunction;
    static readonly int GetQuatMetadata_ParamsSize;
    static readonly int GetQuatMetadata_InItem_Offset;
    static readonly int GetQuatMetadata_InMetadataName_Offset;
    static readonly int GetQuatMetadata_DefaultValue_Offset;
    static readonly int GetQuatMetadata_ReturnValue_Offset;
    
    public System.DoubleNumerics.Quaternion GetQuatMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, System.DoubleNumerics.Quaternion defaultValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetQuatMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetQuatMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetQuatMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, GetQuatMetadata_DefaultValue_Offset), 0, null, defaultValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetQuatMetadata_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Quaternion returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, GetQuatMetadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetQuatArrayMetadata
    static readonly IntPtr GetQuatArrayMetadata_NativeFunction;
    static readonly int GetQuatArrayMetadata_ParamsSize;
    static readonly int GetQuatArrayMetadata_InItem_Offset;
    static readonly int GetQuatArrayMetadata_InMetadataName_Offset;
    static readonly int GetQuatArrayMetadata_ReturnValue_Offset;
    static readonly int GetQuatArrayMetadata_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<System.DoubleNumerics.Quaternion> GetQuatArrayMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetQuatArrayMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetQuatArrayMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetQuatArrayMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetQuatArrayMetadata_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<System.DoubleNumerics.Quaternion> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetQuatArrayMetadata_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Quaternion> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Quaternion> (1, BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative, BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative, GetQuatArrayMetadata_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Quaternion>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetPreviousParent
    static readonly IntPtr GetPreviousParent_NativeFunction;
    static readonly int GetPreviousParent_ParamsSize;
    static readonly int GetPreviousParent_InKey_Offset;
    static readonly int GetPreviousParent_ReturnValue_Offset;
    
    public UnrealSharp.ControlRig.RigElementKey GetPreviousParent(UnrealSharp.ControlRig.RigElementKey inKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPreviousParent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetPreviousParent_InKey_Offset), 0, null, inKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPreviousParent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigElementKey returnValue;
            returnValue = UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetPreviousParent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetPreviousName
    static readonly IntPtr GetPreviousName_NativeFunction;
    static readonly int GetPreviousName_ParamsSize;
    static readonly int GetPreviousName_InKey_Offset;
    static readonly int GetPreviousName_ReturnValue_Offset;
    
    public Name GetPreviousName(UnrealSharp.ControlRig.RigElementKey inKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPreviousName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetPreviousName_InKey_Offset), 0, null, inKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPreviousName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetPreviousName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetPose
    static readonly IntPtr GetPose_NativeFunction;
    static readonly int GetPose_ParamsSize;
    static readonly int GetPose_bInitial_Offset;
    static readonly int GetPose_ReturnValue_Offset;
    
    public UnrealSharp.ControlRig.RigPose GetPose(bool bInitial = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPose_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetPose_bInitial_Offset), 0, null, bInitial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPose_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigPose returnValue;
            returnValue = UnrealSharp.ControlRig.RigPoseMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetPose_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetParentWeightArray
    static readonly IntPtr GetParentWeightArray_NativeFunction;
    static readonly int GetParentWeightArray_ParamsSize;
    static readonly int GetParentWeightArray_InChild_Offset;
    static readonly int GetParentWeightArray_bInitial_Offset;
    static readonly int GetParentWeightArray_ReturnValue_Offset;
    static readonly int GetParentWeightArray_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementWeight> GetParentWeightArray(UnrealSharp.ControlRig.RigElementKey inChild, bool bInitial = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetParentWeightArray_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetParentWeightArray_InChild_Offset), 0, null, inChild);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetParentWeightArray_bInitial_Offset), 0, null, bInitial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetParentWeightArray_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementWeight> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetParentWeightArray_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementWeight> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementWeight> (1, BlittableMarshaller<UnrealSharp.ControlRig.RigElementWeight>.ToNative, BlittableMarshaller<UnrealSharp.ControlRig.RigElementWeight>.FromNative, GetParentWeightArray_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementWeight>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetParentWeight
    static readonly IntPtr GetParentWeight_NativeFunction;
    static readonly int GetParentWeight_ParamsSize;
    static readonly int GetParentWeight_InChild_Offset;
    static readonly int GetParentWeight_InParent_Offset;
    static readonly int GetParentWeight_bInitial_Offset;
    static readonly int GetParentWeight_ReturnValue_Offset;
    
    public UnrealSharp.ControlRig.RigElementWeight GetParentWeight(UnrealSharp.ControlRig.RigElementKey inChild, UnrealSharp.ControlRig.RigElementKey inParent, bool bInitial = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetParentWeight_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetParentWeight_InChild_Offset), 0, null, inChild);
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetParentWeight_InParent_Offset), 0, null, inParent);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetParentWeight_bInitial_Offset), 0, null, bInitial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetParentWeight_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigElementWeight returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.ControlRig.RigElementWeight>.FromNative(IntPtr.Add(ParamsBuffer, GetParentWeight_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetParentTransformByIndex
    static readonly IntPtr GetParentTransformByIndex_NativeFunction;
    static readonly int GetParentTransformByIndex_ParamsSize;
    static readonly int GetParentTransformByIndex_InElementIndex_Offset;
    static readonly int GetParentTransformByIndex_bInitial_Offset;
    static readonly int GetParentTransformByIndex_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetParentTransformByIndex(int inElementIndex, bool bInitial = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetParentTransformByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetParentTransformByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetParentTransformByIndex_bInitial_Offset), 0, null, bInitial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetParentTransformByIndex_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetParentTransformByIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetParentTransform
    static readonly IntPtr GetParentTransform_NativeFunction;
    static readonly int GetParentTransform_ParamsSize;
    static readonly int GetParentTransform_InKey_Offset;
    static readonly int GetParentTransform_bInitial_Offset;
    static readonly int GetParentTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetParentTransform(UnrealSharp.ControlRig.RigElementKey inKey, bool bInitial = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetParentTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetParentTransform_InKey_Offset), 0, null, inKey);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetParentTransform_bInitial_Offset), 0, null, bInitial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetParentTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetParentTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetParents
    static readonly IntPtr GetParents_NativeFunction;
    static readonly int GetParents_ParamsSize;
    static readonly int GetParents_InKey_Offset;
    static readonly int GetParents_bRecursive_Offset;
    static readonly int GetParents_ReturnValue_Offset;
    static readonly int GetParents_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> GetParents(UnrealSharp.ControlRig.RigElementKey inKey, bool bRecursive = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetParents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetParents_InKey_Offset), 0, null, inKey);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetParents_bRecursive_Offset), 0, null, bRecursive);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetParents_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetParents_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> (1, UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative, UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative, GetParents_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetNumberOfParents
    static readonly IntPtr GetNumberOfParents_NativeFunction;
    static readonly int GetNumberOfParents_ParamsSize;
    static readonly int GetNumberOfParents_InKey_Offset;
    static readonly int GetNumberOfParents_ReturnValue_Offset;
    
    public int GetNumberOfParents(UnrealSharp.ControlRig.RigElementKey inKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumberOfParents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetNumberOfParents_InKey_Offset), 0, null, inKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumberOfParents_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumberOfParents_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetNullKeys
    static readonly IntPtr GetNullKeys_NativeFunction;
    static readonly int GetNullKeys_ParamsSize;
    static readonly int GetNullKeys_bTraverse_Offset;
    static readonly int GetNullKeys_ReturnValue_Offset;
    static readonly int GetNullKeys_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> GetNulls(bool bTraverse = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNullKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetNullKeys_bTraverse_Offset), 0, null, bTraverse);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNullKeys_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetNullKeys_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> (1, UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative, UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative, GetNullKeys_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetNameMetadata
    static readonly IntPtr GetNameMetadata_NativeFunction;
    static readonly int GetNameMetadata_ParamsSize;
    static readonly int GetNameMetadata_InItem_Offset;
    static readonly int GetNameMetadata_InMetadataName_Offset;
    static readonly int GetNameMetadata_DefaultValue_Offset;
    static readonly int GetNameMetadata_ReturnValue_Offset;
    
    public Name GetNameMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, Name defaultValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNameMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetNameMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetNameMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetNameMetadata_DefaultValue_Offset), 0, null, defaultValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNameMetadata_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetNameMetadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetNameArrayMetadata
    static readonly IntPtr GetNameArrayMetadata_NativeFunction;
    static readonly int GetNameArrayMetadata_ParamsSize;
    static readonly int GetNameArrayMetadata_InItem_Offset;
    static readonly int GetNameArrayMetadata_InMetadataName_Offset;
    static readonly int GetNameArrayMetadata_ReturnValue_Offset;
    static readonly int GetNameArrayMetadata_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<Name> GetNameArrayMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNameArrayMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetNameArrayMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetNameArrayMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNameArrayMetadata_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<Name> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetNameArrayMetadata_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<Name> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetNameArrayMetadata_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetMetadataType
    static readonly IntPtr GetMetadataType_NativeFunction;
    static readonly int GetMetadataType_ParamsSize;
    static readonly int GetMetadataType_InItem_Offset;
    static readonly int GetMetadataType_InMetadataName_Offset;
    static readonly int GetMetadataType_ReturnValue_Offset;
    
    public UnrealSharp.ControlRig.ERigMetadataType GetMetadataType(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMetadataType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetMetadataType_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetMetadataType_InMetadataName_Offset), 0, null, inMetadataName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMetadataType_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.ERigMetadataType returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.ControlRig.ERigMetadataType>.FromNative(IntPtr.Add(ParamsBuffer, GetMetadataType_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetMetadataNames
    static readonly IntPtr GetMetadataNames_NativeFunction;
    static readonly int GetMetadataNames_ParamsSize;
    static readonly int GetMetadataNames_InItem_Offset;
    static readonly int GetMetadataNames_ReturnValue_Offset;
    static readonly int GetMetadataNames_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<Name> GetMetadataNames(UnrealSharp.ControlRig.RigElementKey inItem)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMetadataNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetMetadataNames_InItem_Offset), 0, null, inItem);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMetadataNames_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<Name> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetMetadataNames_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<Name> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetMetadataNames_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetLocalTransformByIndex
    static readonly IntPtr GetLocalTransformByIndex_NativeFunction;
    static readonly int GetLocalTransformByIndex_ParamsSize;
    static readonly int GetLocalTransformByIndex_InElementIndex_Offset;
    static readonly int GetLocalTransformByIndex_bInitial_Offset;
    static readonly int GetLocalTransformByIndex_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetLocalTransformByIndex(int inElementIndex, bool bInitial = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalTransformByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalTransformByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetLocalTransformByIndex_bInitial_Offset), 0, null, bInitial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLocalTransformByIndex_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetLocalTransformByIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetLocalTransform
    static readonly IntPtr GetLocalTransform_NativeFunction;
    static readonly int GetLocalTransform_ParamsSize;
    static readonly int GetLocalTransform_InKey_Offset;
    static readonly int GetLocalTransform_bInitial_Offset;
    static readonly int GetLocalTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetLocalTransform(UnrealSharp.ControlRig.RigElementKey inKey, bool bInitial = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetLocalTransform_InKey_Offset), 0, null, inKey);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetLocalTransform_bInitial_Offset), 0, null, bInitial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLocalTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetLocalTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetLocalIndex_ForBlueprint
    static readonly IntPtr GetLocalIndex_ForBlueprint_NativeFunction;
    static readonly int GetLocalIndex_ForBlueprint_ParamsSize;
    static readonly int GetLocalIndex_ForBlueprint_InKey_Offset;
    static readonly int GetLocalIndex_ForBlueprint_ReturnValue_Offset;
    
    public int GetLocalIndex(UnrealSharp.ControlRig.RigElementKey inKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalIndex_ForBlueprint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetLocalIndex_ForBlueprint_InKey_Offset), 0, null, inKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLocalIndex_ForBlueprint_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetLocalIndex_ForBlueprint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetLocalControlShapeTransformByIndex
    static readonly IntPtr GetLocalControlShapeTransformByIndex_NativeFunction;
    static readonly int GetLocalControlShapeTransformByIndex_ParamsSize;
    static readonly int GetLocalControlShapeTransformByIndex_InElementIndex_Offset;
    static readonly int GetLocalControlShapeTransformByIndex_bInitial_Offset;
    static readonly int GetLocalControlShapeTransformByIndex_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetLocalControlShapeTransformByIndex(int inElementIndex, bool bInitial = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlShapeTransformByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlShapeTransformByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlShapeTransformByIndex_bInitial_Offset), 0, null, bInitial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLocalControlShapeTransformByIndex_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetLocalControlShapeTransformByIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetLocalControlShapeTransform
    static readonly IntPtr GetLocalControlShapeTransform_NativeFunction;
    static readonly int GetLocalControlShapeTransform_ParamsSize;
    static readonly int GetLocalControlShapeTransform_InKey_Offset;
    static readonly int GetLocalControlShapeTransform_bInitial_Offset;
    static readonly int GetLocalControlShapeTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetLocalControlShapeTransform(UnrealSharp.ControlRig.RigElementKey inKey, bool bInitial = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlShapeTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlShapeTransform_InKey_Offset), 0, null, inKey);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlShapeTransform_bInitial_Offset), 0, null, bInitial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLocalControlShapeTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetLocalControlShapeTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetLinearColorMetadata
    static readonly IntPtr GetLinearColorMetadata_NativeFunction;
    static readonly int GetLinearColorMetadata_ParamsSize;
    static readonly int GetLinearColorMetadata_InItem_Offset;
    static readonly int GetLinearColorMetadata_InMetadataName_Offset;
    static readonly int GetLinearColorMetadata_DefaultValue_Offset;
    static readonly int GetLinearColorMetadata_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor GetLinearColorMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, UnrealSharp.CoreUObject.LinearColor defaultValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLinearColorMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetLinearColorMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLinearColorMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, GetLinearColorMetadata_DefaultValue_Offset), 0, null, defaultValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLinearColorMetadata_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, GetLinearColorMetadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetLinearColorArrayMetadata
    static readonly IntPtr GetLinearColorArrayMetadata_NativeFunction;
    static readonly int GetLinearColorArrayMetadata_ParamsSize;
    static readonly int GetLinearColorArrayMetadata_InItem_Offset;
    static readonly int GetLinearColorArrayMetadata_InMetadataName_Offset;
    static readonly int GetLinearColorArrayMetadata_ReturnValue_Offset;
    static readonly int GetLinearColorArrayMetadata_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.CoreUObject.LinearColor> GetLinearColorArrayMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLinearColorArrayMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetLinearColorArrayMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLinearColorArrayMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLinearColorArrayMetadata_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.CoreUObject.LinearColor> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLinearColorArrayMetadata_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor> (1, BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative, GetLinearColorArrayMetadata_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetKeys
    static readonly IntPtr GetKeys_NativeFunction;
    static readonly int GetKeys_ParamsSize;
    static readonly int GetKeys_InElementIndices_Offset;
    static readonly int GetKeys_InElementIndices_ElementSize;
    static readonly int GetKeys_ReturnValue_Offset;
    static readonly int GetKeys_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> GetKeys(System.Collections.Generic.IList<int> inElementIndices)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InElementIndices_NativeBuffer = IntPtr.Add(ParamsBuffer, GetKeys_InElementIndices_Offset);
            UnrealArrayCopyMarshaler<int> InElementIndices_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, GetKeys_InElementIndices_ElementSize);
            InElementIndices_Marshaler.ToNative(InElementIndices_NativeBuffer, 0, null, inElementIndices);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetKeys_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetKeys_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> (1, UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative, UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative, GetKeys_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            UnrealArrayCopyMarshaler<int>.DestructInstance(InElementIndices_NativeBuffer, 0);
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetKey
    static readonly IntPtr GetKey_NativeFunction;
    static readonly int GetKey_ParamsSize;
    static readonly int GetKey_InElementIndex_Offset;
    static readonly int GetKey_ReturnValue_Offset;
    
    public UnrealSharp.ControlRig.RigElementKey GetKey(int inElementIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetKey_InElementIndex_Offset), 0, null, inElementIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetKey_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigElementKey returnValue;
            returnValue = UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetKey_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetIntFromControlValue
    static readonly IntPtr GetIntFromControlValue_NativeFunction;
    static readonly int GetIntFromControlValue_ParamsSize;
    static readonly int GetIntFromControlValue_InValue_Offset;
    static readonly int GetIntFromControlValue_ReturnValue_Offset;
    
    public static int GetIntFromControlValue(UnrealSharp.ControlRig.RigControlValue inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetIntFromControlValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigControlValueMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetIntFromControlValue_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetIntFromControlValue_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetIntFromControlValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetInt32Metadata
    static readonly IntPtr GetInt32Metadata_NativeFunction;
    static readonly int GetInt32Metadata_ParamsSize;
    static readonly int GetInt32Metadata_InItem_Offset;
    static readonly int GetInt32Metadata_InMetadataName_Offset;
    static readonly int GetInt32Metadata_DefaultValue_Offset;
    static readonly int GetInt32Metadata_ReturnValue_Offset;
    
    public int GetInt32Metadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, int defaultValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInt32Metadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetInt32Metadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetInt32Metadata_InMetadataName_Offset), 0, null, inMetadataName);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetInt32Metadata_DefaultValue_Offset), 0, null, defaultValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInt32Metadata_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetInt32Metadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetInt32ArrayMetadata
    static readonly IntPtr GetInt32ArrayMetadata_NativeFunction;
    static readonly int GetInt32ArrayMetadata_ParamsSize;
    static readonly int GetInt32ArrayMetadata_InItem_Offset;
    static readonly int GetInt32ArrayMetadata_InMetadataName_Offset;
    static readonly int GetInt32ArrayMetadata_ReturnValue_Offset;
    static readonly int GetInt32ArrayMetadata_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<int> GetInt32ArrayMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInt32ArrayMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetInt32ArrayMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetInt32ArrayMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInt32ArrayMetadata_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<int> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetInt32ArrayMetadata_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<int> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<int> (1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, GetInt32ArrayMetadata_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<int>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetIndex_ForBlueprint
    static readonly IntPtr GetIndex_ForBlueprint_NativeFunction;
    static readonly int GetIndex_ForBlueprint_ParamsSize;
    static readonly int GetIndex_ForBlueprint_InKey_Offset;
    static readonly int GetIndex_ForBlueprint_ReturnValue_Offset;
    
    public int GetIndex(UnrealSharp.ControlRig.RigElementKey inKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetIndex_ForBlueprint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetIndex_ForBlueprint_InKey_Offset), 0, null, inKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetIndex_ForBlueprint_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetIndex_ForBlueprint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetGlobalTransformByIndex
    static readonly IntPtr GetGlobalTransformByIndex_NativeFunction;
    static readonly int GetGlobalTransformByIndex_ParamsSize;
    static readonly int GetGlobalTransformByIndex_InElementIndex_Offset;
    static readonly int GetGlobalTransformByIndex_bInitial_Offset;
    static readonly int GetGlobalTransformByIndex_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetGlobalTransformByIndex(int inElementIndex, bool bInitial = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGlobalTransformByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetGlobalTransformByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetGlobalTransformByIndex_bInitial_Offset), 0, null, bInitial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetGlobalTransformByIndex_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetGlobalTransformByIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetGlobalTransform
    static readonly IntPtr GetGlobalTransform_NativeFunction;
    static readonly int GetGlobalTransform_ParamsSize;
    static readonly int GetGlobalTransform_InKey_Offset;
    static readonly int GetGlobalTransform_bInitial_Offset;
    static readonly int GetGlobalTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetGlobalTransform(UnrealSharp.ControlRig.RigElementKey inKey, bool bInitial = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGlobalTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetGlobalTransform_InKey_Offset), 0, null, inKey);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetGlobalTransform_bInitial_Offset), 0, null, bInitial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetGlobalTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetGlobalTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetGlobalControlShapeTransformByIndex
    static readonly IntPtr GetGlobalControlShapeTransformByIndex_NativeFunction;
    static readonly int GetGlobalControlShapeTransformByIndex_ParamsSize;
    static readonly int GetGlobalControlShapeTransformByIndex_InElementIndex_Offset;
    static readonly int GetGlobalControlShapeTransformByIndex_bInitial_Offset;
    static readonly int GetGlobalControlShapeTransformByIndex_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetGlobalControlShapeTransformByIndex(int inElementIndex, bool bInitial = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGlobalControlShapeTransformByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetGlobalControlShapeTransformByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetGlobalControlShapeTransformByIndex_bInitial_Offset), 0, null, bInitial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetGlobalControlShapeTransformByIndex_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetGlobalControlShapeTransformByIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetGlobalControlShapeTransform
    static readonly IntPtr GetGlobalControlShapeTransform_NativeFunction;
    static readonly int GetGlobalControlShapeTransform_ParamsSize;
    static readonly int GetGlobalControlShapeTransform_InKey_Offset;
    static readonly int GetGlobalControlShapeTransform_bInitial_Offset;
    static readonly int GetGlobalControlShapeTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetGlobalControlShapeTransform(UnrealSharp.ControlRig.RigElementKey inKey, bool bInitial = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGlobalControlShapeTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetGlobalControlShapeTransform_InKey_Offset), 0, null, inKey);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetGlobalControlShapeTransform_bInitial_Offset), 0, null, bInitial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetGlobalControlShapeTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetGlobalControlShapeTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetGlobalControlOffsetTransformByIndex
    static readonly IntPtr GetGlobalControlOffsetTransformByIndex_NativeFunction;
    static readonly int GetGlobalControlOffsetTransformByIndex_ParamsSize;
    static readonly int GetGlobalControlOffsetTransformByIndex_InElementIndex_Offset;
    static readonly int GetGlobalControlOffsetTransformByIndex_bInitial_Offset;
    static readonly int GetGlobalControlOffsetTransformByIndex_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetGlobalControlOffsetTransformByIndex(int inElementIndex, bool bInitial = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGlobalControlOffsetTransformByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetGlobalControlOffsetTransformByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetGlobalControlOffsetTransformByIndex_bInitial_Offset), 0, null, bInitial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetGlobalControlOffsetTransformByIndex_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetGlobalControlOffsetTransformByIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetGlobalControlOffsetTransform
    static readonly IntPtr GetGlobalControlOffsetTransform_NativeFunction;
    static readonly int GetGlobalControlOffsetTransform_ParamsSize;
    static readonly int GetGlobalControlOffsetTransform_InKey_Offset;
    static readonly int GetGlobalControlOffsetTransform_bInitial_Offset;
    static readonly int GetGlobalControlOffsetTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetGlobalControlOffsetTransform(UnrealSharp.ControlRig.RigElementKey inKey, bool bInitial = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGlobalControlOffsetTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetGlobalControlOffsetTransform_InKey_Offset), 0, null, inKey);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetGlobalControlOffsetTransform_bInitial_Offset), 0, null, bInitial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetGlobalControlOffsetTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetGlobalControlOffsetTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetFloatMetadata
    static readonly IntPtr GetFloatMetadata_NativeFunction;
    static readonly int GetFloatMetadata_ParamsSize;
    static readonly int GetFloatMetadata_InItem_Offset;
    static readonly int GetFloatMetadata_InMetadataName_Offset;
    static readonly int GetFloatMetadata_DefaultValue_Offset;
    static readonly int GetFloatMetadata_ReturnValue_Offset;
    
    public float GetFloatMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, float defaultValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFloatMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetFloatMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetFloatMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetFloatMetadata_DefaultValue_Offset), 0, null, defaultValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFloatMetadata_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetFloatMetadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetFloatFromControlValue
    static readonly IntPtr GetFloatFromControlValue_NativeFunction;
    static readonly int GetFloatFromControlValue_ParamsSize;
    static readonly int GetFloatFromControlValue_InValue_Offset;
    static readonly int GetFloatFromControlValue_ReturnValue_Offset;
    
    public static float GetFloatFromControlValue(UnrealSharp.ControlRig.RigControlValue inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFloatFromControlValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigControlValueMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetFloatFromControlValue_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetFloatFromControlValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetFloatFromControlValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetFloatArrayMetadata
    static readonly IntPtr GetFloatArrayMetadata_NativeFunction;
    static readonly int GetFloatArrayMetadata_ParamsSize;
    static readonly int GetFloatArrayMetadata_InItem_Offset;
    static readonly int GetFloatArrayMetadata_InMetadataName_Offset;
    static readonly int GetFloatArrayMetadata_ReturnValue_Offset;
    static readonly int GetFloatArrayMetadata_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<float> GetFloatArrayMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFloatArrayMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetFloatArrayMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetFloatArrayMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFloatArrayMetadata_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<float> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetFloatArrayMetadata_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<float> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<float> (1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, GetFloatArrayMetadata_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<float>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetFirstParent
    static readonly IntPtr GetFirstParent_NativeFunction;
    static readonly int GetFirstParent_ParamsSize;
    static readonly int GetFirstParent_InKey_Offset;
    static readonly int GetFirstParent_ReturnValue_Offset;
    
    public UnrealSharp.ControlRig.RigElementKey GetFirstParent(UnrealSharp.ControlRig.RigElementKey inKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFirstParent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetFirstParent_InKey_Offset), 0, null, inKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFirstParent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigElementKey returnValue;
            returnValue = UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetFirstParent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetEulerTransformFromControlValue
    static readonly IntPtr GetEulerTransformFromControlValue_NativeFunction;
    static readonly int GetEulerTransformFromControlValue_ParamsSize;
    static readonly int GetEulerTransformFromControlValue_InValue_Offset;
    static readonly int GetEulerTransformFromControlValue_ReturnValue_Offset;
    
    public static UnrealSharp.AnimationCore.EulerTransform GetEulerTransformFromControlValue(UnrealSharp.ControlRig.RigControlValue inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEulerTransformFromControlValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigControlValueMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetEulerTransformFromControlValue_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetEulerTransformFromControlValue_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AnimationCore.EulerTransform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.AnimationCore.EulerTransform>.FromNative(IntPtr.Add(ParamsBuffer, GetEulerTransformFromControlValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetDefaultParent
    static readonly IntPtr GetDefaultParent_NativeFunction;
    static readonly int GetDefaultParent_ParamsSize;
    static readonly int GetDefaultParent_InKey_Offset;
    static readonly int GetDefaultParent_ReturnValue_Offset;
    
    public UnrealSharp.ControlRig.RigElementKey GetDefaultParent(UnrealSharp.ControlRig.RigElementKey inKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDefaultParent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetDefaultParent_InKey_Offset), 0, null, inKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDefaultParent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigElementKey returnValue;
            returnValue = UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetDefaultParent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetCurveValueByIndex
    static readonly IntPtr GetCurveValueByIndex_NativeFunction;
    static readonly int GetCurveValueByIndex_ParamsSize;
    static readonly int GetCurveValueByIndex_InElementIndex_Offset;
    static readonly int GetCurveValueByIndex_ReturnValue_Offset;
    
    public float GetCurveValueByIndex(int inElementIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurveValueByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetCurveValueByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurveValueByIndex_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCurveValueByIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetCurveValue
    static readonly IntPtr GetCurveValue_NativeFunction;
    static readonly int GetCurveValue_ParamsSize;
    static readonly int GetCurveValue_InKey_Offset;
    static readonly int GetCurveValue_ReturnValue_Offset;
    
    public float GetCurveValue(UnrealSharp.ControlRig.RigElementKey inKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurveValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetCurveValue_InKey_Offset), 0, null, inKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurveValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCurveValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetCurveKeys
    static readonly IntPtr GetCurveKeys_NativeFunction;
    static readonly int GetCurveKeys_ParamsSize;
    static readonly int GetCurveKeys_ReturnValue_Offset;
    static readonly int GetCurveKeys_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> GetCurves()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurveKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurveKeys_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetCurveKeys_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> (1, UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative, UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative, GetCurveKeys_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetControlValueByIndex
    static readonly IntPtr GetControlValueByIndex_NativeFunction;
    static readonly int GetControlValueByIndex_ParamsSize;
    static readonly int GetControlValueByIndex_InElementIndex_Offset;
    static readonly int GetControlValueByIndex_InValueType_Offset;
    static readonly int GetControlValueByIndex_ReturnValue_Offset;
    
    public UnrealSharp.ControlRig.RigControlValue GetControlValueByIndex(int inElementIndex, UnrealSharp.ControlRig.ERigControlValueType inValueType = UnrealSharp.ControlRig.ERigControlValueType.Current)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlValueByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetControlValueByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            BlittableMarshaller<UnrealSharp.ControlRig.ERigControlValueType>.ToNative(IntPtr.Add(ParamsBuffer, GetControlValueByIndex_InValueType_Offset), 0, null, inValueType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlValueByIndex_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigControlValue returnValue;
            returnValue = UnrealSharp.ControlRig.RigControlValueMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetControlValueByIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetControlValue
    static readonly IntPtr GetControlValue_NativeFunction;
    static readonly int GetControlValue_ParamsSize;
    static readonly int GetControlValue_InKey_Offset;
    static readonly int GetControlValue_InValueType_Offset;
    static readonly int GetControlValue_ReturnValue_Offset;
    
    public UnrealSharp.ControlRig.RigControlValue GetControlValue(UnrealSharp.ControlRig.RigElementKey inKey, UnrealSharp.ControlRig.ERigControlValueType inValueType = UnrealSharp.ControlRig.ERigControlValueType.Current)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetControlValue_InKey_Offset), 0, null, inKey);
            BlittableMarshaller<UnrealSharp.ControlRig.ERigControlValueType>.ToNative(IntPtr.Add(ParamsBuffer, GetControlValue_InValueType_Offset), 0, null, inValueType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlValue_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigControlValue returnValue;
            returnValue = UnrealSharp.ControlRig.RigControlValueMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetControlValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetControlPreferredRotatorByIndex
    static readonly IntPtr GetControlPreferredRotatorByIndex_NativeFunction;
    static readonly int GetControlPreferredRotatorByIndex_ParamsSize;
    static readonly int GetControlPreferredRotatorByIndex_InElementIndex_Offset;
    static readonly int GetControlPreferredRotatorByIndex_bInitial_Offset;
    static readonly int GetControlPreferredRotatorByIndex_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetControlPreferredRotatorByIndex(int inElementIndex, bool bInitial = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlPreferredRotatorByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetControlPreferredRotatorByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetControlPreferredRotatorByIndex_bInitial_Offset), 0, null, bInitial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlPreferredRotatorByIndex_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetControlPreferredRotatorByIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetControlPreferredRotator
    static readonly IntPtr GetControlPreferredRotator_NativeFunction;
    static readonly int GetControlPreferredRotator_ParamsSize;
    static readonly int GetControlPreferredRotator_InKey_Offset;
    static readonly int GetControlPreferredRotator_bInitial_Offset;
    static readonly int GetControlPreferredRotator_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetControlPreferredRotator(UnrealSharp.ControlRig.RigElementKey inKey, bool bInitial = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlPreferredRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetControlPreferredRotator_InKey_Offset), 0, null, inKey);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetControlPreferredRotator_bInitial_Offset), 0, null, bInitial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlPreferredRotator_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetControlPreferredRotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetControlPreferredEulerRotationOrderByIndex
    static readonly IntPtr GetControlPreferredEulerRotationOrderByIndex_NativeFunction;
    static readonly int GetControlPreferredEulerRotationOrderByIndex_ParamsSize;
    static readonly int GetControlPreferredEulerRotationOrderByIndex_InElementIndex_Offset;
    static readonly int GetControlPreferredEulerRotationOrderByIndex_bFromSettings_Offset;
    static readonly int GetControlPreferredEulerRotationOrderByIndex_ReturnValue_Offset;
    
    public UnrealSharp.AnimationCore.EEulerRotationOrder GetControlPreferredEulerRotationOrderByIndex(int inElementIndex, bool bFromSettings = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlPreferredEulerRotationOrderByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetControlPreferredEulerRotationOrderByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetControlPreferredEulerRotationOrderByIndex_bFromSettings_Offset), 0, null, bFromSettings);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlPreferredEulerRotationOrderByIndex_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AnimationCore.EEulerRotationOrder returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.AnimationCore.EEulerRotationOrder>.FromNative(IntPtr.Add(ParamsBuffer, GetControlPreferredEulerRotationOrderByIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetControlPreferredEulerRotationOrder
    static readonly IntPtr GetControlPreferredEulerRotationOrder_NativeFunction;
    static readonly int GetControlPreferredEulerRotationOrder_ParamsSize;
    static readonly int GetControlPreferredEulerRotationOrder_InKey_Offset;
    static readonly int GetControlPreferredEulerRotationOrder_bFromSettings_Offset;
    static readonly int GetControlPreferredEulerRotationOrder_ReturnValue_Offset;
    
    public UnrealSharp.AnimationCore.EEulerRotationOrder GetControlPreferredEulerRotationOrder(UnrealSharp.ControlRig.RigElementKey inKey, bool bFromSettings = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlPreferredEulerRotationOrder_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetControlPreferredEulerRotationOrder_InKey_Offset), 0, null, inKey);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetControlPreferredEulerRotationOrder_bFromSettings_Offset), 0, null, bFromSettings);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlPreferredEulerRotationOrder_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AnimationCore.EEulerRotationOrder returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.AnimationCore.EEulerRotationOrder>.FromNative(IntPtr.Add(ParamsBuffer, GetControlPreferredEulerRotationOrder_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetControlPreferredEulerAnglesByIndex
    static readonly IntPtr GetControlPreferredEulerAnglesByIndex_NativeFunction;
    static readonly int GetControlPreferredEulerAnglesByIndex_ParamsSize;
    static readonly int GetControlPreferredEulerAnglesByIndex_InElementIndex_Offset;
    static readonly int GetControlPreferredEulerAnglesByIndex_InRotationOrder_Offset;
    static readonly int GetControlPreferredEulerAnglesByIndex_bInitial_Offset;
    static readonly int GetControlPreferredEulerAnglesByIndex_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetControlPreferredEulerAnglesByIndex(int inElementIndex, UnrealSharp.AnimationCore.EEulerRotationOrder inRotationOrder, bool bInitial = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlPreferredEulerAnglesByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetControlPreferredEulerAnglesByIndex_InElementIndex_Offset), 0, null, inElementIndex);
            BlittableMarshaller<UnrealSharp.AnimationCore.EEulerRotationOrder>.ToNative(IntPtr.Add(ParamsBuffer, GetControlPreferredEulerAnglesByIndex_InRotationOrder_Offset), 0, null, inRotationOrder);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetControlPreferredEulerAnglesByIndex_bInitial_Offset), 0, null, bInitial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlPreferredEulerAnglesByIndex_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetControlPreferredEulerAnglesByIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetControlPreferredEulerAngles
    static readonly IntPtr GetControlPreferredEulerAngles_NativeFunction;
    static readonly int GetControlPreferredEulerAngles_ParamsSize;
    static readonly int GetControlPreferredEulerAngles_InKey_Offset;
    static readonly int GetControlPreferredEulerAngles_InRotationOrder_Offset;
    static readonly int GetControlPreferredEulerAngles_bInitial_Offset;
    static readonly int GetControlPreferredEulerAngles_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetControlPreferredEulerAngles(UnrealSharp.ControlRig.RigElementKey inKey, UnrealSharp.AnimationCore.EEulerRotationOrder inRotationOrder, bool bInitial = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlPreferredEulerAngles_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetControlPreferredEulerAngles_InKey_Offset), 0, null, inKey);
            BlittableMarshaller<UnrealSharp.AnimationCore.EEulerRotationOrder>.ToNative(IntPtr.Add(ParamsBuffer, GetControlPreferredEulerAngles_InRotationOrder_Offset), 0, null, inRotationOrder);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetControlPreferredEulerAngles_bInitial_Offset), 0, null, bInitial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlPreferredEulerAngles_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetControlPreferredEulerAngles_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetController
    static readonly IntPtr GetController_NativeFunction;
    static readonly int GetController_ParamsSize;
    static readonly int GetController_bCreateIfNeeded_Offset;
    static readonly int GetController_ReturnValue_Offset;
    
    public UnrealSharp.ControlRig.RigHierarchyController GetController(bool bCreateIfNeeded = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetController_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetController_bCreateIfNeeded_Offset), 0, null, bCreateIfNeeded);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetController_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigHierarchyController returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.ControlRig.RigHierarchyController>.FromNative(IntPtr.Add(ParamsBuffer, GetController_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetControlKeys
    static readonly IntPtr GetControlKeys_NativeFunction;
    static readonly int GetControlKeys_ParamsSize;
    static readonly int GetControlKeys_bTraverse_Offset;
    static readonly int GetControlKeys_ReturnValue_Offset;
    static readonly int GetControlKeys_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> GetControls(bool bTraverse = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetControlKeys_bTraverse_Offset), 0, null, bTraverse);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlKeys_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetControlKeys_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> (1, UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative, UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative, GetControlKeys_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetChildren
    static readonly IntPtr GetChildren_NativeFunction;
    static readonly int GetChildren_ParamsSize;
    static readonly int GetChildren_InKey_Offset;
    static readonly int GetChildren_bRecursive_Offset;
    static readonly int GetChildren_ReturnValue_Offset;
    static readonly int GetChildren_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> GetChildren(UnrealSharp.ControlRig.RigElementKey inKey, bool bRecursive = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetChildren_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetChildren_InKey_Offset), 0, null, inKey);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetChildren_bRecursive_Offset), 0, null, bRecursive);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetChildren_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetChildren_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> (1, UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative, UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative, GetChildren_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetBoolMetadata
    static readonly IntPtr GetBoolMetadata_NativeFunction;
    static readonly int GetBoolMetadata_ParamsSize;
    static readonly int GetBoolMetadata_InItem_Offset;
    static readonly int GetBoolMetadata_InMetadataName_Offset;
    static readonly int GetBoolMetadata_DefaultValue_Offset;
    static readonly int GetBoolMetadata_ReturnValue_Offset;
    
    public bool GetBoolMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName, bool defaultValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBoolMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetBoolMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetBoolMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetBoolMetadata_DefaultValue_Offset), 0, null, defaultValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBoolMetadata_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetBoolMetadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetBoolArrayMetadata
    static readonly IntPtr GetBoolArrayMetadata_NativeFunction;
    static readonly int GetBoolArrayMetadata_ParamsSize;
    static readonly int GetBoolArrayMetadata_InItem_Offset;
    static readonly int GetBoolArrayMetadata_InMetadataName_Offset;
    static readonly int GetBoolArrayMetadata_ReturnValue_Offset;
    static readonly int GetBoolArrayMetadata_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<bool> GetBoolArrayMetadata(UnrealSharp.ControlRig.RigElementKey inItem, Name inMetadataName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBoolArrayMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetBoolArrayMetadata_InItem_Offset), 0, null, inItem);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetBoolArrayMetadata_InMetadataName_Offset), 0, null, inMetadataName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBoolArrayMetadata_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<bool> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetBoolArrayMetadata_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<bool> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<bool> (1, BoolMarshaller.ToNative, BoolMarshaller.FromNative, GetBoolArrayMetadata_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<bool>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetBoneKeys
    static readonly IntPtr GetBoneKeys_NativeFunction;
    static readonly int GetBoneKeys_ParamsSize;
    static readonly int GetBoneKeys_bTraverse_Offset;
    static readonly int GetBoneKeys_ReturnValue_Offset;
    static readonly int GetBoneKeys_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> GetBones(bool bTraverse = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBoneKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetBoneKeys_bTraverse_Offset), 0, null, bTraverse);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBoneKeys_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetBoneKeys_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> (1, UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative, UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative, GetBoneKeys_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:GetAllKeys_ForBlueprint
    static readonly IntPtr GetAllKeys_ForBlueprint_NativeFunction;
    static readonly int GetAllKeys_ForBlueprint_ParamsSize;
    static readonly int GetAllKeys_ForBlueprint_bTraverse_Offset;
    static readonly int GetAllKeys_ForBlueprint_ReturnValue_Offset;
    static readonly int GetAllKeys_ForBlueprint_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> GetAllKeys(bool bTraverse = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAllKeys_ForBlueprint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetAllKeys_ForBlueprint_bTraverse_Offset), 0, null, bTraverse);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAllKeys_ForBlueprint_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.ControlRig.RigElementKey> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAllKeys_ForBlueprint_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey> (1, UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative, UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative, GetAllKeys_ForBlueprint_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.RigElementKey>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:FindNull_ForBlueprintOnly
    static readonly IntPtr FindNull_ForBlueprintOnly_NativeFunction;
    static readonly int FindNull_ForBlueprintOnly_ParamsSize;
    static readonly int FindNull_ForBlueprintOnly_InKey_Offset;
    static readonly int FindNull_ForBlueprintOnly_ReturnValue_Offset;
    
    public UnrealSharp.ControlRig.RigNullElement FindNull(UnrealSharp.ControlRig.RigElementKey inKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindNull_ForBlueprintOnly_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, FindNull_ForBlueprintOnly_InKey_Offset), 0, null, inKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindNull_ForBlueprintOnly_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigNullElement returnValue;
            returnValue = UnrealSharp.ControlRig.RigNullElementMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FindNull_ForBlueprintOnly_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:FindControl_ForBlueprintOnly
    static readonly IntPtr FindControl_ForBlueprintOnly_NativeFunction;
    static readonly int FindControl_ForBlueprintOnly_ParamsSize;
    static readonly int FindControl_ForBlueprintOnly_InKey_Offset;
    static readonly int FindControl_ForBlueprintOnly_ReturnValue_Offset;
    
    public UnrealSharp.ControlRig.RigControlElement FindControl(UnrealSharp.ControlRig.RigElementKey inKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindControl_ForBlueprintOnly_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, FindControl_ForBlueprintOnly_InKey_Offset), 0, null, inKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindControl_ForBlueprintOnly_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigControlElement returnValue;
            returnValue = UnrealSharp.ControlRig.RigControlElementMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FindControl_ForBlueprintOnly_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:FindBone_ForBlueprintOnly
    static readonly IntPtr FindBone_ForBlueprintOnly_NativeFunction;
    static readonly int FindBone_ForBlueprintOnly_ParamsSize;
    static readonly int FindBone_ForBlueprintOnly_InKey_Offset;
    static readonly int FindBone_ForBlueprintOnly_ReturnValue_Offset;
    
    public UnrealSharp.ControlRig.RigBoneElement FindBone(UnrealSharp.ControlRig.RigElementKey inKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindBone_ForBlueprintOnly_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, FindBone_ForBlueprintOnly_InKey_Offset), 0, null, inKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindBone_ForBlueprintOnly_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigBoneElement returnValue;
            returnValue = UnrealSharp.ControlRig.RigBoneElementMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FindBone_ForBlueprintOnly_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:CopyPose
    static readonly IntPtr CopyPose_NativeFunction;
    static readonly int CopyPose_ParamsSize;
    static readonly int CopyPose_InHierarchy_Offset;
    static readonly int CopyPose_bCurrent_Offset;
    static readonly int CopyPose_bInitial_Offset;
    static readonly int CopyPose_bWeights_Offset;
    static readonly int CopyPose_bMatchPoseInGlobalIfNeeded_Offset;
    
    public void CopyPose(UnrealSharp.ControlRig.RigHierarchy inHierarchy, bool bCurrent, bool bInitial, bool bWeights, bool bMatchPoseInGlobalIfNeeded = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CopyPose_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ControlRig.RigHierarchy>.ToNative(IntPtr.Add(ParamsBuffer, CopyPose_InHierarchy_Offset), 0, null, inHierarchy);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CopyPose_bCurrent_Offset), 0, null, bCurrent);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CopyPose_bInitial_Offset), 0, null, bInitial);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CopyPose_bWeights_Offset), 0, null, bWeights);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CopyPose_bMatchPoseInGlobalIfNeeded_Offset), 0, null, bMatchPoseInGlobalIfNeeded);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CopyPose_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:CopyHierarchy
    static readonly IntPtr CopyHierarchy_NativeFunction;
    static readonly int CopyHierarchy_ParamsSize;
    static readonly int CopyHierarchy_InHierarchy_Offset;
    
    public void CopyHierarchy(UnrealSharp.ControlRig.RigHierarchy inHierarchy)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CopyHierarchy_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ControlRig.RigHierarchy>.ToNative(IntPtr.Add(ParamsBuffer, CopyHierarchy_InHierarchy_Offset), 0, null, inHierarchy);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CopyHierarchy_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRig.RigHierarchy:Contains_ForBlueprint
    static readonly IntPtr Contains_ForBlueprint_NativeFunction;
    static readonly int Contains_ForBlueprint_ParamsSize;
    static readonly int Contains_ForBlueprint_InKey_Offset;
    static readonly int Contains_ForBlueprint_ReturnValue_Offset;
    
    public bool Contains(UnrealSharp.ControlRig.RigElementKey inKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Contains_ForBlueprint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Contains_ForBlueprint_InKey_Offset), 0, null, inKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Contains_ForBlueprint_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Contains_ForBlueprint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
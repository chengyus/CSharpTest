// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.ControlRig;

[UClass]
public partial class TransformableControlHandle : UnrealSharp.Constraints.TransformableHandle
{
    
    static TransformableControlHandle()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("TransformableControlHandle");
        
        ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ControlRig");
        ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ControlName");
        
        
        
    }
    
    protected TransformableControlHandle(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // SoftObjectProperty /Script/ControlRig.TransformableControlHandle:ControlRig
    static readonly int ControlRig_Offset;
    
    public SoftObject<UnrealSharp.ControlRig.ControlRig> ControlRig
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<SoftObject<UnrealSharp.ControlRig.ControlRig>>.FromNative(IntPtr.Add(NativeObject, ControlRig_Offset), 0, this);
        }
    }
    
    // NameProperty /Script/ControlRig.TransformableControlHandle:ControlName
    static readonly int ControlName_Offset;
    
    public Name ControlName
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, ControlName_Offset), 0, this);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.ControlRigDeveloper;

[UClass]
public partial class ControlRigBlueprint : UnrealSharp.RigVMDeveloper.RigVMBlueprint
{
    
    static readonly IntPtr NativeClassPtr;
    static ControlRigBlueprint()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ControlRigBlueprint");
        
        Hierarchy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Hierarchy");
        
        SetPreviewMesh_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPreviewMesh");
        SetPreviewMesh_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPreviewMesh_NativeFunction);
        SetPreviewMesh_PreviewMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPreviewMesh_NativeFunction, "PreviewMesh");
        SetPreviewMesh_bMarkAsDirty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPreviewMesh_NativeFunction, "bMarkAsDirty");
        GetPreviewMesh_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPreviewMesh");
        GetPreviewMesh_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPreviewMesh_NativeFunction);
        GetPreviewMesh_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPreviewMesh_NativeFunction, "ReturnValue");
        GetHierarchyController_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHierarchyController");
        GetHierarchyController_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHierarchyController_NativeFunction);
        GetHierarchyController_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHierarchyController_NativeFunction, "ReturnValue");
        GetCurrentlyOpenRigBlueprints_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentlyOpenRigBlueprints");
        GetCurrentlyOpenRigBlueprints_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentlyOpenRigBlueprints_NativeFunction);
        GetCurrentlyOpenRigBlueprints_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentlyOpenRigBlueprints_NativeFunction, "ReturnValue");
        GetCurrentlyOpenRigBlueprints_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetCurrentlyOpenRigBlueprints_NativeFunction, "ReturnValue");
        GetControlRigClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlRigClass");
        GetControlRigClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlRigClass_NativeFunction);
        GetControlRigClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlRigClass_NativeFunction, "ReturnValue");
        CreateControlRig_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateControlRig");
        CreateControlRig_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateControlRig_NativeFunction);
        CreateControlRig_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateControlRig_NativeFunction, "ReturnValue");
        
        
    }
    
    protected ControlRigBlueprint(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/ControlRigDeveloper.ControlRigBlueprint:Hierarchy
    static readonly int Hierarchy_Offset;
    
    public UnrealSharp.ControlRig.RigHierarchy Hierarchy
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.ControlRig.RigHierarchy>.FromNative(IntPtr.Add(NativeObject, Hierarchy_Offset), 0, this);
        }
    }
    
    // Function /Script/ControlRigDeveloper.ControlRigBlueprint:SetPreviewMesh
    static readonly IntPtr SetPreviewMesh_NativeFunction;
    static readonly int SetPreviewMesh_ParamsSize;
    static readonly int SetPreviewMesh_PreviewMesh_Offset;
    static readonly int SetPreviewMesh_bMarkAsDirty_Offset;
    
    public void SetPreviewMesh(UnrealSharp.Engine.SkeletalMesh previewMesh, bool bMarkAsDirty = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPreviewMesh_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SkeletalMesh>.ToNative(IntPtr.Add(ParamsBuffer, SetPreviewMesh_PreviewMesh_Offset), 0, null, previewMesh);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetPreviewMesh_bMarkAsDirty_Offset), 0, null, bMarkAsDirty);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPreviewMesh_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRigDeveloper.ControlRigBlueprint:GetPreviewMesh
    static readonly IntPtr GetPreviewMesh_NativeFunction;
    static readonly int GetPreviewMesh_ParamsSize;
    static readonly int GetPreviewMesh_ReturnValue_Offset;
    
    public UnrealSharp.Engine.SkeletalMesh GetPreviewMesh()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPreviewMesh_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPreviewMesh_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.SkeletalMesh returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.SkeletalMesh>.FromNative(IntPtr.Add(ParamsBuffer, GetPreviewMesh_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigDeveloper.ControlRigBlueprint:GetHierarchyController
    static readonly IntPtr GetHierarchyController_NativeFunction;
    static readonly int GetHierarchyController_ParamsSize;
    static readonly int GetHierarchyController_ReturnValue_Offset;
    
    public UnrealSharp.ControlRig.RigHierarchyController GetHierarchyController()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHierarchyController_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetHierarchyController_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigHierarchyController returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.ControlRig.RigHierarchyController>.FromNative(IntPtr.Add(ParamsBuffer, GetHierarchyController_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigDeveloper.ControlRigBlueprint:GetCurrentlyOpenRigBlueprints
    static readonly IntPtr GetCurrentlyOpenRigBlueprints_NativeFunction;
    static readonly int GetCurrentlyOpenRigBlueprints_ParamsSize;
    static readonly int GetCurrentlyOpenRigBlueprints_ReturnValue_Offset;
    static readonly int GetCurrentlyOpenRigBlueprints_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.ControlRigDeveloper.ControlRigBlueprint> GetCurrentlyOpenRigBlueprints()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentlyOpenRigBlueprints_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetCurrentlyOpenRigBlueprints_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.ControlRigDeveloper.ControlRigBlueprint> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetCurrentlyOpenRigBlueprints_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRigDeveloper.ControlRigBlueprint> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRigDeveloper.ControlRigBlueprint> (1, ObjectMarshaller<UnrealSharp.ControlRigDeveloper.ControlRigBlueprint>.ToNative, ObjectMarshaller<UnrealSharp.ControlRigDeveloper.ControlRigBlueprint>.FromNative, GetCurrentlyOpenRigBlueprints_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRigDeveloper.ControlRigBlueprint>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigDeveloper.ControlRigBlueprint:GetControlRigClass
    static readonly IntPtr GetControlRigClass_NativeFunction;
    static readonly int GetControlRigClass_ParamsSize;
    static readonly int GetControlRigClass_ReturnValue_Offset;
    
    public SubclassOf<UnrealSharp.CoreUObject.Object> GetControlRigClass()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlRigClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlRigClass_NativeFunction, ParamsBuffer);
            
            SubclassOf<UnrealSharp.CoreUObject.Object> returnValue;
            returnValue = SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetControlRigClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigDeveloper.ControlRigBlueprint:CreateControlRig
    static readonly IntPtr CreateControlRig_NativeFunction;
    static readonly int CreateControlRig_ParamsSize;
    static readonly int CreateControlRig_ReturnValue_Offset;
    
    public UnrealSharp.ControlRig.ControlRig CreateControlRig()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateControlRig_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreateControlRig_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.ControlRig returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.FromNative(IntPtr.Add(ParamsBuffer, CreateControlRig_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
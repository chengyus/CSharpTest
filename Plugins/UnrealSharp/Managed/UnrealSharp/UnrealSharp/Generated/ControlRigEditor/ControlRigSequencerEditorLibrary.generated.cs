// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.ControlRigEditor;

[UClass]
public partial class ControlRigSequencerLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static ControlRigSequencerLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ControlRigSequencerEditorLibrary");
        
        
        TweenControlRig_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TweenControlRig");
        TweenControlRig_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TweenControlRig_NativeFunction);
        TweenControlRig_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TweenControlRig_NativeFunction, "LevelSequence");
        TweenControlRig_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TweenControlRig_NativeFunction, "ControlRig");
        TweenControlRig_TweenValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TweenControlRig_NativeFunction, "TweenValue");
        TweenControlRig_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TweenControlRig_NativeFunction, "ReturnValue");
        SnapControlRig_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SnapControlRig");
        SnapControlRig_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SnapControlRig_NativeFunction);
        SnapControlRig_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SnapControlRig_NativeFunction, "LevelSequence");
        SnapControlRig_StartFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SnapControlRig_NativeFunction, "StartFrame");
        SnapControlRig_EndFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SnapControlRig_NativeFunction, "EndFrame");
        SnapControlRig_ChildrenToSnap_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SnapControlRig_NativeFunction, "ChildrenToSnap");
        SnapControlRig_ParentToSnap_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SnapControlRig_NativeFunction, "ParentToSnap");
        SnapControlRig_SnapSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SnapControlRig_NativeFunction, "SnapSettings");
        SnapControlRig_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SnapControlRig_NativeFunction, "TimeUnit");
        SnapControlRig_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SnapControlRig_NativeFunction, "ReturnValue");
        ShowAllControls_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ShowAllControls");
        ShowAllControls_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ShowAllControls_NativeFunction);
        ShowAllControls_InSection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ShowAllControls_NativeFunction, "InSection");
        SetLocalControlRigVector2Ds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalControlRigVector2Ds");
        SetLocalControlRigVector2Ds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalControlRigVector2Ds_NativeFunction);
        SetLocalControlRigVector2Ds_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigVector2Ds_NativeFunction, "LevelSequence");
        SetLocalControlRigVector2Ds_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigVector2Ds_NativeFunction, "ControlRig");
        SetLocalControlRigVector2Ds_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigVector2Ds_NativeFunction, "ControlName");
        SetLocalControlRigVector2Ds_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigVector2Ds_NativeFunction, "Frames");
        SetLocalControlRigVector2Ds_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLocalControlRigVector2Ds_NativeFunction, "Frames");
        SetLocalControlRigVector2Ds_Values_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigVector2Ds_NativeFunction, "Values");
        SetLocalControlRigVector2Ds_Values_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLocalControlRigVector2Ds_NativeFunction, "Values");
        SetLocalControlRigVector2Ds_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigVector2Ds_NativeFunction, "TimeUnit");
        SetLocalControlRigVector2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalControlRigVector2D");
        SetLocalControlRigVector2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalControlRigVector2D_NativeFunction);
        SetLocalControlRigVector2D_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigVector2D_NativeFunction, "LevelSequence");
        SetLocalControlRigVector2D_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigVector2D_NativeFunction, "ControlRig");
        SetLocalControlRigVector2D_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigVector2D_NativeFunction, "ControlName");
        SetLocalControlRigVector2D_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigVector2D_NativeFunction, "Frame");
        SetLocalControlRigVector2D_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigVector2D_NativeFunction, "Value");
        SetLocalControlRigVector2D_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigVector2D_NativeFunction, "TimeUnit");
        SetLocalControlRigVector2D_bSetKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigVector2D_NativeFunction, "bSetKey");
        SetLocalControlRigTransforms_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalControlRigTransforms");
        SetLocalControlRigTransforms_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalControlRigTransforms_NativeFunction);
        SetLocalControlRigTransforms_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransforms_NativeFunction, "LevelSequence");
        SetLocalControlRigTransforms_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransforms_NativeFunction, "ControlRig");
        SetLocalControlRigTransforms_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransforms_NativeFunction, "ControlName");
        SetLocalControlRigTransforms_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransforms_NativeFunction, "Frames");
        SetLocalControlRigTransforms_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLocalControlRigTransforms_NativeFunction, "Frames");
        SetLocalControlRigTransforms_Values_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransforms_NativeFunction, "Values");
        SetLocalControlRigTransforms_Values_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLocalControlRigTransforms_NativeFunction, "Values");
        SetLocalControlRigTransforms_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransforms_NativeFunction, "TimeUnit");
        SetLocalControlRigTransformNoScales_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalControlRigTransformNoScales");
        SetLocalControlRigTransformNoScales_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalControlRigTransformNoScales_NativeFunction);
        SetLocalControlRigTransformNoScales_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransformNoScales_NativeFunction, "LevelSequence");
        SetLocalControlRigTransformNoScales_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransformNoScales_NativeFunction, "ControlRig");
        SetLocalControlRigTransformNoScales_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransformNoScales_NativeFunction, "ControlName");
        SetLocalControlRigTransformNoScales_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransformNoScales_NativeFunction, "Frames");
        SetLocalControlRigTransformNoScales_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLocalControlRigTransformNoScales_NativeFunction, "Frames");
        SetLocalControlRigTransformNoScales_Values_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransformNoScales_NativeFunction, "Values");
        SetLocalControlRigTransformNoScales_Values_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLocalControlRigTransformNoScales_NativeFunction, "Values");
        SetLocalControlRigTransformNoScales_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransformNoScales_NativeFunction, "TimeUnit");
        SetLocalControlRigTransformNoScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalControlRigTransformNoScale");
        SetLocalControlRigTransformNoScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalControlRigTransformNoScale_NativeFunction);
        SetLocalControlRigTransformNoScale_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransformNoScale_NativeFunction, "LevelSequence");
        SetLocalControlRigTransformNoScale_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransformNoScale_NativeFunction, "ControlRig");
        SetLocalControlRigTransformNoScale_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransformNoScale_NativeFunction, "ControlName");
        SetLocalControlRigTransformNoScale_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransformNoScale_NativeFunction, "Frame");
        SetLocalControlRigTransformNoScale_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransformNoScale_NativeFunction, "Value");
        SetLocalControlRigTransformNoScale_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransformNoScale_NativeFunction, "TimeUnit");
        SetLocalControlRigTransformNoScale_bSetKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransformNoScale_NativeFunction, "bSetKey");
        SetLocalControlRigTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalControlRigTransform");
        SetLocalControlRigTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalControlRigTransform_NativeFunction);
        SetLocalControlRigTransform_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransform_NativeFunction, "LevelSequence");
        SetLocalControlRigTransform_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransform_NativeFunction, "ControlRig");
        SetLocalControlRigTransform_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransform_NativeFunction, "ControlName");
        SetLocalControlRigTransform_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransform_NativeFunction, "Frame");
        SetLocalControlRigTransform_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransform_NativeFunction, "Value");
        SetLocalControlRigTransform_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransform_NativeFunction, "TimeUnit");
        SetLocalControlRigTransform_bSetKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigTransform_NativeFunction, "bSetKey");
        SetLocalControlRigScales_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalControlRigScales");
        SetLocalControlRigScales_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalControlRigScales_NativeFunction);
        SetLocalControlRigScales_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigScales_NativeFunction, "LevelSequence");
        SetLocalControlRigScales_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigScales_NativeFunction, "ControlRig");
        SetLocalControlRigScales_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigScales_NativeFunction, "ControlName");
        SetLocalControlRigScales_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigScales_NativeFunction, "Frames");
        SetLocalControlRigScales_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLocalControlRigScales_NativeFunction, "Frames");
        SetLocalControlRigScales_Values_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigScales_NativeFunction, "Values");
        SetLocalControlRigScales_Values_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLocalControlRigScales_NativeFunction, "Values");
        SetLocalControlRigScales_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigScales_NativeFunction, "TimeUnit");
        SetLocalControlRigScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalControlRigScale");
        SetLocalControlRigScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalControlRigScale_NativeFunction);
        SetLocalControlRigScale_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigScale_NativeFunction, "LevelSequence");
        SetLocalControlRigScale_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigScale_NativeFunction, "ControlRig");
        SetLocalControlRigScale_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigScale_NativeFunction, "ControlName");
        SetLocalControlRigScale_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigScale_NativeFunction, "Frame");
        SetLocalControlRigScale_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigScale_NativeFunction, "Value");
        SetLocalControlRigScale_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigScale_NativeFunction, "TimeUnit");
        SetLocalControlRigScale_bSetKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigScale_NativeFunction, "bSetKey");
        SetLocalControlRigRotators_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalControlRigRotators");
        SetLocalControlRigRotators_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalControlRigRotators_NativeFunction);
        SetLocalControlRigRotators_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigRotators_NativeFunction, "LevelSequence");
        SetLocalControlRigRotators_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigRotators_NativeFunction, "ControlRig");
        SetLocalControlRigRotators_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigRotators_NativeFunction, "ControlName");
        SetLocalControlRigRotators_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigRotators_NativeFunction, "Frames");
        SetLocalControlRigRotators_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLocalControlRigRotators_NativeFunction, "Frames");
        SetLocalControlRigRotators_Values_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigRotators_NativeFunction, "Values");
        SetLocalControlRigRotators_Values_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLocalControlRigRotators_NativeFunction, "Values");
        SetLocalControlRigRotators_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigRotators_NativeFunction, "TimeUnit");
        SetLocalControlRigRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalControlRigRotator");
        SetLocalControlRigRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalControlRigRotator_NativeFunction);
        SetLocalControlRigRotator_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigRotator_NativeFunction, "LevelSequence");
        SetLocalControlRigRotator_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigRotator_NativeFunction, "ControlRig");
        SetLocalControlRigRotator_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigRotator_NativeFunction, "ControlName");
        SetLocalControlRigRotator_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigRotator_NativeFunction, "Frame");
        SetLocalControlRigRotator_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigRotator_NativeFunction, "Value");
        SetLocalControlRigRotator_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigRotator_NativeFunction, "TimeUnit");
        SetLocalControlRigRotator_bSetKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigRotator_NativeFunction, "bSetKey");
        SetLocalControlRigPositions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalControlRigPositions");
        SetLocalControlRigPositions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalControlRigPositions_NativeFunction);
        SetLocalControlRigPositions_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigPositions_NativeFunction, "LevelSequence");
        SetLocalControlRigPositions_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigPositions_NativeFunction, "ControlRig");
        SetLocalControlRigPositions_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigPositions_NativeFunction, "ControlName");
        SetLocalControlRigPositions_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigPositions_NativeFunction, "Frames");
        SetLocalControlRigPositions_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLocalControlRigPositions_NativeFunction, "Frames");
        SetLocalControlRigPositions_Values_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigPositions_NativeFunction, "Values");
        SetLocalControlRigPositions_Values_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLocalControlRigPositions_NativeFunction, "Values");
        SetLocalControlRigPositions_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigPositions_NativeFunction, "TimeUnit");
        SetLocalControlRigPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalControlRigPosition");
        SetLocalControlRigPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalControlRigPosition_NativeFunction);
        SetLocalControlRigPosition_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigPosition_NativeFunction, "LevelSequence");
        SetLocalControlRigPosition_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigPosition_NativeFunction, "ControlRig");
        SetLocalControlRigPosition_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigPosition_NativeFunction, "ControlName");
        SetLocalControlRigPosition_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigPosition_NativeFunction, "Frame");
        SetLocalControlRigPosition_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigPosition_NativeFunction, "Value");
        SetLocalControlRigPosition_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigPosition_NativeFunction, "TimeUnit");
        SetLocalControlRigPosition_bSetKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigPosition_NativeFunction, "bSetKey");
        SetLocalControlRigInts_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalControlRigInts");
        SetLocalControlRigInts_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalControlRigInts_NativeFunction);
        SetLocalControlRigInts_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigInts_NativeFunction, "LevelSequence");
        SetLocalControlRigInts_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigInts_NativeFunction, "ControlRig");
        SetLocalControlRigInts_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigInts_NativeFunction, "ControlName");
        SetLocalControlRigInts_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigInts_NativeFunction, "Frames");
        SetLocalControlRigInts_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLocalControlRigInts_NativeFunction, "Frames");
        SetLocalControlRigInts_Values_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigInts_NativeFunction, "Values");
        SetLocalControlRigInts_Values_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLocalControlRigInts_NativeFunction, "Values");
        SetLocalControlRigInts_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigInts_NativeFunction, "TimeUnit");
        SetLocalControlRigInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalControlRigInt");
        SetLocalControlRigInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalControlRigInt_NativeFunction);
        SetLocalControlRigInt_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigInt_NativeFunction, "LevelSequence");
        SetLocalControlRigInt_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigInt_NativeFunction, "ControlRig");
        SetLocalControlRigInt_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigInt_NativeFunction, "ControlName");
        SetLocalControlRigInt_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigInt_NativeFunction, "Frame");
        SetLocalControlRigInt_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigInt_NativeFunction, "Value");
        SetLocalControlRigInt_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigInt_NativeFunction, "TimeUnit");
        SetLocalControlRigInt_bSetKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigInt_NativeFunction, "bSetKey");
        SetLocalControlRigFloats_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalControlRigFloats");
        SetLocalControlRigFloats_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalControlRigFloats_NativeFunction);
        SetLocalControlRigFloats_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigFloats_NativeFunction, "LevelSequence");
        SetLocalControlRigFloats_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigFloats_NativeFunction, "ControlRig");
        SetLocalControlRigFloats_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigFloats_NativeFunction, "ControlName");
        SetLocalControlRigFloats_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigFloats_NativeFunction, "Frames");
        SetLocalControlRigFloats_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLocalControlRigFloats_NativeFunction, "Frames");
        SetLocalControlRigFloats_Values_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigFloats_NativeFunction, "Values");
        SetLocalControlRigFloats_Values_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLocalControlRigFloats_NativeFunction, "Values");
        SetLocalControlRigFloats_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigFloats_NativeFunction, "TimeUnit");
        SetLocalControlRigFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalControlRigFloat");
        SetLocalControlRigFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalControlRigFloat_NativeFunction);
        SetLocalControlRigFloat_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigFloat_NativeFunction, "LevelSequence");
        SetLocalControlRigFloat_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigFloat_NativeFunction, "ControlRig");
        SetLocalControlRigFloat_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigFloat_NativeFunction, "ControlName");
        SetLocalControlRigFloat_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigFloat_NativeFunction, "Frame");
        SetLocalControlRigFloat_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigFloat_NativeFunction, "Value");
        SetLocalControlRigFloat_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigFloat_NativeFunction, "TimeUnit");
        SetLocalControlRigFloat_bSetKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigFloat_NativeFunction, "bSetKey");
        SetLocalControlRigEulerTransforms_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalControlRigEulerTransforms");
        SetLocalControlRigEulerTransforms_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalControlRigEulerTransforms_NativeFunction);
        SetLocalControlRigEulerTransforms_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigEulerTransforms_NativeFunction, "LevelSequence");
        SetLocalControlRigEulerTransforms_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigEulerTransforms_NativeFunction, "ControlRig");
        SetLocalControlRigEulerTransforms_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigEulerTransforms_NativeFunction, "ControlName");
        SetLocalControlRigEulerTransforms_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigEulerTransforms_NativeFunction, "Frames");
        SetLocalControlRigEulerTransforms_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLocalControlRigEulerTransforms_NativeFunction, "Frames");
        SetLocalControlRigEulerTransforms_Values_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigEulerTransforms_NativeFunction, "Values");
        SetLocalControlRigEulerTransforms_Values_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLocalControlRigEulerTransforms_NativeFunction, "Values");
        SetLocalControlRigEulerTransforms_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigEulerTransforms_NativeFunction, "TimeUnit");
        SetLocalControlRigEulerTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalControlRigEulerTransform");
        SetLocalControlRigEulerTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalControlRigEulerTransform_NativeFunction);
        SetLocalControlRigEulerTransform_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigEulerTransform_NativeFunction, "LevelSequence");
        SetLocalControlRigEulerTransform_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigEulerTransform_NativeFunction, "ControlRig");
        SetLocalControlRigEulerTransform_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigEulerTransform_NativeFunction, "ControlName");
        SetLocalControlRigEulerTransform_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigEulerTransform_NativeFunction, "Frame");
        SetLocalControlRigEulerTransform_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigEulerTransform_NativeFunction, "Value");
        SetLocalControlRigEulerTransform_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigEulerTransform_NativeFunction, "TimeUnit");
        SetLocalControlRigEulerTransform_bSetKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigEulerTransform_NativeFunction, "bSetKey");
        SetLocalControlRigBools_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalControlRigBools");
        SetLocalControlRigBools_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalControlRigBools_NativeFunction);
        SetLocalControlRigBools_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigBools_NativeFunction, "LevelSequence");
        SetLocalControlRigBools_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigBools_NativeFunction, "ControlRig");
        SetLocalControlRigBools_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigBools_NativeFunction, "ControlName");
        SetLocalControlRigBools_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigBools_NativeFunction, "Frames");
        SetLocalControlRigBools_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLocalControlRigBools_NativeFunction, "Frames");
        SetLocalControlRigBools_Values_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigBools_NativeFunction, "Values");
        SetLocalControlRigBools_Values_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLocalControlRigBools_NativeFunction, "Values");
        SetLocalControlRigBools_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigBools_NativeFunction, "TimeUnit");
        SetLocalControlRigBool_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalControlRigBool");
        SetLocalControlRigBool_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalControlRigBool_NativeFunction);
        SetLocalControlRigBool_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigBool_NativeFunction, "LevelSequence");
        SetLocalControlRigBool_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigBool_NativeFunction, "ControlRig");
        SetLocalControlRigBool_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigBool_NativeFunction, "ControlName");
        SetLocalControlRigBool_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigBool_NativeFunction, "Frame");
        SetLocalControlRigBool_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigBool_NativeFunction, "Value");
        SetLocalControlRigBool_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigBool_NativeFunction, "TimeUnit");
        SetLocalControlRigBool_bSetKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalControlRigBool_NativeFunction, "bSetKey");
        SetControlsMask_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlsMask");
        SetControlsMask_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlsMask_NativeFunction);
        SetControlsMask_InSection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlsMask_NativeFunction, "InSection");
        SetControlsMask_ControlNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlsMask_NativeFunction, "ControlNames");
        SetControlsMask_ControlNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetControlsMask_NativeFunction, "ControlNames");
        SetControlsMask_bVisible_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlsMask_NativeFunction, "bVisible");
        SetControlRigWorldTransforms_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlRigWorldTransforms");
        SetControlRigWorldTransforms_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlRigWorldTransforms_NativeFunction);
        SetControlRigWorldTransforms_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigWorldTransforms_NativeFunction, "LevelSequence");
        SetControlRigWorldTransforms_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigWorldTransforms_NativeFunction, "ControlRig");
        SetControlRigWorldTransforms_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigWorldTransforms_NativeFunction, "ControlName");
        SetControlRigWorldTransforms_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigWorldTransforms_NativeFunction, "Frames");
        SetControlRigWorldTransforms_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetControlRigWorldTransforms_NativeFunction, "Frames");
        SetControlRigWorldTransforms_WorldTransforms_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigWorldTransforms_NativeFunction, "WorldTransforms");
        SetControlRigWorldTransforms_WorldTransforms_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetControlRigWorldTransforms_NativeFunction, "WorldTransforms");
        SetControlRigWorldTransforms_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigWorldTransforms_NativeFunction, "TimeUnit");
        SetControlRigWorldTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlRigWorldTransform");
        SetControlRigWorldTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlRigWorldTransform_NativeFunction);
        SetControlRigWorldTransform_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigWorldTransform_NativeFunction, "LevelSequence");
        SetControlRigWorldTransform_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigWorldTransform_NativeFunction, "ControlRig");
        SetControlRigWorldTransform_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigWorldTransform_NativeFunction, "ControlName");
        SetControlRigWorldTransform_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigWorldTransform_NativeFunction, "Frame");
        SetControlRigWorldTransform_WorldTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigWorldTransform_NativeFunction, "WorldTransform");
        SetControlRigWorldTransform_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigWorldTransform_NativeFunction, "TimeUnit");
        SetControlRigWorldTransform_bSetKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigWorldTransform_NativeFunction, "bSetKey");
        SetControlRigSpace_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlRigSpace");
        SetControlRigSpace_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlRigSpace_NativeFunction);
        SetControlRigSpace_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigSpace_NativeFunction, "InSequence");
        SetControlRigSpace_InControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigSpace_NativeFunction, "InControlRig");
        SetControlRigSpace_InControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigSpace_NativeFunction, "InControlName");
        SetControlRigSpace_InSpaceKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigSpace_NativeFunction, "InSpaceKey");
        SetControlRigSpace_InTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigSpace_NativeFunction, "InTime");
        SetControlRigSpace_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigSpace_NativeFunction, "TimeUnit");
        SetControlRigSpace_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigSpace_NativeFunction, "ReturnValue");
        SetControlRigApplyMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlRigApplyMode");
        SetControlRigApplyMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlRigApplyMode_NativeFunction);
        SetControlRigApplyMode_InControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigApplyMode_NativeFunction, "InControlRig");
        SetControlRigApplyMode_InApplyMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigApplyMode_NativeFunction, "InApplyMode");
        SetControlRigApplyMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRigApplyMode_NativeFunction, "ReturnValue");
        SetConstraintActiveKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetConstraintActiveKey");
        SetConstraintActiveKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetConstraintActiveKey_NativeFunction);
        SetConstraintActiveKey_InConstraint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConstraintActiveKey_NativeFunction, "InConstraint");
        SetConstraintActiveKey_bActive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConstraintActiveKey_NativeFunction, "bActive");
        SetConstraintActiveKey_InFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConstraintActiveKey_NativeFunction, "InFrame");
        SetConstraintActiveKey_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConstraintActiveKey_NativeFunction, "TimeUnit");
        SetConstraintActiveKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConstraintActiveKey_NativeFunction, "ReturnValue");
        RenameControlRigControlChannels_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RenameControlRigControlChannels");
        RenameControlRigControlChannels_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RenameControlRigControlChannels_NativeFunction);
        RenameControlRigControlChannels_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenameControlRigControlChannels_NativeFunction, "InSequence");
        RenameControlRigControlChannels_InControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenameControlRigControlChannels_NativeFunction, "InControlRig");
        RenameControlRigControlChannels_InOldControlNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenameControlRigControlChannels_NativeFunction, "InOldControlNames");
        RenameControlRigControlChannels_InOldControlNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(RenameControlRigControlChannels_NativeFunction, "InOldControlNames");
        RenameControlRigControlChannels_InNewControlNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenameControlRigControlChannels_NativeFunction, "InNewControlNames");
        RenameControlRigControlChannels_InNewControlNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(RenameControlRigControlChannels_NativeFunction, "InNewControlNames");
        RenameControlRigControlChannels_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenameControlRigControlChannels_NativeFunction, "ReturnValue");
        MoveControlRigSpace_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MoveControlRigSpace");
        MoveControlRigSpace_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MoveControlRigSpace_NativeFunction);
        MoveControlRigSpace_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveControlRigSpace_NativeFunction, "InSequence");
        MoveControlRigSpace_InControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveControlRigSpace_NativeFunction, "InControlRig");
        MoveControlRigSpace_InControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveControlRigSpace_NativeFunction, "InControlName");
        MoveControlRigSpace_InTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveControlRigSpace_NativeFunction, "InTime");
        MoveControlRigSpace_InNewTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveControlRigSpace_NativeFunction, "InNewTime");
        MoveControlRigSpace_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveControlRigSpace_NativeFunction, "TimeUnit");
        MoveControlRigSpace_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveControlRigSpace_NativeFunction, "ReturnValue");
        MoveConstraintKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MoveConstraintKey");
        MoveConstraintKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MoveConstraintKey_NativeFunction);
        MoveConstraintKey_Constraint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveConstraintKey_NativeFunction, "Constraint");
        MoveConstraintKey_ConstraintSection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveConstraintKey_NativeFunction, "ConstraintSection");
        MoveConstraintKey_InTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveConstraintKey_NativeFunction, "InTime");
        MoveConstraintKey_InNewTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveConstraintKey_NativeFunction, "InNewTime");
        MoveConstraintKey_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveConstraintKey_NativeFunction, "TimeUnit");
        MoveConstraintKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveConstraintKey_NativeFunction, "ReturnValue");
        LoadAnimSequenceIntoControlRigSection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LoadAnimSequenceIntoControlRigSection");
        LoadAnimSequenceIntoControlRigSection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LoadAnimSequenceIntoControlRigSection_NativeFunction);
        LoadAnimSequenceIntoControlRigSection_MovieSceneSection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LoadAnimSequenceIntoControlRigSection_NativeFunction, "MovieSceneSection");
        LoadAnimSequenceIntoControlRigSection_AnimSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LoadAnimSequenceIntoControlRigSection_NativeFunction, "AnimSequence");
        LoadAnimSequenceIntoControlRigSection_SkelMeshComp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LoadAnimSequenceIntoControlRigSection_NativeFunction, "SkelMeshComp");
        LoadAnimSequenceIntoControlRigSection_InStartFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LoadAnimSequenceIntoControlRigSection_NativeFunction, "InStartFrame");
        LoadAnimSequenceIntoControlRigSection_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LoadAnimSequenceIntoControlRigSection_NativeFunction, "TimeUnit");
        LoadAnimSequenceIntoControlRigSection_bKeyReduce_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LoadAnimSequenceIntoControlRigSection_NativeFunction, "bKeyReduce");
        LoadAnimSequenceIntoControlRigSection_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LoadAnimSequenceIntoControlRigSection_NativeFunction, "Tolerance");
        LoadAnimSequenceIntoControlRigSection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LoadAnimSequenceIntoControlRigSection_NativeFunction, "ReturnValue");
        IsFKControlRig_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsFKControlRig");
        IsFKControlRig_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsFKControlRig_NativeFunction);
        IsFKControlRig_InControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsFKControlRig_NativeFunction, "InControlRig");
        IsFKControlRig_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsFKControlRig_NativeFunction, "ReturnValue");
        HideAllControls_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HideAllControls");
        HideAllControls_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HideAllControls_NativeFunction);
        HideAllControls_InSection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HideAllControls_NativeFunction, "InSection");
        GetWorldSpaceReferenceKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWorldSpaceReferenceKey");
        GetWorldSpaceReferenceKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWorldSpaceReferenceKey_NativeFunction);
        GetWorldSpaceReferenceKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldSpaceReferenceKey_NativeFunction, "ReturnValue");
        GetVisibleControlRigs_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVisibleControlRigs");
        GetVisibleControlRigs_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVisibleControlRigs_NativeFunction);
        GetVisibleControlRigs_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVisibleControlRigs_NativeFunction, "ReturnValue");
        GetVisibleControlRigs_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetVisibleControlRigs_NativeFunction, "ReturnValue");
        GetSkeletalMeshComponentWorldTransforms_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSkeletalMeshComponentWorldTransforms");
        GetSkeletalMeshComponentWorldTransforms_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSkeletalMeshComponentWorldTransforms_NativeFunction);
        GetSkeletalMeshComponentWorldTransforms_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSkeletalMeshComponentWorldTransforms_NativeFunction, "LevelSequence");
        GetSkeletalMeshComponentWorldTransforms_SkeletalMeshComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSkeletalMeshComponentWorldTransforms_NativeFunction, "SkeletalMeshComponent");
        GetSkeletalMeshComponentWorldTransforms_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSkeletalMeshComponentWorldTransforms_NativeFunction, "Frames");
        GetSkeletalMeshComponentWorldTransforms_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSkeletalMeshComponentWorldTransforms_NativeFunction, "Frames");
        GetSkeletalMeshComponentWorldTransforms_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSkeletalMeshComponentWorldTransforms_NativeFunction, "TimeUnit");
        GetSkeletalMeshComponentWorldTransforms_ReferenceName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSkeletalMeshComponentWorldTransforms_NativeFunction, "ReferenceName");
        GetSkeletalMeshComponentWorldTransforms_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSkeletalMeshComponentWorldTransforms_NativeFunction, "ReturnValue");
        GetSkeletalMeshComponentWorldTransforms_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSkeletalMeshComponentWorldTransforms_NativeFunction, "ReturnValue");
        GetSkeletalMeshComponentWorldTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSkeletalMeshComponentWorldTransform");
        GetSkeletalMeshComponentWorldTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSkeletalMeshComponentWorldTransform_NativeFunction);
        GetSkeletalMeshComponentWorldTransform_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSkeletalMeshComponentWorldTransform_NativeFunction, "LevelSequence");
        GetSkeletalMeshComponentWorldTransform_SkeletalMeshComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSkeletalMeshComponentWorldTransform_NativeFunction, "SkeletalMeshComponent");
        GetSkeletalMeshComponentWorldTransform_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSkeletalMeshComponentWorldTransform_NativeFunction, "Frame");
        GetSkeletalMeshComponentWorldTransform_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSkeletalMeshComponentWorldTransform_NativeFunction, "TimeUnit");
        GetSkeletalMeshComponentWorldTransform_ReferenceName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSkeletalMeshComponentWorldTransform_NativeFunction, "ReferenceName");
        GetSkeletalMeshComponentWorldTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSkeletalMeshComponentWorldTransform_NativeFunction, "ReturnValue");
        GetLocalControlRigVector2Ds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlRigVector2Ds");
        GetLocalControlRigVector2Ds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlRigVector2Ds_NativeFunction);
        GetLocalControlRigVector2Ds_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigVector2Ds_NativeFunction, "LevelSequence");
        GetLocalControlRigVector2Ds_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigVector2Ds_NativeFunction, "ControlRig");
        GetLocalControlRigVector2Ds_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigVector2Ds_NativeFunction, "ControlName");
        GetLocalControlRigVector2Ds_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigVector2Ds_NativeFunction, "Frames");
        GetLocalControlRigVector2Ds_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLocalControlRigVector2Ds_NativeFunction, "Frames");
        GetLocalControlRigVector2Ds_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigVector2Ds_NativeFunction, "TimeUnit");
        GetLocalControlRigVector2Ds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigVector2Ds_NativeFunction, "ReturnValue");
        GetLocalControlRigVector2Ds_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLocalControlRigVector2Ds_NativeFunction, "ReturnValue");
        GetLocalControlRigVector2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlRigVector2D");
        GetLocalControlRigVector2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlRigVector2D_NativeFunction);
        GetLocalControlRigVector2D_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigVector2D_NativeFunction, "LevelSequence");
        GetLocalControlRigVector2D_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigVector2D_NativeFunction, "ControlRig");
        GetLocalControlRigVector2D_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigVector2D_NativeFunction, "ControlName");
        GetLocalControlRigVector2D_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigVector2D_NativeFunction, "Frame");
        GetLocalControlRigVector2D_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigVector2D_NativeFunction, "TimeUnit");
        GetLocalControlRigVector2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigVector2D_NativeFunction, "ReturnValue");
        GetLocalControlRigTransforms_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlRigTransforms");
        GetLocalControlRigTransforms_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlRigTransforms_NativeFunction);
        GetLocalControlRigTransforms_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransforms_NativeFunction, "LevelSequence");
        GetLocalControlRigTransforms_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransforms_NativeFunction, "ControlRig");
        GetLocalControlRigTransforms_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransforms_NativeFunction, "ControlName");
        GetLocalControlRigTransforms_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransforms_NativeFunction, "Frames");
        GetLocalControlRigTransforms_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLocalControlRigTransforms_NativeFunction, "Frames");
        GetLocalControlRigTransforms_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransforms_NativeFunction, "TimeUnit");
        GetLocalControlRigTransforms_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransforms_NativeFunction, "ReturnValue");
        GetLocalControlRigTransforms_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLocalControlRigTransforms_NativeFunction, "ReturnValue");
        GetLocalControlRigTransformNoScales_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlRigTransformNoScales");
        GetLocalControlRigTransformNoScales_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlRigTransformNoScales_NativeFunction);
        GetLocalControlRigTransformNoScales_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransformNoScales_NativeFunction, "LevelSequence");
        GetLocalControlRigTransformNoScales_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransformNoScales_NativeFunction, "ControlRig");
        GetLocalControlRigTransformNoScales_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransformNoScales_NativeFunction, "ControlName");
        GetLocalControlRigTransformNoScales_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransformNoScales_NativeFunction, "Frames");
        GetLocalControlRigTransformNoScales_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLocalControlRigTransformNoScales_NativeFunction, "Frames");
        GetLocalControlRigTransformNoScales_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransformNoScales_NativeFunction, "TimeUnit");
        GetLocalControlRigTransformNoScales_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransformNoScales_NativeFunction, "ReturnValue");
        GetLocalControlRigTransformNoScales_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLocalControlRigTransformNoScales_NativeFunction, "ReturnValue");
        GetLocalControlRigTransformNoScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlRigTransformNoScale");
        GetLocalControlRigTransformNoScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlRigTransformNoScale_NativeFunction);
        GetLocalControlRigTransformNoScale_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransformNoScale_NativeFunction, "LevelSequence");
        GetLocalControlRigTransformNoScale_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransformNoScale_NativeFunction, "ControlRig");
        GetLocalControlRigTransformNoScale_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransformNoScale_NativeFunction, "ControlName");
        GetLocalControlRigTransformNoScale_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransformNoScale_NativeFunction, "Frame");
        GetLocalControlRigTransformNoScale_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransformNoScale_NativeFunction, "TimeUnit");
        GetLocalControlRigTransformNoScale_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransformNoScale_NativeFunction, "ReturnValue");
        GetLocalControlRigTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlRigTransform");
        GetLocalControlRigTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlRigTransform_NativeFunction);
        GetLocalControlRigTransform_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransform_NativeFunction, "LevelSequence");
        GetLocalControlRigTransform_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransform_NativeFunction, "ControlRig");
        GetLocalControlRigTransform_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransform_NativeFunction, "ControlName");
        GetLocalControlRigTransform_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransform_NativeFunction, "Frame");
        GetLocalControlRigTransform_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransform_NativeFunction, "TimeUnit");
        GetLocalControlRigTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigTransform_NativeFunction, "ReturnValue");
        GetLocalControlRigScales_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlRigScales");
        GetLocalControlRigScales_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlRigScales_NativeFunction);
        GetLocalControlRigScales_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigScales_NativeFunction, "LevelSequence");
        GetLocalControlRigScales_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigScales_NativeFunction, "ControlRig");
        GetLocalControlRigScales_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigScales_NativeFunction, "ControlName");
        GetLocalControlRigScales_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigScales_NativeFunction, "Frames");
        GetLocalControlRigScales_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLocalControlRigScales_NativeFunction, "Frames");
        GetLocalControlRigScales_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigScales_NativeFunction, "TimeUnit");
        GetLocalControlRigScales_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigScales_NativeFunction, "ReturnValue");
        GetLocalControlRigScales_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLocalControlRigScales_NativeFunction, "ReturnValue");
        GetLocalControlRigScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlRigScale");
        GetLocalControlRigScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlRigScale_NativeFunction);
        GetLocalControlRigScale_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigScale_NativeFunction, "LevelSequence");
        GetLocalControlRigScale_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigScale_NativeFunction, "ControlRig");
        GetLocalControlRigScale_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigScale_NativeFunction, "ControlName");
        GetLocalControlRigScale_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigScale_NativeFunction, "Frame");
        GetLocalControlRigScale_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigScale_NativeFunction, "TimeUnit");
        GetLocalControlRigScale_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigScale_NativeFunction, "ReturnValue");
        GetLocalControlRigRotators_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlRigRotators");
        GetLocalControlRigRotators_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlRigRotators_NativeFunction);
        GetLocalControlRigRotators_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigRotators_NativeFunction, "LevelSequence");
        GetLocalControlRigRotators_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigRotators_NativeFunction, "ControlRig");
        GetLocalControlRigRotators_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigRotators_NativeFunction, "ControlName");
        GetLocalControlRigRotators_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigRotators_NativeFunction, "Frames");
        GetLocalControlRigRotators_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLocalControlRigRotators_NativeFunction, "Frames");
        GetLocalControlRigRotators_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigRotators_NativeFunction, "TimeUnit");
        GetLocalControlRigRotators_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigRotators_NativeFunction, "ReturnValue");
        GetLocalControlRigRotators_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLocalControlRigRotators_NativeFunction, "ReturnValue");
        GetLocalControlRigRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlRigRotator");
        GetLocalControlRigRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlRigRotator_NativeFunction);
        GetLocalControlRigRotator_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigRotator_NativeFunction, "LevelSequence");
        GetLocalControlRigRotator_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigRotator_NativeFunction, "ControlRig");
        GetLocalControlRigRotator_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigRotator_NativeFunction, "ControlName");
        GetLocalControlRigRotator_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigRotator_NativeFunction, "Frame");
        GetLocalControlRigRotator_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigRotator_NativeFunction, "TimeUnit");
        GetLocalControlRigRotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigRotator_NativeFunction, "ReturnValue");
        GetLocalControlRigPositions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlRigPositions");
        GetLocalControlRigPositions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlRigPositions_NativeFunction);
        GetLocalControlRigPositions_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigPositions_NativeFunction, "LevelSequence");
        GetLocalControlRigPositions_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigPositions_NativeFunction, "ControlRig");
        GetLocalControlRigPositions_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigPositions_NativeFunction, "ControlName");
        GetLocalControlRigPositions_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigPositions_NativeFunction, "Frames");
        GetLocalControlRigPositions_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLocalControlRigPositions_NativeFunction, "Frames");
        GetLocalControlRigPositions_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigPositions_NativeFunction, "TimeUnit");
        GetLocalControlRigPositions_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigPositions_NativeFunction, "ReturnValue");
        GetLocalControlRigPositions_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLocalControlRigPositions_NativeFunction, "ReturnValue");
        GetLocalControlRigPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlRigPosition");
        GetLocalControlRigPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlRigPosition_NativeFunction);
        GetLocalControlRigPosition_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigPosition_NativeFunction, "LevelSequence");
        GetLocalControlRigPosition_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigPosition_NativeFunction, "ControlRig");
        GetLocalControlRigPosition_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigPosition_NativeFunction, "ControlName");
        GetLocalControlRigPosition_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigPosition_NativeFunction, "Frame");
        GetLocalControlRigPosition_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigPosition_NativeFunction, "TimeUnit");
        GetLocalControlRigPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigPosition_NativeFunction, "ReturnValue");
        GetLocalControlRigInts_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlRigInts");
        GetLocalControlRigInts_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlRigInts_NativeFunction);
        GetLocalControlRigInts_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigInts_NativeFunction, "LevelSequence");
        GetLocalControlRigInts_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigInts_NativeFunction, "ControlRig");
        GetLocalControlRigInts_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigInts_NativeFunction, "ControlName");
        GetLocalControlRigInts_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigInts_NativeFunction, "Frames");
        GetLocalControlRigInts_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLocalControlRigInts_NativeFunction, "Frames");
        GetLocalControlRigInts_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigInts_NativeFunction, "TimeUnit");
        GetLocalControlRigInts_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigInts_NativeFunction, "ReturnValue");
        GetLocalControlRigInts_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLocalControlRigInts_NativeFunction, "ReturnValue");
        GetLocalControlRigInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlRigInt");
        GetLocalControlRigInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlRigInt_NativeFunction);
        GetLocalControlRigInt_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigInt_NativeFunction, "LevelSequence");
        GetLocalControlRigInt_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigInt_NativeFunction, "ControlRig");
        GetLocalControlRigInt_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigInt_NativeFunction, "ControlName");
        GetLocalControlRigInt_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigInt_NativeFunction, "Frame");
        GetLocalControlRigInt_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigInt_NativeFunction, "TimeUnit");
        GetLocalControlRigInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigInt_NativeFunction, "ReturnValue");
        GetLocalControlRigFloats_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlRigFloats");
        GetLocalControlRigFloats_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlRigFloats_NativeFunction);
        GetLocalControlRigFloats_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigFloats_NativeFunction, "LevelSequence");
        GetLocalControlRigFloats_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigFloats_NativeFunction, "ControlRig");
        GetLocalControlRigFloats_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigFloats_NativeFunction, "ControlName");
        GetLocalControlRigFloats_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigFloats_NativeFunction, "Frames");
        GetLocalControlRigFloats_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLocalControlRigFloats_NativeFunction, "Frames");
        GetLocalControlRigFloats_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigFloats_NativeFunction, "TimeUnit");
        GetLocalControlRigFloats_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigFloats_NativeFunction, "ReturnValue");
        GetLocalControlRigFloats_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLocalControlRigFloats_NativeFunction, "ReturnValue");
        GetLocalControlRigFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlRigFloat");
        GetLocalControlRigFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlRigFloat_NativeFunction);
        GetLocalControlRigFloat_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigFloat_NativeFunction, "LevelSequence");
        GetLocalControlRigFloat_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigFloat_NativeFunction, "ControlRig");
        GetLocalControlRigFloat_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigFloat_NativeFunction, "ControlName");
        GetLocalControlRigFloat_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigFloat_NativeFunction, "Frame");
        GetLocalControlRigFloat_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigFloat_NativeFunction, "TimeUnit");
        GetLocalControlRigFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigFloat_NativeFunction, "ReturnValue");
        GetLocalControlRigEulerTransforms_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlRigEulerTransforms");
        GetLocalControlRigEulerTransforms_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlRigEulerTransforms_NativeFunction);
        GetLocalControlRigEulerTransforms_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigEulerTransforms_NativeFunction, "LevelSequence");
        GetLocalControlRigEulerTransforms_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigEulerTransforms_NativeFunction, "ControlRig");
        GetLocalControlRigEulerTransforms_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigEulerTransforms_NativeFunction, "ControlName");
        GetLocalControlRigEulerTransforms_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigEulerTransforms_NativeFunction, "Frames");
        GetLocalControlRigEulerTransforms_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLocalControlRigEulerTransforms_NativeFunction, "Frames");
        GetLocalControlRigEulerTransforms_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigEulerTransforms_NativeFunction, "TimeUnit");
        GetLocalControlRigEulerTransforms_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigEulerTransforms_NativeFunction, "ReturnValue");
        GetLocalControlRigEulerTransforms_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLocalControlRigEulerTransforms_NativeFunction, "ReturnValue");
        GetLocalControlRigEulerTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlRigEulerTransform");
        GetLocalControlRigEulerTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlRigEulerTransform_NativeFunction);
        GetLocalControlRigEulerTransform_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigEulerTransform_NativeFunction, "LevelSequence");
        GetLocalControlRigEulerTransform_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigEulerTransform_NativeFunction, "ControlRig");
        GetLocalControlRigEulerTransform_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigEulerTransform_NativeFunction, "ControlName");
        GetLocalControlRigEulerTransform_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigEulerTransform_NativeFunction, "Frame");
        GetLocalControlRigEulerTransform_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigEulerTransform_NativeFunction, "TimeUnit");
        GetLocalControlRigEulerTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigEulerTransform_NativeFunction, "ReturnValue");
        GetLocalControlRigBools_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlRigBools");
        GetLocalControlRigBools_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlRigBools_NativeFunction);
        GetLocalControlRigBools_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigBools_NativeFunction, "LevelSequence");
        GetLocalControlRigBools_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigBools_NativeFunction, "ControlRig");
        GetLocalControlRigBools_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigBools_NativeFunction, "ControlName");
        GetLocalControlRigBools_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigBools_NativeFunction, "Frames");
        GetLocalControlRigBools_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLocalControlRigBools_NativeFunction, "Frames");
        GetLocalControlRigBools_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigBools_NativeFunction, "TimeUnit");
        GetLocalControlRigBools_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigBools_NativeFunction, "ReturnValue");
        GetLocalControlRigBools_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLocalControlRigBools_NativeFunction, "ReturnValue");
        GetLocalControlRigBool_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalControlRigBool");
        GetLocalControlRigBool_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalControlRigBool_NativeFunction);
        GetLocalControlRigBool_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigBool_NativeFunction, "LevelSequence");
        GetLocalControlRigBool_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigBool_NativeFunction, "ControlRig");
        GetLocalControlRigBool_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigBool_NativeFunction, "ControlName");
        GetLocalControlRigBool_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigBool_NativeFunction, "Frame");
        GetLocalControlRigBool_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigBool_NativeFunction, "TimeUnit");
        GetLocalControlRigBool_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalControlRigBool_NativeFunction, "ReturnValue");
        GetFKControlRigApplyMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFKControlRigApplyMode");
        GetFKControlRigApplyMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFKControlRigApplyMode_NativeFunction);
        GetFKControlRigApplyMode_InControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFKControlRigApplyMode_NativeFunction, "InControlRig");
        GetFKControlRigApplyMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFKControlRigApplyMode_NativeFunction, "ReturnValue");
        GetDefaultParentKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDefaultParentKey");
        GetDefaultParentKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDefaultParentKey_NativeFunction);
        GetDefaultParentKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultParentKey_NativeFunction, "ReturnValue");
        GetControlsMask_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlsMask");
        GetControlsMask_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlsMask_NativeFunction);
        GetControlsMask_InSection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlsMask_NativeFunction, "InSection");
        GetControlsMask_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlsMask_NativeFunction, "ControlName");
        GetControlsMask_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlsMask_NativeFunction, "ReturnValue");
        GetControlRigWorldTransforms_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlRigWorldTransforms");
        GetControlRigWorldTransforms_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlRigWorldTransforms_NativeFunction);
        GetControlRigWorldTransforms_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlRigWorldTransforms_NativeFunction, "LevelSequence");
        GetControlRigWorldTransforms_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlRigWorldTransforms_NativeFunction, "ControlRig");
        GetControlRigWorldTransforms_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlRigWorldTransforms_NativeFunction, "ControlName");
        GetControlRigWorldTransforms_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlRigWorldTransforms_NativeFunction, "Frames");
        GetControlRigWorldTransforms_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetControlRigWorldTransforms_NativeFunction, "Frames");
        GetControlRigWorldTransforms_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlRigWorldTransforms_NativeFunction, "TimeUnit");
        GetControlRigWorldTransforms_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlRigWorldTransforms_NativeFunction, "ReturnValue");
        GetControlRigWorldTransforms_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetControlRigWorldTransforms_NativeFunction, "ReturnValue");
        GetControlRigWorldTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlRigWorldTransform");
        GetControlRigWorldTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlRigWorldTransform_NativeFunction);
        GetControlRigWorldTransform_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlRigWorldTransform_NativeFunction, "LevelSequence");
        GetControlRigWorldTransform_ControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlRigWorldTransform_NativeFunction, "ControlRig");
        GetControlRigWorldTransform_ControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlRigWorldTransform_NativeFunction, "ControlName");
        GetControlRigWorldTransform_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlRigWorldTransform_NativeFunction, "Frame");
        GetControlRigWorldTransform_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlRigWorldTransform_NativeFunction, "TimeUnit");
        GetControlRigWorldTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlRigWorldTransform_NativeFunction, "ReturnValue");
        GetControlRigs_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlRigs");
        GetControlRigs_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlRigs_NativeFunction);
        GetControlRigs_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlRigs_NativeFunction, "LevelSequence");
        GetControlRigs_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlRigs_NativeFunction, "ReturnValue");
        GetControlRigs_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetControlRigs_NativeFunction, "ReturnValue");
        GetConstraintsForHandle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetConstraintsForHandle");
        GetConstraintsForHandle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetConstraintsForHandle_NativeFunction);
        GetConstraintsForHandle_InWorld_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConstraintsForHandle_NativeFunction, "InWorld");
        GetConstraintsForHandle_InChild_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConstraintsForHandle_NativeFunction, "InChild");
        GetConstraintsForHandle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConstraintsForHandle_NativeFunction, "ReturnValue");
        GetConstraintsForHandle_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetConstraintsForHandle_NativeFunction, "ReturnValue");
        GetConstraintKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetConstraintKeys");
        GetConstraintKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetConstraintKeys_NativeFunction);
        GetConstraintKeys_InConstraint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConstraintKeys_NativeFunction, "InConstraint");
        GetConstraintKeys_ConstraintSection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConstraintKeys_NativeFunction, "ConstraintSection");
        GetConstraintKeys_OutBools_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConstraintKeys_NativeFunction, "OutBools");
        GetConstraintKeys_OutBools_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetConstraintKeys_NativeFunction, "OutBools");
        GetConstraintKeys_OutFrames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConstraintKeys_NativeFunction, "OutFrames");
        GetConstraintKeys_OutFrames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetConstraintKeys_NativeFunction, "OutFrames");
        GetConstraintKeys_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConstraintKeys_NativeFunction, "TimeUnit");
        GetConstraintKeys_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConstraintKeys_NativeFunction, "ReturnValue");
        GetActorWorldTransforms_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActorWorldTransforms");
        GetActorWorldTransforms_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActorWorldTransforms_NativeFunction);
        GetActorWorldTransforms_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorWorldTransforms_NativeFunction, "LevelSequence");
        GetActorWorldTransforms_Actor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorWorldTransforms_NativeFunction, "Actor");
        GetActorWorldTransforms_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorWorldTransforms_NativeFunction, "Frames");
        GetActorWorldTransforms_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetActorWorldTransforms_NativeFunction, "Frames");
        GetActorWorldTransforms_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorWorldTransforms_NativeFunction, "TimeUnit");
        GetActorWorldTransforms_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorWorldTransforms_NativeFunction, "ReturnValue");
        GetActorWorldTransforms_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetActorWorldTransforms_NativeFunction, "ReturnValue");
        GetActorWorldTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActorWorldTransform");
        GetActorWorldTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActorWorldTransform_NativeFunction);
        GetActorWorldTransform_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorWorldTransform_NativeFunction, "LevelSequence");
        GetActorWorldTransform_Actor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorWorldTransform_NativeFunction, "Actor");
        GetActorWorldTransform_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorWorldTransform_NativeFunction, "Frame");
        GetActorWorldTransform_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorWorldTransform_NativeFunction, "TimeUnit");
        GetActorWorldTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorWorldTransform_NativeFunction, "ReturnValue");
        FindOrCreateControlRigTrack_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindOrCreateControlRigTrack");
        FindOrCreateControlRigTrack_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindOrCreateControlRigTrack_NativeFunction);
        FindOrCreateControlRigTrack_World_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindOrCreateControlRigTrack_NativeFunction, "World");
        FindOrCreateControlRigTrack_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindOrCreateControlRigTrack_NativeFunction, "LevelSequence");
        FindOrCreateControlRigTrack_ControlRigClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindOrCreateControlRigTrack_NativeFunction, "ControlRigClass");
        FindOrCreateControlRigTrack_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindOrCreateControlRigTrack_NativeFunction, "InBinding");
        FindOrCreateControlRigTrack_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindOrCreateControlRigTrack_NativeFunction, "ReturnValue");
        FindOrCreateControlRigComponentTrack_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindOrCreateControlRigComponentTrack");
        FindOrCreateControlRigComponentTrack_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindOrCreateControlRigComponentTrack_NativeFunction);
        FindOrCreateControlRigComponentTrack_World_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindOrCreateControlRigComponentTrack_NativeFunction, "World");
        FindOrCreateControlRigComponentTrack_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindOrCreateControlRigComponentTrack_NativeFunction, "LevelSequence");
        FindOrCreateControlRigComponentTrack_InBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindOrCreateControlRigComponentTrack_NativeFunction, "InBinding");
        FindOrCreateControlRigComponentTrack_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindOrCreateControlRigComponentTrack_NativeFunction, "ReturnValue");
        FindOrCreateControlRigComponentTrack_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(FindOrCreateControlRigComponentTrack_NativeFunction, "ReturnValue");
        ExportFBXFromControlRigSection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ExportFBXFromControlRigSection");
        ExportFBXFromControlRigSection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ExportFBXFromControlRigSection_NativeFunction);
        ExportFBXFromControlRigSection_Sequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportFBXFromControlRigSection_NativeFunction, "Sequence");
        ExportFBXFromControlRigSection_Section_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportFBXFromControlRigSection_NativeFunction, "Section");
        ExportFBXFromControlRigSection_ExportFBXControlRigSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportFBXFromControlRigSection_NativeFunction, "ExportFBXControlRigSettings");
        ExportFBXFromControlRigSection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportFBXFromControlRigSection_NativeFunction, "ReturnValue");
        DeleteControlRigSpace_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeleteControlRigSpace");
        DeleteControlRigSpace_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeleteControlRigSpace_NativeFunction);
        DeleteControlRigSpace_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteControlRigSpace_NativeFunction, "InSequence");
        DeleteControlRigSpace_InControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteControlRigSpace_NativeFunction, "InControlRig");
        DeleteControlRigSpace_InControlName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteControlRigSpace_NativeFunction, "InControlName");
        DeleteControlRigSpace_InTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteControlRigSpace_NativeFunction, "InTime");
        DeleteControlRigSpace_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteControlRigSpace_NativeFunction, "TimeUnit");
        DeleteControlRigSpace_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteControlRigSpace_NativeFunction, "ReturnValue");
        DeleteConstraintKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeleteConstraintKey");
        DeleteConstraintKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeleteConstraintKey_NativeFunction);
        DeleteConstraintKey_Constraint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteConstraintKey_NativeFunction, "Constraint");
        DeleteConstraintKey_ConstraintSection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteConstraintKey_NativeFunction, "ConstraintSection");
        DeleteConstraintKey_InTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteConstraintKey_NativeFunction, "InTime");
        DeleteConstraintKey_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteConstraintKey_NativeFunction, "TimeUnit");
        DeleteConstraintKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteConstraintKey_NativeFunction, "ReturnValue");
        CompensateAll_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CompensateAll");
        CompensateAll_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CompensateAll_NativeFunction);
        CompensateAll_InConstraint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CompensateAll_NativeFunction, "InConstraint");
        CompensateAll_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CompensateAll_NativeFunction, "ReturnValue");
        Compensate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Compensate");
        Compensate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Compensate_NativeFunction);
        Compensate_InConstraint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Compensate_NativeFunction, "InConstraint");
        Compensate_InTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Compensate_NativeFunction, "InTime");
        Compensate_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Compensate_NativeFunction, "TimeUnit");
        Compensate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Compensate_NativeFunction, "ReturnValue");
        CollapseControlRigAnimLayersWithSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CollapseControlRigAnimLayersWithSettings");
        CollapseControlRigAnimLayersWithSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CollapseControlRigAnimLayersWithSettings_NativeFunction);
        CollapseControlRigAnimLayersWithSettings_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CollapseControlRigAnimLayersWithSettings_NativeFunction, "InSequence");
        CollapseControlRigAnimLayersWithSettings_InTrack_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CollapseControlRigAnimLayersWithSettings_NativeFunction, "InTrack");
        CollapseControlRigAnimLayersWithSettings_InSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CollapseControlRigAnimLayersWithSettings_NativeFunction, "InSettings");
        CollapseControlRigAnimLayersWithSettings_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CollapseControlRigAnimLayersWithSettings_NativeFunction, "ReturnValue");
        CollapseControlRigAnimLayers_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CollapseControlRigAnimLayers");
        CollapseControlRigAnimLayers_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CollapseControlRigAnimLayers_NativeFunction);
        CollapseControlRigAnimLayers_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CollapseControlRigAnimLayers_NativeFunction, "InSequence");
        CollapseControlRigAnimLayers_InTrack_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CollapseControlRigAnimLayers_NativeFunction, "InTrack");
        CollapseControlRigAnimLayers_bKeyReduce_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CollapseControlRigAnimLayers_NativeFunction, "bKeyReduce");
        CollapseControlRigAnimLayers_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CollapseControlRigAnimLayers_NativeFunction, "Tolerance");
        CollapseControlRigAnimLayers_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CollapseControlRigAnimLayers_NativeFunction, "ReturnValue");
        BlendValuesOnSelected_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BlendValuesOnSelected");
        BlendValuesOnSelected_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BlendValuesOnSelected_NativeFunction);
        BlendValuesOnSelected_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlendValuesOnSelected_NativeFunction, "LevelSequence");
        BlendValuesOnSelected_BlendOperation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlendValuesOnSelected_NativeFunction, "BlendOperation");
        BlendValuesOnSelected_BlendValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlendValuesOnSelected_NativeFunction, "BlendValue");
        BlendValuesOnSelected_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlendValuesOnSelected_NativeFunction, "ReturnValue");
        BakeToControlRig_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BakeToControlRig");
        BakeToControlRig_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BakeToControlRig_NativeFunction);
        BakeToControlRig_World_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeToControlRig_NativeFunction, "World");
        BakeToControlRig_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeToControlRig_NativeFunction, "LevelSequence");
        BakeToControlRig_ControlRigClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeToControlRig_NativeFunction, "ControlRigClass");
        BakeToControlRig_ExportOptions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeToControlRig_NativeFunction, "ExportOptions");
        BakeToControlRig_bReduceKeys_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeToControlRig_NativeFunction, "bReduceKeys");
        BakeToControlRig_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeToControlRig_NativeFunction, "Tolerance");
        BakeToControlRig_Binding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeToControlRig_NativeFunction, "Binding");
        BakeToControlRig_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeToControlRig_NativeFunction, "ReturnValue");
        BakeControlRigSpace_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BakeControlRigSpace");
        BakeControlRigSpace_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BakeControlRigSpace_NativeFunction);
        BakeControlRigSpace_InSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeControlRigSpace_NativeFunction, "InSequence");
        BakeControlRigSpace_InControlRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeControlRigSpace_NativeFunction, "InControlRig");
        BakeControlRigSpace_InControlNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeControlRigSpace_NativeFunction, "InControlNames");
        BakeControlRigSpace_InControlNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BakeControlRigSpace_NativeFunction, "InControlNames");
        BakeControlRigSpace_InSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeControlRigSpace_NativeFunction, "InSettings");
        BakeControlRigSpace_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeControlRigSpace_NativeFunction, "TimeUnit");
        BakeControlRigSpace_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeControlRigSpace_NativeFunction, "ReturnValue");
        BakeConstraints_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BakeConstraints");
        BakeConstraints_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BakeConstraints_NativeFunction);
        BakeConstraints_World_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeConstraints_NativeFunction, "World");
        BakeConstraints_InConstraints_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeConstraints_NativeFunction, "InConstraints");
        BakeConstraints_InConstraints_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BakeConstraints_NativeFunction, "InConstraints");
        BakeConstraints_InSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeConstraints_NativeFunction, "InSettings");
        BakeConstraints_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeConstraints_NativeFunction, "ReturnValue");
        BakeConstraint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BakeConstraint");
        BakeConstraint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BakeConstraint_NativeFunction);
        BakeConstraint_World_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeConstraint_NativeFunction, "World");
        BakeConstraint_Constraint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeConstraint_NativeFunction, "Constraint");
        BakeConstraint_Frames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeConstraint_NativeFunction, "Frames");
        BakeConstraint_Frames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BakeConstraint_NativeFunction, "Frames");
        BakeConstraint_TimeUnit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeConstraint_NativeFunction, "TimeUnit");
        BakeConstraint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeConstraint_NativeFunction, "ReturnValue");
        AddConstraint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddConstraint");
        AddConstraint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddConstraint_NativeFunction);
        AddConstraint_World_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddConstraint_NativeFunction, "World");
        AddConstraint_InType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddConstraint_NativeFunction, "InType");
        AddConstraint_InChild_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddConstraint_NativeFunction, "InChild");
        AddConstraint_InParent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddConstraint_NativeFunction, "InParent");
        AddConstraint_bMaintainOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddConstraint_NativeFunction, "bMaintainOffset");
        AddConstraint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddConstraint_NativeFunction, "ReturnValue");
        
        
    }
    
    protected ControlRigSequencerLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:TweenControlRig
    static readonly IntPtr TweenControlRig_NativeFunction;
    static readonly int TweenControlRig_ParamsSize;
    static readonly int TweenControlRig_LevelSequence_Offset;
    static readonly int TweenControlRig_ControlRig_Offset;
    static readonly int TweenControlRig_TweenValue_Offset;
    static readonly int TweenControlRig_ReturnValue_Offset;
    
    public static bool TweenControlRig(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, float tweenValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TweenControlRig_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, TweenControlRig_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, TweenControlRig_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, TweenControlRig_TweenValue_Offset), 0, null, tweenValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, TweenControlRig_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, TweenControlRig_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SnapControlRig
    static readonly IntPtr SnapControlRig_NativeFunction;
    static readonly int SnapControlRig_ParamsSize;
    static readonly int SnapControlRig_LevelSequence_Offset;
    static readonly int SnapControlRig_StartFrame_Offset;
    static readonly int SnapControlRig_EndFrame_Offset;
    static readonly int SnapControlRig_ChildrenToSnap_Offset;
    static readonly int SnapControlRig_ParentToSnap_Offset;
    static readonly int SnapControlRig_SnapSettings_Offset;
    static readonly int SnapControlRig_TimeUnit_Offset;
    static readonly int SnapControlRig_ReturnValue_Offset;
    
    public static bool SnapControlRig(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.CoreUObject.FrameNumber startFrame, UnrealSharp.CoreUObject.FrameNumber endFrame, UnrealSharp.ControlRigEditor.ControlRigSnapperSelection childrenToSnap, UnrealSharp.ControlRigEditor.ControlRigSnapperSelection parentToSnap, UnrealSharp.ControlRigEditor.ControlRigSnapSettings snapSettings, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SnapControlRig_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SnapControlRig_LevelSequence_Offset), 0, null, levelSequence);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, SnapControlRig_StartFrame_Offset), 0, null, startFrame);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, SnapControlRig_EndFrame_Offset), 0, null, endFrame);
            UnrealSharp.ControlRigEditor.ControlRigSnapperSelectionMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SnapControlRig_ChildrenToSnap_Offset), 0, null, childrenToSnap);
            UnrealSharp.ControlRigEditor.ControlRigSnapperSelectionMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SnapControlRig_ParentToSnap_Offset), 0, null, parentToSnap);
            ObjectMarshaller<UnrealSharp.ControlRigEditor.ControlRigSnapSettings>.ToNative(IntPtr.Add(ParamsBuffer, SnapControlRig_SnapSettings_Offset), 0, null, snapSettings);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SnapControlRig_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SnapControlRig_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SnapControlRig_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:ShowAllControls
    static readonly IntPtr ShowAllControls_NativeFunction;
    static readonly int ShowAllControls_ParamsSize;
    static readonly int ShowAllControls_InSection_Offset;
    
    public static void ShowAllControls(UnrealSharp.MovieScene.MovieSceneSection inSection)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ShowAllControls_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.ToNative(IntPtr.Add(ParamsBuffer, ShowAllControls_InSection_Offset), 0, null, inSection);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ShowAllControls_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetLocalControlRigVector2Ds
    static readonly IntPtr SetLocalControlRigVector2Ds_NativeFunction;
    static readonly int SetLocalControlRigVector2Ds_ParamsSize;
    static readonly int SetLocalControlRigVector2Ds_LevelSequence_Offset;
    static readonly int SetLocalControlRigVector2Ds_ControlRig_Offset;
    static readonly int SetLocalControlRigVector2Ds_ControlName_Offset;
    static readonly int SetLocalControlRigVector2Ds_Frames_Offset;
    static readonly int SetLocalControlRigVector2Ds_Frames_ElementSize;
    static readonly int SetLocalControlRigVector2Ds_Values_Offset;
    static readonly int SetLocalControlRigVector2Ds_Values_ElementSize;
    static readonly int SetLocalControlRigVector2Ds_TimeUnit_Offset;
    
    public static void SetLocalControlRigVector2Ds(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, System.Collections.Generic.IList<System.DoubleNumerics.Vector2> values, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalControlRigVector2Ds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigVector2Ds_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigVector2Ds_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigVector2Ds_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLocalControlRigVector2Ds_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, SetLocalControlRigVector2Ds_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            IntPtr Values_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLocalControlRigVector2Ds_Values_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> Values_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>(1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, SetLocalControlRigVector2Ds_Values_ElementSize);
            Values_Marshaler.ToNative(Values_NativeBuffer, 0, null, values);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigVector2Ds_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLocalControlRigVector2Ds_NativeFunction, ParamsBuffer);
            
            
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>.DestructInstance(Values_NativeBuffer, 0);
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetLocalControlRigVector2D
    static readonly IntPtr SetLocalControlRigVector2D_NativeFunction;
    static readonly int SetLocalControlRigVector2D_ParamsSize;
    static readonly int SetLocalControlRigVector2D_LevelSequence_Offset;
    static readonly int SetLocalControlRigVector2D_ControlRig_Offset;
    static readonly int SetLocalControlRigVector2D_ControlName_Offset;
    static readonly int SetLocalControlRigVector2D_Frame_Offset;
    static readonly int SetLocalControlRigVector2D_Value_Offset;
    static readonly int SetLocalControlRigVector2D_TimeUnit_Offset;
    static readonly int SetLocalControlRigVector2D_bSetKey_Offset;
    
    public static void SetLocalControlRigVector2D(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, System.DoubleNumerics.Vector2 value, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate, bool bSetKey = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalControlRigVector2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigVector2D_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigVector2D_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigVector2D_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigVector2D_Frame_Offset), 0, null, frame);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigVector2D_Value_Offset), 0, null, value);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigVector2D_TimeUnit_Offset), 0, null, timeUnit);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigVector2D_bSetKey_Offset), 0, null, bSetKey);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLocalControlRigVector2D_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetLocalControlRigTransforms
    static readonly IntPtr SetLocalControlRigTransforms_NativeFunction;
    static readonly int SetLocalControlRigTransforms_ParamsSize;
    static readonly int SetLocalControlRigTransforms_LevelSequence_Offset;
    static readonly int SetLocalControlRigTransforms_ControlRig_Offset;
    static readonly int SetLocalControlRigTransforms_ControlName_Offset;
    static readonly int SetLocalControlRigTransforms_Frames_Offset;
    static readonly int SetLocalControlRigTransforms_Frames_ElementSize;
    static readonly int SetLocalControlRigTransforms_Values_Offset;
    static readonly int SetLocalControlRigTransforms_Values_ElementSize;
    static readonly int SetLocalControlRigTransforms_TimeUnit_Offset;
    
    public static void SetLocalControlRigTransforms(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, System.Collections.Generic.IList<UnrealSharp.Transform> values, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalControlRigTransforms_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransforms_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransforms_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransforms_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLocalControlRigTransforms_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, SetLocalControlRigTransforms_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            IntPtr Values_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLocalControlRigTransforms_Values_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform> Values_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Transform>(1, BlittableMarshaller<UnrealSharp.Transform>.ToNative, BlittableMarshaller<UnrealSharp.Transform>.FromNative, SetLocalControlRigTransforms_Values_ElementSize);
            Values_Marshaler.ToNative(Values_NativeBuffer, 0, null, values);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransforms_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLocalControlRigTransforms_NativeFunction, ParamsBuffer);
            
            
            UnrealArrayCopyMarshaler<UnrealSharp.Transform>.DestructInstance(Values_NativeBuffer, 0);
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetLocalControlRigTransformNoScales
    static readonly IntPtr SetLocalControlRigTransformNoScales_NativeFunction;
    static readonly int SetLocalControlRigTransformNoScales_ParamsSize;
    static readonly int SetLocalControlRigTransformNoScales_LevelSequence_Offset;
    static readonly int SetLocalControlRigTransformNoScales_ControlRig_Offset;
    static readonly int SetLocalControlRigTransformNoScales_ControlName_Offset;
    static readonly int SetLocalControlRigTransformNoScales_Frames_Offset;
    static readonly int SetLocalControlRigTransformNoScales_Frames_ElementSize;
    static readonly int SetLocalControlRigTransformNoScales_Values_Offset;
    static readonly int SetLocalControlRigTransformNoScales_Values_ElementSize;
    static readonly int SetLocalControlRigTransformNoScales_TimeUnit_Offset;
    
    public static void SetLocalControlRigTransformNoScales(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, System.Collections.Generic.IList<UnrealSharp.AnimationCore.TransformNoScale> values, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalControlRigTransformNoScales_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransformNoScales_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransformNoScales_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransformNoScales_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLocalControlRigTransformNoScales_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, SetLocalControlRigTransformNoScales_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            IntPtr Values_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLocalControlRigTransformNoScales_Values_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.AnimationCore.TransformNoScale> Values_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.AnimationCore.TransformNoScale>(1, UnrealSharp.AnimationCore.TransformNoScaleMarshaler.ToNative, UnrealSharp.AnimationCore.TransformNoScaleMarshaler.FromNative, SetLocalControlRigTransformNoScales_Values_ElementSize);
            Values_Marshaler.ToNative(Values_NativeBuffer, 0, null, values);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransformNoScales_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLocalControlRigTransformNoScales_NativeFunction, ParamsBuffer);
            
            
            UnrealArrayCopyMarshaler<UnrealSharp.AnimationCore.TransformNoScale>.DestructInstance(Values_NativeBuffer, 0);
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetLocalControlRigTransformNoScale
    static readonly IntPtr SetLocalControlRigTransformNoScale_NativeFunction;
    static readonly int SetLocalControlRigTransformNoScale_ParamsSize;
    static readonly int SetLocalControlRigTransformNoScale_LevelSequence_Offset;
    static readonly int SetLocalControlRigTransformNoScale_ControlRig_Offset;
    static readonly int SetLocalControlRigTransformNoScale_ControlName_Offset;
    static readonly int SetLocalControlRigTransformNoScale_Frame_Offset;
    static readonly int SetLocalControlRigTransformNoScale_Value_Offset;
    static readonly int SetLocalControlRigTransformNoScale_TimeUnit_Offset;
    static readonly int SetLocalControlRigTransformNoScale_bSetKey_Offset;
    
    public static void SetLocalControlRigTransformNoScale(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, UnrealSharp.AnimationCore.TransformNoScale value, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate, bool bSetKey = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalControlRigTransformNoScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransformNoScale_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransformNoScale_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransformNoScale_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransformNoScale_Frame_Offset), 0, null, frame);
            UnrealSharp.AnimationCore.TransformNoScaleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransformNoScale_Value_Offset), 0, null, value);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransformNoScale_TimeUnit_Offset), 0, null, timeUnit);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransformNoScale_bSetKey_Offset), 0, null, bSetKey);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLocalControlRigTransformNoScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetLocalControlRigTransform
    static readonly IntPtr SetLocalControlRigTransform_NativeFunction;
    static readonly int SetLocalControlRigTransform_ParamsSize;
    static readonly int SetLocalControlRigTransform_LevelSequence_Offset;
    static readonly int SetLocalControlRigTransform_ControlRig_Offset;
    static readonly int SetLocalControlRigTransform_ControlName_Offset;
    static readonly int SetLocalControlRigTransform_Frame_Offset;
    static readonly int SetLocalControlRigTransform_Value_Offset;
    static readonly int SetLocalControlRigTransform_TimeUnit_Offset;
    static readonly int SetLocalControlRigTransform_bSetKey_Offset;
    
    public static void SetLocalControlRigTransform(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, UnrealSharp.Transform value, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate, bool bSetKey = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalControlRigTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransform_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransform_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransform_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransform_Frame_Offset), 0, null, frame);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransform_Value_Offset), 0, null, value);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransform_TimeUnit_Offset), 0, null, timeUnit);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigTransform_bSetKey_Offset), 0, null, bSetKey);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLocalControlRigTransform_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetLocalControlRigScales
    static readonly IntPtr SetLocalControlRigScales_NativeFunction;
    static readonly int SetLocalControlRigScales_ParamsSize;
    static readonly int SetLocalControlRigScales_LevelSequence_Offset;
    static readonly int SetLocalControlRigScales_ControlRig_Offset;
    static readonly int SetLocalControlRigScales_ControlName_Offset;
    static readonly int SetLocalControlRigScales_Frames_Offset;
    static readonly int SetLocalControlRigScales_Frames_ElementSize;
    static readonly int SetLocalControlRigScales_Values_Offset;
    static readonly int SetLocalControlRigScales_Values_ElementSize;
    static readonly int SetLocalControlRigScales_TimeUnit_Offset;
    
    public static void SetLocalControlRigScales(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, System.Collections.Generic.IList<System.DoubleNumerics.Vector3> values, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalControlRigScales_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigScales_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigScales_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigScales_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLocalControlRigScales_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, SetLocalControlRigScales_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            IntPtr Values_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLocalControlRigScales_Values_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Values_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, SetLocalControlRigScales_Values_ElementSize);
            Values_Marshaler.ToNative(Values_NativeBuffer, 0, null, values);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigScales_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLocalControlRigScales_NativeFunction, ParamsBuffer);
            
            
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(Values_NativeBuffer, 0);
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetLocalControlRigScale
    static readonly IntPtr SetLocalControlRigScale_NativeFunction;
    static readonly int SetLocalControlRigScale_ParamsSize;
    static readonly int SetLocalControlRigScale_LevelSequence_Offset;
    static readonly int SetLocalControlRigScale_ControlRig_Offset;
    static readonly int SetLocalControlRigScale_ControlName_Offset;
    static readonly int SetLocalControlRigScale_Frame_Offset;
    static readonly int SetLocalControlRigScale_Value_Offset;
    static readonly int SetLocalControlRigScale_TimeUnit_Offset;
    static readonly int SetLocalControlRigScale_bSetKey_Offset;
    
    public static void SetLocalControlRigScale(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, System.DoubleNumerics.Vector3 value, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate, bool bSetKey = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalControlRigScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigScale_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigScale_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigScale_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigScale_Frame_Offset), 0, null, frame);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigScale_Value_Offset), 0, null, value);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigScale_TimeUnit_Offset), 0, null, timeUnit);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigScale_bSetKey_Offset), 0, null, bSetKey);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLocalControlRigScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetLocalControlRigRotators
    static readonly IntPtr SetLocalControlRigRotators_NativeFunction;
    static readonly int SetLocalControlRigRotators_ParamsSize;
    static readonly int SetLocalControlRigRotators_LevelSequence_Offset;
    static readonly int SetLocalControlRigRotators_ControlRig_Offset;
    static readonly int SetLocalControlRigRotators_ControlName_Offset;
    static readonly int SetLocalControlRigRotators_Frames_Offset;
    static readonly int SetLocalControlRigRotators_Frames_ElementSize;
    static readonly int SetLocalControlRigRotators_Values_Offset;
    static readonly int SetLocalControlRigRotators_Values_ElementSize;
    static readonly int SetLocalControlRigRotators_TimeUnit_Offset;
    
    public static void SetLocalControlRigRotators(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, System.Collections.Generic.IList<UnrealSharp.Rotator> values, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalControlRigRotators_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigRotators_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigRotators_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigRotators_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLocalControlRigRotators_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, SetLocalControlRigRotators_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            IntPtr Values_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLocalControlRigRotators_Values_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Rotator> Values_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Rotator>(1, BlittableMarshaller<UnrealSharp.Rotator>.ToNative, BlittableMarshaller<UnrealSharp.Rotator>.FromNative, SetLocalControlRigRotators_Values_ElementSize);
            Values_Marshaler.ToNative(Values_NativeBuffer, 0, null, values);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigRotators_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLocalControlRigRotators_NativeFunction, ParamsBuffer);
            
            
            UnrealArrayCopyMarshaler<UnrealSharp.Rotator>.DestructInstance(Values_NativeBuffer, 0);
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetLocalControlRigRotator
    static readonly IntPtr SetLocalControlRigRotator_NativeFunction;
    static readonly int SetLocalControlRigRotator_ParamsSize;
    static readonly int SetLocalControlRigRotator_LevelSequence_Offset;
    static readonly int SetLocalControlRigRotator_ControlRig_Offset;
    static readonly int SetLocalControlRigRotator_ControlName_Offset;
    static readonly int SetLocalControlRigRotator_Frame_Offset;
    static readonly int SetLocalControlRigRotator_Value_Offset;
    static readonly int SetLocalControlRigRotator_TimeUnit_Offset;
    static readonly int SetLocalControlRigRotator_bSetKey_Offset;
    
    public static void SetLocalControlRigRotator(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, UnrealSharp.Rotator value, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate, bool bSetKey = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalControlRigRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigRotator_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigRotator_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigRotator_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigRotator_Frame_Offset), 0, null, frame);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigRotator_Value_Offset), 0, null, value);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigRotator_TimeUnit_Offset), 0, null, timeUnit);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigRotator_bSetKey_Offset), 0, null, bSetKey);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLocalControlRigRotator_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetLocalControlRigPositions
    static readonly IntPtr SetLocalControlRigPositions_NativeFunction;
    static readonly int SetLocalControlRigPositions_ParamsSize;
    static readonly int SetLocalControlRigPositions_LevelSequence_Offset;
    static readonly int SetLocalControlRigPositions_ControlRig_Offset;
    static readonly int SetLocalControlRigPositions_ControlName_Offset;
    static readonly int SetLocalControlRigPositions_Frames_Offset;
    static readonly int SetLocalControlRigPositions_Frames_ElementSize;
    static readonly int SetLocalControlRigPositions_Values_Offset;
    static readonly int SetLocalControlRigPositions_Values_ElementSize;
    static readonly int SetLocalControlRigPositions_TimeUnit_Offset;
    
    public static void SetLocalControlRigPositions(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, System.Collections.Generic.IList<System.DoubleNumerics.Vector3> values, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalControlRigPositions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigPositions_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigPositions_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigPositions_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLocalControlRigPositions_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, SetLocalControlRigPositions_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            IntPtr Values_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLocalControlRigPositions_Values_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Values_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, SetLocalControlRigPositions_Values_ElementSize);
            Values_Marshaler.ToNative(Values_NativeBuffer, 0, null, values);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigPositions_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLocalControlRigPositions_NativeFunction, ParamsBuffer);
            
            
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(Values_NativeBuffer, 0);
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetLocalControlRigPosition
    static readonly IntPtr SetLocalControlRigPosition_NativeFunction;
    static readonly int SetLocalControlRigPosition_ParamsSize;
    static readonly int SetLocalControlRigPosition_LevelSequence_Offset;
    static readonly int SetLocalControlRigPosition_ControlRig_Offset;
    static readonly int SetLocalControlRigPosition_ControlName_Offset;
    static readonly int SetLocalControlRigPosition_Frame_Offset;
    static readonly int SetLocalControlRigPosition_Value_Offset;
    static readonly int SetLocalControlRigPosition_TimeUnit_Offset;
    static readonly int SetLocalControlRigPosition_bSetKey_Offset;
    
    public static void SetLocalControlRigPosition(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, System.DoubleNumerics.Vector3 value, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate, bool bSetKey = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalControlRigPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigPosition_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigPosition_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigPosition_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigPosition_Frame_Offset), 0, null, frame);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigPosition_Value_Offset), 0, null, value);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigPosition_TimeUnit_Offset), 0, null, timeUnit);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigPosition_bSetKey_Offset), 0, null, bSetKey);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLocalControlRigPosition_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetLocalControlRigInts
    static readonly IntPtr SetLocalControlRigInts_NativeFunction;
    static readonly int SetLocalControlRigInts_ParamsSize;
    static readonly int SetLocalControlRigInts_LevelSequence_Offset;
    static readonly int SetLocalControlRigInts_ControlRig_Offset;
    static readonly int SetLocalControlRigInts_ControlName_Offset;
    static readonly int SetLocalControlRigInts_Frames_Offset;
    static readonly int SetLocalControlRigInts_Frames_ElementSize;
    static readonly int SetLocalControlRigInts_Values_Offset;
    static readonly int SetLocalControlRigInts_Values_ElementSize;
    static readonly int SetLocalControlRigInts_TimeUnit_Offset;
    
    public static void SetLocalControlRigInts(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, System.Collections.Generic.IList<int> values, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalControlRigInts_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigInts_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigInts_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigInts_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLocalControlRigInts_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, SetLocalControlRigInts_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            IntPtr Values_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLocalControlRigInts_Values_Offset);
            UnrealArrayCopyMarshaler<int> Values_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, SetLocalControlRigInts_Values_ElementSize);
            Values_Marshaler.ToNative(Values_NativeBuffer, 0, null, values);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigInts_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLocalControlRigInts_NativeFunction, ParamsBuffer);
            
            
            UnrealArrayCopyMarshaler<int>.DestructInstance(Values_NativeBuffer, 0);
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetLocalControlRigInt
    static readonly IntPtr SetLocalControlRigInt_NativeFunction;
    static readonly int SetLocalControlRigInt_ParamsSize;
    static readonly int SetLocalControlRigInt_LevelSequence_Offset;
    static readonly int SetLocalControlRigInt_ControlRig_Offset;
    static readonly int SetLocalControlRigInt_ControlName_Offset;
    static readonly int SetLocalControlRigInt_Frame_Offset;
    static readonly int SetLocalControlRigInt_Value_Offset;
    static readonly int SetLocalControlRigInt_TimeUnit_Offset;
    static readonly int SetLocalControlRigInt_bSetKey_Offset;
    
    public static void SetLocalControlRigInt(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, int value, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate, bool bSetKey = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalControlRigInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigInt_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigInt_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigInt_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigInt_Frame_Offset), 0, null, frame);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigInt_Value_Offset), 0, null, value);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigInt_TimeUnit_Offset), 0, null, timeUnit);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigInt_bSetKey_Offset), 0, null, bSetKey);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLocalControlRigInt_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetLocalControlRigFloats
    static readonly IntPtr SetLocalControlRigFloats_NativeFunction;
    static readonly int SetLocalControlRigFloats_ParamsSize;
    static readonly int SetLocalControlRigFloats_LevelSequence_Offset;
    static readonly int SetLocalControlRigFloats_ControlRig_Offset;
    static readonly int SetLocalControlRigFloats_ControlName_Offset;
    static readonly int SetLocalControlRigFloats_Frames_Offset;
    static readonly int SetLocalControlRigFloats_Frames_ElementSize;
    static readonly int SetLocalControlRigFloats_Values_Offset;
    static readonly int SetLocalControlRigFloats_Values_ElementSize;
    static readonly int SetLocalControlRigFloats_TimeUnit_Offset;
    
    public static void SetLocalControlRigFloats(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, System.Collections.Generic.IList<float> values, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalControlRigFloats_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigFloats_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigFloats_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigFloats_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLocalControlRigFloats_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, SetLocalControlRigFloats_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            IntPtr Values_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLocalControlRigFloats_Values_Offset);
            UnrealArrayCopyMarshaler<float> Values_Marshaler = new UnrealArrayCopyMarshaler<float>(1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, SetLocalControlRigFloats_Values_ElementSize);
            Values_Marshaler.ToNative(Values_NativeBuffer, 0, null, values);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigFloats_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLocalControlRigFloats_NativeFunction, ParamsBuffer);
            
            
            UnrealArrayCopyMarshaler<float>.DestructInstance(Values_NativeBuffer, 0);
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetLocalControlRigFloat
    static readonly IntPtr SetLocalControlRigFloat_NativeFunction;
    static readonly int SetLocalControlRigFloat_ParamsSize;
    static readonly int SetLocalControlRigFloat_LevelSequence_Offset;
    static readonly int SetLocalControlRigFloat_ControlRig_Offset;
    static readonly int SetLocalControlRigFloat_ControlName_Offset;
    static readonly int SetLocalControlRigFloat_Frame_Offset;
    static readonly int SetLocalControlRigFloat_Value_Offset;
    static readonly int SetLocalControlRigFloat_TimeUnit_Offset;
    static readonly int SetLocalControlRigFloat_bSetKey_Offset;
    
    public static void SetLocalControlRigFloat(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, float value, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate, bool bSetKey = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalControlRigFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigFloat_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigFloat_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigFloat_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigFloat_Frame_Offset), 0, null, frame);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigFloat_Value_Offset), 0, null, value);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigFloat_TimeUnit_Offset), 0, null, timeUnit);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigFloat_bSetKey_Offset), 0, null, bSetKey);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLocalControlRigFloat_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetLocalControlRigEulerTransforms
    static readonly IntPtr SetLocalControlRigEulerTransforms_NativeFunction;
    static readonly int SetLocalControlRigEulerTransforms_ParamsSize;
    static readonly int SetLocalControlRigEulerTransforms_LevelSequence_Offset;
    static readonly int SetLocalControlRigEulerTransforms_ControlRig_Offset;
    static readonly int SetLocalControlRigEulerTransforms_ControlName_Offset;
    static readonly int SetLocalControlRigEulerTransforms_Frames_Offset;
    static readonly int SetLocalControlRigEulerTransforms_Frames_ElementSize;
    static readonly int SetLocalControlRigEulerTransforms_Values_Offset;
    static readonly int SetLocalControlRigEulerTransforms_Values_ElementSize;
    static readonly int SetLocalControlRigEulerTransforms_TimeUnit_Offset;
    
    public static void SetLocalControlRigEulerTransforms(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, System.Collections.Generic.IList<UnrealSharp.AnimationCore.EulerTransform> values, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalControlRigEulerTransforms_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigEulerTransforms_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigEulerTransforms_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigEulerTransforms_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLocalControlRigEulerTransforms_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, SetLocalControlRigEulerTransforms_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            IntPtr Values_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLocalControlRigEulerTransforms_Values_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.AnimationCore.EulerTransform> Values_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.AnimationCore.EulerTransform>(1, BlittableMarshaller<UnrealSharp.AnimationCore.EulerTransform>.ToNative, BlittableMarshaller<UnrealSharp.AnimationCore.EulerTransform>.FromNative, SetLocalControlRigEulerTransforms_Values_ElementSize);
            Values_Marshaler.ToNative(Values_NativeBuffer, 0, null, values);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigEulerTransforms_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLocalControlRigEulerTransforms_NativeFunction, ParamsBuffer);
            
            
            UnrealArrayCopyMarshaler<UnrealSharp.AnimationCore.EulerTransform>.DestructInstance(Values_NativeBuffer, 0);
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetLocalControlRigEulerTransform
    static readonly IntPtr SetLocalControlRigEulerTransform_NativeFunction;
    static readonly int SetLocalControlRigEulerTransform_ParamsSize;
    static readonly int SetLocalControlRigEulerTransform_LevelSequence_Offset;
    static readonly int SetLocalControlRigEulerTransform_ControlRig_Offset;
    static readonly int SetLocalControlRigEulerTransform_ControlName_Offset;
    static readonly int SetLocalControlRigEulerTransform_Frame_Offset;
    static readonly int SetLocalControlRigEulerTransform_Value_Offset;
    static readonly int SetLocalControlRigEulerTransform_TimeUnit_Offset;
    static readonly int SetLocalControlRigEulerTransform_bSetKey_Offset;
    
    public static void SetLocalControlRigEulerTransform(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, UnrealSharp.AnimationCore.EulerTransform value, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate, bool bSetKey = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalControlRigEulerTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigEulerTransform_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigEulerTransform_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigEulerTransform_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigEulerTransform_Frame_Offset), 0, null, frame);
            BlittableMarshaller<UnrealSharp.AnimationCore.EulerTransform>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigEulerTransform_Value_Offset), 0, null, value);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigEulerTransform_TimeUnit_Offset), 0, null, timeUnit);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigEulerTransform_bSetKey_Offset), 0, null, bSetKey);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLocalControlRigEulerTransform_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetLocalControlRigBools
    static readonly IntPtr SetLocalControlRigBools_NativeFunction;
    static readonly int SetLocalControlRigBools_ParamsSize;
    static readonly int SetLocalControlRigBools_LevelSequence_Offset;
    static readonly int SetLocalControlRigBools_ControlRig_Offset;
    static readonly int SetLocalControlRigBools_ControlName_Offset;
    static readonly int SetLocalControlRigBools_Frames_Offset;
    static readonly int SetLocalControlRigBools_Frames_ElementSize;
    static readonly int SetLocalControlRigBools_Values_Offset;
    static readonly int SetLocalControlRigBools_Values_ElementSize;
    static readonly int SetLocalControlRigBools_TimeUnit_Offset;
    
    public static void SetLocalControlRigBools(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, System.Collections.Generic.IList<bool> values, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalControlRigBools_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigBools_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigBools_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigBools_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLocalControlRigBools_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, SetLocalControlRigBools_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            IntPtr Values_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLocalControlRigBools_Values_Offset);
            UnrealArrayCopyMarshaler<bool> Values_Marshaler = new UnrealArrayCopyMarshaler<bool>(1, BoolMarshaller.ToNative, BoolMarshaller.FromNative, SetLocalControlRigBools_Values_ElementSize);
            Values_Marshaler.ToNative(Values_NativeBuffer, 0, null, values);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigBools_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLocalControlRigBools_NativeFunction, ParamsBuffer);
            
            
            UnrealArrayCopyMarshaler<bool>.DestructInstance(Values_NativeBuffer, 0);
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetLocalControlRigBool
    static readonly IntPtr SetLocalControlRigBool_NativeFunction;
    static readonly int SetLocalControlRigBool_ParamsSize;
    static readonly int SetLocalControlRigBool_LevelSequence_Offset;
    static readonly int SetLocalControlRigBool_ControlRig_Offset;
    static readonly int SetLocalControlRigBool_ControlName_Offset;
    static readonly int SetLocalControlRigBool_Frame_Offset;
    static readonly int SetLocalControlRigBool_Value_Offset;
    static readonly int SetLocalControlRigBool_TimeUnit_Offset;
    static readonly int SetLocalControlRigBool_bSetKey_Offset;
    
    public static void SetLocalControlRigBool(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, bool value, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate, bool bSetKey = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalControlRigBool_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigBool_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigBool_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigBool_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigBool_Frame_Offset), 0, null, frame);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigBool_Value_Offset), 0, null, value);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigBool_TimeUnit_Offset), 0, null, timeUnit);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocalControlRigBool_bSetKey_Offset), 0, null, bSetKey);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLocalControlRigBool_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetControlsMask
    static readonly IntPtr SetControlsMask_NativeFunction;
    static readonly int SetControlsMask_ParamsSize;
    static readonly int SetControlsMask_InSection_Offset;
    static readonly int SetControlsMask_ControlNames_Offset;
    static readonly int SetControlsMask_ControlNames_ElementSize;
    static readonly int SetControlsMask_bVisible_Offset;
    
    public static void SetControlsMask(UnrealSharp.MovieScene.MovieSceneSection inSection, System.Collections.Generic.IList<Name> controlNames, bool bVisible)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlsMask_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.ToNative(IntPtr.Add(ParamsBuffer, SetControlsMask_InSection_Offset), 0, null, inSection);
            IntPtr ControlNames_NativeBuffer = IntPtr.Add(ParamsBuffer, SetControlsMask_ControlNames_Offset);
            UnrealArrayCopyMarshaler<Name> ControlNames_Marshaler = new UnrealArrayCopyMarshaler<Name>(1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, SetControlsMask_ControlNames_ElementSize);
            ControlNames_Marshaler.ToNative(ControlNames_NativeBuffer, 0, null, controlNames);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlsMask_bVisible_Offset), 0, null, bVisible);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetControlsMask_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetControlRigWorldTransforms
    static readonly IntPtr SetControlRigWorldTransforms_NativeFunction;
    static readonly int SetControlRigWorldTransforms_ParamsSize;
    static readonly int SetControlRigWorldTransforms_LevelSequence_Offset;
    static readonly int SetControlRigWorldTransforms_ControlRig_Offset;
    static readonly int SetControlRigWorldTransforms_ControlName_Offset;
    static readonly int SetControlRigWorldTransforms_Frames_Offset;
    static readonly int SetControlRigWorldTransforms_Frames_ElementSize;
    static readonly int SetControlRigWorldTransforms_WorldTransforms_Offset;
    static readonly int SetControlRigWorldTransforms_WorldTransforms_ElementSize;
    static readonly int SetControlRigWorldTransforms_TimeUnit_Offset;
    
    public static void SetControlRigWorldTransforms(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, System.Collections.Generic.IList<UnrealSharp.Transform> worldTransforms, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlRigWorldTransforms_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRigWorldTransforms_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRigWorldTransforms_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRigWorldTransforms_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, SetControlRigWorldTransforms_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, SetControlRigWorldTransforms_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            IntPtr WorldTransforms_NativeBuffer = IntPtr.Add(ParamsBuffer, SetControlRigWorldTransforms_WorldTransforms_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform> WorldTransforms_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Transform>(1, BlittableMarshaller<UnrealSharp.Transform>.ToNative, BlittableMarshaller<UnrealSharp.Transform>.FromNative, SetControlRigWorldTransforms_WorldTransforms_ElementSize);
            WorldTransforms_Marshaler.ToNative(WorldTransforms_NativeBuffer, 0, null, worldTransforms);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRigWorldTransforms_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetControlRigWorldTransforms_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetControlRigWorldTransform
    static readonly IntPtr SetControlRigWorldTransform_NativeFunction;
    static readonly int SetControlRigWorldTransform_ParamsSize;
    static readonly int SetControlRigWorldTransform_LevelSequence_Offset;
    static readonly int SetControlRigWorldTransform_ControlRig_Offset;
    static readonly int SetControlRigWorldTransform_ControlName_Offset;
    static readonly int SetControlRigWorldTransform_Frame_Offset;
    static readonly int SetControlRigWorldTransform_WorldTransform_Offset;
    static readonly int SetControlRigWorldTransform_TimeUnit_Offset;
    static readonly int SetControlRigWorldTransform_bSetKey_Offset;
    
    public static void SetControlRigWorldTransform(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, UnrealSharp.Transform worldTransform, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate, bool bSetKey = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlRigWorldTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRigWorldTransform_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRigWorldTransform_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRigWorldTransform_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRigWorldTransform_Frame_Offset), 0, null, frame);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRigWorldTransform_WorldTransform_Offset), 0, null, worldTransform);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRigWorldTransform_TimeUnit_Offset), 0, null, timeUnit);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetControlRigWorldTransform_bSetKey_Offset), 0, null, bSetKey);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetControlRigWorldTransform_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetControlRigSpace
    static readonly IntPtr SetControlRigSpace_NativeFunction;
    static readonly int SetControlRigSpace_ParamsSize;
    static readonly int SetControlRigSpace_InSequence_Offset;
    static readonly int SetControlRigSpace_InControlRig_Offset;
    static readonly int SetControlRigSpace_InControlName_Offset;
    static readonly int SetControlRigSpace_InSpaceKey_Offset;
    static readonly int SetControlRigSpace_InTime_Offset;
    static readonly int SetControlRigSpace_TimeUnit_Offset;
    static readonly int SetControlRigSpace_ReturnValue_Offset;
    
    public static bool SetControlRigSpace(UnrealSharp.LevelSequence.LevelSequence inSequence, UnrealSharp.ControlRig.ControlRig inControlRig, Name inControlName, UnrealSharp.ControlRig.RigElementKey inSpaceKey, UnrealSharp.CoreUObject.FrameNumber inTime, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlRigSpace_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRigSpace_InSequence_Offset), 0, null, inSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRigSpace_InControlRig_Offset), 0, null, inControlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRigSpace_InControlName_Offset), 0, null, inControlName);
            UnrealSharp.ControlRig.RigElementKeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetControlRigSpace_InSpaceKey_Offset), 0, null, inSpaceKey);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRigSpace_InTime_Offset), 0, null, inTime);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRigSpace_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetControlRigSpace_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetControlRigSpace_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetControlRigApplyMode
    static readonly IntPtr SetControlRigApplyMode_NativeFunction;
    static readonly int SetControlRigApplyMode_ParamsSize;
    static readonly int SetControlRigApplyMode_InControlRig_Offset;
    static readonly int SetControlRigApplyMode_InApplyMode_Offset;
    static readonly int SetControlRigApplyMode_ReturnValue_Offset;
    
    public static bool SetControlRigApplyMode(UnrealSharp.ControlRig.ControlRig inControlRig, UnrealSharp.ControlRig.EControlRigFKRigExecuteMode inApplyMode)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlRigApplyMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRigApplyMode_InControlRig_Offset), 0, null, inControlRig);
            BlittableMarshaller<UnrealSharp.ControlRig.EControlRigFKRigExecuteMode>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRigApplyMode_InApplyMode_Offset), 0, null, inApplyMode);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetControlRigApplyMode_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetControlRigApplyMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:SetConstraintActiveKey
    static readonly IntPtr SetConstraintActiveKey_NativeFunction;
    static readonly int SetConstraintActiveKey_ParamsSize;
    static readonly int SetConstraintActiveKey_InConstraint_Offset;
    static readonly int SetConstraintActiveKey_bActive_Offset;
    static readonly int SetConstraintActiveKey_InFrame_Offset;
    static readonly int SetConstraintActiveKey_TimeUnit_Offset;
    static readonly int SetConstraintActiveKey_ReturnValue_Offset;
    
    public static bool SetConstraintActiveKey(UnrealSharp.Constraints.TickableConstraint inConstraint, bool bActive, UnrealSharp.CoreUObject.FrameNumber inFrame, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetConstraintActiveKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Constraints.TickableConstraint>.ToNative(IntPtr.Add(ParamsBuffer, SetConstraintActiveKey_InConstraint_Offset), 0, null, inConstraint);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetConstraintActiveKey_bActive_Offset), 0, null, bActive);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, SetConstraintActiveKey_InFrame_Offset), 0, null, inFrame);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, SetConstraintActiveKey_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetConstraintActiveKey_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetConstraintActiveKey_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:RenameControlRigControlChannels
    static readonly IntPtr RenameControlRigControlChannels_NativeFunction;
    static readonly int RenameControlRigControlChannels_ParamsSize;
    static readonly int RenameControlRigControlChannels_InSequence_Offset;
    static readonly int RenameControlRigControlChannels_InControlRig_Offset;
    static readonly int RenameControlRigControlChannels_InOldControlNames_Offset;
    static readonly int RenameControlRigControlChannels_InOldControlNames_ElementSize;
    static readonly int RenameControlRigControlChannels_InNewControlNames_Offset;
    static readonly int RenameControlRigControlChannels_InNewControlNames_ElementSize;
    static readonly int RenameControlRigControlChannels_ReturnValue_Offset;
    
    public static bool RenameControlRigControlChannels(UnrealSharp.LevelSequence.LevelSequence inSequence, UnrealSharp.ControlRig.ControlRig inControlRig, System.Collections.Generic.IList<Name> inOldControlNames, System.Collections.Generic.IList<Name> inNewControlNames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RenameControlRigControlChannels_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, RenameControlRigControlChannels_InSequence_Offset), 0, null, inSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, RenameControlRigControlChannels_InControlRig_Offset), 0, null, inControlRig);
            IntPtr InOldControlNames_NativeBuffer = IntPtr.Add(ParamsBuffer, RenameControlRigControlChannels_InOldControlNames_Offset);
            UnrealArrayCopyMarshaler<Name> InOldControlNames_Marshaler = new UnrealArrayCopyMarshaler<Name>(1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, RenameControlRigControlChannels_InOldControlNames_ElementSize);
            InOldControlNames_Marshaler.ToNative(InOldControlNames_NativeBuffer, 0, null, inOldControlNames);
            IntPtr InNewControlNames_NativeBuffer = IntPtr.Add(ParamsBuffer, RenameControlRigControlChannels_InNewControlNames_Offset);
            UnrealArrayCopyMarshaler<Name> InNewControlNames_Marshaler = new UnrealArrayCopyMarshaler<Name>(1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, RenameControlRigControlChannels_InNewControlNames_ElementSize);
            InNewControlNames_Marshaler.ToNative(InNewControlNames_NativeBuffer, 0, null, inNewControlNames);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RenameControlRigControlChannels_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RenameControlRigControlChannels_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:MoveControlRigSpace
    static readonly IntPtr MoveControlRigSpace_NativeFunction;
    static readonly int MoveControlRigSpace_ParamsSize;
    static readonly int MoveControlRigSpace_InSequence_Offset;
    static readonly int MoveControlRigSpace_InControlRig_Offset;
    static readonly int MoveControlRigSpace_InControlName_Offset;
    static readonly int MoveControlRigSpace_InTime_Offset;
    static readonly int MoveControlRigSpace_InNewTime_Offset;
    static readonly int MoveControlRigSpace_TimeUnit_Offset;
    static readonly int MoveControlRigSpace_ReturnValue_Offset;
    
    public static bool MoveControlRigSpace(UnrealSharp.LevelSequence.LevelSequence inSequence, UnrealSharp.ControlRig.ControlRig inControlRig, Name inControlName, UnrealSharp.CoreUObject.FrameNumber inTime, UnrealSharp.CoreUObject.FrameNumber inNewTime, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MoveControlRigSpace_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, MoveControlRigSpace_InSequence_Offset), 0, null, inSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, MoveControlRigSpace_InControlRig_Offset), 0, null, inControlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, MoveControlRigSpace_InControlName_Offset), 0, null, inControlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, MoveControlRigSpace_InTime_Offset), 0, null, inTime);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, MoveControlRigSpace_InNewTime_Offset), 0, null, inNewTime);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, MoveControlRigSpace_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MoveControlRigSpace_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, MoveControlRigSpace_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:MoveConstraintKey
    static readonly IntPtr MoveConstraintKey_NativeFunction;
    static readonly int MoveConstraintKey_ParamsSize;
    static readonly int MoveConstraintKey_Constraint_Offset;
    static readonly int MoveConstraintKey_ConstraintSection_Offset;
    static readonly int MoveConstraintKey_InTime_Offset;
    static readonly int MoveConstraintKey_InNewTime_Offset;
    static readonly int MoveConstraintKey_TimeUnit_Offset;
    static readonly int MoveConstraintKey_ReturnValue_Offset;
    
    public static bool MoveConstraintKey(UnrealSharp.Constraints.TickableConstraint constraint, UnrealSharp.MovieScene.MovieSceneSection constraintSection, UnrealSharp.CoreUObject.FrameNumber inTime, UnrealSharp.CoreUObject.FrameNumber inNewTime, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MoveConstraintKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Constraints.TickableConstraint>.ToNative(IntPtr.Add(ParamsBuffer, MoveConstraintKey_Constraint_Offset), 0, null, constraint);
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.ToNative(IntPtr.Add(ParamsBuffer, MoveConstraintKey_ConstraintSection_Offset), 0, null, constraintSection);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, MoveConstraintKey_InTime_Offset), 0, null, inTime);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, MoveConstraintKey_InNewTime_Offset), 0, null, inNewTime);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, MoveConstraintKey_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MoveConstraintKey_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, MoveConstraintKey_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:LoadAnimSequenceIntoControlRigSection
    static readonly IntPtr LoadAnimSequenceIntoControlRigSection_NativeFunction;
    static readonly int LoadAnimSequenceIntoControlRigSection_ParamsSize;
    static readonly int LoadAnimSequenceIntoControlRigSection_MovieSceneSection_Offset;
    static readonly int LoadAnimSequenceIntoControlRigSection_AnimSequence_Offset;
    static readonly int LoadAnimSequenceIntoControlRigSection_SkelMeshComp_Offset;
    static readonly int LoadAnimSequenceIntoControlRigSection_InStartFrame_Offset;
    static readonly int LoadAnimSequenceIntoControlRigSection_TimeUnit_Offset;
    static readonly int LoadAnimSequenceIntoControlRigSection_bKeyReduce_Offset;
    static readonly int LoadAnimSequenceIntoControlRigSection_Tolerance_Offset;
    static readonly int LoadAnimSequenceIntoControlRigSection_ReturnValue_Offset;
    
    public static bool LoadAnimSequenceIntoControlRigSection(UnrealSharp.MovieScene.MovieSceneSection movieSceneSection, UnrealSharp.Engine.AnimSequence animSequence, UnrealSharp.Engine.SkeletalMeshComponent skelMeshComp, UnrealSharp.CoreUObject.FrameNumber inStartFrame, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate, bool bKeyReduce = false, float tolerance = 0.001000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LoadAnimSequenceIntoControlRigSection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.ToNative(IntPtr.Add(ParamsBuffer, LoadAnimSequenceIntoControlRigSection_MovieSceneSection_Offset), 0, null, movieSceneSection);
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, LoadAnimSequenceIntoControlRigSection_AnimSequence_Offset), 0, null, animSequence);
            ObjectMarshaller<UnrealSharp.Engine.SkeletalMeshComponent>.ToNative(IntPtr.Add(ParamsBuffer, LoadAnimSequenceIntoControlRigSection_SkelMeshComp_Offset), 0, null, skelMeshComp);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, LoadAnimSequenceIntoControlRigSection_InStartFrame_Offset), 0, null, inStartFrame);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, LoadAnimSequenceIntoControlRigSection_TimeUnit_Offset), 0, null, timeUnit);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LoadAnimSequenceIntoControlRigSection_bKeyReduce_Offset), 0, null, bKeyReduce);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LoadAnimSequenceIntoControlRigSection_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LoadAnimSequenceIntoControlRigSection_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LoadAnimSequenceIntoControlRigSection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:IsFKControlRig
    static readonly IntPtr IsFKControlRig_NativeFunction;
    static readonly int IsFKControlRig_ParamsSize;
    static readonly int IsFKControlRig_InControlRig_Offset;
    static readonly int IsFKControlRig_ReturnValue_Offset;
    
    public static bool IsFKControlRig(UnrealSharp.ControlRig.ControlRig inControlRig)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsFKControlRig_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, IsFKControlRig_InControlRig_Offset), 0, null, inControlRig);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsFKControlRig_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsFKControlRig_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:HideAllControls
    static readonly IntPtr HideAllControls_NativeFunction;
    static readonly int HideAllControls_ParamsSize;
    static readonly int HideAllControls_InSection_Offset;
    
    public static void HideAllControls(UnrealSharp.MovieScene.MovieSceneSection inSection)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HideAllControls_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.ToNative(IntPtr.Add(ParamsBuffer, HideAllControls_InSection_Offset), 0, null, inSection);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, HideAllControls_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetWorldSpaceReferenceKey
    static readonly IntPtr GetWorldSpaceReferenceKey_NativeFunction;
    static readonly int GetWorldSpaceReferenceKey_ParamsSize;
    static readonly int GetWorldSpaceReferenceKey_ReturnValue_Offset;
    
    public static UnrealSharp.ControlRig.RigElementKey GetWorldSpaceReferenceKey()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWorldSpaceReferenceKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetWorldSpaceReferenceKey_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigElementKey returnValue;
            returnValue = UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetWorldSpaceReferenceKey_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetVisibleControlRigs
    static readonly IntPtr GetVisibleControlRigs_NativeFunction;
    static readonly int GetVisibleControlRigs_ParamsSize;
    static readonly int GetVisibleControlRigs_ReturnValue_Offset;
    static readonly int GetVisibleControlRigs_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.ControlRig.ControlRig> GetVisibleControlRigs()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVisibleControlRigs_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetVisibleControlRigs_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.ControlRig.ControlRig> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetVisibleControlRigs_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.ControlRig> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.ControlRig> (1, ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative, ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.FromNative, GetVisibleControlRigs_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRig.ControlRig>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetSkeletalMeshComponentWorldTransforms
    static readonly IntPtr GetSkeletalMeshComponentWorldTransforms_NativeFunction;
    static readonly int GetSkeletalMeshComponentWorldTransforms_ParamsSize;
    static readonly int GetSkeletalMeshComponentWorldTransforms_LevelSequence_Offset;
    static readonly int GetSkeletalMeshComponentWorldTransforms_SkeletalMeshComponent_Offset;
    static readonly int GetSkeletalMeshComponentWorldTransforms_Frames_Offset;
    static readonly int GetSkeletalMeshComponentWorldTransforms_Frames_ElementSize;
    static readonly int GetSkeletalMeshComponentWorldTransforms_TimeUnit_Offset;
    static readonly int GetSkeletalMeshComponentWorldTransforms_ReferenceName_Offset;
    static readonly int GetSkeletalMeshComponentWorldTransforms_ReturnValue_Offset;
    static readonly int GetSkeletalMeshComponentWorldTransforms_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.Transform> GetSkeletalMeshComponentWorldTransforms(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.Engine.SkeletalMeshComponent skeletalMeshComponent, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate, Name referenceName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSkeletalMeshComponentWorldTransforms_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetSkeletalMeshComponentWorldTransforms_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.Engine.SkeletalMeshComponent>.ToNative(IntPtr.Add(ParamsBuffer, GetSkeletalMeshComponentWorldTransforms_SkeletalMeshComponent_Offset), 0, null, skeletalMeshComponent);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSkeletalMeshComponentWorldTransforms_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, GetSkeletalMeshComponentWorldTransforms_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetSkeletalMeshComponentWorldTransforms_TimeUnit_Offset), 0, null, timeUnit);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetSkeletalMeshComponentWorldTransforms_ReferenceName_Offset), 0, null, referenceName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSkeletalMeshComponentWorldTransforms_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.Transform> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSkeletalMeshComponentWorldTransforms_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Transform> (1, BlittableMarshaller<UnrealSharp.Transform>.ToNative, BlittableMarshaller<UnrealSharp.Transform>.FromNative, GetSkeletalMeshComponentWorldTransforms_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetSkeletalMeshComponentWorldTransform
    static readonly IntPtr GetSkeletalMeshComponentWorldTransform_NativeFunction;
    static readonly int GetSkeletalMeshComponentWorldTransform_ParamsSize;
    static readonly int GetSkeletalMeshComponentWorldTransform_LevelSequence_Offset;
    static readonly int GetSkeletalMeshComponentWorldTransform_SkeletalMeshComponent_Offset;
    static readonly int GetSkeletalMeshComponentWorldTransform_Frame_Offset;
    static readonly int GetSkeletalMeshComponentWorldTransform_TimeUnit_Offset;
    static readonly int GetSkeletalMeshComponentWorldTransform_ReferenceName_Offset;
    static readonly int GetSkeletalMeshComponentWorldTransform_ReturnValue_Offset;
    
    public static UnrealSharp.Transform GetSkeletalMeshComponentWorldTransform(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.Engine.SkeletalMeshComponent skeletalMeshComponent, UnrealSharp.CoreUObject.FrameNumber frame, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate, Name referenceName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSkeletalMeshComponentWorldTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetSkeletalMeshComponentWorldTransform_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.Engine.SkeletalMeshComponent>.ToNative(IntPtr.Add(ParamsBuffer, GetSkeletalMeshComponentWorldTransform_SkeletalMeshComponent_Offset), 0, null, skeletalMeshComponent);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, GetSkeletalMeshComponentWorldTransform_Frame_Offset), 0, null, frame);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetSkeletalMeshComponentWorldTransform_TimeUnit_Offset), 0, null, timeUnit);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetSkeletalMeshComponentWorldTransform_ReferenceName_Offset), 0, null, referenceName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSkeletalMeshComponentWorldTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetSkeletalMeshComponentWorldTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetLocalControlRigVector2Ds
    static readonly IntPtr GetLocalControlRigVector2Ds_NativeFunction;
    static readonly int GetLocalControlRigVector2Ds_ParamsSize;
    static readonly int GetLocalControlRigVector2Ds_LevelSequence_Offset;
    static readonly int GetLocalControlRigVector2Ds_ControlRig_Offset;
    static readonly int GetLocalControlRigVector2Ds_ControlName_Offset;
    static readonly int GetLocalControlRigVector2Ds_Frames_Offset;
    static readonly int GetLocalControlRigVector2Ds_Frames_ElementSize;
    static readonly int GetLocalControlRigVector2Ds_TimeUnit_Offset;
    static readonly int GetLocalControlRigVector2Ds_ReturnValue_Offset;
    static readonly int GetLocalControlRigVector2Ds_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<System.DoubleNumerics.Vector2> GetLocalControlRigVector2Ds(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlRigVector2Ds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigVector2Ds_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigVector2Ds_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigVector2Ds_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLocalControlRigVector2Ds_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, GetLocalControlRigVector2Ds_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigVector2Ds_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalControlRigVector2Ds_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<System.DoubleNumerics.Vector2> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLocalControlRigVector2Ds_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2> (1, BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative, GetLocalControlRigVector2Ds_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector2>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetLocalControlRigVector2D
    static readonly IntPtr GetLocalControlRigVector2D_NativeFunction;
    static readonly int GetLocalControlRigVector2D_ParamsSize;
    static readonly int GetLocalControlRigVector2D_LevelSequence_Offset;
    static readonly int GetLocalControlRigVector2D_ControlRig_Offset;
    static readonly int GetLocalControlRigVector2D_ControlName_Offset;
    static readonly int GetLocalControlRigVector2D_Frame_Offset;
    static readonly int GetLocalControlRigVector2D_TimeUnit_Offset;
    static readonly int GetLocalControlRigVector2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 GetLocalControlRigVector2D(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlRigVector2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigVector2D_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigVector2D_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigVector2D_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigVector2D_Frame_Offset), 0, null, frame);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigVector2D_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalControlRigVector2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigVector2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetLocalControlRigTransforms
    static readonly IntPtr GetLocalControlRigTransforms_NativeFunction;
    static readonly int GetLocalControlRigTransforms_ParamsSize;
    static readonly int GetLocalControlRigTransforms_LevelSequence_Offset;
    static readonly int GetLocalControlRigTransforms_ControlRig_Offset;
    static readonly int GetLocalControlRigTransforms_ControlName_Offset;
    static readonly int GetLocalControlRigTransforms_Frames_Offset;
    static readonly int GetLocalControlRigTransforms_Frames_ElementSize;
    static readonly int GetLocalControlRigTransforms_TimeUnit_Offset;
    static readonly int GetLocalControlRigTransforms_ReturnValue_Offset;
    static readonly int GetLocalControlRigTransforms_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.Transform> GetLocalControlRigTransforms(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlRigTransforms_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigTransforms_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigTransforms_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigTransforms_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLocalControlRigTransforms_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, GetLocalControlRigTransforms_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigTransforms_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalControlRigTransforms_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.Transform> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLocalControlRigTransforms_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Transform> (1, BlittableMarshaller<UnrealSharp.Transform>.ToNative, BlittableMarshaller<UnrealSharp.Transform>.FromNative, GetLocalControlRigTransforms_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetLocalControlRigTransformNoScales
    static readonly IntPtr GetLocalControlRigTransformNoScales_NativeFunction;
    static readonly int GetLocalControlRigTransformNoScales_ParamsSize;
    static readonly int GetLocalControlRigTransformNoScales_LevelSequence_Offset;
    static readonly int GetLocalControlRigTransformNoScales_ControlRig_Offset;
    static readonly int GetLocalControlRigTransformNoScales_ControlName_Offset;
    static readonly int GetLocalControlRigTransformNoScales_Frames_Offset;
    static readonly int GetLocalControlRigTransformNoScales_Frames_ElementSize;
    static readonly int GetLocalControlRigTransformNoScales_TimeUnit_Offset;
    static readonly int GetLocalControlRigTransformNoScales_ReturnValue_Offset;
    static readonly int GetLocalControlRigTransformNoScales_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.AnimationCore.TransformNoScale> GetLocalControlRigTransformNoScales(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlRigTransformNoScales_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigTransformNoScales_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigTransformNoScales_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigTransformNoScales_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLocalControlRigTransformNoScales_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, GetLocalControlRigTransformNoScales_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigTransformNoScales_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalControlRigTransformNoScales_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.AnimationCore.TransformNoScale> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLocalControlRigTransformNoScales_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.AnimationCore.TransformNoScale> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.AnimationCore.TransformNoScale> (1, UnrealSharp.AnimationCore.TransformNoScaleMarshaler.ToNative, UnrealSharp.AnimationCore.TransformNoScaleMarshaler.FromNative, GetLocalControlRigTransformNoScales_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.AnimationCore.TransformNoScale>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetLocalControlRigTransformNoScale
    static readonly IntPtr GetLocalControlRigTransformNoScale_NativeFunction;
    static readonly int GetLocalControlRigTransformNoScale_ParamsSize;
    static readonly int GetLocalControlRigTransformNoScale_LevelSequence_Offset;
    static readonly int GetLocalControlRigTransformNoScale_ControlRig_Offset;
    static readonly int GetLocalControlRigTransformNoScale_ControlName_Offset;
    static readonly int GetLocalControlRigTransformNoScale_Frame_Offset;
    static readonly int GetLocalControlRigTransformNoScale_TimeUnit_Offset;
    static readonly int GetLocalControlRigTransformNoScale_ReturnValue_Offset;
    
    public static UnrealSharp.AnimationCore.TransformNoScale GetLocalControlRigTransformNoScale(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlRigTransformNoScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigTransformNoScale_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigTransformNoScale_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigTransformNoScale_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigTransformNoScale_Frame_Offset), 0, null, frame);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigTransformNoScale_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalControlRigTransformNoScale_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AnimationCore.TransformNoScale returnValue;
            returnValue = UnrealSharp.AnimationCore.TransformNoScaleMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigTransformNoScale_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetLocalControlRigTransform
    static readonly IntPtr GetLocalControlRigTransform_NativeFunction;
    static readonly int GetLocalControlRigTransform_ParamsSize;
    static readonly int GetLocalControlRigTransform_LevelSequence_Offset;
    static readonly int GetLocalControlRigTransform_ControlRig_Offset;
    static readonly int GetLocalControlRigTransform_ControlName_Offset;
    static readonly int GetLocalControlRigTransform_Frame_Offset;
    static readonly int GetLocalControlRigTransform_TimeUnit_Offset;
    static readonly int GetLocalControlRigTransform_ReturnValue_Offset;
    
    public static UnrealSharp.Transform GetLocalControlRigTransform(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlRigTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigTransform_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigTransform_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigTransform_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigTransform_Frame_Offset), 0, null, frame);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigTransform_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalControlRigTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetLocalControlRigScales
    static readonly IntPtr GetLocalControlRigScales_NativeFunction;
    static readonly int GetLocalControlRigScales_ParamsSize;
    static readonly int GetLocalControlRigScales_LevelSequence_Offset;
    static readonly int GetLocalControlRigScales_ControlRig_Offset;
    static readonly int GetLocalControlRigScales_ControlName_Offset;
    static readonly int GetLocalControlRigScales_Frames_Offset;
    static readonly int GetLocalControlRigScales_Frames_ElementSize;
    static readonly int GetLocalControlRigScales_TimeUnit_Offset;
    static readonly int GetLocalControlRigScales_ReturnValue_Offset;
    static readonly int GetLocalControlRigScales_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<System.DoubleNumerics.Vector3> GetLocalControlRigScales(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlRigScales_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigScales_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigScales_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigScales_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLocalControlRigScales_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, GetLocalControlRigScales_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigScales_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalControlRigScales_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<System.DoubleNumerics.Vector3> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLocalControlRigScales_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GetLocalControlRigScales_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetLocalControlRigScale
    static readonly IntPtr GetLocalControlRigScale_NativeFunction;
    static readonly int GetLocalControlRigScale_ParamsSize;
    static readonly int GetLocalControlRigScale_LevelSequence_Offset;
    static readonly int GetLocalControlRigScale_ControlRig_Offset;
    static readonly int GetLocalControlRigScale_ControlName_Offset;
    static readonly int GetLocalControlRigScale_Frame_Offset;
    static readonly int GetLocalControlRigScale_TimeUnit_Offset;
    static readonly int GetLocalControlRigScale_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetLocalControlRigScale(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlRigScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigScale_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigScale_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigScale_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigScale_Frame_Offset), 0, null, frame);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigScale_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalControlRigScale_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigScale_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetLocalControlRigRotators
    static readonly IntPtr GetLocalControlRigRotators_NativeFunction;
    static readonly int GetLocalControlRigRotators_ParamsSize;
    static readonly int GetLocalControlRigRotators_LevelSequence_Offset;
    static readonly int GetLocalControlRigRotators_ControlRig_Offset;
    static readonly int GetLocalControlRigRotators_ControlName_Offset;
    static readonly int GetLocalControlRigRotators_Frames_Offset;
    static readonly int GetLocalControlRigRotators_Frames_ElementSize;
    static readonly int GetLocalControlRigRotators_TimeUnit_Offset;
    static readonly int GetLocalControlRigRotators_ReturnValue_Offset;
    static readonly int GetLocalControlRigRotators_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.Rotator> GetLocalControlRigRotators(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlRigRotators_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigRotators_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigRotators_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigRotators_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLocalControlRigRotators_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, GetLocalControlRigRotators_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigRotators_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalControlRigRotators_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.Rotator> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLocalControlRigRotators_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Rotator> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Rotator> (1, BlittableMarshaller<UnrealSharp.Rotator>.ToNative, BlittableMarshaller<UnrealSharp.Rotator>.FromNative, GetLocalControlRigRotators_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Rotator>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetLocalControlRigRotator
    static readonly IntPtr GetLocalControlRigRotator_NativeFunction;
    static readonly int GetLocalControlRigRotator_ParamsSize;
    static readonly int GetLocalControlRigRotator_LevelSequence_Offset;
    static readonly int GetLocalControlRigRotator_ControlRig_Offset;
    static readonly int GetLocalControlRigRotator_ControlName_Offset;
    static readonly int GetLocalControlRigRotator_Frame_Offset;
    static readonly int GetLocalControlRigRotator_TimeUnit_Offset;
    static readonly int GetLocalControlRigRotator_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator GetLocalControlRigRotator(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlRigRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigRotator_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigRotator_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigRotator_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigRotator_Frame_Offset), 0, null, frame);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigRotator_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalControlRigRotator_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigRotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetLocalControlRigPositions
    static readonly IntPtr GetLocalControlRigPositions_NativeFunction;
    static readonly int GetLocalControlRigPositions_ParamsSize;
    static readonly int GetLocalControlRigPositions_LevelSequence_Offset;
    static readonly int GetLocalControlRigPositions_ControlRig_Offset;
    static readonly int GetLocalControlRigPositions_ControlName_Offset;
    static readonly int GetLocalControlRigPositions_Frames_Offset;
    static readonly int GetLocalControlRigPositions_Frames_ElementSize;
    static readonly int GetLocalControlRigPositions_TimeUnit_Offset;
    static readonly int GetLocalControlRigPositions_ReturnValue_Offset;
    static readonly int GetLocalControlRigPositions_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<System.DoubleNumerics.Vector3> GetLocalControlRigPositions(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlRigPositions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigPositions_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigPositions_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigPositions_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLocalControlRigPositions_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, GetLocalControlRigPositions_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigPositions_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalControlRigPositions_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<System.DoubleNumerics.Vector3> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLocalControlRigPositions_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GetLocalControlRigPositions_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetLocalControlRigPosition
    static readonly IntPtr GetLocalControlRigPosition_NativeFunction;
    static readonly int GetLocalControlRigPosition_ParamsSize;
    static readonly int GetLocalControlRigPosition_LevelSequence_Offset;
    static readonly int GetLocalControlRigPosition_ControlRig_Offset;
    static readonly int GetLocalControlRigPosition_ControlName_Offset;
    static readonly int GetLocalControlRigPosition_Frame_Offset;
    static readonly int GetLocalControlRigPosition_TimeUnit_Offset;
    static readonly int GetLocalControlRigPosition_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetLocalControlRigPosition(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlRigPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigPosition_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigPosition_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigPosition_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigPosition_Frame_Offset), 0, null, frame);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigPosition_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalControlRigPosition_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetLocalControlRigInts
    static readonly IntPtr GetLocalControlRigInts_NativeFunction;
    static readonly int GetLocalControlRigInts_ParamsSize;
    static readonly int GetLocalControlRigInts_LevelSequence_Offset;
    static readonly int GetLocalControlRigInts_ControlRig_Offset;
    static readonly int GetLocalControlRigInts_ControlName_Offset;
    static readonly int GetLocalControlRigInts_Frames_Offset;
    static readonly int GetLocalControlRigInts_Frames_ElementSize;
    static readonly int GetLocalControlRigInts_TimeUnit_Offset;
    static readonly int GetLocalControlRigInts_ReturnValue_Offset;
    static readonly int GetLocalControlRigInts_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<int> GetLocalControlRigInts(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlRigInts_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigInts_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigInts_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigInts_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLocalControlRigInts_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, GetLocalControlRigInts_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigInts_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalControlRigInts_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<int> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLocalControlRigInts_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<int> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<int> (1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, GetLocalControlRigInts_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<int>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetLocalControlRigInt
    static readonly IntPtr GetLocalControlRigInt_NativeFunction;
    static readonly int GetLocalControlRigInt_ParamsSize;
    static readonly int GetLocalControlRigInt_LevelSequence_Offset;
    static readonly int GetLocalControlRigInt_ControlRig_Offset;
    static readonly int GetLocalControlRigInt_ControlName_Offset;
    static readonly int GetLocalControlRigInt_Frame_Offset;
    static readonly int GetLocalControlRigInt_TimeUnit_Offset;
    static readonly int GetLocalControlRigInt_ReturnValue_Offset;
    
    public static int GetLocalControlRigInt(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlRigInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigInt_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigInt_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigInt_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigInt_Frame_Offset), 0, null, frame);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigInt_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalControlRigInt_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetLocalControlRigFloats
    static readonly IntPtr GetLocalControlRigFloats_NativeFunction;
    static readonly int GetLocalControlRigFloats_ParamsSize;
    static readonly int GetLocalControlRigFloats_LevelSequence_Offset;
    static readonly int GetLocalControlRigFloats_ControlRig_Offset;
    static readonly int GetLocalControlRigFloats_ControlName_Offset;
    static readonly int GetLocalControlRigFloats_Frames_Offset;
    static readonly int GetLocalControlRigFloats_Frames_ElementSize;
    static readonly int GetLocalControlRigFloats_TimeUnit_Offset;
    static readonly int GetLocalControlRigFloats_ReturnValue_Offset;
    static readonly int GetLocalControlRigFloats_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<float> GetLocalControlRigFloats(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlRigFloats_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigFloats_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigFloats_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigFloats_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLocalControlRigFloats_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, GetLocalControlRigFloats_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigFloats_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalControlRigFloats_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<float> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLocalControlRigFloats_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<float> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<float> (1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, GetLocalControlRigFloats_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<float>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetLocalControlRigFloat
    static readonly IntPtr GetLocalControlRigFloat_NativeFunction;
    static readonly int GetLocalControlRigFloat_ParamsSize;
    static readonly int GetLocalControlRigFloat_LevelSequence_Offset;
    static readonly int GetLocalControlRigFloat_ControlRig_Offset;
    static readonly int GetLocalControlRigFloat_ControlName_Offset;
    static readonly int GetLocalControlRigFloat_Frame_Offset;
    static readonly int GetLocalControlRigFloat_TimeUnit_Offset;
    static readonly int GetLocalControlRigFloat_ReturnValue_Offset;
    
    public static float GetLocalControlRigFloat(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlRigFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigFloat_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigFloat_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigFloat_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigFloat_Frame_Offset), 0, null, frame);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigFloat_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalControlRigFloat_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetLocalControlRigEulerTransforms
    static readonly IntPtr GetLocalControlRigEulerTransforms_NativeFunction;
    static readonly int GetLocalControlRigEulerTransforms_ParamsSize;
    static readonly int GetLocalControlRigEulerTransforms_LevelSequence_Offset;
    static readonly int GetLocalControlRigEulerTransforms_ControlRig_Offset;
    static readonly int GetLocalControlRigEulerTransforms_ControlName_Offset;
    static readonly int GetLocalControlRigEulerTransforms_Frames_Offset;
    static readonly int GetLocalControlRigEulerTransforms_Frames_ElementSize;
    static readonly int GetLocalControlRigEulerTransforms_TimeUnit_Offset;
    static readonly int GetLocalControlRigEulerTransforms_ReturnValue_Offset;
    static readonly int GetLocalControlRigEulerTransforms_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.AnimationCore.EulerTransform> GetLocalControlRigEulerTransforms(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlRigEulerTransforms_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigEulerTransforms_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigEulerTransforms_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigEulerTransforms_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLocalControlRigEulerTransforms_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, GetLocalControlRigEulerTransforms_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigEulerTransforms_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalControlRigEulerTransforms_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.AnimationCore.EulerTransform> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLocalControlRigEulerTransforms_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.AnimationCore.EulerTransform> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.AnimationCore.EulerTransform> (1, BlittableMarshaller<UnrealSharp.AnimationCore.EulerTransform>.ToNative, BlittableMarshaller<UnrealSharp.AnimationCore.EulerTransform>.FromNative, GetLocalControlRigEulerTransforms_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.AnimationCore.EulerTransform>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetLocalControlRigEulerTransform
    static readonly IntPtr GetLocalControlRigEulerTransform_NativeFunction;
    static readonly int GetLocalControlRigEulerTransform_ParamsSize;
    static readonly int GetLocalControlRigEulerTransform_LevelSequence_Offset;
    static readonly int GetLocalControlRigEulerTransform_ControlRig_Offset;
    static readonly int GetLocalControlRigEulerTransform_ControlName_Offset;
    static readonly int GetLocalControlRigEulerTransform_Frame_Offset;
    static readonly int GetLocalControlRigEulerTransform_TimeUnit_Offset;
    static readonly int GetLocalControlRigEulerTransform_ReturnValue_Offset;
    
    public static UnrealSharp.AnimationCore.EulerTransform GetLocalControlRigEulerTransform(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlRigEulerTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigEulerTransform_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigEulerTransform_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigEulerTransform_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigEulerTransform_Frame_Offset), 0, null, frame);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigEulerTransform_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalControlRigEulerTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AnimationCore.EulerTransform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.AnimationCore.EulerTransform>.FromNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigEulerTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetLocalControlRigBools
    static readonly IntPtr GetLocalControlRigBools_NativeFunction;
    static readonly int GetLocalControlRigBools_ParamsSize;
    static readonly int GetLocalControlRigBools_LevelSequence_Offset;
    static readonly int GetLocalControlRigBools_ControlRig_Offset;
    static readonly int GetLocalControlRigBools_ControlName_Offset;
    static readonly int GetLocalControlRigBools_Frames_Offset;
    static readonly int GetLocalControlRigBools_Frames_ElementSize;
    static readonly int GetLocalControlRigBools_TimeUnit_Offset;
    static readonly int GetLocalControlRigBools_ReturnValue_Offset;
    static readonly int GetLocalControlRigBools_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<bool> GetLocalControlRigBools(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlRigBools_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigBools_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigBools_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigBools_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLocalControlRigBools_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, GetLocalControlRigBools_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigBools_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalControlRigBools_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<bool> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLocalControlRigBools_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<bool> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<bool> (1, BoolMarshaller.ToNative, BoolMarshaller.FromNative, GetLocalControlRigBools_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<bool>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetLocalControlRigBool
    static readonly IntPtr GetLocalControlRigBool_NativeFunction;
    static readonly int GetLocalControlRigBool_ParamsSize;
    static readonly int GetLocalControlRigBool_LevelSequence_Offset;
    static readonly int GetLocalControlRigBool_ControlRig_Offset;
    static readonly int GetLocalControlRigBool_ControlName_Offset;
    static readonly int GetLocalControlRigBool_Frame_Offset;
    static readonly int GetLocalControlRigBool_TimeUnit_Offset;
    static readonly int GetLocalControlRigBool_ReturnValue_Offset;
    
    public static bool GetLocalControlRigBool(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalControlRigBool_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigBool_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigBool_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigBool_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigBool_Frame_Offset), 0, null, frame);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigBool_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalControlRigBool_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetLocalControlRigBool_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetFKControlRigApplyMode
    static readonly IntPtr GetFKControlRigApplyMode_NativeFunction;
    static readonly int GetFKControlRigApplyMode_ParamsSize;
    static readonly int GetFKControlRigApplyMode_InControlRig_Offset;
    static readonly int GetFKControlRigApplyMode_ReturnValue_Offset;
    
    public static UnrealSharp.ControlRig.EControlRigFKRigExecuteMode GetFKControlRigApplyMode(UnrealSharp.ControlRig.ControlRig inControlRig)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFKControlRigApplyMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetFKControlRigApplyMode_InControlRig_Offset), 0, null, inControlRig);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetFKControlRigApplyMode_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.EControlRigFKRigExecuteMode returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.ControlRig.EControlRigFKRigExecuteMode>.FromNative(IntPtr.Add(ParamsBuffer, GetFKControlRigApplyMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetDefaultParentKey
    static readonly IntPtr GetDefaultParentKey_NativeFunction;
    static readonly int GetDefaultParentKey_ParamsSize;
    static readonly int GetDefaultParentKey_ReturnValue_Offset;
    
    public static UnrealSharp.ControlRig.RigElementKey GetDefaultParentKey()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDefaultParentKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetDefaultParentKey_NativeFunction, ParamsBuffer);
            
            UnrealSharp.ControlRig.RigElementKey returnValue;
            returnValue = UnrealSharp.ControlRig.RigElementKeyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetDefaultParentKey_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetControlsMask
    static readonly IntPtr GetControlsMask_NativeFunction;
    static readonly int GetControlsMask_ParamsSize;
    static readonly int GetControlsMask_InSection_Offset;
    static readonly int GetControlsMask_ControlName_Offset;
    static readonly int GetControlsMask_ReturnValue_Offset;
    
    public static bool GetControlsMask(UnrealSharp.MovieScene.MovieSceneSection inSection, Name controlName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlsMask_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.ToNative(IntPtr.Add(ParamsBuffer, GetControlsMask_InSection_Offset), 0, null, inSection);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetControlsMask_ControlName_Offset), 0, null, controlName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetControlsMask_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetControlsMask_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetControlRigWorldTransforms
    static readonly IntPtr GetControlRigWorldTransforms_NativeFunction;
    static readonly int GetControlRigWorldTransforms_ParamsSize;
    static readonly int GetControlRigWorldTransforms_LevelSequence_Offset;
    static readonly int GetControlRigWorldTransforms_ControlRig_Offset;
    static readonly int GetControlRigWorldTransforms_ControlName_Offset;
    static readonly int GetControlRigWorldTransforms_Frames_Offset;
    static readonly int GetControlRigWorldTransforms_Frames_ElementSize;
    static readonly int GetControlRigWorldTransforms_TimeUnit_Offset;
    static readonly int GetControlRigWorldTransforms_ReturnValue_Offset;
    static readonly int GetControlRigWorldTransforms_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.Transform> GetControlRigWorldTransforms(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlRigWorldTransforms_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetControlRigWorldTransforms_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetControlRigWorldTransforms_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetControlRigWorldTransforms_ControlName_Offset), 0, null, controlName);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetControlRigWorldTransforms_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, GetControlRigWorldTransforms_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetControlRigWorldTransforms_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetControlRigWorldTransforms_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.Transform> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetControlRigWorldTransforms_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Transform> (1, BlittableMarshaller<UnrealSharp.Transform>.ToNative, BlittableMarshaller<UnrealSharp.Transform>.FromNative, GetControlRigWorldTransforms_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetControlRigWorldTransform
    static readonly IntPtr GetControlRigWorldTransform_NativeFunction;
    static readonly int GetControlRigWorldTransform_ParamsSize;
    static readonly int GetControlRigWorldTransform_LevelSequence_Offset;
    static readonly int GetControlRigWorldTransform_ControlRig_Offset;
    static readonly int GetControlRigWorldTransform_ControlName_Offset;
    static readonly int GetControlRigWorldTransform_Frame_Offset;
    static readonly int GetControlRigWorldTransform_TimeUnit_Offset;
    static readonly int GetControlRigWorldTransform_ReturnValue_Offset;
    
    public static UnrealSharp.Transform GetControlRigWorldTransform(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRig.ControlRig controlRig, Name controlName, UnrealSharp.CoreUObject.FrameNumber frame, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlRigWorldTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetControlRigWorldTransform_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, GetControlRigWorldTransform_ControlRig_Offset), 0, null, controlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetControlRigWorldTransform_ControlName_Offset), 0, null, controlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, GetControlRigWorldTransform_Frame_Offset), 0, null, frame);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetControlRigWorldTransform_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetControlRigWorldTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetControlRigWorldTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetControlRigs
    static readonly IntPtr GetControlRigs_NativeFunction;
    static readonly int GetControlRigs_ParamsSize;
    static readonly int GetControlRigs_LevelSequence_Offset;
    static readonly int GetControlRigs_ReturnValue_Offset;
    static readonly int GetControlRigs_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.ControlRigEditor.ControlRigSequencerBindingProxy> GetControlRigs(UnrealSharp.LevelSequence.LevelSequence levelSequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlRigs_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetControlRigs_LevelSequence_Offset), 0, null, levelSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetControlRigs_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.ControlRigEditor.ControlRigSequencerBindingProxy> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetControlRigs_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRigEditor.ControlRigSequencerBindingProxy> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.ControlRigEditor.ControlRigSequencerBindingProxy> (1, UnrealSharp.ControlRigEditor.ControlRigSequencerBindingProxyMarshaler.ToNative, UnrealSharp.ControlRigEditor.ControlRigSequencerBindingProxyMarshaler.FromNative, GetControlRigs_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.ControlRigEditor.ControlRigSequencerBindingProxy>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetConstraintsForHandle
    static readonly IntPtr GetConstraintsForHandle_NativeFunction;
    static readonly int GetConstraintsForHandle_ParamsSize;
    static readonly int GetConstraintsForHandle_InWorld_Offset;
    static readonly int GetConstraintsForHandle_InChild_Offset;
    static readonly int GetConstraintsForHandle_ReturnValue_Offset;
    static readonly int GetConstraintsForHandle_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.Constraints.TickableConstraint> GetConstraintsForHandle(UnrealSharp.Engine.World inWorld, UnrealSharp.Constraints.TransformableHandle inChild)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetConstraintsForHandle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.World>.ToNative(IntPtr.Add(ParamsBuffer, GetConstraintsForHandle_InWorld_Offset), 0, null, inWorld);
            ObjectMarshaller<UnrealSharp.Constraints.TransformableHandle>.ToNative(IntPtr.Add(ParamsBuffer, GetConstraintsForHandle_InChild_Offset), 0, null, inChild);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetConstraintsForHandle_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.Constraints.TickableConstraint> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetConstraintsForHandle_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Constraints.TickableConstraint> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Constraints.TickableConstraint> (1, ObjectMarshaller<UnrealSharp.Constraints.TickableConstraint>.ToNative, ObjectMarshaller<UnrealSharp.Constraints.TickableConstraint>.FromNative, GetConstraintsForHandle_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Constraints.TickableConstraint>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetConstraintKeys
    static readonly IntPtr GetConstraintKeys_NativeFunction;
    static readonly int GetConstraintKeys_ParamsSize;
    static readonly int GetConstraintKeys_InConstraint_Offset;
    static readonly int GetConstraintKeys_ConstraintSection_Offset;
    static readonly int GetConstraintKeys_OutBools_Offset;
    static readonly int GetConstraintKeys_OutBools_ElementSize;
    static readonly int GetConstraintKeys_OutFrames_Offset;
    static readonly int GetConstraintKeys_OutFrames_ElementSize;
    static readonly int GetConstraintKeys_TimeUnit_Offset;
    static readonly int GetConstraintKeys_ReturnValue_Offset;
    
    public static bool GetConstraintKeys(UnrealSharp.Constraints.TickableConstraint inConstraint, UnrealSharp.MovieScene.MovieSceneSection constraintSection, out System.Collections.Generic.IList<bool> outBools, out System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> outFrames, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetConstraintKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Constraints.TickableConstraint>.ToNative(IntPtr.Add(ParamsBuffer, GetConstraintKeys_InConstraint_Offset), 0, null, inConstraint);
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.ToNative(IntPtr.Add(ParamsBuffer, GetConstraintKeys_ConstraintSection_Offset), 0, null, constraintSection);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetConstraintKeys_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetConstraintKeys_NativeFunction, ParamsBuffer);
            
            IntPtr OutBools_NativeBuffer = IntPtr.Add(ParamsBuffer, GetConstraintKeys_OutBools_Offset);
            UnrealArrayCopyMarshaler<bool> OutBools_Marshaler = new UnrealArrayCopyMarshaler<bool> (1, BoolMarshaller.ToNative, BoolMarshaller.FromNative, GetConstraintKeys_OutBools_ElementSize);
            outBools = OutBools_Marshaler.FromNative(OutBools_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<bool>.DestructInstance(OutBools_NativeBuffer, 0);
            IntPtr OutFrames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetConstraintKeys_OutFrames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> OutFrames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> (1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, GetConstraintKeys_OutFrames_ElementSize);
            outFrames = OutFrames_Marshaler.FromNative(OutFrames_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>.DestructInstance(OutFrames_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetConstraintKeys_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetActorWorldTransforms
    static readonly IntPtr GetActorWorldTransforms_NativeFunction;
    static readonly int GetActorWorldTransforms_ParamsSize;
    static readonly int GetActorWorldTransforms_LevelSequence_Offset;
    static readonly int GetActorWorldTransforms_Actor_Offset;
    static readonly int GetActorWorldTransforms_Frames_Offset;
    static readonly int GetActorWorldTransforms_Frames_ElementSize;
    static readonly int GetActorWorldTransforms_TimeUnit_Offset;
    static readonly int GetActorWorldTransforms_ReturnValue_Offset;
    static readonly int GetActorWorldTransforms_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.Transform> GetActorWorldTransforms(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.Engine.Actor actor, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActorWorldTransforms_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetActorWorldTransforms_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, GetActorWorldTransforms_Actor_Offset), 0, null, actor);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetActorWorldTransforms_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, GetActorWorldTransforms_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetActorWorldTransforms_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetActorWorldTransforms_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.Transform> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetActorWorldTransforms_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Transform> (1, BlittableMarshaller<UnrealSharp.Transform>.ToNative, BlittableMarshaller<UnrealSharp.Transform>.FromNative, GetActorWorldTransforms_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:GetActorWorldTransform
    static readonly IntPtr GetActorWorldTransform_NativeFunction;
    static readonly int GetActorWorldTransform_ParamsSize;
    static readonly int GetActorWorldTransform_LevelSequence_Offset;
    static readonly int GetActorWorldTransform_Actor_Offset;
    static readonly int GetActorWorldTransform_Frame_Offset;
    static readonly int GetActorWorldTransform_TimeUnit_Offset;
    static readonly int GetActorWorldTransform_ReturnValue_Offset;
    
    public static UnrealSharp.Transform GetActorWorldTransform(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.Engine.Actor actor, UnrealSharp.CoreUObject.FrameNumber frame, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActorWorldTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, GetActorWorldTransform_LevelSequence_Offset), 0, null, levelSequence);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, GetActorWorldTransform_Actor_Offset), 0, null, actor);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, GetActorWorldTransform_Frame_Offset), 0, null, frame);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, GetActorWorldTransform_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetActorWorldTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetActorWorldTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:FindOrCreateControlRigTrack
    static readonly IntPtr FindOrCreateControlRigTrack_NativeFunction;
    static readonly int FindOrCreateControlRigTrack_ParamsSize;
    static readonly int FindOrCreateControlRigTrack_World_Offset;
    static readonly int FindOrCreateControlRigTrack_LevelSequence_Offset;
    static readonly int FindOrCreateControlRigTrack_ControlRigClass_Offset;
    static readonly int FindOrCreateControlRigTrack_InBinding_Offset;
    static readonly int FindOrCreateControlRigTrack_ReturnValue_Offset;
    
    public static UnrealSharp.MovieScene.MovieSceneTrack FindOrCreateControlRigTrack(UnrealSharp.Engine.World world, UnrealSharp.LevelSequence.LevelSequence levelSequence, SubclassOf<UnrealSharp.CoreUObject.Object> controlRigClass, UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindOrCreateControlRigTrack_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.World>.ToNative(IntPtr.Add(ParamsBuffer, FindOrCreateControlRigTrack_World_Offset), 0, null, world);
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, FindOrCreateControlRigTrack_LevelSequence_Offset), 0, null, levelSequence);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, FindOrCreateControlRigTrack_ControlRigClass_Offset), 0, null, controlRigClass);
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, FindOrCreateControlRigTrack_InBinding_Offset), 0, null, inBinding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindOrCreateControlRigTrack_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.MovieSceneTrack returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.FromNative(IntPtr.Add(ParamsBuffer, FindOrCreateControlRigTrack_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:FindOrCreateControlRigComponentTrack
    static readonly IntPtr FindOrCreateControlRigComponentTrack_NativeFunction;
    static readonly int FindOrCreateControlRigComponentTrack_ParamsSize;
    static readonly int FindOrCreateControlRigComponentTrack_World_Offset;
    static readonly int FindOrCreateControlRigComponentTrack_LevelSequence_Offset;
    static readonly int FindOrCreateControlRigComponentTrack_InBinding_Offset;
    static readonly int FindOrCreateControlRigComponentTrack_ReturnValue_Offset;
    static readonly int FindOrCreateControlRigComponentTrack_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> FindOrCreateControlRigComponentTrack(UnrealSharp.Engine.World world, UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.MovieScene.MovieSceneBindingProxy inBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindOrCreateControlRigComponentTrack_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.World>.ToNative(IntPtr.Add(ParamsBuffer, FindOrCreateControlRigComponentTrack_World_Offset), 0, null, world);
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, FindOrCreateControlRigComponentTrack_LevelSequence_Offset), 0, null, levelSequence);
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, FindOrCreateControlRigComponentTrack_InBinding_Offset), 0, null, inBinding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindOrCreateControlRigComponentTrack_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, FindOrCreateControlRigComponentTrack_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.FromNative, FindOrCreateControlRigComponentTrack_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:ExportFBXFromControlRigSection
    static readonly IntPtr ExportFBXFromControlRigSection_NativeFunction;
    static readonly int ExportFBXFromControlRigSection_ParamsSize;
    static readonly int ExportFBXFromControlRigSection_Sequence_Offset;
    static readonly int ExportFBXFromControlRigSection_Section_Offset;
    static readonly int ExportFBXFromControlRigSection_ExportFBXControlRigSettings_Offset;
    static readonly int ExportFBXFromControlRigSection_ReturnValue_Offset;
    
    public static bool ExportFBXFromControlRigSection(UnrealSharp.LevelSequence.LevelSequence sequence, UnrealSharp.ControlRig.MovieSceneControlRigParameterSection section, UnrealSharp.MovieSceneTools.MovieSceneUserExportFBXControlRigSettings exportFBXControlRigSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ExportFBXFromControlRigSection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, ExportFBXFromControlRigSection_Sequence_Offset), 0, null, sequence);
            ObjectMarshaller<UnrealSharp.ControlRig.MovieSceneControlRigParameterSection>.ToNative(IntPtr.Add(ParamsBuffer, ExportFBXFromControlRigSection_Section_Offset), 0, null, section);
            ObjectMarshaller<UnrealSharp.MovieSceneTools.MovieSceneUserExportFBXControlRigSettings>.ToNative(IntPtr.Add(ParamsBuffer, ExportFBXFromControlRigSection_ExportFBXControlRigSettings_Offset), 0, null, exportFBXControlRigSettings);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ExportFBXFromControlRigSection_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ExportFBXFromControlRigSection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:DeleteControlRigSpace
    static readonly IntPtr DeleteControlRigSpace_NativeFunction;
    static readonly int DeleteControlRigSpace_ParamsSize;
    static readonly int DeleteControlRigSpace_InSequence_Offset;
    static readonly int DeleteControlRigSpace_InControlRig_Offset;
    static readonly int DeleteControlRigSpace_InControlName_Offset;
    static readonly int DeleteControlRigSpace_InTime_Offset;
    static readonly int DeleteControlRigSpace_TimeUnit_Offset;
    static readonly int DeleteControlRigSpace_ReturnValue_Offset;
    
    public static bool DeleteControlRigSpace(UnrealSharp.LevelSequence.LevelSequence inSequence, UnrealSharp.ControlRig.ControlRig inControlRig, Name inControlName, UnrealSharp.CoreUObject.FrameNumber inTime, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeleteControlRigSpace_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, DeleteControlRigSpace_InSequence_Offset), 0, null, inSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, DeleteControlRigSpace_InControlRig_Offset), 0, null, inControlRig);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, DeleteControlRigSpace_InControlName_Offset), 0, null, inControlName);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, DeleteControlRigSpace_InTime_Offset), 0, null, inTime);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, DeleteControlRigSpace_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DeleteControlRigSpace_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DeleteControlRigSpace_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:DeleteConstraintKey
    static readonly IntPtr DeleteConstraintKey_NativeFunction;
    static readonly int DeleteConstraintKey_ParamsSize;
    static readonly int DeleteConstraintKey_Constraint_Offset;
    static readonly int DeleteConstraintKey_ConstraintSection_Offset;
    static readonly int DeleteConstraintKey_InTime_Offset;
    static readonly int DeleteConstraintKey_TimeUnit_Offset;
    static readonly int DeleteConstraintKey_ReturnValue_Offset;
    
    public static bool DeleteConstraintKey(UnrealSharp.Constraints.TickableConstraint constraint, UnrealSharp.MovieScene.MovieSceneSection constraintSection, UnrealSharp.CoreUObject.FrameNumber inTime, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeleteConstraintKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Constraints.TickableConstraint>.ToNative(IntPtr.Add(ParamsBuffer, DeleteConstraintKey_Constraint_Offset), 0, null, constraint);
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.ToNative(IntPtr.Add(ParamsBuffer, DeleteConstraintKey_ConstraintSection_Offset), 0, null, constraintSection);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, DeleteConstraintKey_InTime_Offset), 0, null, inTime);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, DeleteConstraintKey_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DeleteConstraintKey_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DeleteConstraintKey_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:CompensateAll
    static readonly IntPtr CompensateAll_NativeFunction;
    static readonly int CompensateAll_ParamsSize;
    static readonly int CompensateAll_InConstraint_Offset;
    static readonly int CompensateAll_ReturnValue_Offset;
    
    public static bool CompensateAll(UnrealSharp.Constraints.TickableConstraint inConstraint)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CompensateAll_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Constraints.TickableConstraint>.ToNative(IntPtr.Add(ParamsBuffer, CompensateAll_InConstraint_Offset), 0, null, inConstraint);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CompensateAll_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CompensateAll_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:Compensate
    static readonly IntPtr Compensate_NativeFunction;
    static readonly int Compensate_ParamsSize;
    static readonly int Compensate_InConstraint_Offset;
    static readonly int Compensate_InTime_Offset;
    static readonly int Compensate_TimeUnit_Offset;
    static readonly int Compensate_ReturnValue_Offset;
    
    public static bool Compensate(UnrealSharp.Constraints.TickableConstraint inConstraint, UnrealSharp.CoreUObject.FrameNumber inTime, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Compensate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Constraints.TickableConstraint>.ToNative(IntPtr.Add(ParamsBuffer, Compensate_InConstraint_Offset), 0, null, inConstraint);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(ParamsBuffer, Compensate_InTime_Offset), 0, null, inTime);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, Compensate_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Compensate_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Compensate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:CollapseControlRigAnimLayersWithSettings
    static readonly IntPtr CollapseControlRigAnimLayersWithSettings_NativeFunction;
    static readonly int CollapseControlRigAnimLayersWithSettings_ParamsSize;
    static readonly int CollapseControlRigAnimLayersWithSettings_InSequence_Offset;
    static readonly int CollapseControlRigAnimLayersWithSettings_InTrack_Offset;
    static readonly int CollapseControlRigAnimLayersWithSettings_InSettings_Offset;
    static readonly int CollapseControlRigAnimLayersWithSettings_ReturnValue_Offset;
    
    public static bool CollapseControlRigAnimLayersWithSettings(UnrealSharp.LevelSequence.LevelSequence inSequence, UnrealSharp.ControlRig.MovieSceneControlRigParameterTrack inTrack, UnrealSharp.MovieSceneTools.BakingAnimationKeySettings inSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CollapseControlRigAnimLayersWithSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, CollapseControlRigAnimLayersWithSettings_InSequence_Offset), 0, null, inSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.MovieSceneControlRigParameterTrack>.ToNative(IntPtr.Add(ParamsBuffer, CollapseControlRigAnimLayersWithSettings_InTrack_Offset), 0, null, inTrack);
            UnrealSharp.MovieSceneTools.BakingAnimationKeySettingsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, CollapseControlRigAnimLayersWithSettings_InSettings_Offset), 0, null, inSettings);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CollapseControlRigAnimLayersWithSettings_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CollapseControlRigAnimLayersWithSettings_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:CollapseControlRigAnimLayers
    static readonly IntPtr CollapseControlRigAnimLayers_NativeFunction;
    static readonly int CollapseControlRigAnimLayers_ParamsSize;
    static readonly int CollapseControlRigAnimLayers_InSequence_Offset;
    static readonly int CollapseControlRigAnimLayers_InTrack_Offset;
    static readonly int CollapseControlRigAnimLayers_bKeyReduce_Offset;
    static readonly int CollapseControlRigAnimLayers_Tolerance_Offset;
    static readonly int CollapseControlRigAnimLayers_ReturnValue_Offset;
    
    public static bool CollapseControlRigAnimLayers(UnrealSharp.LevelSequence.LevelSequence inSequence, UnrealSharp.ControlRig.MovieSceneControlRigParameterTrack inTrack, bool bKeyReduce = false, float tolerance = 0.001000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CollapseControlRigAnimLayers_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, CollapseControlRigAnimLayers_InSequence_Offset), 0, null, inSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.MovieSceneControlRigParameterTrack>.ToNative(IntPtr.Add(ParamsBuffer, CollapseControlRigAnimLayers_InTrack_Offset), 0, null, inTrack);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CollapseControlRigAnimLayers_bKeyReduce_Offset), 0, null, bKeyReduce);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CollapseControlRigAnimLayers_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CollapseControlRigAnimLayers_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CollapseControlRigAnimLayers_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:BlendValuesOnSelected
    static readonly IntPtr BlendValuesOnSelected_NativeFunction;
    static readonly int BlendValuesOnSelected_ParamsSize;
    static readonly int BlendValuesOnSelected_LevelSequence_Offset;
    static readonly int BlendValuesOnSelected_BlendOperation_Offset;
    static readonly int BlendValuesOnSelected_BlendValue_Offset;
    static readonly int BlendValuesOnSelected_ReturnValue_Offset;
    
    public static bool BlendValuesOnSelected(UnrealSharp.LevelSequence.LevelSequence levelSequence, UnrealSharp.ControlRigEditor.EAnimToolBlendOperation blendOperation, float blendValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BlendValuesOnSelected_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, BlendValuesOnSelected_LevelSequence_Offset), 0, null, levelSequence);
            BlittableMarshaller<UnrealSharp.ControlRigEditor.EAnimToolBlendOperation>.ToNative(IntPtr.Add(ParamsBuffer, BlendValuesOnSelected_BlendOperation_Offset), 0, null, blendOperation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, BlendValuesOnSelected_BlendValue_Offset), 0, null, blendValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BlendValuesOnSelected_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BlendValuesOnSelected_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:BakeToControlRig
    static readonly IntPtr BakeToControlRig_NativeFunction;
    static readonly int BakeToControlRig_ParamsSize;
    static readonly int BakeToControlRig_World_Offset;
    static readonly int BakeToControlRig_LevelSequence_Offset;
    static readonly int BakeToControlRig_ControlRigClass_Offset;
    static readonly int BakeToControlRig_ExportOptions_Offset;
    static readonly int BakeToControlRig_bReduceKeys_Offset;
    static readonly int BakeToControlRig_Tolerance_Offset;
    static readonly int BakeToControlRig_Binding_Offset;
    static readonly int BakeToControlRig_ReturnValue_Offset;
    
    public static bool BakeToControlRig(UnrealSharp.Engine.World world, UnrealSharp.LevelSequence.LevelSequence levelSequence, SubclassOf<UnrealSharp.CoreUObject.Object> controlRigClass, UnrealSharp.UnrealEd.AnimSeqExportOption exportOptions, bool bReduceKeys, float tolerance, UnrealSharp.MovieScene.MovieSceneBindingProxy binding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BakeToControlRig_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.World>.ToNative(IntPtr.Add(ParamsBuffer, BakeToControlRig_World_Offset), 0, null, world);
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, BakeToControlRig_LevelSequence_Offset), 0, null, levelSequence);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, BakeToControlRig_ControlRigClass_Offset), 0, null, controlRigClass);
            ObjectMarshaller<UnrealSharp.UnrealEd.AnimSeqExportOption>.ToNative(IntPtr.Add(ParamsBuffer, BakeToControlRig_ExportOptions_Offset), 0, null, exportOptions);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BakeToControlRig_bReduceKeys_Offset), 0, null, bReduceKeys);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, BakeToControlRig_Tolerance_Offset), 0, null, tolerance);
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, BakeToControlRig_Binding_Offset), 0, null, binding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BakeToControlRig_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BakeToControlRig_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:BakeControlRigSpace
    static readonly IntPtr BakeControlRigSpace_NativeFunction;
    static readonly int BakeControlRigSpace_ParamsSize;
    static readonly int BakeControlRigSpace_InSequence_Offset;
    static readonly int BakeControlRigSpace_InControlRig_Offset;
    static readonly int BakeControlRigSpace_InControlNames_Offset;
    static readonly int BakeControlRigSpace_InControlNames_ElementSize;
    static readonly int BakeControlRigSpace_InSettings_Offset;
    static readonly int BakeControlRigSpace_TimeUnit_Offset;
    static readonly int BakeControlRigSpace_ReturnValue_Offset;
    
    public static bool BakeControlRigSpace(UnrealSharp.LevelSequence.LevelSequence inSequence, UnrealSharp.ControlRig.ControlRig inControlRig, System.Collections.Generic.IList<Name> inControlNames, UnrealSharp.ControlRigEditor.RigSpacePickerBakeSettings inSettings, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BakeControlRigSpace_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, BakeControlRigSpace_InSequence_Offset), 0, null, inSequence);
            ObjectMarshaller<UnrealSharp.ControlRig.ControlRig>.ToNative(IntPtr.Add(ParamsBuffer, BakeControlRigSpace_InControlRig_Offset), 0, null, inControlRig);
            IntPtr InControlNames_NativeBuffer = IntPtr.Add(ParamsBuffer, BakeControlRigSpace_InControlNames_Offset);
            UnrealArrayCopyMarshaler<Name> InControlNames_Marshaler = new UnrealArrayCopyMarshaler<Name>(1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, BakeControlRigSpace_InControlNames_ElementSize);
            InControlNames_Marshaler.ToNative(InControlNames_NativeBuffer, 0, null, inControlNames);
            UnrealSharp.ControlRigEditor.RigSpacePickerBakeSettingsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, BakeControlRigSpace_InSettings_Offset), 0, null, inSettings);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, BakeControlRigSpace_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BakeControlRigSpace_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BakeControlRigSpace_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:BakeConstraints
    static readonly IntPtr BakeConstraints_NativeFunction;
    static readonly int BakeConstraints_ParamsSize;
    static readonly int BakeConstraints_World_Offset;
    static readonly int BakeConstraints_InConstraints_Offset;
    static readonly int BakeConstraints_InConstraints_ElementSize;
    static readonly int BakeConstraints_InSettings_Offset;
    static readonly int BakeConstraints_ReturnValue_Offset;
    
    public static bool BakeConstraints(UnrealSharp.Engine.World world, out System.Collections.Generic.IList<UnrealSharp.Constraints.TickableConstraint> inConstraints, UnrealSharp.MovieSceneTools.BakingAnimationKeySettings inSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BakeConstraints_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.World>.ToNative(IntPtr.Add(ParamsBuffer, BakeConstraints_World_Offset), 0, null, world);
            UnrealSharp.MovieSceneTools.BakingAnimationKeySettingsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, BakeConstraints_InSettings_Offset), 0, null, inSettings);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BakeConstraints_NativeFunction, ParamsBuffer);
            
            IntPtr InConstraints_NativeBuffer = IntPtr.Add(ParamsBuffer, BakeConstraints_InConstraints_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Constraints.TickableConstraint> InConstraints_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Constraints.TickableConstraint> (1, ObjectMarshaller<UnrealSharp.Constraints.TickableConstraint>.ToNative, ObjectMarshaller<UnrealSharp.Constraints.TickableConstraint>.FromNative, BakeConstraints_InConstraints_ElementSize);
            inConstraints = InConstraints_Marshaler.FromNative(InConstraints_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Constraints.TickableConstraint>.DestructInstance(InConstraints_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BakeConstraints_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:BakeConstraint
    static readonly IntPtr BakeConstraint_NativeFunction;
    static readonly int BakeConstraint_ParamsSize;
    static readonly int BakeConstraint_World_Offset;
    static readonly int BakeConstraint_Constraint_Offset;
    static readonly int BakeConstraint_Frames_Offset;
    static readonly int BakeConstraint_Frames_ElementSize;
    static readonly int BakeConstraint_TimeUnit_Offset;
    static readonly int BakeConstraint_ReturnValue_Offset;
    
    public static bool BakeConstraint(UnrealSharp.Engine.World world, UnrealSharp.Constraints.TickableConstraint constraint, System.Collections.Generic.IList<UnrealSharp.CoreUObject.FrameNumber> frames, UnrealSharp.SequencerScripting.ESequenceTimeUnit timeUnit = UnrealSharp.SequencerScripting.ESequenceTimeUnit.DisplayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BakeConstraint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.World>.ToNative(IntPtr.Add(ParamsBuffer, BakeConstraint_World_Offset), 0, null, world);
            ObjectMarshaller<UnrealSharp.Constraints.TickableConstraint>.ToNative(IntPtr.Add(ParamsBuffer, BakeConstraint_Constraint_Offset), 0, null, constraint);
            IntPtr Frames_NativeBuffer = IntPtr.Add(ParamsBuffer, BakeConstraint_Frames_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber> Frames_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FrameNumber>(1, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative, BakeConstraint_Frames_ElementSize);
            Frames_Marshaler.ToNative(Frames_NativeBuffer, 0, null, frames);
            BlittableMarshaller<UnrealSharp.SequencerScripting.ESequenceTimeUnit>.ToNative(IntPtr.Add(ParamsBuffer, BakeConstraint_TimeUnit_Offset), 0, null, timeUnit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BakeConstraint_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BakeConstraint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/ControlRigEditor.ControlRigSequencerEditorLibrary:AddConstraint
    static readonly IntPtr AddConstraint_NativeFunction;
    static readonly int AddConstraint_ParamsSize;
    static readonly int AddConstraint_World_Offset;
    static readonly int AddConstraint_InType_Offset;
    static readonly int AddConstraint_InChild_Offset;
    static readonly int AddConstraint_InParent_Offset;
    static readonly int AddConstraint_bMaintainOffset_Offset;
    static readonly int AddConstraint_ReturnValue_Offset;
    
    public static UnrealSharp.Constraints.TickableConstraint AddConstraint(UnrealSharp.Engine.World world, UnrealSharp.AnimationCore.ETransformConstraintType inType, UnrealSharp.Constraints.TransformableHandle inChild, UnrealSharp.Constraints.TransformableHandle inParent, bool bMaintainOffset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddConstraint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.World>.ToNative(IntPtr.Add(ParamsBuffer, AddConstraint_World_Offset), 0, null, world);
            BlittableMarshaller<UnrealSharp.AnimationCore.ETransformConstraintType>.ToNative(IntPtr.Add(ParamsBuffer, AddConstraint_InType_Offset), 0, null, inType);
            ObjectMarshaller<UnrealSharp.Constraints.TransformableHandle>.ToNative(IntPtr.Add(ParamsBuffer, AddConstraint_InChild_Offset), 0, null, inChild);
            ObjectMarshaller<UnrealSharp.Constraints.TransformableHandle>.ToNative(IntPtr.Add(ParamsBuffer, AddConstraint_InParent_Offset), 0, null, inParent);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddConstraint_bMaintainOffset_Offset), 0, null, bMaintainOffset);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddConstraint_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Constraints.TickableConstraint returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Constraints.TickableConstraint>.FromNative(IntPtr.Add(ParamsBuffer, AddConstraint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.ControlRigEditor;

[UClass]
public partial class ControlRigSnapSettings : UnrealSharp.CoreUObject.Object
{
    
    static ControlRigSnapSettings()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ControlRigSnapSettings");
        
        bKeepOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bKeepOffset");
        bSnapPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSnapPosition");
        bSnapRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSnapRotation");
        bSnapScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSnapScale");
        BakingKeySettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BakingKeySettings");
        FrameIncrement_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FrameIncrement");
        bReduceKeys_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bReduceKeys");
        Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Tolerance");
        
        
        
    }
    
    protected ControlRigSnapSettings(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/ControlRigEditor.ControlRigSnapSettings:bKeepOffset
    static readonly int bKeepOffset_Offset;
    
    public bool bKeepOffset
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bKeepOffset_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bKeepOffset_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/ControlRigEditor.ControlRigSnapSettings:bSnapPosition
    static readonly int bSnapPosition_Offset;
    
    public bool bSnapPosition
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bSnapPosition_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bSnapPosition_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/ControlRigEditor.ControlRigSnapSettings:bSnapRotation
    static readonly int bSnapRotation_Offset;
    
    public bool bSnapRotation
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bSnapRotation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bSnapRotation_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/ControlRigEditor.ControlRigSnapSettings:bSnapScale
    static readonly int bSnapScale_Offset;
    
    public bool bSnapScale
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bSnapScale_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bSnapScale_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/ControlRigEditor.ControlRigSnapSettings:BakingKeySettings
    static readonly int BakingKeySettings_Offset;
    
    public UnrealSharp.MovieSceneTools.EBakingKeySettings BakingKeySettings
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.MovieSceneTools.EBakingKeySettings>.FromNative(IntPtr.Add(NativeObject, BakingKeySettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.MovieSceneTools.EBakingKeySettings>.ToNative(IntPtr.Add(NativeObject, BakingKeySettings_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/ControlRigEditor.ControlRigSnapSettings:FrameIncrement
    static readonly int FrameIncrement_Offset;
    
    public int FrameIncrement
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, FrameIncrement_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, FrameIncrement_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/ControlRigEditor.ControlRigSnapSettings:bReduceKeys
    static readonly int bReduceKeys_Offset;
    
    public bool bReduceKeys
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bReduceKeys_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bReduceKeys_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/ControlRigEditor.ControlRigSnapSettings:Tolerance
    static readonly int Tolerance_Offset;
    
    public float Tolerance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Tolerance_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Tolerance_Offset), 0, this, value);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.EditorScriptingUtilities;

[UClass]
public partial class EditorAssetLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static EditorAssetLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("EditorAssetLibrary");
        
        
        SetMetadataTag_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMetadataTag");
        SetMetadataTag_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMetadataTag_NativeFunction);
        SetMetadataTag_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMetadataTag_NativeFunction, "Object");
        SetMetadataTag_Tag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMetadataTag_NativeFunction, "Tag");
        SetMetadataTag_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMetadataTag_NativeFunction, "Value");
        SaveLoadedAssets_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SaveLoadedAssets");
        SaveLoadedAssets_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SaveLoadedAssets_NativeFunction);
        SaveLoadedAssets_AssetsToSave_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SaveLoadedAssets_NativeFunction, "AssetsToSave");
        SaveLoadedAssets_AssetsToSave_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SaveLoadedAssets_NativeFunction, "AssetsToSave");
        SaveLoadedAssets_bOnlyIfIsDirty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SaveLoadedAssets_NativeFunction, "bOnlyIfIsDirty");
        SaveLoadedAssets_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SaveLoadedAssets_NativeFunction, "ReturnValue");
        SaveLoadedAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SaveLoadedAsset");
        SaveLoadedAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SaveLoadedAsset_NativeFunction);
        SaveLoadedAsset_AssetToSave_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SaveLoadedAsset_NativeFunction, "AssetToSave");
        SaveLoadedAsset_bOnlyIfIsDirty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SaveLoadedAsset_NativeFunction, "bOnlyIfIsDirty");
        SaveLoadedAsset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SaveLoadedAsset_NativeFunction, "ReturnValue");
        SaveDirectory_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SaveDirectory");
        SaveDirectory_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SaveDirectory_NativeFunction);
        SaveDirectory_DirectoryPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SaveDirectory_NativeFunction, "DirectoryPath");
        SaveDirectory_bOnlyIfIsDirty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SaveDirectory_NativeFunction, "bOnlyIfIsDirty");
        SaveDirectory_bRecursive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SaveDirectory_NativeFunction, "bRecursive");
        SaveDirectory_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SaveDirectory_NativeFunction, "ReturnValue");
        SaveAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SaveAsset");
        SaveAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SaveAsset_NativeFunction);
        SaveAsset_AssetToSave_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SaveAsset_NativeFunction, "AssetToSave");
        SaveAsset_bOnlyIfIsDirty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SaveAsset_NativeFunction, "bOnlyIfIsDirty");
        SaveAsset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SaveAsset_NativeFunction, "ReturnValue");
        RenameLoadedAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RenameLoadedAsset");
        RenameLoadedAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RenameLoadedAsset_NativeFunction);
        RenameLoadedAsset_SourceAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenameLoadedAsset_NativeFunction, "SourceAsset");
        RenameLoadedAsset_DestinationAssetPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenameLoadedAsset_NativeFunction, "DestinationAssetPath");
        RenameLoadedAsset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenameLoadedAsset_NativeFunction, "ReturnValue");
        RenameDirectory_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RenameDirectory");
        RenameDirectory_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RenameDirectory_NativeFunction);
        RenameDirectory_SourceDirectoryPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenameDirectory_NativeFunction, "SourceDirectoryPath");
        RenameDirectory_DestinationDirectoryPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenameDirectory_NativeFunction, "DestinationDirectoryPath");
        RenameDirectory_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenameDirectory_NativeFunction, "ReturnValue");
        RenameAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RenameAsset");
        RenameAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RenameAsset_NativeFunction);
        RenameAsset_SourceAssetPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenameAsset_NativeFunction, "SourceAssetPath");
        RenameAsset_DestinationAssetPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenameAsset_NativeFunction, "DestinationAssetPath");
        RenameAsset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenameAsset_NativeFunction, "ReturnValue");
        RemoveMetadataTag_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveMetadataTag");
        RemoveMetadataTag_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveMetadataTag_NativeFunction);
        RemoveMetadataTag_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveMetadataTag_NativeFunction, "Object");
        RemoveMetadataTag_Tag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveMetadataTag_NativeFunction, "Tag");
        MakeDirectory_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeDirectory");
        MakeDirectory_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeDirectory_NativeFunction);
        MakeDirectory_DirectoryPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeDirectory_NativeFunction, "DirectoryPath");
        MakeDirectory_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeDirectory_NativeFunction, "ReturnValue");
        LoadBlueprintClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LoadBlueprintClass");
        LoadBlueprintClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LoadBlueprintClass_NativeFunction);
        LoadBlueprintClass_AssetPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LoadBlueprintClass_NativeFunction, "AssetPath");
        LoadBlueprintClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LoadBlueprintClass_NativeFunction, "ReturnValue");
        LoadAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LoadAsset");
        LoadAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LoadAsset_NativeFunction);
        LoadAsset_AssetPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LoadAsset_NativeFunction, "AssetPath");
        LoadAsset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LoadAsset_NativeFunction, "ReturnValue");
        GetPathNameForLoadedAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPathNameForLoadedAsset");
        GetPathNameForLoadedAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPathNameForLoadedAsset_NativeFunction);
        GetPathNameForLoadedAsset_LoadedAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPathNameForLoadedAsset_NativeFunction, "LoadedAsset");
        GetPathNameForLoadedAsset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPathNameForLoadedAsset_NativeFunction, "ReturnValue");
        GetMetadataTag_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMetadataTag");
        GetMetadataTag_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMetadataTag_NativeFunction);
        GetMetadataTag_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMetadataTag_NativeFunction, "Object");
        GetMetadataTag_Tag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMetadataTag_NativeFunction, "Tag");
        GetMetadataTag_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMetadataTag_NativeFunction, "ReturnValue");
        FindAssetData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindAssetData");
        FindAssetData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindAssetData_NativeFunction);
        FindAssetData_AssetPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindAssetData_NativeFunction, "AssetPath");
        FindAssetData_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindAssetData_NativeFunction, "ReturnValue");
        DuplicateLoadedAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DuplicateLoadedAsset");
        DuplicateLoadedAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DuplicateLoadedAsset_NativeFunction);
        DuplicateLoadedAsset_SourceAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateLoadedAsset_NativeFunction, "SourceAsset");
        DuplicateLoadedAsset_DestinationAssetPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateLoadedAsset_NativeFunction, "DestinationAssetPath");
        DuplicateLoadedAsset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateLoadedAsset_NativeFunction, "ReturnValue");
        DuplicateDirectory_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DuplicateDirectory");
        DuplicateDirectory_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DuplicateDirectory_NativeFunction);
        DuplicateDirectory_SourceDirectoryPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateDirectory_NativeFunction, "SourceDirectoryPath");
        DuplicateDirectory_DestinationDirectoryPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateDirectory_NativeFunction, "DestinationDirectoryPath");
        DuplicateDirectory_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateDirectory_NativeFunction, "ReturnValue");
        DuplicateAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DuplicateAsset");
        DuplicateAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DuplicateAsset_NativeFunction);
        DuplicateAsset_SourceAssetPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateAsset_NativeFunction, "SourceAssetPath");
        DuplicateAsset_DestinationAssetPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateAsset_NativeFunction, "DestinationAssetPath");
        DuplicateAsset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateAsset_NativeFunction, "ReturnValue");
        DoesDirectoryHaveAssets_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DoesDirectoryHaveAssets");
        DoesDirectoryHaveAssets_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DoesDirectoryHaveAssets_NativeFunction);
        DoesDirectoryHaveAssets_DirectoryPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesDirectoryHaveAssets_NativeFunction, "DirectoryPath");
        DoesDirectoryHaveAssets_bRecursive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesDirectoryHaveAssets_NativeFunction, "bRecursive");
        DoesDirectoryHaveAssets_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesDirectoryHaveAssets_NativeFunction, "ReturnValue");
        DoesDirectoryExist_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DoesDirectoryExist");
        DoesDirectoryExist_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DoesDirectoryExist_NativeFunction);
        DoesDirectoryExist_DirectoryPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesDirectoryExist_NativeFunction, "DirectoryPath");
        DoesDirectoryExist_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesDirectoryExist_NativeFunction, "ReturnValue");
        DoesAssetExist_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DoesAssetExist");
        DoesAssetExist_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DoesAssetExist_NativeFunction);
        DoesAssetExist_AssetPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesAssetExist_NativeFunction, "AssetPath");
        DoesAssetExist_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesAssetExist_NativeFunction, "ReturnValue");
        DeleteLoadedAssets_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeleteLoadedAssets");
        DeleteLoadedAssets_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeleteLoadedAssets_NativeFunction);
        DeleteLoadedAssets_AssetsToDelete_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteLoadedAssets_NativeFunction, "AssetsToDelete");
        DeleteLoadedAssets_AssetsToDelete_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(DeleteLoadedAssets_NativeFunction, "AssetsToDelete");
        DeleteLoadedAssets_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteLoadedAssets_NativeFunction, "ReturnValue");
        DeleteLoadedAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeleteLoadedAsset");
        DeleteLoadedAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeleteLoadedAsset_NativeFunction);
        DeleteLoadedAsset_AssetToDelete_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteLoadedAsset_NativeFunction, "AssetToDelete");
        DeleteLoadedAsset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteLoadedAsset_NativeFunction, "ReturnValue");
        DeleteDirectory_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeleteDirectory");
        DeleteDirectory_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeleteDirectory_NativeFunction);
        DeleteDirectory_DirectoryPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteDirectory_NativeFunction, "DirectoryPath");
        DeleteDirectory_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteDirectory_NativeFunction, "ReturnValue");
        DeleteAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeleteAsset");
        DeleteAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeleteAsset_NativeFunction);
        DeleteAsset_AssetPathToDelete_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteAsset_NativeFunction, "AssetPathToDelete");
        DeleteAsset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteAsset_NativeFunction, "ReturnValue");
        ConsolidateAssets_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConsolidateAssets");
        ConsolidateAssets_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConsolidateAssets_NativeFunction);
        ConsolidateAssets_AssetToConsolidateTo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConsolidateAssets_NativeFunction, "AssetToConsolidateTo");
        ConsolidateAssets_AssetsToConsolidate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConsolidateAssets_NativeFunction, "AssetsToConsolidate");
        ConsolidateAssets_AssetsToConsolidate_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ConsolidateAssets_NativeFunction, "AssetsToConsolidate");
        ConsolidateAssets_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConsolidateAssets_NativeFunction, "ReturnValue");
        CheckoutLoadedAssets_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CheckoutLoadedAssets");
        CheckoutLoadedAssets_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CheckoutLoadedAssets_NativeFunction);
        CheckoutLoadedAssets_AssetsToCheckout_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckoutLoadedAssets_NativeFunction, "AssetsToCheckout");
        CheckoutLoadedAssets_AssetsToCheckout_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CheckoutLoadedAssets_NativeFunction, "AssetsToCheckout");
        CheckoutLoadedAssets_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckoutLoadedAssets_NativeFunction, "ReturnValue");
        CheckoutLoadedAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CheckoutLoadedAsset");
        CheckoutLoadedAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CheckoutLoadedAsset_NativeFunction);
        CheckoutLoadedAsset_AssetToCheckout_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckoutLoadedAsset_NativeFunction, "AssetToCheckout");
        CheckoutLoadedAsset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckoutLoadedAsset_NativeFunction, "ReturnValue");
        CheckoutDirectory_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CheckoutDirectory");
        CheckoutDirectory_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CheckoutDirectory_NativeFunction);
        CheckoutDirectory_DirectoryPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckoutDirectory_NativeFunction, "DirectoryPath");
        CheckoutDirectory_bRecursive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckoutDirectory_NativeFunction, "bRecursive");
        CheckoutDirectory_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckoutDirectory_NativeFunction, "ReturnValue");
        CheckoutAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CheckoutAsset");
        CheckoutAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CheckoutAsset_NativeFunction);
        CheckoutAsset_AssetToCheckout_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckoutAsset_NativeFunction, "AssetToCheckout");
        CheckoutAsset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CheckoutAsset_NativeFunction, "ReturnValue");
        
        
    }
    
    protected EditorAssetLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:SetMetadataTag
    static readonly IntPtr SetMetadataTag_NativeFunction;
    static readonly int SetMetadataTag_ParamsSize;
    static readonly int SetMetadataTag_Object_Offset;
    static readonly int SetMetadataTag_Tag_Offset;
    static readonly int SetMetadataTag_Value_Offset;
    
    public static void SetMetadataTag(UnrealSharp.CoreUObject.Object @object, Name tag, string value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMetadataTag_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetMetadataTag_Object_Offset), 0, null, @object);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetMetadataTag_Tag_Offset), 0, null, tag);
            IntPtr Value_NativePtr = IntPtr.Add(ParamsBuffer,SetMetadataTag_Value_Offset);
            StringMarshaller.ToNative(Value_NativePtr,0,null,value);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetMetadataTag_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Value_NativePtr, 0);
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:SaveLoadedAssets
    static readonly IntPtr SaveLoadedAssets_NativeFunction;
    static readonly int SaveLoadedAssets_ParamsSize;
    static readonly int SaveLoadedAssets_AssetsToSave_Offset;
    static readonly int SaveLoadedAssets_AssetsToSave_ElementSize;
    static readonly int SaveLoadedAssets_bOnlyIfIsDirty_Offset;
    static readonly int SaveLoadedAssets_ReturnValue_Offset;
    
    public static bool SaveLoadedAssets(System.Collections.Generic.IList<UnrealSharp.CoreUObject.Object> assetsToSave, bool bOnlyIfIsDirty = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SaveLoadedAssets_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AssetsToSave_NativeBuffer = IntPtr.Add(ParamsBuffer, SaveLoadedAssets_AssetsToSave_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object> AssetsToSave_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object>(1, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative, SaveLoadedAssets_AssetsToSave_ElementSize);
            AssetsToSave_Marshaler.ToNative(AssetsToSave_NativeBuffer, 0, null, assetsToSave);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SaveLoadedAssets_bOnlyIfIsDirty_Offset), 0, null, bOnlyIfIsDirty);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SaveLoadedAssets_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SaveLoadedAssets_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:SaveLoadedAsset
    static readonly IntPtr SaveLoadedAsset_NativeFunction;
    static readonly int SaveLoadedAsset_ParamsSize;
    static readonly int SaveLoadedAsset_AssetToSave_Offset;
    static readonly int SaveLoadedAsset_bOnlyIfIsDirty_Offset;
    static readonly int SaveLoadedAsset_ReturnValue_Offset;
    
    public static bool SaveLoadedAsset(UnrealSharp.CoreUObject.Object assetToSave, bool bOnlyIfIsDirty = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SaveLoadedAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SaveLoadedAsset_AssetToSave_Offset), 0, null, assetToSave);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SaveLoadedAsset_bOnlyIfIsDirty_Offset), 0, null, bOnlyIfIsDirty);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SaveLoadedAsset_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SaveLoadedAsset_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:SaveDirectory
    static readonly IntPtr SaveDirectory_NativeFunction;
    static readonly int SaveDirectory_ParamsSize;
    static readonly int SaveDirectory_DirectoryPath_Offset;
    static readonly int SaveDirectory_bOnlyIfIsDirty_Offset;
    static readonly int SaveDirectory_bRecursive_Offset;
    static readonly int SaveDirectory_ReturnValue_Offset;
    
    public static bool SaveDirectory(string directoryPath, bool bOnlyIfIsDirty = true, bool bRecursive = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SaveDirectory_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr DirectoryPath_NativePtr = IntPtr.Add(ParamsBuffer,SaveDirectory_DirectoryPath_Offset);
            StringMarshaller.ToNative(DirectoryPath_NativePtr,0,null,directoryPath);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SaveDirectory_bOnlyIfIsDirty_Offset), 0, null, bOnlyIfIsDirty);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SaveDirectory_bRecursive_Offset), 0, null, bRecursive);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SaveDirectory_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SaveDirectory_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(DirectoryPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:SaveAsset
    static readonly IntPtr SaveAsset_NativeFunction;
    static readonly int SaveAsset_ParamsSize;
    static readonly int SaveAsset_AssetToSave_Offset;
    static readonly int SaveAsset_bOnlyIfIsDirty_Offset;
    static readonly int SaveAsset_ReturnValue_Offset;
    
    public static bool SaveAsset(string assetToSave, bool bOnlyIfIsDirty = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SaveAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AssetToSave_NativePtr = IntPtr.Add(ParamsBuffer,SaveAsset_AssetToSave_Offset);
            StringMarshaller.ToNative(AssetToSave_NativePtr,0,null,assetToSave);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SaveAsset_bOnlyIfIsDirty_Offset), 0, null, bOnlyIfIsDirty);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SaveAsset_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SaveAsset_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AssetToSave_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:RenameLoadedAsset
    static readonly IntPtr RenameLoadedAsset_NativeFunction;
    static readonly int RenameLoadedAsset_ParamsSize;
    static readonly int RenameLoadedAsset_SourceAsset_Offset;
    static readonly int RenameLoadedAsset_DestinationAssetPath_Offset;
    static readonly int RenameLoadedAsset_ReturnValue_Offset;
    
    public static bool RenameLoadedAsset(UnrealSharp.CoreUObject.Object sourceAsset, string destinationAssetPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RenameLoadedAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, RenameLoadedAsset_SourceAsset_Offset), 0, null, sourceAsset);
            IntPtr DestinationAssetPath_NativePtr = IntPtr.Add(ParamsBuffer,RenameLoadedAsset_DestinationAssetPath_Offset);
            StringMarshaller.ToNative(DestinationAssetPath_NativePtr,0,null,destinationAssetPath);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RenameLoadedAsset_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RenameLoadedAsset_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(DestinationAssetPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:RenameDirectory
    static readonly IntPtr RenameDirectory_NativeFunction;
    static readonly int RenameDirectory_ParamsSize;
    static readonly int RenameDirectory_SourceDirectoryPath_Offset;
    static readonly int RenameDirectory_DestinationDirectoryPath_Offset;
    static readonly int RenameDirectory_ReturnValue_Offset;
    
    public static bool RenameDirectory(string sourceDirectoryPath, string destinationDirectoryPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RenameDirectory_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceDirectoryPath_NativePtr = IntPtr.Add(ParamsBuffer,RenameDirectory_SourceDirectoryPath_Offset);
            StringMarshaller.ToNative(SourceDirectoryPath_NativePtr,0,null,sourceDirectoryPath);
            IntPtr DestinationDirectoryPath_NativePtr = IntPtr.Add(ParamsBuffer,RenameDirectory_DestinationDirectoryPath_Offset);
            StringMarshaller.ToNative(DestinationDirectoryPath_NativePtr,0,null,destinationDirectoryPath);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RenameDirectory_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RenameDirectory_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SourceDirectoryPath_NativePtr, 0);
            StringMarshaller.DestructInstance(DestinationDirectoryPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:RenameAsset
    static readonly IntPtr RenameAsset_NativeFunction;
    static readonly int RenameAsset_ParamsSize;
    static readonly int RenameAsset_SourceAssetPath_Offset;
    static readonly int RenameAsset_DestinationAssetPath_Offset;
    static readonly int RenameAsset_ReturnValue_Offset;
    
    public static bool RenameAsset(string sourceAssetPath, string destinationAssetPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RenameAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceAssetPath_NativePtr = IntPtr.Add(ParamsBuffer,RenameAsset_SourceAssetPath_Offset);
            StringMarshaller.ToNative(SourceAssetPath_NativePtr,0,null,sourceAssetPath);
            IntPtr DestinationAssetPath_NativePtr = IntPtr.Add(ParamsBuffer,RenameAsset_DestinationAssetPath_Offset);
            StringMarshaller.ToNative(DestinationAssetPath_NativePtr,0,null,destinationAssetPath);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RenameAsset_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RenameAsset_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SourceAssetPath_NativePtr, 0);
            StringMarshaller.DestructInstance(DestinationAssetPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:RemoveMetadataTag
    static readonly IntPtr RemoveMetadataTag_NativeFunction;
    static readonly int RemoveMetadataTag_ParamsSize;
    static readonly int RemoveMetadataTag_Object_Offset;
    static readonly int RemoveMetadataTag_Tag_Offset;
    
    public static void RemoveMetadataTag(UnrealSharp.CoreUObject.Object @object, Name tag)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveMetadataTag_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, RemoveMetadataTag_Object_Offset), 0, null, @object);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RemoveMetadataTag_Tag_Offset), 0, null, tag);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemoveMetadataTag_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:MakeDirectory
    static readonly IntPtr MakeDirectory_NativeFunction;
    static readonly int MakeDirectory_ParamsSize;
    static readonly int MakeDirectory_DirectoryPath_Offset;
    static readonly int MakeDirectory_ReturnValue_Offset;
    
    public static bool MakeDirectory(string directoryPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeDirectory_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr DirectoryPath_NativePtr = IntPtr.Add(ParamsBuffer,MakeDirectory_DirectoryPath_Offset);
            StringMarshaller.ToNative(DirectoryPath_NativePtr,0,null,directoryPath);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeDirectory_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, MakeDirectory_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(DirectoryPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:LoadBlueprintClass
    static readonly IntPtr LoadBlueprintClass_NativeFunction;
    static readonly int LoadBlueprintClass_ParamsSize;
    static readonly int LoadBlueprintClass_AssetPath_Offset;
    static readonly int LoadBlueprintClass_ReturnValue_Offset;
    
    public static SubclassOf<UnrealSharp.CoreUObject.Object> LoadBlueprintClass(string assetPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LoadBlueprintClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AssetPath_NativePtr = IntPtr.Add(ParamsBuffer,LoadBlueprintClass_AssetPath_Offset);
            StringMarshaller.ToNative(AssetPath_NativePtr,0,null,assetPath);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LoadBlueprintClass_NativeFunction, ParamsBuffer);
            
            SubclassOf<UnrealSharp.CoreUObject.Object> returnValue;
            returnValue = SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, LoadBlueprintClass_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AssetPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:LoadAsset
    static readonly IntPtr LoadAsset_NativeFunction;
    static readonly int LoadAsset_ParamsSize;
    static readonly int LoadAsset_AssetPath_Offset;
    static readonly int LoadAsset_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Object LoadAsset(string assetPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LoadAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AssetPath_NativePtr = IntPtr.Add(ParamsBuffer,LoadAsset_AssetPath_Offset);
            StringMarshaller.ToNative(AssetPath_NativePtr,0,null,assetPath);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LoadAsset_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Object returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, LoadAsset_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AssetPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:GetPathNameForLoadedAsset
    static readonly IntPtr GetPathNameForLoadedAsset_NativeFunction;
    static readonly int GetPathNameForLoadedAsset_ParamsSize;
    static readonly int GetPathNameForLoadedAsset_LoadedAsset_Offset;
    static readonly int GetPathNameForLoadedAsset_ReturnValue_Offset;
    
    public static string GetPathNameForLoadedAsset(UnrealSharp.CoreUObject.Object loadedAsset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPathNameForLoadedAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetPathNameForLoadedAsset_LoadedAsset_Offset), 0, null, loadedAsset);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPathNameForLoadedAsset_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetPathNameForLoadedAsset_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:GetMetadataTag
    static readonly IntPtr GetMetadataTag_NativeFunction;
    static readonly int GetMetadataTag_ParamsSize;
    static readonly int GetMetadataTag_Object_Offset;
    static readonly int GetMetadataTag_Tag_Offset;
    static readonly int GetMetadataTag_ReturnValue_Offset;
    
    public static string GetMetadataTag(UnrealSharp.CoreUObject.Object @object, Name tag)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMetadataTag_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetMetadataTag_Object_Offset), 0, null, @object);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetMetadataTag_Tag_Offset), 0, null, tag);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMetadataTag_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetMetadataTag_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:FindAssetData
    static readonly IntPtr FindAssetData_NativeFunction;
    static readonly int FindAssetData_ParamsSize;
    static readonly int FindAssetData_AssetPath_Offset;
    static readonly int FindAssetData_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.AssetData FindAssetData(string assetPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindAssetData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AssetPath_NativePtr = IntPtr.Add(ParamsBuffer,FindAssetData_AssetPath_Offset);
            StringMarshaller.ToNative(AssetPath_NativePtr,0,null,assetPath);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindAssetData_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.AssetData returnValue;
            returnValue = UnrealSharp.CoreUObject.AssetDataMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FindAssetData_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AssetPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:DuplicateLoadedAsset
    static readonly IntPtr DuplicateLoadedAsset_NativeFunction;
    static readonly int DuplicateLoadedAsset_ParamsSize;
    static readonly int DuplicateLoadedAsset_SourceAsset_Offset;
    static readonly int DuplicateLoadedAsset_DestinationAssetPath_Offset;
    static readonly int DuplicateLoadedAsset_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Object DuplicateLoadedAsset(UnrealSharp.CoreUObject.Object sourceAsset, string destinationAssetPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DuplicateLoadedAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DuplicateLoadedAsset_SourceAsset_Offset), 0, null, sourceAsset);
            IntPtr DestinationAssetPath_NativePtr = IntPtr.Add(ParamsBuffer,DuplicateLoadedAsset_DestinationAssetPath_Offset);
            StringMarshaller.ToNative(DestinationAssetPath_NativePtr,0,null,destinationAssetPath);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DuplicateLoadedAsset_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Object returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, DuplicateLoadedAsset_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(DestinationAssetPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:DuplicateDirectory
    static readonly IntPtr DuplicateDirectory_NativeFunction;
    static readonly int DuplicateDirectory_ParamsSize;
    static readonly int DuplicateDirectory_SourceDirectoryPath_Offset;
    static readonly int DuplicateDirectory_DestinationDirectoryPath_Offset;
    static readonly int DuplicateDirectory_ReturnValue_Offset;
    
    public static bool DuplicateDirectory(string sourceDirectoryPath, string destinationDirectoryPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DuplicateDirectory_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceDirectoryPath_NativePtr = IntPtr.Add(ParamsBuffer,DuplicateDirectory_SourceDirectoryPath_Offset);
            StringMarshaller.ToNative(SourceDirectoryPath_NativePtr,0,null,sourceDirectoryPath);
            IntPtr DestinationDirectoryPath_NativePtr = IntPtr.Add(ParamsBuffer,DuplicateDirectory_DestinationDirectoryPath_Offset);
            StringMarshaller.ToNative(DestinationDirectoryPath_NativePtr,0,null,destinationDirectoryPath);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DuplicateDirectory_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DuplicateDirectory_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SourceDirectoryPath_NativePtr, 0);
            StringMarshaller.DestructInstance(DestinationDirectoryPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:DuplicateAsset
    static readonly IntPtr DuplicateAsset_NativeFunction;
    static readonly int DuplicateAsset_ParamsSize;
    static readonly int DuplicateAsset_SourceAssetPath_Offset;
    static readonly int DuplicateAsset_DestinationAssetPath_Offset;
    static readonly int DuplicateAsset_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Object DuplicateAsset(string sourceAssetPath, string destinationAssetPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DuplicateAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceAssetPath_NativePtr = IntPtr.Add(ParamsBuffer,DuplicateAsset_SourceAssetPath_Offset);
            StringMarshaller.ToNative(SourceAssetPath_NativePtr,0,null,sourceAssetPath);
            IntPtr DestinationAssetPath_NativePtr = IntPtr.Add(ParamsBuffer,DuplicateAsset_DestinationAssetPath_Offset);
            StringMarshaller.ToNative(DestinationAssetPath_NativePtr,0,null,destinationAssetPath);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DuplicateAsset_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Object returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, DuplicateAsset_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SourceAssetPath_NativePtr, 0);
            StringMarshaller.DestructInstance(DestinationAssetPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:DoesDirectoryHaveAssets
    static readonly IntPtr DoesDirectoryHaveAssets_NativeFunction;
    static readonly int DoesDirectoryHaveAssets_ParamsSize;
    static readonly int DoesDirectoryHaveAssets_DirectoryPath_Offset;
    static readonly int DoesDirectoryHaveAssets_bRecursive_Offset;
    static readonly int DoesDirectoryHaveAssets_ReturnValue_Offset;
    
    public static bool DoesDirectoryHaveAssets(string directoryPath, bool bRecursive = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DoesDirectoryHaveAssets_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr DirectoryPath_NativePtr = IntPtr.Add(ParamsBuffer,DoesDirectoryHaveAssets_DirectoryPath_Offset);
            StringMarshaller.ToNative(DirectoryPath_NativePtr,0,null,directoryPath);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, DoesDirectoryHaveAssets_bRecursive_Offset), 0, null, bRecursive);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DoesDirectoryHaveAssets_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DoesDirectoryHaveAssets_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(DirectoryPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:DoesDirectoryExist
    static readonly IntPtr DoesDirectoryExist_NativeFunction;
    static readonly int DoesDirectoryExist_ParamsSize;
    static readonly int DoesDirectoryExist_DirectoryPath_Offset;
    static readonly int DoesDirectoryExist_ReturnValue_Offset;
    
    public static bool DoesDirectoryExist(string directoryPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DoesDirectoryExist_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr DirectoryPath_NativePtr = IntPtr.Add(ParamsBuffer,DoesDirectoryExist_DirectoryPath_Offset);
            StringMarshaller.ToNative(DirectoryPath_NativePtr,0,null,directoryPath);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DoesDirectoryExist_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DoesDirectoryExist_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(DirectoryPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:DoesAssetExist
    static readonly IntPtr DoesAssetExist_NativeFunction;
    static readonly int DoesAssetExist_ParamsSize;
    static readonly int DoesAssetExist_AssetPath_Offset;
    static readonly int DoesAssetExist_ReturnValue_Offset;
    
    public static bool DoesAssetExist(string assetPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DoesAssetExist_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AssetPath_NativePtr = IntPtr.Add(ParamsBuffer,DoesAssetExist_AssetPath_Offset);
            StringMarshaller.ToNative(AssetPath_NativePtr,0,null,assetPath);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DoesAssetExist_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DoesAssetExist_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AssetPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:DeleteLoadedAssets
    static readonly IntPtr DeleteLoadedAssets_NativeFunction;
    static readonly int DeleteLoadedAssets_ParamsSize;
    static readonly int DeleteLoadedAssets_AssetsToDelete_Offset;
    static readonly int DeleteLoadedAssets_AssetsToDelete_ElementSize;
    static readonly int DeleteLoadedAssets_ReturnValue_Offset;
    
    public static bool DeleteLoadedAssets(System.Collections.Generic.IList<UnrealSharp.CoreUObject.Object> assetsToDelete)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeleteLoadedAssets_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AssetsToDelete_NativeBuffer = IntPtr.Add(ParamsBuffer, DeleteLoadedAssets_AssetsToDelete_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object> AssetsToDelete_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object>(1, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative, DeleteLoadedAssets_AssetsToDelete_ElementSize);
            AssetsToDelete_Marshaler.ToNative(AssetsToDelete_NativeBuffer, 0, null, assetsToDelete);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DeleteLoadedAssets_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DeleteLoadedAssets_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:DeleteLoadedAsset
    static readonly IntPtr DeleteLoadedAsset_NativeFunction;
    static readonly int DeleteLoadedAsset_ParamsSize;
    static readonly int DeleteLoadedAsset_AssetToDelete_Offset;
    static readonly int DeleteLoadedAsset_ReturnValue_Offset;
    
    public static bool DeleteLoadedAsset(UnrealSharp.CoreUObject.Object assetToDelete)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeleteLoadedAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DeleteLoadedAsset_AssetToDelete_Offset), 0, null, assetToDelete);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DeleteLoadedAsset_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DeleteLoadedAsset_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:DeleteDirectory
    static readonly IntPtr DeleteDirectory_NativeFunction;
    static readonly int DeleteDirectory_ParamsSize;
    static readonly int DeleteDirectory_DirectoryPath_Offset;
    static readonly int DeleteDirectory_ReturnValue_Offset;
    
    public static bool DeleteDirectory(string directoryPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeleteDirectory_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr DirectoryPath_NativePtr = IntPtr.Add(ParamsBuffer,DeleteDirectory_DirectoryPath_Offset);
            StringMarshaller.ToNative(DirectoryPath_NativePtr,0,null,directoryPath);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DeleteDirectory_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DeleteDirectory_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(DirectoryPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:DeleteAsset
    static readonly IntPtr DeleteAsset_NativeFunction;
    static readonly int DeleteAsset_ParamsSize;
    static readonly int DeleteAsset_AssetPathToDelete_Offset;
    static readonly int DeleteAsset_ReturnValue_Offset;
    
    public static bool DeleteAsset(string assetPathToDelete)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeleteAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AssetPathToDelete_NativePtr = IntPtr.Add(ParamsBuffer,DeleteAsset_AssetPathToDelete_Offset);
            StringMarshaller.ToNative(AssetPathToDelete_NativePtr,0,null,assetPathToDelete);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DeleteAsset_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DeleteAsset_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AssetPathToDelete_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:ConsolidateAssets
    static readonly IntPtr ConsolidateAssets_NativeFunction;
    static readonly int ConsolidateAssets_ParamsSize;
    static readonly int ConsolidateAssets_AssetToConsolidateTo_Offset;
    static readonly int ConsolidateAssets_AssetsToConsolidate_Offset;
    static readonly int ConsolidateAssets_AssetsToConsolidate_ElementSize;
    static readonly int ConsolidateAssets_ReturnValue_Offset;
    
    public static bool ConsolidateAssets(UnrealSharp.CoreUObject.Object assetToConsolidateTo, System.Collections.Generic.IList<UnrealSharp.CoreUObject.Object> assetsToConsolidate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConsolidateAssets_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ConsolidateAssets_AssetToConsolidateTo_Offset), 0, null, assetToConsolidateTo);
            IntPtr AssetsToConsolidate_NativeBuffer = IntPtr.Add(ParamsBuffer, ConsolidateAssets_AssetsToConsolidate_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object> AssetsToConsolidate_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object>(1, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative, ConsolidateAssets_AssetsToConsolidate_ElementSize);
            AssetsToConsolidate_Marshaler.ToNative(AssetsToConsolidate_NativeBuffer, 0, null, assetsToConsolidate);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConsolidateAssets_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConsolidateAssets_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:CheckoutLoadedAssets
    static readonly IntPtr CheckoutLoadedAssets_NativeFunction;
    static readonly int CheckoutLoadedAssets_ParamsSize;
    static readonly int CheckoutLoadedAssets_AssetsToCheckout_Offset;
    static readonly int CheckoutLoadedAssets_AssetsToCheckout_ElementSize;
    static readonly int CheckoutLoadedAssets_ReturnValue_Offset;
    
    public static bool CheckoutLoadedAssets(System.Collections.Generic.IList<UnrealSharp.CoreUObject.Object> assetsToCheckout)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CheckoutLoadedAssets_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AssetsToCheckout_NativeBuffer = IntPtr.Add(ParamsBuffer, CheckoutLoadedAssets_AssetsToCheckout_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object> AssetsToCheckout_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object>(1, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative, CheckoutLoadedAssets_AssetsToCheckout_ElementSize);
            AssetsToCheckout_Marshaler.ToNative(AssetsToCheckout_NativeBuffer, 0, null, assetsToCheckout);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CheckoutLoadedAssets_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CheckoutLoadedAssets_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:CheckoutLoadedAsset
    static readonly IntPtr CheckoutLoadedAsset_NativeFunction;
    static readonly int CheckoutLoadedAsset_ParamsSize;
    static readonly int CheckoutLoadedAsset_AssetToCheckout_Offset;
    static readonly int CheckoutLoadedAsset_ReturnValue_Offset;
    
    public static bool CheckoutLoadedAsset(UnrealSharp.CoreUObject.Object assetToCheckout)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CheckoutLoadedAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CheckoutLoadedAsset_AssetToCheckout_Offset), 0, null, assetToCheckout);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CheckoutLoadedAsset_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CheckoutLoadedAsset_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:CheckoutDirectory
    static readonly IntPtr CheckoutDirectory_NativeFunction;
    static readonly int CheckoutDirectory_ParamsSize;
    static readonly int CheckoutDirectory_DirectoryPath_Offset;
    static readonly int CheckoutDirectory_bRecursive_Offset;
    static readonly int CheckoutDirectory_ReturnValue_Offset;
    
    public static bool CheckoutDirectory(string directoryPath, bool bRecursive = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CheckoutDirectory_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr DirectoryPath_NativePtr = IntPtr.Add(ParamsBuffer,CheckoutDirectory_DirectoryPath_Offset);
            StringMarshaller.ToNative(DirectoryPath_NativePtr,0,null,directoryPath);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CheckoutDirectory_bRecursive_Offset), 0, null, bRecursive);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CheckoutDirectory_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CheckoutDirectory_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(DirectoryPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/EditorScriptingUtilities.EditorAssetLibrary:CheckoutAsset
    static readonly IntPtr CheckoutAsset_NativeFunction;
    static readonly int CheckoutAsset_ParamsSize;
    static readonly int CheckoutAsset_AssetToCheckout_Offset;
    static readonly int CheckoutAsset_ReturnValue_Offset;
    
    public static bool CheckoutAsset(string assetToCheckout)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CheckoutAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AssetToCheckout_NativePtr = IntPtr.Add(ParamsBuffer,CheckoutAsset_AssetToCheckout_Offset);
            StringMarshaller.ToNative(AssetToCheckout_NativePtr,0,null,assetToCheckout);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CheckoutAsset_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CheckoutAsset_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AssetToCheckout_NativePtr, 0);
            return returnValue;
        }
    }
    
    
}
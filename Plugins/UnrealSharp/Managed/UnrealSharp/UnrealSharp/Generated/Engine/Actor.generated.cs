// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class Actor : UnrealSharp.CoreUObject.Object
{
    
    static Actor()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("Actor");
        
        bOnlyRelevantToOwner_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOnlyRelevantToOwner");
        bOnlyRelevantToOwner_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bOnlyRelevantToOwner");
        bAlwaysRelevant_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAlwaysRelevant");
        bAlwaysRelevant_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAlwaysRelevant");
        bHidden_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bHidden");
        bHidden_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bHidden");
        bNetUseOwnerRelevancy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bNetUseOwnerRelevancy");
        bNetUseOwnerRelevancy_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bNetUseOwnerRelevancy");
        bAutoDestroyWhenFinished_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAutoDestroyWhenFinished");
        bAutoDestroyWhenFinished_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAutoDestroyWhenFinished");
        bCanBeDamaged_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCanBeDamaged");
        bCanBeDamaged_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCanBeDamaged");
        bFindCameraComponentWhenViewTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bFindCameraComponentWhenViewTarget");
        bFindCameraComponentWhenViewTarget_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bFindCameraComponentWhenViewTarget");
        bGenerateOverlapEventsDuringLevelStreaming_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bGenerateOverlapEventsDuringLevelStreaming");
        bGenerateOverlapEventsDuringLevelStreaming_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bGenerateOverlapEventsDuringLevelStreaming");
        bEnableAutoLODGeneration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableAutoLODGeneration");
        bEnableAutoLODGeneration_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableAutoLODGeneration");
        bReplicates_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bReplicates");
        bReplicates_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bReplicates");
        bReplicateUsingRegisteredSubObjectList_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bReplicateUsingRegisteredSubObjectList");
        bReplicateUsingRegisteredSubObjectList_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bReplicateUsingRegisteredSubObjectList");
        InitialLifeSpan_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InitialLifeSpan");
        CustomTimeDilation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CustomTimeDilation");
        NetDormancy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NetDormancy");
        SpawnCollisionHandlingMethod_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SpawnCollisionHandlingMethod");
        NetCullDistanceSquared_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NetCullDistanceSquared");
        NetUpdateFrequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NetUpdateFrequency");
        MinNetUpdateFrequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinNetUpdateFrequency");
        NetPriority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NetPriority");
        Instigator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Instigator");
        RootComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RootComponent");
        PivotOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PivotOffset");
        ActorGuid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ActorGuid");
        ActorInstanceGuid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ActorInstanceGuid");
        ContentBundleGuid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ContentBundleGuid");
        SpriteScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SpriteScale");
        Tags_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Tags");
        Tags_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Tags");
        
        WasRecentlyRendered_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "WasRecentlyRendered");
        WasRecentlyRendered_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(WasRecentlyRendered_NativeFunction);
        WasRecentlyRendered_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WasRecentlyRendered_NativeFunction, "Tolerance");
        WasRecentlyRendered_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WasRecentlyRendered_NativeFunction, "ReturnValue");
        TearOff_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TearOff");
        SetTickGroup_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTickGroup");
        SetTickGroup_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTickGroup_NativeFunction);
        SetTickGroup_NewTickGroup_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTickGroup_NativeFunction, "NewTickGroup");
        SetTickableWhenPaused_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTickableWhenPaused");
        SetTickableWhenPaused_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTickableWhenPaused_NativeFunction);
        SetTickableWhenPaused_bTickableWhenPaused_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTickableWhenPaused_NativeFunction, "bTickableWhenPaused");
        SetReplicates_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetReplicates");
        SetReplicates_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetReplicates_NativeFunction);
        SetReplicates_bInReplicates_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetReplicates_NativeFunction, "bInReplicates");
        SetReplicateMovement_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetReplicateMovement");
        SetReplicateMovement_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetReplicateMovement_NativeFunction);
        SetReplicateMovement_bInReplicateMovement_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetReplicateMovement_NativeFunction, "bInReplicateMovement");
        SetRayTracingGroupId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRayTracingGroupId");
        SetRayTracingGroupId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRayTracingGroupId_NativeFunction);
        SetRayTracingGroupId_InRaytracingGroupId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRayTracingGroupId_NativeFunction, "InRaytracingGroupId");
        SetPhysicsReplicationMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPhysicsReplicationMode");
        SetPhysicsReplicationMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPhysicsReplicationMode_NativeFunction);
        SetPhysicsReplicationMode_ReplicationMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPhysicsReplicationMode_NativeFunction, "ReplicationMode");
        SetOwner_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOwner");
        SetOwner_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOwner_NativeFunction);
        SetOwner_NewOwner_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOwner_NativeFunction, "NewOwner");
        SetNetDormancy_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNetDormancy");
        SetNetDormancy_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNetDormancy_NativeFunction);
        SetNetDormancy_NewDormancy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNetDormancy_NativeFunction, "NewDormancy");
        SetLifeSpan_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLifeSpan");
        SetLifeSpan_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLifeSpan_NativeFunction);
        SetLifeSpan_InLifespan_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLifeSpan_NativeFunction, "InLifespan");
        SetIsTemporarilyHiddenInEditor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIsTemporarilyHiddenInEditor");
        SetIsTemporarilyHiddenInEditor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIsTemporarilyHiddenInEditor_NativeFunction);
        SetIsTemporarilyHiddenInEditor_bIsHidden_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIsTemporarilyHiddenInEditor_NativeFunction, "bIsHidden");
        SetFolderPath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFolderPath");
        SetFolderPath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFolderPath_NativeFunction);
        SetFolderPath_NewFolderPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFolderPath_NativeFunction, "NewFolderPath");
        SetActorTickInterval_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetActorTickInterval");
        SetActorTickInterval_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetActorTickInterval_NativeFunction);
        SetActorTickInterval_TickInterval_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetActorTickInterval_NativeFunction, "TickInterval");
        SetActorTickEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetActorTickEnabled");
        SetActorTickEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetActorTickEnabled_NativeFunction);
        SetActorTickEnabled_bEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetActorTickEnabled_NativeFunction, "bEnabled");
        SetActorScale3D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetActorScale3D");
        SetActorScale3D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetActorScale3D_NativeFunction);
        SetActorScale3D_NewScale3D_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetActorScale3D_NativeFunction, "NewScale3D");
        SetActorRelativeScale3D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetActorRelativeScale3D");
        SetActorRelativeScale3D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetActorRelativeScale3D_NativeFunction);
        SetActorRelativeScale3D_NewRelativeScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetActorRelativeScale3D_NativeFunction, "NewRelativeScale");
        SetActorLabel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetActorLabel");
        SetActorLabel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetActorLabel_NativeFunction);
        SetActorLabel_NewActorLabel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetActorLabel_NativeFunction, "NewActorLabel");
        SetActorLabel_bMarkDirty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetActorLabel_NativeFunction, "bMarkDirty");
        SetActorHiddenInGame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetActorHiddenInGame");
        SetActorHiddenInGame_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetActorHiddenInGame_NativeFunction);
        SetActorHiddenInGame_bNewHidden_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetActorHiddenInGame_NativeFunction, "bNewHidden");
        SetActorEnableCollision_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetActorEnableCollision");
        SetActorEnableCollision_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetActorEnableCollision_NativeFunction);
        SetActorEnableCollision_bNewActorEnableCollision_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetActorEnableCollision_NativeFunction, "bNewActorEnableCollision");
        RemoveTickPrerequisiteComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveTickPrerequisiteComponent");
        RemoveTickPrerequisiteComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveTickPrerequisiteComponent_NativeFunction);
        RemoveTickPrerequisiteComponent_PrerequisiteComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveTickPrerequisiteComponent_NativeFunction, "PrerequisiteComponent");
        RemoveTickPrerequisiteActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveTickPrerequisiteActor");
        RemoveTickPrerequisiteActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveTickPrerequisiteActor_NativeFunction);
        RemoveTickPrerequisiteActor_PrerequisiteActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveTickPrerequisiteActor_NativeFunction, "PrerequisiteActor");
        PrestreamTextures_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PrestreamTextures");
        PrestreamTextures_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PrestreamTextures_NativeFunction);
        PrestreamTextures_Seconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PrestreamTextures_NativeFunction, "Seconds");
        PrestreamTextures_bEnableStreaming_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PrestreamTextures_NativeFunction, "bEnableStreaming");
        PrestreamTextures_CinematicTextureGroups_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PrestreamTextures_NativeFunction, "CinematicTextureGroups");
        MakeNoise_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeNoise");
        MakeNoise_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeNoise_NativeFunction);
        MakeNoise_Loudness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeNoise_NativeFunction, "Loudness");
        MakeNoise_NoiseInstigator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeNoise_NativeFunction, "NoiseInstigator");
        MakeNoise_NoiseLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeNoise_NativeFunction, "NoiseLocation");
        MakeNoise_MaxRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeNoise_NativeFunction, "MaxRange");
        MakeNoise_Tag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeNoise_NativeFunction, "Tag");
        K2_TeleportTo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_TeleportTo");
        K2_TeleportTo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_TeleportTo_NativeFunction);
        K2_TeleportTo_DestLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_TeleportTo_NativeFunction, "DestLocation");
        K2_TeleportTo_DestRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_TeleportTo_NativeFunction, "DestRotation");
        K2_TeleportTo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_TeleportTo_NativeFunction, "ReturnValue");
        K2_SetActorTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_SetActorTransform");
        K2_SetActorTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_SetActorTransform_NativeFunction);
        K2_SetActorTransform_NewTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorTransform_NativeFunction, "NewTransform");
        K2_SetActorTransform_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorTransform_NativeFunction, "bSweep");
        K2_SetActorTransform_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorTransform_NativeFunction, "SweepHitResult");
        K2_SetActorTransform_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorTransform_NativeFunction, "bTeleport");
        K2_SetActorTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorTransform_NativeFunction, "ReturnValue");
        K2_SetActorRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_SetActorRotation");
        K2_SetActorRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_SetActorRotation_NativeFunction);
        K2_SetActorRotation_NewRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorRotation_NativeFunction, "NewRotation");
        K2_SetActorRotation_bTeleportPhysics_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorRotation_NativeFunction, "bTeleportPhysics");
        K2_SetActorRotation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorRotation_NativeFunction, "ReturnValue");
        K2_SetActorRelativeTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_SetActorRelativeTransform");
        K2_SetActorRelativeTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_SetActorRelativeTransform_NativeFunction);
        K2_SetActorRelativeTransform_NewRelativeTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorRelativeTransform_NativeFunction, "NewRelativeTransform");
        K2_SetActorRelativeTransform_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorRelativeTransform_NativeFunction, "bSweep");
        K2_SetActorRelativeTransform_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorRelativeTransform_NativeFunction, "SweepHitResult");
        K2_SetActorRelativeTransform_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorRelativeTransform_NativeFunction, "bTeleport");
        K2_SetActorRelativeRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_SetActorRelativeRotation");
        K2_SetActorRelativeRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_SetActorRelativeRotation_NativeFunction);
        K2_SetActorRelativeRotation_NewRelativeRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorRelativeRotation_NativeFunction, "NewRelativeRotation");
        K2_SetActorRelativeRotation_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorRelativeRotation_NativeFunction, "bSweep");
        K2_SetActorRelativeRotation_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorRelativeRotation_NativeFunction, "SweepHitResult");
        K2_SetActorRelativeRotation_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorRelativeRotation_NativeFunction, "bTeleport");
        K2_SetActorRelativeLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_SetActorRelativeLocation");
        K2_SetActorRelativeLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_SetActorRelativeLocation_NativeFunction);
        K2_SetActorRelativeLocation_NewRelativeLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorRelativeLocation_NativeFunction, "NewRelativeLocation");
        K2_SetActorRelativeLocation_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorRelativeLocation_NativeFunction, "bSweep");
        K2_SetActorRelativeLocation_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorRelativeLocation_NativeFunction, "SweepHitResult");
        K2_SetActorRelativeLocation_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorRelativeLocation_NativeFunction, "bTeleport");
        K2_SetActorLocationAndRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_SetActorLocationAndRotation");
        K2_SetActorLocationAndRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_SetActorLocationAndRotation_NativeFunction);
        K2_SetActorLocationAndRotation_NewLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorLocationAndRotation_NativeFunction, "NewLocation");
        K2_SetActorLocationAndRotation_NewRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorLocationAndRotation_NativeFunction, "NewRotation");
        K2_SetActorLocationAndRotation_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorLocationAndRotation_NativeFunction, "bSweep");
        K2_SetActorLocationAndRotation_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorLocationAndRotation_NativeFunction, "SweepHitResult");
        K2_SetActorLocationAndRotation_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorLocationAndRotation_NativeFunction, "bTeleport");
        K2_SetActorLocationAndRotation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorLocationAndRotation_NativeFunction, "ReturnValue");
        K2_SetActorLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_SetActorLocation");
        K2_SetActorLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_SetActorLocation_NativeFunction);
        K2_SetActorLocation_NewLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorLocation_NativeFunction, "NewLocation");
        K2_SetActorLocation_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorLocation_NativeFunction, "bSweep");
        K2_SetActorLocation_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorLocation_NativeFunction, "SweepHitResult");
        K2_SetActorLocation_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorLocation_NativeFunction, "bTeleport");
        K2_SetActorLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetActorLocation_NativeFunction, "ReturnValue");
        K2_GetComponentsByClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_GetComponentsByClass");
        K2_GetComponentsByClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_GetComponentsByClass_NativeFunction);
        K2_GetComponentsByClass_ComponentClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetComponentsByClass_NativeFunction, "ComponentClass");
        K2_GetComponentsByClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetComponentsByClass_NativeFunction, "ReturnValue");
        K2_GetComponentsByClass_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(K2_GetComponentsByClass_NativeFunction, "ReturnValue");
        K2_GetActorRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_GetActorRotation");
        K2_GetActorRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_GetActorRotation_NativeFunction);
        K2_GetActorRotation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetActorRotation_NativeFunction, "ReturnValue");
        K2_GetActorLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_GetActorLocation");
        K2_GetActorLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_GetActorLocation_NativeFunction);
        K2_GetActorLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetActorLocation_NativeFunction, "ReturnValue");
        K2_DetachFromActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_DetachFromActor");
        K2_DetachFromActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_DetachFromActor_NativeFunction);
        K2_DetachFromActor_LocationRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DetachFromActor_NativeFunction, "LocationRule");
        K2_DetachFromActor_RotationRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DetachFromActor_NativeFunction, "RotationRule");
        K2_DetachFromActor_ScaleRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DetachFromActor_NativeFunction, "ScaleRule");
        K2_DestroyActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_DestroyActor");
        K2_AttachToComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_AttachToComponent");
        K2_AttachToComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_AttachToComponent_NativeFunction);
        K2_AttachToComponent_Parent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachToComponent_NativeFunction, "Parent");
        K2_AttachToComponent_SocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachToComponent_NativeFunction, "SocketName");
        K2_AttachToComponent_LocationRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachToComponent_NativeFunction, "LocationRule");
        K2_AttachToComponent_RotationRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachToComponent_NativeFunction, "RotationRule");
        K2_AttachToComponent_ScaleRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachToComponent_NativeFunction, "ScaleRule");
        K2_AttachToComponent_bWeldSimulatedBodies_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachToComponent_NativeFunction, "bWeldSimulatedBodies");
        K2_AttachToComponent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachToComponent_NativeFunction, "ReturnValue");
        K2_AttachToActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_AttachToActor");
        K2_AttachToActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_AttachToActor_NativeFunction);
        K2_AttachToActor_ParentActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachToActor_NativeFunction, "ParentActor");
        K2_AttachToActor_SocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachToActor_NativeFunction, "SocketName");
        K2_AttachToActor_LocationRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachToActor_NativeFunction, "LocationRule");
        K2_AttachToActor_RotationRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachToActor_NativeFunction, "RotationRule");
        K2_AttachToActor_ScaleRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachToActor_NativeFunction, "ScaleRule");
        K2_AttachToActor_bWeldSimulatedBodies_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachToActor_NativeFunction, "bWeldSimulatedBodies");
        K2_AttachToActor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachToActor_NativeFunction, "ReturnValue");
        K2_AddActorWorldTransformKeepScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_AddActorWorldTransformKeepScale");
        K2_AddActorWorldTransformKeepScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_AddActorWorldTransformKeepScale_NativeFunction);
        K2_AddActorWorldTransformKeepScale_DeltaTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorWorldTransformKeepScale_NativeFunction, "DeltaTransform");
        K2_AddActorWorldTransformKeepScale_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorWorldTransformKeepScale_NativeFunction, "bSweep");
        K2_AddActorWorldTransformKeepScale_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorWorldTransformKeepScale_NativeFunction, "SweepHitResult");
        K2_AddActorWorldTransformKeepScale_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorWorldTransformKeepScale_NativeFunction, "bTeleport");
        K2_AddActorWorldTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_AddActorWorldTransform");
        K2_AddActorWorldTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_AddActorWorldTransform_NativeFunction);
        K2_AddActorWorldTransform_DeltaTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorWorldTransform_NativeFunction, "DeltaTransform");
        K2_AddActorWorldTransform_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorWorldTransform_NativeFunction, "bSweep");
        K2_AddActorWorldTransform_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorWorldTransform_NativeFunction, "SweepHitResult");
        K2_AddActorWorldTransform_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorWorldTransform_NativeFunction, "bTeleport");
        K2_AddActorWorldRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_AddActorWorldRotation");
        K2_AddActorWorldRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_AddActorWorldRotation_NativeFunction);
        K2_AddActorWorldRotation_DeltaRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorWorldRotation_NativeFunction, "DeltaRotation");
        K2_AddActorWorldRotation_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorWorldRotation_NativeFunction, "bSweep");
        K2_AddActorWorldRotation_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorWorldRotation_NativeFunction, "SweepHitResult");
        K2_AddActorWorldRotation_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorWorldRotation_NativeFunction, "bTeleport");
        K2_AddActorWorldOffset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_AddActorWorldOffset");
        K2_AddActorWorldOffset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_AddActorWorldOffset_NativeFunction);
        K2_AddActorWorldOffset_DeltaLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorWorldOffset_NativeFunction, "DeltaLocation");
        K2_AddActorWorldOffset_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorWorldOffset_NativeFunction, "bSweep");
        K2_AddActorWorldOffset_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorWorldOffset_NativeFunction, "SweepHitResult");
        K2_AddActorWorldOffset_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorWorldOffset_NativeFunction, "bTeleport");
        K2_AddActorLocalTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_AddActorLocalTransform");
        K2_AddActorLocalTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_AddActorLocalTransform_NativeFunction);
        K2_AddActorLocalTransform_NewTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorLocalTransform_NativeFunction, "NewTransform");
        K2_AddActorLocalTransform_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorLocalTransform_NativeFunction, "bSweep");
        K2_AddActorLocalTransform_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorLocalTransform_NativeFunction, "SweepHitResult");
        K2_AddActorLocalTransform_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorLocalTransform_NativeFunction, "bTeleport");
        K2_AddActorLocalRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_AddActorLocalRotation");
        K2_AddActorLocalRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_AddActorLocalRotation_NativeFunction);
        K2_AddActorLocalRotation_DeltaRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorLocalRotation_NativeFunction, "DeltaRotation");
        K2_AddActorLocalRotation_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorLocalRotation_NativeFunction, "bSweep");
        K2_AddActorLocalRotation_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorLocalRotation_NativeFunction, "SweepHitResult");
        K2_AddActorLocalRotation_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorLocalRotation_NativeFunction, "bTeleport");
        K2_AddActorLocalOffset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_AddActorLocalOffset");
        K2_AddActorLocalOffset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_AddActorLocalOffset_NativeFunction);
        K2_AddActorLocalOffset_DeltaLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorLocalOffset_NativeFunction, "DeltaLocation");
        K2_AddActorLocalOffset_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorLocalOffset_NativeFunction, "bSweep");
        K2_AddActorLocalOffset_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorLocalOffset_NativeFunction, "SweepHitResult");
        K2_AddActorLocalOffset_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddActorLocalOffset_NativeFunction, "bTeleport");
        IsTemporarilyHiddenInEditor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsTemporarilyHiddenInEditor");
        IsTemporarilyHiddenInEditor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsTemporarilyHiddenInEditor_NativeFunction);
        IsTemporarilyHiddenInEditor_bIncludeParent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsTemporarilyHiddenInEditor_NativeFunction, "bIncludeParent");
        IsTemporarilyHiddenInEditor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsTemporarilyHiddenInEditor_NativeFunction, "ReturnValue");
        IsSelectable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsSelectable");
        IsSelectable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsSelectable_NativeFunction);
        IsSelectable_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSelectable_NativeFunction, "ReturnValue");
        IsOverlappingActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsOverlappingActor");
        IsOverlappingActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsOverlappingActor_NativeFunction);
        IsOverlappingActor_Other_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsOverlappingActor_NativeFunction, "Other");
        IsOverlappingActor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsOverlappingActor_NativeFunction, "ReturnValue");
        IsHiddenEdAtStartup_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsHiddenEdAtStartup");
        IsHiddenEdAtStartup_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsHiddenEdAtStartup_NativeFunction);
        IsHiddenEdAtStartup_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsHiddenEdAtStartup_NativeFunction, "ReturnValue");
        IsHiddenEd_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsHiddenEd");
        IsHiddenEd_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsHiddenEd_NativeFunction);
        IsHiddenEd_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsHiddenEd_NativeFunction, "ReturnValue");
        IsEditable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsEditable");
        IsEditable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsEditable_NativeFunction);
        IsEditable_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsEditable_NativeFunction, "ReturnValue");
        IsChildActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsChildActor");
        IsChildActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsChildActor_NativeFunction);
        IsChildActor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsChildActor_NativeFunction, "ReturnValue");
        IsActorTickEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsActorTickEnabled");
        IsActorTickEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsActorTickEnabled_NativeFunction);
        IsActorTickEnabled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsActorTickEnabled_NativeFunction, "ReturnValue");
        IsActorBeingDestroyed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsActorBeingDestroyed");
        IsActorBeingDestroyed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsActorBeingDestroyed_NativeFunction);
        IsActorBeingDestroyed_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsActorBeingDestroyed_NativeFunction, "ReturnValue");
        HasAuthority_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasAuthority");
        HasAuthority_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasAuthority_NativeFunction);
        HasAuthority_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasAuthority_NativeFunction, "ReturnValue");
        GetVerticalDistanceTo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVerticalDistanceTo");
        GetVerticalDistanceTo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVerticalDistanceTo_NativeFunction);
        GetVerticalDistanceTo_OtherActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVerticalDistanceTo_NativeFunction, "OtherActor");
        GetVerticalDistanceTo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVerticalDistanceTo_NativeFunction, "ReturnValue");
        GetVelocity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVelocity");
        GetVelocity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVelocity_NativeFunction);
        GetVelocity_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVelocity_NativeFunction, "ReturnValue");
        GetTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTransform");
        GetTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTransform_NativeFunction);
        GetTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransform_NativeFunction, "ReturnValue");
        GetTickableWhenPaused_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTickableWhenPaused");
        GetTickableWhenPaused_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTickableWhenPaused_NativeFunction);
        GetTickableWhenPaused_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTickableWhenPaused_NativeFunction, "ReturnValue");
        GetSquaredHorizontalDistanceTo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSquaredHorizontalDistanceTo");
        GetSquaredHorizontalDistanceTo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSquaredHorizontalDistanceTo_NativeFunction);
        GetSquaredHorizontalDistanceTo_OtherActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSquaredHorizontalDistanceTo_NativeFunction, "OtherActor");
        GetSquaredHorizontalDistanceTo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSquaredHorizontalDistanceTo_NativeFunction, "ReturnValue");
        GetSquaredDistanceTo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSquaredDistanceTo");
        GetSquaredDistanceTo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSquaredDistanceTo_NativeFunction);
        GetSquaredDistanceTo_OtherActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSquaredDistanceTo_NativeFunction, "OtherActor");
        GetSquaredDistanceTo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSquaredDistanceTo_NativeFunction, "ReturnValue");
        GetResimulationThreshold_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetResimulationThreshold");
        GetResimulationThreshold_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetResimulationThreshold_NativeFunction);
        GetResimulationThreshold_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetResimulationThreshold_NativeFunction, "ReturnValue");
        GetRemoteRole_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRemoteRole");
        GetRemoteRole_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRemoteRole_NativeFunction);
        GetRemoteRole_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRemoteRole_NativeFunction, "ReturnValue");
        GetRayTracingGroupId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRayTracingGroupId");
        GetRayTracingGroupId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRayTracingGroupId_NativeFunction);
        GetRayTracingGroupId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRayTracingGroupId_NativeFunction, "ReturnValue");
        GetPhysicsReplicationMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPhysicsReplicationMode");
        GetPhysicsReplicationMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPhysicsReplicationMode_NativeFunction);
        GetPhysicsReplicationMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhysicsReplicationMode_NativeFunction, "ReturnValue");
        GetParentComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetParentComponent");
        GetParentComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetParentComponent_NativeFunction);
        GetParentComponent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParentComponent_NativeFunction, "ReturnValue");
        GetParentActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetParentActor");
        GetParentActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetParentActor_NativeFunction);
        GetParentActor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParentActor_NativeFunction, "ReturnValue");
        GetOwner_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOwner");
        GetOwner_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOwner_NativeFunction);
        GetOwner_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOwner_NativeFunction, "ReturnValue");
        GetOverlappingComponents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOverlappingComponents");
        GetOverlappingComponents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOverlappingComponents_NativeFunction);
        GetOverlappingComponents_OverlappingComponents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOverlappingComponents_NativeFunction, "OverlappingComponents");
        GetOverlappingComponents_OverlappingComponents_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetOverlappingComponents_NativeFunction, "OverlappingComponents");
        GetOverlappingActors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOverlappingActors");
        GetOverlappingActors_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOverlappingActors_NativeFunction);
        GetOverlappingActors_OverlappingActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOverlappingActors_NativeFunction, "OverlappingActors");
        GetOverlappingActors_OverlappingActors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetOverlappingActors_NativeFunction, "OverlappingActors");
        GetOverlappingActors_ClassFilter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOverlappingActors_NativeFunction, "ClassFilter");
        GetLocalRole_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalRole");
        GetLocalRole_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalRole_NativeFunction);
        GetLocalRole_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalRole_NativeFunction, "ReturnValue");
        GetLifeSpan_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLifeSpan");
        GetLifeSpan_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLifeSpan_NativeFunction);
        GetLifeSpan_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLifeSpan_NativeFunction, "ReturnValue");
        GetLevelTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLevelTransform");
        GetLevelTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLevelTransform_NativeFunction);
        GetLevelTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLevelTransform_NativeFunction, "ReturnValue");
        GetLevel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLevel");
        GetLevel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLevel_NativeFunction);
        GetLevel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLevel_NativeFunction, "ReturnValue");
        GetInstigatorController_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInstigatorController");
        GetInstigatorController_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInstigatorController_NativeFunction);
        GetInstigatorController_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInstigatorController_NativeFunction, "ReturnValue");
        GetInstigator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInstigator");
        GetInstigator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInstigator_NativeFunction);
        GetInstigator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInstigator_NativeFunction, "ReturnValue");
        GetHorizontalDotProductTo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHorizontalDotProductTo");
        GetHorizontalDotProductTo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHorizontalDotProductTo_NativeFunction);
        GetHorizontalDotProductTo_OtherActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHorizontalDotProductTo_NativeFunction, "OtherActor");
        GetHorizontalDotProductTo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHorizontalDotProductTo_NativeFunction, "ReturnValue");
        GetHorizontalDistanceTo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHorizontalDistanceTo");
        GetHorizontalDistanceTo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHorizontalDistanceTo_NativeFunction);
        GetHorizontalDistanceTo_OtherActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHorizontalDistanceTo_NativeFunction, "OtherActor");
        GetHorizontalDistanceTo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHorizontalDistanceTo_NativeFunction, "ReturnValue");
        GetGameTimeSinceCreation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGameTimeSinceCreation");
        GetGameTimeSinceCreation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGameTimeSinceCreation_NativeFunction);
        GetGameTimeSinceCreation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGameTimeSinceCreation_NativeFunction, "ReturnValue");
        GetFolderPath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFolderPath");
        GetFolderPath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFolderPath_NativeFunction);
        GetFolderPath_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFolderPath_NativeFunction, "ReturnValue");
        GetDotProductTo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDotProductTo");
        GetDotProductTo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDotProductTo_NativeFunction);
        GetDotProductTo_OtherActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDotProductTo_NativeFunction, "OtherActor");
        GetDotProductTo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDotProductTo_NativeFunction, "ReturnValue");
        GetDistanceTo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDistanceTo");
        GetDistanceTo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDistanceTo_NativeFunction);
        GetDistanceTo_OtherActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDistanceTo_NativeFunction, "OtherActor");
        GetDistanceTo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDistanceTo_NativeFunction, "ReturnValue");
        GetDefaultActorLabel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDefaultActorLabel");
        GetDefaultActorLabel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDefaultActorLabel_NativeFunction);
        GetDefaultActorLabel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultActorLabel_NativeFunction, "ReturnValue");
        GetComponentsByTag_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetComponentsByTag");
        GetComponentsByTag_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetComponentsByTag_NativeFunction);
        GetComponentsByTag_ComponentClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetComponentsByTag_NativeFunction, "ComponentClass");
        GetComponentsByTag_Tag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetComponentsByTag_NativeFunction, "Tag");
        GetComponentsByTag_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetComponentsByTag_NativeFunction, "ReturnValue");
        GetComponentsByTag_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetComponentsByTag_NativeFunction, "ReturnValue");
        GetComponentsByInterface_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetComponentsByInterface");
        GetComponentsByInterface_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetComponentsByInterface_NativeFunction);
        GetComponentsByInterface_Interface_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetComponentsByInterface_NativeFunction, "Interface");
        GetComponentsByInterface_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetComponentsByInterface_NativeFunction, "ReturnValue");
        GetComponentsByInterface_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetComponentsByInterface_NativeFunction, "ReturnValue");
        GetComponentByClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetComponentByClass");
        GetComponentByClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetComponentByClass_NativeFunction);
        GetComponentByClass_ComponentClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetComponentByClass_NativeFunction, "ComponentClass");
        GetComponentByClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetComponentByClass_NativeFunction, "ReturnValue");
        GetAttachParentSocketName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAttachParentSocketName");
        GetAttachParentSocketName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAttachParentSocketName_NativeFunction);
        GetAttachParentSocketName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAttachParentSocketName_NativeFunction, "ReturnValue");
        GetAttachParentActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAttachParentActor");
        GetAttachParentActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAttachParentActor_NativeFunction);
        GetAttachParentActor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAttachParentActor_NativeFunction, "ReturnValue");
        GetAttachedActors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAttachedActors");
        GetAttachedActors_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAttachedActors_NativeFunction);
        GetAttachedActors_OutActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAttachedActors_NativeFunction, "OutActors");
        GetAttachedActors_OutActors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAttachedActors_NativeFunction, "OutActors");
        GetAttachedActors_bResetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAttachedActors_NativeFunction, "bResetArray");
        GetAttachedActors_bRecursivelyIncludeAttachedActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAttachedActors_NativeFunction, "bRecursivelyIncludeAttachedActors");
        GetAllChildActors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAllChildActors");
        GetAllChildActors_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAllChildActors_NativeFunction);
        GetAllChildActors_ChildActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllChildActors_NativeFunction, "ChildActors");
        GetAllChildActors_ChildActors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAllChildActors_NativeFunction, "ChildActors");
        GetAllChildActors_bIncludeDescendants_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllChildActors_NativeFunction, "bIncludeDescendants");
        GetActorUpVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActorUpVector");
        GetActorUpVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActorUpVector_NativeFunction);
        GetActorUpVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorUpVector_NativeFunction, "ReturnValue");
        GetActorTimeDilation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActorTimeDilation");
        GetActorTimeDilation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActorTimeDilation_NativeFunction);
        GetActorTimeDilation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorTimeDilation_NativeFunction, "ReturnValue");
        GetActorTickInterval_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActorTickInterval");
        GetActorTickInterval_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActorTickInterval_NativeFunction);
        GetActorTickInterval_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorTickInterval_NativeFunction, "ReturnValue");
        GetActorScale3D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActorScale3D");
        GetActorScale3D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActorScale3D_NativeFunction);
        GetActorScale3D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorScale3D_NativeFunction, "ReturnValue");
        GetActorRightVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActorRightVector");
        GetActorRightVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActorRightVector_NativeFunction);
        GetActorRightVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorRightVector_NativeFunction, "ReturnValue");
        GetActorRelativeScale3D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActorRelativeScale3D");
        GetActorRelativeScale3D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActorRelativeScale3D_NativeFunction);
        GetActorRelativeScale3D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorRelativeScale3D_NativeFunction, "ReturnValue");
        GetActorLabel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActorLabel");
        GetActorLabel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActorLabel_NativeFunction);
        GetActorLabel_bCreateIfNone_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorLabel_NativeFunction, "bCreateIfNone");
        GetActorLabel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorLabel_NativeFunction, "ReturnValue");
        GetActorForwardVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActorForwardVector");
        GetActorForwardVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActorForwardVector_NativeFunction);
        GetActorForwardVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorForwardVector_NativeFunction, "ReturnValue");
        GetActorEyesViewPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActorEyesViewPoint");
        GetActorEyesViewPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActorEyesViewPoint_NativeFunction);
        GetActorEyesViewPoint_OutLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorEyesViewPoint_NativeFunction, "OutLocation");
        GetActorEyesViewPoint_OutRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorEyesViewPoint_NativeFunction, "OutRotation");
        GetActorEnableCollision_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActorEnableCollision");
        GetActorEnableCollision_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActorEnableCollision_NativeFunction);
        GetActorEnableCollision_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorEnableCollision_NativeFunction, "ReturnValue");
        GetActorBounds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActorBounds");
        GetActorBounds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActorBounds_NativeFunction);
        GetActorBounds_bOnlyCollidingComponents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorBounds_NativeFunction, "bOnlyCollidingComponents");
        GetActorBounds_Origin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorBounds_NativeFunction, "Origin");
        GetActorBounds_BoxExtent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorBounds_NativeFunction, "BoxExtent");
        GetActorBounds_bIncludeFromChildActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorBounds_NativeFunction, "bIncludeFromChildActors");
        ForceNetUpdate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ForceNetUpdate");
        FlushNetDormancy_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FlushNetDormancy");
        FindComponentByTag_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindComponentByTag");
        FindComponentByTag_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindComponentByTag_NativeFunction);
        FindComponentByTag_ComponentClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindComponentByTag_NativeFunction, "ComponentClass");
        FindComponentByTag_Tag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindComponentByTag_NativeFunction, "Tag");
        FindComponentByTag_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindComponentByTag_NativeFunction, "ReturnValue");
        EnableInput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EnableInput");
        EnableInput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EnableInput_NativeFunction);
        EnableInput_PlayerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EnableInput_NativeFunction, "PlayerController");
        DisableInput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DisableInput");
        DisableInput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DisableInput_NativeFunction);
        DisableInput_PlayerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DisableInput_NativeFunction, "PlayerController");
        CreateInputComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateInputComponent");
        CreateInputComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateInputComponent_NativeFunction);
        CreateInputComponent_InputComponentToCreate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateInputComponent_NativeFunction, "InputComponentToCreate");
        CanTriggerResimulation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CanTriggerResimulation");
        CanTriggerResimulation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CanTriggerResimulation_NativeFunction);
        CanTriggerResimulation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanTriggerResimulation_NativeFunction, "ReturnValue");
        AddTickPrerequisiteComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddTickPrerequisiteComponent");
        AddTickPrerequisiteComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddTickPrerequisiteComponent_NativeFunction);
        AddTickPrerequisiteComponent_PrerequisiteComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTickPrerequisiteComponent_NativeFunction, "PrerequisiteComponent");
        AddTickPrerequisiteActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddTickPrerequisiteActor");
        AddTickPrerequisiteActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddTickPrerequisiteActor_NativeFunction);
        AddTickPrerequisiteActor_PrerequisiteActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTickPrerequisiteActor_NativeFunction, "PrerequisiteActor");
        ActorHasTag_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ActorHasTag");
        ActorHasTag_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ActorHasTag_NativeFunction);
        ActorHasTag_Tag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ActorHasTag_NativeFunction, "Tag");
        ActorHasTag_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ActorHasTag_NativeFunction, "ReturnValue");
        
        IntPtr ReceiveTick_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveTick");
        ReceiveTick_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveTick_NativeFunction);
        ReceiveTick_DeltaSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveTick_NativeFunction, "DeltaSeconds");
        
        IntPtr ReceiveRadialDamage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveRadialDamage");
        ReceiveRadialDamage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveRadialDamage_NativeFunction);
        ReceiveRadialDamage_DamageReceived_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveRadialDamage_NativeFunction, "DamageReceived");
        ReceiveRadialDamage_DamageType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveRadialDamage_NativeFunction, "DamageType");
        ReceiveRadialDamage_Origin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveRadialDamage_NativeFunction, "Origin");
        ReceiveRadialDamage_HitInfo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveRadialDamage_NativeFunction, "HitInfo");
        ReceiveRadialDamage_InstigatedBy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveRadialDamage_NativeFunction, "InstigatedBy");
        ReceiveRadialDamage_DamageCauser_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveRadialDamage_NativeFunction, "DamageCauser");
        
        IntPtr ReceivePointDamage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceivePointDamage");
        ReceivePointDamage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceivePointDamage_NativeFunction);
        ReceivePointDamage_Damage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceivePointDamage_NativeFunction, "Damage");
        ReceivePointDamage_DamageType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceivePointDamage_NativeFunction, "DamageType");
        ReceivePointDamage_HitLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceivePointDamage_NativeFunction, "HitLocation");
        ReceivePointDamage_HitNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceivePointDamage_NativeFunction, "HitNormal");
        ReceivePointDamage_HitComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceivePointDamage_NativeFunction, "HitComponent");
        ReceivePointDamage_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceivePointDamage_NativeFunction, "BoneName");
        ReceivePointDamage_ShotFromDirection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceivePointDamage_NativeFunction, "ShotFromDirection");
        ReceivePointDamage_InstigatedBy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceivePointDamage_NativeFunction, "InstigatedBy");
        ReceivePointDamage_DamageCauser_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceivePointDamage_NativeFunction, "DamageCauser");
        ReceivePointDamage_HitInfo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceivePointDamage_NativeFunction, "HitInfo");
        
        IntPtr ReceiveHit_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveHit");
        ReceiveHit_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveHit_NativeFunction);
        ReceiveHit_MyComp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveHit_NativeFunction, "MyComp");
        ReceiveHit_Other_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveHit_NativeFunction, "Other");
        ReceiveHit_OtherComp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveHit_NativeFunction, "OtherComp");
        ReceiveHit_bSelfMoved_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveHit_NativeFunction, "bSelfMoved");
        ReceiveHit_HitLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveHit_NativeFunction, "HitLocation");
        ReceiveHit_HitNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveHit_NativeFunction, "HitNormal");
        ReceiveHit_NormalImpulse_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveHit_NativeFunction, "NormalImpulse");
        ReceiveHit_Hit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveHit_NativeFunction, "Hit");
        
        IntPtr ReceiveEndPlay_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveEndPlay");
        ReceiveEndPlay_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveEndPlay_NativeFunction);
        ReceiveEndPlay_EndPlayReason_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveEndPlay_NativeFunction, "EndPlayReason");
        
        IntPtr ReceiveAsyncPhysicsTick_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveAsyncPhysicsTick");
        ReceiveAsyncPhysicsTick_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveAsyncPhysicsTick_NativeFunction);
        ReceiveAsyncPhysicsTick_DeltaSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveAsyncPhysicsTick_NativeFunction, "DeltaSeconds");
        ReceiveAsyncPhysicsTick_SimSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveAsyncPhysicsTick_NativeFunction, "SimSeconds");
        
        IntPtr ReceiveAnyDamage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveAnyDamage");
        ReceiveAnyDamage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveAnyDamage_NativeFunction);
        ReceiveAnyDamage_Damage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveAnyDamage_NativeFunction, "Damage");
        ReceiveAnyDamage_DamageType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveAnyDamage_NativeFunction, "DamageType");
        ReceiveAnyDamage_InstigatedBy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveAnyDamage_NativeFunction, "InstigatedBy");
        ReceiveAnyDamage_DamageCauser_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveAnyDamage_NativeFunction, "DamageCauser");
        
        IntPtr ReceiveActorOnReleased_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveActorOnReleased");
        ReceiveActorOnReleased_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveActorOnReleased_NativeFunction);
        ReceiveActorOnReleased_ButtonReleased_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveActorOnReleased_NativeFunction, "ButtonReleased");
        
        IntPtr ReceiveActorOnInputTouchLeave_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveActorOnInputTouchLeave");
        ReceiveActorOnInputTouchLeave_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveActorOnInputTouchLeave_NativeFunction);
        ReceiveActorOnInputTouchLeave_FingerIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveActorOnInputTouchLeave_NativeFunction, "FingerIndex");
        
        IntPtr ReceiveActorOnInputTouchEnter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveActorOnInputTouchEnter");
        ReceiveActorOnInputTouchEnter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveActorOnInputTouchEnter_NativeFunction);
        ReceiveActorOnInputTouchEnter_FingerIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveActorOnInputTouchEnter_NativeFunction, "FingerIndex");
        
        IntPtr ReceiveActorOnInputTouchEnd_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveActorOnInputTouchEnd");
        ReceiveActorOnInputTouchEnd_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveActorOnInputTouchEnd_NativeFunction);
        ReceiveActorOnInputTouchEnd_FingerIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveActorOnInputTouchEnd_NativeFunction, "FingerIndex");
        
        IntPtr ReceiveActorOnInputTouchBegin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveActorOnInputTouchBegin");
        ReceiveActorOnInputTouchBegin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveActorOnInputTouchBegin_NativeFunction);
        ReceiveActorOnInputTouchBegin_FingerIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveActorOnInputTouchBegin_NativeFunction, "FingerIndex");
        
        IntPtr ReceiveActorOnClicked_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveActorOnClicked");
        ReceiveActorOnClicked_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveActorOnClicked_NativeFunction);
        ReceiveActorOnClicked_ButtonPressed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveActorOnClicked_NativeFunction, "ButtonPressed");
        
        IntPtr ReceiveActorEndOverlap_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveActorEndOverlap");
        ReceiveActorEndOverlap_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveActorEndOverlap_NativeFunction);
        ReceiveActorEndOverlap_OtherActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveActorEndOverlap_NativeFunction, "OtherActor");
        
        IntPtr ReceiveActorBeginOverlap_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveActorBeginOverlap");
        ReceiveActorBeginOverlap_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveActorBeginOverlap_NativeFunction);
        ReceiveActorBeginOverlap_OtherActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveActorBeginOverlap_NativeFunction, "OtherActor");
        
        IntPtr K2_OnEndViewTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_OnEndViewTarget");
        K2_OnEndViewTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_OnEndViewTarget_NativeFunction);
        K2_OnEndViewTarget_PC_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_OnEndViewTarget_NativeFunction, "PC");
        
        IntPtr K2_OnBecomeViewTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_OnBecomeViewTarget");
        K2_OnBecomeViewTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_OnBecomeViewTarget_NativeFunction);
        K2_OnBecomeViewTarget_PC_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_OnBecomeViewTarget_NativeFunction, "PC");
        
        
    }
    
    protected Actor(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/Engine.Actor:bOnlyRelevantToOwner
    static readonly int bOnlyRelevantToOwner_Offset;
    static readonly IntPtr bOnlyRelevantToOwner_NativeProperty;
    
    public bool bOnlyRelevantToOwner
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bOnlyRelevantToOwner_NativeProperty, bOnlyRelevantToOwner_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Actor:bAlwaysRelevant
    static readonly int bAlwaysRelevant_Offset;
    static readonly IntPtr bAlwaysRelevant_NativeProperty;
    
    public bool bAlwaysRelevant
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAlwaysRelevant_NativeProperty, bAlwaysRelevant_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bAlwaysRelevant_NativeProperty, bAlwaysRelevant_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.Actor:bHidden
    static readonly int bHidden_Offset;
    static readonly IntPtr bHidden_NativeProperty;
    
    public bool bHidden
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bHidden_NativeProperty, bHidden_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Actor:bNetUseOwnerRelevancy
    static readonly int bNetUseOwnerRelevancy_Offset;
    static readonly IntPtr bNetUseOwnerRelevancy_NativeProperty;
    
    public bool bNetUseOwnerRelevancy
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bNetUseOwnerRelevancy_NativeProperty, bNetUseOwnerRelevancy_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bNetUseOwnerRelevancy_NativeProperty, bNetUseOwnerRelevancy_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.Actor:bAutoDestroyWhenFinished
    static readonly int bAutoDestroyWhenFinished_Offset;
    static readonly IntPtr bAutoDestroyWhenFinished_NativeProperty;
    
    public bool bAutoDestroyWhenFinished
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAutoDestroyWhenFinished_NativeProperty, bAutoDestroyWhenFinished_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bAutoDestroyWhenFinished_NativeProperty, bAutoDestroyWhenFinished_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.Actor:bCanBeDamaged
    static readonly int bCanBeDamaged_Offset;
    static readonly IntPtr bCanBeDamaged_NativeProperty;
    
    public bool bCanBeDamaged
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCanBeDamaged_NativeProperty, bCanBeDamaged_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bCanBeDamaged_NativeProperty, bCanBeDamaged_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.Actor:bFindCameraComponentWhenViewTarget
    static readonly int bFindCameraComponentWhenViewTarget_Offset;
    static readonly IntPtr bFindCameraComponentWhenViewTarget_NativeProperty;
    
    public bool bFindCameraComponentWhenViewTarget
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bFindCameraComponentWhenViewTarget_NativeProperty, bFindCameraComponentWhenViewTarget_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bFindCameraComponentWhenViewTarget_NativeProperty, bFindCameraComponentWhenViewTarget_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.Actor:bGenerateOverlapEventsDuringLevelStreaming
    static readonly int bGenerateOverlapEventsDuringLevelStreaming_Offset;
    static readonly IntPtr bGenerateOverlapEventsDuringLevelStreaming_NativeProperty;
    
    public bool bGenerateOverlapEventsDuringLevelStreaming
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bGenerateOverlapEventsDuringLevelStreaming_NativeProperty, bGenerateOverlapEventsDuringLevelStreaming_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bGenerateOverlapEventsDuringLevelStreaming_NativeProperty, bGenerateOverlapEventsDuringLevelStreaming_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.Actor:bEnableAutoLODGeneration
    static readonly int bEnableAutoLODGeneration_Offset;
    static readonly IntPtr bEnableAutoLODGeneration_NativeProperty;
    
    public bool bEnableAutoLODGeneration
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableAutoLODGeneration_NativeProperty, bEnableAutoLODGeneration_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bEnableAutoLODGeneration_NativeProperty, bEnableAutoLODGeneration_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.Actor:bReplicates
    static readonly int bReplicates_Offset;
    static readonly IntPtr bReplicates_NativeProperty;
    
    public bool bReplicates
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bReplicates_NativeProperty, bReplicates_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Actor:bReplicateUsingRegisteredSubObjectList
    static readonly int bReplicateUsingRegisteredSubObjectList_Offset;
    static readonly IntPtr bReplicateUsingRegisteredSubObjectList_NativeProperty;
    
    public bool bReplicateUsingRegisteredSubObjectList
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bReplicateUsingRegisteredSubObjectList_NativeProperty, bReplicateUsingRegisteredSubObjectList_Offset);
        }
    }
    
    // FloatProperty /Script/Engine.Actor:InitialLifeSpan
    static readonly int InitialLifeSpan_Offset;
    
    public float InitialLifeSpan
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, InitialLifeSpan_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.Actor:CustomTimeDilation
    static readonly int CustomTimeDilation_Offset;
    
    public float CustomTimeDilation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CustomTimeDilation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, CustomTimeDilation_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/Engine.Actor:NetDormancy
    static readonly int NetDormancy_Offset;
    
    public UnrealSharp.Engine.ENetDormancy NetDormancy
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ENetDormancy>.FromNative(IntPtr.Add(NativeObject, NetDormancy_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/Engine.Actor:SpawnCollisionHandlingMethod
    static readonly int SpawnCollisionHandlingMethod_Offset;
    
    public UnrealSharp.Engine.ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ESpawnActorCollisionHandlingMethod>.FromNative(IntPtr.Add(NativeObject, SpawnCollisionHandlingMethod_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.ESpawnActorCollisionHandlingMethod>.ToNative(IntPtr.Add(NativeObject, SpawnCollisionHandlingMethod_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.Actor:NetCullDistanceSquared
    static readonly int NetCullDistanceSquared_Offset;
    
    public float NetCullDistanceSquared
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, NetCullDistanceSquared_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.Actor:NetUpdateFrequency
    static readonly int NetUpdateFrequency_Offset;
    
    public float NetUpdateFrequency
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, NetUpdateFrequency_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, NetUpdateFrequency_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.Actor:MinNetUpdateFrequency
    static readonly int MinNetUpdateFrequency_Offset;
    
    public float MinNetUpdateFrequency
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinNetUpdateFrequency_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MinNetUpdateFrequency_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.Actor:NetPriority
    static readonly int NetPriority_Offset;
    
    public float NetPriority
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, NetPriority_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, NetPriority_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/Engine.Actor:Instigator
    static readonly int Instigator_Offset;
    
    public UnrealSharp.Engine.Pawn Instigator
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(NativeObject, Instigator_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(NativeObject, Instigator_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/Engine.Actor:RootComponent
    static readonly int RootComponent_Offset;
    
    public UnrealSharp.Engine.SceneComponent RootComponent
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.FromNative(IntPtr.Add(NativeObject, RootComponent_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.Actor:PivotOffset
    static readonly int PivotOffset_Offset;
    
    public System.DoubleNumerics.Vector3 PivotOffset
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, PivotOffset_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.Actor:ActorGuid
    static readonly int ActorGuid_Offset;
    
    public UnrealSharp.CoreUObject.Guid ActorGuid
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.CoreUObject.GuidMarshaler.FromNative(IntPtr.Add(NativeObject, ActorGuid_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.Actor:ActorInstanceGuid
    static readonly int ActorInstanceGuid_Offset;
    
    public UnrealSharp.CoreUObject.Guid ActorInstanceGuid
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.CoreUObject.GuidMarshaler.FromNative(IntPtr.Add(NativeObject, ActorInstanceGuid_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.Actor:ContentBundleGuid
    static readonly int ContentBundleGuid_Offset;
    
    public UnrealSharp.CoreUObject.Guid ContentBundleGuid
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.CoreUObject.GuidMarshaler.FromNative(IntPtr.Add(NativeObject, ContentBundleGuid_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.Actor:SpriteScale
    static readonly int SpriteScale_Offset;
    
    public float SpriteScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SpriteScale_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, SpriteScale_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/Engine.Actor:Tags
    static readonly int Tags_Offset;
    static readonly IntPtr Tags_NativeProperty;
    UnrealArrayReadWriteMarshaler<Name> Tags_Wrapper = null;
    
    public System.Collections.Generic.IList<Name> Tags
    {
        get
        {
            if(Tags_Wrapper == null)
            {
                Tags_Wrapper = new UnrealArrayReadWriteMarshaler<Name>(1, Tags_NativeProperty, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative);
            }
            
            return Tags_Wrapper.FromNative(IntPtr.Add(NativeObject,Tags_Offset),0,this);
        }
    }
    
    // Function /Script/Engine.Actor:WasRecentlyRendered
    static readonly IntPtr WasRecentlyRendered_NativeFunction;
    static readonly int WasRecentlyRendered_ParamsSize;
    static readonly int WasRecentlyRendered_Tolerance_Offset;
    static readonly int WasRecentlyRendered_ReturnValue_Offset;
    
    public bool WasRecentlyRendered(float tolerance = 0.200000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[WasRecentlyRendered_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, WasRecentlyRendered_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, WasRecentlyRendered_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, WasRecentlyRendered_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:TearOff
    static readonly IntPtr TearOff_NativeFunction;
    
    public void TearOff()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, TearOff_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.Actor:SetTickGroup
    static readonly IntPtr SetTickGroup_NativeFunction;
    static readonly int SetTickGroup_ParamsSize;
    static readonly int SetTickGroup_NewTickGroup_Offset;
    
    public void SetTickGroup(UnrealSharp.Engine.ETickingGroup newTickGroup)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTickGroup_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ETickingGroup>.ToNative(IntPtr.Add(ParamsBuffer, SetTickGroup_NewTickGroup_Offset), 0, null, newTickGroup);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTickGroup_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:SetTickableWhenPaused
    static readonly IntPtr SetTickableWhenPaused_NativeFunction;
    static readonly int SetTickableWhenPaused_ParamsSize;
    static readonly int SetTickableWhenPaused_bTickableWhenPaused_Offset;
    
    public void SetTickableWhenPaused(bool bTickableWhenPaused)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTickableWhenPaused_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetTickableWhenPaused_bTickableWhenPaused_Offset), 0, null, bTickableWhenPaused);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTickableWhenPaused_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:SetReplicates
    static readonly IntPtr SetReplicates_NativeFunction;
    static readonly int SetReplicates_ParamsSize;
    static readonly int SetReplicates_bInReplicates_Offset;
    
    public void SetReplicates(bool bInReplicates)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetReplicates_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetReplicates_bInReplicates_Offset), 0, null, bInReplicates);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetReplicates_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:SetReplicateMovement
    static readonly IntPtr SetReplicateMovement_NativeFunction;
    static readonly int SetReplicateMovement_ParamsSize;
    static readonly int SetReplicateMovement_bInReplicateMovement_Offset;
    
    public void SetReplicateMovement(bool bInReplicateMovement)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetReplicateMovement_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetReplicateMovement_bInReplicateMovement_Offset), 0, null, bInReplicateMovement);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetReplicateMovement_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:SetRayTracingGroupId
    static readonly IntPtr SetRayTracingGroupId_NativeFunction;
    static readonly int SetRayTracingGroupId_ParamsSize;
    static readonly int SetRayTracingGroupId_InRaytracingGroupId_Offset;
    
    public void SetRayTracingGroupId(int inRaytracingGroupId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRayTracingGroupId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetRayTracingGroupId_InRaytracingGroupId_Offset), 0, null, inRaytracingGroupId);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRayTracingGroupId_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:SetPhysicsReplicationMode
    static readonly IntPtr SetPhysicsReplicationMode_NativeFunction;
    static readonly int SetPhysicsReplicationMode_ParamsSize;
    static readonly int SetPhysicsReplicationMode_ReplicationMode_Offset;
    
    public void SetPhysicsReplicationMode(UnrealSharp.Engine.EPhysicsReplicationMode replicationMode)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPhysicsReplicationMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EPhysicsReplicationMode>.ToNative(IntPtr.Add(ParamsBuffer, SetPhysicsReplicationMode_ReplicationMode_Offset), 0, null, replicationMode);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPhysicsReplicationMode_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:SetOwner
    static readonly IntPtr SetOwner_NativeFunction;
    static readonly int SetOwner_ParamsSize;
    static readonly int SetOwner_NewOwner_Offset;
    
    public void SetOwner(UnrealSharp.Engine.Actor newOwner)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOwner_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, SetOwner_NewOwner_Offset), 0, null, newOwner);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOwner_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:SetNetDormancy
    static readonly IntPtr SetNetDormancy_NativeFunction;
    static readonly int SetNetDormancy_ParamsSize;
    static readonly int SetNetDormancy_NewDormancy_Offset;
    
    public void SetNetDormancy(UnrealSharp.Engine.ENetDormancy newDormancy)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNetDormancy_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ENetDormancy>.ToNative(IntPtr.Add(ParamsBuffer, SetNetDormancy_NewDormancy_Offset), 0, null, newDormancy);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNetDormancy_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:SetLifeSpan
    static readonly IntPtr SetLifeSpan_NativeFunction;
    static readonly int SetLifeSpan_ParamsSize;
    static readonly int SetLifeSpan_InLifespan_Offset;
    
    public void SetLifeSpan(float inLifespan)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLifeSpan_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLifeSpan_InLifespan_Offset), 0, null, inLifespan);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLifeSpan_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:SetIsTemporarilyHiddenInEditor
    static readonly IntPtr SetIsTemporarilyHiddenInEditor_NativeFunction;
    static readonly int SetIsTemporarilyHiddenInEditor_ParamsSize;
    static readonly int SetIsTemporarilyHiddenInEditor_bIsHidden_Offset;
    
    public void SetIsTemporarilyHiddenInEditor(bool bIsHidden)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIsTemporarilyHiddenInEditor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetIsTemporarilyHiddenInEditor_bIsHidden_Offset), 0, null, bIsHidden);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIsTemporarilyHiddenInEditor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:SetFolderPath
    static readonly IntPtr SetFolderPath_NativeFunction;
    static readonly int SetFolderPath_ParamsSize;
    static readonly int SetFolderPath_NewFolderPath_Offset;
    
    public void SetFolderPath(Name newFolderPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFolderPath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetFolderPath_NewFolderPath_Offset), 0, null, newFolderPath);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFolderPath_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.Actor:SetActorTickInterval
    static readonly IntPtr SetActorTickInterval_NativeFunction;
    static readonly int SetActorTickInterval_ParamsSize;
    static readonly int SetActorTickInterval_TickInterval_Offset;
    
    public void SetActorTickInterval(float tickInterval)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetActorTickInterval_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetActorTickInterval_TickInterval_Offset), 0, null, tickInterval);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetActorTickInterval_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:SetActorTickEnabled
    static readonly IntPtr SetActorTickEnabled_NativeFunction;
    static readonly int SetActorTickEnabled_ParamsSize;
    static readonly int SetActorTickEnabled_bEnabled_Offset;
    
    public void SetActorTickEnabled(bool bEnabled)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetActorTickEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetActorTickEnabled_bEnabled_Offset), 0, null, bEnabled);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetActorTickEnabled_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:SetActorScale3D
    static readonly IntPtr SetActorScale3D_NativeFunction;
    static readonly int SetActorScale3D_ParamsSize;
    static readonly int SetActorScale3D_NewScale3D_Offset;
    
    public void SetActorScale3D(System.DoubleNumerics.Vector3 newScale3D)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetActorScale3D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetActorScale3D_NewScale3D_Offset), 0, null, newScale3D);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetActorScale3D_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:SetActorRelativeScale3D
    static readonly IntPtr SetActorRelativeScale3D_NativeFunction;
    static readonly int SetActorRelativeScale3D_ParamsSize;
    static readonly int SetActorRelativeScale3D_NewRelativeScale_Offset;
    
    public void SetActorRelativeScale3D(System.DoubleNumerics.Vector3 newRelativeScale)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetActorRelativeScale3D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetActorRelativeScale3D_NewRelativeScale_Offset), 0, null, newRelativeScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetActorRelativeScale3D_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:SetActorLabel
    static readonly IntPtr SetActorLabel_NativeFunction;
    static readonly int SetActorLabel_ParamsSize;
    static readonly int SetActorLabel_NewActorLabel_Offset;
    static readonly int SetActorLabel_bMarkDirty_Offset;
    
    public void SetActorLabel(string newActorLabel, bool bMarkDirty = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetActorLabel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NewActorLabel_NativePtr = IntPtr.Add(ParamsBuffer,SetActorLabel_NewActorLabel_Offset);
            StringMarshaller.ToNative(NewActorLabel_NativePtr,0,null,newActorLabel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetActorLabel_bMarkDirty_Offset), 0, null, bMarkDirty);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetActorLabel_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(NewActorLabel_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.Actor:SetActorHiddenInGame
    static readonly IntPtr SetActorHiddenInGame_NativeFunction;
    static readonly int SetActorHiddenInGame_ParamsSize;
    static readonly int SetActorHiddenInGame_bNewHidden_Offset;
    
    public void SetActorHiddenInGame(bool bNewHidden)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetActorHiddenInGame_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetActorHiddenInGame_bNewHidden_Offset), 0, null, bNewHidden);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetActorHiddenInGame_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:SetActorEnableCollision
    static readonly IntPtr SetActorEnableCollision_NativeFunction;
    static readonly int SetActorEnableCollision_ParamsSize;
    static readonly int SetActorEnableCollision_bNewActorEnableCollision_Offset;
    
    public void SetActorEnableCollision(bool bNewActorEnableCollision)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetActorEnableCollision_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetActorEnableCollision_bNewActorEnableCollision_Offset), 0, null, bNewActorEnableCollision);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetActorEnableCollision_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:RemoveTickPrerequisiteComponent
    static readonly IntPtr RemoveTickPrerequisiteComponent_NativeFunction;
    static readonly int RemoveTickPrerequisiteComponent_ParamsSize;
    static readonly int RemoveTickPrerequisiteComponent_PrerequisiteComponent_Offset;
    
    public void RemoveTickPrerequisiteComponent(UnrealSharp.Engine.ActorComponent prerequisiteComponent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveTickPrerequisiteComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.ActorComponent>.ToNative(IntPtr.Add(ParamsBuffer, RemoveTickPrerequisiteComponent_PrerequisiteComponent_Offset), 0, null, prerequisiteComponent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveTickPrerequisiteComponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:RemoveTickPrerequisiteActor
    static readonly IntPtr RemoveTickPrerequisiteActor_NativeFunction;
    static readonly int RemoveTickPrerequisiteActor_ParamsSize;
    static readonly int RemoveTickPrerequisiteActor_PrerequisiteActor_Offset;
    
    public void RemoveTickPrerequisiteActor(UnrealSharp.Engine.Actor prerequisiteActor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveTickPrerequisiteActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, RemoveTickPrerequisiteActor_PrerequisiteActor_Offset), 0, null, prerequisiteActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveTickPrerequisiteActor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:PrestreamTextures
    static readonly IntPtr PrestreamTextures_NativeFunction;
    static readonly int PrestreamTextures_ParamsSize;
    static readonly int PrestreamTextures_Seconds_Offset;
    static readonly int PrestreamTextures_bEnableStreaming_Offset;
    static readonly int PrestreamTextures_CinematicTextureGroups_Offset;
    
    public void PrestreamTextures(float seconds, bool bEnableStreaming, int cinematicTextureGroups = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PrestreamTextures_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PrestreamTextures_Seconds_Offset), 0, null, seconds);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, PrestreamTextures_bEnableStreaming_Offset), 0, null, bEnableStreaming);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, PrestreamTextures_CinematicTextureGroups_Offset), 0, null, cinematicTextureGroups);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PrestreamTextures_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:MakeNoise
    static readonly IntPtr MakeNoise_NativeFunction;
    static readonly int MakeNoise_ParamsSize;
    static readonly int MakeNoise_Loudness_Offset;
    static readonly int MakeNoise_NoiseInstigator_Offset;
    static readonly int MakeNoise_NoiseLocation_Offset;
    static readonly int MakeNoise_MaxRange_Offset;
    static readonly int MakeNoise_Tag_Offset;
    
    public void MakeNoise(float loudness = 1.000000f, UnrealSharp.Engine.Pawn noiseInstigator = default(UnrealSharp.Engine.Pawn), System.DoubleNumerics.Vector3 noiseLocation = default(System.DoubleNumerics.Vector3), float maxRange = 0.000000f, Name tag = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeNoise_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, MakeNoise_Loudness_Offset), 0, null, loudness);
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(ParamsBuffer, MakeNoise_NoiseInstigator_Offset), 0, null, noiseInstigator);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakeNoise_NoiseLocation_Offset), 0, null, noiseLocation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, MakeNoise_MaxRange_Offset), 0, null, maxRange);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, MakeNoise_Tag_Offset), 0, null, tag);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, MakeNoise_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:K2_TeleportTo
    static readonly IntPtr K2_TeleportTo_NativeFunction;
    static readonly int K2_TeleportTo_ParamsSize;
    static readonly int K2_TeleportTo_DestLocation_Offset;
    static readonly int K2_TeleportTo_DestRotation_Offset;
    static readonly int K2_TeleportTo_ReturnValue_Offset;
    
    public bool Teleport(System.DoubleNumerics.Vector3 destLocation, UnrealSharp.Rotator destRotation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_TeleportTo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_TeleportTo_DestLocation_Offset), 0, null, destLocation);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, K2_TeleportTo_DestRotation_Offset), 0, null, destRotation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_TeleportTo_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_TeleportTo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:K2_SetActorTransform
    static readonly IntPtr K2_SetActorTransform_NativeFunction;
    static readonly int K2_SetActorTransform_ParamsSize;
    static readonly int K2_SetActorTransform_NewTransform_Offset;
    static readonly int K2_SetActorTransform_bSweep_Offset;
    static readonly int K2_SetActorTransform_SweepHitResult_Offset;
    static readonly int K2_SetActorTransform_bTeleport_Offset;
    static readonly int K2_SetActorTransform_ReturnValue_Offset;
    
    public bool SetActorTransform(UnrealSharp.Transform newTransform, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_SetActorTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetActorTransform_NewTransform_Offset), 0, null, newTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetActorTransform_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetActorTransform_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_SetActorTransform_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_SetActorTransform_SweepHitResult_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_SetActorTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:K2_SetActorRotation
    static readonly IntPtr K2_SetActorRotation_NativeFunction;
    static readonly int K2_SetActorRotation_ParamsSize;
    static readonly int K2_SetActorRotation_NewRotation_Offset;
    static readonly int K2_SetActorRotation_bTeleportPhysics_Offset;
    static readonly int K2_SetActorRotation_ReturnValue_Offset;
    
    public bool SetActorRotation(UnrealSharp.Rotator newRotation, bool bTeleportPhysics)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_SetActorRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetActorRotation_NewRotation_Offset), 0, null, newRotation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetActorRotation_bTeleportPhysics_Offset), 0, null, bTeleportPhysics);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_SetActorRotation_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_SetActorRotation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:K2_SetActorRelativeTransform
    static readonly IntPtr K2_SetActorRelativeTransform_NativeFunction;
    static readonly int K2_SetActorRelativeTransform_ParamsSize;
    static readonly int K2_SetActorRelativeTransform_NewRelativeTransform_Offset;
    static readonly int K2_SetActorRelativeTransform_bSweep_Offset;
    static readonly int K2_SetActorRelativeTransform_SweepHitResult_Offset;
    static readonly int K2_SetActorRelativeTransform_bTeleport_Offset;
    
    public void SetActorRelativeTransform(UnrealSharp.Transform newRelativeTransform, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_SetActorRelativeTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetActorRelativeTransform_NewRelativeTransform_Offset), 0, null, newRelativeTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetActorRelativeTransform_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetActorRelativeTransform_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_SetActorRelativeTransform_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_SetActorRelativeTransform_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.Actor:K2_SetActorRelativeRotation
    static readonly IntPtr K2_SetActorRelativeRotation_NativeFunction;
    static readonly int K2_SetActorRelativeRotation_ParamsSize;
    static readonly int K2_SetActorRelativeRotation_NewRelativeRotation_Offset;
    static readonly int K2_SetActorRelativeRotation_bSweep_Offset;
    static readonly int K2_SetActorRelativeRotation_SweepHitResult_Offset;
    static readonly int K2_SetActorRelativeRotation_bTeleport_Offset;
    
    public void SetActorRelativeRotation(UnrealSharp.Rotator newRelativeRotation, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_SetActorRelativeRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetActorRelativeRotation_NewRelativeRotation_Offset), 0, null, newRelativeRotation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetActorRelativeRotation_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetActorRelativeRotation_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_SetActorRelativeRotation_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_SetActorRelativeRotation_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.Actor:K2_SetActorRelativeLocation
    static readonly IntPtr K2_SetActorRelativeLocation_NativeFunction;
    static readonly int K2_SetActorRelativeLocation_ParamsSize;
    static readonly int K2_SetActorRelativeLocation_NewRelativeLocation_Offset;
    static readonly int K2_SetActorRelativeLocation_bSweep_Offset;
    static readonly int K2_SetActorRelativeLocation_SweepHitResult_Offset;
    static readonly int K2_SetActorRelativeLocation_bTeleport_Offset;
    
    public void SetActorRelativeLocation(System.DoubleNumerics.Vector3 newRelativeLocation, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_SetActorRelativeLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetActorRelativeLocation_NewRelativeLocation_Offset), 0, null, newRelativeLocation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetActorRelativeLocation_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetActorRelativeLocation_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_SetActorRelativeLocation_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_SetActorRelativeLocation_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.Actor:K2_SetActorLocationAndRotation
    static readonly IntPtr K2_SetActorLocationAndRotation_NativeFunction;
    static readonly int K2_SetActorLocationAndRotation_ParamsSize;
    static readonly int K2_SetActorLocationAndRotation_NewLocation_Offset;
    static readonly int K2_SetActorLocationAndRotation_NewRotation_Offset;
    static readonly int K2_SetActorLocationAndRotation_bSweep_Offset;
    static readonly int K2_SetActorLocationAndRotation_SweepHitResult_Offset;
    static readonly int K2_SetActorLocationAndRotation_bTeleport_Offset;
    static readonly int K2_SetActorLocationAndRotation_ReturnValue_Offset;
    
    public bool SetActorLocationAndRotation(System.DoubleNumerics.Vector3 newLocation, UnrealSharp.Rotator newRotation, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_SetActorLocationAndRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetActorLocationAndRotation_NewLocation_Offset), 0, null, newLocation);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetActorLocationAndRotation_NewRotation_Offset), 0, null, newRotation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetActorLocationAndRotation_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetActorLocationAndRotation_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_SetActorLocationAndRotation_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_SetActorLocationAndRotation_SweepHitResult_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_SetActorLocationAndRotation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:K2_SetActorLocation
    static readonly IntPtr K2_SetActorLocation_NativeFunction;
    static readonly int K2_SetActorLocation_ParamsSize;
    static readonly int K2_SetActorLocation_NewLocation_Offset;
    static readonly int K2_SetActorLocation_bSweep_Offset;
    static readonly int K2_SetActorLocation_SweepHitResult_Offset;
    static readonly int K2_SetActorLocation_bTeleport_Offset;
    static readonly int K2_SetActorLocation_ReturnValue_Offset;
    
    public bool SetActorLocation(System.DoubleNumerics.Vector3 newLocation, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_SetActorLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetActorLocation_NewLocation_Offset), 0, null, newLocation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetActorLocation_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetActorLocation_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_SetActorLocation_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_SetActorLocation_SweepHitResult_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_SetActorLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:K2_GetComponentsByClass
    static readonly IntPtr K2_GetComponentsByClass_NativeFunction;
    static readonly int K2_GetComponentsByClass_ParamsSize;
    static readonly int K2_GetComponentsByClass_ComponentClass_Offset;
    static readonly int K2_GetComponentsByClass_ReturnValue_Offset;
    static readonly int K2_GetComponentsByClass_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.ActorComponent> GetComponentsByClass(SubclassOf<UnrealSharp.Engine.ActorComponent> componentClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_GetComponentsByClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.ActorComponent>.ToNative(IntPtr.Add(ParamsBuffer, K2_GetComponentsByClass_ComponentClass_Offset), 0, null, componentClass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_GetComponentsByClass_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.Engine.ActorComponent> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, K2_GetComponentsByClass_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.ActorComponent> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.ActorComponent> (1, ObjectMarshaller<UnrealSharp.Engine.ActorComponent>.ToNative, ObjectMarshaller<UnrealSharp.Engine.ActorComponent>.FromNative, K2_GetComponentsByClass_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.ActorComponent>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:K2_GetActorRotation
    static readonly IntPtr K2_GetActorRotation_NativeFunction;
    static readonly int K2_GetActorRotation_ParamsSize;
    static readonly int K2_GetActorRotation_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetActorRotation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_GetActorRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_GetActorRotation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, K2_GetActorRotation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:K2_GetActorLocation
    static readonly IntPtr K2_GetActorLocation_NativeFunction;
    static readonly int K2_GetActorLocation_ParamsSize;
    static readonly int K2_GetActorLocation_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetActorLocation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_GetActorLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_GetActorLocation_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, K2_GetActorLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:K2_DetachFromActor
    static readonly IntPtr K2_DetachFromActor_NativeFunction;
    static readonly int K2_DetachFromActor_ParamsSize;
    static readonly int K2_DetachFromActor_LocationRule_Offset;
    static readonly int K2_DetachFromActor_RotationRule_Offset;
    static readonly int K2_DetachFromActor_ScaleRule_Offset;
    
    public void DetachFromActor(UnrealSharp.Engine.EDetachmentRule locationRule = UnrealSharp.Engine.EDetachmentRule.KeepRelative, UnrealSharp.Engine.EDetachmentRule rotationRule = UnrealSharp.Engine.EDetachmentRule.KeepRelative, UnrealSharp.Engine.EDetachmentRule scaleRule = UnrealSharp.Engine.EDetachmentRule.KeepRelative)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_DetachFromActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EDetachmentRule>.ToNative(IntPtr.Add(ParamsBuffer, K2_DetachFromActor_LocationRule_Offset), 0, null, locationRule);
            BlittableMarshaller<UnrealSharp.Engine.EDetachmentRule>.ToNative(IntPtr.Add(ParamsBuffer, K2_DetachFromActor_RotationRule_Offset), 0, null, rotationRule);
            BlittableMarshaller<UnrealSharp.Engine.EDetachmentRule>.ToNative(IntPtr.Add(ParamsBuffer, K2_DetachFromActor_ScaleRule_Offset), 0, null, scaleRule);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_DetachFromActor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:K2_DestroyActor
    static readonly IntPtr K2_DestroyActor_NativeFunction;
    
    public void DestroyActor()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_DestroyActor_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.Actor:K2_AttachToComponent
    static readonly IntPtr K2_AttachToComponent_NativeFunction;
    static readonly int K2_AttachToComponent_ParamsSize;
    static readonly int K2_AttachToComponent_Parent_Offset;
    static readonly int K2_AttachToComponent_SocketName_Offset;
    static readonly int K2_AttachToComponent_LocationRule_Offset;
    static readonly int K2_AttachToComponent_RotationRule_Offset;
    static readonly int K2_AttachToComponent_ScaleRule_Offset;
    static readonly int K2_AttachToComponent_bWeldSimulatedBodies_Offset;
    static readonly int K2_AttachToComponent_ReturnValue_Offset;
    
    public bool AttachToComponent(UnrealSharp.Engine.SceneComponent parent, Name socketName, UnrealSharp.Engine.EAttachmentRule locationRule, UnrealSharp.Engine.EAttachmentRule rotationRule, UnrealSharp.Engine.EAttachmentRule scaleRule, bool bWeldSimulatedBodies)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_AttachToComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachToComponent_Parent_Offset), 0, null, parent);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachToComponent_SocketName_Offset), 0, null, socketName);
            BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachToComponent_LocationRule_Offset), 0, null, locationRule);
            BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachToComponent_RotationRule_Offset), 0, null, rotationRule);
            BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachToComponent_ScaleRule_Offset), 0, null, scaleRule);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachToComponent_bWeldSimulatedBodies_Offset), 0, null, bWeldSimulatedBodies);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_AttachToComponent_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_AttachToComponent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:K2_AttachToActor
    static readonly IntPtr K2_AttachToActor_NativeFunction;
    static readonly int K2_AttachToActor_ParamsSize;
    static readonly int K2_AttachToActor_ParentActor_Offset;
    static readonly int K2_AttachToActor_SocketName_Offset;
    static readonly int K2_AttachToActor_LocationRule_Offset;
    static readonly int K2_AttachToActor_RotationRule_Offset;
    static readonly int K2_AttachToActor_ScaleRule_Offset;
    static readonly int K2_AttachToActor_bWeldSimulatedBodies_Offset;
    static readonly int K2_AttachToActor_ReturnValue_Offset;
    
    public bool AttachToActor(UnrealSharp.Engine.Actor parentActor, Name socketName, UnrealSharp.Engine.EAttachmentRule locationRule, UnrealSharp.Engine.EAttachmentRule rotationRule, UnrealSharp.Engine.EAttachmentRule scaleRule, bool bWeldSimulatedBodies)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_AttachToActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachToActor_ParentActor_Offset), 0, null, parentActor);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachToActor_SocketName_Offset), 0, null, socketName);
            BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachToActor_LocationRule_Offset), 0, null, locationRule);
            BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachToActor_RotationRule_Offset), 0, null, rotationRule);
            BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachToActor_ScaleRule_Offset), 0, null, scaleRule);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachToActor_bWeldSimulatedBodies_Offset), 0, null, bWeldSimulatedBodies);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_AttachToActor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_AttachToActor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:K2_AddActorWorldTransformKeepScale
    static readonly IntPtr K2_AddActorWorldTransformKeepScale_NativeFunction;
    static readonly int K2_AddActorWorldTransformKeepScale_ParamsSize;
    static readonly int K2_AddActorWorldTransformKeepScale_DeltaTransform_Offset;
    static readonly int K2_AddActorWorldTransformKeepScale_bSweep_Offset;
    static readonly int K2_AddActorWorldTransformKeepScale_SweepHitResult_Offset;
    static readonly int K2_AddActorWorldTransformKeepScale_bTeleport_Offset;
    
    public void AddActorWorldTransformKeepScale(UnrealSharp.Transform deltaTransform, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_AddActorWorldTransformKeepScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, K2_AddActorWorldTransformKeepScale_DeltaTransform_Offset), 0, null, deltaTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddActorWorldTransformKeepScale_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddActorWorldTransformKeepScale_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_AddActorWorldTransformKeepScale_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_AddActorWorldTransformKeepScale_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.Actor:K2_AddActorWorldTransform
    static readonly IntPtr K2_AddActorWorldTransform_NativeFunction;
    static readonly int K2_AddActorWorldTransform_ParamsSize;
    static readonly int K2_AddActorWorldTransform_DeltaTransform_Offset;
    static readonly int K2_AddActorWorldTransform_bSweep_Offset;
    static readonly int K2_AddActorWorldTransform_SweepHitResult_Offset;
    static readonly int K2_AddActorWorldTransform_bTeleport_Offset;
    
    public void AddActorWorldTransform(UnrealSharp.Transform deltaTransform, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_AddActorWorldTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, K2_AddActorWorldTransform_DeltaTransform_Offset), 0, null, deltaTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddActorWorldTransform_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddActorWorldTransform_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_AddActorWorldTransform_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_AddActorWorldTransform_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.Actor:K2_AddActorWorldRotation
    static readonly IntPtr K2_AddActorWorldRotation_NativeFunction;
    static readonly int K2_AddActorWorldRotation_ParamsSize;
    static readonly int K2_AddActorWorldRotation_DeltaRotation_Offset;
    static readonly int K2_AddActorWorldRotation_bSweep_Offset;
    static readonly int K2_AddActorWorldRotation_SweepHitResult_Offset;
    static readonly int K2_AddActorWorldRotation_bTeleport_Offset;
    
    public void AddActorWorldRotation(UnrealSharp.Rotator deltaRotation, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_AddActorWorldRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, K2_AddActorWorldRotation_DeltaRotation_Offset), 0, null, deltaRotation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddActorWorldRotation_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddActorWorldRotation_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_AddActorWorldRotation_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_AddActorWorldRotation_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.Actor:K2_AddActorWorldOffset
    static readonly IntPtr K2_AddActorWorldOffset_NativeFunction;
    static readonly int K2_AddActorWorldOffset_ParamsSize;
    static readonly int K2_AddActorWorldOffset_DeltaLocation_Offset;
    static readonly int K2_AddActorWorldOffset_bSweep_Offset;
    static readonly int K2_AddActorWorldOffset_SweepHitResult_Offset;
    static readonly int K2_AddActorWorldOffset_bTeleport_Offset;
    
    public void AddActorWorldOffset(System.DoubleNumerics.Vector3 deltaLocation, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_AddActorWorldOffset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_AddActorWorldOffset_DeltaLocation_Offset), 0, null, deltaLocation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddActorWorldOffset_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddActorWorldOffset_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_AddActorWorldOffset_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_AddActorWorldOffset_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.Actor:K2_AddActorLocalTransform
    static readonly IntPtr K2_AddActorLocalTransform_NativeFunction;
    static readonly int K2_AddActorLocalTransform_ParamsSize;
    static readonly int K2_AddActorLocalTransform_NewTransform_Offset;
    static readonly int K2_AddActorLocalTransform_bSweep_Offset;
    static readonly int K2_AddActorLocalTransform_SweepHitResult_Offset;
    static readonly int K2_AddActorLocalTransform_bTeleport_Offset;
    
    public void AddActorLocalTransform(UnrealSharp.Transform newTransform, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_AddActorLocalTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, K2_AddActorLocalTransform_NewTransform_Offset), 0, null, newTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddActorLocalTransform_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddActorLocalTransform_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_AddActorLocalTransform_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_AddActorLocalTransform_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.Actor:K2_AddActorLocalRotation
    static readonly IntPtr K2_AddActorLocalRotation_NativeFunction;
    static readonly int K2_AddActorLocalRotation_ParamsSize;
    static readonly int K2_AddActorLocalRotation_DeltaRotation_Offset;
    static readonly int K2_AddActorLocalRotation_bSweep_Offset;
    static readonly int K2_AddActorLocalRotation_SweepHitResult_Offset;
    static readonly int K2_AddActorLocalRotation_bTeleport_Offset;
    
    public void AddActorLocalRotation(UnrealSharp.Rotator deltaRotation, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_AddActorLocalRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, K2_AddActorLocalRotation_DeltaRotation_Offset), 0, null, deltaRotation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddActorLocalRotation_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddActorLocalRotation_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_AddActorLocalRotation_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_AddActorLocalRotation_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.Actor:K2_AddActorLocalOffset
    static readonly IntPtr K2_AddActorLocalOffset_NativeFunction;
    static readonly int K2_AddActorLocalOffset_ParamsSize;
    static readonly int K2_AddActorLocalOffset_DeltaLocation_Offset;
    static readonly int K2_AddActorLocalOffset_bSweep_Offset;
    static readonly int K2_AddActorLocalOffset_SweepHitResult_Offset;
    static readonly int K2_AddActorLocalOffset_bTeleport_Offset;
    
    public void AddActorLocalOffset(System.DoubleNumerics.Vector3 deltaLocation, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_AddActorLocalOffset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_AddActorLocalOffset_DeltaLocation_Offset), 0, null, deltaLocation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddActorLocalOffset_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddActorLocalOffset_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_AddActorLocalOffset_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_AddActorLocalOffset_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.Actor:IsTemporarilyHiddenInEditor
    static readonly IntPtr IsTemporarilyHiddenInEditor_NativeFunction;
    static readonly int IsTemporarilyHiddenInEditor_ParamsSize;
    static readonly int IsTemporarilyHiddenInEditor_bIncludeParent_Offset;
    static readonly int IsTemporarilyHiddenInEditor_ReturnValue_Offset;
    
    public bool IsTemporarilyHiddenInEditor(bool bIncludeParent = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsTemporarilyHiddenInEditor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, IsTemporarilyHiddenInEditor_bIncludeParent_Offset), 0, null, bIncludeParent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsTemporarilyHiddenInEditor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsTemporarilyHiddenInEditor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:IsSelectable
    static readonly IntPtr IsSelectable_NativeFunction;
    static readonly int IsSelectable_ParamsSize;
    static readonly int IsSelectable_ReturnValue_Offset;
    
    public bool IsSelectable()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsSelectable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsSelectable_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsSelectable_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:IsOverlappingActor
    static readonly IntPtr IsOverlappingActor_NativeFunction;
    static readonly int IsOverlappingActor_ParamsSize;
    static readonly int IsOverlappingActor_Other_Offset;
    static readonly int IsOverlappingActor_ReturnValue_Offset;
    
    public bool IsOverlappingActor(UnrealSharp.Engine.Actor other)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsOverlappingActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, IsOverlappingActor_Other_Offset), 0, null, other);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsOverlappingActor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsOverlappingActor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:IsHiddenEdAtStartup
    static readonly IntPtr IsHiddenEdAtStartup_NativeFunction;
    static readonly int IsHiddenEdAtStartup_ParamsSize;
    static readonly int IsHiddenEdAtStartup_ReturnValue_Offset;
    
    public bool IsHiddenEdAtStartup()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsHiddenEdAtStartup_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsHiddenEdAtStartup_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsHiddenEdAtStartup_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:IsHiddenEd
    static readonly IntPtr IsHiddenEd_NativeFunction;
    static readonly int IsHiddenEd_ParamsSize;
    static readonly int IsHiddenEd_ReturnValue_Offset;
    
    public bool IsHiddenEd()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsHiddenEd_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsHiddenEd_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsHiddenEd_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:IsEditable
    static readonly IntPtr IsEditable_NativeFunction;
    static readonly int IsEditable_ParamsSize;
    static readonly int IsEditable_ReturnValue_Offset;
    
    public bool IsEditable()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsEditable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsEditable_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsEditable_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:IsChildActor
    static readonly IntPtr IsChildActor_NativeFunction;
    static readonly int IsChildActor_ParamsSize;
    static readonly int IsChildActor_ReturnValue_Offset;
    
    public bool IsChildActor()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsChildActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsChildActor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsChildActor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:IsActorTickEnabled
    static readonly IntPtr IsActorTickEnabled_NativeFunction;
    static readonly int IsActorTickEnabled_ParamsSize;
    static readonly int IsActorTickEnabled_ReturnValue_Offset;
    
    public bool IsActorTickEnabled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsActorTickEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsActorTickEnabled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsActorTickEnabled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:IsActorBeingDestroyed
    static readonly IntPtr IsActorBeingDestroyed_NativeFunction;
    static readonly int IsActorBeingDestroyed_ParamsSize;
    static readonly int IsActorBeingDestroyed_ReturnValue_Offset;
    
    public bool IsActorBeingDestroyed()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsActorBeingDestroyed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsActorBeingDestroyed_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsActorBeingDestroyed_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:HasAuthority
    static readonly IntPtr HasAuthority_NativeFunction;
    static readonly int HasAuthority_ParamsSize;
    static readonly int HasAuthority_ReturnValue_Offset;
    
    public bool HasAuthority()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasAuthority_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasAuthority_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasAuthority_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetVerticalDistanceTo
    static readonly IntPtr GetVerticalDistanceTo_NativeFunction;
    static readonly int GetVerticalDistanceTo_ParamsSize;
    static readonly int GetVerticalDistanceTo_OtherActor_Offset;
    static readonly int GetVerticalDistanceTo_ReturnValue_Offset;
    
    public float GetVerticalDistanceTo(UnrealSharp.Engine.Actor otherActor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVerticalDistanceTo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, GetVerticalDistanceTo_OtherActor_Offset), 0, null, otherActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVerticalDistanceTo_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetVerticalDistanceTo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetVelocity
    static readonly IntPtr GetVelocity_NativeFunction;
    static readonly int GetVelocity_ParamsSize;
    static readonly int GetVelocity_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetVelocity()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVelocity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVelocity_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetVelocity_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetTransform
    static readonly IntPtr GetTransform_NativeFunction;
    static readonly int GetTransform_ParamsSize;
    static readonly int GetTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetActorTransform()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetTickableWhenPaused
    static readonly IntPtr GetTickableWhenPaused_NativeFunction;
    static readonly int GetTickableWhenPaused_ParamsSize;
    static readonly int GetTickableWhenPaused_ReturnValue_Offset;
    
    public bool GetTickableWhenPaused()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTickableWhenPaused_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTickableWhenPaused_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetTickableWhenPaused_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetSquaredHorizontalDistanceTo
    static readonly IntPtr GetSquaredHorizontalDistanceTo_NativeFunction;
    static readonly int GetSquaredHorizontalDistanceTo_ParamsSize;
    static readonly int GetSquaredHorizontalDistanceTo_OtherActor_Offset;
    static readonly int GetSquaredHorizontalDistanceTo_ReturnValue_Offset;
    
    public float GetSquaredHorizontalDistanceTo(UnrealSharp.Engine.Actor otherActor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSquaredHorizontalDistanceTo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, GetSquaredHorizontalDistanceTo_OtherActor_Offset), 0, null, otherActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSquaredHorizontalDistanceTo_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetSquaredHorizontalDistanceTo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetSquaredDistanceTo
    static readonly IntPtr GetSquaredDistanceTo_NativeFunction;
    static readonly int GetSquaredDistanceTo_ParamsSize;
    static readonly int GetSquaredDistanceTo_OtherActor_Offset;
    static readonly int GetSquaredDistanceTo_ReturnValue_Offset;
    
    public float GetSquaredDistanceTo(UnrealSharp.Engine.Actor otherActor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSquaredDistanceTo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, GetSquaredDistanceTo_OtherActor_Offset), 0, null, otherActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSquaredDistanceTo_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetSquaredDistanceTo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetResimulationThreshold
    static readonly IntPtr GetResimulationThreshold_NativeFunction;
    static readonly int GetResimulationThreshold_ParamsSize;
    static readonly int GetResimulationThreshold_ReturnValue_Offset;
    
    public float GetResimulationThreshold()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetResimulationThreshold_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetResimulationThreshold_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetResimulationThreshold_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetRemoteRole
    static readonly IntPtr GetRemoteRole_NativeFunction;
    static readonly int GetRemoteRole_ParamsSize;
    static readonly int GetRemoteRole_ReturnValue_Offset;
    
    public UnrealSharp.Engine.ENetRole GetRemoteRole()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRemoteRole_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRemoteRole_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.ENetRole returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Engine.ENetRole>.FromNative(IntPtr.Add(ParamsBuffer, GetRemoteRole_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetRayTracingGroupId
    static readonly IntPtr GetRayTracingGroupId_NativeFunction;
    static readonly int GetRayTracingGroupId_ParamsSize;
    static readonly int GetRayTracingGroupId_ReturnValue_Offset;
    
    public int GetRayTracingGroupId()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRayTracingGroupId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRayTracingGroupId_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetRayTracingGroupId_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetPhysicsReplicationMode
    static readonly IntPtr GetPhysicsReplicationMode_NativeFunction;
    static readonly int GetPhysicsReplicationMode_ParamsSize;
    static readonly int GetPhysicsReplicationMode_ReturnValue_Offset;
    
    public UnrealSharp.Engine.EPhysicsReplicationMode GetPhysicsReplicationMode()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPhysicsReplicationMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPhysicsReplicationMode_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.EPhysicsReplicationMode returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Engine.EPhysicsReplicationMode>.FromNative(IntPtr.Add(ParamsBuffer, GetPhysicsReplicationMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetParentComponent
    static readonly IntPtr GetParentComponent_NativeFunction;
    static readonly int GetParentComponent_ParamsSize;
    static readonly int GetParentComponent_ReturnValue_Offset;
    
    public UnrealSharp.Engine.ChildActorComponent GetParentComponent()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetParentComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetParentComponent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.ChildActorComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.ChildActorComponent>.FromNative(IntPtr.Add(ParamsBuffer, GetParentComponent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetParentActor
    static readonly IntPtr GetParentActor_NativeFunction;
    static readonly int GetParentActor_ParamsSize;
    static readonly int GetParentActor_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Actor GetParentActor()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetParentActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetParentActor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Actor returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(ParamsBuffer, GetParentActor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetOwner
    static readonly IntPtr GetOwner_NativeFunction;
    static readonly int GetOwner_ParamsSize;
    static readonly int GetOwner_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Actor GetOwner()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOwner_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOwner_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Actor returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(ParamsBuffer, GetOwner_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetOverlappingComponents
    static readonly IntPtr GetOverlappingComponents_NativeFunction;
    static readonly int GetOverlappingComponents_ParamsSize;
    static readonly int GetOverlappingComponents_OverlappingComponents_Offset;
    static readonly int GetOverlappingComponents_OverlappingComponents_ElementSize;
    
    public void GetOverlappingComponents(out System.Collections.Generic.IList<UnrealSharp.Engine.PrimitiveComponent> overlappingComponents)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOverlappingComponents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOverlappingComponents_NativeFunction, ParamsBuffer);
            
            IntPtr OverlappingComponents_NativeBuffer = IntPtr.Add(ParamsBuffer, GetOverlappingComponents_OverlappingComponents_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent> OverlappingComponents_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent> (1, ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative, ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.FromNative, GetOverlappingComponents_OverlappingComponents_ElementSize);
            overlappingComponents = OverlappingComponents_Marshaler.FromNative(OverlappingComponents_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent>.DestructInstance(OverlappingComponents_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.Actor:GetOverlappingActors
    static readonly IntPtr GetOverlappingActors_NativeFunction;
    static readonly int GetOverlappingActors_ParamsSize;
    static readonly int GetOverlappingActors_OverlappingActors_Offset;
    static readonly int GetOverlappingActors_OverlappingActors_ElementSize;
    static readonly int GetOverlappingActors_ClassFilter_Offset;
    
    public void GetOverlappingActors(out System.Collections.Generic.IList<UnrealSharp.Engine.Actor> overlappingActors, SubclassOf<UnrealSharp.Engine.Actor> classFilter = default(SubclassOf<UnrealSharp.Engine.Actor>))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOverlappingActors_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, GetOverlappingActors_ClassFilter_Offset), 0, null, classFilter);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOverlappingActors_NativeFunction, ParamsBuffer);
            
            IntPtr OverlappingActors_NativeBuffer = IntPtr.Add(ParamsBuffer, GetOverlappingActors_OverlappingActors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> OverlappingActors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, GetOverlappingActors_OverlappingActors_ElementSize);
            overlappingActors = OverlappingActors_Marshaler.FromNative(OverlappingActors_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(OverlappingActors_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.Actor:GetLocalRole
    static readonly IntPtr GetLocalRole_NativeFunction;
    static readonly int GetLocalRole_ParamsSize;
    static readonly int GetLocalRole_ReturnValue_Offset;
    
    public UnrealSharp.Engine.ENetRole GetLocalRole()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalRole_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLocalRole_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.ENetRole returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Engine.ENetRole>.FromNative(IntPtr.Add(ParamsBuffer, GetLocalRole_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetLifeSpan
    static readonly IntPtr GetLifeSpan_NativeFunction;
    static readonly int GetLifeSpan_ParamsSize;
    static readonly int GetLifeSpan_ReturnValue_Offset;
    
    public float GetLifeSpan()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLifeSpan_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLifeSpan_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetLifeSpan_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetLevelTransform
    static readonly IntPtr GetLevelTransform_NativeFunction;
    static readonly int GetLevelTransform_ParamsSize;
    static readonly int GetLevelTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetLevelTransform()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLevelTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLevelTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetLevelTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetLevel
    static readonly IntPtr GetLevel_NativeFunction;
    static readonly int GetLevel_ParamsSize;
    static readonly int GetLevel_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Level GetLevel()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLevel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLevel_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Level returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Level>.FromNative(IntPtr.Add(ParamsBuffer, GetLevel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetInstigatorController
    static readonly IntPtr GetInstigatorController_NativeFunction;
    static readonly int GetInstigatorController_ParamsSize;
    static readonly int GetInstigatorController_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Controller GetInstigatorController()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInstigatorController_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInstigatorController_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Controller returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Controller>.FromNative(IntPtr.Add(ParamsBuffer, GetInstigatorController_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetInstigator
    static readonly IntPtr GetInstigator_NativeFunction;
    static readonly int GetInstigator_ParamsSize;
    static readonly int GetInstigator_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Pawn GetInstigator()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInstigator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInstigator_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Pawn returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(ParamsBuffer, GetInstigator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetHorizontalDotProductTo
    static readonly IntPtr GetHorizontalDotProductTo_NativeFunction;
    static readonly int GetHorizontalDotProductTo_ParamsSize;
    static readonly int GetHorizontalDotProductTo_OtherActor_Offset;
    static readonly int GetHorizontalDotProductTo_ReturnValue_Offset;
    
    public float GetHorizontalDotProductTo(UnrealSharp.Engine.Actor otherActor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHorizontalDotProductTo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, GetHorizontalDotProductTo_OtherActor_Offset), 0, null, otherActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetHorizontalDotProductTo_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetHorizontalDotProductTo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetHorizontalDistanceTo
    static readonly IntPtr GetHorizontalDistanceTo_NativeFunction;
    static readonly int GetHorizontalDistanceTo_ParamsSize;
    static readonly int GetHorizontalDistanceTo_OtherActor_Offset;
    static readonly int GetHorizontalDistanceTo_ReturnValue_Offset;
    
    public float GetHorizontalDistanceTo(UnrealSharp.Engine.Actor otherActor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHorizontalDistanceTo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, GetHorizontalDistanceTo_OtherActor_Offset), 0, null, otherActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetHorizontalDistanceTo_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetHorizontalDistanceTo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetGameTimeSinceCreation
    static readonly IntPtr GetGameTimeSinceCreation_NativeFunction;
    static readonly int GetGameTimeSinceCreation_ParamsSize;
    static readonly int GetGameTimeSinceCreation_ReturnValue_Offset;
    
    public float GetGameTimeSinceCreation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGameTimeSinceCreation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetGameTimeSinceCreation_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetGameTimeSinceCreation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetFolderPath
    static readonly IntPtr GetFolderPath_NativeFunction;
    static readonly int GetFolderPath_ParamsSize;
    static readonly int GetFolderPath_ReturnValue_Offset;
    
    public Name GetFolderPath()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFolderPath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFolderPath_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetFolderPath_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetDotProductTo
    static readonly IntPtr GetDotProductTo_NativeFunction;
    static readonly int GetDotProductTo_ParamsSize;
    static readonly int GetDotProductTo_OtherActor_Offset;
    static readonly int GetDotProductTo_ReturnValue_Offset;
    
    public float GetDotProductTo(UnrealSharp.Engine.Actor otherActor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDotProductTo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, GetDotProductTo_OtherActor_Offset), 0, null, otherActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDotProductTo_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetDotProductTo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetDistanceTo
    static readonly IntPtr GetDistanceTo_NativeFunction;
    static readonly int GetDistanceTo_ParamsSize;
    static readonly int GetDistanceTo_OtherActor_Offset;
    static readonly int GetDistanceTo_ReturnValue_Offset;
    
    public float GetDistanceTo(UnrealSharp.Engine.Actor otherActor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDistanceTo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, GetDistanceTo_OtherActor_Offset), 0, null, otherActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDistanceTo_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetDistanceTo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetDefaultActorLabel
    static readonly IntPtr GetDefaultActorLabel_NativeFunction;
    static readonly int GetDefaultActorLabel_ParamsSize;
    static readonly int GetDefaultActorLabel_ReturnValue_Offset;
    
    public string GetDefaultActorLabel()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDefaultActorLabel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDefaultActorLabel_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetDefaultActorLabel_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetComponentsByTag
    static readonly IntPtr GetComponentsByTag_NativeFunction;
    static readonly int GetComponentsByTag_ParamsSize;
    static readonly int GetComponentsByTag_ComponentClass_Offset;
    static readonly int GetComponentsByTag_Tag_Offset;
    static readonly int GetComponentsByTag_ReturnValue_Offset;
    static readonly int GetComponentsByTag_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.ActorComponent> GetComponentsByTag(SubclassOf<UnrealSharp.Engine.ActorComponent> componentClass, Name tag)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetComponentsByTag_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.ActorComponent>.ToNative(IntPtr.Add(ParamsBuffer, GetComponentsByTag_ComponentClass_Offset), 0, null, componentClass);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetComponentsByTag_Tag_Offset), 0, null, tag);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetComponentsByTag_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.Engine.ActorComponent> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetComponentsByTag_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.ActorComponent> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.ActorComponent> (1, ObjectMarshaller<UnrealSharp.Engine.ActorComponent>.ToNative, ObjectMarshaller<UnrealSharp.Engine.ActorComponent>.FromNative, GetComponentsByTag_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.ActorComponent>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetComponentsByInterface
    static readonly IntPtr GetComponentsByInterface_NativeFunction;
    static readonly int GetComponentsByInterface_ParamsSize;
    static readonly int GetComponentsByInterface_Interface_Offset;
    static readonly int GetComponentsByInterface_ReturnValue_Offset;
    static readonly int GetComponentsByInterface_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.ActorComponent> GetComponentsByInterface(SubclassOf<UnrealSharp.CoreUObject.IInterface> @interface)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetComponentsByInterface_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.IInterface>.ToNative(IntPtr.Add(ParamsBuffer, GetComponentsByInterface_Interface_Offset), 0, null, @interface);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetComponentsByInterface_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.Engine.ActorComponent> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetComponentsByInterface_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.ActorComponent> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.ActorComponent> (1, ObjectMarshaller<UnrealSharp.Engine.ActorComponent>.ToNative, ObjectMarshaller<UnrealSharp.Engine.ActorComponent>.FromNative, GetComponentsByInterface_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.ActorComponent>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetComponentByClass
    static readonly IntPtr GetComponentByClass_NativeFunction;
    static readonly int GetComponentByClass_ParamsSize;
    static readonly int GetComponentByClass_ComponentClass_Offset;
    static readonly int GetComponentByClass_ReturnValue_Offset;
    
    public UnrealSharp.Engine.ActorComponent GetComponentByClass(SubclassOf<UnrealSharp.Engine.ActorComponent> componentClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetComponentByClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.ActorComponent>.ToNative(IntPtr.Add(ParamsBuffer, GetComponentByClass_ComponentClass_Offset), 0, null, componentClass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetComponentByClass_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.ActorComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.ActorComponent>.FromNative(IntPtr.Add(ParamsBuffer, GetComponentByClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetAttachParentSocketName
    static readonly IntPtr GetAttachParentSocketName_NativeFunction;
    static readonly int GetAttachParentSocketName_ParamsSize;
    static readonly int GetAttachParentSocketName_ReturnValue_Offset;
    
    public Name GetAttachParentSocketName()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAttachParentSocketName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAttachParentSocketName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetAttachParentSocketName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetAttachParentActor
    static readonly IntPtr GetAttachParentActor_NativeFunction;
    static readonly int GetAttachParentActor_ParamsSize;
    static readonly int GetAttachParentActor_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Actor GetAttachParentActor()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAttachParentActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAttachParentActor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Actor returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(ParamsBuffer, GetAttachParentActor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetAttachedActors
    static readonly IntPtr GetAttachedActors_NativeFunction;
    static readonly int GetAttachedActors_ParamsSize;
    static readonly int GetAttachedActors_OutActors_Offset;
    static readonly int GetAttachedActors_OutActors_ElementSize;
    static readonly int GetAttachedActors_bResetArray_Offset;
    static readonly int GetAttachedActors_bRecursivelyIncludeAttachedActors_Offset;
    
    public void GetAttachedActors(out System.Collections.Generic.IList<UnrealSharp.Engine.Actor> outActors, bool bResetArray = true, bool bRecursivelyIncludeAttachedActors = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAttachedActors_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetAttachedActors_bResetArray_Offset), 0, null, bResetArray);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetAttachedActors_bRecursivelyIncludeAttachedActors_Offset), 0, null, bRecursivelyIncludeAttachedActors);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAttachedActors_NativeFunction, ParamsBuffer);
            
            IntPtr OutActors_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAttachedActors_OutActors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> OutActors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, GetAttachedActors_OutActors_ElementSize);
            outActors = OutActors_Marshaler.FromNative(OutActors_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(OutActors_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.Actor:GetAllChildActors
    static readonly IntPtr GetAllChildActors_NativeFunction;
    static readonly int GetAllChildActors_ParamsSize;
    static readonly int GetAllChildActors_ChildActors_Offset;
    static readonly int GetAllChildActors_ChildActors_ElementSize;
    static readonly int GetAllChildActors_bIncludeDescendants_Offset;
    
    public void GetAllChildActors(out System.Collections.Generic.IList<UnrealSharp.Engine.Actor> childActors, bool bIncludeDescendants = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAllChildActors_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetAllChildActors_bIncludeDescendants_Offset), 0, null, bIncludeDescendants);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAllChildActors_NativeFunction, ParamsBuffer);
            
            IntPtr ChildActors_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAllChildActors_ChildActors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ChildActors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, GetAllChildActors_ChildActors_ElementSize);
            childActors = ChildActors_Marshaler.FromNative(ChildActors_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(ChildActors_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.Actor:GetActorUpVector
    static readonly IntPtr GetActorUpVector_NativeFunction;
    static readonly int GetActorUpVector_ParamsSize;
    static readonly int GetActorUpVector_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetActorUpVector()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActorUpVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetActorUpVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetActorUpVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetActorTimeDilation
    static readonly IntPtr GetActorTimeDilation_NativeFunction;
    static readonly int GetActorTimeDilation_ParamsSize;
    static readonly int GetActorTimeDilation_ReturnValue_Offset;
    
    public float GetActorTimeDilation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActorTimeDilation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetActorTimeDilation_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetActorTimeDilation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetActorTickInterval
    static readonly IntPtr GetActorTickInterval_NativeFunction;
    static readonly int GetActorTickInterval_ParamsSize;
    static readonly int GetActorTickInterval_ReturnValue_Offset;
    
    public float GetActorTickInterval()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActorTickInterval_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetActorTickInterval_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetActorTickInterval_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetActorScale3D
    static readonly IntPtr GetActorScale3D_NativeFunction;
    static readonly int GetActorScale3D_ParamsSize;
    static readonly int GetActorScale3D_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetActorScale3D()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActorScale3D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetActorScale3D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetActorScale3D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetActorRightVector
    static readonly IntPtr GetActorRightVector_NativeFunction;
    static readonly int GetActorRightVector_ParamsSize;
    static readonly int GetActorRightVector_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetActorRightVector()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActorRightVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetActorRightVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetActorRightVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetActorRelativeScale3D
    static readonly IntPtr GetActorRelativeScale3D_NativeFunction;
    static readonly int GetActorRelativeScale3D_ParamsSize;
    static readonly int GetActorRelativeScale3D_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetActorRelativeScale3D()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActorRelativeScale3D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetActorRelativeScale3D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetActorRelativeScale3D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetActorLabel
    static readonly IntPtr GetActorLabel_NativeFunction;
    static readonly int GetActorLabel_ParamsSize;
    static readonly int GetActorLabel_bCreateIfNone_Offset;
    static readonly int GetActorLabel_ReturnValue_Offset;
    
    public string GetActorLabel(bool bCreateIfNone = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActorLabel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetActorLabel_bCreateIfNone_Offset), 0, null, bCreateIfNone);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetActorLabel_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetActorLabel_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetActorForwardVector
    static readonly IntPtr GetActorForwardVector_NativeFunction;
    static readonly int GetActorForwardVector_ParamsSize;
    static readonly int GetActorForwardVector_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetActorForwardVector()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActorForwardVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetActorForwardVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetActorForwardVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetActorEyesViewPoint
    static readonly IntPtr GetActorEyesViewPoint_NativeFunction;
    static readonly int GetActorEyesViewPoint_ParamsSize;
    static readonly int GetActorEyesViewPoint_OutLocation_Offset;
    static readonly int GetActorEyesViewPoint_OutRotation_Offset;
    
    public void GetActorEyesViewPoint(out System.DoubleNumerics.Vector3 outLocation, out UnrealSharp.Rotator outRotation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActorEyesViewPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetActorEyesViewPoint_NativeFunction, ParamsBuffer);
            
            outLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetActorEyesViewPoint_OutLocation_Offset), 0, null);
            outRotation = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetActorEyesViewPoint_OutRotation_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.Actor:GetActorEnableCollision
    static readonly IntPtr GetActorEnableCollision_NativeFunction;
    static readonly int GetActorEnableCollision_ParamsSize;
    static readonly int GetActorEnableCollision_ReturnValue_Offset;
    
    public bool GetActorEnableCollision()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActorEnableCollision_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetActorEnableCollision_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetActorEnableCollision_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:GetActorBounds
    static readonly IntPtr GetActorBounds_NativeFunction;
    static readonly int GetActorBounds_ParamsSize;
    static readonly int GetActorBounds_bOnlyCollidingComponents_Offset;
    static readonly int GetActorBounds_Origin_Offset;
    static readonly int GetActorBounds_BoxExtent_Offset;
    static readonly int GetActorBounds_bIncludeFromChildActors_Offset;
    
    public void GetActorBounds(bool bOnlyCollidingComponents, out System.DoubleNumerics.Vector3 origin, out System.DoubleNumerics.Vector3 boxExtent, bool bIncludeFromChildActors = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActorBounds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetActorBounds_bOnlyCollidingComponents_Offset), 0, null, bOnlyCollidingComponents);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetActorBounds_bIncludeFromChildActors_Offset), 0, null, bIncludeFromChildActors);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetActorBounds_NativeFunction, ParamsBuffer);
            
            origin = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetActorBounds_Origin_Offset), 0, null);
            boxExtent = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetActorBounds_BoxExtent_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.Actor:ForceNetUpdate
    static readonly IntPtr ForceNetUpdate_NativeFunction;
    
    public void ForceNetUpdate()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ForceNetUpdate_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.Actor:FlushNetDormancy
    static readonly IntPtr FlushNetDormancy_NativeFunction;
    
    public void FlushNetDormancy()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FlushNetDormancy_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.Actor:FindComponentByTag
    static readonly IntPtr FindComponentByTag_NativeFunction;
    static readonly int FindComponentByTag_ParamsSize;
    static readonly int FindComponentByTag_ComponentClass_Offset;
    static readonly int FindComponentByTag_Tag_Offset;
    static readonly int FindComponentByTag_ReturnValue_Offset;
    
    public UnrealSharp.Engine.ActorComponent FindComponentByTag(SubclassOf<UnrealSharp.Engine.ActorComponent> componentClass, Name tag)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindComponentByTag_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.ActorComponent>.ToNative(IntPtr.Add(ParamsBuffer, FindComponentByTag_ComponentClass_Offset), 0, null, componentClass);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, FindComponentByTag_Tag_Offset), 0, null, tag);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindComponentByTag_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.ActorComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.ActorComponent>.FromNative(IntPtr.Add(ParamsBuffer, FindComponentByTag_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:EnableInput
    static readonly IntPtr EnableInput_NativeFunction;
    static readonly int EnableInput_ParamsSize;
    static readonly int EnableInput_PlayerController_Offset;
    
    public void EnableInput(UnrealSharp.Engine.PlayerController playerController)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EnableInput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, EnableInput_PlayerController_Offset), 0, null, playerController);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, EnableInput_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:DisableInput
    static readonly IntPtr DisableInput_NativeFunction;
    static readonly int DisableInput_ParamsSize;
    static readonly int DisableInput_PlayerController_Offset;
    
    public void DisableInput(UnrealSharp.Engine.PlayerController playerController)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DisableInput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, DisableInput_PlayerController_Offset), 0, null, playerController);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DisableInput_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:CreateInputComponent
    static readonly IntPtr CreateInputComponent_NativeFunction;
    static readonly int CreateInputComponent_ParamsSize;
    static readonly int CreateInputComponent_InputComponentToCreate_Offset;
    
    public void CreateInputComponent(SubclassOf<UnrealSharp.Engine.InputComponent> inputComponentToCreate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateInputComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.InputComponent>.ToNative(IntPtr.Add(ParamsBuffer, CreateInputComponent_InputComponentToCreate_Offset), 0, null, inputComponentToCreate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreateInputComponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:CanTriggerResimulation
    static readonly IntPtr CanTriggerResimulation_NativeFunction;
    static readonly int CanTriggerResimulation_ParamsSize;
    static readonly int CanTriggerResimulation_ReturnValue_Offset;
    
    public bool CanTriggerResimulation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CanTriggerResimulation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CanTriggerResimulation_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CanTriggerResimulation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:AddTickPrerequisiteComponent
    static readonly IntPtr AddTickPrerequisiteComponent_NativeFunction;
    static readonly int AddTickPrerequisiteComponent_ParamsSize;
    static readonly int AddTickPrerequisiteComponent_PrerequisiteComponent_Offset;
    
    public void AddTickPrerequisiteComponent(UnrealSharp.Engine.ActorComponent prerequisiteComponent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddTickPrerequisiteComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.ActorComponent>.ToNative(IntPtr.Add(ParamsBuffer, AddTickPrerequisiteComponent_PrerequisiteComponent_Offset), 0, null, prerequisiteComponent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddTickPrerequisiteComponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:AddTickPrerequisiteActor
    static readonly IntPtr AddTickPrerequisiteActor_NativeFunction;
    static readonly int AddTickPrerequisiteActor_ParamsSize;
    static readonly int AddTickPrerequisiteActor_PrerequisiteActor_Offset;
    
    public void AddTickPrerequisiteActor(UnrealSharp.Engine.Actor prerequisiteActor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddTickPrerequisiteActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, AddTickPrerequisiteActor_PrerequisiteActor_Offset), 0, null, prerequisiteActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddTickPrerequisiteActor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Actor:ActorHasTag
    static readonly IntPtr ActorHasTag_NativeFunction;
    static readonly int ActorHasTag_ParamsSize;
    static readonly int ActorHasTag_Tag_Offset;
    static readonly int ActorHasTag_ReturnValue_Offset;
    
    public bool ActorHasTag(Name tag)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ActorHasTag_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ActorHasTag_Tag_Offset), 0, null, tag);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ActorHasTag_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ActorHasTag_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Actor:UserConstructionScript
    IntPtr UserConstructionScript_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void UserConstructionScript()
    {
        unsafe
        {
            if (UserConstructionScript_NativeFunction == IntPtr.Zero)
            {
                UserConstructionScript_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "UserConstructionScript");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UserConstructionScript_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void UserConstructionScript_Implementation()
    {
    }
    void Invoke_UserConstructionScript(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UserConstructionScript_Implementation();
        }
    }
    
    // Function /Script/Engine.Actor:ReceiveTick
    IntPtr ReceiveTick_NativeFunction;
    static readonly int ReceiveTick_ParamsSize;
    static readonly int ReceiveTick_DeltaSeconds_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveTick(float deltaSeconds)
    {
        unsafe
        {
            if (ReceiveTick_NativeFunction == IntPtr.Zero)
            {
                ReceiveTick_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveTick");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveTick_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveTick_DeltaSeconds_Offset), 0, null, deltaSeconds);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveTick_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveTick_Implementation(float deltaSeconds)
    {
    }
    void Invoke_ReceiveTick(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            float deltaSeconds = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, ReceiveTick_DeltaSeconds_Offset), 0, null);
            ReceiveTick_Implementation(deltaSeconds);
        }
    }
    
    // Function /Script/Engine.Actor:ReceiveRadialDamage
    IntPtr ReceiveRadialDamage_NativeFunction;
    static readonly int ReceiveRadialDamage_ParamsSize;
    static readonly int ReceiveRadialDamage_DamageReceived_Offset;
    static readonly int ReceiveRadialDamage_DamageType_Offset;
    static readonly int ReceiveRadialDamage_Origin_Offset;
    static readonly int ReceiveRadialDamage_HitInfo_Offset;
    static readonly int ReceiveRadialDamage_InstigatedBy_Offset;
    static readonly int ReceiveRadialDamage_DamageCauser_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveRadialDamage(float damageReceived, UnrealSharp.Engine.DamageType damageType, System.DoubleNumerics.Vector3 origin, UnrealSharp.Engine.HitResult hitInfo, UnrealSharp.Engine.Controller instigatedBy, UnrealSharp.Engine.Actor damageCauser)
    {
        unsafe
        {
            if (ReceiveRadialDamage_NativeFunction == IntPtr.Zero)
            {
                ReceiveRadialDamage_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveRadialDamage");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveRadialDamage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveRadialDamage_DamageReceived_Offset), 0, null, damageReceived);
            ObjectMarshaller<UnrealSharp.Engine.DamageType>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveRadialDamage_DamageType_Offset), 0, null, damageType);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveRadialDamage_Origin_Offset), 0, null, origin);
            UnrealSharp.Engine.HitResultMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ReceiveRadialDamage_HitInfo_Offset), 0, null, hitInfo);
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveRadialDamage_InstigatedBy_Offset), 0, null, instigatedBy);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveRadialDamage_DamageCauser_Offset), 0, null, damageCauser);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveRadialDamage_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveRadialDamage_Implementation(float damageReceived, UnrealSharp.Engine.DamageType damageType, System.DoubleNumerics.Vector3 origin, UnrealSharp.Engine.HitResult hitInfo, UnrealSharp.Engine.Controller instigatedBy, UnrealSharp.Engine.Actor damageCauser)
    {
    }
    void Invoke_ReceiveRadialDamage(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            float damageReceived = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, ReceiveRadialDamage_DamageReceived_Offset), 0, null);
            UnrealSharp.Engine.DamageType damageType = ObjectMarshaller<UnrealSharp.Engine.DamageType>.FromNative(IntPtr.Add(buffer, ReceiveRadialDamage_DamageType_Offset), 0, null);
            System.DoubleNumerics.Vector3 origin = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(buffer, ReceiveRadialDamage_Origin_Offset), 0, null);
            UnrealSharp.Engine.HitResult hitInfo = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(buffer, ReceiveRadialDamage_HitInfo_Offset), 0, null);
            UnrealSharp.Engine.Controller instigatedBy = ObjectMarshaller<UnrealSharp.Engine.Controller>.FromNative(IntPtr.Add(buffer, ReceiveRadialDamage_InstigatedBy_Offset), 0, null);
            UnrealSharp.Engine.Actor damageCauser = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, ReceiveRadialDamage_DamageCauser_Offset), 0, null);
            ReceiveRadialDamage_Implementation(damageReceived, damageType, origin, hitInfo, instigatedBy, damageCauser);
        }
    }
    
    // Function /Script/Engine.Actor:ReceivePointDamage
    IntPtr ReceivePointDamage_NativeFunction;
    static readonly int ReceivePointDamage_ParamsSize;
    static readonly int ReceivePointDamage_Damage_Offset;
    static readonly int ReceivePointDamage_DamageType_Offset;
    static readonly int ReceivePointDamage_HitLocation_Offset;
    static readonly int ReceivePointDamage_HitNormal_Offset;
    static readonly int ReceivePointDamage_HitComponent_Offset;
    static readonly int ReceivePointDamage_BoneName_Offset;
    static readonly int ReceivePointDamage_ShotFromDirection_Offset;
    static readonly int ReceivePointDamage_InstigatedBy_Offset;
    static readonly int ReceivePointDamage_DamageCauser_Offset;
    static readonly int ReceivePointDamage_HitInfo_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceivePointDamage(float damage, UnrealSharp.Engine.DamageType damageType, System.DoubleNumerics.Vector3 hitLocation, System.DoubleNumerics.Vector3 hitNormal, UnrealSharp.Engine.PrimitiveComponent hitComponent, Name boneName, System.DoubleNumerics.Vector3 shotFromDirection, UnrealSharp.Engine.Controller instigatedBy, UnrealSharp.Engine.Actor damageCauser, UnrealSharp.Engine.HitResult hitInfo)
    {
        unsafe
        {
            if (ReceivePointDamage_NativeFunction == IntPtr.Zero)
            {
                ReceivePointDamage_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceivePointDamage");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceivePointDamage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ReceivePointDamage_Damage_Offset), 0, null, damage);
            ObjectMarshaller<UnrealSharp.Engine.DamageType>.ToNative(IntPtr.Add(ParamsBuffer, ReceivePointDamage_DamageType_Offset), 0, null, damageType);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ReceivePointDamage_HitLocation_Offset), 0, null, hitLocation);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ReceivePointDamage_HitNormal_Offset), 0, null, hitNormal);
            ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative(IntPtr.Add(ParamsBuffer, ReceivePointDamage_HitComponent_Offset), 0, null, hitComponent);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReceivePointDamage_BoneName_Offset), 0, null, boneName);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ReceivePointDamage_ShotFromDirection_Offset), 0, null, shotFromDirection);
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, ReceivePointDamage_InstigatedBy_Offset), 0, null, instigatedBy);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ReceivePointDamage_DamageCauser_Offset), 0, null, damageCauser);
            UnrealSharp.Engine.HitResultMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ReceivePointDamage_HitInfo_Offset), 0, null, hitInfo);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceivePointDamage_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceivePointDamage_Implementation(float damage, UnrealSharp.Engine.DamageType damageType, System.DoubleNumerics.Vector3 hitLocation, System.DoubleNumerics.Vector3 hitNormal, UnrealSharp.Engine.PrimitiveComponent hitComponent, Name boneName, System.DoubleNumerics.Vector3 shotFromDirection, UnrealSharp.Engine.Controller instigatedBy, UnrealSharp.Engine.Actor damageCauser, UnrealSharp.Engine.HitResult hitInfo)
    {
    }
    void Invoke_ReceivePointDamage(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            float damage = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, ReceivePointDamage_Damage_Offset), 0, null);
            UnrealSharp.Engine.DamageType damageType = ObjectMarshaller<UnrealSharp.Engine.DamageType>.FromNative(IntPtr.Add(buffer, ReceivePointDamage_DamageType_Offset), 0, null);
            System.DoubleNumerics.Vector3 hitLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(buffer, ReceivePointDamage_HitLocation_Offset), 0, null);
            System.DoubleNumerics.Vector3 hitNormal = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(buffer, ReceivePointDamage_HitNormal_Offset), 0, null);
            UnrealSharp.Engine.PrimitiveComponent hitComponent = ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.FromNative(IntPtr.Add(buffer, ReceivePointDamage_HitComponent_Offset), 0, null);
            Name boneName = BlittableMarshaller<Name>.FromNative(IntPtr.Add(buffer, ReceivePointDamage_BoneName_Offset), 0, null);
            System.DoubleNumerics.Vector3 shotFromDirection = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(buffer, ReceivePointDamage_ShotFromDirection_Offset), 0, null);
            UnrealSharp.Engine.Controller instigatedBy = ObjectMarshaller<UnrealSharp.Engine.Controller>.FromNative(IntPtr.Add(buffer, ReceivePointDamage_InstigatedBy_Offset), 0, null);
            UnrealSharp.Engine.Actor damageCauser = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, ReceivePointDamage_DamageCauser_Offset), 0, null);
            UnrealSharp.Engine.HitResult hitInfo = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(buffer, ReceivePointDamage_HitInfo_Offset), 0, null);
            ReceivePointDamage_Implementation(damage, damageType, hitLocation, hitNormal, hitComponent, boneName, shotFromDirection, instigatedBy, damageCauser, hitInfo);
        }
    }
    
    // Function /Script/Engine.Actor:ReceiveHit
    IntPtr ReceiveHit_NativeFunction;
    static readonly int ReceiveHit_ParamsSize;
    static readonly int ReceiveHit_MyComp_Offset;
    static readonly int ReceiveHit_Other_Offset;
    static readonly int ReceiveHit_OtherComp_Offset;
    static readonly int ReceiveHit_bSelfMoved_Offset;
    static readonly int ReceiveHit_HitLocation_Offset;
    static readonly int ReceiveHit_HitNormal_Offset;
    static readonly int ReceiveHit_NormalImpulse_Offset;
    static readonly int ReceiveHit_Hit_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveHit(UnrealSharp.Engine.PrimitiveComponent myComp, UnrealSharp.Engine.Actor other, UnrealSharp.Engine.PrimitiveComponent otherComp, bool bSelfMoved, System.DoubleNumerics.Vector3 hitLocation, System.DoubleNumerics.Vector3 hitNormal, System.DoubleNumerics.Vector3 normalImpulse, UnrealSharp.Engine.HitResult hit)
    {
        unsafe
        {
            if (ReceiveHit_NativeFunction == IntPtr.Zero)
            {
                ReceiveHit_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveHit");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveHit_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveHit_MyComp_Offset), 0, null, myComp);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveHit_Other_Offset), 0, null, other);
            ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveHit_OtherComp_Offset), 0, null, otherComp);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ReceiveHit_bSelfMoved_Offset), 0, null, bSelfMoved);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveHit_HitLocation_Offset), 0, null, hitLocation);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveHit_HitNormal_Offset), 0, null, hitNormal);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveHit_NormalImpulse_Offset), 0, null, normalImpulse);
            UnrealSharp.Engine.HitResultMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ReceiveHit_Hit_Offset), 0, null, hit);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveHit_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveHit_Implementation(UnrealSharp.Engine.PrimitiveComponent myComp, UnrealSharp.Engine.Actor other, UnrealSharp.Engine.PrimitiveComponent otherComp, bool bSelfMoved, System.DoubleNumerics.Vector3 hitLocation, System.DoubleNumerics.Vector3 hitNormal, System.DoubleNumerics.Vector3 normalImpulse, UnrealSharp.Engine.HitResult hit)
    {
    }
    void Invoke_ReceiveHit(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.PrimitiveComponent myComp = ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.FromNative(IntPtr.Add(buffer, ReceiveHit_MyComp_Offset), 0, null);
            UnrealSharp.Engine.Actor other = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, ReceiveHit_Other_Offset), 0, null);
            UnrealSharp.Engine.PrimitiveComponent otherComp = ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.FromNative(IntPtr.Add(buffer, ReceiveHit_OtherComp_Offset), 0, null);
            bool bSelfMoved = BoolMarshaller.FromNative(IntPtr.Add(buffer, ReceiveHit_bSelfMoved_Offset), 0, null);
            System.DoubleNumerics.Vector3 hitLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(buffer, ReceiveHit_HitLocation_Offset), 0, null);
            System.DoubleNumerics.Vector3 hitNormal = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(buffer, ReceiveHit_HitNormal_Offset), 0, null);
            System.DoubleNumerics.Vector3 normalImpulse = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(buffer, ReceiveHit_NormalImpulse_Offset), 0, null);
            UnrealSharp.Engine.HitResult hit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(buffer, ReceiveHit_Hit_Offset), 0, null);
            ReceiveHit_Implementation(myComp, other, otherComp, bSelfMoved, hitLocation, hitNormal, normalImpulse, hit);
        }
    }
    
    // Function /Script/Engine.Actor:ReceiveEndPlay
    IntPtr ReceiveEndPlay_NativeFunction;
    static readonly int ReceiveEndPlay_ParamsSize;
    static readonly int ReceiveEndPlay_EndPlayReason_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void ReceiveEndPlay(UnrealSharp.Engine.EEndPlayReason endPlayReason)
    {
        unsafe
        {
            if (ReceiveEndPlay_NativeFunction == IntPtr.Zero)
            {
                ReceiveEndPlay_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveEndPlay");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveEndPlay_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EEndPlayReason>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveEndPlay_EndPlayReason_Offset), 0, null, endPlayReason);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveEndPlay_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveEndPlay_Implementation(UnrealSharp.Engine.EEndPlayReason endPlayReason)
    {
    }
    void Invoke_ReceiveEndPlay(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.EEndPlayReason endPlayReason = BlittableMarshaller<UnrealSharp.Engine.EEndPlayReason>.FromNative(IntPtr.Add(buffer, ReceiveEndPlay_EndPlayReason_Offset), 0, null);
            ReceiveEndPlay_Implementation(endPlayReason);
        }
    }
    
    // Function /Script/Engine.Actor:ReceiveDestroyed
    IntPtr ReceiveDestroyed_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveDestroyed()
    {
        unsafe
        {
            if (ReceiveDestroyed_NativeFunction == IntPtr.Zero)
            {
                ReceiveDestroyed_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveDestroyed");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveDestroyed_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveDestroyed_Implementation()
    {
    }
    void Invoke_ReceiveDestroyed(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            ReceiveDestroyed_Implementation();
        }
    }
    
    // Function /Script/Engine.Actor:ReceiveBeginPlay
    IntPtr ReceiveBeginPlay_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void ReceiveBeginPlay()
    {
        unsafe
        {
            if (ReceiveBeginPlay_NativeFunction == IntPtr.Zero)
            {
                ReceiveBeginPlay_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveBeginPlay");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveBeginPlay_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveBeginPlay_Implementation()
    {
    }
    void Invoke_ReceiveBeginPlay(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            ReceiveBeginPlay_Implementation();
        }
    }
    
    // Function /Script/Engine.Actor:ReceiveAsyncPhysicsTick
    IntPtr ReceiveAsyncPhysicsTick_NativeFunction;
    static readonly int ReceiveAsyncPhysicsTick_ParamsSize;
    static readonly int ReceiveAsyncPhysicsTick_DeltaSeconds_Offset;
    static readonly int ReceiveAsyncPhysicsTick_SimSeconds_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveAsyncPhysicsTick(float deltaSeconds, float simSeconds)
    {
        unsafe
        {
            if (ReceiveAsyncPhysicsTick_NativeFunction == IntPtr.Zero)
            {
                ReceiveAsyncPhysicsTick_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveAsyncPhysicsTick");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveAsyncPhysicsTick_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveAsyncPhysicsTick_DeltaSeconds_Offset), 0, null, deltaSeconds);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveAsyncPhysicsTick_SimSeconds_Offset), 0, null, simSeconds);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveAsyncPhysicsTick_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveAsyncPhysicsTick_Implementation(float deltaSeconds, float simSeconds)
    {
    }
    void Invoke_ReceiveAsyncPhysicsTick(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            float deltaSeconds = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, ReceiveAsyncPhysicsTick_DeltaSeconds_Offset), 0, null);
            float simSeconds = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, ReceiveAsyncPhysicsTick_SimSeconds_Offset), 0, null);
            ReceiveAsyncPhysicsTick_Implementation(deltaSeconds, simSeconds);
        }
    }
    
    // Function /Script/Engine.Actor:ReceiveAnyDamage
    IntPtr ReceiveAnyDamage_NativeFunction;
    static readonly int ReceiveAnyDamage_ParamsSize;
    static readonly int ReceiveAnyDamage_Damage_Offset;
    static readonly int ReceiveAnyDamage_DamageType_Offset;
    static readonly int ReceiveAnyDamage_InstigatedBy_Offset;
    static readonly int ReceiveAnyDamage_DamageCauser_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveAnyDamage(float damage, UnrealSharp.Engine.DamageType damageType, UnrealSharp.Engine.Controller instigatedBy, UnrealSharp.Engine.Actor damageCauser)
    {
        unsafe
        {
            if (ReceiveAnyDamage_NativeFunction == IntPtr.Zero)
            {
                ReceiveAnyDamage_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveAnyDamage");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveAnyDamage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveAnyDamage_Damage_Offset), 0, null, damage);
            ObjectMarshaller<UnrealSharp.Engine.DamageType>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveAnyDamage_DamageType_Offset), 0, null, damageType);
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveAnyDamage_InstigatedBy_Offset), 0, null, instigatedBy);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveAnyDamage_DamageCauser_Offset), 0, null, damageCauser);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveAnyDamage_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveAnyDamage_Implementation(float damage, UnrealSharp.Engine.DamageType damageType, UnrealSharp.Engine.Controller instigatedBy, UnrealSharp.Engine.Actor damageCauser)
    {
    }
    void Invoke_ReceiveAnyDamage(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            float damage = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, ReceiveAnyDamage_Damage_Offset), 0, null);
            UnrealSharp.Engine.DamageType damageType = ObjectMarshaller<UnrealSharp.Engine.DamageType>.FromNative(IntPtr.Add(buffer, ReceiveAnyDamage_DamageType_Offset), 0, null);
            UnrealSharp.Engine.Controller instigatedBy = ObjectMarshaller<UnrealSharp.Engine.Controller>.FromNative(IntPtr.Add(buffer, ReceiveAnyDamage_InstigatedBy_Offset), 0, null);
            UnrealSharp.Engine.Actor damageCauser = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, ReceiveAnyDamage_DamageCauser_Offset), 0, null);
            ReceiveAnyDamage_Implementation(damage, damageType, instigatedBy, damageCauser);
        }
    }
    
    // Function /Script/Engine.Actor:ReceiveActorOnReleased
    IntPtr ReceiveActorOnReleased_NativeFunction;
    static readonly int ReceiveActorOnReleased_ParamsSize;
    static readonly int ReceiveActorOnReleased_ButtonReleased_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveActorOnReleased(UnrealSharp.InputCore.Key buttonReleased)
    {
        unsafe
        {
            if (ReceiveActorOnReleased_NativeFunction == IntPtr.Zero)
            {
                ReceiveActorOnReleased_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveActorOnReleased");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveActorOnReleased_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.InputCore.KeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ReceiveActorOnReleased_ButtonReleased_Offset), 0, null, buttonReleased);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveActorOnReleased_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveActorOnReleased_Implementation(UnrealSharp.InputCore.Key buttonReleased)
    {
    }
    void Invoke_ReceiveActorOnReleased(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.InputCore.Key buttonReleased = UnrealSharp.InputCore.KeyMarshaler.FromNative(IntPtr.Add(buffer, ReceiveActorOnReleased_ButtonReleased_Offset), 0, null);
            ReceiveActorOnReleased_Implementation(buttonReleased);
        }
    }
    
    // Function /Script/Engine.Actor:ReceiveActorOnInputTouchLeave
    IntPtr ReceiveActorOnInputTouchLeave_NativeFunction;
    static readonly int ReceiveActorOnInputTouchLeave_ParamsSize;
    static readonly int ReceiveActorOnInputTouchLeave_FingerIndex_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveActorOnInputTouchLeave(UnrealSharp.InputCore.ETouchIndex fingerIndex)
    {
        unsafe
        {
            if (ReceiveActorOnInputTouchLeave_NativeFunction == IntPtr.Zero)
            {
                ReceiveActorOnInputTouchLeave_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveActorOnInputTouchLeave");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveActorOnInputTouchLeave_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.InputCore.ETouchIndex>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveActorOnInputTouchLeave_FingerIndex_Offset), 0, null, fingerIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveActorOnInputTouchLeave_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveActorOnInputTouchLeave_Implementation(UnrealSharp.InputCore.ETouchIndex fingerIndex)
    {
    }
    void Invoke_ReceiveActorOnInputTouchLeave(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.InputCore.ETouchIndex fingerIndex = BlittableMarshaller<UnrealSharp.InputCore.ETouchIndex>.FromNative(IntPtr.Add(buffer, ReceiveActorOnInputTouchLeave_FingerIndex_Offset), 0, null);
            ReceiveActorOnInputTouchLeave_Implementation(fingerIndex);
        }
    }
    
    // Function /Script/Engine.Actor:ReceiveActorOnInputTouchEnter
    IntPtr ReceiveActorOnInputTouchEnter_NativeFunction;
    static readonly int ReceiveActorOnInputTouchEnter_ParamsSize;
    static readonly int ReceiveActorOnInputTouchEnter_FingerIndex_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveActorOnInputTouchEnter(UnrealSharp.InputCore.ETouchIndex fingerIndex)
    {
        unsafe
        {
            if (ReceiveActorOnInputTouchEnter_NativeFunction == IntPtr.Zero)
            {
                ReceiveActorOnInputTouchEnter_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveActorOnInputTouchEnter");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveActorOnInputTouchEnter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.InputCore.ETouchIndex>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveActorOnInputTouchEnter_FingerIndex_Offset), 0, null, fingerIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveActorOnInputTouchEnter_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveActorOnInputTouchEnter_Implementation(UnrealSharp.InputCore.ETouchIndex fingerIndex)
    {
    }
    void Invoke_ReceiveActorOnInputTouchEnter(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.InputCore.ETouchIndex fingerIndex = BlittableMarshaller<UnrealSharp.InputCore.ETouchIndex>.FromNative(IntPtr.Add(buffer, ReceiveActorOnInputTouchEnter_FingerIndex_Offset), 0, null);
            ReceiveActorOnInputTouchEnter_Implementation(fingerIndex);
        }
    }
    
    // Function /Script/Engine.Actor:ReceiveActorOnInputTouchEnd
    IntPtr ReceiveActorOnInputTouchEnd_NativeFunction;
    static readonly int ReceiveActorOnInputTouchEnd_ParamsSize;
    static readonly int ReceiveActorOnInputTouchEnd_FingerIndex_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveActorOnInputTouchEnd(UnrealSharp.InputCore.ETouchIndex fingerIndex)
    {
        unsafe
        {
            if (ReceiveActorOnInputTouchEnd_NativeFunction == IntPtr.Zero)
            {
                ReceiveActorOnInputTouchEnd_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveActorOnInputTouchEnd");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveActorOnInputTouchEnd_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.InputCore.ETouchIndex>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveActorOnInputTouchEnd_FingerIndex_Offset), 0, null, fingerIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveActorOnInputTouchEnd_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveActorOnInputTouchEnd_Implementation(UnrealSharp.InputCore.ETouchIndex fingerIndex)
    {
    }
    void Invoke_ReceiveActorOnInputTouchEnd(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.InputCore.ETouchIndex fingerIndex = BlittableMarshaller<UnrealSharp.InputCore.ETouchIndex>.FromNative(IntPtr.Add(buffer, ReceiveActorOnInputTouchEnd_FingerIndex_Offset), 0, null);
            ReceiveActorOnInputTouchEnd_Implementation(fingerIndex);
        }
    }
    
    // Function /Script/Engine.Actor:ReceiveActorOnInputTouchBegin
    IntPtr ReceiveActorOnInputTouchBegin_NativeFunction;
    static readonly int ReceiveActorOnInputTouchBegin_ParamsSize;
    static readonly int ReceiveActorOnInputTouchBegin_FingerIndex_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveActorOnInputTouchBegin(UnrealSharp.InputCore.ETouchIndex fingerIndex)
    {
        unsafe
        {
            if (ReceiveActorOnInputTouchBegin_NativeFunction == IntPtr.Zero)
            {
                ReceiveActorOnInputTouchBegin_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveActorOnInputTouchBegin");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveActorOnInputTouchBegin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.InputCore.ETouchIndex>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveActorOnInputTouchBegin_FingerIndex_Offset), 0, null, fingerIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveActorOnInputTouchBegin_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveActorOnInputTouchBegin_Implementation(UnrealSharp.InputCore.ETouchIndex fingerIndex)
    {
    }
    void Invoke_ReceiveActorOnInputTouchBegin(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.InputCore.ETouchIndex fingerIndex = BlittableMarshaller<UnrealSharp.InputCore.ETouchIndex>.FromNative(IntPtr.Add(buffer, ReceiveActorOnInputTouchBegin_FingerIndex_Offset), 0, null);
            ReceiveActorOnInputTouchBegin_Implementation(fingerIndex);
        }
    }
    
    // Function /Script/Engine.Actor:ReceiveActorOnClicked
    IntPtr ReceiveActorOnClicked_NativeFunction;
    static readonly int ReceiveActorOnClicked_ParamsSize;
    static readonly int ReceiveActorOnClicked_ButtonPressed_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveActorOnClicked(UnrealSharp.InputCore.Key buttonPressed)
    {
        unsafe
        {
            if (ReceiveActorOnClicked_NativeFunction == IntPtr.Zero)
            {
                ReceiveActorOnClicked_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveActorOnClicked");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveActorOnClicked_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.InputCore.KeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ReceiveActorOnClicked_ButtonPressed_Offset), 0, null, buttonPressed);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveActorOnClicked_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveActorOnClicked_Implementation(UnrealSharp.InputCore.Key buttonPressed)
    {
    }
    void Invoke_ReceiveActorOnClicked(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.InputCore.Key buttonPressed = UnrealSharp.InputCore.KeyMarshaler.FromNative(IntPtr.Add(buffer, ReceiveActorOnClicked_ButtonPressed_Offset), 0, null);
            ReceiveActorOnClicked_Implementation(buttonPressed);
        }
    }
    
    // Function /Script/Engine.Actor:ReceiveActorEndOverlap
    IntPtr ReceiveActorEndOverlap_NativeFunction;
    static readonly int ReceiveActorEndOverlap_ParamsSize;
    static readonly int ReceiveActorEndOverlap_OtherActor_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveActorEndOverlap(UnrealSharp.Engine.Actor otherActor)
    {
        unsafe
        {
            if (ReceiveActorEndOverlap_NativeFunction == IntPtr.Zero)
            {
                ReceiveActorEndOverlap_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveActorEndOverlap");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveActorEndOverlap_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveActorEndOverlap_OtherActor_Offset), 0, null, otherActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveActorEndOverlap_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveActorEndOverlap_Implementation(UnrealSharp.Engine.Actor otherActor)
    {
    }
    void Invoke_ReceiveActorEndOverlap(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Actor otherActor = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, ReceiveActorEndOverlap_OtherActor_Offset), 0, null);
            ReceiveActorEndOverlap_Implementation(otherActor);
        }
    }
    
    // Function /Script/Engine.Actor:ReceiveActorEndCursorOver
    IntPtr ReceiveActorEndCursorOver_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveActorEndCursorOver()
    {
        unsafe
        {
            if (ReceiveActorEndCursorOver_NativeFunction == IntPtr.Zero)
            {
                ReceiveActorEndCursorOver_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveActorEndCursorOver");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveActorEndCursorOver_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveActorEndCursorOver_Implementation()
    {
    }
    void Invoke_ReceiveActorEndCursorOver(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            ReceiveActorEndCursorOver_Implementation();
        }
    }
    
    // Function /Script/Engine.Actor:ReceiveActorBeginOverlap
    IntPtr ReceiveActorBeginOverlap_NativeFunction;
    static readonly int ReceiveActorBeginOverlap_ParamsSize;
    static readonly int ReceiveActorBeginOverlap_OtherActor_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveActorBeginOverlap(UnrealSharp.Engine.Actor otherActor)
    {
        unsafe
        {
            if (ReceiveActorBeginOverlap_NativeFunction == IntPtr.Zero)
            {
                ReceiveActorBeginOverlap_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveActorBeginOverlap");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveActorBeginOverlap_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveActorBeginOverlap_OtherActor_Offset), 0, null, otherActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveActorBeginOverlap_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveActorBeginOverlap_Implementation(UnrealSharp.Engine.Actor otherActor)
    {
    }
    void Invoke_ReceiveActorBeginOverlap(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Actor otherActor = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, ReceiveActorBeginOverlap_OtherActor_Offset), 0, null);
            ReceiveActorBeginOverlap_Implementation(otherActor);
        }
    }
    
    // Function /Script/Engine.Actor:ReceiveActorBeginCursorOver
    IntPtr ReceiveActorBeginCursorOver_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveActorBeginCursorOver()
    {
        unsafe
        {
            if (ReceiveActorBeginCursorOver_NativeFunction == IntPtr.Zero)
            {
                ReceiveActorBeginCursorOver_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveActorBeginCursorOver");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveActorBeginCursorOver_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveActorBeginCursorOver_Implementation()
    {
    }
    void Invoke_ReceiveActorBeginCursorOver(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            ReceiveActorBeginCursorOver_Implementation();
        }
    }
    
    // Function /Script/Engine.Actor:K2_OnReset
    IntPtr K2_OnReset_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnReset()
    {
        unsafe
        {
            if (K2_OnReset_NativeFunction == IntPtr.Zero)
            {
                K2_OnReset_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "K2_OnReset");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_OnReset_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void K2_OnReset_Implementation()
    {
    }
    void Invoke_K2_OnReset(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            K2_OnReset_Implementation();
        }
    }
    
    // Function /Script/Engine.Actor:K2_OnEndViewTarget
    IntPtr K2_OnEndViewTarget_NativeFunction;
    static readonly int K2_OnEndViewTarget_ParamsSize;
    static readonly int K2_OnEndViewTarget_PC_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnEndViewTarget(UnrealSharp.Engine.PlayerController pC)
    {
        unsafe
        {
            if (K2_OnEndViewTarget_NativeFunction == IntPtr.Zero)
            {
                K2_OnEndViewTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "K2_OnEndViewTarget");
            }
            byte* ParamsBufferAllocation = stackalloc byte[K2_OnEndViewTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, K2_OnEndViewTarget_PC_Offset), 0, null, pC);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_OnEndViewTarget_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void K2_OnEndViewTarget_Implementation(UnrealSharp.Engine.PlayerController pC)
    {
    }
    void Invoke_K2_OnEndViewTarget(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.PlayerController pC = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(buffer, K2_OnEndViewTarget_PC_Offset), 0, null);
            K2_OnEndViewTarget_Implementation(pC);
        }
    }
    
    // Function /Script/Engine.Actor:K2_OnBecomeViewTarget
    IntPtr K2_OnBecomeViewTarget_NativeFunction;
    static readonly int K2_OnBecomeViewTarget_ParamsSize;
    static readonly int K2_OnBecomeViewTarget_PC_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnBecomeViewTarget(UnrealSharp.Engine.PlayerController pC)
    {
        unsafe
        {
            if (K2_OnBecomeViewTarget_NativeFunction == IntPtr.Zero)
            {
                K2_OnBecomeViewTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "K2_OnBecomeViewTarget");
            }
            byte* ParamsBufferAllocation = stackalloc byte[K2_OnBecomeViewTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, K2_OnBecomeViewTarget_PC_Offset), 0, null, pC);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_OnBecomeViewTarget_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void K2_OnBecomeViewTarget_Implementation(UnrealSharp.Engine.PlayerController pC)
    {
    }
    void Invoke_K2_OnBecomeViewTarget(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.PlayerController pC = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(buffer, K2_OnBecomeViewTarget_PC_Offset), 0, null);
            K2_OnBecomeViewTarget_Implementation(pC);
        }
    }
    
    
}
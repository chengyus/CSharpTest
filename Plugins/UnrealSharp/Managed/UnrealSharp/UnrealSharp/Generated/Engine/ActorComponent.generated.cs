// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
abstract public partial class ActorComponent : UnrealSharp.CoreUObject.Object
{
    
    static ActorComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ActorComponent");
        
        ComponentTags_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ComponentTags");
        ComponentTags_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "ComponentTags");
        bReplicateUsingRegisteredSubObjectList_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bReplicateUsingRegisteredSubObjectList");
        bReplicateUsingRegisteredSubObjectList_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bReplicateUsingRegisteredSubObjectList");
        bReplicates_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bReplicates");
        bReplicates_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bReplicates");
        bAutoActivate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAutoActivate");
        bAutoActivate_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAutoActivate");
        bIsEditorOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsEditorOnly");
        bIsEditorOnly_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIsEditorOnly");
        
        ToggleActive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ToggleActive");
        SetTickGroup_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTickGroup");
        SetTickGroup_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTickGroup_NativeFunction);
        SetTickGroup_NewTickGroup_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTickGroup_NativeFunction, "NewTickGroup");
        SetTickableWhenPaused_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTickableWhenPaused");
        SetTickableWhenPaused_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTickableWhenPaused_NativeFunction);
        SetTickableWhenPaused_bTickableWhenPaused_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTickableWhenPaused_NativeFunction, "bTickableWhenPaused");
        SetIsReplicated_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIsReplicated");
        SetIsReplicated_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIsReplicated_NativeFunction);
        SetIsReplicated_ShouldReplicate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIsReplicated_NativeFunction, "ShouldReplicate");
        SetComponentTickIntervalAndCooldown_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetComponentTickIntervalAndCooldown");
        SetComponentTickIntervalAndCooldown_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetComponentTickIntervalAndCooldown_NativeFunction);
        SetComponentTickIntervalAndCooldown_TickInterval_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetComponentTickIntervalAndCooldown_NativeFunction, "TickInterval");
        SetComponentTickInterval_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetComponentTickInterval");
        SetComponentTickInterval_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetComponentTickInterval_NativeFunction);
        SetComponentTickInterval_TickInterval_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetComponentTickInterval_NativeFunction, "TickInterval");
        SetComponentTickEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetComponentTickEnabled");
        SetComponentTickEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetComponentTickEnabled_NativeFunction);
        SetComponentTickEnabled_bEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetComponentTickEnabled_NativeFunction, "bEnabled");
        SetAutoActivate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAutoActivate");
        SetAutoActivate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAutoActivate_NativeFunction);
        SetAutoActivate_bNewAutoActivate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAutoActivate_NativeFunction, "bNewAutoActivate");
        SetActive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetActive");
        SetActive_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetActive_NativeFunction);
        SetActive_bNewActive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetActive_NativeFunction, "bNewActive");
        SetActive_bReset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetActive_NativeFunction, "bReset");
        RemoveTickPrerequisiteComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveTickPrerequisiteComponent");
        RemoveTickPrerequisiteComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveTickPrerequisiteComponent_NativeFunction);
        RemoveTickPrerequisiteComponent_PrerequisiteComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveTickPrerequisiteComponent_NativeFunction, "PrerequisiteComponent");
        RemoveTickPrerequisiteActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveTickPrerequisiteActor");
        RemoveTickPrerequisiteActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveTickPrerequisiteActor_NativeFunction);
        RemoveTickPrerequisiteActor_PrerequisiteActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveTickPrerequisiteActor_NativeFunction, "PrerequisiteActor");
        K2_DestroyComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_DestroyComponent");
        K2_DestroyComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_DestroyComponent_NativeFunction);
        K2_DestroyComponent_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DestroyComponent_NativeFunction, "Object");
        IsComponentTickEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsComponentTickEnabled");
        IsComponentTickEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsComponentTickEnabled_NativeFunction);
        IsComponentTickEnabled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsComponentTickEnabled_NativeFunction, "ReturnValue");
        IsBeingDestroyed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsBeingDestroyed");
        IsBeingDestroyed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsBeingDestroyed_NativeFunction);
        IsBeingDestroyed_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsBeingDestroyed_NativeFunction, "ReturnValue");
        IsActive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsActive");
        IsActive_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsActive_NativeFunction);
        IsActive_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsActive_NativeFunction, "ReturnValue");
        GetOwner_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOwner");
        GetOwner_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOwner_NativeFunction);
        GetOwner_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOwner_NativeFunction, "ReturnValue");
        GetComponentTickInterval_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetComponentTickInterval");
        GetComponentTickInterval_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetComponentTickInterval_NativeFunction);
        GetComponentTickInterval_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetComponentTickInterval_NativeFunction, "ReturnValue");
        Deactivate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Deactivate");
        ComponentHasTag_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ComponentHasTag");
        ComponentHasTag_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ComponentHasTag_NativeFunction);
        ComponentHasTag_Tag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComponentHasTag_NativeFunction, "Tag");
        ComponentHasTag_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComponentHasTag_NativeFunction, "ReturnValue");
        AddTickPrerequisiteComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddTickPrerequisiteComponent");
        AddTickPrerequisiteComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddTickPrerequisiteComponent_NativeFunction);
        AddTickPrerequisiteComponent_PrerequisiteComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTickPrerequisiteComponent_NativeFunction, "PrerequisiteComponent");
        AddTickPrerequisiteActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddTickPrerequisiteActor");
        AddTickPrerequisiteActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddTickPrerequisiteActor_NativeFunction);
        AddTickPrerequisiteActor_PrerequisiteActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTickPrerequisiteActor_NativeFunction, "PrerequisiteActor");
        Activate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Activate");
        Activate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Activate_NativeFunction);
        Activate_bReset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Activate_NativeFunction, "bReset");
        
        IntPtr ReceiveTick_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveTick");
        ReceiveTick_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveTick_NativeFunction);
        ReceiveTick_DeltaSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveTick_NativeFunction, "DeltaSeconds");
        
        IntPtr ReceiveEndPlay_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveEndPlay");
        ReceiveEndPlay_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveEndPlay_NativeFunction);
        ReceiveEndPlay_EndPlayReason_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveEndPlay_NativeFunction, "EndPlayReason");
        
        IntPtr ReceiveAsyncPhysicsTick_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveAsyncPhysicsTick");
        ReceiveAsyncPhysicsTick_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveAsyncPhysicsTick_NativeFunction);
        ReceiveAsyncPhysicsTick_DeltaSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveAsyncPhysicsTick_NativeFunction, "DeltaSeconds");
        ReceiveAsyncPhysicsTick_SimSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveAsyncPhysicsTick_NativeFunction, "SimSeconds");
        
        
    }
    
    protected ActorComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ArrayProperty /Script/Engine.ActorComponent:ComponentTags
    static readonly int ComponentTags_Offset;
    static readonly IntPtr ComponentTags_NativeProperty;
    UnrealArrayReadWriteMarshaler<Name> ComponentTags_Wrapper = null;
    
    public System.Collections.Generic.IList<Name> ComponentTags
    {
        get
        {
            if(ComponentTags_Wrapper == null)
            {
                ComponentTags_Wrapper = new UnrealArrayReadWriteMarshaler<Name>(1, ComponentTags_NativeProperty, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative);
            }
            
            return ComponentTags_Wrapper.FromNative(IntPtr.Add(NativeObject,ComponentTags_Offset),0,this);
        }
    }
    
    // BoolProperty /Script/Engine.ActorComponent:bReplicateUsingRegisteredSubObjectList
    static readonly int bReplicateUsingRegisteredSubObjectList_Offset;
    static readonly IntPtr bReplicateUsingRegisteredSubObjectList_NativeProperty;
    
    public bool bReplicateUsingRegisteredSubObjectList
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bReplicateUsingRegisteredSubObjectList_NativeProperty, bReplicateUsingRegisteredSubObjectList_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.ActorComponent:bReplicates
    static readonly int bReplicates_Offset;
    static readonly IntPtr bReplicates_NativeProperty;
    
    public bool bReplicates
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bReplicates_NativeProperty, bReplicates_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.ActorComponent:bAutoActivate
    static readonly int bAutoActivate_Offset;
    static readonly IntPtr bAutoActivate_NativeProperty;
    
    public bool bAutoActivate
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAutoActivate_NativeProperty, bAutoActivate_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.ActorComponent:bIsEditorOnly
    static readonly int bIsEditorOnly_Offset;
    static readonly IntPtr bIsEditorOnly_NativeProperty;
    
    public bool bIsEditorOnly
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIsEditorOnly_NativeProperty, bIsEditorOnly_Offset);
        }
    }
    
    // Function /Script/Engine.ActorComponent:ToggleActive
    static readonly IntPtr ToggleActive_NativeFunction;
    
    public void ToggleActive()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ToggleActive_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.ActorComponent:SetTickGroup
    static readonly IntPtr SetTickGroup_NativeFunction;
    static readonly int SetTickGroup_ParamsSize;
    static readonly int SetTickGroup_NewTickGroup_Offset;
    
    public void SetTickGroup(UnrealSharp.Engine.ETickingGroup newTickGroup)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTickGroup_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ETickingGroup>.ToNative(IntPtr.Add(ParamsBuffer, SetTickGroup_NewTickGroup_Offset), 0, null, newTickGroup);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTickGroup_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ActorComponent:SetTickableWhenPaused
    static readonly IntPtr SetTickableWhenPaused_NativeFunction;
    static readonly int SetTickableWhenPaused_ParamsSize;
    static readonly int SetTickableWhenPaused_bTickableWhenPaused_Offset;
    
    public void SetTickableWhenPaused(bool bTickableWhenPaused)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTickableWhenPaused_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetTickableWhenPaused_bTickableWhenPaused_Offset), 0, null, bTickableWhenPaused);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTickableWhenPaused_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ActorComponent:SetIsReplicated
    static readonly IntPtr SetIsReplicated_NativeFunction;
    static readonly int SetIsReplicated_ParamsSize;
    static readonly int SetIsReplicated_ShouldReplicate_Offset;
    
    public void SetIsReplicated(bool shouldReplicate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIsReplicated_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetIsReplicated_ShouldReplicate_Offset), 0, null, shouldReplicate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIsReplicated_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ActorComponent:SetComponentTickIntervalAndCooldown
    static readonly IntPtr SetComponentTickIntervalAndCooldown_NativeFunction;
    static readonly int SetComponentTickIntervalAndCooldown_ParamsSize;
    static readonly int SetComponentTickIntervalAndCooldown_TickInterval_Offset;
    
    public void SetComponentTickIntervalAndCooldown(float tickInterval)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetComponentTickIntervalAndCooldown_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetComponentTickIntervalAndCooldown_TickInterval_Offset), 0, null, tickInterval);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetComponentTickIntervalAndCooldown_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ActorComponent:SetComponentTickInterval
    static readonly IntPtr SetComponentTickInterval_NativeFunction;
    static readonly int SetComponentTickInterval_ParamsSize;
    static readonly int SetComponentTickInterval_TickInterval_Offset;
    
    public void SetComponentTickInterval(float tickInterval)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetComponentTickInterval_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetComponentTickInterval_TickInterval_Offset), 0, null, tickInterval);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetComponentTickInterval_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ActorComponent:SetComponentTickEnabled
    static readonly IntPtr SetComponentTickEnabled_NativeFunction;
    static readonly int SetComponentTickEnabled_ParamsSize;
    static readonly int SetComponentTickEnabled_bEnabled_Offset;
    
    public void SetComponentTickEnabled(bool bEnabled)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetComponentTickEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetComponentTickEnabled_bEnabled_Offset), 0, null, bEnabled);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetComponentTickEnabled_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ActorComponent:SetAutoActivate
    static readonly IntPtr SetAutoActivate_NativeFunction;
    static readonly int SetAutoActivate_ParamsSize;
    static readonly int SetAutoActivate_bNewAutoActivate_Offset;
    
    public void SetAutoActivate(bool bNewAutoActivate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAutoActivate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAutoActivate_bNewAutoActivate_Offset), 0, null, bNewAutoActivate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAutoActivate_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ActorComponent:SetActive
    static readonly IntPtr SetActive_NativeFunction;
    static readonly int SetActive_ParamsSize;
    static readonly int SetActive_bNewActive_Offset;
    static readonly int SetActive_bReset_Offset;
    
    public void SetActive(bool bNewActive, bool bReset = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetActive_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetActive_bNewActive_Offset), 0, null, bNewActive);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetActive_bReset_Offset), 0, null, bReset);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetActive_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ActorComponent:RemoveTickPrerequisiteComponent
    static readonly IntPtr RemoveTickPrerequisiteComponent_NativeFunction;
    static readonly int RemoveTickPrerequisiteComponent_ParamsSize;
    static readonly int RemoveTickPrerequisiteComponent_PrerequisiteComponent_Offset;
    
    public void RemoveTickPrerequisiteComponent(UnrealSharp.Engine.ActorComponent prerequisiteComponent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveTickPrerequisiteComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.ActorComponent>.ToNative(IntPtr.Add(ParamsBuffer, RemoveTickPrerequisiteComponent_PrerequisiteComponent_Offset), 0, null, prerequisiteComponent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveTickPrerequisiteComponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ActorComponent:RemoveTickPrerequisiteActor
    static readonly IntPtr RemoveTickPrerequisiteActor_NativeFunction;
    static readonly int RemoveTickPrerequisiteActor_ParamsSize;
    static readonly int RemoveTickPrerequisiteActor_PrerequisiteActor_Offset;
    
    public void RemoveTickPrerequisiteActor(UnrealSharp.Engine.Actor prerequisiteActor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveTickPrerequisiteActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, RemoveTickPrerequisiteActor_PrerequisiteActor_Offset), 0, null, prerequisiteActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveTickPrerequisiteActor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ActorComponent:K2_DestroyComponent
    static readonly IntPtr K2_DestroyComponent_NativeFunction;
    static readonly int K2_DestroyComponent_ParamsSize;
    static readonly int K2_DestroyComponent_Object_Offset;
    
    public void DestroyComponent(UnrealSharp.CoreUObject.Object @object)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_DestroyComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, K2_DestroyComponent_Object_Offset), 0, null, @object);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_DestroyComponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ActorComponent:IsComponentTickEnabled
    static readonly IntPtr IsComponentTickEnabled_NativeFunction;
    static readonly int IsComponentTickEnabled_ParamsSize;
    static readonly int IsComponentTickEnabled_ReturnValue_Offset;
    
    public bool IsComponentTickEnabled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsComponentTickEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsComponentTickEnabled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsComponentTickEnabled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ActorComponent:IsBeingDestroyed
    static readonly IntPtr IsBeingDestroyed_NativeFunction;
    static readonly int IsBeingDestroyed_ParamsSize;
    static readonly int IsBeingDestroyed_ReturnValue_Offset;
    
    public bool IsBeingDestroyed()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsBeingDestroyed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsBeingDestroyed_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsBeingDestroyed_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ActorComponent:IsActive
    static readonly IntPtr IsActive_NativeFunction;
    static readonly int IsActive_ParamsSize;
    static readonly int IsActive_ReturnValue_Offset;
    
    public bool IsActive()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsActive_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsActive_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsActive_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ActorComponent:GetOwner
    static readonly IntPtr GetOwner_NativeFunction;
    static readonly int GetOwner_ParamsSize;
    static readonly int GetOwner_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Actor GetOwner()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOwner_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOwner_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Actor returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(ParamsBuffer, GetOwner_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ActorComponent:GetComponentTickInterval
    static readonly IntPtr GetComponentTickInterval_NativeFunction;
    static readonly int GetComponentTickInterval_ParamsSize;
    static readonly int GetComponentTickInterval_ReturnValue_Offset;
    
    public float GetComponentTickInterval()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetComponentTickInterval_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetComponentTickInterval_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetComponentTickInterval_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ActorComponent:Deactivate
    static readonly IntPtr Deactivate_NativeFunction;
    
    public void Deactivate()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Deactivate_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.ActorComponent:ComponentHasTag
    static readonly IntPtr ComponentHasTag_NativeFunction;
    static readonly int ComponentHasTag_ParamsSize;
    static readonly int ComponentHasTag_Tag_Offset;
    static readonly int ComponentHasTag_ReturnValue_Offset;
    
    public bool ComponentHasTag(Name tag)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ComponentHasTag_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ComponentHasTag_Tag_Offset), 0, null, tag);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ComponentHasTag_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ComponentHasTag_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ActorComponent:AddTickPrerequisiteComponent
    static readonly IntPtr AddTickPrerequisiteComponent_NativeFunction;
    static readonly int AddTickPrerequisiteComponent_ParamsSize;
    static readonly int AddTickPrerequisiteComponent_PrerequisiteComponent_Offset;
    
    public void AddTickPrerequisiteComponent(UnrealSharp.Engine.ActorComponent prerequisiteComponent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddTickPrerequisiteComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.ActorComponent>.ToNative(IntPtr.Add(ParamsBuffer, AddTickPrerequisiteComponent_PrerequisiteComponent_Offset), 0, null, prerequisiteComponent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddTickPrerequisiteComponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ActorComponent:AddTickPrerequisiteActor
    static readonly IntPtr AddTickPrerequisiteActor_NativeFunction;
    static readonly int AddTickPrerequisiteActor_ParamsSize;
    static readonly int AddTickPrerequisiteActor_PrerequisiteActor_Offset;
    
    public void AddTickPrerequisiteActor(UnrealSharp.Engine.Actor prerequisiteActor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddTickPrerequisiteActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, AddTickPrerequisiteActor_PrerequisiteActor_Offset), 0, null, prerequisiteActor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddTickPrerequisiteActor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ActorComponent:Activate
    static readonly IntPtr Activate_NativeFunction;
    static readonly int Activate_ParamsSize;
    static readonly int Activate_bReset_Offset;
    
    public void Activate(bool bReset = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Activate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, Activate_bReset_Offset), 0, null, bReset);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Activate_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ActorComponent:ReceiveTick
    IntPtr ReceiveTick_NativeFunction;
    static readonly int ReceiveTick_ParamsSize;
    static readonly int ReceiveTick_DeltaSeconds_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveTick(float deltaSeconds)
    {
        unsafe
        {
            if (ReceiveTick_NativeFunction == IntPtr.Zero)
            {
                ReceiveTick_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveTick");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveTick_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveTick_DeltaSeconds_Offset), 0, null, deltaSeconds);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveTick_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveTick_Implementation(float deltaSeconds)
    {
    }
    void Invoke_ReceiveTick(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            float deltaSeconds = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, ReceiveTick_DeltaSeconds_Offset), 0, null);
            ReceiveTick_Implementation(deltaSeconds);
        }
    }
    
    // Function /Script/Engine.ActorComponent:ReceiveEndPlay
    IntPtr ReceiveEndPlay_NativeFunction;
    static readonly int ReceiveEndPlay_ParamsSize;
    static readonly int ReceiveEndPlay_EndPlayReason_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveEndPlay(UnrealSharp.Engine.EEndPlayReason endPlayReason)
    {
        unsafe
        {
            if (ReceiveEndPlay_NativeFunction == IntPtr.Zero)
            {
                ReceiveEndPlay_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveEndPlay");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveEndPlay_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EEndPlayReason>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveEndPlay_EndPlayReason_Offset), 0, null, endPlayReason);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveEndPlay_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveEndPlay_Implementation(UnrealSharp.Engine.EEndPlayReason endPlayReason)
    {
    }
    void Invoke_ReceiveEndPlay(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.EEndPlayReason endPlayReason = BlittableMarshaller<UnrealSharp.Engine.EEndPlayReason>.FromNative(IntPtr.Add(buffer, ReceiveEndPlay_EndPlayReason_Offset), 0, null);
            ReceiveEndPlay_Implementation(endPlayReason);
        }
    }
    
    // Function /Script/Engine.ActorComponent:ReceiveBeginPlay
    IntPtr ReceiveBeginPlay_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveBeginPlay()
    {
        unsafe
        {
            if (ReceiveBeginPlay_NativeFunction == IntPtr.Zero)
            {
                ReceiveBeginPlay_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveBeginPlay");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveBeginPlay_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveBeginPlay_Implementation()
    {
    }
    void Invoke_ReceiveBeginPlay(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            ReceiveBeginPlay_Implementation();
        }
    }
    
    // Function /Script/Engine.ActorComponent:ReceiveAsyncPhysicsTick
    IntPtr ReceiveAsyncPhysicsTick_NativeFunction;
    static readonly int ReceiveAsyncPhysicsTick_ParamsSize;
    static readonly int ReceiveAsyncPhysicsTick_DeltaSeconds_Offset;
    static readonly int ReceiveAsyncPhysicsTick_SimSeconds_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveAsyncPhysicsTick(float deltaSeconds, float simSeconds)
    {
        unsafe
        {
            if (ReceiveAsyncPhysicsTick_NativeFunction == IntPtr.Zero)
            {
                ReceiveAsyncPhysicsTick_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveAsyncPhysicsTick");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveAsyncPhysicsTick_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveAsyncPhysicsTick_DeltaSeconds_Offset), 0, null, deltaSeconds);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveAsyncPhysicsTick_SimSeconds_Offset), 0, null, simSeconds);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveAsyncPhysicsTick_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveAsyncPhysicsTick_Implementation(float deltaSeconds, float simSeconds)
    {
    }
    void Invoke_ReceiveAsyncPhysicsTick(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            float deltaSeconds = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, ReceiveAsyncPhysicsTick_DeltaSeconds_Offset), 0, null);
            float simSeconds = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, ReceiveAsyncPhysicsTick_SimSeconds_Offset), 0, null);
            ReceiveAsyncPhysicsTick_Implementation(deltaSeconds, simSeconds);
        }
    }
    
    
}
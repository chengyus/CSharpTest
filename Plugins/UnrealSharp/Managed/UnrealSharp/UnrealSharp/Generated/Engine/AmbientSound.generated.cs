// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class AmbientSound : UnrealSharp.Engine.Actor
{
    
    static AmbientSound()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AmbientSound");
        
        AudioComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AudioComponent");
        
        Stop_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Stop");
        Play_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Play");
        Play_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Play_NativeFunction);
        Play_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Play_NativeFunction, "StartTime");
        FadeOut_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FadeOut");
        FadeOut_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FadeOut_NativeFunction);
        FadeOut_FadeOutDuration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FadeOut_NativeFunction, "FadeOutDuration");
        FadeOut_FadeVolumeLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FadeOut_NativeFunction, "FadeVolumeLevel");
        FadeIn_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FadeIn");
        FadeIn_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FadeIn_NativeFunction);
        FadeIn_FadeInDuration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FadeIn_NativeFunction, "FadeInDuration");
        FadeIn_FadeVolumeLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FadeIn_NativeFunction, "FadeVolumeLevel");
        AdjustVolume_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AdjustVolume");
        AdjustVolume_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AdjustVolume_NativeFunction);
        AdjustVolume_AdjustVolumeDuration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AdjustVolume_NativeFunction, "AdjustVolumeDuration");
        AdjustVolume_AdjustVolumeLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AdjustVolume_NativeFunction, "AdjustVolumeLevel");
        
        
    }
    
    protected AmbientSound(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Engine.AmbientSound:AudioComponent
    static readonly int AudioComponent_Offset;
    
    public UnrealSharp.Engine.AudioComponent AudioComponent
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.AudioComponent>.FromNative(IntPtr.Add(NativeObject, AudioComponent_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.AmbientSound:Stop
    static readonly IntPtr Stop_NativeFunction;
    
    [Obsolete("This function is obsolete")]
    public void Stop()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Stop_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.AmbientSound:Play
    static readonly IntPtr Play_NativeFunction;
    static readonly int Play_ParamsSize;
    static readonly int Play_StartTime_Offset;
    
    [Obsolete("This function is obsolete")]
    public void Play(float startTime = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Play_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Play_StartTime_Offset), 0, null, startTime);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Play_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AmbientSound:FadeOut
    static readonly IntPtr FadeOut_NativeFunction;
    static readonly int FadeOut_ParamsSize;
    static readonly int FadeOut_FadeOutDuration_Offset;
    static readonly int FadeOut_FadeVolumeLevel_Offset;
    
    [Obsolete("This function is obsolete")]
    public void FadeOut(float fadeOutDuration, float fadeVolumeLevel)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FadeOut_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FadeOut_FadeOutDuration_Offset), 0, null, fadeOutDuration);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FadeOut_FadeVolumeLevel_Offset), 0, null, fadeVolumeLevel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FadeOut_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AmbientSound:FadeIn
    static readonly IntPtr FadeIn_NativeFunction;
    static readonly int FadeIn_ParamsSize;
    static readonly int FadeIn_FadeInDuration_Offset;
    static readonly int FadeIn_FadeVolumeLevel_Offset;
    
    [Obsolete("This function is obsolete")]
    public void FadeIn(float fadeInDuration, float fadeVolumeLevel = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FadeIn_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FadeIn_FadeInDuration_Offset), 0, null, fadeInDuration);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FadeIn_FadeVolumeLevel_Offset), 0, null, fadeVolumeLevel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FadeIn_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AmbientSound:AdjustVolume
    static readonly IntPtr AdjustVolume_NativeFunction;
    static readonly int AdjustVolume_ParamsSize;
    static readonly int AdjustVolume_AdjustVolumeDuration_Offset;
    static readonly int AdjustVolume_AdjustVolumeLevel_Offset;
    
    [Obsolete("This function is obsolete")]
    public void AdjustVolume(float adjustVolumeDuration, float adjustVolumeLevel)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AdjustVolume_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AdjustVolume_AdjustVolumeDuration_Offset), 0, null, adjustVolumeDuration);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AdjustVolume_AdjustVolumeLevel_Offset), 0, null, adjustVolumeLevel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AdjustVolume_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
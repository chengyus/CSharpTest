// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class AnimDataModel : UnrealSharp.CoreUObject.Object
{
    
    static AnimDataModel()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AnimDataModel");
        
        BoneAnimationTracks_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BoneAnimationTracks");
        BoneAnimationTracks_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "BoneAnimationTracks");
        PlayLength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PlayLength");
        FrameRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FrameRate");
        NumberOfFrames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NumberOfFrames");
        NumberOfKeys_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NumberOfKeys");
        CurveData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CurveData");
        AnimatedBoneAttributes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AnimatedBoneAttributes");
        AnimatedBoneAttributes_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "AnimatedBoneAttributes");
        
        
        
    }
    
    protected AnimDataModel(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ArrayProperty /Script/Engine.AnimDataModel:BoneAnimationTracks
    static readonly int BoneAnimationTracks_Offset;
    static readonly IntPtr BoneAnimationTracks_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.BoneAnimationTrack> BoneAnimationTracks_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.Engine.BoneAnimationTrack> BoneAnimationTracks
    {
        get
        {
            if(BoneAnimationTracks_Wrapper == null)
            {
                BoneAnimationTracks_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.BoneAnimationTrack>(1, BoneAnimationTracks_NativeProperty, UnrealSharp.Engine.BoneAnimationTrackMarshaler.ToNative, UnrealSharp.Engine.BoneAnimationTrackMarshaler.FromNative);
            }
            
            return BoneAnimationTracks_Wrapper.FromNative(IntPtr.Add(NativeObject,BoneAnimationTracks_Offset),0,this);
        }
    }
    
    // FloatProperty /Script/Engine.AnimDataModel:PlayLength
    static readonly int PlayLength_Offset;
    
    public float PlayLength
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PlayLength_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.AnimDataModel:FrameRate
    static readonly int FrameRate_Offset;
    
    public UnrealSharp.CoreUObject.FrameRate FrameRate
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.FrameRate>.FromNative(IntPtr.Add(NativeObject, FrameRate_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Engine.AnimDataModel:NumberOfFrames
    static readonly int NumberOfFrames_Offset;
    
    public int NumberOfFrames
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, NumberOfFrames_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Engine.AnimDataModel:NumberOfKeys
    static readonly int NumberOfKeys_Offset;
    
    public int NumberOfKeys
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, NumberOfKeys_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.AnimDataModel:CurveData
    static readonly int CurveData_Offset;
    
    public UnrealSharp.Engine.AnimationCurveData CurveData
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.AnimationCurveDataMarshaler.FromNative(IntPtr.Add(NativeObject, CurveData_Offset), 0, this);
        }
    }
    
    // ArrayProperty /Script/Engine.AnimDataModel:AnimatedBoneAttributes
    static readonly int AnimatedBoneAttributes_Offset;
    static readonly IntPtr AnimatedBoneAttributes_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.AnimatedBoneAttribute> AnimatedBoneAttributes_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.Engine.AnimatedBoneAttribute> AnimatedBoneAttributes
    {
        get
        {
            if(AnimatedBoneAttributes_Wrapper == null)
            {
                AnimatedBoneAttributes_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.AnimatedBoneAttribute>(1, AnimatedBoneAttributes_NativeProperty, UnrealSharp.Engine.AnimatedBoneAttributeMarshaler.ToNative, UnrealSharp.Engine.AnimatedBoneAttributeMarshaler.FromNative);
            }
            
            return AnimatedBoneAttributes_Wrapper.FromNative(IntPtr.Add(NativeObject,AnimatedBoneAttributes_Offset),0,this);
        }
    }
    
    
}
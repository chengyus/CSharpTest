// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class AnimInstance : UnrealSharp.CoreUObject.Object
{
    
    static AnimInstance()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AnimInstance");
        
        
        WasAnimNotifyStateActiveInAnyState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "WasAnimNotifyStateActiveInAnyState");
        WasAnimNotifyStateActiveInAnyState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(WasAnimNotifyStateActiveInAnyState_NativeFunction);
        WasAnimNotifyStateActiveInAnyState_AnimNotifyStateType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WasAnimNotifyStateActiveInAnyState_NativeFunction, "AnimNotifyStateType");
        WasAnimNotifyStateActiveInAnyState_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WasAnimNotifyStateActiveInAnyState_NativeFunction, "ReturnValue");
        UnlockAIResources_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UnlockAIResources");
        UnlockAIResources_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UnlockAIResources_NativeFunction);
        UnlockAIResources_bUnlockMovement_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnlockAIResources_NativeFunction, "bUnlockMovement");
        UnlockAIResources_UnlockAILogic_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnlockAIResources_NativeFunction, "UnlockAILogic");
        UnlinkAnimClassLayers_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UnlinkAnimClassLayers");
        UnlinkAnimClassLayers_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UnlinkAnimClassLayers_NativeFunction);
        UnlinkAnimClassLayers_InClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnlinkAnimClassLayers_NativeFunction, "InClass");
        TryGetPawnOwner_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TryGetPawnOwner");
        TryGetPawnOwner_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TryGetPawnOwner_NativeFunction);
        TryGetPawnOwner_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TryGetPawnOwner_NativeFunction, "ReturnValue");
        StopSlotAnimation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopSlotAnimation");
        StopSlotAnimation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StopSlotAnimation_NativeFunction);
        StopSlotAnimation_InBlendOutTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopSlotAnimation_NativeFunction, "InBlendOutTime");
        StopSlotAnimation_SlotNodeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopSlotAnimation_NativeFunction, "SlotNodeName");
        SnapshotPose_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SnapshotPose");
        SnapshotPose_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SnapshotPose_NativeFunction);
        SnapshotPose_Snapshot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SnapshotPose_NativeFunction, "Snapshot");
        SetUseMainInstanceMontageEvaluationData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetUseMainInstanceMontageEvaluationData");
        SetUseMainInstanceMontageEvaluationData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetUseMainInstanceMontageEvaluationData_NativeFunction);
        SetUseMainInstanceMontageEvaluationData_bSet_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUseMainInstanceMontageEvaluationData_NativeFunction, "bSet");
        SetRootMotionMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRootMotionMode");
        SetRootMotionMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRootMotionMode_NativeFunction);
        SetRootMotionMode_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRootMotionMode_NativeFunction, "Value");
        SetReceiveNotifiesFromLinkedInstances_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetReceiveNotifiesFromLinkedInstances");
        SetReceiveNotifiesFromLinkedInstances_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetReceiveNotifiesFromLinkedInstances_NativeFunction);
        SetReceiveNotifiesFromLinkedInstances_bSet_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetReceiveNotifiesFromLinkedInstances_NativeFunction, "bSet");
        SetPropagateNotifiesToLinkedInstances_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPropagateNotifiesToLinkedInstances");
        SetPropagateNotifiesToLinkedInstances_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPropagateNotifiesToLinkedInstances_NativeFunction);
        SetPropagateNotifiesToLinkedInstances_bSet_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPropagateNotifiesToLinkedInstances_NativeFunction, "bSet");
        SetMorphTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMorphTarget");
        SetMorphTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMorphTarget_NativeFunction);
        SetMorphTarget_MorphTargetName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMorphTarget_NativeFunction, "MorphTargetName");
        SetMorphTarget_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMorphTarget_NativeFunction, "Value");
        SavePoseSnapshot_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SavePoseSnapshot");
        SavePoseSnapshot_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SavePoseSnapshot_NativeFunction);
        SavePoseSnapshot_SnapshotName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SavePoseSnapshot_NativeFunction, "SnapshotName");
        ResetDynamics_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetDynamics");
        ResetDynamics_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ResetDynamics_NativeFunction);
        ResetDynamics_InTeleportType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResetDynamics_NativeFunction, "InTeleportType");
        RequestTransitionEvent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RequestTransitionEvent");
        RequestTransitionEvent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RequestTransitionEvent_NativeFunction);
        RequestTransitionEvent_EventName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RequestTransitionEvent_NativeFunction, "EventName");
        RequestTransitionEvent_RequestTimeout_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RequestTransitionEvent_NativeFunction, "RequestTimeout");
        RequestTransitionEvent_QueueMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RequestTransitionEvent_NativeFunction, "QueueMode");
        RequestTransitionEvent_OverwriteMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RequestTransitionEvent_NativeFunction, "OverwriteMode");
        RequestTransitionEvent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RequestTransitionEvent_NativeFunction, "ReturnValue");
        RequestSlotGroupInertialization_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RequestSlotGroupInertialization");
        RequestSlotGroupInertialization_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RequestSlotGroupInertialization_NativeFunction);
        RequestSlotGroupInertialization_InSlotGroupName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RequestSlotGroupInertialization_NativeFunction, "InSlotGroupName");
        RequestSlotGroupInertialization_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RequestSlotGroupInertialization_NativeFunction, "Duration");
        RequestSlotGroupInertialization_BlendProfile_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RequestSlotGroupInertialization_NativeFunction, "BlendProfile");
        RemovePoseSnapshot_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemovePoseSnapshot");
        RemovePoseSnapshot_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemovePoseSnapshot_NativeFunction);
        RemovePoseSnapshot_SnapshotName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemovePoseSnapshot_NativeFunction, "SnapshotName");
        PlaySlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlaySlotAnimationAsDynamicMontage_WithBlendSettings");
        PlaySlotAnimationAsDynamicMontage_WithBlendSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PlaySlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction);
        PlaySlotAnimationAsDynamicMontage_WithBlendSettings_Asset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction, "Asset");
        PlaySlotAnimationAsDynamicMontage_WithBlendSettings_SlotNodeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction, "SlotNodeName");
        PlaySlotAnimationAsDynamicMontage_WithBlendSettings_BlendInSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction, "BlendInSettings");
        PlaySlotAnimationAsDynamicMontage_WithBlendSettings_BlendOutSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction, "BlendOutSettings");
        PlaySlotAnimationAsDynamicMontage_WithBlendSettings_InPlayRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction, "InPlayRate");
        PlaySlotAnimationAsDynamicMontage_WithBlendSettings_LoopCount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction, "LoopCount");
        PlaySlotAnimationAsDynamicMontage_WithBlendSettings_BlendOutTriggerTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction, "BlendOutTriggerTime");
        PlaySlotAnimationAsDynamicMontage_WithBlendSettings_InTimeToStartMontageAt_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction, "InTimeToStartMontageAt");
        PlaySlotAnimationAsDynamicMontage_WithBlendSettings_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction, "ReturnValue");
        PlaySlotAnimationAsDynamicMontage_WithBlendArgs_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlaySlotAnimationAsDynamicMontage_WithBlendArgs");
        PlaySlotAnimationAsDynamicMontage_WithBlendArgs_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PlaySlotAnimationAsDynamicMontage_WithBlendArgs_NativeFunction);
        PlaySlotAnimationAsDynamicMontage_WithBlendArgs_Asset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_WithBlendArgs_NativeFunction, "Asset");
        PlaySlotAnimationAsDynamicMontage_WithBlendArgs_SlotNodeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_WithBlendArgs_NativeFunction, "SlotNodeName");
        PlaySlotAnimationAsDynamicMontage_WithBlendArgs_BlendIn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_WithBlendArgs_NativeFunction, "BlendIn");
        PlaySlotAnimationAsDynamicMontage_WithBlendArgs_BlendOut_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_WithBlendArgs_NativeFunction, "BlendOut");
        PlaySlotAnimationAsDynamicMontage_WithBlendArgs_InPlayRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_WithBlendArgs_NativeFunction, "InPlayRate");
        PlaySlotAnimationAsDynamicMontage_WithBlendArgs_LoopCount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_WithBlendArgs_NativeFunction, "LoopCount");
        PlaySlotAnimationAsDynamicMontage_WithBlendArgs_BlendOutTriggerTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_WithBlendArgs_NativeFunction, "BlendOutTriggerTime");
        PlaySlotAnimationAsDynamicMontage_WithBlendArgs_InTimeToStartMontageAt_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_WithBlendArgs_NativeFunction, "InTimeToStartMontageAt");
        PlaySlotAnimationAsDynamicMontage_WithBlendArgs_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_WithBlendArgs_NativeFunction, "ReturnValue");
        PlaySlotAnimationAsDynamicMontage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlaySlotAnimationAsDynamicMontage");
        PlaySlotAnimationAsDynamicMontage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PlaySlotAnimationAsDynamicMontage_NativeFunction);
        PlaySlotAnimationAsDynamicMontage_Asset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_NativeFunction, "Asset");
        PlaySlotAnimationAsDynamicMontage_SlotNodeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_NativeFunction, "SlotNodeName");
        PlaySlotAnimationAsDynamicMontage_BlendInTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_NativeFunction, "BlendInTime");
        PlaySlotAnimationAsDynamicMontage_BlendOutTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_NativeFunction, "BlendOutTime");
        PlaySlotAnimationAsDynamicMontage_InPlayRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_NativeFunction, "InPlayRate");
        PlaySlotAnimationAsDynamicMontage_LoopCount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_NativeFunction, "LoopCount");
        PlaySlotAnimationAsDynamicMontage_BlendOutTriggerTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_NativeFunction, "BlendOutTriggerTime");
        PlaySlotAnimationAsDynamicMontage_InTimeToStartMontageAt_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_NativeFunction, "InTimeToStartMontageAt");
        PlaySlotAnimationAsDynamicMontage_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySlotAnimationAsDynamicMontage_NativeFunction, "ReturnValue");
        MontageSync_StopFollowing_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MontageSync_StopFollowing");
        MontageSync_StopFollowing_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MontageSync_StopFollowing_NativeFunction);
        MontageSync_StopFollowing_MontageFollower_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MontageSync_StopFollowing_NativeFunction, "MontageFollower");
        MontageSync_Follow_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MontageSync_Follow");
        MontageSync_Follow_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MontageSync_Follow_NativeFunction);
        MontageSync_Follow_MontageFollower_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MontageSync_Follow_NativeFunction, "MontageFollower");
        MontageSync_Follow_OtherAnimInstance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MontageSync_Follow_NativeFunction, "OtherAnimInstance");
        MontageSync_Follow_MontageLeader_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MontageSync_Follow_NativeFunction, "MontageLeader");
        Montage_StopWithBlendSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_StopWithBlendSettings");
        Montage_StopWithBlendSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_StopWithBlendSettings_NativeFunction);
        Montage_StopWithBlendSettings_BlendOutSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_StopWithBlendSettings_NativeFunction, "BlendOutSettings");
        Montage_StopWithBlendSettings_Montage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_StopWithBlendSettings_NativeFunction, "Montage");
        Montage_StopWithBlendOut_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_StopWithBlendOut");
        Montage_StopWithBlendOut_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_StopWithBlendOut_NativeFunction);
        Montage_StopWithBlendOut_BlendOut_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_StopWithBlendOut_NativeFunction, "BlendOut");
        Montage_StopWithBlendOut_Montage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_StopWithBlendOut_NativeFunction, "Montage");
        Montage_StopGroupByName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_StopGroupByName");
        Montage_StopGroupByName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_StopGroupByName_NativeFunction);
        Montage_StopGroupByName_InBlendOutTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_StopGroupByName_NativeFunction, "InBlendOutTime");
        Montage_StopGroupByName_GroupName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_StopGroupByName_NativeFunction, "GroupName");
        Montage_Stop_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_Stop");
        Montage_Stop_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_Stop_NativeFunction);
        Montage_Stop_InBlendOutTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_Stop_NativeFunction, "InBlendOutTime");
        Montage_Stop_Montage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_Stop_NativeFunction, "Montage");
        Montage_SetPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_SetPosition");
        Montage_SetPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_SetPosition_NativeFunction);
        Montage_SetPosition_Montage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_SetPosition_NativeFunction, "Montage");
        Montage_SetPosition_NewPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_SetPosition_NativeFunction, "NewPosition");
        Montage_SetPlayRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_SetPlayRate");
        Montage_SetPlayRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_SetPlayRate_NativeFunction);
        Montage_SetPlayRate_Montage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_SetPlayRate_NativeFunction, "Montage");
        Montage_SetPlayRate_NewPlayRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_SetPlayRate_NativeFunction, "NewPlayRate");
        Montage_SetNextSection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_SetNextSection");
        Montage_SetNextSection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_SetNextSection_NativeFunction);
        Montage_SetNextSection_SectionNameToChange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_SetNextSection_NativeFunction, "SectionNameToChange");
        Montage_SetNextSection_NextSection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_SetNextSection_NativeFunction, "NextSection");
        Montage_SetNextSection_Montage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_SetNextSection_NativeFunction, "Montage");
        Montage_Resume_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_Resume");
        Montage_Resume_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_Resume_NativeFunction);
        Montage_Resume_Montage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_Resume_NativeFunction, "Montage");
        Montage_PlayWithBlendSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_PlayWithBlendSettings");
        Montage_PlayWithBlendSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_PlayWithBlendSettings_NativeFunction);
        Montage_PlayWithBlendSettings_MontageToPlay_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_PlayWithBlendSettings_NativeFunction, "MontageToPlay");
        Montage_PlayWithBlendSettings_BlendInSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_PlayWithBlendSettings_NativeFunction, "BlendInSettings");
        Montage_PlayWithBlendSettings_InPlayRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_PlayWithBlendSettings_NativeFunction, "InPlayRate");
        Montage_PlayWithBlendSettings_ReturnValueType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_PlayWithBlendSettings_NativeFunction, "ReturnValueType");
        Montage_PlayWithBlendSettings_InTimeToStartMontageAt_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_PlayWithBlendSettings_NativeFunction, "InTimeToStartMontageAt");
        Montage_PlayWithBlendSettings_bStopAllMontages_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_PlayWithBlendSettings_NativeFunction, "bStopAllMontages");
        Montage_PlayWithBlendSettings_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_PlayWithBlendSettings_NativeFunction, "ReturnValue");
        Montage_PlayWithBlendIn_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_PlayWithBlendIn");
        Montage_PlayWithBlendIn_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_PlayWithBlendIn_NativeFunction);
        Montage_PlayWithBlendIn_MontageToPlay_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_PlayWithBlendIn_NativeFunction, "MontageToPlay");
        Montage_PlayWithBlendIn_BlendIn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_PlayWithBlendIn_NativeFunction, "BlendIn");
        Montage_PlayWithBlendIn_InPlayRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_PlayWithBlendIn_NativeFunction, "InPlayRate");
        Montage_PlayWithBlendIn_ReturnValueType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_PlayWithBlendIn_NativeFunction, "ReturnValueType");
        Montage_PlayWithBlendIn_InTimeToStartMontageAt_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_PlayWithBlendIn_NativeFunction, "InTimeToStartMontageAt");
        Montage_PlayWithBlendIn_bStopAllMontages_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_PlayWithBlendIn_NativeFunction, "bStopAllMontages");
        Montage_PlayWithBlendIn_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_PlayWithBlendIn_NativeFunction, "ReturnValue");
        Montage_Play_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_Play");
        Montage_Play_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_Play_NativeFunction);
        Montage_Play_MontageToPlay_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_Play_NativeFunction, "MontageToPlay");
        Montage_Play_InPlayRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_Play_NativeFunction, "InPlayRate");
        Montage_Play_ReturnValueType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_Play_NativeFunction, "ReturnValueType");
        Montage_Play_InTimeToStartMontageAt_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_Play_NativeFunction, "InTimeToStartMontageAt");
        Montage_Play_bStopAllMontages_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_Play_NativeFunction, "bStopAllMontages");
        Montage_Play_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_Play_NativeFunction, "ReturnValue");
        Montage_Pause_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_Pause");
        Montage_Pause_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_Pause_NativeFunction);
        Montage_Pause_Montage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_Pause_NativeFunction, "Montage");
        Montage_JumpToSectionsEnd_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_JumpToSectionsEnd");
        Montage_JumpToSectionsEnd_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_JumpToSectionsEnd_NativeFunction);
        Montage_JumpToSectionsEnd_SectionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_JumpToSectionsEnd_NativeFunction, "SectionName");
        Montage_JumpToSectionsEnd_Montage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_JumpToSectionsEnd_NativeFunction, "Montage");
        Montage_JumpToSection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_JumpToSection");
        Montage_JumpToSection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_JumpToSection_NativeFunction);
        Montage_JumpToSection_SectionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_JumpToSection_NativeFunction, "SectionName");
        Montage_JumpToSection_Montage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_JumpToSection_NativeFunction, "Montage");
        Montage_IsPlaying_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_IsPlaying");
        Montage_IsPlaying_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_IsPlaying_NativeFunction);
        Montage_IsPlaying_Montage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_IsPlaying_NativeFunction, "Montage");
        Montage_IsPlaying_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_IsPlaying_NativeFunction, "ReturnValue");
        Montage_IsActive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_IsActive");
        Montage_IsActive_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_IsActive_NativeFunction);
        Montage_IsActive_Montage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_IsActive_NativeFunction, "Montage");
        Montage_IsActive_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_IsActive_NativeFunction, "ReturnValue");
        Montage_GetPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_GetPosition");
        Montage_GetPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_GetPosition_NativeFunction);
        Montage_GetPosition_Montage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_GetPosition_NativeFunction, "Montage");
        Montage_GetPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_GetPosition_NativeFunction, "ReturnValue");
        Montage_GetPlayRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_GetPlayRate");
        Montage_GetPlayRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_GetPlayRate_NativeFunction);
        Montage_GetPlayRate_Montage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_GetPlayRate_NativeFunction, "Montage");
        Montage_GetPlayRate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_GetPlayRate_NativeFunction, "ReturnValue");
        Montage_GetIsStopped_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_GetIsStopped");
        Montage_GetIsStopped_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_GetIsStopped_NativeFunction);
        Montage_GetIsStopped_Montage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_GetIsStopped_NativeFunction, "Montage");
        Montage_GetIsStopped_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_GetIsStopped_NativeFunction, "ReturnValue");
        Montage_GetEffectivePlayRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_GetEffectivePlayRate");
        Montage_GetEffectivePlayRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_GetEffectivePlayRate_NativeFunction);
        Montage_GetEffectivePlayRate_Montage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_GetEffectivePlayRate_NativeFunction, "Montage");
        Montage_GetEffectivePlayRate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_GetEffectivePlayRate_NativeFunction, "ReturnValue");
        Montage_GetCurrentSection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_GetCurrentSection");
        Montage_GetCurrentSection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_GetCurrentSection_NativeFunction);
        Montage_GetCurrentSection_Montage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_GetCurrentSection_NativeFunction, "Montage");
        Montage_GetCurrentSection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_GetCurrentSection_NativeFunction, "ReturnValue");
        Montage_GetBlendTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Montage_GetBlendTime");
        Montage_GetBlendTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Montage_GetBlendTime_NativeFunction);
        Montage_GetBlendTime_Montage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_GetBlendTime_NativeFunction, "Montage");
        Montage_GetBlendTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Montage_GetBlendTime_NativeFunction, "ReturnValue");
        LockAIResources_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LockAIResources");
        LockAIResources_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LockAIResources_NativeFunction);
        LockAIResources_bLockMovement_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LockAIResources_NativeFunction, "bLockMovement");
        LockAIResources_LockAILogic_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LockAIResources_NativeFunction, "LockAILogic");
        LinkAnimGraphByTag_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinkAnimGraphByTag");
        LinkAnimGraphByTag_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinkAnimGraphByTag_NativeFunction);
        LinkAnimGraphByTag_InTag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinkAnimGraphByTag_NativeFunction, "InTag");
        LinkAnimGraphByTag_InClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinkAnimGraphByTag_NativeFunction, "InClass");
        LinkAnimClassLayers_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinkAnimClassLayers");
        LinkAnimClassLayers_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinkAnimClassLayers_NativeFunction);
        LinkAnimClassLayers_InClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinkAnimClassLayers_NativeFunction, "InClass");
        IsUsingMainInstanceMontageEvaluationData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsUsingMainInstanceMontageEvaluationData");
        IsUsingMainInstanceMontageEvaluationData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsUsingMainInstanceMontageEvaluationData_NativeFunction);
        IsUsingMainInstanceMontageEvaluationData_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsUsingMainInstanceMontageEvaluationData_NativeFunction, "ReturnValue");
        IsSyncGroupBetweenMarkers_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsSyncGroupBetweenMarkers");
        IsSyncGroupBetweenMarkers_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsSyncGroupBetweenMarkers_NativeFunction);
        IsSyncGroupBetweenMarkers_InSyncGroupName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSyncGroupBetweenMarkers_NativeFunction, "InSyncGroupName");
        IsSyncGroupBetweenMarkers_PreviousMarker_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSyncGroupBetweenMarkers_NativeFunction, "PreviousMarker");
        IsSyncGroupBetweenMarkers_NextMarker_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSyncGroupBetweenMarkers_NativeFunction, "NextMarker");
        IsSyncGroupBetweenMarkers_bRespectMarkerOrder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSyncGroupBetweenMarkers_NativeFunction, "bRespectMarkerOrder");
        IsSyncGroupBetweenMarkers_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSyncGroupBetweenMarkers_NativeFunction, "ReturnValue");
        IsSlotActive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsSlotActive");
        IsSlotActive_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsSlotActive_NativeFunction);
        IsSlotActive_SlotNodeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSlotActive_NativeFunction, "SlotNodeName");
        IsSlotActive_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSlotActive_NativeFunction, "ReturnValue");
        IsPlayingSlotAnimation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPlayingSlotAnimation");
        IsPlayingSlotAnimation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPlayingSlotAnimation_NativeFunction);
        IsPlayingSlotAnimation_Asset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPlayingSlotAnimation_NativeFunction, "Asset");
        IsPlayingSlotAnimation_SlotNodeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPlayingSlotAnimation_NativeFunction, "SlotNodeName");
        IsPlayingSlotAnimation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPlayingSlotAnimation_NativeFunction, "ReturnValue");
        IsAnyMontagePlaying_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsAnyMontagePlaying");
        IsAnyMontagePlaying_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsAnyMontagePlaying_NativeFunction);
        IsAnyMontagePlaying_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAnyMontagePlaying_NativeFunction, "ReturnValue");
        HasMarkerBeenHitThisFrame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasMarkerBeenHitThisFrame");
        HasMarkerBeenHitThisFrame_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasMarkerBeenHitThisFrame_NativeFunction);
        HasMarkerBeenHitThisFrame_SyncGroup_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasMarkerBeenHitThisFrame_NativeFunction, "SyncGroup");
        HasMarkerBeenHitThisFrame_MarkerName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasMarkerBeenHitThisFrame_NativeFunction, "MarkerName");
        HasMarkerBeenHitThisFrame_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasMarkerBeenHitThisFrame_NativeFunction, "ReturnValue");
        GetTimeToClosestMarker_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTimeToClosestMarker");
        GetTimeToClosestMarker_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTimeToClosestMarker_NativeFunction);
        GetTimeToClosestMarker_SyncGroup_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTimeToClosestMarker_NativeFunction, "SyncGroup");
        GetTimeToClosestMarker_MarkerName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTimeToClosestMarker_NativeFunction, "MarkerName");
        GetTimeToClosestMarker_OutMarkerTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTimeToClosestMarker_NativeFunction, "OutMarkerTime");
        GetTimeToClosestMarker_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTimeToClosestMarker_NativeFunction, "ReturnValue");
        GetSyncGroupPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSyncGroupPosition");
        GetSyncGroupPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSyncGroupPosition_NativeFunction);
        GetSyncGroupPosition_InSyncGroupName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSyncGroupPosition_NativeFunction, "InSyncGroupName");
        GetSyncGroupPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSyncGroupPosition_NativeFunction, "ReturnValue");
        GetReceiveNotifiesFromLinkedInstances_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetReceiveNotifiesFromLinkedInstances");
        GetReceiveNotifiesFromLinkedInstances_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetReceiveNotifiesFromLinkedInstances_NativeFunction);
        GetReceiveNotifiesFromLinkedInstances_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetReceiveNotifiesFromLinkedInstances_NativeFunction, "ReturnValue");
        GetPropagateNotifiesToLinkedInstances_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPropagateNotifiesToLinkedInstances");
        GetPropagateNotifiesToLinkedInstances_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPropagateNotifiesToLinkedInstances_NativeFunction);
        GetPropagateNotifiesToLinkedInstances_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPropagateNotifiesToLinkedInstances_NativeFunction, "ReturnValue");
        GetOwningComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOwningComponent");
        GetOwningComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOwningComponent_NativeFunction);
        GetOwningComponent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOwningComponent_NativeFunction, "ReturnValue");
        GetOwningActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOwningActor");
        GetOwningActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOwningActor_NativeFunction);
        GetOwningActor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOwningActor_NativeFunction, "ReturnValue");
        GetLinkedAnimLayerInstancesByGroup_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLinkedAnimLayerInstancesByGroup");
        GetLinkedAnimLayerInstancesByGroup_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLinkedAnimLayerInstancesByGroup_NativeFunction);
        GetLinkedAnimLayerInstancesByGroup_InGroup_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinkedAnimLayerInstancesByGroup_NativeFunction, "InGroup");
        GetLinkedAnimLayerInstancesByGroup_OutLinkedInstances_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinkedAnimLayerInstancesByGroup_NativeFunction, "OutLinkedInstances");
        GetLinkedAnimLayerInstancesByGroup_OutLinkedInstances_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLinkedAnimLayerInstancesByGroup_NativeFunction, "OutLinkedInstances");
        GetLinkedAnimLayerInstanceByGroupAndClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLinkedAnimLayerInstanceByGroupAndClass");
        GetLinkedAnimLayerInstanceByGroupAndClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLinkedAnimLayerInstanceByGroupAndClass_NativeFunction);
        GetLinkedAnimLayerInstanceByGroupAndClass_InGroup_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinkedAnimLayerInstanceByGroupAndClass_NativeFunction, "InGroup");
        GetLinkedAnimLayerInstanceByGroupAndClass_InClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinkedAnimLayerInstanceByGroupAndClass_NativeFunction, "InClass");
        GetLinkedAnimLayerInstanceByGroupAndClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinkedAnimLayerInstanceByGroupAndClass_NativeFunction, "ReturnValue");
        GetLinkedAnimLayerInstanceByGroup_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLinkedAnimLayerInstanceByGroup");
        GetLinkedAnimLayerInstanceByGroup_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLinkedAnimLayerInstanceByGroup_NativeFunction);
        GetLinkedAnimLayerInstanceByGroup_InGroup_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinkedAnimLayerInstanceByGroup_NativeFunction, "InGroup");
        GetLinkedAnimLayerInstanceByGroup_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinkedAnimLayerInstanceByGroup_NativeFunction, "ReturnValue");
        GetLinkedAnimLayerInstanceByClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLinkedAnimLayerInstanceByClass");
        GetLinkedAnimLayerInstanceByClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLinkedAnimLayerInstanceByClass_NativeFunction);
        GetLinkedAnimLayerInstanceByClass_InClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinkedAnimLayerInstanceByClass_NativeFunction, "InClass");
        GetLinkedAnimLayerInstanceByClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinkedAnimLayerInstanceByClass_NativeFunction, "ReturnValue");
        GetLinkedAnimGraphInstancesByTag_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLinkedAnimGraphInstancesByTag");
        GetLinkedAnimGraphInstancesByTag_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLinkedAnimGraphInstancesByTag_NativeFunction);
        GetLinkedAnimGraphInstancesByTag_InTag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinkedAnimGraphInstancesByTag_NativeFunction, "InTag");
        GetLinkedAnimGraphInstancesByTag_OutLinkedInstances_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinkedAnimGraphInstancesByTag_NativeFunction, "OutLinkedInstances");
        GetLinkedAnimGraphInstancesByTag_OutLinkedInstances_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetLinkedAnimGraphInstancesByTag_NativeFunction, "OutLinkedInstances");
        GetLinkedAnimGraphInstanceByTag_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLinkedAnimGraphInstanceByTag");
        GetLinkedAnimGraphInstanceByTag_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLinkedAnimGraphInstanceByTag_NativeFunction);
        GetLinkedAnimGraphInstanceByTag_InTag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinkedAnimGraphInstanceByTag_NativeFunction, "InTag");
        GetLinkedAnimGraphInstanceByTag_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinkedAnimGraphInstanceByTag_NativeFunction, "ReturnValue");
        GetDeltaSeconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDeltaSeconds");
        GetDeltaSeconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDeltaSeconds_NativeFunction);
        GetDeltaSeconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDeltaSeconds_NativeFunction, "ReturnValue");
        GetCurveValueWithDefault_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurveValueWithDefault");
        GetCurveValueWithDefault_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurveValueWithDefault_NativeFunction);
        GetCurveValueWithDefault_CurveName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurveValueWithDefault_NativeFunction, "CurveName");
        GetCurveValueWithDefault_DefaultValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurveValueWithDefault_NativeFunction, "DefaultValue");
        GetCurveValueWithDefault_OutValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurveValueWithDefault_NativeFunction, "OutValue");
        GetCurveValueWithDefault_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurveValueWithDefault_NativeFunction, "ReturnValue");
        GetCurveValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurveValue");
        GetCurveValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurveValue_NativeFunction);
        GetCurveValue_CurveName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurveValue_NativeFunction, "CurveName");
        GetCurveValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurveValue_NativeFunction, "ReturnValue");
        GetCurrentActiveMontage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentActiveMontage");
        GetCurrentActiveMontage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentActiveMontage_NativeFunction);
        GetCurrentActiveMontage_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentActiveMontage_NativeFunction, "ReturnValue");
        GetAllCurveNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAllCurveNames");
        GetAllCurveNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAllCurveNames_NativeFunction);
        GetAllCurveNames_OutNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllCurveNames_NativeFunction, "OutNames");
        GetAllCurveNames_OutNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAllCurveNames_NativeFunction, "OutNames");
        GetActiveCurveNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActiveCurveNames");
        GetActiveCurveNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActiveCurveNames_NativeFunction);
        GetActiveCurveNames_CurveType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActiveCurveNames_NativeFunction, "CurveType");
        GetActiveCurveNames_OutNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActiveCurveNames_NativeFunction, "OutNames");
        GetActiveCurveNames_OutNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetActiveCurveNames_NativeFunction, "OutNames");
        ClearTransitionEvents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearTransitionEvents");
        ClearTransitionEvents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClearTransitionEvents_NativeFunction);
        ClearTransitionEvents_EventName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearTransitionEvents_NativeFunction, "EventName");
        ClearMorphTargets_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearMorphTargets");
        ClearAllTransitionEvents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearAllTransitionEvents");
        CalculateDirection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CalculateDirection");
        CalculateDirection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CalculateDirection_NativeFunction);
        CalculateDirection_Velocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CalculateDirection_NativeFunction, "Velocity");
        CalculateDirection_BaseRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CalculateDirection_NativeFunction, "BaseRotation");
        CalculateDirection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CalculateDirection_NativeFunction, "ReturnValue");
        Blueprint_GetSlotMontageLocalWeight_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Blueprint_GetSlotMontageLocalWeight");
        Blueprint_GetSlotMontageLocalWeight_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Blueprint_GetSlotMontageLocalWeight_NativeFunction);
        Blueprint_GetSlotMontageLocalWeight_SlotNodeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_GetSlotMontageLocalWeight_NativeFunction, "SlotNodeName");
        Blueprint_GetSlotMontageLocalWeight_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_GetSlotMontageLocalWeight_NativeFunction, "ReturnValue");
        
        IntPtr BlueprintUpdateAnimation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BlueprintUpdateAnimation");
        BlueprintUpdateAnimation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BlueprintUpdateAnimation_NativeFunction);
        BlueprintUpdateAnimation_DeltaTimeX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintUpdateAnimation_NativeFunction, "DeltaTimeX");
        
        IntPtr BlueprintThreadSafeUpdateAnimation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BlueprintThreadSafeUpdateAnimation");
        BlueprintThreadSafeUpdateAnimation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BlueprintThreadSafeUpdateAnimation_NativeFunction);
        BlueprintThreadSafeUpdateAnimation_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintThreadSafeUpdateAnimation_NativeFunction, "DeltaTime");
        
        
    }
    
    protected AnimInstance(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.AnimInstance:WasAnimNotifyStateActiveInAnyState
    static readonly IntPtr WasAnimNotifyStateActiveInAnyState_NativeFunction;
    static readonly int WasAnimNotifyStateActiveInAnyState_ParamsSize;
    static readonly int WasAnimNotifyStateActiveInAnyState_AnimNotifyStateType_Offset;
    static readonly int WasAnimNotifyStateActiveInAnyState_ReturnValue_Offset;
    
    public bool WasAnimNotifyStateActiveInAnyState(SubclassOf<UnrealSharp.Engine.AnimNotifyState> animNotifyStateType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[WasAnimNotifyStateActiveInAnyState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.AnimNotifyState>.ToNative(IntPtr.Add(ParamsBuffer, WasAnimNotifyStateActiveInAnyState_AnimNotifyStateType_Offset), 0, null, animNotifyStateType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, WasAnimNotifyStateActiveInAnyState_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, WasAnimNotifyStateActiveInAnyState_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:UnlockAIResources
    static readonly IntPtr UnlockAIResources_NativeFunction;
    static readonly int UnlockAIResources_ParamsSize;
    static readonly int UnlockAIResources_bUnlockMovement_Offset;
    static readonly int UnlockAIResources_UnlockAILogic_Offset;
    
    [Obsolete("Use UnlockAIResourcesWithAnimation instead")]
    public void UnlockAIResources(bool bUnlockMovement, bool unlockAILogic)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UnlockAIResources_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, UnlockAIResources_bUnlockMovement_Offset), 0, null, bUnlockMovement);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, UnlockAIResources_UnlockAILogic_Offset), 0, null, unlockAILogic);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UnlockAIResources_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:UnlinkAnimClassLayers
    static readonly IntPtr UnlinkAnimClassLayers_NativeFunction;
    static readonly int UnlinkAnimClassLayers_ParamsSize;
    static readonly int UnlinkAnimClassLayers_InClass_Offset;
    
    public void UnlinkAnimClassLayers(SubclassOf<UnrealSharp.Engine.AnimInstance> inClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UnlinkAnimClassLayers_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.AnimInstance>.ToNative(IntPtr.Add(ParamsBuffer, UnlinkAnimClassLayers_InClass_Offset), 0, null, inClass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UnlinkAnimClassLayers_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:TryGetPawnOwner
    static readonly IntPtr TryGetPawnOwner_NativeFunction;
    static readonly int TryGetPawnOwner_ParamsSize;
    static readonly int TryGetPawnOwner_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Pawn TryGetPawnOwner()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TryGetPawnOwner_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, TryGetPawnOwner_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Pawn returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(ParamsBuffer, TryGetPawnOwner_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:StopSlotAnimation
    static readonly IntPtr StopSlotAnimation_NativeFunction;
    static readonly int StopSlotAnimation_ParamsSize;
    static readonly int StopSlotAnimation_InBlendOutTime_Offset;
    static readonly int StopSlotAnimation_SlotNodeName_Offset;
    
    public void StopSlotAnimation(float inBlendOutTime = 0.250000f, Name slotNodeName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StopSlotAnimation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, StopSlotAnimation_InBlendOutTime_Offset), 0, null, inBlendOutTime);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, StopSlotAnimation_SlotNodeName_Offset), 0, null, slotNodeName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopSlotAnimation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:SnapshotPose
    static readonly IntPtr SnapshotPose_NativeFunction;
    static readonly int SnapshotPose_ParamsSize;
    static readonly int SnapshotPose_Snapshot_Offset;
    
    public void SnapshotPose(ref UnrealSharp.Engine.PoseSnapshot snapshot)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SnapshotPose_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.PoseSnapshotMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SnapshotPose_Snapshot_Offset), 0, null, snapshot);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SnapshotPose_NativeFunction, ParamsBuffer);
            
            snapshot = UnrealSharp.Engine.PoseSnapshotMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SnapshotPose_Snapshot_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:SetUseMainInstanceMontageEvaluationData
    static readonly IntPtr SetUseMainInstanceMontageEvaluationData_NativeFunction;
    static readonly int SetUseMainInstanceMontageEvaluationData_ParamsSize;
    static readonly int SetUseMainInstanceMontageEvaluationData_bSet_Offset;
    
    public void SetUseMainInstanceMontageEvaluationData(bool bSet)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetUseMainInstanceMontageEvaluationData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetUseMainInstanceMontageEvaluationData_bSet_Offset), 0, null, bSet);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetUseMainInstanceMontageEvaluationData_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:SetRootMotionMode
    static readonly IntPtr SetRootMotionMode_NativeFunction;
    static readonly int SetRootMotionMode_ParamsSize;
    static readonly int SetRootMotionMode_Value_Offset;
    
    public void SetRootMotionMode(UnrealSharp.Engine.ERootMotionMode value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRootMotionMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ERootMotionMode>.ToNative(IntPtr.Add(ParamsBuffer, SetRootMotionMode_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRootMotionMode_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:SetReceiveNotifiesFromLinkedInstances
    static readonly IntPtr SetReceiveNotifiesFromLinkedInstances_NativeFunction;
    static readonly int SetReceiveNotifiesFromLinkedInstances_ParamsSize;
    static readonly int SetReceiveNotifiesFromLinkedInstances_bSet_Offset;
    
    public void SetReceiveNotifiesFromLinkedInstances(bool bSet)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetReceiveNotifiesFromLinkedInstances_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetReceiveNotifiesFromLinkedInstances_bSet_Offset), 0, null, bSet);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetReceiveNotifiesFromLinkedInstances_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:SetPropagateNotifiesToLinkedInstances
    static readonly IntPtr SetPropagateNotifiesToLinkedInstances_NativeFunction;
    static readonly int SetPropagateNotifiesToLinkedInstances_ParamsSize;
    static readonly int SetPropagateNotifiesToLinkedInstances_bSet_Offset;
    
    public void SetPropagateNotifiesToLinkedInstances(bool bSet)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPropagateNotifiesToLinkedInstances_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetPropagateNotifiesToLinkedInstances_bSet_Offset), 0, null, bSet);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPropagateNotifiesToLinkedInstances_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:SetMorphTarget
    static readonly IntPtr SetMorphTarget_NativeFunction;
    static readonly int SetMorphTarget_ParamsSize;
    static readonly int SetMorphTarget_MorphTargetName_Offset;
    static readonly int SetMorphTarget_Value_Offset;
    
    public void SetMorphTarget(Name morphTargetName, float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMorphTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetMorphTarget_MorphTargetName_Offset), 0, null, morphTargetName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMorphTarget_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMorphTarget_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:SavePoseSnapshot
    static readonly IntPtr SavePoseSnapshot_NativeFunction;
    static readonly int SavePoseSnapshot_ParamsSize;
    static readonly int SavePoseSnapshot_SnapshotName_Offset;
    
    public void SavePoseSnapshot(Name snapshotName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SavePoseSnapshot_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SavePoseSnapshot_SnapshotName_Offset), 0, null, snapshotName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SavePoseSnapshot_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:ResetDynamics
    static readonly IntPtr ResetDynamics_NativeFunction;
    static readonly int ResetDynamics_ParamsSize;
    static readonly int ResetDynamics_InTeleportType_Offset;
    
    public void ResetDynamics(UnrealSharp.Engine.ETeleportType inTeleportType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ResetDynamics_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ETeleportType>.ToNative(IntPtr.Add(ParamsBuffer, ResetDynamics_InTeleportType_Offset), 0, null, inTeleportType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetDynamics_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:RequestTransitionEvent
    static readonly IntPtr RequestTransitionEvent_NativeFunction;
    static readonly int RequestTransitionEvent_ParamsSize;
    static readonly int RequestTransitionEvent_EventName_Offset;
    static readonly int RequestTransitionEvent_RequestTimeout_Offset;
    static readonly int RequestTransitionEvent_QueueMode_Offset;
    static readonly int RequestTransitionEvent_OverwriteMode_Offset;
    static readonly int RequestTransitionEvent_ReturnValue_Offset;
    
    public bool RequestTransitionEvent(Name eventName, double requestTimeout, UnrealSharp.Engine.ETransitionRequestQueueMode queueMode, UnrealSharp.Engine.ETransitionRequestOverwriteMode overwriteMode)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RequestTransitionEvent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RequestTransitionEvent_EventName_Offset), 0, null, eventName);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, RequestTransitionEvent_RequestTimeout_Offset), 0, null, requestTimeout);
            BlittableMarshaller<UnrealSharp.Engine.ETransitionRequestQueueMode>.ToNative(IntPtr.Add(ParamsBuffer, RequestTransitionEvent_QueueMode_Offset), 0, null, queueMode);
            BlittableMarshaller<UnrealSharp.Engine.ETransitionRequestOverwriteMode>.ToNative(IntPtr.Add(ParamsBuffer, RequestTransitionEvent_OverwriteMode_Offset), 0, null, overwriteMode);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RequestTransitionEvent_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RequestTransitionEvent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:RequestSlotGroupInertialization
    static readonly IntPtr RequestSlotGroupInertialization_NativeFunction;
    static readonly int RequestSlotGroupInertialization_ParamsSize;
    static readonly int RequestSlotGroupInertialization_InSlotGroupName_Offset;
    static readonly int RequestSlotGroupInertialization_Duration_Offset;
    static readonly int RequestSlotGroupInertialization_BlendProfile_Offset;
    
    public void RequestSlotGroupInertialization(Name inSlotGroupName, float duration, UnrealSharp.Engine.BlendProfile blendProfile = default(UnrealSharp.Engine.BlendProfile))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RequestSlotGroupInertialization_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RequestSlotGroupInertialization_InSlotGroupName_Offset), 0, null, inSlotGroupName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RequestSlotGroupInertialization_Duration_Offset), 0, null, duration);
            ObjectMarshaller<UnrealSharp.Engine.BlendProfile>.ToNative(IntPtr.Add(ParamsBuffer, RequestSlotGroupInertialization_BlendProfile_Offset), 0, null, blendProfile);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RequestSlotGroupInertialization_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:RemovePoseSnapshot
    static readonly IntPtr RemovePoseSnapshot_NativeFunction;
    static readonly int RemovePoseSnapshot_ParamsSize;
    static readonly int RemovePoseSnapshot_SnapshotName_Offset;
    
    public void RemovePoseSnapshot(Name snapshotName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemovePoseSnapshot_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RemovePoseSnapshot_SnapshotName_Offset), 0, null, snapshotName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemovePoseSnapshot_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:PlaySlotAnimationAsDynamicMontage_WithBlendSettings
    static readonly IntPtr PlaySlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction;
    static readonly int PlaySlotAnimationAsDynamicMontage_WithBlendSettings_ParamsSize;
    static readonly int PlaySlotAnimationAsDynamicMontage_WithBlendSettings_Asset_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_WithBlendSettings_SlotNodeName_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_WithBlendSettings_BlendInSettings_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_WithBlendSettings_BlendOutSettings_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_WithBlendSettings_InPlayRate_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_WithBlendSettings_LoopCount_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_WithBlendSettings_BlendOutTriggerTime_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_WithBlendSettings_InTimeToStartMontageAt_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_WithBlendSettings_ReturnValue_Offset;
    
    public UnrealSharp.Engine.AnimMontage PlaySlotAnimationAsDynamicMontage_WithBlendSettings(UnrealSharp.Engine.AnimSequenceBase asset, Name slotNodeName, UnrealSharp.Engine.MontageBlendSettings blendInSettings, UnrealSharp.Engine.MontageBlendSettings blendOutSettings, float inPlayRate = 1.000000f, int loopCount = 1, float blendOutTriggerTime = -1.000000f, float inTimeToStartMontageAt = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PlaySlotAnimationAsDynamicMontage_WithBlendSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_WithBlendSettings_Asset_Offset), 0, null, asset);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_WithBlendSettings_SlotNodeName_Offset), 0, null, slotNodeName);
            UnrealSharp.Engine.MontageBlendSettingsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_WithBlendSettings_BlendInSettings_Offset), 0, null, blendInSettings);
            UnrealSharp.Engine.MontageBlendSettingsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_WithBlendSettings_BlendOutSettings_Offset), 0, null, blendOutSettings);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_WithBlendSettings_InPlayRate_Offset), 0, null, inPlayRate);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_WithBlendSettings_LoopCount_Offset), 0, null, loopCount);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_WithBlendSettings_BlendOutTriggerTime_Offset), 0, null, blendOutTriggerTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_WithBlendSettings_InTimeToStartMontageAt_Offset), 0, null, inTimeToStartMontageAt);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PlaySlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AnimMontage returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.FromNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_WithBlendSettings_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:PlaySlotAnimationAsDynamicMontage_WithBlendArgs
    static readonly IntPtr PlaySlotAnimationAsDynamicMontage_WithBlendArgs_NativeFunction;
    static readonly int PlaySlotAnimationAsDynamicMontage_WithBlendArgs_ParamsSize;
    static readonly int PlaySlotAnimationAsDynamicMontage_WithBlendArgs_Asset_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_WithBlendArgs_SlotNodeName_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_WithBlendArgs_BlendIn_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_WithBlendArgs_BlendOut_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_WithBlendArgs_InPlayRate_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_WithBlendArgs_LoopCount_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_WithBlendArgs_BlendOutTriggerTime_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_WithBlendArgs_InTimeToStartMontageAt_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_WithBlendArgs_ReturnValue_Offset;
    
    public UnrealSharp.Engine.AnimMontage PlaySlotAnimationAsDynamicMontage_WithBlendArgs(UnrealSharp.Engine.AnimSequenceBase asset, Name slotNodeName, UnrealSharp.Engine.AlphaBlendArgs blendIn, UnrealSharp.Engine.AlphaBlendArgs blendOut, float inPlayRate = 1.000000f, int loopCount = 1, float blendOutTriggerTime = -1.000000f, float inTimeToStartMontageAt = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PlaySlotAnimationAsDynamicMontage_WithBlendArgs_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_WithBlendArgs_Asset_Offset), 0, null, asset);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_WithBlendArgs_SlotNodeName_Offset), 0, null, slotNodeName);
            UnrealSharp.Engine.AlphaBlendArgsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_WithBlendArgs_BlendIn_Offset), 0, null, blendIn);
            UnrealSharp.Engine.AlphaBlendArgsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_WithBlendArgs_BlendOut_Offset), 0, null, blendOut);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_WithBlendArgs_InPlayRate_Offset), 0, null, inPlayRate);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_WithBlendArgs_LoopCount_Offset), 0, null, loopCount);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_WithBlendArgs_BlendOutTriggerTime_Offset), 0, null, blendOutTriggerTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_WithBlendArgs_InTimeToStartMontageAt_Offset), 0, null, inTimeToStartMontageAt);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PlaySlotAnimationAsDynamicMontage_WithBlendArgs_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AnimMontage returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.FromNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_WithBlendArgs_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:PlaySlotAnimationAsDynamicMontage
    static readonly IntPtr PlaySlotAnimationAsDynamicMontage_NativeFunction;
    static readonly int PlaySlotAnimationAsDynamicMontage_ParamsSize;
    static readonly int PlaySlotAnimationAsDynamicMontage_Asset_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_SlotNodeName_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_BlendInTime_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_BlendOutTime_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_InPlayRate_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_LoopCount_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_BlendOutTriggerTime_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_InTimeToStartMontageAt_Offset;
    static readonly int PlaySlotAnimationAsDynamicMontage_ReturnValue_Offset;
    
    public UnrealSharp.Engine.AnimMontage PlaySlotAnimationAsDynamicMontage(UnrealSharp.Engine.AnimSequenceBase asset, Name slotNodeName, float blendInTime = 0.250000f, float blendOutTime = 0.250000f, float inPlayRate = 1.000000f, int loopCount = 1, float blendOutTriggerTime = -1.000000f, float inTimeToStartMontageAt = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PlaySlotAnimationAsDynamicMontage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_Asset_Offset), 0, null, asset);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_SlotNodeName_Offset), 0, null, slotNodeName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_BlendInTime_Offset), 0, null, blendInTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_BlendOutTime_Offset), 0, null, blendOutTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_InPlayRate_Offset), 0, null, inPlayRate);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_LoopCount_Offset), 0, null, loopCount);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_BlendOutTriggerTime_Offset), 0, null, blendOutTriggerTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_InTimeToStartMontageAt_Offset), 0, null, inTimeToStartMontageAt);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PlaySlotAnimationAsDynamicMontage_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AnimMontage returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.FromNative(IntPtr.Add(ParamsBuffer, PlaySlotAnimationAsDynamicMontage_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:MontageSync_StopFollowing
    static readonly IntPtr MontageSync_StopFollowing_NativeFunction;
    static readonly int MontageSync_StopFollowing_ParamsSize;
    static readonly int MontageSync_StopFollowing_MontageFollower_Offset;
    
    public void MontageSync_StopFollowing(UnrealSharp.Engine.AnimMontage montageFollower)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MontageSync_StopFollowing_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, MontageSync_StopFollowing_MontageFollower_Offset), 0, null, montageFollower);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, MontageSync_StopFollowing_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:MontageSync_Follow
    static readonly IntPtr MontageSync_Follow_NativeFunction;
    static readonly int MontageSync_Follow_ParamsSize;
    static readonly int MontageSync_Follow_MontageFollower_Offset;
    static readonly int MontageSync_Follow_OtherAnimInstance_Offset;
    static readonly int MontageSync_Follow_MontageLeader_Offset;
    
    public void MontageSync_Follow(UnrealSharp.Engine.AnimMontage montageFollower, UnrealSharp.Engine.AnimInstance otherAnimInstance, UnrealSharp.Engine.AnimMontage montageLeader)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MontageSync_Follow_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, MontageSync_Follow_MontageFollower_Offset), 0, null, montageFollower);
            ObjectMarshaller<UnrealSharp.Engine.AnimInstance>.ToNative(IntPtr.Add(ParamsBuffer, MontageSync_Follow_OtherAnimInstance_Offset), 0, null, otherAnimInstance);
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, MontageSync_Follow_MontageLeader_Offset), 0, null, montageLeader);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, MontageSync_Follow_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_StopWithBlendSettings
    static readonly IntPtr Montage_StopWithBlendSettings_NativeFunction;
    static readonly int Montage_StopWithBlendSettings_ParamsSize;
    static readonly int Montage_StopWithBlendSettings_BlendOutSettings_Offset;
    static readonly int Montage_StopWithBlendSettings_Montage_Offset;
    
    public void Montage_StopWithBlendSettings(UnrealSharp.Engine.MontageBlendSettings blendOutSettings, UnrealSharp.Engine.AnimMontage montage = default(UnrealSharp.Engine.AnimMontage))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_StopWithBlendSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.MontageBlendSettingsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Montage_StopWithBlendSettings_BlendOutSettings_Offset), 0, null, blendOutSettings);
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, Montage_StopWithBlendSettings_Montage_Offset), 0, null, montage);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_StopWithBlendSettings_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_StopWithBlendOut
    static readonly IntPtr Montage_StopWithBlendOut_NativeFunction;
    static readonly int Montage_StopWithBlendOut_ParamsSize;
    static readonly int Montage_StopWithBlendOut_BlendOut_Offset;
    static readonly int Montage_StopWithBlendOut_Montage_Offset;
    
    public void Montage_StopWithBlendOut(UnrealSharp.Engine.AlphaBlendArgs blendOut, UnrealSharp.Engine.AnimMontage montage = default(UnrealSharp.Engine.AnimMontage))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_StopWithBlendOut_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AlphaBlendArgsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Montage_StopWithBlendOut_BlendOut_Offset), 0, null, blendOut);
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, Montage_StopWithBlendOut_Montage_Offset), 0, null, montage);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_StopWithBlendOut_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_StopGroupByName
    static readonly IntPtr Montage_StopGroupByName_NativeFunction;
    static readonly int Montage_StopGroupByName_ParamsSize;
    static readonly int Montage_StopGroupByName_InBlendOutTime_Offset;
    static readonly int Montage_StopGroupByName_GroupName_Offset;
    
    public void Montage_StopGroupByName(float inBlendOutTime, Name groupName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_StopGroupByName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Montage_StopGroupByName_InBlendOutTime_Offset), 0, null, inBlendOutTime);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, Montage_StopGroupByName_GroupName_Offset), 0, null, groupName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_StopGroupByName_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_Stop
    static readonly IntPtr Montage_Stop_NativeFunction;
    static readonly int Montage_Stop_ParamsSize;
    static readonly int Montage_Stop_InBlendOutTime_Offset;
    static readonly int Montage_Stop_Montage_Offset;
    
    public void Montage_Stop(float inBlendOutTime, UnrealSharp.Engine.AnimMontage montage = default(UnrealSharp.Engine.AnimMontage))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_Stop_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Montage_Stop_InBlendOutTime_Offset), 0, null, inBlendOutTime);
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, Montage_Stop_Montage_Offset), 0, null, montage);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_Stop_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_SetPosition
    static readonly IntPtr Montage_SetPosition_NativeFunction;
    static readonly int Montage_SetPosition_ParamsSize;
    static readonly int Montage_SetPosition_Montage_Offset;
    static readonly int Montage_SetPosition_NewPosition_Offset;
    
    public void Montage_SetPosition(UnrealSharp.Engine.AnimMontage montage, float newPosition)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_SetPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, Montage_SetPosition_Montage_Offset), 0, null, montage);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Montage_SetPosition_NewPosition_Offset), 0, null, newPosition);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_SetPosition_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_SetPlayRate
    static readonly IntPtr Montage_SetPlayRate_NativeFunction;
    static readonly int Montage_SetPlayRate_ParamsSize;
    static readonly int Montage_SetPlayRate_Montage_Offset;
    static readonly int Montage_SetPlayRate_NewPlayRate_Offset;
    
    public void Montage_SetPlayRate(UnrealSharp.Engine.AnimMontage montage, float newPlayRate = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_SetPlayRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, Montage_SetPlayRate_Montage_Offset), 0, null, montage);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Montage_SetPlayRate_NewPlayRate_Offset), 0, null, newPlayRate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_SetPlayRate_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_SetNextSection
    static readonly IntPtr Montage_SetNextSection_NativeFunction;
    static readonly int Montage_SetNextSection_ParamsSize;
    static readonly int Montage_SetNextSection_SectionNameToChange_Offset;
    static readonly int Montage_SetNextSection_NextSection_Offset;
    static readonly int Montage_SetNextSection_Montage_Offset;
    
    public void Montage_SetNextSection(Name sectionNameToChange, Name nextSection, UnrealSharp.Engine.AnimMontage montage = default(UnrealSharp.Engine.AnimMontage))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_SetNextSection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, Montage_SetNextSection_SectionNameToChange_Offset), 0, null, sectionNameToChange);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, Montage_SetNextSection_NextSection_Offset), 0, null, nextSection);
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, Montage_SetNextSection_Montage_Offset), 0, null, montage);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_SetNextSection_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_Resume
    static readonly IntPtr Montage_Resume_NativeFunction;
    static readonly int Montage_Resume_ParamsSize;
    static readonly int Montage_Resume_Montage_Offset;
    
    public void Montage_Resume(UnrealSharp.Engine.AnimMontage montage)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_Resume_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, Montage_Resume_Montage_Offset), 0, null, montage);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_Resume_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_PlayWithBlendSettings
    static readonly IntPtr Montage_PlayWithBlendSettings_NativeFunction;
    static readonly int Montage_PlayWithBlendSettings_ParamsSize;
    static readonly int Montage_PlayWithBlendSettings_MontageToPlay_Offset;
    static readonly int Montage_PlayWithBlendSettings_BlendInSettings_Offset;
    static readonly int Montage_PlayWithBlendSettings_InPlayRate_Offset;
    static readonly int Montage_PlayWithBlendSettings_ReturnValueType_Offset;
    static readonly int Montage_PlayWithBlendSettings_InTimeToStartMontageAt_Offset;
    static readonly int Montage_PlayWithBlendSettings_bStopAllMontages_Offset;
    static readonly int Montage_PlayWithBlendSettings_ReturnValue_Offset;
    
    public float Montage_PlayWithBlendSettings(UnrealSharp.Engine.AnimMontage montageToPlay, UnrealSharp.Engine.MontageBlendSettings blendInSettings, float inPlayRate = 1.000000f, UnrealSharp.Engine.EMontagePlayReturnType returnValueType = UnrealSharp.Engine.EMontagePlayReturnType.MontageLength, float inTimeToStartMontageAt = 0.000000f, bool bStopAllMontages = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_PlayWithBlendSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, Montage_PlayWithBlendSettings_MontageToPlay_Offset), 0, null, montageToPlay);
            UnrealSharp.Engine.MontageBlendSettingsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Montage_PlayWithBlendSettings_BlendInSettings_Offset), 0, null, blendInSettings);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Montage_PlayWithBlendSettings_InPlayRate_Offset), 0, null, inPlayRate);
            BlittableMarshaller<UnrealSharp.Engine.EMontagePlayReturnType>.ToNative(IntPtr.Add(ParamsBuffer, Montage_PlayWithBlendSettings_ReturnValueType_Offset), 0, null, returnValueType);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Montage_PlayWithBlendSettings_InTimeToStartMontageAt_Offset), 0, null, inTimeToStartMontageAt);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, Montage_PlayWithBlendSettings_bStopAllMontages_Offset), 0, null, bStopAllMontages);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_PlayWithBlendSettings_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, Montage_PlayWithBlendSettings_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_PlayWithBlendIn
    static readonly IntPtr Montage_PlayWithBlendIn_NativeFunction;
    static readonly int Montage_PlayWithBlendIn_ParamsSize;
    static readonly int Montage_PlayWithBlendIn_MontageToPlay_Offset;
    static readonly int Montage_PlayWithBlendIn_BlendIn_Offset;
    static readonly int Montage_PlayWithBlendIn_InPlayRate_Offset;
    static readonly int Montage_PlayWithBlendIn_ReturnValueType_Offset;
    static readonly int Montage_PlayWithBlendIn_InTimeToStartMontageAt_Offset;
    static readonly int Montage_PlayWithBlendIn_bStopAllMontages_Offset;
    static readonly int Montage_PlayWithBlendIn_ReturnValue_Offset;
    
    public float Montage_PlayWithBlendIn(UnrealSharp.Engine.AnimMontage montageToPlay, UnrealSharp.Engine.AlphaBlendArgs blendIn, float inPlayRate = 1.000000f, UnrealSharp.Engine.EMontagePlayReturnType returnValueType = UnrealSharp.Engine.EMontagePlayReturnType.MontageLength, float inTimeToStartMontageAt = 0.000000f, bool bStopAllMontages = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_PlayWithBlendIn_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, Montage_PlayWithBlendIn_MontageToPlay_Offset), 0, null, montageToPlay);
            UnrealSharp.Engine.AlphaBlendArgsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Montage_PlayWithBlendIn_BlendIn_Offset), 0, null, blendIn);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Montage_PlayWithBlendIn_InPlayRate_Offset), 0, null, inPlayRate);
            BlittableMarshaller<UnrealSharp.Engine.EMontagePlayReturnType>.ToNative(IntPtr.Add(ParamsBuffer, Montage_PlayWithBlendIn_ReturnValueType_Offset), 0, null, returnValueType);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Montage_PlayWithBlendIn_InTimeToStartMontageAt_Offset), 0, null, inTimeToStartMontageAt);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, Montage_PlayWithBlendIn_bStopAllMontages_Offset), 0, null, bStopAllMontages);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_PlayWithBlendIn_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, Montage_PlayWithBlendIn_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_Play
    static readonly IntPtr Montage_Play_NativeFunction;
    static readonly int Montage_Play_ParamsSize;
    static readonly int Montage_Play_MontageToPlay_Offset;
    static readonly int Montage_Play_InPlayRate_Offset;
    static readonly int Montage_Play_ReturnValueType_Offset;
    static readonly int Montage_Play_InTimeToStartMontageAt_Offset;
    static readonly int Montage_Play_bStopAllMontages_Offset;
    static readonly int Montage_Play_ReturnValue_Offset;
    
    public float Montage_Play(UnrealSharp.Engine.AnimMontage montageToPlay, float inPlayRate = 1.000000f, UnrealSharp.Engine.EMontagePlayReturnType returnValueType = UnrealSharp.Engine.EMontagePlayReturnType.MontageLength, float inTimeToStartMontageAt = 0.000000f, bool bStopAllMontages = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_Play_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, Montage_Play_MontageToPlay_Offset), 0, null, montageToPlay);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Montage_Play_InPlayRate_Offset), 0, null, inPlayRate);
            BlittableMarshaller<UnrealSharp.Engine.EMontagePlayReturnType>.ToNative(IntPtr.Add(ParamsBuffer, Montage_Play_ReturnValueType_Offset), 0, null, returnValueType);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Montage_Play_InTimeToStartMontageAt_Offset), 0, null, inTimeToStartMontageAt);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, Montage_Play_bStopAllMontages_Offset), 0, null, bStopAllMontages);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_Play_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, Montage_Play_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_Pause
    static readonly IntPtr Montage_Pause_NativeFunction;
    static readonly int Montage_Pause_ParamsSize;
    static readonly int Montage_Pause_Montage_Offset;
    
    public void Montage_Pause(UnrealSharp.Engine.AnimMontage montage = default(UnrealSharp.Engine.AnimMontage))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_Pause_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, Montage_Pause_Montage_Offset), 0, null, montage);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_Pause_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_JumpToSectionsEnd
    static readonly IntPtr Montage_JumpToSectionsEnd_NativeFunction;
    static readonly int Montage_JumpToSectionsEnd_ParamsSize;
    static readonly int Montage_JumpToSectionsEnd_SectionName_Offset;
    static readonly int Montage_JumpToSectionsEnd_Montage_Offset;
    
    public void Montage_JumpToSectionsEnd(Name sectionName, UnrealSharp.Engine.AnimMontage montage = default(UnrealSharp.Engine.AnimMontage))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_JumpToSectionsEnd_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, Montage_JumpToSectionsEnd_SectionName_Offset), 0, null, sectionName);
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, Montage_JumpToSectionsEnd_Montage_Offset), 0, null, montage);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_JumpToSectionsEnd_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_JumpToSection
    static readonly IntPtr Montage_JumpToSection_NativeFunction;
    static readonly int Montage_JumpToSection_ParamsSize;
    static readonly int Montage_JumpToSection_SectionName_Offset;
    static readonly int Montage_JumpToSection_Montage_Offset;
    
    public void Montage_JumpToSection(Name sectionName, UnrealSharp.Engine.AnimMontage montage = default(UnrealSharp.Engine.AnimMontage))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_JumpToSection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, Montage_JumpToSection_SectionName_Offset), 0, null, sectionName);
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, Montage_JumpToSection_Montage_Offset), 0, null, montage);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_JumpToSection_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_IsPlaying
    static readonly IntPtr Montage_IsPlaying_NativeFunction;
    static readonly int Montage_IsPlaying_ParamsSize;
    static readonly int Montage_IsPlaying_Montage_Offset;
    static readonly int Montage_IsPlaying_ReturnValue_Offset;
    
    public bool Montage_IsPlaying(UnrealSharp.Engine.AnimMontage montage)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_IsPlaying_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, Montage_IsPlaying_Montage_Offset), 0, null, montage);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_IsPlaying_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Montage_IsPlaying_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_IsActive
    static readonly IntPtr Montage_IsActive_NativeFunction;
    static readonly int Montage_IsActive_ParamsSize;
    static readonly int Montage_IsActive_Montage_Offset;
    static readonly int Montage_IsActive_ReturnValue_Offset;
    
    public bool Montage_IsActive(UnrealSharp.Engine.AnimMontage montage)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_IsActive_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, Montage_IsActive_Montage_Offset), 0, null, montage);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_IsActive_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Montage_IsActive_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_GetPosition
    static readonly IntPtr Montage_GetPosition_NativeFunction;
    static readonly int Montage_GetPosition_ParamsSize;
    static readonly int Montage_GetPosition_Montage_Offset;
    static readonly int Montage_GetPosition_ReturnValue_Offset;
    
    public float Montage_GetPosition(UnrealSharp.Engine.AnimMontage montage)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_GetPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, Montage_GetPosition_Montage_Offset), 0, null, montage);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_GetPosition_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, Montage_GetPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_GetPlayRate
    static readonly IntPtr Montage_GetPlayRate_NativeFunction;
    static readonly int Montage_GetPlayRate_ParamsSize;
    static readonly int Montage_GetPlayRate_Montage_Offset;
    static readonly int Montage_GetPlayRate_ReturnValue_Offset;
    
    public float Montage_GetPlayRate(UnrealSharp.Engine.AnimMontage montage)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_GetPlayRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, Montage_GetPlayRate_Montage_Offset), 0, null, montage);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_GetPlayRate_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, Montage_GetPlayRate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_GetIsStopped
    static readonly IntPtr Montage_GetIsStopped_NativeFunction;
    static readonly int Montage_GetIsStopped_ParamsSize;
    static readonly int Montage_GetIsStopped_Montage_Offset;
    static readonly int Montage_GetIsStopped_ReturnValue_Offset;
    
    public bool Montage_GetIsStopped(UnrealSharp.Engine.AnimMontage montage)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_GetIsStopped_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, Montage_GetIsStopped_Montage_Offset), 0, null, montage);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_GetIsStopped_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Montage_GetIsStopped_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_GetEffectivePlayRate
    static readonly IntPtr Montage_GetEffectivePlayRate_NativeFunction;
    static readonly int Montage_GetEffectivePlayRate_ParamsSize;
    static readonly int Montage_GetEffectivePlayRate_Montage_Offset;
    static readonly int Montage_GetEffectivePlayRate_ReturnValue_Offset;
    
    public float Montage_GetEffectivePlayRate(UnrealSharp.Engine.AnimMontage montage)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_GetEffectivePlayRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, Montage_GetEffectivePlayRate_Montage_Offset), 0, null, montage);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_GetEffectivePlayRate_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, Montage_GetEffectivePlayRate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_GetCurrentSection
    static readonly IntPtr Montage_GetCurrentSection_NativeFunction;
    static readonly int Montage_GetCurrentSection_ParamsSize;
    static readonly int Montage_GetCurrentSection_Montage_Offset;
    static readonly int Montage_GetCurrentSection_ReturnValue_Offset;
    
    public Name Montage_GetCurrentSection(UnrealSharp.Engine.AnimMontage montage = default(UnrealSharp.Engine.AnimMontage))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_GetCurrentSection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, Montage_GetCurrentSection_Montage_Offset), 0, null, montage);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_GetCurrentSection_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, Montage_GetCurrentSection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:Montage_GetBlendTime
    static readonly IntPtr Montage_GetBlendTime_NativeFunction;
    static readonly int Montage_GetBlendTime_ParamsSize;
    static readonly int Montage_GetBlendTime_Montage_Offset;
    static readonly int Montage_GetBlendTime_ReturnValue_Offset;
    
    public float Montage_GetBlendTime(UnrealSharp.Engine.AnimMontage montage)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Montage_GetBlendTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, Montage_GetBlendTime_Montage_Offset), 0, null, montage);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Montage_GetBlendTime_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, Montage_GetBlendTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:LockAIResources
    static readonly IntPtr LockAIResources_NativeFunction;
    static readonly int LockAIResources_ParamsSize;
    static readonly int LockAIResources_bLockMovement_Offset;
    static readonly int LockAIResources_LockAILogic_Offset;
    
    [Obsolete("Use LockAIResourcesWithAnimation instead")]
    public void LockAIResources(bool bLockMovement, bool lockAILogic)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LockAIResources_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LockAIResources_bLockMovement_Offset), 0, null, bLockMovement);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LockAIResources_LockAILogic_Offset), 0, null, lockAILogic);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, LockAIResources_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:LinkAnimGraphByTag
    static readonly IntPtr LinkAnimGraphByTag_NativeFunction;
    static readonly int LinkAnimGraphByTag_ParamsSize;
    static readonly int LinkAnimGraphByTag_InTag_Offset;
    static readonly int LinkAnimGraphByTag_InClass_Offset;
    
    public void LinkAnimGraphByTag(Name inTag, SubclassOf<UnrealSharp.Engine.AnimInstance> inClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinkAnimGraphByTag_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, LinkAnimGraphByTag_InTag_Offset), 0, null, inTag);
            SubclassOfMarshaller<UnrealSharp.Engine.AnimInstance>.ToNative(IntPtr.Add(ParamsBuffer, LinkAnimGraphByTag_InClass_Offset), 0, null, inClass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, LinkAnimGraphByTag_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:LinkAnimClassLayers
    static readonly IntPtr LinkAnimClassLayers_NativeFunction;
    static readonly int LinkAnimClassLayers_ParamsSize;
    static readonly int LinkAnimClassLayers_InClass_Offset;
    
    public void LinkAnimClassLayers(SubclassOf<UnrealSharp.Engine.AnimInstance> inClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinkAnimClassLayers_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.AnimInstance>.ToNative(IntPtr.Add(ParamsBuffer, LinkAnimClassLayers_InClass_Offset), 0, null, inClass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, LinkAnimClassLayers_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:IsUsingMainInstanceMontageEvaluationData
    static readonly IntPtr IsUsingMainInstanceMontageEvaluationData_NativeFunction;
    static readonly int IsUsingMainInstanceMontageEvaluationData_ParamsSize;
    static readonly int IsUsingMainInstanceMontageEvaluationData_ReturnValue_Offset;
    
    public bool IsUsingMainInstanceMontageEvaluationData()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsUsingMainInstanceMontageEvaluationData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsUsingMainInstanceMontageEvaluationData_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsUsingMainInstanceMontageEvaluationData_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:IsSyncGroupBetweenMarkers
    static readonly IntPtr IsSyncGroupBetweenMarkers_NativeFunction;
    static readonly int IsSyncGroupBetweenMarkers_ParamsSize;
    static readonly int IsSyncGroupBetweenMarkers_InSyncGroupName_Offset;
    static readonly int IsSyncGroupBetweenMarkers_PreviousMarker_Offset;
    static readonly int IsSyncGroupBetweenMarkers_NextMarker_Offset;
    static readonly int IsSyncGroupBetweenMarkers_bRespectMarkerOrder_Offset;
    static readonly int IsSyncGroupBetweenMarkers_ReturnValue_Offset;
    
    public bool IsSyncGroupBetweenMarkers(Name inSyncGroupName, Name previousMarker, Name nextMarker, bool bRespectMarkerOrder = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsSyncGroupBetweenMarkers_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, IsSyncGroupBetweenMarkers_InSyncGroupName_Offset), 0, null, inSyncGroupName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, IsSyncGroupBetweenMarkers_PreviousMarker_Offset), 0, null, previousMarker);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, IsSyncGroupBetweenMarkers_NextMarker_Offset), 0, null, nextMarker);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, IsSyncGroupBetweenMarkers_bRespectMarkerOrder_Offset), 0, null, bRespectMarkerOrder);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsSyncGroupBetweenMarkers_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsSyncGroupBetweenMarkers_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:IsSlotActive
    static readonly IntPtr IsSlotActive_NativeFunction;
    static readonly int IsSlotActive_ParamsSize;
    static readonly int IsSlotActive_SlotNodeName_Offset;
    static readonly int IsSlotActive_ReturnValue_Offset;
    
    public bool IsSlotActive(Name slotNodeName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsSlotActive_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, IsSlotActive_SlotNodeName_Offset), 0, null, slotNodeName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsSlotActive_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsSlotActive_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:IsPlayingSlotAnimation
    static readonly IntPtr IsPlayingSlotAnimation_NativeFunction;
    static readonly int IsPlayingSlotAnimation_ParamsSize;
    static readonly int IsPlayingSlotAnimation_Asset_Offset;
    static readonly int IsPlayingSlotAnimation_SlotNodeName_Offset;
    static readonly int IsPlayingSlotAnimation_ReturnValue_Offset;
    
    public bool IsPlayingSlotAnimation(UnrealSharp.Engine.AnimSequenceBase asset, Name slotNodeName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPlayingSlotAnimation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, IsPlayingSlotAnimation_Asset_Offset), 0, null, asset);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, IsPlayingSlotAnimation_SlotNodeName_Offset), 0, null, slotNodeName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsPlayingSlotAnimation_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPlayingSlotAnimation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:IsAnyMontagePlaying
    static readonly IntPtr IsAnyMontagePlaying_NativeFunction;
    static readonly int IsAnyMontagePlaying_ParamsSize;
    static readonly int IsAnyMontagePlaying_ReturnValue_Offset;
    
    public bool IsAnyMontagePlaying()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsAnyMontagePlaying_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsAnyMontagePlaying_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsAnyMontagePlaying_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:HasMarkerBeenHitThisFrame
    static readonly IntPtr HasMarkerBeenHitThisFrame_NativeFunction;
    static readonly int HasMarkerBeenHitThisFrame_ParamsSize;
    static readonly int HasMarkerBeenHitThisFrame_SyncGroup_Offset;
    static readonly int HasMarkerBeenHitThisFrame_MarkerName_Offset;
    static readonly int HasMarkerBeenHitThisFrame_ReturnValue_Offset;
    
    public bool HasMarkerBeenHitThisFrame(Name syncGroup, Name markerName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasMarkerBeenHitThisFrame_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, HasMarkerBeenHitThisFrame_SyncGroup_Offset), 0, null, syncGroup);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, HasMarkerBeenHitThisFrame_MarkerName_Offset), 0, null, markerName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasMarkerBeenHitThisFrame_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasMarkerBeenHitThisFrame_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:GetTimeToClosestMarker
    static readonly IntPtr GetTimeToClosestMarker_NativeFunction;
    static readonly int GetTimeToClosestMarker_ParamsSize;
    static readonly int GetTimeToClosestMarker_SyncGroup_Offset;
    static readonly int GetTimeToClosestMarker_MarkerName_Offset;
    static readonly int GetTimeToClosestMarker_OutMarkerTime_Offset;
    static readonly int GetTimeToClosestMarker_ReturnValue_Offset;
    
    public bool GetTimeToClosestMarker(Name syncGroup, Name markerName, out float outMarkerTime)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTimeToClosestMarker_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetTimeToClosestMarker_SyncGroup_Offset), 0, null, syncGroup);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetTimeToClosestMarker_MarkerName_Offset), 0, null, markerName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTimeToClosestMarker_NativeFunction, ParamsBuffer);
            
            outMarkerTime = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetTimeToClosestMarker_OutMarkerTime_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetTimeToClosestMarker_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:GetSyncGroupPosition
    static readonly IntPtr GetSyncGroupPosition_NativeFunction;
    static readonly int GetSyncGroupPosition_ParamsSize;
    static readonly int GetSyncGroupPosition_InSyncGroupName_Offset;
    static readonly int GetSyncGroupPosition_ReturnValue_Offset;
    
    public UnrealSharp.Engine.MarkerSyncAnimPosition GetSyncGroupPosition(Name inSyncGroupName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSyncGroupPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetSyncGroupPosition_InSyncGroupName_Offset), 0, null, inSyncGroupName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSyncGroupPosition_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MarkerSyncAnimPosition returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Engine.MarkerSyncAnimPosition>.FromNative(IntPtr.Add(ParamsBuffer, GetSyncGroupPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:GetReceiveNotifiesFromLinkedInstances
    static readonly IntPtr GetReceiveNotifiesFromLinkedInstances_NativeFunction;
    static readonly int GetReceiveNotifiesFromLinkedInstances_ParamsSize;
    static readonly int GetReceiveNotifiesFromLinkedInstances_ReturnValue_Offset;
    
    public bool GetReceiveNotifiesFromLinkedInstances()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetReceiveNotifiesFromLinkedInstances_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetReceiveNotifiesFromLinkedInstances_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetReceiveNotifiesFromLinkedInstances_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:GetPropagateNotifiesToLinkedInstances
    static readonly IntPtr GetPropagateNotifiesToLinkedInstances_NativeFunction;
    static readonly int GetPropagateNotifiesToLinkedInstances_ParamsSize;
    static readonly int GetPropagateNotifiesToLinkedInstances_ReturnValue_Offset;
    
    public bool GetPropagateNotifiesToLinkedInstances()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPropagateNotifiesToLinkedInstances_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPropagateNotifiesToLinkedInstances_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetPropagateNotifiesToLinkedInstances_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:GetOwningComponent
    static readonly IntPtr GetOwningComponent_NativeFunction;
    static readonly int GetOwningComponent_ParamsSize;
    static readonly int GetOwningComponent_ReturnValue_Offset;
    
    public UnrealSharp.Engine.SkeletalMeshComponent GetOwningComponent()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOwningComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOwningComponent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.SkeletalMeshComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.SkeletalMeshComponent>.FromNative(IntPtr.Add(ParamsBuffer, GetOwningComponent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:GetOwningActor
    static readonly IntPtr GetOwningActor_NativeFunction;
    static readonly int GetOwningActor_ParamsSize;
    static readonly int GetOwningActor_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Actor GetOwningActor()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOwningActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOwningActor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Actor returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(ParamsBuffer, GetOwningActor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:GetLinkedAnimLayerInstancesByGroup
    static readonly IntPtr GetLinkedAnimLayerInstancesByGroup_NativeFunction;
    static readonly int GetLinkedAnimLayerInstancesByGroup_ParamsSize;
    static readonly int GetLinkedAnimLayerInstancesByGroup_InGroup_Offset;
    static readonly int GetLinkedAnimLayerInstancesByGroup_OutLinkedInstances_Offset;
    static readonly int GetLinkedAnimLayerInstancesByGroup_OutLinkedInstances_ElementSize;
    
    public void GetLinkedAnimLayerInstancesByGroup(Name inGroup, out System.Collections.Generic.IList<UnrealSharp.Engine.AnimInstance> outLinkedInstances)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLinkedAnimLayerInstancesByGroup_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLinkedAnimLayerInstancesByGroup_InGroup_Offset), 0, null, inGroup);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLinkedAnimLayerInstancesByGroup_NativeFunction, ParamsBuffer);
            
            IntPtr OutLinkedInstances_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLinkedAnimLayerInstancesByGroup_OutLinkedInstances_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimInstance> OutLinkedInstances_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimInstance> (1, ObjectMarshaller<UnrealSharp.Engine.AnimInstance>.ToNative, ObjectMarshaller<UnrealSharp.Engine.AnimInstance>.FromNative, GetLinkedAnimLayerInstancesByGroup_OutLinkedInstances_ElementSize);
            outLinkedInstances = OutLinkedInstances_Marshaler.FromNative(OutLinkedInstances_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimInstance>.DestructInstance(OutLinkedInstances_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:GetLinkedAnimLayerInstanceByGroupAndClass
    static readonly IntPtr GetLinkedAnimLayerInstanceByGroupAndClass_NativeFunction;
    static readonly int GetLinkedAnimLayerInstanceByGroupAndClass_ParamsSize;
    static readonly int GetLinkedAnimLayerInstanceByGroupAndClass_InGroup_Offset;
    static readonly int GetLinkedAnimLayerInstanceByGroupAndClass_InClass_Offset;
    static readonly int GetLinkedAnimLayerInstanceByGroupAndClass_ReturnValue_Offset;
    
    public UnrealSharp.Engine.AnimInstance GetLinkedAnimLayerInstanceByGroupAndClass(Name inGroup, SubclassOf<UnrealSharp.Engine.AnimInstance> inClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLinkedAnimLayerInstanceByGroupAndClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLinkedAnimLayerInstanceByGroupAndClass_InGroup_Offset), 0, null, inGroup);
            SubclassOfMarshaller<UnrealSharp.Engine.AnimInstance>.ToNative(IntPtr.Add(ParamsBuffer, GetLinkedAnimLayerInstanceByGroupAndClass_InClass_Offset), 0, null, inClass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLinkedAnimLayerInstanceByGroupAndClass_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AnimInstance returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AnimInstance>.FromNative(IntPtr.Add(ParamsBuffer, GetLinkedAnimLayerInstanceByGroupAndClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:GetLinkedAnimLayerInstanceByGroup
    static readonly IntPtr GetLinkedAnimLayerInstanceByGroup_NativeFunction;
    static readonly int GetLinkedAnimLayerInstanceByGroup_ParamsSize;
    static readonly int GetLinkedAnimLayerInstanceByGroup_InGroup_Offset;
    static readonly int GetLinkedAnimLayerInstanceByGroup_ReturnValue_Offset;
    
    public UnrealSharp.Engine.AnimInstance GetLinkedAnimLayerInstanceByGroup(Name inGroup)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLinkedAnimLayerInstanceByGroup_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLinkedAnimLayerInstanceByGroup_InGroup_Offset), 0, null, inGroup);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLinkedAnimLayerInstanceByGroup_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AnimInstance returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AnimInstance>.FromNative(IntPtr.Add(ParamsBuffer, GetLinkedAnimLayerInstanceByGroup_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:GetLinkedAnimLayerInstanceByClass
    static readonly IntPtr GetLinkedAnimLayerInstanceByClass_NativeFunction;
    static readonly int GetLinkedAnimLayerInstanceByClass_ParamsSize;
    static readonly int GetLinkedAnimLayerInstanceByClass_InClass_Offset;
    static readonly int GetLinkedAnimLayerInstanceByClass_ReturnValue_Offset;
    
    public UnrealSharp.Engine.AnimInstance GetLinkedAnimLayerInstanceByClass(SubclassOf<UnrealSharp.Engine.AnimInstance> inClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLinkedAnimLayerInstanceByClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.AnimInstance>.ToNative(IntPtr.Add(ParamsBuffer, GetLinkedAnimLayerInstanceByClass_InClass_Offset), 0, null, inClass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLinkedAnimLayerInstanceByClass_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AnimInstance returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AnimInstance>.FromNative(IntPtr.Add(ParamsBuffer, GetLinkedAnimLayerInstanceByClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:GetLinkedAnimGraphInstancesByTag
    static readonly IntPtr GetLinkedAnimGraphInstancesByTag_NativeFunction;
    static readonly int GetLinkedAnimGraphInstancesByTag_ParamsSize;
    static readonly int GetLinkedAnimGraphInstancesByTag_InTag_Offset;
    static readonly int GetLinkedAnimGraphInstancesByTag_OutLinkedInstances_Offset;
    static readonly int GetLinkedAnimGraphInstancesByTag_OutLinkedInstances_ElementSize;
    
    [Obsolete("Tags are unique so this function is no longer supported. Please use GetLinkedAnimGraphInstanceByTag instead")]
    public void GetLinkedAnimGraphInstancesByTag(Name inTag, out System.Collections.Generic.IList<UnrealSharp.Engine.AnimInstance> outLinkedInstances)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLinkedAnimGraphInstancesByTag_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLinkedAnimGraphInstancesByTag_InTag_Offset), 0, null, inTag);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLinkedAnimGraphInstancesByTag_NativeFunction, ParamsBuffer);
            
            IntPtr OutLinkedInstances_NativeBuffer = IntPtr.Add(ParamsBuffer, GetLinkedAnimGraphInstancesByTag_OutLinkedInstances_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimInstance> OutLinkedInstances_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimInstance> (1, ObjectMarshaller<UnrealSharp.Engine.AnimInstance>.ToNative, ObjectMarshaller<UnrealSharp.Engine.AnimInstance>.FromNative, GetLinkedAnimGraphInstancesByTag_OutLinkedInstances_ElementSize);
            outLinkedInstances = OutLinkedInstances_Marshaler.FromNative(OutLinkedInstances_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.AnimInstance>.DestructInstance(OutLinkedInstances_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:GetLinkedAnimGraphInstanceByTag
    static readonly IntPtr GetLinkedAnimGraphInstanceByTag_NativeFunction;
    static readonly int GetLinkedAnimGraphInstanceByTag_ParamsSize;
    static readonly int GetLinkedAnimGraphInstanceByTag_InTag_Offset;
    static readonly int GetLinkedAnimGraphInstanceByTag_ReturnValue_Offset;
    
    public UnrealSharp.Engine.AnimInstance GetLinkedAnimGraphInstanceByTag(Name inTag)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLinkedAnimGraphInstanceByTag_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetLinkedAnimGraphInstanceByTag_InTag_Offset), 0, null, inTag);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLinkedAnimGraphInstanceByTag_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AnimInstance returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AnimInstance>.FromNative(IntPtr.Add(ParamsBuffer, GetLinkedAnimGraphInstanceByTag_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:GetDeltaSeconds
    static readonly IntPtr GetDeltaSeconds_NativeFunction;
    static readonly int GetDeltaSeconds_ParamsSize;
    static readonly int GetDeltaSeconds_ReturnValue_Offset;
    
    public float GetDeltaSeconds()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDeltaSeconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDeltaSeconds_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetDeltaSeconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:GetCurveValueWithDefault
    static readonly IntPtr GetCurveValueWithDefault_NativeFunction;
    static readonly int GetCurveValueWithDefault_ParamsSize;
    static readonly int GetCurveValueWithDefault_CurveName_Offset;
    static readonly int GetCurveValueWithDefault_DefaultValue_Offset;
    static readonly int GetCurveValueWithDefault_OutValue_Offset;
    static readonly int GetCurveValueWithDefault_ReturnValue_Offset;
    
    public bool GetCurveValueWithDefault(Name curveName, float defaultValue, out float outValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurveValueWithDefault_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetCurveValueWithDefault_CurveName_Offset), 0, null, curveName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetCurveValueWithDefault_DefaultValue_Offset), 0, null, defaultValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurveValueWithDefault_NativeFunction, ParamsBuffer);
            
            outValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCurveValueWithDefault_OutValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCurveValueWithDefault_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:GetCurveValue
    static readonly IntPtr GetCurveValue_NativeFunction;
    static readonly int GetCurveValue_ParamsSize;
    static readonly int GetCurveValue_CurveName_Offset;
    static readonly int GetCurveValue_ReturnValue_Offset;
    
    public float GetCurveValue(Name curveName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurveValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetCurveValue_CurveName_Offset), 0, null, curveName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurveValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCurveValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:GetCurrentActiveMontage
    static readonly IntPtr GetCurrentActiveMontage_NativeFunction;
    static readonly int GetCurrentActiveMontage_ParamsSize;
    static readonly int GetCurrentActiveMontage_ReturnValue_Offset;
    
    public UnrealSharp.Engine.AnimMontage GetCurrentActiveMontage()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentActiveMontage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurrentActiveMontage_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AnimMontage returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentActiveMontage_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:GetAllCurveNames
    static readonly IntPtr GetAllCurveNames_NativeFunction;
    static readonly int GetAllCurveNames_ParamsSize;
    static readonly int GetAllCurveNames_OutNames_Offset;
    static readonly int GetAllCurveNames_OutNames_ElementSize;
    
    public void GetAllCurveNames(out System.Collections.Generic.IList<Name> outNames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAllCurveNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAllCurveNames_NativeFunction, ParamsBuffer);
            
            IntPtr OutNames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAllCurveNames_OutNames_Offset);
            UnrealArrayCopyMarshaler<Name> OutNames_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetAllCurveNames_OutNames_ElementSize);
            outNames = OutNames_Marshaler.FromNative(OutNames_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(OutNames_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:GetActiveCurveNames
    static readonly IntPtr GetActiveCurveNames_NativeFunction;
    static readonly int GetActiveCurveNames_ParamsSize;
    static readonly int GetActiveCurveNames_CurveType_Offset;
    static readonly int GetActiveCurveNames_OutNames_Offset;
    static readonly int GetActiveCurveNames_OutNames_ElementSize;
    
    public void GetActiveCurveNames(UnrealSharp.Engine.EAnimCurveType curveType, out System.Collections.Generic.IList<Name> outNames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActiveCurveNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EAnimCurveType>.ToNative(IntPtr.Add(ParamsBuffer, GetActiveCurveNames_CurveType_Offset), 0, null, curveType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetActiveCurveNames_NativeFunction, ParamsBuffer);
            
            IntPtr OutNames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetActiveCurveNames_OutNames_Offset);
            UnrealArrayCopyMarshaler<Name> OutNames_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetActiveCurveNames_OutNames_ElementSize);
            outNames = OutNames_Marshaler.FromNative(OutNames_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(OutNames_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:ClearTransitionEvents
    static readonly IntPtr ClearTransitionEvents_NativeFunction;
    static readonly int ClearTransitionEvents_ParamsSize;
    static readonly int ClearTransitionEvents_EventName_Offset;
    
    public void ClearTransitionEvents(Name eventName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClearTransitionEvents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ClearTransitionEvents_EventName_Offset), 0, null, eventName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearTransitionEvents_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimInstance:ClearMorphTargets
    static readonly IntPtr ClearMorphTargets_NativeFunction;
    
    public void ClearMorphTargets()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearMorphTargets_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.AnimInstance:ClearAllTransitionEvents
    static readonly IntPtr ClearAllTransitionEvents_NativeFunction;
    
    public void ClearAllTransitionEvents()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearAllTransitionEvents_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.AnimInstance:CalculateDirection
    static readonly IntPtr CalculateDirection_NativeFunction;
    static readonly int CalculateDirection_ParamsSize;
    static readonly int CalculateDirection_Velocity_Offset;
    static readonly int CalculateDirection_BaseRotation_Offset;
    static readonly int CalculateDirection_ReturnValue_Offset;
    
    public float CalculateDirection(System.DoubleNumerics.Vector3 velocity, UnrealSharp.Rotator baseRotation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CalculateDirection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, CalculateDirection_Velocity_Offset), 0, null, velocity);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, CalculateDirection_BaseRotation_Offset), 0, null, baseRotation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CalculateDirection_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, CalculateDirection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:Blueprint_GetSlotMontageLocalWeight
    static readonly IntPtr Blueprint_GetSlotMontageLocalWeight_NativeFunction;
    static readonly int Blueprint_GetSlotMontageLocalWeight_ParamsSize;
    static readonly int Blueprint_GetSlotMontageLocalWeight_SlotNodeName_Offset;
    static readonly int Blueprint_GetSlotMontageLocalWeight_ReturnValue_Offset;
    
    public float Blueprint_GetSlotMontageLocalWeight(Name slotNodeName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Blueprint_GetSlotMontageLocalWeight_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_GetSlotMontageLocalWeight_SlotNodeName_Offset), 0, null, slotNodeName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Blueprint_GetSlotMontageLocalWeight_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, Blueprint_GetSlotMontageLocalWeight_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimInstance:BlueprintUpdateAnimation
    IntPtr BlueprintUpdateAnimation_NativeFunction;
    static readonly int BlueprintUpdateAnimation_ParamsSize;
    static readonly int BlueprintUpdateAnimation_DeltaTimeX_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void BlueprintUpdateAnimation(float deltaTimeX)
    {
        unsafe
        {
            if (BlueprintUpdateAnimation_NativeFunction == IntPtr.Zero)
            {
                BlueprintUpdateAnimation_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "BlueprintUpdateAnimation");
            }
            byte* ParamsBufferAllocation = stackalloc byte[BlueprintUpdateAnimation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, BlueprintUpdateAnimation_DeltaTimeX_Offset), 0, null, deltaTimeX);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BlueprintUpdateAnimation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void BlueprintUpdateAnimation_Implementation(float deltaTimeX)
    {
    }
    void Invoke_BlueprintUpdateAnimation(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            float deltaTimeX = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, BlueprintUpdateAnimation_DeltaTimeX_Offset), 0, null);
            BlueprintUpdateAnimation_Implementation(deltaTimeX);
        }
    }
    
    // Function /Script/Engine.AnimInstance:BlueprintThreadSafeUpdateAnimation
    IntPtr BlueprintThreadSafeUpdateAnimation_NativeFunction;
    static readonly int BlueprintThreadSafeUpdateAnimation_ParamsSize;
    static readonly int BlueprintThreadSafeUpdateAnimation_DeltaTime_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void BlueprintThreadSafeUpdateAnimation(float deltaTime)
    {
        unsafe
        {
            if (BlueprintThreadSafeUpdateAnimation_NativeFunction == IntPtr.Zero)
            {
                BlueprintThreadSafeUpdateAnimation_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "BlueprintThreadSafeUpdateAnimation");
            }
            byte* ParamsBufferAllocation = stackalloc byte[BlueprintThreadSafeUpdateAnimation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, BlueprintThreadSafeUpdateAnimation_DeltaTime_Offset), 0, null, deltaTime);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BlueprintThreadSafeUpdateAnimation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void BlueprintThreadSafeUpdateAnimation_Implementation(float deltaTime)
    {
    }
    void Invoke_BlueprintThreadSafeUpdateAnimation(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            float deltaTime = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, BlueprintThreadSafeUpdateAnimation_DeltaTime_Offset), 0, null);
            BlueprintThreadSafeUpdateAnimation_Implementation(deltaTime);
        }
    }
    
    // Function /Script/Engine.AnimInstance:BlueprintPostEvaluateAnimation
    IntPtr BlueprintPostEvaluateAnimation_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void BlueprintPostEvaluateAnimation()
    {
        unsafe
        {
            if (BlueprintPostEvaluateAnimation_NativeFunction == IntPtr.Zero)
            {
                BlueprintPostEvaluateAnimation_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "BlueprintPostEvaluateAnimation");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BlueprintPostEvaluateAnimation_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void BlueprintPostEvaluateAnimation_Implementation()
    {
    }
    void Invoke_BlueprintPostEvaluateAnimation(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            BlueprintPostEvaluateAnimation_Implementation();
        }
    }
    
    // Function /Script/Engine.AnimInstance:BlueprintLinkedAnimationLayersInitialized
    IntPtr BlueprintLinkedAnimationLayersInitialized_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void BlueprintLinkedAnimationLayersInitialized()
    {
        unsafe
        {
            if (BlueprintLinkedAnimationLayersInitialized_NativeFunction == IntPtr.Zero)
            {
                BlueprintLinkedAnimationLayersInitialized_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "BlueprintLinkedAnimationLayersInitialized");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BlueprintLinkedAnimationLayersInitialized_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void BlueprintLinkedAnimationLayersInitialized_Implementation()
    {
    }
    void Invoke_BlueprintLinkedAnimationLayersInitialized(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            BlueprintLinkedAnimationLayersInitialized_Implementation();
        }
    }
    
    // Function /Script/Engine.AnimInstance:BlueprintInitializeAnimation
    IntPtr BlueprintInitializeAnimation_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void BlueprintInitializeAnimation()
    {
        unsafe
        {
            if (BlueprintInitializeAnimation_NativeFunction == IntPtr.Zero)
            {
                BlueprintInitializeAnimation_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "BlueprintInitializeAnimation");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BlueprintInitializeAnimation_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void BlueprintInitializeAnimation_Implementation()
    {
    }
    void Invoke_BlueprintInitializeAnimation(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            BlueprintInitializeAnimation_Implementation();
        }
    }
    
    // Function /Script/Engine.AnimInstance:BlueprintBeginPlay
    IntPtr BlueprintBeginPlay_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void BlueprintBeginPlay()
    {
        unsafe
        {
            if (BlueprintBeginPlay_NativeFunction == IntPtr.Zero)
            {
                BlueprintBeginPlay_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "BlueprintBeginPlay");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BlueprintBeginPlay_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void BlueprintBeginPlay_Implementation()
    {
    }
    void Invoke_BlueprintBeginPlay(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            BlueprintBeginPlay_Implementation();
        }
    }
    
    
}
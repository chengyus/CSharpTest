// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class AnimMontage : UnrealSharp.Engine.AnimCompositeBase
{
    
    static readonly IntPtr NativeClassPtr;
    static AnimMontage()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AnimMontage");
        
        BlendModeIn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BlendModeIn");
        BlendModeOut_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BlendModeOut");
        BlendProfileIn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BlendProfileIn");
        BlendProfileOut_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BlendProfileOut");
        
        IsValidSectionName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValidSectionName");
        IsValidSectionName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValidSectionName_NativeFunction);
        IsValidSectionName_InSectionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidSectionName_NativeFunction, "InSectionName");
        IsValidSectionName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidSectionName_NativeFunction, "ReturnValue");
        IsValidAdditiveSlot_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValidAdditiveSlot");
        IsValidAdditiveSlot_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValidAdditiveSlot_NativeFunction);
        IsValidAdditiveSlot_SlotNodeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidAdditiveSlot_NativeFunction, "SlotNodeName");
        IsValidAdditiveSlot_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidAdditiveSlot_NativeFunction, "ReturnValue");
        GetSectionName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSectionName");
        GetSectionName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSectionName_NativeFunction);
        GetSectionName_SectionIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSectionName_NativeFunction, "SectionIndex");
        GetSectionName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSectionName_NativeFunction, "ReturnValue");
        GetSectionIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSectionIndex");
        GetSectionIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSectionIndex_NativeFunction);
        GetSectionIndex_InSectionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSectionIndex_NativeFunction, "InSectionName");
        GetSectionIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSectionIndex_NativeFunction, "ReturnValue");
        GetNumSections_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumSections");
        GetNumSections_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumSections_NativeFunction);
        GetNumSections_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumSections_NativeFunction, "ReturnValue");
        GetGroupName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGroupName");
        GetGroupName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGroupName_NativeFunction);
        GetGroupName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGroupName_NativeFunction, "ReturnValue");
        GetDefaultBlendOutTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDefaultBlendOutTime");
        GetDefaultBlendOutTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDefaultBlendOutTime_NativeFunction);
        GetDefaultBlendOutTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultBlendOutTime_NativeFunction, "ReturnValue");
        GetDefaultBlendInTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDefaultBlendInTime");
        GetDefaultBlendInTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDefaultBlendInTime_NativeFunction);
        GetDefaultBlendInTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultBlendInTime_NativeFunction, "ReturnValue");
        GetBlendOutArgs_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBlendOutArgs");
        GetBlendOutArgs_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBlendOutArgs_NativeFunction);
        GetBlendOutArgs_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBlendOutArgs_NativeFunction, "ReturnValue");
        GetBlendInArgs_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBlendInArgs");
        GetBlendInArgs_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBlendInArgs_NativeFunction);
        GetBlendInArgs_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBlendInArgs_NativeFunction, "ReturnValue");
        CreateSlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateSlotAnimationAsDynamicMontage_WithBlendSettings");
        CreateSlotAnimationAsDynamicMontage_WithBlendSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateSlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction);
        CreateSlotAnimationAsDynamicMontage_WithBlendSettings_Asset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateSlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction, "Asset");
        CreateSlotAnimationAsDynamicMontage_WithBlendSettings_SlotNodeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateSlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction, "SlotNodeName");
        CreateSlotAnimationAsDynamicMontage_WithBlendSettings_BlendInSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateSlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction, "BlendInSettings");
        CreateSlotAnimationAsDynamicMontage_WithBlendSettings_BlendOutSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateSlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction, "BlendOutSettings");
        CreateSlotAnimationAsDynamicMontage_WithBlendSettings_InPlayRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateSlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction, "InPlayRate");
        CreateSlotAnimationAsDynamicMontage_WithBlendSettings_LoopCount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateSlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction, "LoopCount");
        CreateSlotAnimationAsDynamicMontage_WithBlendSettings_InBlendOutTriggerTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateSlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction, "InBlendOutTriggerTime");
        CreateSlotAnimationAsDynamicMontage_WithBlendSettings_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateSlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction, "ReturnValue");
        
        
    }
    
    protected AnimMontage(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // EnumProperty /Script/Engine.AnimMontage:BlendModeIn
    static readonly int BlendModeIn_Offset;
    
    public UnrealSharp.Engine.EMontageBlendMode BlendModeIn
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EMontageBlendMode>.FromNative(IntPtr.Add(NativeObject, BlendModeIn_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/Engine.AnimMontage:BlendModeOut
    static readonly int BlendModeOut_Offset;
    
    public UnrealSharp.Engine.EMontageBlendMode BlendModeOut
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EMontageBlendMode>.FromNative(IntPtr.Add(NativeObject, BlendModeOut_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/Engine.AnimMontage:BlendProfileIn
    static readonly int BlendProfileIn_Offset;
    
    public UnrealSharp.Engine.BlendProfile BlendProfileIn
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.BlendProfile>.FromNative(IntPtr.Add(NativeObject, BlendProfileIn_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/Engine.AnimMontage:BlendProfileOut
    static readonly int BlendProfileOut_Offset;
    
    public UnrealSharp.Engine.BlendProfile BlendProfileOut
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.BlendProfile>.FromNative(IntPtr.Add(NativeObject, BlendProfileOut_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.AnimMontage:IsValidSectionName
    static readonly IntPtr IsValidSectionName_NativeFunction;
    static readonly int IsValidSectionName_ParamsSize;
    static readonly int IsValidSectionName_InSectionName_Offset;
    static readonly int IsValidSectionName_ReturnValue_Offset;
    
    public bool IsValidSectionName(Name inSectionName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValidSectionName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, IsValidSectionName_InSectionName_Offset), 0, null, inSectionName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsValidSectionName_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValidSectionName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimMontage:IsValidAdditiveSlot
    static readonly IntPtr IsValidAdditiveSlot_NativeFunction;
    static readonly int IsValidAdditiveSlot_ParamsSize;
    static readonly int IsValidAdditiveSlot_SlotNodeName_Offset;
    static readonly int IsValidAdditiveSlot_ReturnValue_Offset;
    
    public bool IsValidAdditiveSlot(Name slotNodeName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValidAdditiveSlot_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, IsValidAdditiveSlot_SlotNodeName_Offset), 0, null, slotNodeName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsValidAdditiveSlot_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValidAdditiveSlot_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimMontage:GetSectionName
    static readonly IntPtr GetSectionName_NativeFunction;
    static readonly int GetSectionName_ParamsSize;
    static readonly int GetSectionName_SectionIndex_Offset;
    static readonly int GetSectionName_ReturnValue_Offset;
    
    public Name GetSectionName(int sectionIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSectionName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetSectionName_SectionIndex_Offset), 0, null, sectionIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSectionName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetSectionName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimMontage:GetSectionIndex
    static readonly IntPtr GetSectionIndex_NativeFunction;
    static readonly int GetSectionIndex_ParamsSize;
    static readonly int GetSectionIndex_InSectionName_Offset;
    static readonly int GetSectionIndex_ReturnValue_Offset;
    
    public int GetSectionIndex(Name inSectionName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSectionIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetSectionIndex_InSectionName_Offset), 0, null, inSectionName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSectionIndex_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetSectionIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimMontage:GetNumSections
    static readonly IntPtr GetNumSections_NativeFunction;
    static readonly int GetNumSections_ParamsSize;
    static readonly int GetNumSections_ReturnValue_Offset;
    
    public int GetNumSections()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumSections_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumSections_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumSections_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimMontage:GetGroupName
    static readonly IntPtr GetGroupName_NativeFunction;
    static readonly int GetGroupName_ParamsSize;
    static readonly int GetGroupName_ReturnValue_Offset;
    
    public Name GetGroupName()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGroupName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetGroupName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetGroupName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimMontage:GetDefaultBlendOutTime
    static readonly IntPtr GetDefaultBlendOutTime_NativeFunction;
    static readonly int GetDefaultBlendOutTime_ParamsSize;
    static readonly int GetDefaultBlendOutTime_ReturnValue_Offset;
    
    public float GetDefaultBlendOutTime()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDefaultBlendOutTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDefaultBlendOutTime_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetDefaultBlendOutTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimMontage:GetDefaultBlendInTime
    static readonly IntPtr GetDefaultBlendInTime_NativeFunction;
    static readonly int GetDefaultBlendInTime_ParamsSize;
    static readonly int GetDefaultBlendInTime_ReturnValue_Offset;
    
    public float GetDefaultBlendInTime()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDefaultBlendInTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDefaultBlendInTime_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetDefaultBlendInTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimMontage:GetBlendOutArgs
    static readonly IntPtr GetBlendOutArgs_NativeFunction;
    static readonly int GetBlendOutArgs_ParamsSize;
    static readonly int GetBlendOutArgs_ReturnValue_Offset;
    
    public UnrealSharp.Engine.AlphaBlendArgs GetBlendOutArgs()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBlendOutArgs_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBlendOutArgs_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AlphaBlendArgs returnValue;
            returnValue = UnrealSharp.Engine.AlphaBlendArgsMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetBlendOutArgs_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimMontage:GetBlendInArgs
    static readonly IntPtr GetBlendInArgs_NativeFunction;
    static readonly int GetBlendInArgs_ParamsSize;
    static readonly int GetBlendInArgs_ReturnValue_Offset;
    
    public UnrealSharp.Engine.AlphaBlendArgs GetBlendInArgs()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBlendInArgs_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBlendInArgs_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AlphaBlendArgs returnValue;
            returnValue = UnrealSharp.Engine.AlphaBlendArgsMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetBlendInArgs_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimMontage:CreateSlotAnimationAsDynamicMontage_WithBlendSettings
    static readonly IntPtr CreateSlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction;
    static readonly int CreateSlotAnimationAsDynamicMontage_WithBlendSettings_ParamsSize;
    static readonly int CreateSlotAnimationAsDynamicMontage_WithBlendSettings_Asset_Offset;
    static readonly int CreateSlotAnimationAsDynamicMontage_WithBlendSettings_SlotNodeName_Offset;
    static readonly int CreateSlotAnimationAsDynamicMontage_WithBlendSettings_BlendInSettings_Offset;
    static readonly int CreateSlotAnimationAsDynamicMontage_WithBlendSettings_BlendOutSettings_Offset;
    static readonly int CreateSlotAnimationAsDynamicMontage_WithBlendSettings_InPlayRate_Offset;
    static readonly int CreateSlotAnimationAsDynamicMontage_WithBlendSettings_LoopCount_Offset;
    static readonly int CreateSlotAnimationAsDynamicMontage_WithBlendSettings_InBlendOutTriggerTime_Offset;
    static readonly int CreateSlotAnimationAsDynamicMontage_WithBlendSettings_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.AnimMontage CreateSlotAnimationAsDynamicMontage_WithBlendSettings(UnrealSharp.Engine.AnimSequenceBase asset, Name slotNodeName, UnrealSharp.Engine.MontageBlendSettings blendInSettings, UnrealSharp.Engine.MontageBlendSettings blendOutSettings, float inPlayRate = 1.000000f, int loopCount = 1, float inBlendOutTriggerTime = -1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateSlotAnimationAsDynamicMontage_WithBlendSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, CreateSlotAnimationAsDynamicMontage_WithBlendSettings_Asset_Offset), 0, null, asset);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, CreateSlotAnimationAsDynamicMontage_WithBlendSettings_SlotNodeName_Offset), 0, null, slotNodeName);
            UnrealSharp.Engine.MontageBlendSettingsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, CreateSlotAnimationAsDynamicMontage_WithBlendSettings_BlendInSettings_Offset), 0, null, blendInSettings);
            UnrealSharp.Engine.MontageBlendSettingsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, CreateSlotAnimationAsDynamicMontage_WithBlendSettings_BlendOutSettings_Offset), 0, null, blendOutSettings);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CreateSlotAnimationAsDynamicMontage_WithBlendSettings_InPlayRate_Offset), 0, null, inPlayRate);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateSlotAnimationAsDynamicMontage_WithBlendSettings_LoopCount_Offset), 0, null, loopCount);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CreateSlotAnimationAsDynamicMontage_WithBlendSettings_InBlendOutTriggerTime_Offset), 0, null, inBlendOutTriggerTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateSlotAnimationAsDynamicMontage_WithBlendSettings_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AnimMontage returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.FromNative(IntPtr.Add(ParamsBuffer, CreateSlotAnimationAsDynamicMontage_WithBlendSettings_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
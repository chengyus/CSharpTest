// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
abstract public partial class AnimNotify : UnrealSharp.CoreUObject.Object
{
    
    static AnimNotify()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AnimNotify");
        
        NotifyColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NotifyColor");
        bShouldFireInEditor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bShouldFireInEditor");
        
        
        IntPtr Received_Notify_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Received_Notify");
        Received_Notify_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Received_Notify_NativeFunction);
        Received_Notify_MeshComp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Received_Notify_NativeFunction, "MeshComp");
        Received_Notify_Animation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Received_Notify_NativeFunction, "Animation");
        Received_Notify_EventReference_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Received_Notify_NativeFunction, "EventReference");
        Received_Notify_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Received_Notify_NativeFunction, "ReturnValue");
        
        IntPtr GetNotifyName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNotifyName");
        GetNotifyName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNotifyName_NativeFunction);
        GetNotifyName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNotifyName_NativeFunction, "ReturnValue");
        
        IntPtr GetDefaultTriggerWeightThreshold_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDefaultTriggerWeightThreshold");
        GetDefaultTriggerWeightThreshold_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDefaultTriggerWeightThreshold_NativeFunction);
        GetDefaultTriggerWeightThreshold_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultTriggerWeightThreshold_NativeFunction, "ReturnValue");
        
        
    }
    
    protected AnimNotify(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/Engine.AnimNotify:NotifyColor
    static readonly int NotifyColor_Offset;
    
    public UnrealSharp.CoreUObject.Color NotifyColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(NativeObject, NotifyColor_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.AnimNotify:bShouldFireInEditor
    static readonly int bShouldFireInEditor_Offset;
    
    public bool bShouldFireInEditor
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bShouldFireInEditor_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.AnimNotify:Received_Notify
    IntPtr Received_Notify_NativeFunction;
    static readonly int Received_Notify_ParamsSize;
    static readonly int Received_Notify_MeshComp_Offset;
    static readonly int Received_Notify_Animation_Offset;
    static readonly int Received_Notify_EventReference_Offset;
    static readonly int Received_Notify_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual bool Received_Notify(UnrealSharp.Engine.SkeletalMeshComponent meshComp, UnrealSharp.Engine.AnimSequenceBase animation, UnrealSharp.Engine.AnimNotifyEventReference eventReference)
    {
        unsafe
        {
            if (Received_Notify_NativeFunction == IntPtr.Zero)
            {
                Received_Notify_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "Received_Notify");
            }
            byte* ParamsBufferAllocation = stackalloc byte[Received_Notify_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SkeletalMeshComponent>.ToNative(IntPtr.Add(ParamsBuffer, Received_Notify_MeshComp_Offset), 0, null, meshComp);
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, Received_Notify_Animation_Offset), 0, null, animation);
            UnrealSharp.Engine.AnimNotifyEventReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Received_Notify_EventReference_Offset), 0, null, eventReference);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Received_Notify_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Received_Notify_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool Received_Notify_Implementation(UnrealSharp.Engine.SkeletalMeshComponent meshComp, UnrealSharp.Engine.AnimSequenceBase animation, UnrealSharp.Engine.AnimNotifyEventReference eventReference)
    {
        return default(bool);
    }
    void Invoke_Received_Notify(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.SkeletalMeshComponent meshComp = ObjectMarshaller<UnrealSharp.Engine.SkeletalMeshComponent>.FromNative(IntPtr.Add(buffer, Received_Notify_MeshComp_Offset), 0, null);
            UnrealSharp.Engine.AnimSequenceBase animation = ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.FromNative(IntPtr.Add(buffer, Received_Notify_Animation_Offset), 0, null);
            UnrealSharp.Engine.AnimNotifyEventReference eventReference = UnrealSharp.Engine.AnimNotifyEventReferenceMarshaler.FromNative(IntPtr.Add(buffer, Received_Notify_EventReference_Offset), 0, null);
            bool returnValue = Received_Notify_Implementation(meshComp, animation, eventReference);
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/Engine.AnimNotify:GetNotifyName
    IntPtr GetNotifyName_NativeFunction;
    static readonly int GetNotifyName_ParamsSize;
    static readonly int GetNotifyName_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual string GetNotifyName()
    {
        unsafe
        {
            if (GetNotifyName_NativeFunction == IntPtr.Zero)
            {
                GetNotifyName_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "GetNotifyName");
            }
            byte* ParamsBufferAllocation = stackalloc byte[GetNotifyName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNotifyName_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetNotifyName_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual string GetNotifyName_Implementation()
    {
        return "";
    }
    void Invoke_GetNotifyName(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            string returnValue = GetNotifyName_Implementation();
            IntPtr ReturnValue_NativePtr = IntPtr.Add(returnBuffer,0);
            StringMarshaller.ToNative(ReturnValue_NativePtr,0,null,returnValue);
        }
    }
    
    // Function /Script/Engine.AnimNotify:GetDefaultTriggerWeightThreshold
    IntPtr GetDefaultTriggerWeightThreshold_NativeFunction;
    static readonly int GetDefaultTriggerWeightThreshold_ParamsSize;
    static readonly int GetDefaultTriggerWeightThreshold_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual float GetDefaultTriggerWeightThreshold()
    {
        unsafe
        {
            if (GetDefaultTriggerWeightThreshold_NativeFunction == IntPtr.Zero)
            {
                GetDefaultTriggerWeightThreshold_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "GetDefaultTriggerWeightThreshold");
            }
            byte* ParamsBufferAllocation = stackalloc byte[GetDefaultTriggerWeightThreshold_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDefaultTriggerWeightThreshold_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetDefaultTriggerWeightThreshold_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual float GetDefaultTriggerWeightThreshold_Implementation()
    {
        return default(float);
    }
    void Invoke_GetDefaultTriggerWeightThreshold(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            float returnValue = GetDefaultTriggerWeightThreshold_Implementation();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    
}
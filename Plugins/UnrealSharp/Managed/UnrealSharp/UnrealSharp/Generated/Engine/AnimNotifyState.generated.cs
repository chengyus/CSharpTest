// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
abstract public partial class AnimNotifyState : UnrealSharp.CoreUObject.Object
{
    
    static AnimNotifyState()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AnimNotifyState");
        
        NotifyColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NotifyColor");
        bShouldFireInEditor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bShouldFireInEditor");
        
        
        IntPtr Received_NotifyTick_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Received_NotifyTick");
        Received_NotifyTick_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Received_NotifyTick_NativeFunction);
        Received_NotifyTick_MeshComp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Received_NotifyTick_NativeFunction, "MeshComp");
        Received_NotifyTick_Animation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Received_NotifyTick_NativeFunction, "Animation");
        Received_NotifyTick_FrameDeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Received_NotifyTick_NativeFunction, "FrameDeltaTime");
        Received_NotifyTick_EventReference_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Received_NotifyTick_NativeFunction, "EventReference");
        Received_NotifyTick_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Received_NotifyTick_NativeFunction, "ReturnValue");
        
        IntPtr Received_NotifyEnd_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Received_NotifyEnd");
        Received_NotifyEnd_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Received_NotifyEnd_NativeFunction);
        Received_NotifyEnd_MeshComp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Received_NotifyEnd_NativeFunction, "MeshComp");
        Received_NotifyEnd_Animation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Received_NotifyEnd_NativeFunction, "Animation");
        Received_NotifyEnd_EventReference_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Received_NotifyEnd_NativeFunction, "EventReference");
        Received_NotifyEnd_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Received_NotifyEnd_NativeFunction, "ReturnValue");
        
        IntPtr Received_NotifyBegin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Received_NotifyBegin");
        Received_NotifyBegin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Received_NotifyBegin_NativeFunction);
        Received_NotifyBegin_MeshComp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Received_NotifyBegin_NativeFunction, "MeshComp");
        Received_NotifyBegin_Animation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Received_NotifyBegin_NativeFunction, "Animation");
        Received_NotifyBegin_TotalDuration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Received_NotifyBegin_NativeFunction, "TotalDuration");
        Received_NotifyBegin_EventReference_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Received_NotifyBegin_NativeFunction, "EventReference");
        Received_NotifyBegin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Received_NotifyBegin_NativeFunction, "ReturnValue");
        
        IntPtr GetNotifyName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNotifyName");
        GetNotifyName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNotifyName_NativeFunction);
        GetNotifyName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNotifyName_NativeFunction, "ReturnValue");
        
        IntPtr GetDefaultTriggerWeightThreshold_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDefaultTriggerWeightThreshold");
        GetDefaultTriggerWeightThreshold_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDefaultTriggerWeightThreshold_NativeFunction);
        GetDefaultTriggerWeightThreshold_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultTriggerWeightThreshold_NativeFunction, "ReturnValue");
        
        
    }
    
    protected AnimNotifyState(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/Engine.AnimNotifyState:NotifyColor
    static readonly int NotifyColor_Offset;
    
    public UnrealSharp.CoreUObject.Color NotifyColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(NativeObject, NotifyColor_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.AnimNotifyState:bShouldFireInEditor
    static readonly int bShouldFireInEditor_Offset;
    
    public bool bShouldFireInEditor
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bShouldFireInEditor_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.AnimNotifyState:Received_NotifyTick
    IntPtr Received_NotifyTick_NativeFunction;
    static readonly int Received_NotifyTick_ParamsSize;
    static readonly int Received_NotifyTick_MeshComp_Offset;
    static readonly int Received_NotifyTick_Animation_Offset;
    static readonly int Received_NotifyTick_FrameDeltaTime_Offset;
    static readonly int Received_NotifyTick_EventReference_Offset;
    static readonly int Received_NotifyTick_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual bool Received_NotifyTick(UnrealSharp.Engine.SkeletalMeshComponent meshComp, UnrealSharp.Engine.AnimSequenceBase animation, float frameDeltaTime, UnrealSharp.Engine.AnimNotifyEventReference eventReference)
    {
        unsafe
        {
            if (Received_NotifyTick_NativeFunction == IntPtr.Zero)
            {
                Received_NotifyTick_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "Received_NotifyTick");
            }
            byte* ParamsBufferAllocation = stackalloc byte[Received_NotifyTick_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SkeletalMeshComponent>.ToNative(IntPtr.Add(ParamsBuffer, Received_NotifyTick_MeshComp_Offset), 0, null, meshComp);
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, Received_NotifyTick_Animation_Offset), 0, null, animation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Received_NotifyTick_FrameDeltaTime_Offset), 0, null, frameDeltaTime);
            UnrealSharp.Engine.AnimNotifyEventReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Received_NotifyTick_EventReference_Offset), 0, null, eventReference);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Received_NotifyTick_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Received_NotifyTick_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool Received_NotifyTick_Implementation(UnrealSharp.Engine.SkeletalMeshComponent meshComp, UnrealSharp.Engine.AnimSequenceBase animation, float frameDeltaTime, UnrealSharp.Engine.AnimNotifyEventReference eventReference)
    {
        return default(bool);
    }
    void Invoke_Received_NotifyTick(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.SkeletalMeshComponent meshComp = ObjectMarshaller<UnrealSharp.Engine.SkeletalMeshComponent>.FromNative(IntPtr.Add(buffer, Received_NotifyTick_MeshComp_Offset), 0, null);
            UnrealSharp.Engine.AnimSequenceBase animation = ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.FromNative(IntPtr.Add(buffer, Received_NotifyTick_Animation_Offset), 0, null);
            float frameDeltaTime = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, Received_NotifyTick_FrameDeltaTime_Offset), 0, null);
            UnrealSharp.Engine.AnimNotifyEventReference eventReference = UnrealSharp.Engine.AnimNotifyEventReferenceMarshaler.FromNative(IntPtr.Add(buffer, Received_NotifyTick_EventReference_Offset), 0, null);
            bool returnValue = Received_NotifyTick_Implementation(meshComp, animation, frameDeltaTime, eventReference);
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/Engine.AnimNotifyState:Received_NotifyEnd
    IntPtr Received_NotifyEnd_NativeFunction;
    static readonly int Received_NotifyEnd_ParamsSize;
    static readonly int Received_NotifyEnd_MeshComp_Offset;
    static readonly int Received_NotifyEnd_Animation_Offset;
    static readonly int Received_NotifyEnd_EventReference_Offset;
    static readonly int Received_NotifyEnd_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual bool Received_NotifyEnd(UnrealSharp.Engine.SkeletalMeshComponent meshComp, UnrealSharp.Engine.AnimSequenceBase animation, UnrealSharp.Engine.AnimNotifyEventReference eventReference)
    {
        unsafe
        {
            if (Received_NotifyEnd_NativeFunction == IntPtr.Zero)
            {
                Received_NotifyEnd_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "Received_NotifyEnd");
            }
            byte* ParamsBufferAllocation = stackalloc byte[Received_NotifyEnd_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SkeletalMeshComponent>.ToNative(IntPtr.Add(ParamsBuffer, Received_NotifyEnd_MeshComp_Offset), 0, null, meshComp);
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, Received_NotifyEnd_Animation_Offset), 0, null, animation);
            UnrealSharp.Engine.AnimNotifyEventReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Received_NotifyEnd_EventReference_Offset), 0, null, eventReference);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Received_NotifyEnd_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Received_NotifyEnd_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool Received_NotifyEnd_Implementation(UnrealSharp.Engine.SkeletalMeshComponent meshComp, UnrealSharp.Engine.AnimSequenceBase animation, UnrealSharp.Engine.AnimNotifyEventReference eventReference)
    {
        return default(bool);
    }
    void Invoke_Received_NotifyEnd(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.SkeletalMeshComponent meshComp = ObjectMarshaller<UnrealSharp.Engine.SkeletalMeshComponent>.FromNative(IntPtr.Add(buffer, Received_NotifyEnd_MeshComp_Offset), 0, null);
            UnrealSharp.Engine.AnimSequenceBase animation = ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.FromNative(IntPtr.Add(buffer, Received_NotifyEnd_Animation_Offset), 0, null);
            UnrealSharp.Engine.AnimNotifyEventReference eventReference = UnrealSharp.Engine.AnimNotifyEventReferenceMarshaler.FromNative(IntPtr.Add(buffer, Received_NotifyEnd_EventReference_Offset), 0, null);
            bool returnValue = Received_NotifyEnd_Implementation(meshComp, animation, eventReference);
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/Engine.AnimNotifyState:Received_NotifyBegin
    IntPtr Received_NotifyBegin_NativeFunction;
    static readonly int Received_NotifyBegin_ParamsSize;
    static readonly int Received_NotifyBegin_MeshComp_Offset;
    static readonly int Received_NotifyBegin_Animation_Offset;
    static readonly int Received_NotifyBegin_TotalDuration_Offset;
    static readonly int Received_NotifyBegin_EventReference_Offset;
    static readonly int Received_NotifyBegin_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual bool Received_NotifyBegin(UnrealSharp.Engine.SkeletalMeshComponent meshComp, UnrealSharp.Engine.AnimSequenceBase animation, float totalDuration, UnrealSharp.Engine.AnimNotifyEventReference eventReference)
    {
        unsafe
        {
            if (Received_NotifyBegin_NativeFunction == IntPtr.Zero)
            {
                Received_NotifyBegin_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "Received_NotifyBegin");
            }
            byte* ParamsBufferAllocation = stackalloc byte[Received_NotifyBegin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SkeletalMeshComponent>.ToNative(IntPtr.Add(ParamsBuffer, Received_NotifyBegin_MeshComp_Offset), 0, null, meshComp);
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, Received_NotifyBegin_Animation_Offset), 0, null, animation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Received_NotifyBegin_TotalDuration_Offset), 0, null, totalDuration);
            UnrealSharp.Engine.AnimNotifyEventReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Received_NotifyBegin_EventReference_Offset), 0, null, eventReference);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Received_NotifyBegin_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Received_NotifyBegin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool Received_NotifyBegin_Implementation(UnrealSharp.Engine.SkeletalMeshComponent meshComp, UnrealSharp.Engine.AnimSequenceBase animation, float totalDuration, UnrealSharp.Engine.AnimNotifyEventReference eventReference)
    {
        return default(bool);
    }
    void Invoke_Received_NotifyBegin(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.SkeletalMeshComponent meshComp = ObjectMarshaller<UnrealSharp.Engine.SkeletalMeshComponent>.FromNative(IntPtr.Add(buffer, Received_NotifyBegin_MeshComp_Offset), 0, null);
            UnrealSharp.Engine.AnimSequenceBase animation = ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.FromNative(IntPtr.Add(buffer, Received_NotifyBegin_Animation_Offset), 0, null);
            float totalDuration = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, Received_NotifyBegin_TotalDuration_Offset), 0, null);
            UnrealSharp.Engine.AnimNotifyEventReference eventReference = UnrealSharp.Engine.AnimNotifyEventReferenceMarshaler.FromNative(IntPtr.Add(buffer, Received_NotifyBegin_EventReference_Offset), 0, null);
            bool returnValue = Received_NotifyBegin_Implementation(meshComp, animation, totalDuration, eventReference);
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/Engine.AnimNotifyState:GetNotifyName
    IntPtr GetNotifyName_NativeFunction;
    static readonly int GetNotifyName_ParamsSize;
    static readonly int GetNotifyName_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual string GetNotifyName()
    {
        unsafe
        {
            if (GetNotifyName_NativeFunction == IntPtr.Zero)
            {
                GetNotifyName_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "GetNotifyName");
            }
            byte* ParamsBufferAllocation = stackalloc byte[GetNotifyName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNotifyName_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetNotifyName_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual string GetNotifyName_Implementation()
    {
        return "";
    }
    void Invoke_GetNotifyName(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            string returnValue = GetNotifyName_Implementation();
            IntPtr ReturnValue_NativePtr = IntPtr.Add(returnBuffer,0);
            StringMarshaller.ToNative(ReturnValue_NativePtr,0,null,returnValue);
        }
    }
    
    // Function /Script/Engine.AnimNotifyState:GetDefaultTriggerWeightThreshold
    IntPtr GetDefaultTriggerWeightThreshold_NativeFunction;
    static readonly int GetDefaultTriggerWeightThreshold_ParamsSize;
    static readonly int GetDefaultTriggerWeightThreshold_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual float GetDefaultTriggerWeightThreshold()
    {
        unsafe
        {
            if (GetDefaultTriggerWeightThreshold_NativeFunction == IntPtr.Zero)
            {
                GetDefaultTriggerWeightThreshold_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "GetDefaultTriggerWeightThreshold");
            }
            byte* ParamsBufferAllocation = stackalloc byte[GetDefaultTriggerWeightThreshold_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDefaultTriggerWeightThreshold_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetDefaultTriggerWeightThreshold_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual float GetDefaultTriggerWeightThreshold_Implementation()
    {
        return default(float);
    }
    void Invoke_GetDefaultTriggerWeightThreshold(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            float returnValue = GetDefaultTriggerWeightThreshold_Implementation();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    
}
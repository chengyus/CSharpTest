// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class AnimSingleNodeInstance : UnrealSharp.Engine.AnimInstance
{
    
    static AnimSingleNodeInstance()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AnimSingleNodeInstance");
        
        
        StopAnim_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopAnim");
        SetReverse_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetReverse");
        SetReverse_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetReverse_NativeFunction);
        SetReverse_bInReverse_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetReverse_NativeFunction, "bInReverse");
        SetPreviewCurveOverride_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPreviewCurveOverride");
        SetPreviewCurveOverride_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPreviewCurveOverride_NativeFunction);
        SetPreviewCurveOverride_PoseName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPreviewCurveOverride_NativeFunction, "PoseName");
        SetPreviewCurveOverride_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPreviewCurveOverride_NativeFunction, "Value");
        SetPreviewCurveOverride_bRemoveIfZero_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPreviewCurveOverride_NativeFunction, "bRemoveIfZero");
        SetPositionWithPreviousTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPositionWithPreviousTime");
        SetPositionWithPreviousTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPositionWithPreviousTime_NativeFunction);
        SetPositionWithPreviousTime_InPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPositionWithPreviousTime_NativeFunction, "InPosition");
        SetPositionWithPreviousTime_InPreviousTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPositionWithPreviousTime_NativeFunction, "InPreviousTime");
        SetPositionWithPreviousTime_bFireNotifies_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPositionWithPreviousTime_NativeFunction, "bFireNotifies");
        SetPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPosition");
        SetPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPosition_NativeFunction);
        SetPosition_InPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPosition_NativeFunction, "InPosition");
        SetPosition_bFireNotifies_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPosition_NativeFunction, "bFireNotifies");
        SetPlayRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlayRate");
        SetPlayRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlayRate_NativeFunction);
        SetPlayRate_InPlayRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlayRate_NativeFunction, "InPlayRate");
        SetPlaying_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlaying");
        SetPlaying_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlaying_NativeFunction);
        SetPlaying_bIsPlaying_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaying_NativeFunction, "bIsPlaying");
        SetMirrorDataTable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMirrorDataTable");
        SetMirrorDataTable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMirrorDataTable_NativeFunction);
        SetMirrorDataTable_MirrorDataTable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMirrorDataTable_NativeFunction, "MirrorDataTable");
        SetLooping_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLooping");
        SetLooping_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLooping_NativeFunction);
        SetLooping_bIsLooping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLooping_NativeFunction, "bIsLooping");
        SetBlendSpacePosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBlendSpacePosition");
        SetBlendSpacePosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBlendSpacePosition_NativeFunction);
        SetBlendSpacePosition_InPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBlendSpacePosition_NativeFunction, "InPosition");
        SetAnimationAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAnimationAsset");
        SetAnimationAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAnimationAsset_NativeFunction);
        SetAnimationAsset_NewAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnimationAsset_NativeFunction, "NewAsset");
        SetAnimationAsset_bIsLooping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnimationAsset_NativeFunction, "bIsLooping");
        SetAnimationAsset_InPlayRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnimationAsset_NativeFunction, "InPlayRate");
        PlayAnim_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlayAnim");
        PlayAnim_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PlayAnim_NativeFunction);
        PlayAnim_bIsLooping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnim_NativeFunction, "bIsLooping");
        PlayAnim_InPlayRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnim_NativeFunction, "InPlayRate");
        PlayAnim_InStartPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnim_NativeFunction, "InStartPosition");
        GetMirrorDataTable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMirrorDataTable");
        GetMirrorDataTable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMirrorDataTable_NativeFunction);
        GetMirrorDataTable_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMirrorDataTable_NativeFunction, "ReturnValue");
        GetLength_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLength");
        GetLength_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLength_NativeFunction);
        GetLength_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLength_NativeFunction, "ReturnValue");
        GetAnimationAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnimationAsset");
        GetAnimationAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnimationAsset_NativeFunction);
        GetAnimationAsset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationAsset_NativeFunction, "ReturnValue");
        
        
    }
    
    protected AnimSingleNodeInstance(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.AnimSingleNodeInstance:StopAnim
    static readonly IntPtr StopAnim_NativeFunction;
    
    public void StopAnim()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopAnim_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.AnimSingleNodeInstance:SetReverse
    static readonly IntPtr SetReverse_NativeFunction;
    static readonly int SetReverse_ParamsSize;
    static readonly int SetReverse_bInReverse_Offset;
    
    public void SetReverse(bool bInReverse)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetReverse_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetReverse_bInReverse_Offset), 0, null, bInReverse);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetReverse_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimSingleNodeInstance:SetPreviewCurveOverride
    static readonly IntPtr SetPreviewCurveOverride_NativeFunction;
    static readonly int SetPreviewCurveOverride_ParamsSize;
    static readonly int SetPreviewCurveOverride_PoseName_Offset;
    static readonly int SetPreviewCurveOverride_Value_Offset;
    static readonly int SetPreviewCurveOverride_bRemoveIfZero_Offset;
    
    public void SetPreviewCurveOverride(Name poseName, float value, bool bRemoveIfZero)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPreviewCurveOverride_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetPreviewCurveOverride_PoseName_Offset), 0, null, poseName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPreviewCurveOverride_Value_Offset), 0, null, value);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetPreviewCurveOverride_bRemoveIfZero_Offset), 0, null, bRemoveIfZero);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPreviewCurveOverride_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.AnimSingleNodeInstance:SetPositionWithPreviousTime
    static readonly IntPtr SetPositionWithPreviousTime_NativeFunction;
    static readonly int SetPositionWithPreviousTime_ParamsSize;
    static readonly int SetPositionWithPreviousTime_InPosition_Offset;
    static readonly int SetPositionWithPreviousTime_InPreviousTime_Offset;
    static readonly int SetPositionWithPreviousTime_bFireNotifies_Offset;
    
    public void SetPositionWithPreviousTime(float inPosition, float inPreviousTime, bool bFireNotifies = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPositionWithPreviousTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPositionWithPreviousTime_InPosition_Offset), 0, null, inPosition);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPositionWithPreviousTime_InPreviousTime_Offset), 0, null, inPreviousTime);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetPositionWithPreviousTime_bFireNotifies_Offset), 0, null, bFireNotifies);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPositionWithPreviousTime_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimSingleNodeInstance:SetPosition
    static readonly IntPtr SetPosition_NativeFunction;
    static readonly int SetPosition_ParamsSize;
    static readonly int SetPosition_InPosition_Offset;
    static readonly int SetPosition_bFireNotifies_Offset;
    
    public void SetPosition(float inPosition, bool bFireNotifies = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPosition_InPosition_Offset), 0, null, inPosition);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetPosition_bFireNotifies_Offset), 0, null, bFireNotifies);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPosition_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimSingleNodeInstance:SetPlayRate
    static readonly IntPtr SetPlayRate_NativeFunction;
    static readonly int SetPlayRate_ParamsSize;
    static readonly int SetPlayRate_InPlayRate_Offset;
    
    public void SetPlayRate(float inPlayRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlayRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPlayRate_InPlayRate_Offset), 0, null, inPlayRate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPlayRate_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimSingleNodeInstance:SetPlaying
    static readonly IntPtr SetPlaying_NativeFunction;
    static readonly int SetPlaying_ParamsSize;
    static readonly int SetPlaying_bIsPlaying_Offset;
    
    public void SetPlaying(bool bIsPlaying)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlaying_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetPlaying_bIsPlaying_Offset), 0, null, bIsPlaying);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPlaying_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimSingleNodeInstance:SetMirrorDataTable
    static readonly IntPtr SetMirrorDataTable_NativeFunction;
    static readonly int SetMirrorDataTable_ParamsSize;
    static readonly int SetMirrorDataTable_MirrorDataTable_Offset;
    
    public void SetMirrorDataTable(UnrealSharp.Engine.MirrorDataTable mirrorDataTable)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMirrorDataTable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MirrorDataTable>.ToNative(IntPtr.Add(ParamsBuffer, SetMirrorDataTable_MirrorDataTable_Offset), 0, null, mirrorDataTable);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMirrorDataTable_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimSingleNodeInstance:SetLooping
    static readonly IntPtr SetLooping_NativeFunction;
    static readonly int SetLooping_ParamsSize;
    static readonly int SetLooping_bIsLooping_Offset;
    
    public void SetLooping(bool bIsLooping)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLooping_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLooping_bIsLooping_Offset), 0, null, bIsLooping);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLooping_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimSingleNodeInstance:SetBlendSpacePosition
    static readonly IntPtr SetBlendSpacePosition_NativeFunction;
    static readonly int SetBlendSpacePosition_ParamsSize;
    static readonly int SetBlendSpacePosition_InPosition_Offset;
    
    public void SetBlendSpacePosition(System.DoubleNumerics.Vector3 inPosition)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBlendSpacePosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetBlendSpacePosition_InPosition_Offset), 0, null, inPosition);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBlendSpacePosition_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.AnimSingleNodeInstance:SetAnimationAsset
    static readonly IntPtr SetAnimationAsset_NativeFunction;
    static readonly int SetAnimationAsset_ParamsSize;
    static readonly int SetAnimationAsset_NewAsset_Offset;
    static readonly int SetAnimationAsset_bIsLooping_Offset;
    static readonly int SetAnimationAsset_InPlayRate_Offset;
    
    public void SetAnimationAsset(UnrealSharp.Engine.AnimationAsset newAsset, bool bIsLooping = true, float inPlayRate = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAnimationAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimationAsset>.ToNative(IntPtr.Add(ParamsBuffer, SetAnimationAsset_NewAsset_Offset), 0, null, newAsset);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAnimationAsset_bIsLooping_Offset), 0, null, bIsLooping);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAnimationAsset_InPlayRate_Offset), 0, null, inPlayRate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAnimationAsset_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimSingleNodeInstance:PlayAnim
    static readonly IntPtr PlayAnim_NativeFunction;
    static readonly int PlayAnim_ParamsSize;
    static readonly int PlayAnim_bIsLooping_Offset;
    static readonly int PlayAnim_InPlayRate_Offset;
    static readonly int PlayAnim_InStartPosition_Offset;
    
    public void PlayAnim(bool bIsLooping = false, float inPlayRate = 1.000000f, float inStartPosition = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PlayAnim_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, PlayAnim_bIsLooping_Offset), 0, null, bIsLooping);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlayAnim_InPlayRate_Offset), 0, null, inPlayRate);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlayAnim_InStartPosition_Offset), 0, null, inStartPosition);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PlayAnim_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AnimSingleNodeInstance:GetMirrorDataTable
    static readonly IntPtr GetMirrorDataTable_NativeFunction;
    static readonly int GetMirrorDataTable_ParamsSize;
    static readonly int GetMirrorDataTable_ReturnValue_Offset;
    
    public UnrealSharp.Engine.MirrorDataTable GetMirrorDataTable()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMirrorDataTable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMirrorDataTable_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MirrorDataTable returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MirrorDataTable>.FromNative(IntPtr.Add(ParamsBuffer, GetMirrorDataTable_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimSingleNodeInstance:GetLength
    static readonly IntPtr GetLength_NativeFunction;
    static readonly int GetLength_ParamsSize;
    static readonly int GetLength_ReturnValue_Offset;
    
    public float GetLength()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLength_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLength_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetLength_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimSingleNodeInstance:GetAnimationAsset
    static readonly IntPtr GetAnimationAsset_NativeFunction;
    static readonly int GetAnimationAsset_ParamsSize;
    static readonly int GetAnimationAsset_ReturnValue_Offset;
    
    public UnrealSharp.Engine.AnimationAsset GetAnimationAsset()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnimationAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAnimationAsset_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AnimationAsset returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AnimationAsset>.FromNative(IntPtr.Add(ParamsBuffer, GetAnimationAsset_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
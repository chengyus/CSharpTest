// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class AnimationAttributeIdentifierExtensions : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static AnimationAttributeIdentifierExtensions()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AnimationAttributeIdentifierExtensions");
        
        
        IsValid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValid");
        IsValid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValid_NativeFunction);
        IsValid_Identifier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValid_NativeFunction, "Identifier");
        IsValid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValid_NativeFunction, "ReturnValue");
        CreateAttributeIdentifier_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateAttributeIdentifier");
        CreateAttributeIdentifier_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateAttributeIdentifier_NativeFunction);
        CreateAttributeIdentifier_AnimationAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateAttributeIdentifier_NativeFunction, "AnimationAsset");
        CreateAttributeIdentifier_AttributeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateAttributeIdentifier_NativeFunction, "AttributeName");
        CreateAttributeIdentifier_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateAttributeIdentifier_NativeFunction, "BoneName");
        CreateAttributeIdentifier_AttributeType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateAttributeIdentifier_NativeFunction, "AttributeType");
        CreateAttributeIdentifier_bValidateExistsOnAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateAttributeIdentifier_NativeFunction, "bValidateExistsOnAsset");
        CreateAttributeIdentifier_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateAttributeIdentifier_NativeFunction, "ReturnValue");
        
        
    }
    
    protected AnimationAttributeIdentifierExtensions(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.AnimationAttributeIdentifierExtensions:IsValid
    static readonly IntPtr IsValid_NativeFunction;
    static readonly int IsValid_ParamsSize;
    static readonly int IsValid_Identifier_Offset;
    static readonly int IsValid_ReturnValue_Offset;
    
    public static bool IsValid(ref UnrealSharp.Engine.AnimationAttributeIdentifier identifier)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.AnimationAttributeIdentifierMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsValid_Identifier_Offset), 0, null, identifier);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsValid_NativeFunction, ParamsBuffer);
            
            identifier = UnrealSharp.Engine.AnimationAttributeIdentifierMarshaler.FromNative(IntPtr.Add(ParamsBuffer, IsValid_Identifier_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValid_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AnimationAttributeIdentifierExtensions:CreateAttributeIdentifier
    static readonly IntPtr CreateAttributeIdentifier_NativeFunction;
    static readonly int CreateAttributeIdentifier_ParamsSize;
    static readonly int CreateAttributeIdentifier_AnimationAsset_Offset;
    static readonly int CreateAttributeIdentifier_AttributeName_Offset;
    static readonly int CreateAttributeIdentifier_BoneName_Offset;
    static readonly int CreateAttributeIdentifier_AttributeType_Offset;
    static readonly int CreateAttributeIdentifier_bValidateExistsOnAsset_Offset;
    static readonly int CreateAttributeIdentifier_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.AnimationAttributeIdentifier CreateAttributeIdentifier(UnrealSharp.Engine.AnimationAsset animationAsset, Name attributeName, Name boneName, UnrealSharp.CoreUObject.ScriptStruct attributeType, bool bValidateExistsOnAsset = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateAttributeIdentifier_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimationAsset>.ToNative(IntPtr.Add(ParamsBuffer, CreateAttributeIdentifier_AnimationAsset_Offset), 0, null, animationAsset);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, CreateAttributeIdentifier_AttributeName_Offset), 0, null, attributeName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, CreateAttributeIdentifier_BoneName_Offset), 0, null, boneName);
            ObjectMarshaller<UnrealSharp.CoreUObject.ScriptStruct>.ToNative(IntPtr.Add(ParamsBuffer, CreateAttributeIdentifier_AttributeType_Offset), 0, null, attributeType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CreateAttributeIdentifier_bValidateExistsOnAsset_Offset), 0, null, bValidateExistsOnAsset);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateAttributeIdentifier_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AnimationAttributeIdentifier returnValue;
            returnValue = UnrealSharp.Engine.AnimationAttributeIdentifierMarshaler.FromNative(IntPtr.Add(ParamsBuffer, CreateAttributeIdentifier_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class ArrowComponent : UnrealSharp.Engine.PrimitiveComponent
{
    
    static ArrowComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ArrowComponent");
        
        ArrowColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ArrowColor");
        ArrowSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ArrowSize");
        ArrowLength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ArrowLength");
        ScreenSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ScreenSize");
        bIsScreenSizeScaled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsScreenSizeScaled");
        bIsScreenSizeScaled_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIsScreenSizeScaled");
        bTreatAsASprite_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bTreatAsASprite");
        bTreatAsASprite_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bTreatAsASprite");
        bUseInEditorScaling_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseInEditorScaling");
        
        SetArrowColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetArrowColor");
        SetArrowColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetArrowColor_NativeFunction);
        SetArrowColor_NewColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetArrowColor_NativeFunction, "NewColor");
        
        
    }
    
    protected ArrowComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/Engine.ArrowComponent:ArrowColor
    static readonly int ArrowColor_Offset;
    
    public UnrealSharp.CoreUObject.Color ArrowColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(NativeObject, ArrowColor_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(NativeObject, ArrowColor_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.ArrowComponent:ArrowSize
    static readonly int ArrowSize_Offset;
    
    public float ArrowSize
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ArrowSize_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ArrowSize_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.ArrowComponent:ArrowLength
    static readonly int ArrowLength_Offset;
    
    public float ArrowLength
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ArrowLength_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ArrowLength_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.ArrowComponent:ScreenSize
    static readonly int ScreenSize_Offset;
    
    public float ScreenSize
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ScreenSize_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ScreenSize_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.ArrowComponent:bIsScreenSizeScaled
    static readonly int bIsScreenSizeScaled_Offset;
    static readonly IntPtr bIsScreenSizeScaled_NativeProperty;
    
    public bool bIsScreenSizeScaled
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIsScreenSizeScaled_NativeProperty, bIsScreenSizeScaled_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bIsScreenSizeScaled_NativeProperty, bIsScreenSizeScaled_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.ArrowComponent:bTreatAsASprite
    static readonly int bTreatAsASprite_Offset;
    static readonly IntPtr bTreatAsASprite_NativeProperty;
    
    public bool bTreatAsASprite
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bTreatAsASprite_NativeProperty, bTreatAsASprite_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bTreatAsASprite_NativeProperty, bTreatAsASprite_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.ArrowComponent:bUseInEditorScaling
    static readonly int bUseInEditorScaling_Offset;
    
    public bool bUseInEditorScaling
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseInEditorScaling_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bUseInEditorScaling_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Engine.ArrowComponent:SetArrowColor
    static readonly IntPtr SetArrowColor_NativeFunction;
    static readonly int SetArrowColor_ParamsSize;
    static readonly int SetArrowColor_NewColor_Offset;
    
    public void SetArrowColor(UnrealSharp.CoreUObject.LinearColor newColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetArrowColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetArrowColor_NewColor_Offset), 0, null, newColor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetArrowColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
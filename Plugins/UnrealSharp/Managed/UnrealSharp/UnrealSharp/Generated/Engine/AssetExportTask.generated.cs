// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class AssetExportTask : UnrealSharp.CoreUObject.Object
{
    
    static AssetExportTask()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AssetExportTask");
        
        Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Object");
        Exporter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Exporter");
        Filename_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Filename");
        Filename_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Filename");
        bSelected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSelected");
        bReplaceIdentical_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bReplaceIdentical");
        bPrompt_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bPrompt");
        bAutomated_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAutomated");
        bUseFileArchive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseFileArchive");
        bWriteEmptyFiles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bWriteEmptyFiles");
        IgnoreObjectList_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "IgnoreObjectList");
        IgnoreObjectList_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "IgnoreObjectList");
        Options_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Options");
        
        
        
    }
    
    protected AssetExportTask(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Engine.AssetExportTask:Object
    static readonly int Object_Offset;
    
    public UnrealSharp.CoreUObject.Object Object
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(NativeObject, Object_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(NativeObject, Object_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/Engine.AssetExportTask:Exporter
    static readonly int Exporter_Offset;
    
    public UnrealSharp.Engine.Exporter Exporter
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.Exporter>.FromNative(IntPtr.Add(NativeObject, Exporter_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.Exporter>.ToNative(IntPtr.Add(NativeObject, Exporter_Offset), 0, this, value);
        }
    }
    
    // StrProperty /Script/Engine.AssetExportTask:Filename
    static readonly int Filename_Offset;
    static readonly IntPtr Filename_NativeProperty;
    
    public string Filename
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,Filename_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,Filename_Offset),0,this,value);
        }
    }
    
    // BoolProperty /Script/Engine.AssetExportTask:bSelected
    static readonly int bSelected_Offset;
    
    public bool bSelected
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bSelected_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bSelected_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.AssetExportTask:bReplaceIdentical
    static readonly int bReplaceIdentical_Offset;
    
    public bool bReplaceIdentical
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bReplaceIdentical_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bReplaceIdentical_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.AssetExportTask:bPrompt
    static readonly int bPrompt_Offset;
    
    public bool bPrompt
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bPrompt_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bPrompt_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.AssetExportTask:bAutomated
    static readonly int bAutomated_Offset;
    
    public bool bAutomated
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAutomated_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAutomated_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.AssetExportTask:bUseFileArchive
    static readonly int bUseFileArchive_Offset;
    
    public bool bUseFileArchive
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseFileArchive_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bUseFileArchive_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.AssetExportTask:bWriteEmptyFiles
    static readonly int bWriteEmptyFiles_Offset;
    
    public bool bWriteEmptyFiles
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bWriteEmptyFiles_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bWriteEmptyFiles_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/Engine.AssetExportTask:IgnoreObjectList
    static readonly int IgnoreObjectList_Offset;
    static readonly IntPtr IgnoreObjectList_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.CoreUObject.Object> IgnoreObjectList_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.CoreUObject.Object> IgnoreObjectList
    {
        get
        {
            if(IgnoreObjectList_Wrapper == null)
            {
                IgnoreObjectList_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.CoreUObject.Object>(1, IgnoreObjectList_NativeProperty, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative);
            }
            
            return IgnoreObjectList_Wrapper.FromNative(IntPtr.Add(NativeObject,IgnoreObjectList_Offset),0,this);
        }
    }
    
    // ObjectProperty /Script/Engine.AssetExportTask:Options
    static readonly int Options_Offset;
    
    public UnrealSharp.CoreUObject.Object Options
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(NativeObject, Options_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(NativeObject, Options_Offset), 0, this, value);
        }
    }
    
    
}
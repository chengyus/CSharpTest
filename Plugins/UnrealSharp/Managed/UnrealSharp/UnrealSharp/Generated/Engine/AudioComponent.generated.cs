// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class AudioComponent : UnrealSharp.Engine.SceneComponent
{
    
    static AudioComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AudioComponent");
        
        Sound_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Sound");
        DefaultParameters_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultParameters");
        DefaultParameters_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "DefaultParameters");
        bAllowSpatialization_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAllowSpatialization");
        bAllowSpatialization_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAllowSpatialization");
        bOverrideAttenuation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOverrideAttenuation");
        bOverrideAttenuation_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bOverrideAttenuation");
        bOverrideSubtitlePriority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOverrideSubtitlePriority");
        bOverrideSubtitlePriority_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bOverrideSubtitlePriority");
        bIsUISound_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsUISound");
        bIsUISound_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIsUISound");
        bEnableLowPassFilter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableLowPassFilter");
        bEnableLowPassFilter_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableLowPassFilter");
        bOverridePriority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOverridePriority");
        bOverridePriority_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bOverridePriority");
        bSuppressSubtitles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSuppressSubtitles");
        bSuppressSubtitles_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bSuppressSubtitles");
        bCanPlayMultipleInstances_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCanPlayMultipleInstances");
        bCanPlayMultipleInstances_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCanPlayMultipleInstances");
        bDisableParameterUpdatesWhilePlaying_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bDisableParameterUpdatesWhilePlaying");
        bDisableParameterUpdatesWhilePlaying_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bDisableParameterUpdatesWhilePlaying");
        bAutoManageAttachment_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAutoManageAttachment");
        bAutoManageAttachment_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAutoManageAttachment");
        PitchModulationMin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PitchModulationMin");
        PitchModulationMax_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PitchModulationMax");
        VolumeModulationMin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VolumeModulationMin");
        VolumeModulationMax_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VolumeModulationMax");
        VolumeMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VolumeMultiplier");
        EnvelopeFollowerAttackTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "EnvelopeFollowerAttackTime");
        EnvelopeFollowerReleaseTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "EnvelopeFollowerReleaseTime");
        Priority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Priority");
        SubtitlePriority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SubtitlePriority");
        SourceEffectChain_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SourceEffectChain");
        PitchMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PitchMultiplier");
        LowPassFilterFrequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LowPassFilterFrequency");
        AttenuationSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AttenuationSettings");
        AttenuationOverrides_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AttenuationOverrides");
        AutoAttachLocationRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AutoAttachLocationRule");
        AutoAttachRotationRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AutoAttachRotationRule");
        AutoAttachScaleRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AutoAttachScaleRule");
        ModulationRouting_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ModulationRouting");
        AutoAttachParent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AutoAttachParent");
        AutoAttachSocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AutoAttachSocketName");
        
        StopDelayed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopDelayed");
        StopDelayed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StopDelayed_NativeFunction);
        StopDelayed_DelayTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopDelayed_NativeFunction, "DelayTime");
        Stop_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Stop");
        SetWaveParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWaveParameter");
        SetWaveParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWaveParameter_NativeFunction);
        SetWaveParameter_InName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWaveParameter_NativeFunction, "InName");
        SetWaveParameter_InWave_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWaveParameter_NativeFunction, "InWave");
        SetVolumeMultiplier_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVolumeMultiplier");
        SetVolumeMultiplier_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVolumeMultiplier_NativeFunction);
        SetVolumeMultiplier_NewVolumeMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVolumeMultiplier_NativeFunction, "NewVolumeMultiplier");
        SetUISound_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetUISound");
        SetUISound_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetUISound_NativeFunction);
        SetUISound_bInUISound_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUISound_NativeFunction, "bInUISound");
        SetSubmixSend_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSubmixSend");
        SetSubmixSend_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSubmixSend_NativeFunction);
        SetSubmixSend_Submix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSubmixSend_NativeFunction, "Submix");
        SetSubmixSend_SendLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSubmixSend_NativeFunction, "SendLevel");
        SetSourceBusSendPreEffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSourceBusSendPreEffect");
        SetSourceBusSendPreEffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSourceBusSendPreEffect_NativeFunction);
        SetSourceBusSendPreEffect_SoundSourceBus_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSourceBusSendPreEffect_NativeFunction, "SoundSourceBus");
        SetSourceBusSendPreEffect_SourceBusSendLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSourceBusSendPreEffect_NativeFunction, "SourceBusSendLevel");
        SetSourceBusSendPostEffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSourceBusSendPostEffect");
        SetSourceBusSendPostEffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSourceBusSendPostEffect_NativeFunction);
        SetSourceBusSendPostEffect_SoundSourceBus_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSourceBusSendPostEffect_NativeFunction, "SoundSourceBus");
        SetSourceBusSendPostEffect_SourceBusSendLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSourceBusSendPostEffect_NativeFunction, "SourceBusSendLevel");
        SetSound_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSound");
        SetSound_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSound_NativeFunction);
        SetSound_NewSound_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSound_NativeFunction, "NewSound");
        SetPitchMultiplier_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPitchMultiplier");
        SetPitchMultiplier_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPitchMultiplier_NativeFunction);
        SetPitchMultiplier_NewPitchMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPitchMultiplier_NativeFunction, "NewPitchMultiplier");
        SetPaused_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPaused");
        SetPaused_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPaused_NativeFunction);
        SetPaused_bPause_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPaused_NativeFunction, "bPause");
        SetOutputToBusOnly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOutputToBusOnly");
        SetOutputToBusOnly_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOutputToBusOnly_NativeFunction);
        SetOutputToBusOnly_bInOutputToBusOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOutputToBusOnly_NativeFunction, "bInOutputToBusOnly");
        SetLowPassFilterFrequency_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLowPassFilterFrequency");
        SetLowPassFilterFrequency_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLowPassFilterFrequency_NativeFunction);
        SetLowPassFilterFrequency_InLowPassFilterFrequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLowPassFilterFrequency_NativeFunction, "InLowPassFilterFrequency");
        SetLowPassFilterEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLowPassFilterEnabled");
        SetLowPassFilterEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLowPassFilterEnabled_NativeFunction);
        SetLowPassFilterEnabled_InLowPassFilterEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLowPassFilterEnabled_NativeFunction, "InLowPassFilterEnabled");
        SetIntParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIntParameter");
        SetIntParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIntParameter_NativeFunction);
        SetIntParameter_InName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIntParameter_NativeFunction, "InName");
        SetIntParameter_InInt_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIntParameter_NativeFunction, "InInt");
        SetFloatParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFloatParameter");
        SetFloatParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFloatParameter_NativeFunction);
        SetFloatParameter_InName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFloatParameter_NativeFunction, "InName");
        SetFloatParameter_InFloat_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFloatParameter_NativeFunction, "InFloat");
        SetBoolParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBoolParameter");
        SetBoolParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBoolParameter_NativeFunction);
        SetBoolParameter_InName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoolParameter_NativeFunction, "InName");
        SetBoolParameter_InBool_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoolParameter_NativeFunction, "InBool");
        SetAudioBusSendPreEffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAudioBusSendPreEffect");
        SetAudioBusSendPreEffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAudioBusSendPreEffect_NativeFunction);
        SetAudioBusSendPreEffect_AudioBus_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAudioBusSendPreEffect_NativeFunction, "AudioBus");
        SetAudioBusSendPreEffect_AudioBusSendLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAudioBusSendPreEffect_NativeFunction, "AudioBusSendLevel");
        SetAudioBusSendPostEffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAudioBusSendPostEffect");
        SetAudioBusSendPostEffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAudioBusSendPostEffect_NativeFunction);
        SetAudioBusSendPostEffect_AudioBus_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAudioBusSendPostEffect_NativeFunction, "AudioBus");
        SetAudioBusSendPostEffect_AudioBusSendLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAudioBusSendPostEffect_NativeFunction, "AudioBusSendLevel");
        Play_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Play");
        Play_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Play_NativeFunction);
        Play_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Play_NativeFunction, "StartTime");
        IsVirtualized_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsVirtualized");
        IsVirtualized_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsVirtualized_NativeFunction);
        IsVirtualized_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsVirtualized_NativeFunction, "ReturnValue");
        IsPlaying_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPlaying");
        IsPlaying_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPlaying_NativeFunction);
        IsPlaying_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPlaying_NativeFunction, "ReturnValue");
        HasCookedFFTData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasCookedFFTData");
        HasCookedFFTData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasCookedFFTData_NativeFunction);
        HasCookedFFTData_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasCookedFFTData_NativeFunction, "ReturnValue");
        HasCookedAmplitudeEnvelopeData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasCookedAmplitudeEnvelopeData");
        HasCookedAmplitudeEnvelopeData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasCookedAmplitudeEnvelopeData_NativeFunction);
        HasCookedAmplitudeEnvelopeData_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasCookedAmplitudeEnvelopeData_NativeFunction, "ReturnValue");
        GetPlayState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayState");
        GetPlayState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayState_NativeFunction);
        GetPlayState_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayState_NativeFunction, "ReturnValue");
        GetCookedFFTDataForAllPlayingSounds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCookedFFTDataForAllPlayingSounds");
        GetCookedFFTDataForAllPlayingSounds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCookedFFTDataForAllPlayingSounds_NativeFunction);
        GetCookedFFTDataForAllPlayingSounds_OutSoundWaveSpectralData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCookedFFTDataForAllPlayingSounds_NativeFunction, "OutSoundWaveSpectralData");
        GetCookedFFTDataForAllPlayingSounds_OutSoundWaveSpectralData_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetCookedFFTDataForAllPlayingSounds_NativeFunction, "OutSoundWaveSpectralData");
        GetCookedFFTDataForAllPlayingSounds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCookedFFTDataForAllPlayingSounds_NativeFunction, "ReturnValue");
        GetCookedFFTData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCookedFFTData");
        GetCookedFFTData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCookedFFTData_NativeFunction);
        GetCookedFFTData_FrequenciesToGet_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCookedFFTData_NativeFunction, "FrequenciesToGet");
        GetCookedFFTData_FrequenciesToGet_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetCookedFFTData_NativeFunction, "FrequenciesToGet");
        GetCookedFFTData_OutSoundWaveSpectralData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCookedFFTData_NativeFunction, "OutSoundWaveSpectralData");
        GetCookedFFTData_OutSoundWaveSpectralData_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetCookedFFTData_NativeFunction, "OutSoundWaveSpectralData");
        GetCookedFFTData_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCookedFFTData_NativeFunction, "ReturnValue");
        GetCookedEnvelopeDataForAllPlayingSounds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCookedEnvelopeDataForAllPlayingSounds");
        GetCookedEnvelopeDataForAllPlayingSounds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCookedEnvelopeDataForAllPlayingSounds_NativeFunction);
        GetCookedEnvelopeDataForAllPlayingSounds_OutEnvelopeData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCookedEnvelopeDataForAllPlayingSounds_NativeFunction, "OutEnvelopeData");
        GetCookedEnvelopeDataForAllPlayingSounds_OutEnvelopeData_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetCookedEnvelopeDataForAllPlayingSounds_NativeFunction, "OutEnvelopeData");
        GetCookedEnvelopeDataForAllPlayingSounds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCookedEnvelopeDataForAllPlayingSounds_NativeFunction, "ReturnValue");
        GetCookedEnvelopeData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCookedEnvelopeData");
        GetCookedEnvelopeData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCookedEnvelopeData_NativeFunction);
        GetCookedEnvelopeData_OutEnvelopeData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCookedEnvelopeData_NativeFunction, "OutEnvelopeData");
        GetCookedEnvelopeData_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCookedEnvelopeData_NativeFunction, "ReturnValue");
        FadeOut_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FadeOut");
        FadeOut_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FadeOut_NativeFunction);
        FadeOut_FadeOutDuration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FadeOut_NativeFunction, "FadeOutDuration");
        FadeOut_FadeVolumeLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FadeOut_NativeFunction, "FadeVolumeLevel");
        FadeOut_FadeCurve_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FadeOut_NativeFunction, "FadeCurve");
        FadeIn_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FadeIn");
        FadeIn_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FadeIn_NativeFunction);
        FadeIn_FadeInDuration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FadeIn_NativeFunction, "FadeInDuration");
        FadeIn_FadeVolumeLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FadeIn_NativeFunction, "FadeVolumeLevel");
        FadeIn_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FadeIn_NativeFunction, "StartTime");
        FadeIn_FadeCurve_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FadeIn_NativeFunction, "FadeCurve");
        BP_GetAttenuationSettingsToApply_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BP_GetAttenuationSettingsToApply");
        BP_GetAttenuationSettingsToApply_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BP_GetAttenuationSettingsToApply_NativeFunction);
        BP_GetAttenuationSettingsToApply_OutAttenuationSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BP_GetAttenuationSettingsToApply_NativeFunction, "OutAttenuationSettings");
        BP_GetAttenuationSettingsToApply_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BP_GetAttenuationSettingsToApply_NativeFunction, "ReturnValue");
        AdjustVolume_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AdjustVolume");
        AdjustVolume_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AdjustVolume_NativeFunction);
        AdjustVolume_AdjustVolumeDuration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AdjustVolume_NativeFunction, "AdjustVolumeDuration");
        AdjustVolume_AdjustVolumeLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AdjustVolume_NativeFunction, "AdjustVolumeLevel");
        AdjustVolume_FadeCurve_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AdjustVolume_NativeFunction, "FadeCurve");
        AdjustAttenuation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AdjustAttenuation");
        AdjustAttenuation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AdjustAttenuation_NativeFunction);
        AdjustAttenuation_InAttenuationSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AdjustAttenuation_NativeFunction, "InAttenuationSettings");
        
        
    }
    
    protected AudioComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Engine.AudioComponent:Sound
    static readonly int Sound_Offset;
    
    public UnrealSharp.Engine.SoundBase Sound
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.SoundBase>.FromNative(IntPtr.Add(NativeObject, Sound_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.SoundBase>.ToNative(IntPtr.Add(NativeObject, Sound_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/Engine.AudioComponent:DefaultParameters
    static readonly int DefaultParameters_Offset;
    static readonly IntPtr DefaultParameters_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.AudioExtensions.AudioParameter> DefaultParameters_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.AudioExtensions.AudioParameter> DefaultParameters
    {
        get
        {
            if(DefaultParameters_Wrapper == null)
            {
                DefaultParameters_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.AudioExtensions.AudioParameter>(1, DefaultParameters_NativeProperty, UnrealSharp.AudioExtensions.AudioParameterMarshaler.ToNative, UnrealSharp.AudioExtensions.AudioParameterMarshaler.FromNative);
            }
            
            return DefaultParameters_Wrapper.FromNative(IntPtr.Add(NativeObject,DefaultParameters_Offset),0,this);
        }
    }
    
    // BoolProperty /Script/Engine.AudioComponent:bAllowSpatialization
    static readonly int bAllowSpatialization_Offset;
    static readonly IntPtr bAllowSpatialization_NativeProperty;
    
    public bool bAllowSpatialization
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAllowSpatialization_NativeProperty, bAllowSpatialization_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bAllowSpatialization_NativeProperty, bAllowSpatialization_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.AudioComponent:bOverrideAttenuation
    static readonly int bOverrideAttenuation_Offset;
    static readonly IntPtr bOverrideAttenuation_NativeProperty;
    
    public bool bOverrideAttenuation
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bOverrideAttenuation_NativeProperty, bOverrideAttenuation_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bOverrideAttenuation_NativeProperty, bOverrideAttenuation_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.AudioComponent:bOverrideSubtitlePriority
    static readonly int bOverrideSubtitlePriority_Offset;
    static readonly IntPtr bOverrideSubtitlePriority_NativeProperty;
    
    public bool bOverrideSubtitlePriority
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bOverrideSubtitlePriority_NativeProperty, bOverrideSubtitlePriority_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bOverrideSubtitlePriority_NativeProperty, bOverrideSubtitlePriority_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.AudioComponent:bIsUISound
    static readonly int bIsUISound_Offset;
    static readonly IntPtr bIsUISound_NativeProperty;
    
    public bool bIsUISound
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIsUISound_NativeProperty, bIsUISound_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bIsUISound_NativeProperty, bIsUISound_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.AudioComponent:bEnableLowPassFilter
    static readonly int bEnableLowPassFilter_Offset;
    static readonly IntPtr bEnableLowPassFilter_NativeProperty;
    
    public bool bEnableLowPassFilter
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableLowPassFilter_NativeProperty, bEnableLowPassFilter_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bEnableLowPassFilter_NativeProperty, bEnableLowPassFilter_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.AudioComponent:bOverridePriority
    static readonly int bOverridePriority_Offset;
    static readonly IntPtr bOverridePriority_NativeProperty;
    
    public bool bOverridePriority
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bOverridePriority_NativeProperty, bOverridePriority_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bOverridePriority_NativeProperty, bOverridePriority_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.AudioComponent:bSuppressSubtitles
    static readonly int bSuppressSubtitles_Offset;
    static readonly IntPtr bSuppressSubtitles_NativeProperty;
    
    public bool bSuppressSubtitles
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bSuppressSubtitles_NativeProperty, bSuppressSubtitles_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bSuppressSubtitles_NativeProperty, bSuppressSubtitles_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.AudioComponent:bCanPlayMultipleInstances
    static readonly int bCanPlayMultipleInstances_Offset;
    static readonly IntPtr bCanPlayMultipleInstances_NativeProperty;
    
    public bool bCanPlayMultipleInstances
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCanPlayMultipleInstances_NativeProperty, bCanPlayMultipleInstances_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bCanPlayMultipleInstances_NativeProperty, bCanPlayMultipleInstances_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.AudioComponent:bDisableParameterUpdatesWhilePlaying
    static readonly int bDisableParameterUpdatesWhilePlaying_Offset;
    static readonly IntPtr bDisableParameterUpdatesWhilePlaying_NativeProperty;
    
    public bool bDisableParameterUpdatesWhilePlaying
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bDisableParameterUpdatesWhilePlaying_NativeProperty, bDisableParameterUpdatesWhilePlaying_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bDisableParameterUpdatesWhilePlaying_NativeProperty, bDisableParameterUpdatesWhilePlaying_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.AudioComponent:bAutoManageAttachment
    static readonly int bAutoManageAttachment_Offset;
    static readonly IntPtr bAutoManageAttachment_NativeProperty;
    
    public bool bAutoManageAttachment
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAutoManageAttachment_NativeProperty, bAutoManageAttachment_Offset);
        }
    }
    
    // FloatProperty /Script/Engine.AudioComponent:PitchModulationMin
    static readonly int PitchModulationMin_Offset;
    
    public float PitchModulationMin
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PitchModulationMin_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PitchModulationMin_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.AudioComponent:PitchModulationMax
    static readonly int PitchModulationMax_Offset;
    
    public float PitchModulationMax
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PitchModulationMax_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PitchModulationMax_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.AudioComponent:VolumeModulationMin
    static readonly int VolumeModulationMin_Offset;
    
    public float VolumeModulationMin
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, VolumeModulationMin_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, VolumeModulationMin_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.AudioComponent:VolumeModulationMax
    static readonly int VolumeModulationMax_Offset;
    
    public float VolumeModulationMax
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, VolumeModulationMax_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, VolumeModulationMax_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.AudioComponent:VolumeMultiplier
    static readonly int VolumeMultiplier_Offset;
    
    public float VolumeMultiplier
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, VolumeMultiplier_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, VolumeMultiplier_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.AudioComponent:EnvelopeFollowerAttackTime
    static readonly int EnvelopeFollowerAttackTime_Offset;
    
    public int EnvelopeFollowerAttackTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, EnvelopeFollowerAttackTime_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, EnvelopeFollowerAttackTime_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.AudioComponent:EnvelopeFollowerReleaseTime
    static readonly int EnvelopeFollowerReleaseTime_Offset;
    
    public int EnvelopeFollowerReleaseTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, EnvelopeFollowerReleaseTime_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, EnvelopeFollowerReleaseTime_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.AudioComponent:Priority
    static readonly int Priority_Offset;
    
    public float Priority
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Priority_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Priority_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.AudioComponent:SubtitlePriority
    static readonly int SubtitlePriority_Offset;
    
    public float SubtitlePriority
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SubtitlePriority_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, SubtitlePriority_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/Engine.AudioComponent:SourceEffectChain
    static readonly int SourceEffectChain_Offset;
    
    public UnrealSharp.Engine.SoundEffectSourcePresetChain SourceEffectChain
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.SoundEffectSourcePresetChain>.FromNative(IntPtr.Add(NativeObject, SourceEffectChain_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.SoundEffectSourcePresetChain>.ToNative(IntPtr.Add(NativeObject, SourceEffectChain_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.AudioComponent:PitchMultiplier
    static readonly int PitchMultiplier_Offset;
    
    public float PitchMultiplier
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PitchMultiplier_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PitchMultiplier_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.AudioComponent:LowPassFilterFrequency
    static readonly int LowPassFilterFrequency_Offset;
    
    public float LowPassFilterFrequency
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LowPassFilterFrequency_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, LowPassFilterFrequency_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/Engine.AudioComponent:AttenuationSettings
    static readonly int AttenuationSettings_Offset;
    
    public UnrealSharp.Engine.SoundAttenuation AttenuationSettings
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.SoundAttenuation>.FromNative(IntPtr.Add(NativeObject, AttenuationSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.SoundAttenuation>.ToNative(IntPtr.Add(NativeObject, AttenuationSettings_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.AudioComponent:AttenuationOverrides
    static readonly int AttenuationOverrides_Offset;
    
    public UnrealSharp.Engine.SoundAttenuationSettings AttenuationOverrides
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.SoundAttenuationSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, AttenuationOverrides_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.Engine.SoundAttenuationSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, AttenuationOverrides_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/Engine.AudioComponent:AutoAttachLocationRule
    static readonly int AutoAttachLocationRule_Offset;
    
    public UnrealSharp.Engine.EAttachmentRule AutoAttachLocationRule
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.FromNative(IntPtr.Add(NativeObject, AutoAttachLocationRule_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.ToNative(IntPtr.Add(NativeObject, AutoAttachLocationRule_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/Engine.AudioComponent:AutoAttachRotationRule
    static readonly int AutoAttachRotationRule_Offset;
    
    public UnrealSharp.Engine.EAttachmentRule AutoAttachRotationRule
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.FromNative(IntPtr.Add(NativeObject, AutoAttachRotationRule_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.ToNative(IntPtr.Add(NativeObject, AutoAttachRotationRule_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/Engine.AudioComponent:AutoAttachScaleRule
    static readonly int AutoAttachScaleRule_Offset;
    
    public UnrealSharp.Engine.EAttachmentRule AutoAttachScaleRule
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.FromNative(IntPtr.Add(NativeObject, AutoAttachScaleRule_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.ToNative(IntPtr.Add(NativeObject, AutoAttachScaleRule_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.AudioComponent:ModulationRouting
    static readonly int ModulationRouting_Offset;
    
    public UnrealSharp.Engine.SoundModulationDefaultRoutingSettings ModulationRouting
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.SoundModulationDefaultRoutingSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, ModulationRouting_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.Engine.SoundModulationDefaultRoutingSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, ModulationRouting_Offset), 0, this, value);
        }
    }
    
    // WeakObjectProperty /Script/Engine.AudioComponent:AutoAttachParent
    static readonly int AutoAttachParent_Offset;
    
    public WeakObject<UnrealSharp.Engine.SceneComponent> AutoAttachParent
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<WeakObject<UnrealSharp.Engine.SceneComponent>>.FromNative(IntPtr.Add(NativeObject, AutoAttachParent_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<WeakObject<UnrealSharp.Engine.SceneComponent>>.ToNative(IntPtr.Add(NativeObject, AutoAttachParent_Offset), 0, this, value);
        }
    }
    
    // NameProperty /Script/Engine.AudioComponent:AutoAttachSocketName
    static readonly int AutoAttachSocketName_Offset;
    
    public Name AutoAttachSocketName
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, AutoAttachSocketName_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, AutoAttachSocketName_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Engine.AudioComponent:StopDelayed
    static readonly IntPtr StopDelayed_NativeFunction;
    static readonly int StopDelayed_ParamsSize;
    static readonly int StopDelayed_DelayTime_Offset;
    
    public void StopDelayed(float delayTime)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StopDelayed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, StopDelayed_DelayTime_Offset), 0, null, delayTime);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopDelayed_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:Stop
    static readonly IntPtr Stop_NativeFunction;
    
    public void Stop()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Stop_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.AudioComponent:SetWaveParameter
    static readonly IntPtr SetWaveParameter_NativeFunction;
    static readonly int SetWaveParameter_ParamsSize;
    static readonly int SetWaveParameter_InName_Offset;
    static readonly int SetWaveParameter_InWave_Offset;
    
    public void SetWaveParameter(Name inName, UnrealSharp.Engine.SoundWave inWave)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWaveParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetWaveParameter_InName_Offset), 0, null, inName);
            ObjectMarshaller<UnrealSharp.Engine.SoundWave>.ToNative(IntPtr.Add(ParamsBuffer, SetWaveParameter_InWave_Offset), 0, null, inWave);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetWaveParameter_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:SetVolumeMultiplier
    static readonly IntPtr SetVolumeMultiplier_NativeFunction;
    static readonly int SetVolumeMultiplier_ParamsSize;
    static readonly int SetVolumeMultiplier_NewVolumeMultiplier_Offset;
    
    public void SetVolumeMultiplier(float newVolumeMultiplier)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVolumeMultiplier_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetVolumeMultiplier_NewVolumeMultiplier_Offset), 0, null, newVolumeMultiplier);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVolumeMultiplier_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:SetUISound
    static readonly IntPtr SetUISound_NativeFunction;
    static readonly int SetUISound_ParamsSize;
    static readonly int SetUISound_bInUISound_Offset;
    
    public void SetUISound(bool bInUISound)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetUISound_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetUISound_bInUISound_Offset), 0, null, bInUISound);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetUISound_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:SetSubmixSend
    static readonly IntPtr SetSubmixSend_NativeFunction;
    static readonly int SetSubmixSend_ParamsSize;
    static readonly int SetSubmixSend_Submix_Offset;
    static readonly int SetSubmixSend_SendLevel_Offset;
    
    public void SetSubmixSend(UnrealSharp.Engine.SoundSubmixBase submix, float sendLevel)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSubmixSend_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SoundSubmixBase>.ToNative(IntPtr.Add(ParamsBuffer, SetSubmixSend_Submix_Offset), 0, null, submix);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSubmixSend_SendLevel_Offset), 0, null, sendLevel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSubmixSend_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:SetSourceBusSendPreEffect
    static readonly IntPtr SetSourceBusSendPreEffect_NativeFunction;
    static readonly int SetSourceBusSendPreEffect_ParamsSize;
    static readonly int SetSourceBusSendPreEffect_SoundSourceBus_Offset;
    static readonly int SetSourceBusSendPreEffect_SourceBusSendLevel_Offset;
    
    public void SetSourceBusSendPreEffect(UnrealSharp.Engine.SoundSourceBus soundSourceBus, float sourceBusSendLevel)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSourceBusSendPreEffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SoundSourceBus>.ToNative(IntPtr.Add(ParamsBuffer, SetSourceBusSendPreEffect_SoundSourceBus_Offset), 0, null, soundSourceBus);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSourceBusSendPreEffect_SourceBusSendLevel_Offset), 0, null, sourceBusSendLevel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSourceBusSendPreEffect_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:SetSourceBusSendPostEffect
    static readonly IntPtr SetSourceBusSendPostEffect_NativeFunction;
    static readonly int SetSourceBusSendPostEffect_ParamsSize;
    static readonly int SetSourceBusSendPostEffect_SoundSourceBus_Offset;
    static readonly int SetSourceBusSendPostEffect_SourceBusSendLevel_Offset;
    
    public void SetSourceBusSendPostEffect(UnrealSharp.Engine.SoundSourceBus soundSourceBus, float sourceBusSendLevel)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSourceBusSendPostEffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SoundSourceBus>.ToNative(IntPtr.Add(ParamsBuffer, SetSourceBusSendPostEffect_SoundSourceBus_Offset), 0, null, soundSourceBus);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSourceBusSendPostEffect_SourceBusSendLevel_Offset), 0, null, sourceBusSendLevel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSourceBusSendPostEffect_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:SetSound
    static readonly IntPtr SetSound_NativeFunction;
    static readonly int SetSound_ParamsSize;
    static readonly int SetSound_NewSound_Offset;
    
    public void SetSound(UnrealSharp.Engine.SoundBase newSound)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSound_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SoundBase>.ToNative(IntPtr.Add(ParamsBuffer, SetSound_NewSound_Offset), 0, null, newSound);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSound_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:SetPitchMultiplier
    static readonly IntPtr SetPitchMultiplier_NativeFunction;
    static readonly int SetPitchMultiplier_ParamsSize;
    static readonly int SetPitchMultiplier_NewPitchMultiplier_Offset;
    
    public void SetPitchMultiplier(float newPitchMultiplier)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPitchMultiplier_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPitchMultiplier_NewPitchMultiplier_Offset), 0, null, newPitchMultiplier);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPitchMultiplier_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:SetPaused
    static readonly IntPtr SetPaused_NativeFunction;
    static readonly int SetPaused_ParamsSize;
    static readonly int SetPaused_bPause_Offset;
    
    public void SetPaused(bool bPause)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPaused_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetPaused_bPause_Offset), 0, null, bPause);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPaused_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:SetOutputToBusOnly
    static readonly IntPtr SetOutputToBusOnly_NativeFunction;
    static readonly int SetOutputToBusOnly_ParamsSize;
    static readonly int SetOutputToBusOnly_bInOutputToBusOnly_Offset;
    
    public void SetOutputToBusOnly(bool bInOutputToBusOnly)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOutputToBusOnly_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetOutputToBusOnly_bInOutputToBusOnly_Offset), 0, null, bInOutputToBusOnly);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOutputToBusOnly_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:SetLowPassFilterFrequency
    static readonly IntPtr SetLowPassFilterFrequency_NativeFunction;
    static readonly int SetLowPassFilterFrequency_ParamsSize;
    static readonly int SetLowPassFilterFrequency_InLowPassFilterFrequency_Offset;
    
    public void SetLowPassFilterFrequency(float inLowPassFilterFrequency)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLowPassFilterFrequency_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLowPassFilterFrequency_InLowPassFilterFrequency_Offset), 0, null, inLowPassFilterFrequency);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLowPassFilterFrequency_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:SetLowPassFilterEnabled
    static readonly IntPtr SetLowPassFilterEnabled_NativeFunction;
    static readonly int SetLowPassFilterEnabled_ParamsSize;
    static readonly int SetLowPassFilterEnabled_InLowPassFilterEnabled_Offset;
    
    public void SetLowPassFilterEnabled(bool inLowPassFilterEnabled)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLowPassFilterEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLowPassFilterEnabled_InLowPassFilterEnabled_Offset), 0, null, inLowPassFilterEnabled);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLowPassFilterEnabled_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:SetIntParameter
    static readonly IntPtr SetIntParameter_NativeFunction;
    static readonly int SetIntParameter_ParamsSize;
    static readonly int SetIntParameter_InName_Offset;
    static readonly int SetIntParameter_InInt_Offset;
    
    public void SetIntParameter(Name inName, int inInt)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIntParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetIntParameter_InName_Offset), 0, null, inName);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetIntParameter_InInt_Offset), 0, null, inInt);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIntParameter_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:SetFloatParameter
    static readonly IntPtr SetFloatParameter_NativeFunction;
    static readonly int SetFloatParameter_ParamsSize;
    static readonly int SetFloatParameter_InName_Offset;
    static readonly int SetFloatParameter_InFloat_Offset;
    
    public void SetFloatParameter(Name inName, float inFloat)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFloatParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetFloatParameter_InName_Offset), 0, null, inName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetFloatParameter_InFloat_Offset), 0, null, inFloat);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFloatParameter_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:SetBoolParameter
    static readonly IntPtr SetBoolParameter_NativeFunction;
    static readonly int SetBoolParameter_ParamsSize;
    static readonly int SetBoolParameter_InName_Offset;
    static readonly int SetBoolParameter_InBool_Offset;
    
    public void SetBoolParameter(Name inName, bool inBool)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBoolParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetBoolParameter_InName_Offset), 0, null, inName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetBoolParameter_InBool_Offset), 0, null, inBool);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBoolParameter_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:SetAudioBusSendPreEffect
    static readonly IntPtr SetAudioBusSendPreEffect_NativeFunction;
    static readonly int SetAudioBusSendPreEffect_ParamsSize;
    static readonly int SetAudioBusSendPreEffect_AudioBus_Offset;
    static readonly int SetAudioBusSendPreEffect_AudioBusSendLevel_Offset;
    
    public void SetAudioBusSendPreEffect(UnrealSharp.Engine.AudioBus audioBus, float audioBusSendLevel)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAudioBusSendPreEffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AudioBus>.ToNative(IntPtr.Add(ParamsBuffer, SetAudioBusSendPreEffect_AudioBus_Offset), 0, null, audioBus);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAudioBusSendPreEffect_AudioBusSendLevel_Offset), 0, null, audioBusSendLevel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAudioBusSendPreEffect_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:SetAudioBusSendPostEffect
    static readonly IntPtr SetAudioBusSendPostEffect_NativeFunction;
    static readonly int SetAudioBusSendPostEffect_ParamsSize;
    static readonly int SetAudioBusSendPostEffect_AudioBus_Offset;
    static readonly int SetAudioBusSendPostEffect_AudioBusSendLevel_Offset;
    
    public void SetAudioBusSendPostEffect(UnrealSharp.Engine.AudioBus audioBus, float audioBusSendLevel)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAudioBusSendPostEffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AudioBus>.ToNative(IntPtr.Add(ParamsBuffer, SetAudioBusSendPostEffect_AudioBus_Offset), 0, null, audioBus);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAudioBusSendPostEffect_AudioBusSendLevel_Offset), 0, null, audioBusSendLevel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAudioBusSendPostEffect_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:Play
    static readonly IntPtr Play_NativeFunction;
    static readonly int Play_ParamsSize;
    static readonly int Play_StartTime_Offset;
    
    public void Play(float startTime = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Play_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Play_StartTime_Offset), 0, null, startTime);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Play_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:IsVirtualized
    static readonly IntPtr IsVirtualized_NativeFunction;
    static readonly int IsVirtualized_ParamsSize;
    static readonly int IsVirtualized_ReturnValue_Offset;
    
    public bool IsVirtualized()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsVirtualized_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsVirtualized_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsVirtualized_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AudioComponent:IsPlaying
    static readonly IntPtr IsPlaying_NativeFunction;
    static readonly int IsPlaying_ParamsSize;
    static readonly int IsPlaying_ReturnValue_Offset;
    
    public bool IsPlaying()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPlaying_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsPlaying_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPlaying_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AudioComponent:HasCookedFFTData
    static readonly IntPtr HasCookedFFTData_NativeFunction;
    static readonly int HasCookedFFTData_ParamsSize;
    static readonly int HasCookedFFTData_ReturnValue_Offset;
    
    public bool HasCookedFFTData()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasCookedFFTData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasCookedFFTData_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasCookedFFTData_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AudioComponent:HasCookedAmplitudeEnvelopeData
    static readonly IntPtr HasCookedAmplitudeEnvelopeData_NativeFunction;
    static readonly int HasCookedAmplitudeEnvelopeData_ParamsSize;
    static readonly int HasCookedAmplitudeEnvelopeData_ReturnValue_Offset;
    
    public bool HasCookedAmplitudeEnvelopeData()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasCookedAmplitudeEnvelopeData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasCookedAmplitudeEnvelopeData_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasCookedAmplitudeEnvelopeData_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AudioComponent:GetPlayState
    static readonly IntPtr GetPlayState_NativeFunction;
    static readonly int GetPlayState_ParamsSize;
    static readonly int GetPlayState_ReturnValue_Offset;
    
    public UnrealSharp.Engine.EAudioComponentPlayState GetPlayState()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPlayState_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.EAudioComponentPlayState returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Engine.EAudioComponentPlayState>.FromNative(IntPtr.Add(ParamsBuffer, GetPlayState_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AudioComponent:GetCookedFFTDataForAllPlayingSounds
    static readonly IntPtr GetCookedFFTDataForAllPlayingSounds_NativeFunction;
    static readonly int GetCookedFFTDataForAllPlayingSounds_ParamsSize;
    static readonly int GetCookedFFTDataForAllPlayingSounds_OutSoundWaveSpectralData_Offset;
    static readonly int GetCookedFFTDataForAllPlayingSounds_OutSoundWaveSpectralData_ElementSize;
    static readonly int GetCookedFFTDataForAllPlayingSounds_ReturnValue_Offset;
    
    public bool GetCookedFFTDataForAllPlayingSounds(out System.Collections.Generic.IList<UnrealSharp.Engine.SoundWaveSpectralDataPerSound> outSoundWaveSpectralData)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCookedFFTDataForAllPlayingSounds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCookedFFTDataForAllPlayingSounds_NativeFunction, ParamsBuffer);
            
            IntPtr OutSoundWaveSpectralData_NativeBuffer = IntPtr.Add(ParamsBuffer, GetCookedFFTDataForAllPlayingSounds_OutSoundWaveSpectralData_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.SoundWaveSpectralDataPerSound> OutSoundWaveSpectralData_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.SoundWaveSpectralDataPerSound> (1, UnrealSharp.Engine.SoundWaveSpectralDataPerSoundMarshaler.ToNative, UnrealSharp.Engine.SoundWaveSpectralDataPerSoundMarshaler.FromNative, GetCookedFFTDataForAllPlayingSounds_OutSoundWaveSpectralData_ElementSize);
            outSoundWaveSpectralData = OutSoundWaveSpectralData_Marshaler.FromNative(OutSoundWaveSpectralData_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.SoundWaveSpectralDataPerSound>.DestructInstance(OutSoundWaveSpectralData_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCookedFFTDataForAllPlayingSounds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AudioComponent:GetCookedFFTData
    static readonly IntPtr GetCookedFFTData_NativeFunction;
    static readonly int GetCookedFFTData_ParamsSize;
    static readonly int GetCookedFFTData_FrequenciesToGet_Offset;
    static readonly int GetCookedFFTData_FrequenciesToGet_ElementSize;
    static readonly int GetCookedFFTData_OutSoundWaveSpectralData_Offset;
    static readonly int GetCookedFFTData_OutSoundWaveSpectralData_ElementSize;
    static readonly int GetCookedFFTData_ReturnValue_Offset;
    
    public bool GetCookedFFTData(System.Collections.Generic.IList<float> frequenciesToGet, out System.Collections.Generic.IList<UnrealSharp.Engine.SoundWaveSpectralData> outSoundWaveSpectralData)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCookedFFTData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr FrequenciesToGet_NativeBuffer = IntPtr.Add(ParamsBuffer, GetCookedFFTData_FrequenciesToGet_Offset);
            UnrealArrayCopyMarshaler<float> FrequenciesToGet_Marshaler = new UnrealArrayCopyMarshaler<float>(1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, GetCookedFFTData_FrequenciesToGet_ElementSize);
            FrequenciesToGet_Marshaler.ToNative(FrequenciesToGet_NativeBuffer, 0, null, frequenciesToGet);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCookedFFTData_NativeFunction, ParamsBuffer);
            
            IntPtr OutSoundWaveSpectralData_NativeBuffer = IntPtr.Add(ParamsBuffer, GetCookedFFTData_OutSoundWaveSpectralData_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.SoundWaveSpectralData> OutSoundWaveSpectralData_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.SoundWaveSpectralData> (1, BlittableMarshaller<UnrealSharp.Engine.SoundWaveSpectralData>.ToNative, BlittableMarshaller<UnrealSharp.Engine.SoundWaveSpectralData>.FromNative, GetCookedFFTData_OutSoundWaveSpectralData_ElementSize);
            outSoundWaveSpectralData = OutSoundWaveSpectralData_Marshaler.FromNative(OutSoundWaveSpectralData_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.SoundWaveSpectralData>.DestructInstance(OutSoundWaveSpectralData_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCookedFFTData_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AudioComponent:GetCookedEnvelopeDataForAllPlayingSounds
    static readonly IntPtr GetCookedEnvelopeDataForAllPlayingSounds_NativeFunction;
    static readonly int GetCookedEnvelopeDataForAllPlayingSounds_ParamsSize;
    static readonly int GetCookedEnvelopeDataForAllPlayingSounds_OutEnvelopeData_Offset;
    static readonly int GetCookedEnvelopeDataForAllPlayingSounds_OutEnvelopeData_ElementSize;
    static readonly int GetCookedEnvelopeDataForAllPlayingSounds_ReturnValue_Offset;
    
    public bool GetCookedEnvelopeDataForAllPlayingSounds(out System.Collections.Generic.IList<UnrealSharp.Engine.SoundWaveEnvelopeDataPerSound> outEnvelopeData)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCookedEnvelopeDataForAllPlayingSounds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCookedEnvelopeDataForAllPlayingSounds_NativeFunction, ParamsBuffer);
            
            IntPtr OutEnvelopeData_NativeBuffer = IntPtr.Add(ParamsBuffer, GetCookedEnvelopeDataForAllPlayingSounds_OutEnvelopeData_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.SoundWaveEnvelopeDataPerSound> OutEnvelopeData_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.SoundWaveEnvelopeDataPerSound> (1, UnrealSharp.Engine.SoundWaveEnvelopeDataPerSoundMarshaler.ToNative, UnrealSharp.Engine.SoundWaveEnvelopeDataPerSoundMarshaler.FromNative, GetCookedEnvelopeDataForAllPlayingSounds_OutEnvelopeData_ElementSize);
            outEnvelopeData = OutEnvelopeData_Marshaler.FromNative(OutEnvelopeData_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.SoundWaveEnvelopeDataPerSound>.DestructInstance(OutEnvelopeData_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCookedEnvelopeDataForAllPlayingSounds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AudioComponent:GetCookedEnvelopeData
    static readonly IntPtr GetCookedEnvelopeData_NativeFunction;
    static readonly int GetCookedEnvelopeData_ParamsSize;
    static readonly int GetCookedEnvelopeData_OutEnvelopeData_Offset;
    static readonly int GetCookedEnvelopeData_ReturnValue_Offset;
    
    public bool GetCookedEnvelopeData(out float outEnvelopeData)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCookedEnvelopeData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCookedEnvelopeData_NativeFunction, ParamsBuffer);
            
            outEnvelopeData = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCookedEnvelopeData_OutEnvelopeData_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCookedEnvelopeData_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AudioComponent:FadeOut
    static readonly IntPtr FadeOut_NativeFunction;
    static readonly int FadeOut_ParamsSize;
    static readonly int FadeOut_FadeOutDuration_Offset;
    static readonly int FadeOut_FadeVolumeLevel_Offset;
    static readonly int FadeOut_FadeCurve_Offset;
    
    public void FadeOut(float fadeOutDuration, float fadeVolumeLevel, UnrealSharp.Engine.EAudioFaderCurve fadeCurve = UnrealSharp.Engine.EAudioFaderCurve.Linear)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FadeOut_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FadeOut_FadeOutDuration_Offset), 0, null, fadeOutDuration);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FadeOut_FadeVolumeLevel_Offset), 0, null, fadeVolumeLevel);
            BlittableMarshaller<UnrealSharp.Engine.EAudioFaderCurve>.ToNative(IntPtr.Add(ParamsBuffer, FadeOut_FadeCurve_Offset), 0, null, fadeCurve);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FadeOut_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:FadeIn
    static readonly IntPtr FadeIn_NativeFunction;
    static readonly int FadeIn_ParamsSize;
    static readonly int FadeIn_FadeInDuration_Offset;
    static readonly int FadeIn_FadeVolumeLevel_Offset;
    static readonly int FadeIn_StartTime_Offset;
    static readonly int FadeIn_FadeCurve_Offset;
    
    public void FadeIn(float fadeInDuration, float fadeVolumeLevel = 1.000000f, float startTime = 0.000000f, UnrealSharp.Engine.EAudioFaderCurve fadeCurve = UnrealSharp.Engine.EAudioFaderCurve.Linear)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FadeIn_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FadeIn_FadeInDuration_Offset), 0, null, fadeInDuration);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FadeIn_FadeVolumeLevel_Offset), 0, null, fadeVolumeLevel);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FadeIn_StartTime_Offset), 0, null, startTime);
            BlittableMarshaller<UnrealSharp.Engine.EAudioFaderCurve>.ToNative(IntPtr.Add(ParamsBuffer, FadeIn_FadeCurve_Offset), 0, null, fadeCurve);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FadeIn_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:BP_GetAttenuationSettingsToApply
    static readonly IntPtr BP_GetAttenuationSettingsToApply_NativeFunction;
    static readonly int BP_GetAttenuationSettingsToApply_ParamsSize;
    static readonly int BP_GetAttenuationSettingsToApply_OutAttenuationSettings_Offset;
    static readonly int BP_GetAttenuationSettingsToApply_ReturnValue_Offset;
    
    public bool GetAttenuationSettingsToApply(out UnrealSharp.Engine.SoundAttenuationSettings outAttenuationSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BP_GetAttenuationSettingsToApply_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BP_GetAttenuationSettingsToApply_NativeFunction, ParamsBuffer);
            
            outAttenuationSettings = UnrealSharp.Engine.SoundAttenuationSettingsMarshaler.FromNative(IntPtr.Add(ParamsBuffer, BP_GetAttenuationSettingsToApply_OutAttenuationSettings_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BP_GetAttenuationSettingsToApply_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AudioComponent:AdjustVolume
    static readonly IntPtr AdjustVolume_NativeFunction;
    static readonly int AdjustVolume_ParamsSize;
    static readonly int AdjustVolume_AdjustVolumeDuration_Offset;
    static readonly int AdjustVolume_AdjustVolumeLevel_Offset;
    static readonly int AdjustVolume_FadeCurve_Offset;
    
    public void AdjustVolume(float adjustVolumeDuration, float adjustVolumeLevel, UnrealSharp.Engine.EAudioFaderCurve fadeCurve = UnrealSharp.Engine.EAudioFaderCurve.Linear)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AdjustVolume_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AdjustVolume_AdjustVolumeDuration_Offset), 0, null, adjustVolumeDuration);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AdjustVolume_AdjustVolumeLevel_Offset), 0, null, adjustVolumeLevel);
            BlittableMarshaller<UnrealSharp.Engine.EAudioFaderCurve>.ToNative(IntPtr.Add(ParamsBuffer, AdjustVolume_FadeCurve_Offset), 0, null, fadeCurve);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AdjustVolume_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioComponent:AdjustAttenuation
    static readonly IntPtr AdjustAttenuation_NativeFunction;
    static readonly int AdjustAttenuation_ParamsSize;
    static readonly int AdjustAttenuation_InAttenuationSettings_Offset;
    
    public void AdjustAttenuation(UnrealSharp.Engine.SoundAttenuationSettings inAttenuationSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AdjustAttenuation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.SoundAttenuationSettingsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AdjustAttenuation_InAttenuationSettings_Offset), 0, null, inAttenuationSettings);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AdjustAttenuation_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    
}
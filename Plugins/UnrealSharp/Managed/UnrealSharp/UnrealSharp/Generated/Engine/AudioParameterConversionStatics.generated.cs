// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class AudioParameterConversionStatics : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static AudioParameterConversionStatics()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AudioParameterConversionStatics");
        
        
        StringToAudioParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StringToAudioParameter");
        StringToAudioParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StringToAudioParameter_NativeFunction);
        StringToAudioParameter_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StringToAudioParameter_NativeFunction, "Name");
        StringToAudioParameter_String_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StringToAudioParameter_NativeFunction, "String");
        StringToAudioParameter_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StringToAudioParameter_NativeFunction, "ReturnValue");
        ObjectToAudioParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ObjectToAudioParameter");
        ObjectToAudioParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ObjectToAudioParameter_NativeFunction);
        ObjectToAudioParameter_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ObjectToAudioParameter_NativeFunction, "Name");
        ObjectToAudioParameter_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ObjectToAudioParameter_NativeFunction, "Object");
        ObjectToAudioParameter_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ObjectToAudioParameter_NativeFunction, "ReturnValue");
        ObjectArrayToAudioParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ObjectArrayToAudioParameter");
        ObjectArrayToAudioParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ObjectArrayToAudioParameter_NativeFunction);
        ObjectArrayToAudioParameter_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ObjectArrayToAudioParameter_NativeFunction, "Name");
        ObjectArrayToAudioParameter_Objects_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ObjectArrayToAudioParameter_NativeFunction, "Objects");
        ObjectArrayToAudioParameter_Objects_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ObjectArrayToAudioParameter_NativeFunction, "Objects");
        ObjectArrayToAudioParameter_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ObjectArrayToAudioParameter_NativeFunction, "ReturnValue");
        IntegerToAudioParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IntegerToAudioParameter");
        IntegerToAudioParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IntegerToAudioParameter_NativeFunction);
        IntegerToAudioParameter_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IntegerToAudioParameter_NativeFunction, "Name");
        IntegerToAudioParameter_Integer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IntegerToAudioParameter_NativeFunction, "Integer");
        IntegerToAudioParameter_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IntegerToAudioParameter_NativeFunction, "ReturnValue");
        IntegerArrayToAudioParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IntegerArrayToAudioParameter");
        IntegerArrayToAudioParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IntegerArrayToAudioParameter_NativeFunction);
        IntegerArrayToAudioParameter_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IntegerArrayToAudioParameter_NativeFunction, "Name");
        IntegerArrayToAudioParameter_Integers_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IntegerArrayToAudioParameter_NativeFunction, "Integers");
        IntegerArrayToAudioParameter_Integers_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(IntegerArrayToAudioParameter_NativeFunction, "Integers");
        IntegerArrayToAudioParameter_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IntegerArrayToAudioParameter_NativeFunction, "ReturnValue");
        FloatToAudioParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FloatToAudioParameter");
        FloatToAudioParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FloatToAudioParameter_NativeFunction);
        FloatToAudioParameter_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FloatToAudioParameter_NativeFunction, "Name");
        FloatToAudioParameter_Float_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FloatToAudioParameter_NativeFunction, "Float");
        FloatToAudioParameter_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FloatToAudioParameter_NativeFunction, "ReturnValue");
        FloatArrayToAudioParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FloatArrayToAudioParameter");
        FloatArrayToAudioParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FloatArrayToAudioParameter_NativeFunction);
        FloatArrayToAudioParameter_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FloatArrayToAudioParameter_NativeFunction, "Name");
        FloatArrayToAudioParameter_Floats_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FloatArrayToAudioParameter_NativeFunction, "Floats");
        FloatArrayToAudioParameter_Floats_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(FloatArrayToAudioParameter_NativeFunction, "Floats");
        FloatArrayToAudioParameter_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FloatArrayToAudioParameter_NativeFunction, "ReturnValue");
        BooleanToAudioParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BooleanToAudioParameter");
        BooleanToAudioParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BooleanToAudioParameter_NativeFunction);
        BooleanToAudioParameter_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BooleanToAudioParameter_NativeFunction, "Name");
        BooleanToAudioParameter_Bool_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BooleanToAudioParameter_NativeFunction, "Bool");
        BooleanToAudioParameter_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BooleanToAudioParameter_NativeFunction, "ReturnValue");
        BooleanArrayToAudioParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BooleanArrayToAudioParameter");
        BooleanArrayToAudioParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BooleanArrayToAudioParameter_NativeFunction);
        BooleanArrayToAudioParameter_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BooleanArrayToAudioParameter_NativeFunction, "Name");
        BooleanArrayToAudioParameter_Bools_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BooleanArrayToAudioParameter_NativeFunction, "Bools");
        BooleanArrayToAudioParameter_Bools_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BooleanArrayToAudioParameter_NativeFunction, "Bools");
        BooleanArrayToAudioParameter_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BooleanArrayToAudioParameter_NativeFunction, "ReturnValue");
        
        
    }
    
    protected AudioParameterConversionStatics(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.AudioParameterConversionStatics:StringToAudioParameter
    static readonly IntPtr StringToAudioParameter_NativeFunction;
    static readonly int StringToAudioParameter_ParamsSize;
    static readonly int StringToAudioParameter_Name_Offset;
    static readonly int StringToAudioParameter_String_Offset;
    static readonly int StringToAudioParameter_ReturnValue_Offset;
    
    public static UnrealSharp.AudioExtensions.AudioParameter StringToAudioParameter(Name name, string @string)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StringToAudioParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, StringToAudioParameter_Name_Offset), 0, null, name);
            IntPtr String_NativePtr = IntPtr.Add(ParamsBuffer,StringToAudioParameter_String_Offset);
            StringMarshaller.ToNative(String_NativePtr,0,null,@string);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, StringToAudioParameter_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AudioExtensions.AudioParameter returnValue;
            returnValue = UnrealSharp.AudioExtensions.AudioParameterMarshaler.FromNative(IntPtr.Add(ParamsBuffer, StringToAudioParameter_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(String_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AudioParameterConversionStatics:ObjectToAudioParameter
    static readonly IntPtr ObjectToAudioParameter_NativeFunction;
    static readonly int ObjectToAudioParameter_ParamsSize;
    static readonly int ObjectToAudioParameter_Name_Offset;
    static readonly int ObjectToAudioParameter_Object_Offset;
    static readonly int ObjectToAudioParameter_ReturnValue_Offset;
    
    public static UnrealSharp.AudioExtensions.AudioParameter ObjectToAudioParameter(Name name, UnrealSharp.CoreUObject.Object @object)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ObjectToAudioParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ObjectToAudioParameter_Name_Offset), 0, null, name);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ObjectToAudioParameter_Object_Offset), 0, null, @object);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ObjectToAudioParameter_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AudioExtensions.AudioParameter returnValue;
            returnValue = UnrealSharp.AudioExtensions.AudioParameterMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ObjectToAudioParameter_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AudioParameterConversionStatics:ObjectArrayToAudioParameter
    static readonly IntPtr ObjectArrayToAudioParameter_NativeFunction;
    static readonly int ObjectArrayToAudioParameter_ParamsSize;
    static readonly int ObjectArrayToAudioParameter_Name_Offset;
    static readonly int ObjectArrayToAudioParameter_Objects_Offset;
    static readonly int ObjectArrayToAudioParameter_Objects_ElementSize;
    static readonly int ObjectArrayToAudioParameter_ReturnValue_Offset;
    
    public static UnrealSharp.AudioExtensions.AudioParameter ObjectArrayToAudioParameter(Name name, System.Collections.Generic.IList<UnrealSharp.CoreUObject.Object> objects)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ObjectArrayToAudioParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ObjectArrayToAudioParameter_Name_Offset), 0, null, name);
            IntPtr Objects_NativeBuffer = IntPtr.Add(ParamsBuffer, ObjectArrayToAudioParameter_Objects_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object> Objects_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object>(1, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative, ObjectArrayToAudioParameter_Objects_ElementSize);
            Objects_Marshaler.ToNative(Objects_NativeBuffer, 0, null, objects);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ObjectArrayToAudioParameter_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AudioExtensions.AudioParameter returnValue;
            returnValue = UnrealSharp.AudioExtensions.AudioParameterMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ObjectArrayToAudioParameter_ReturnValue_Offset), 0, null);
            
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object>.DestructInstance(Objects_NativeBuffer, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AudioParameterConversionStatics:IntegerToAudioParameter
    static readonly IntPtr IntegerToAudioParameter_NativeFunction;
    static readonly int IntegerToAudioParameter_ParamsSize;
    static readonly int IntegerToAudioParameter_Name_Offset;
    static readonly int IntegerToAudioParameter_Integer_Offset;
    static readonly int IntegerToAudioParameter_ReturnValue_Offset;
    
    public static UnrealSharp.AudioExtensions.AudioParameter IntegerToAudioParameter(Name name, int integer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IntegerToAudioParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, IntegerToAudioParameter_Name_Offset), 0, null, name);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, IntegerToAudioParameter_Integer_Offset), 0, null, integer);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IntegerToAudioParameter_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AudioExtensions.AudioParameter returnValue;
            returnValue = UnrealSharp.AudioExtensions.AudioParameterMarshaler.FromNative(IntPtr.Add(ParamsBuffer, IntegerToAudioParameter_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AudioParameterConversionStatics:IntegerArrayToAudioParameter
    static readonly IntPtr IntegerArrayToAudioParameter_NativeFunction;
    static readonly int IntegerArrayToAudioParameter_ParamsSize;
    static readonly int IntegerArrayToAudioParameter_Name_Offset;
    static readonly int IntegerArrayToAudioParameter_Integers_Offset;
    static readonly int IntegerArrayToAudioParameter_Integers_ElementSize;
    static readonly int IntegerArrayToAudioParameter_ReturnValue_Offset;
    
    public static UnrealSharp.AudioExtensions.AudioParameter IntegerArrayToAudioParameter(Name name, System.Collections.Generic.IList<int> integers)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IntegerArrayToAudioParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, IntegerArrayToAudioParameter_Name_Offset), 0, null, name);
            IntPtr Integers_NativeBuffer = IntPtr.Add(ParamsBuffer, IntegerArrayToAudioParameter_Integers_Offset);
            UnrealArrayCopyMarshaler<int> Integers_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, IntegerArrayToAudioParameter_Integers_ElementSize);
            Integers_Marshaler.ToNative(Integers_NativeBuffer, 0, null, integers);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IntegerArrayToAudioParameter_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AudioExtensions.AudioParameter returnValue;
            returnValue = UnrealSharp.AudioExtensions.AudioParameterMarshaler.FromNative(IntPtr.Add(ParamsBuffer, IntegerArrayToAudioParameter_ReturnValue_Offset), 0, null);
            
            UnrealArrayCopyMarshaler<int>.DestructInstance(Integers_NativeBuffer, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AudioParameterConversionStatics:FloatToAudioParameter
    static readonly IntPtr FloatToAudioParameter_NativeFunction;
    static readonly int FloatToAudioParameter_ParamsSize;
    static readonly int FloatToAudioParameter_Name_Offset;
    static readonly int FloatToAudioParameter_Float_Offset;
    static readonly int FloatToAudioParameter_ReturnValue_Offset;
    
    public static UnrealSharp.AudioExtensions.AudioParameter FloatToAudioParameter(Name name, float @float)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FloatToAudioParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, FloatToAudioParameter_Name_Offset), 0, null, name);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FloatToAudioParameter_Float_Offset), 0, null, @float);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FloatToAudioParameter_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AudioExtensions.AudioParameter returnValue;
            returnValue = UnrealSharp.AudioExtensions.AudioParameterMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FloatToAudioParameter_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AudioParameterConversionStatics:FloatArrayToAudioParameter
    static readonly IntPtr FloatArrayToAudioParameter_NativeFunction;
    static readonly int FloatArrayToAudioParameter_ParamsSize;
    static readonly int FloatArrayToAudioParameter_Name_Offset;
    static readonly int FloatArrayToAudioParameter_Floats_Offset;
    static readonly int FloatArrayToAudioParameter_Floats_ElementSize;
    static readonly int FloatArrayToAudioParameter_ReturnValue_Offset;
    
    public static UnrealSharp.AudioExtensions.AudioParameter FloatArrayToAudioParameter(Name name, System.Collections.Generic.IList<float> floats)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FloatArrayToAudioParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, FloatArrayToAudioParameter_Name_Offset), 0, null, name);
            IntPtr Floats_NativeBuffer = IntPtr.Add(ParamsBuffer, FloatArrayToAudioParameter_Floats_Offset);
            UnrealArrayCopyMarshaler<float> Floats_Marshaler = new UnrealArrayCopyMarshaler<float>(1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, FloatArrayToAudioParameter_Floats_ElementSize);
            Floats_Marshaler.ToNative(Floats_NativeBuffer, 0, null, floats);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FloatArrayToAudioParameter_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AudioExtensions.AudioParameter returnValue;
            returnValue = UnrealSharp.AudioExtensions.AudioParameterMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FloatArrayToAudioParameter_ReturnValue_Offset), 0, null);
            
            UnrealArrayCopyMarshaler<float>.DestructInstance(Floats_NativeBuffer, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AudioParameterConversionStatics:BooleanToAudioParameter
    static readonly IntPtr BooleanToAudioParameter_NativeFunction;
    static readonly int BooleanToAudioParameter_ParamsSize;
    static readonly int BooleanToAudioParameter_Name_Offset;
    static readonly int BooleanToAudioParameter_Bool_Offset;
    static readonly int BooleanToAudioParameter_ReturnValue_Offset;
    
    public static UnrealSharp.AudioExtensions.AudioParameter BooleanToAudioParameter(Name name, bool @bool)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BooleanToAudioParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, BooleanToAudioParameter_Name_Offset), 0, null, name);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BooleanToAudioParameter_Bool_Offset), 0, null, @bool);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BooleanToAudioParameter_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AudioExtensions.AudioParameter returnValue;
            returnValue = UnrealSharp.AudioExtensions.AudioParameterMarshaler.FromNative(IntPtr.Add(ParamsBuffer, BooleanToAudioParameter_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.AudioParameterConversionStatics:BooleanArrayToAudioParameter
    static readonly IntPtr BooleanArrayToAudioParameter_NativeFunction;
    static readonly int BooleanArrayToAudioParameter_ParamsSize;
    static readonly int BooleanArrayToAudioParameter_Name_Offset;
    static readonly int BooleanArrayToAudioParameter_Bools_Offset;
    static readonly int BooleanArrayToAudioParameter_Bools_ElementSize;
    static readonly int BooleanArrayToAudioParameter_ReturnValue_Offset;
    
    public static UnrealSharp.AudioExtensions.AudioParameter BooleanArrayToAudioParameter(Name name, System.Collections.Generic.IList<bool> bools)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BooleanArrayToAudioParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, BooleanArrayToAudioParameter_Name_Offset), 0, null, name);
            IntPtr Bools_NativeBuffer = IntPtr.Add(ParamsBuffer, BooleanArrayToAudioParameter_Bools_Offset);
            UnrealArrayCopyMarshaler<bool> Bools_Marshaler = new UnrealArrayCopyMarshaler<bool>(1, BoolMarshaller.ToNative, BoolMarshaller.FromNative, BooleanArrayToAudioParameter_Bools_ElementSize);
            Bools_Marshaler.ToNative(Bools_NativeBuffer, 0, null, bools);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BooleanArrayToAudioParameter_NativeFunction, ParamsBuffer);
            
            UnrealSharp.AudioExtensions.AudioParameter returnValue;
            returnValue = UnrealSharp.AudioExtensions.AudioParameterMarshaler.FromNative(IntPtr.Add(ParamsBuffer, BooleanArrayToAudioParameter_ReturnValue_Offset), 0, null);
            
            UnrealArrayCopyMarshaler<bool>.DestructInstance(Bools_NativeBuffer, 0);
            return returnValue;
        }
    }
    
    
}
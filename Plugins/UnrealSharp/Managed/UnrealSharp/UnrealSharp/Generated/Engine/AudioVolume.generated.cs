// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class AudioVolume : UnrealSharp.Engine.Volume
{
    
    static AudioVolume()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AudioVolume");
        
        Priority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Priority");
        bEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnabled");
        bEnabled_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnabled");
        Settings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Settings");
        AmbientZoneSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AmbientZoneSettings");
        SubmixSendSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SubmixSendSettings");
        SubmixSendSettings_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "SubmixSendSettings");
        SubmixOverrideSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SubmixOverrideSettings");
        SubmixOverrideSettings_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "SubmixOverrideSettings");
        
        SetSubmixSendSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSubmixSendSettings");
        SetSubmixSendSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSubmixSendSettings_NativeFunction);
        SetSubmixSendSettings_NewSubmixSendSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSubmixSendSettings_NativeFunction, "NewSubmixSendSettings");
        SetSubmixSendSettings_NewSubmixSendSettings_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetSubmixSendSettings_NativeFunction, "NewSubmixSendSettings");
        SetSubmixOverrideSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSubmixOverrideSettings");
        SetSubmixOverrideSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSubmixOverrideSettings_NativeFunction);
        SetSubmixOverrideSettings_NewSubmixOverrideSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSubmixOverrideSettings_NativeFunction, "NewSubmixOverrideSettings");
        SetSubmixOverrideSettings_NewSubmixOverrideSettings_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetSubmixOverrideSettings_NativeFunction, "NewSubmixOverrideSettings");
        SetReverbSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetReverbSettings");
        SetReverbSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetReverbSettings_NativeFunction);
        SetReverbSettings_NewReverbSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetReverbSettings_NativeFunction, "NewReverbSettings");
        SetPriority_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPriority");
        SetPriority_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPriority_NativeFunction);
        SetPriority_NewPriority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPriority_NativeFunction, "NewPriority");
        SetInteriorSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetInteriorSettings");
        SetInteriorSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetInteriorSettings_NativeFunction);
        SetInteriorSettings_NewInteriorSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInteriorSettings_NativeFunction, "NewInteriorSettings");
        SetEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetEnabled");
        SetEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetEnabled_NativeFunction);
        SetEnabled_bNewEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEnabled_NativeFunction, "bNewEnabled");
        
        
    }
    
    protected AudioVolume(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Engine.AudioVolume:Priority
    static readonly int Priority_Offset;
    
    public float Priority
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Priority_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.AudioVolume:bEnabled
    static readonly int bEnabled_Offset;
    static readonly IntPtr bEnabled_NativeProperty;
    
    public bool bEnabled
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnabled_NativeProperty, bEnabled_Offset);
        }
    }
    
    // StructProperty /Script/Engine.AudioVolume:Settings
    static readonly int Settings_Offset;
    
    public UnrealSharp.Engine.ReverbSettings Settings
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.ReverbSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, Settings_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.AudioVolume:AmbientZoneSettings
    static readonly int AmbientZoneSettings_Offset;
    
    public UnrealSharp.Engine.InteriorSettings AmbientZoneSettings
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.InteriorSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, AmbientZoneSettings_Offset), 0, this);
        }
    }
    
    // ArrayProperty /Script/Engine.AudioVolume:SubmixSendSettings
    static readonly int SubmixSendSettings_Offset;
    static readonly IntPtr SubmixSendSettings_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.AudioVolumeSubmixSendSettings> SubmixSendSettings_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.Engine.AudioVolumeSubmixSendSettings> SubmixSendSettings
    {
        get
        {
            if(SubmixSendSettings_Wrapper == null)
            {
                SubmixSendSettings_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.AudioVolumeSubmixSendSettings>(1, SubmixSendSettings_NativeProperty, UnrealSharp.Engine.AudioVolumeSubmixSendSettingsMarshaler.ToNative, UnrealSharp.Engine.AudioVolumeSubmixSendSettingsMarshaler.FromNative);
            }
            
            return SubmixSendSettings_Wrapper.FromNative(IntPtr.Add(NativeObject,SubmixSendSettings_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/Engine.AudioVolume:SubmixOverrideSettings
    static readonly int SubmixOverrideSettings_Offset;
    static readonly IntPtr SubmixOverrideSettings_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.AudioVolumeSubmixOverrideSettings> SubmixOverrideSettings_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.Engine.AudioVolumeSubmixOverrideSettings> SubmixOverrideSettings
    {
        get
        {
            if(SubmixOverrideSettings_Wrapper == null)
            {
                SubmixOverrideSettings_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.AudioVolumeSubmixOverrideSettings>(1, SubmixOverrideSettings_NativeProperty, UnrealSharp.Engine.AudioVolumeSubmixOverrideSettingsMarshaler.ToNative, UnrealSharp.Engine.AudioVolumeSubmixOverrideSettingsMarshaler.FromNative);
            }
            
            return SubmixOverrideSettings_Wrapper.FromNative(IntPtr.Add(NativeObject,SubmixOverrideSettings_Offset),0,this);
        }
    }
    
    // Function /Script/Engine.AudioVolume:SetSubmixSendSettings
    static readonly IntPtr SetSubmixSendSettings_NativeFunction;
    static readonly int SetSubmixSendSettings_ParamsSize;
    static readonly int SetSubmixSendSettings_NewSubmixSendSettings_Offset;
    static readonly int SetSubmixSendSettings_NewSubmixSendSettings_ElementSize;
    
    public void SetSubmixSendSettings(System.Collections.Generic.IList<UnrealSharp.Engine.AudioVolumeSubmixSendSettings> newSubmixSendSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSubmixSendSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NewSubmixSendSettings_NativeBuffer = IntPtr.Add(ParamsBuffer, SetSubmixSendSettings_NewSubmixSendSettings_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.AudioVolumeSubmixSendSettings> NewSubmixSendSettings_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.AudioVolumeSubmixSendSettings>(1, UnrealSharp.Engine.AudioVolumeSubmixSendSettingsMarshaler.ToNative, UnrealSharp.Engine.AudioVolumeSubmixSendSettingsMarshaler.FromNative, SetSubmixSendSettings_NewSubmixSendSettings_ElementSize);
            NewSubmixSendSettings_Marshaler.ToNative(NewSubmixSendSettings_NativeBuffer, 0, null, newSubmixSendSettings);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSubmixSendSettings_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.AudioVolume:SetSubmixOverrideSettings
    static readonly IntPtr SetSubmixOverrideSettings_NativeFunction;
    static readonly int SetSubmixOverrideSettings_ParamsSize;
    static readonly int SetSubmixOverrideSettings_NewSubmixOverrideSettings_Offset;
    static readonly int SetSubmixOverrideSettings_NewSubmixOverrideSettings_ElementSize;
    
    public void SetSubmixOverrideSettings(System.Collections.Generic.IList<UnrealSharp.Engine.AudioVolumeSubmixOverrideSettings> newSubmixOverrideSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSubmixOverrideSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NewSubmixOverrideSettings_NativeBuffer = IntPtr.Add(ParamsBuffer, SetSubmixOverrideSettings_NewSubmixOverrideSettings_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.AudioVolumeSubmixOverrideSettings> NewSubmixOverrideSettings_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.AudioVolumeSubmixOverrideSettings>(1, UnrealSharp.Engine.AudioVolumeSubmixOverrideSettingsMarshaler.ToNative, UnrealSharp.Engine.AudioVolumeSubmixOverrideSettingsMarshaler.FromNative, SetSubmixOverrideSettings_NewSubmixOverrideSettings_ElementSize);
            NewSubmixOverrideSettings_Marshaler.ToNative(NewSubmixOverrideSettings_NativeBuffer, 0, null, newSubmixOverrideSettings);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSubmixOverrideSettings_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.AudioVolume:SetReverbSettings
    static readonly IntPtr SetReverbSettings_NativeFunction;
    static readonly int SetReverbSettings_ParamsSize;
    static readonly int SetReverbSettings_NewReverbSettings_Offset;
    
    public void SetReverbSettings(UnrealSharp.Engine.ReverbSettings newReverbSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetReverbSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.ReverbSettingsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetReverbSettings_NewReverbSettings_Offset), 0, null, newReverbSettings);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetReverbSettings_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.AudioVolume:SetPriority
    static readonly IntPtr SetPriority_NativeFunction;
    static readonly int SetPriority_ParamsSize;
    static readonly int SetPriority_NewPriority_Offset;
    
    public void SetPriority(float newPriority)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPriority_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPriority_NewPriority_Offset), 0, null, newPriority);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPriority_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.AudioVolume:SetInteriorSettings
    static readonly IntPtr SetInteriorSettings_NativeFunction;
    static readonly int SetInteriorSettings_ParamsSize;
    static readonly int SetInteriorSettings_NewInteriorSettings_Offset;
    
    public void SetInteriorSettings(UnrealSharp.Engine.InteriorSettings newInteriorSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetInteriorSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.InteriorSettingsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetInteriorSettings_NewInteriorSettings_Offset), 0, null, newInteriorSettings);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetInteriorSettings_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.AudioVolume:SetEnabled
    static readonly IntPtr SetEnabled_NativeFunction;
    static readonly int SetEnabled_ParamsSize;
    static readonly int SetEnabled_bNewEnabled_Offset;
    
    public void SetEnabled(bool bNewEnabled)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetEnabled_bNewEnabled_Offset), 0, null, bNewEnabled);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetEnabled_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class BillboardComponent : UnrealSharp.Engine.PrimitiveComponent
{
    
    static BillboardComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("BillboardComponent");
        
        Sprite_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Sprite");
        bIsScreenSizeScaled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsScreenSizeScaled");
        bIsScreenSizeScaled_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIsScreenSizeScaled");
        ScreenSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ScreenSize");
        U_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "U");
        UL_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "UL");
        V_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "V");
        VL_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VL");
        OpacityMaskRefVal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OpacityMaskRefVal");
        bUseInEditorScaling_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseInEditorScaling");
        
        SetUV_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetUV");
        SetUV_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetUV_NativeFunction);
        SetUV_NewU_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUV_NativeFunction, "NewU");
        SetUV_NewUL_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUV_NativeFunction, "NewUL");
        SetUV_NewV_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUV_NativeFunction, "NewV");
        SetUV_NewVL_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUV_NativeFunction, "NewVL");
        SetSpriteAndUV_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSpriteAndUV");
        SetSpriteAndUV_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSpriteAndUV_NativeFunction);
        SetSpriteAndUV_NewSprite_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSpriteAndUV_NativeFunction, "NewSprite");
        SetSpriteAndUV_NewU_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSpriteAndUV_NativeFunction, "NewU");
        SetSpriteAndUV_NewUL_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSpriteAndUV_NativeFunction, "NewUL");
        SetSpriteAndUV_NewV_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSpriteAndUV_NativeFunction, "NewV");
        SetSpriteAndUV_NewVL_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSpriteAndUV_NativeFunction, "NewVL");
        SetSprite_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSprite");
        SetSprite_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSprite_NativeFunction);
        SetSprite_NewSprite_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSprite_NativeFunction, "NewSprite");
        SetOpacityMaskRefVal_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOpacityMaskRefVal");
        SetOpacityMaskRefVal_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOpacityMaskRefVal_NativeFunction);
        SetOpacityMaskRefVal_RefVal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOpacityMaskRefVal_NativeFunction, "RefVal");
        
        
    }
    
    protected BillboardComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Engine.BillboardComponent:Sprite
    static readonly int Sprite_Offset;
    
    public UnrealSharp.Engine.Texture2D Sprite
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.Texture2D>.FromNative(IntPtr.Add(NativeObject, Sprite_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.Texture2D>.ToNative(IntPtr.Add(NativeObject, Sprite_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.BillboardComponent:bIsScreenSizeScaled
    static readonly int bIsScreenSizeScaled_Offset;
    static readonly IntPtr bIsScreenSizeScaled_NativeProperty;
    
    public bool bIsScreenSizeScaled
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIsScreenSizeScaled_NativeProperty, bIsScreenSizeScaled_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bIsScreenSizeScaled_NativeProperty, bIsScreenSizeScaled_Offset, value);
        }
    }
    
    // FloatProperty /Script/Engine.BillboardComponent:ScreenSize
    static readonly int ScreenSize_Offset;
    
    public float ScreenSize
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ScreenSize_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ScreenSize_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.BillboardComponent:U
    static readonly int U_Offset;
    
    public float U
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, U_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, U_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.BillboardComponent:UL
    static readonly int UL_Offset;
    
    public float UL
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, UL_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, UL_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.BillboardComponent:V
    static readonly int V_Offset;
    
    public float V
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, V_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, V_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.BillboardComponent:VL
    static readonly int VL_Offset;
    
    public float VL
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, VL_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, VL_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.BillboardComponent:OpacityMaskRefVal
    static readonly int OpacityMaskRefVal_Offset;
    
    public float OpacityMaskRefVal
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, OpacityMaskRefVal_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, OpacityMaskRefVal_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.BillboardComponent:bUseInEditorScaling
    static readonly int bUseInEditorScaling_Offset;
    
    public bool bUseInEditorScaling
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseInEditorScaling_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bUseInEditorScaling_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Engine.BillboardComponent:SetUV
    static readonly IntPtr SetUV_NativeFunction;
    static readonly int SetUV_ParamsSize;
    static readonly int SetUV_NewU_Offset;
    static readonly int SetUV_NewUL_Offset;
    static readonly int SetUV_NewV_Offset;
    static readonly int SetUV_NewVL_Offset;
    
    public void SetUV(int newU, int newUL, int newV, int newVL)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetUV_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetUV_NewU_Offset), 0, null, newU);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetUV_NewUL_Offset), 0, null, newUL);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetUV_NewV_Offset), 0, null, newV);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetUV_NewVL_Offset), 0, null, newVL);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetUV_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.BillboardComponent:SetSpriteAndUV
    static readonly IntPtr SetSpriteAndUV_NativeFunction;
    static readonly int SetSpriteAndUV_ParamsSize;
    static readonly int SetSpriteAndUV_NewSprite_Offset;
    static readonly int SetSpriteAndUV_NewU_Offset;
    static readonly int SetSpriteAndUV_NewUL_Offset;
    static readonly int SetSpriteAndUV_NewV_Offset;
    static readonly int SetSpriteAndUV_NewVL_Offset;
    
    public void SetSpriteAndUV(UnrealSharp.Engine.Texture2D newSprite, int newU, int newUL, int newV, int newVL)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSpriteAndUV_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Texture2D>.ToNative(IntPtr.Add(ParamsBuffer, SetSpriteAndUV_NewSprite_Offset), 0, null, newSprite);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetSpriteAndUV_NewU_Offset), 0, null, newU);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetSpriteAndUV_NewUL_Offset), 0, null, newUL);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetSpriteAndUV_NewV_Offset), 0, null, newV);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetSpriteAndUV_NewVL_Offset), 0, null, newVL);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSpriteAndUV_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.BillboardComponent:SetSprite
    static readonly IntPtr SetSprite_NativeFunction;
    static readonly int SetSprite_ParamsSize;
    static readonly int SetSprite_NewSprite_Offset;
    
    public void SetSprite(UnrealSharp.Engine.Texture2D newSprite)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSprite_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Texture2D>.ToNative(IntPtr.Add(ParamsBuffer, SetSprite_NewSprite_Offset), 0, null, newSprite);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSprite_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.BillboardComponent:SetOpacityMaskRefVal
    static readonly IntPtr SetOpacityMaskRefVal_NativeFunction;
    static readonly int SetOpacityMaskRefVal_ParamsSize;
    static readonly int SetOpacityMaskRefVal_RefVal_Offset;
    
    public void SetOpacityMaskRefVal(float refVal)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOpacityMaskRefVal_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetOpacityMaskRefVal_RefVal_Offset), 0, null, refVal);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOpacityMaskRefVal_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class BuiltInAttributesExtensions : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static BuiltInAttributesExtensions()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("BuiltInAttributesExtensions");
        
        
        AddTransformAttribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddTransformAttribute");
        AddTransformAttribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddTransformAttribute_NativeFunction);
        AddTransformAttribute_AnimSequenceBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTransformAttribute_NativeFunction, "AnimSequenceBase");
        AddTransformAttribute_AttributeName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTransformAttribute_NativeFunction, "AttributeName");
        AddTransformAttribute_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTransformAttribute_NativeFunction, "BoneName");
        AddTransformAttribute_Keys_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTransformAttribute_NativeFunction, "Keys");
        AddTransformAttribute_Keys_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(AddTransformAttribute_NativeFunction, "Keys");
        AddTransformAttribute_Values_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTransformAttribute_NativeFunction, "Values");
        AddTransformAttribute_Values_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(AddTransformAttribute_NativeFunction, "Values");
        AddTransformAttribute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTransformAttribute_NativeFunction, "ReturnValue");
        
        
    }
    
    protected BuiltInAttributesExtensions(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.BuiltInAttributesExtensions:AddTransformAttribute
    static readonly IntPtr AddTransformAttribute_NativeFunction;
    static readonly int AddTransformAttribute_ParamsSize;
    static readonly int AddTransformAttribute_AnimSequenceBase_Offset;
    static readonly int AddTransformAttribute_AttributeName_Offset;
    static readonly int AddTransformAttribute_BoneName_Offset;
    static readonly int AddTransformAttribute_Keys_Offset;
    static readonly int AddTransformAttribute_Keys_ElementSize;
    static readonly int AddTransformAttribute_Values_Offset;
    static readonly int AddTransformAttribute_Values_ElementSize;
    static readonly int AddTransformAttribute_ReturnValue_Offset;
    
    public static bool AddTransformAttribute(UnrealSharp.Engine.AnimSequenceBase animSequenceBase, Name attributeName, Name boneName, System.Collections.Generic.IList<float> keys, System.Collections.Generic.IList<UnrealSharp.Transform> values)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddTransformAttribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequenceBase>.ToNative(IntPtr.Add(ParamsBuffer, AddTransformAttribute_AnimSequenceBase_Offset), 0, null, animSequenceBase);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddTransformAttribute_AttributeName_Offset), 0, null, attributeName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddTransformAttribute_BoneName_Offset), 0, null, boneName);
            IntPtr Keys_NativeBuffer = IntPtr.Add(ParamsBuffer, AddTransformAttribute_Keys_Offset);
            UnrealArrayCopyMarshaler<float> Keys_Marshaler = new UnrealArrayCopyMarshaler<float>(1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, AddTransformAttribute_Keys_ElementSize);
            Keys_Marshaler.ToNative(Keys_NativeBuffer, 0, null, keys);
            IntPtr Values_NativeBuffer = IntPtr.Add(ParamsBuffer, AddTransformAttribute_Values_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform> Values_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Transform>(1, BlittableMarshaller<UnrealSharp.Transform>.ToNative, BlittableMarshaller<UnrealSharp.Transform>.FromNative, AddTransformAttribute_Values_ElementSize);
            Values_Marshaler.ToNative(Values_NativeBuffer, 0, null, values);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddTransformAttribute_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AddTransformAttribute_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class CameraModifier : UnrealSharp.CoreUObject.Object
{
    
    static CameraModifier()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("CameraModifier");
        
        bExclusive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bExclusive");
        bExclusive_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bExclusive");
        Priority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Priority");
        CameraOwner_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CameraOwner");
        AlphaInTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AlphaInTime");
        AlphaOutTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AlphaOutTime");
        Alpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Alpha");
        
        IsDisabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsDisabled");
        IsDisabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsDisabled_NativeFunction);
        IsDisabled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsDisabled_NativeFunction, "ReturnValue");
        GetViewTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetViewTarget");
        GetViewTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetViewTarget_NativeFunction);
        GetViewTarget_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetViewTarget_NativeFunction, "ReturnValue");
        EnableModifier_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EnableModifier");
        DisableModifier_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DisableModifier");
        DisableModifier_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DisableModifier_NativeFunction);
        DisableModifier_bImmediate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DisableModifier_NativeFunction, "bImmediate");
        
        IntPtr BlueprintModifyPostProcess_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BlueprintModifyPostProcess");
        BlueprintModifyPostProcess_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BlueprintModifyPostProcess_NativeFunction);
        BlueprintModifyPostProcess_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintModifyPostProcess_NativeFunction, "DeltaTime");
        BlueprintModifyPostProcess_PostProcessBlendWeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintModifyPostProcess_NativeFunction, "PostProcessBlendWeight");
        BlueprintModifyPostProcess_PostProcessSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintModifyPostProcess_NativeFunction, "PostProcessSettings");
        
        IntPtr BlueprintModifyCamera_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BlueprintModifyCamera");
        BlueprintModifyCamera_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BlueprintModifyCamera_NativeFunction);
        BlueprintModifyCamera_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintModifyCamera_NativeFunction, "DeltaTime");
        BlueprintModifyCamera_ViewLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintModifyCamera_NativeFunction, "ViewLocation");
        BlueprintModifyCamera_ViewRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintModifyCamera_NativeFunction, "ViewRotation");
        BlueprintModifyCamera_FOV_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintModifyCamera_NativeFunction, "FOV");
        BlueprintModifyCamera_NewViewLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintModifyCamera_NativeFunction, "NewViewLocation");
        BlueprintModifyCamera_NewViewRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintModifyCamera_NativeFunction, "NewViewRotation");
        BlueprintModifyCamera_NewFOV_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintModifyCamera_NativeFunction, "NewFOV");
        
        
    }
    
    protected CameraModifier(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/Engine.CameraModifier:bExclusive
    static readonly int bExclusive_Offset;
    static readonly IntPtr bExclusive_NativeProperty;
    
    public bool bExclusive
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bExclusive_NativeProperty, bExclusive_Offset);
        }
    }
    
    // ByteProperty /Script/Engine.CameraModifier:Priority
    static readonly int Priority_Offset;
    
    public byte Priority
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<byte>.FromNative(IntPtr.Add(NativeObject, Priority_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/Engine.CameraModifier:CameraOwner
    static readonly int CameraOwner_Offset;
    
    public UnrealSharp.Engine.PlayerCameraManager CameraOwner
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.PlayerCameraManager>.FromNative(IntPtr.Add(NativeObject, CameraOwner_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.CameraModifier:AlphaInTime
    static readonly int AlphaInTime_Offset;
    
    public float AlphaInTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AlphaInTime_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.CameraModifier:AlphaOutTime
    static readonly int AlphaOutTime_Offset;
    
    public float AlphaOutTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AlphaOutTime_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.CameraModifier:Alpha
    static readonly int Alpha_Offset;
    
    public float Alpha
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Alpha_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.CameraModifier:IsDisabled
    static readonly IntPtr IsDisabled_NativeFunction;
    static readonly int IsDisabled_ParamsSize;
    static readonly int IsDisabled_ReturnValue_Offset;
    
    public bool IsDisabled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsDisabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsDisabled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsDisabled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CameraModifier:GetViewTarget
    static readonly IntPtr GetViewTarget_NativeFunction;
    static readonly int GetViewTarget_ParamsSize;
    static readonly int GetViewTarget_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Actor GetViewTarget()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetViewTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetViewTarget_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Actor returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(ParamsBuffer, GetViewTarget_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CameraModifier:EnableModifier
    static readonly IntPtr EnableModifier_NativeFunction;
    
    public void EnableModifier()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, EnableModifier_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.CameraModifier:DisableModifier
    static readonly IntPtr DisableModifier_NativeFunction;
    static readonly int DisableModifier_ParamsSize;
    static readonly int DisableModifier_bImmediate_Offset;
    
    public void DisableModifier(bool bImmediate = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DisableModifier_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, DisableModifier_bImmediate_Offset), 0, null, bImmediate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DisableModifier_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.CameraModifier:BlueprintModifyPostProcess
    IntPtr BlueprintModifyPostProcess_NativeFunction;
    static readonly int BlueprintModifyPostProcess_ParamsSize;
    static readonly int BlueprintModifyPostProcess_DeltaTime_Offset;
    static readonly int BlueprintModifyPostProcess_PostProcessBlendWeight_Offset;
    static readonly int BlueprintModifyPostProcess_PostProcessSettings_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void BlueprintModifyPostProcess(float deltaTime, out float postProcessBlendWeight, out UnrealSharp.Engine.PostProcessSettings postProcessSettings)
    {
        unsafe
        {
            if (BlueprintModifyPostProcess_NativeFunction == IntPtr.Zero)
            {
                BlueprintModifyPostProcess_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "BlueprintModifyPostProcess");
            }
            byte* ParamsBufferAllocation = stackalloc byte[BlueprintModifyPostProcess_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, BlueprintModifyPostProcess_DeltaTime_Offset), 0, null, deltaTime);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BlueprintModifyPostProcess_NativeFunction, ParamsBuffer);
            
            postProcessBlendWeight = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, BlueprintModifyPostProcess_PostProcessBlendWeight_Offset), 0, null);
            postProcessSettings = UnrealSharp.Engine.PostProcessSettingsMarshaler.FromNative(IntPtr.Add(ParamsBuffer, BlueprintModifyPostProcess_PostProcessSettings_Offset), 0, null);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void BlueprintModifyPostProcess_Implementation(float deltaTime, out float postProcessBlendWeight, out UnrealSharp.Engine.PostProcessSettings postProcessSettings)
    {
        postProcessBlendWeight = default(float);
        postProcessSettings = default(UnrealSharp.Engine.PostProcessSettings);
    }
    void Invoke_BlueprintModifyPostProcess(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            float deltaTime = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, BlueprintModifyPostProcess_DeltaTime_Offset), 0, null);
            float postProcessBlendWeight = default;
            UnrealSharp.Engine.PostProcessSettings postProcessSettings = default;
            BlueprintModifyPostProcess_Implementation(deltaTime, out postProcessBlendWeight, out postProcessSettings);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(buffer, BlueprintModifyPostProcess_PostProcessBlendWeight_Offset), 0, null, postProcessBlendWeight);
            UnrealSharp.Engine.PostProcessSettingsMarshaler.ToNative(IntPtr.Add(buffer, BlueprintModifyPostProcess_PostProcessSettings_Offset), 0, null, postProcessSettings);
        }
    }
    
    // Function /Script/Engine.CameraModifier:BlueprintModifyCamera
    IntPtr BlueprintModifyCamera_NativeFunction;
    static readonly int BlueprintModifyCamera_ParamsSize;
    static readonly int BlueprintModifyCamera_DeltaTime_Offset;
    static readonly int BlueprintModifyCamera_ViewLocation_Offset;
    static readonly int BlueprintModifyCamera_ViewRotation_Offset;
    static readonly int BlueprintModifyCamera_FOV_Offset;
    static readonly int BlueprintModifyCamera_NewViewLocation_Offset;
    static readonly int BlueprintModifyCamera_NewViewRotation_Offset;
    static readonly int BlueprintModifyCamera_NewFOV_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void BlueprintModifyCamera(float deltaTime, System.DoubleNumerics.Vector3 viewLocation, UnrealSharp.Rotator viewRotation, float fOV, out System.DoubleNumerics.Vector3 newViewLocation, out UnrealSharp.Rotator newViewRotation, out float newFOV)
    {
        unsafe
        {
            if (BlueprintModifyCamera_NativeFunction == IntPtr.Zero)
            {
                BlueprintModifyCamera_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "BlueprintModifyCamera");
            }
            byte* ParamsBufferAllocation = stackalloc byte[BlueprintModifyCamera_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, BlueprintModifyCamera_DeltaTime_Offset), 0, null, deltaTime);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BlueprintModifyCamera_ViewLocation_Offset), 0, null, viewLocation);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, BlueprintModifyCamera_ViewRotation_Offset), 0, null, viewRotation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, BlueprintModifyCamera_FOV_Offset), 0, null, fOV);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BlueprintModifyCamera_NativeFunction, ParamsBuffer);
            
            newViewLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, BlueprintModifyCamera_NewViewLocation_Offset), 0, null);
            newViewRotation = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, BlueprintModifyCamera_NewViewRotation_Offset), 0, null);
            newFOV = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, BlueprintModifyCamera_NewFOV_Offset), 0, null);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void BlueprintModifyCamera_Implementation(float deltaTime, System.DoubleNumerics.Vector3 viewLocation, UnrealSharp.Rotator viewRotation, float fOV, out System.DoubleNumerics.Vector3 newViewLocation, out UnrealSharp.Rotator newViewRotation, out float newFOV)
    {
        newViewLocation = default(System.DoubleNumerics.Vector3);
        newViewRotation = default(UnrealSharp.Rotator);
        newFOV = default(float);
    }
    void Invoke_BlueprintModifyCamera(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            float deltaTime = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, BlueprintModifyCamera_DeltaTime_Offset), 0, null);
            System.DoubleNumerics.Vector3 viewLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(buffer, BlueprintModifyCamera_ViewLocation_Offset), 0, null);
            UnrealSharp.Rotator viewRotation = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(buffer, BlueprintModifyCamera_ViewRotation_Offset), 0, null);
            float fOV = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, BlueprintModifyCamera_FOV_Offset), 0, null);
            System.DoubleNumerics.Vector3 newViewLocation = default;
            UnrealSharp.Rotator newViewRotation = default;
            float newFOV = default;
            BlueprintModifyCamera_Implementation(deltaTime, viewLocation, viewRotation, fOV, out newViewLocation, out newViewRotation, out newFOV);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(buffer, BlueprintModifyCamera_NewViewLocation_Offset), 0, null, newViewLocation);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(buffer, BlueprintModifyCamera_NewViewRotation_Offset), 0, null, newViewRotation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(buffer, BlueprintModifyCamera_NewFOV_Offset), 0, null, newFOV);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class Canvas : UnrealSharp.CoreUObject.Object
{
    
    static Canvas()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("Canvas");
        
        
        K2_TextSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_TextSize");
        K2_TextSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_TextSize_NativeFunction);
        K2_TextSize_RenderFont_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_TextSize_NativeFunction, "RenderFont");
        K2_TextSize_RenderText_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_TextSize_NativeFunction, "RenderText");
        K2_TextSize_Scale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_TextSize_NativeFunction, "Scale");
        K2_TextSize_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_TextSize_NativeFunction, "ReturnValue");
        K2_StrLen_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_StrLen");
        K2_StrLen_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_StrLen_NativeFunction);
        K2_StrLen_RenderFont_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_StrLen_NativeFunction, "RenderFont");
        K2_StrLen_RenderText_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_StrLen_NativeFunction, "RenderText");
        K2_StrLen_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_StrLen_NativeFunction, "ReturnValue");
        K2_Project_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_Project");
        K2_Project_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_Project_NativeFunction);
        K2_Project_WorldLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_Project_NativeFunction, "WorldLocation");
        K2_Project_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_Project_NativeFunction, "ReturnValue");
        K2_DrawTriangle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_DrawTriangle");
        K2_DrawTriangle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_DrawTriangle_NativeFunction);
        K2_DrawTriangle_RenderTexture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawTriangle_NativeFunction, "RenderTexture");
        K2_DrawTriangle_Triangles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawTriangle_NativeFunction, "Triangles");
        K2_DrawTriangle_Triangles_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(K2_DrawTriangle_NativeFunction, "Triangles");
        K2_DrawTexture_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_DrawTexture");
        K2_DrawTexture_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_DrawTexture_NativeFunction);
        K2_DrawTexture_RenderTexture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawTexture_NativeFunction, "RenderTexture");
        K2_DrawTexture_ScreenPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawTexture_NativeFunction, "ScreenPosition");
        K2_DrawTexture_ScreenSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawTexture_NativeFunction, "ScreenSize");
        K2_DrawTexture_CoordinatePosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawTexture_NativeFunction, "CoordinatePosition");
        K2_DrawTexture_CoordinateSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawTexture_NativeFunction, "CoordinateSize");
        K2_DrawTexture_RenderColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawTexture_NativeFunction, "RenderColor");
        K2_DrawTexture_BlendMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawTexture_NativeFunction, "BlendMode");
        K2_DrawTexture_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawTexture_NativeFunction, "Rotation");
        K2_DrawTexture_PivotPoint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawTexture_NativeFunction, "PivotPoint");
        K2_DrawText_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_DrawText");
        K2_DrawText_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_DrawText_NativeFunction);
        K2_DrawText_RenderFont_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawText_NativeFunction, "RenderFont");
        K2_DrawText_RenderText_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawText_NativeFunction, "RenderText");
        K2_DrawText_ScreenPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawText_NativeFunction, "ScreenPosition");
        K2_DrawText_Scale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawText_NativeFunction, "Scale");
        K2_DrawText_RenderColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawText_NativeFunction, "RenderColor");
        K2_DrawText_Kerning_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawText_NativeFunction, "Kerning");
        K2_DrawText_ShadowColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawText_NativeFunction, "ShadowColor");
        K2_DrawText_ShadowOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawText_NativeFunction, "ShadowOffset");
        K2_DrawText_bCentreX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawText_NativeFunction, "bCentreX");
        K2_DrawText_bCentreY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawText_NativeFunction, "bCentreY");
        K2_DrawText_bOutlined_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawText_NativeFunction, "bOutlined");
        K2_DrawText_OutlineColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawText_NativeFunction, "OutlineColor");
        K2_DrawPolygon_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_DrawPolygon");
        K2_DrawPolygon_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_DrawPolygon_NativeFunction);
        K2_DrawPolygon_RenderTexture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawPolygon_NativeFunction, "RenderTexture");
        K2_DrawPolygon_ScreenPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawPolygon_NativeFunction, "ScreenPosition");
        K2_DrawPolygon_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawPolygon_NativeFunction, "Radius");
        K2_DrawPolygon_NumberOfSides_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawPolygon_NativeFunction, "NumberOfSides");
        K2_DrawPolygon_RenderColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawPolygon_NativeFunction, "RenderColor");
        K2_DrawMaterialTriangle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_DrawMaterialTriangle");
        K2_DrawMaterialTriangle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_DrawMaterialTriangle_NativeFunction);
        K2_DrawMaterialTriangle_RenderMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawMaterialTriangle_NativeFunction, "RenderMaterial");
        K2_DrawMaterialTriangle_Triangles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawMaterialTriangle_NativeFunction, "Triangles");
        K2_DrawMaterialTriangle_Triangles_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(K2_DrawMaterialTriangle_NativeFunction, "Triangles");
        K2_DrawMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_DrawMaterial");
        K2_DrawMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_DrawMaterial_NativeFunction);
        K2_DrawMaterial_RenderMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawMaterial_NativeFunction, "RenderMaterial");
        K2_DrawMaterial_ScreenPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawMaterial_NativeFunction, "ScreenPosition");
        K2_DrawMaterial_ScreenSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawMaterial_NativeFunction, "ScreenSize");
        K2_DrawMaterial_CoordinatePosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawMaterial_NativeFunction, "CoordinatePosition");
        K2_DrawMaterial_CoordinateSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawMaterial_NativeFunction, "CoordinateSize");
        K2_DrawMaterial_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawMaterial_NativeFunction, "Rotation");
        K2_DrawMaterial_PivotPoint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawMaterial_NativeFunction, "PivotPoint");
        K2_DrawLine_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_DrawLine");
        K2_DrawLine_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_DrawLine_NativeFunction);
        K2_DrawLine_ScreenPositionA_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawLine_NativeFunction, "ScreenPositionA");
        K2_DrawLine_ScreenPositionB_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawLine_NativeFunction, "ScreenPositionB");
        K2_DrawLine_Thickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawLine_NativeFunction, "Thickness");
        K2_DrawLine_RenderColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawLine_NativeFunction, "RenderColor");
        K2_DrawBox_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_DrawBox");
        K2_DrawBox_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_DrawBox_NativeFunction);
        K2_DrawBox_ScreenPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawBox_NativeFunction, "ScreenPosition");
        K2_DrawBox_ScreenSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawBox_NativeFunction, "ScreenSize");
        K2_DrawBox_Thickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawBox_NativeFunction, "Thickness");
        K2_DrawBox_RenderColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawBox_NativeFunction, "RenderColor");
        K2_DrawBorder_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_DrawBorder");
        K2_DrawBorder_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_DrawBorder_NativeFunction);
        K2_DrawBorder_BorderTexture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawBorder_NativeFunction, "BorderTexture");
        K2_DrawBorder_BackgroundTexture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawBorder_NativeFunction, "BackgroundTexture");
        K2_DrawBorder_LeftBorderTexture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawBorder_NativeFunction, "LeftBorderTexture");
        K2_DrawBorder_RightBorderTexture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawBorder_NativeFunction, "RightBorderTexture");
        K2_DrawBorder_TopBorderTexture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawBorder_NativeFunction, "TopBorderTexture");
        K2_DrawBorder_BottomBorderTexture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawBorder_NativeFunction, "BottomBorderTexture");
        K2_DrawBorder_ScreenPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawBorder_NativeFunction, "ScreenPosition");
        K2_DrawBorder_ScreenSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawBorder_NativeFunction, "ScreenSize");
        K2_DrawBorder_CoordinatePosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawBorder_NativeFunction, "CoordinatePosition");
        K2_DrawBorder_CoordinateSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawBorder_NativeFunction, "CoordinateSize");
        K2_DrawBorder_RenderColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawBorder_NativeFunction, "RenderColor");
        K2_DrawBorder_BorderScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawBorder_NativeFunction, "BorderScale");
        K2_DrawBorder_BackgroundScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawBorder_NativeFunction, "BackgroundScale");
        K2_DrawBorder_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawBorder_NativeFunction, "Rotation");
        K2_DrawBorder_PivotPoint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawBorder_NativeFunction, "PivotPoint");
        K2_DrawBorder_CornerSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DrawBorder_NativeFunction, "CornerSize");
        K2_Deproject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_Deproject");
        K2_Deproject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_Deproject_NativeFunction);
        K2_Deproject_ScreenPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_Deproject_NativeFunction, "ScreenPosition");
        K2_Deproject_WorldOrigin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_Deproject_NativeFunction, "WorldOrigin");
        K2_Deproject_WorldDirection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_Deproject_NativeFunction, "WorldDirection");
        
        
    }
    
    protected Canvas(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.Canvas:K2_TextSize
    static readonly IntPtr K2_TextSize_NativeFunction;
    static readonly int K2_TextSize_ParamsSize;
    static readonly int K2_TextSize_RenderFont_Offset;
    static readonly int K2_TextSize_RenderText_Offset;
    static readonly int K2_TextSize_Scale_Offset;
    static readonly int K2_TextSize_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector2 ClippedTextSize(UnrealSharp.Engine.Font renderFont, string renderText)
    {
        System.DoubleNumerics.Vector2 scale = new System.DoubleNumerics.Vector2
        {
            X=1.000f,
            Y=1.000f,
        };
        return ClippedTextSize(renderFont, renderText, scale);
    }
    
    public System.DoubleNumerics.Vector2 ClippedTextSize(UnrealSharp.Engine.Font renderFont, string renderText, System.DoubleNumerics.Vector2 scale)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_TextSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Font>.ToNative(IntPtr.Add(ParamsBuffer, K2_TextSize_RenderFont_Offset), 0, null, renderFont);
            IntPtr RenderText_NativePtr = IntPtr.Add(ParamsBuffer,K2_TextSize_RenderText_Offset);
            StringMarshaller.ToNative(RenderText_NativePtr,0,null,renderText);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_TextSize_Scale_Offset), 0, null, scale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_TextSize_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, K2_TextSize_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(RenderText_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Canvas:K2_StrLen
    static readonly IntPtr K2_StrLen_NativeFunction;
    static readonly int K2_StrLen_ParamsSize;
    static readonly int K2_StrLen_RenderFont_Offset;
    static readonly int K2_StrLen_RenderText_Offset;
    static readonly int K2_StrLen_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector2 WrappedTextSize(UnrealSharp.Engine.Font renderFont, string renderText)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_StrLen_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Font>.ToNative(IntPtr.Add(ParamsBuffer, K2_StrLen_RenderFont_Offset), 0, null, renderFont);
            IntPtr RenderText_NativePtr = IntPtr.Add(ParamsBuffer,K2_StrLen_RenderText_Offset);
            StringMarshaller.ToNative(RenderText_NativePtr,0,null,renderText);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_StrLen_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, K2_StrLen_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(RenderText_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Canvas:K2_Project
    static readonly IntPtr K2_Project_NativeFunction;
    static readonly int K2_Project_ParamsSize;
    static readonly int K2_Project_WorldLocation_Offset;
    static readonly int K2_Project_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 Project(System.DoubleNumerics.Vector3 worldLocation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_Project_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_Project_WorldLocation_Offset), 0, null, worldLocation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_Project_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, K2_Project_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Canvas:K2_DrawTriangle
    static readonly IntPtr K2_DrawTriangle_NativeFunction;
    static readonly int K2_DrawTriangle_ParamsSize;
    static readonly int K2_DrawTriangle_RenderTexture_Offset;
    static readonly int K2_DrawTriangle_Triangles_Offset;
    static readonly int K2_DrawTriangle_Triangles_ElementSize;
    
    public void DrawTriangles(UnrealSharp.Engine.Texture renderTexture, System.Collections.Generic.IList<UnrealSharp.Engine.CanvasUVTri> triangles)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_DrawTriangle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Texture>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawTriangle_RenderTexture_Offset), 0, null, renderTexture);
            IntPtr Triangles_NativeBuffer = IntPtr.Add(ParamsBuffer, K2_DrawTriangle_Triangles_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.CanvasUVTri> Triangles_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.CanvasUVTri>(1, BlittableMarshaller<UnrealSharp.Engine.CanvasUVTri>.ToNative, BlittableMarshaller<UnrealSharp.Engine.CanvasUVTri>.FromNative, K2_DrawTriangle_Triangles_ElementSize);
            Triangles_Marshaler.ToNative(Triangles_NativeBuffer, 0, null, triangles);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_DrawTriangle_NativeFunction, ParamsBuffer);
            
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.CanvasUVTri>.DestructInstance(Triangles_NativeBuffer, 0);
        }
    }
    
    // Function /Script/Engine.Canvas:K2_DrawTexture
    static readonly IntPtr K2_DrawTexture_NativeFunction;
    static readonly int K2_DrawTexture_ParamsSize;
    static readonly int K2_DrawTexture_RenderTexture_Offset;
    static readonly int K2_DrawTexture_ScreenPosition_Offset;
    static readonly int K2_DrawTexture_ScreenSize_Offset;
    static readonly int K2_DrawTexture_CoordinatePosition_Offset;
    static readonly int K2_DrawTexture_CoordinateSize_Offset;
    static readonly int K2_DrawTexture_RenderColor_Offset;
    static readonly int K2_DrawTexture_BlendMode_Offset;
    static readonly int K2_DrawTexture_Rotation_Offset;
    static readonly int K2_DrawTexture_PivotPoint_Offset;
    
    public void DrawTexture(UnrealSharp.Engine.Texture renderTexture, System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 screenSize, System.DoubleNumerics.Vector2 coordinatePosition)
    {
        System.DoubleNumerics.Vector2 coordinateSize = new System.DoubleNumerics.Vector2
        {
            X=1.000f,
            Y=1.000f,
        };
        DrawTexture(renderTexture, screenPosition, screenSize, coordinatePosition, coordinateSize);
    }
    
    public void DrawTexture(UnrealSharp.Engine.Texture renderTexture, System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 screenSize, System.DoubleNumerics.Vector2 coordinatePosition, System.DoubleNumerics.Vector2 coordinateSize)
    {
        UnrealSharp.CoreUObject.LinearColor renderColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawTexture(renderTexture, screenPosition, screenSize, coordinatePosition, coordinateSize, renderColor);
    }
    
    public void DrawTexture(UnrealSharp.Engine.Texture renderTexture, System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 screenSize, System.DoubleNumerics.Vector2 coordinatePosition, System.DoubleNumerics.Vector2 coordinateSize, UnrealSharp.CoreUObject.LinearColor renderColor, UnrealSharp.Engine.EBlendMode blendMode = UnrealSharp.Engine.EBlendMode.BLEND_Translucent, float rotation = 0.000000f)
    {
        System.DoubleNumerics.Vector2 pivotPoint = new System.DoubleNumerics.Vector2
        {
            X=0.500f,
            Y=0.500f,
        };
        DrawTexture(renderTexture, screenPosition, screenSize, coordinatePosition, coordinateSize, renderColor, blendMode, rotation, pivotPoint);
    }
    
    public void DrawTexture(UnrealSharp.Engine.Texture renderTexture, System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 screenSize, System.DoubleNumerics.Vector2 coordinatePosition, System.DoubleNumerics.Vector2 coordinateSize, UnrealSharp.CoreUObject.LinearColor renderColor, UnrealSharp.Engine.EBlendMode blendMode, float rotation, System.DoubleNumerics.Vector2 pivotPoint)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_DrawTexture_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Texture>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawTexture_RenderTexture_Offset), 0, null, renderTexture);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawTexture_ScreenPosition_Offset), 0, null, screenPosition);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawTexture_ScreenSize_Offset), 0, null, screenSize);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawTexture_CoordinatePosition_Offset), 0, null, coordinatePosition);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawTexture_CoordinateSize_Offset), 0, null, coordinateSize);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawTexture_RenderColor_Offset), 0, null, renderColor);
            BlittableMarshaller<UnrealSharp.Engine.EBlendMode>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawTexture_BlendMode_Offset), 0, null, blendMode);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawTexture_Rotation_Offset), 0, null, rotation);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawTexture_PivotPoint_Offset), 0, null, pivotPoint);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_DrawTexture_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Canvas:K2_DrawText
    static readonly IntPtr K2_DrawText_NativeFunction;
    static readonly int K2_DrawText_ParamsSize;
    static readonly int K2_DrawText_RenderFont_Offset;
    static readonly int K2_DrawText_RenderText_Offset;
    static readonly int K2_DrawText_ScreenPosition_Offset;
    static readonly int K2_DrawText_Scale_Offset;
    static readonly int K2_DrawText_RenderColor_Offset;
    static readonly int K2_DrawText_Kerning_Offset;
    static readonly int K2_DrawText_ShadowColor_Offset;
    static readonly int K2_DrawText_ShadowOffset_Offset;
    static readonly int K2_DrawText_bCentreX_Offset;
    static readonly int K2_DrawText_bCentreY_Offset;
    static readonly int K2_DrawText_bOutlined_Offset;
    static readonly int K2_DrawText_OutlineColor_Offset;
    
    public void DrawText(UnrealSharp.Engine.Font renderFont, string renderText, System.DoubleNumerics.Vector2 screenPosition)
    {
        System.DoubleNumerics.Vector2 scale = new System.DoubleNumerics.Vector2
        {
            X=1.000f,
            Y=1.000f,
        };
        DrawText(renderFont, renderText, screenPosition, scale);
    }
    
    public void DrawText(UnrealSharp.Engine.Font renderFont, string renderText, System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 scale)
    {
        UnrealSharp.CoreUObject.LinearColor renderColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawText(renderFont, renderText, screenPosition, scale, renderColor);
    }
    
    public void DrawText(UnrealSharp.Engine.Font renderFont, string renderText, System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 scale, UnrealSharp.CoreUObject.LinearColor renderColor, float kerning = 0.000000f)
    {
        UnrealSharp.CoreUObject.LinearColor shadowColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        DrawText(renderFont, renderText, screenPosition, scale, renderColor, kerning, shadowColor);
    }
    
    public void DrawText(UnrealSharp.Engine.Font renderFont, string renderText, System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 scale, UnrealSharp.CoreUObject.LinearColor renderColor, float kerning, UnrealSharp.CoreUObject.LinearColor shadowColor)
    {
        System.DoubleNumerics.Vector2 shadowOffset = new System.DoubleNumerics.Vector2
        {
            X=1.000f,
            Y=1.000f,
        };
        DrawText(renderFont, renderText, screenPosition, scale, renderColor, kerning, shadowColor, shadowOffset);
    }
    
    public void DrawText(UnrealSharp.Engine.Font renderFont, string renderText, System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 scale, UnrealSharp.CoreUObject.LinearColor renderColor, float kerning, UnrealSharp.CoreUObject.LinearColor shadowColor, System.DoubleNumerics.Vector2 shadowOffset, bool bCentreX = false, bool bCentreY = false, bool bOutlined = false)
    {
        UnrealSharp.CoreUObject.LinearColor outlineColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        DrawText(renderFont, renderText, screenPosition, scale, renderColor, kerning, shadowColor, shadowOffset, bCentreX, bCentreY, bOutlined, outlineColor);
    }
    
    public void DrawText(UnrealSharp.Engine.Font renderFont, string renderText, System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 scale, UnrealSharp.CoreUObject.LinearColor renderColor, float kerning, UnrealSharp.CoreUObject.LinearColor shadowColor, System.DoubleNumerics.Vector2 shadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, UnrealSharp.CoreUObject.LinearColor outlineColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_DrawText_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Font>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawText_RenderFont_Offset), 0, null, renderFont);
            IntPtr RenderText_NativePtr = IntPtr.Add(ParamsBuffer,K2_DrawText_RenderText_Offset);
            StringMarshaller.ToNative(RenderText_NativePtr,0,null,renderText);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawText_ScreenPosition_Offset), 0, null, screenPosition);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawText_Scale_Offset), 0, null, scale);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawText_RenderColor_Offset), 0, null, renderColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawText_Kerning_Offset), 0, null, kerning);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawText_ShadowColor_Offset), 0, null, shadowColor);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawText_ShadowOffset_Offset), 0, null, shadowOffset);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawText_bCentreX_Offset), 0, null, bCentreX);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawText_bCentreY_Offset), 0, null, bCentreY);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawText_bOutlined_Offset), 0, null, bOutlined);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawText_OutlineColor_Offset), 0, null, outlineColor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_DrawText_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(RenderText_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.Canvas:K2_DrawPolygon
    static readonly IntPtr K2_DrawPolygon_NativeFunction;
    static readonly int K2_DrawPolygon_ParamsSize;
    static readonly int K2_DrawPolygon_RenderTexture_Offset;
    static readonly int K2_DrawPolygon_ScreenPosition_Offset;
    static readonly int K2_DrawPolygon_Radius_Offset;
    static readonly int K2_DrawPolygon_NumberOfSides_Offset;
    static readonly int K2_DrawPolygon_RenderColor_Offset;
    
    public void DrawPolygon(UnrealSharp.Engine.Texture renderTexture, System.DoubleNumerics.Vector2 screenPosition)
    {
        System.DoubleNumerics.Vector2 radius = new System.DoubleNumerics.Vector2
        {
            X=1.000f,
            Y=1.000f,
        };
        DrawPolygon(renderTexture, screenPosition, radius);
    }
    
    public void DrawPolygon(UnrealSharp.Engine.Texture renderTexture, System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 radius, int numberOfSides = 3)
    {
        UnrealSharp.CoreUObject.LinearColor renderColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawPolygon(renderTexture, screenPosition, radius, numberOfSides, renderColor);
    }
    
    public void DrawPolygon(UnrealSharp.Engine.Texture renderTexture, System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 radius, int numberOfSides, UnrealSharp.CoreUObject.LinearColor renderColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_DrawPolygon_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Texture>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawPolygon_RenderTexture_Offset), 0, null, renderTexture);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawPolygon_ScreenPosition_Offset), 0, null, screenPosition);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawPolygon_Radius_Offset), 0, null, radius);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawPolygon_NumberOfSides_Offset), 0, null, numberOfSides);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawPolygon_RenderColor_Offset), 0, null, renderColor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_DrawPolygon_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Canvas:K2_DrawMaterialTriangle
    static readonly IntPtr K2_DrawMaterialTriangle_NativeFunction;
    static readonly int K2_DrawMaterialTriangle_ParamsSize;
    static readonly int K2_DrawMaterialTriangle_RenderMaterial_Offset;
    static readonly int K2_DrawMaterialTriangle_Triangles_Offset;
    static readonly int K2_DrawMaterialTriangle_Triangles_ElementSize;
    
    public void DrawMaterialTriangles(UnrealSharp.Engine.MaterialInterface renderMaterial, System.Collections.Generic.IList<UnrealSharp.Engine.CanvasUVTri> triangles)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_DrawMaterialTriangle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawMaterialTriangle_RenderMaterial_Offset), 0, null, renderMaterial);
            IntPtr Triangles_NativeBuffer = IntPtr.Add(ParamsBuffer, K2_DrawMaterialTriangle_Triangles_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.CanvasUVTri> Triangles_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.CanvasUVTri>(1, BlittableMarshaller<UnrealSharp.Engine.CanvasUVTri>.ToNative, BlittableMarshaller<UnrealSharp.Engine.CanvasUVTri>.FromNative, K2_DrawMaterialTriangle_Triangles_ElementSize);
            Triangles_Marshaler.ToNative(Triangles_NativeBuffer, 0, null, triangles);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_DrawMaterialTriangle_NativeFunction, ParamsBuffer);
            
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.CanvasUVTri>.DestructInstance(Triangles_NativeBuffer, 0);
        }
    }
    
    // Function /Script/Engine.Canvas:K2_DrawMaterial
    static readonly IntPtr K2_DrawMaterial_NativeFunction;
    static readonly int K2_DrawMaterial_ParamsSize;
    static readonly int K2_DrawMaterial_RenderMaterial_Offset;
    static readonly int K2_DrawMaterial_ScreenPosition_Offset;
    static readonly int K2_DrawMaterial_ScreenSize_Offset;
    static readonly int K2_DrawMaterial_CoordinatePosition_Offset;
    static readonly int K2_DrawMaterial_CoordinateSize_Offset;
    static readonly int K2_DrawMaterial_Rotation_Offset;
    static readonly int K2_DrawMaterial_PivotPoint_Offset;
    
    public void DrawMaterial(UnrealSharp.Engine.MaterialInterface renderMaterial, System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 screenSize, System.DoubleNumerics.Vector2 coordinatePosition)
    {
        System.DoubleNumerics.Vector2 coordinateSize = new System.DoubleNumerics.Vector2
        {
            X=1.000f,
            Y=1.000f,
        };
        DrawMaterial(renderMaterial, screenPosition, screenSize, coordinatePosition, coordinateSize);
    }
    
    public void DrawMaterial(UnrealSharp.Engine.MaterialInterface renderMaterial, System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 screenSize, System.DoubleNumerics.Vector2 coordinatePosition, System.DoubleNumerics.Vector2 coordinateSize, float rotation = 0.000000f)
    {
        System.DoubleNumerics.Vector2 pivotPoint = new System.DoubleNumerics.Vector2
        {
            X=0.500f,
            Y=0.500f,
        };
        DrawMaterial(renderMaterial, screenPosition, screenSize, coordinatePosition, coordinateSize, rotation, pivotPoint);
    }
    
    public void DrawMaterial(UnrealSharp.Engine.MaterialInterface renderMaterial, System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 screenSize, System.DoubleNumerics.Vector2 coordinatePosition, System.DoubleNumerics.Vector2 coordinateSize, float rotation, System.DoubleNumerics.Vector2 pivotPoint)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_DrawMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawMaterial_RenderMaterial_Offset), 0, null, renderMaterial);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawMaterial_ScreenPosition_Offset), 0, null, screenPosition);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawMaterial_ScreenSize_Offset), 0, null, screenSize);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawMaterial_CoordinatePosition_Offset), 0, null, coordinatePosition);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawMaterial_CoordinateSize_Offset), 0, null, coordinateSize);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawMaterial_Rotation_Offset), 0, null, rotation);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawMaterial_PivotPoint_Offset), 0, null, pivotPoint);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_DrawMaterial_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Canvas:K2_DrawLine
    static readonly IntPtr K2_DrawLine_NativeFunction;
    static readonly int K2_DrawLine_ParamsSize;
    static readonly int K2_DrawLine_ScreenPositionA_Offset;
    static readonly int K2_DrawLine_ScreenPositionB_Offset;
    static readonly int K2_DrawLine_Thickness_Offset;
    static readonly int K2_DrawLine_RenderColor_Offset;
    
    public void DrawLine(System.DoubleNumerics.Vector2 screenPositionA, System.DoubleNumerics.Vector2 screenPositionB, float thickness = 1.000000f)
    {
        UnrealSharp.CoreUObject.LinearColor renderColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawLine(screenPositionA, screenPositionB, thickness, renderColor);
    }
    
    public void DrawLine(System.DoubleNumerics.Vector2 screenPositionA, System.DoubleNumerics.Vector2 screenPositionB, float thickness, UnrealSharp.CoreUObject.LinearColor renderColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_DrawLine_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawLine_ScreenPositionA_Offset), 0, null, screenPositionA);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawLine_ScreenPositionB_Offset), 0, null, screenPositionB);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawLine_Thickness_Offset), 0, null, thickness);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawLine_RenderColor_Offset), 0, null, renderColor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_DrawLine_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Canvas:K2_DrawBox
    static readonly IntPtr K2_DrawBox_NativeFunction;
    static readonly int K2_DrawBox_ParamsSize;
    static readonly int K2_DrawBox_ScreenPosition_Offset;
    static readonly int K2_DrawBox_ScreenSize_Offset;
    static readonly int K2_DrawBox_Thickness_Offset;
    static readonly int K2_DrawBox_RenderColor_Offset;
    
    public void DrawBox(System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 screenSize, float thickness = 1.000000f)
    {
        UnrealSharp.CoreUObject.LinearColor renderColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawBox(screenPosition, screenSize, thickness, renderColor);
    }
    
    public void DrawBox(System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 screenSize, float thickness, UnrealSharp.CoreUObject.LinearColor renderColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_DrawBox_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawBox_ScreenPosition_Offset), 0, null, screenPosition);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawBox_ScreenSize_Offset), 0, null, screenSize);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawBox_Thickness_Offset), 0, null, thickness);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawBox_RenderColor_Offset), 0, null, renderColor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_DrawBox_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Canvas:K2_DrawBorder
    static readonly IntPtr K2_DrawBorder_NativeFunction;
    static readonly int K2_DrawBorder_ParamsSize;
    static readonly int K2_DrawBorder_BorderTexture_Offset;
    static readonly int K2_DrawBorder_BackgroundTexture_Offset;
    static readonly int K2_DrawBorder_LeftBorderTexture_Offset;
    static readonly int K2_DrawBorder_RightBorderTexture_Offset;
    static readonly int K2_DrawBorder_TopBorderTexture_Offset;
    static readonly int K2_DrawBorder_BottomBorderTexture_Offset;
    static readonly int K2_DrawBorder_ScreenPosition_Offset;
    static readonly int K2_DrawBorder_ScreenSize_Offset;
    static readonly int K2_DrawBorder_CoordinatePosition_Offset;
    static readonly int K2_DrawBorder_CoordinateSize_Offset;
    static readonly int K2_DrawBorder_RenderColor_Offset;
    static readonly int K2_DrawBorder_BorderScale_Offset;
    static readonly int K2_DrawBorder_BackgroundScale_Offset;
    static readonly int K2_DrawBorder_Rotation_Offset;
    static readonly int K2_DrawBorder_PivotPoint_Offset;
    static readonly int K2_DrawBorder_CornerSize_Offset;
    
    public void DrawBorder(UnrealSharp.Engine.Texture borderTexture, UnrealSharp.Engine.Texture backgroundTexture, UnrealSharp.Engine.Texture leftBorderTexture, UnrealSharp.Engine.Texture rightBorderTexture, UnrealSharp.Engine.Texture topBorderTexture, UnrealSharp.Engine.Texture bottomBorderTexture, System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 screenSize, System.DoubleNumerics.Vector2 coordinatePosition)
    {
        System.DoubleNumerics.Vector2 coordinateSize = new System.DoubleNumerics.Vector2
        {
            X=1.000f,
            Y=1.000f,
        };
        DrawBorder(borderTexture, backgroundTexture, leftBorderTexture, rightBorderTexture, topBorderTexture, bottomBorderTexture, screenPosition, screenSize, coordinatePosition, coordinateSize);
    }
    
    public void DrawBorder(UnrealSharp.Engine.Texture borderTexture, UnrealSharp.Engine.Texture backgroundTexture, UnrealSharp.Engine.Texture leftBorderTexture, UnrealSharp.Engine.Texture rightBorderTexture, UnrealSharp.Engine.Texture topBorderTexture, UnrealSharp.Engine.Texture bottomBorderTexture, System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 screenSize, System.DoubleNumerics.Vector2 coordinatePosition, System.DoubleNumerics.Vector2 coordinateSize)
    {
        UnrealSharp.CoreUObject.LinearColor renderColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawBorder(borderTexture, backgroundTexture, leftBorderTexture, rightBorderTexture, topBorderTexture, bottomBorderTexture, screenPosition, screenSize, coordinatePosition, coordinateSize, renderColor);
    }
    
    public void DrawBorder(UnrealSharp.Engine.Texture borderTexture, UnrealSharp.Engine.Texture backgroundTexture, UnrealSharp.Engine.Texture leftBorderTexture, UnrealSharp.Engine.Texture rightBorderTexture, UnrealSharp.Engine.Texture topBorderTexture, UnrealSharp.Engine.Texture bottomBorderTexture, System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 screenSize, System.DoubleNumerics.Vector2 coordinatePosition, System.DoubleNumerics.Vector2 coordinateSize, UnrealSharp.CoreUObject.LinearColor renderColor)
    {
        System.DoubleNumerics.Vector2 borderScale = new System.DoubleNumerics.Vector2
        {
            X=0.100f,
            Y=0.100f,
        };
        DrawBorder(borderTexture, backgroundTexture, leftBorderTexture, rightBorderTexture, topBorderTexture, bottomBorderTexture, screenPosition, screenSize, coordinatePosition, coordinateSize, renderColor, borderScale);
    }
    
    public void DrawBorder(UnrealSharp.Engine.Texture borderTexture, UnrealSharp.Engine.Texture backgroundTexture, UnrealSharp.Engine.Texture leftBorderTexture, UnrealSharp.Engine.Texture rightBorderTexture, UnrealSharp.Engine.Texture topBorderTexture, UnrealSharp.Engine.Texture bottomBorderTexture, System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 screenSize, System.DoubleNumerics.Vector2 coordinatePosition, System.DoubleNumerics.Vector2 coordinateSize, UnrealSharp.CoreUObject.LinearColor renderColor, System.DoubleNumerics.Vector2 borderScale)
    {
        System.DoubleNumerics.Vector2 backgroundScale = new System.DoubleNumerics.Vector2
        {
            X=0.100f,
            Y=0.100f,
        };
        DrawBorder(borderTexture, backgroundTexture, leftBorderTexture, rightBorderTexture, topBorderTexture, bottomBorderTexture, screenPosition, screenSize, coordinatePosition, coordinateSize, renderColor, borderScale, backgroundScale);
    }
    
    public void DrawBorder(UnrealSharp.Engine.Texture borderTexture, UnrealSharp.Engine.Texture backgroundTexture, UnrealSharp.Engine.Texture leftBorderTexture, UnrealSharp.Engine.Texture rightBorderTexture, UnrealSharp.Engine.Texture topBorderTexture, UnrealSharp.Engine.Texture bottomBorderTexture, System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 screenSize, System.DoubleNumerics.Vector2 coordinatePosition, System.DoubleNumerics.Vector2 coordinateSize, UnrealSharp.CoreUObject.LinearColor renderColor, System.DoubleNumerics.Vector2 borderScale, System.DoubleNumerics.Vector2 backgroundScale, float rotation = 0.000000f)
    {
        System.DoubleNumerics.Vector2 pivotPoint = new System.DoubleNumerics.Vector2
        {
            X=0.500f,
            Y=0.500f,
        };
        DrawBorder(borderTexture, backgroundTexture, leftBorderTexture, rightBorderTexture, topBorderTexture, bottomBorderTexture, screenPosition, screenSize, coordinatePosition, coordinateSize, renderColor, borderScale, backgroundScale, rotation, pivotPoint);
    }
    
    public void DrawBorder(UnrealSharp.Engine.Texture borderTexture, UnrealSharp.Engine.Texture backgroundTexture, UnrealSharp.Engine.Texture leftBorderTexture, UnrealSharp.Engine.Texture rightBorderTexture, UnrealSharp.Engine.Texture topBorderTexture, UnrealSharp.Engine.Texture bottomBorderTexture, System.DoubleNumerics.Vector2 screenPosition, System.DoubleNumerics.Vector2 screenSize, System.DoubleNumerics.Vector2 coordinatePosition, System.DoubleNumerics.Vector2 coordinateSize, UnrealSharp.CoreUObject.LinearColor renderColor, System.DoubleNumerics.Vector2 borderScale, System.DoubleNumerics.Vector2 backgroundScale, float rotation, System.DoubleNumerics.Vector2 pivotPoint, System.DoubleNumerics.Vector2 cornerSize = default(System.DoubleNumerics.Vector2))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_DrawBorder_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Texture>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawBorder_BorderTexture_Offset), 0, null, borderTexture);
            ObjectMarshaller<UnrealSharp.Engine.Texture>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawBorder_BackgroundTexture_Offset), 0, null, backgroundTexture);
            ObjectMarshaller<UnrealSharp.Engine.Texture>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawBorder_LeftBorderTexture_Offset), 0, null, leftBorderTexture);
            ObjectMarshaller<UnrealSharp.Engine.Texture>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawBorder_RightBorderTexture_Offset), 0, null, rightBorderTexture);
            ObjectMarshaller<UnrealSharp.Engine.Texture>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawBorder_TopBorderTexture_Offset), 0, null, topBorderTexture);
            ObjectMarshaller<UnrealSharp.Engine.Texture>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawBorder_BottomBorderTexture_Offset), 0, null, bottomBorderTexture);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawBorder_ScreenPosition_Offset), 0, null, screenPosition);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawBorder_ScreenSize_Offset), 0, null, screenSize);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawBorder_CoordinatePosition_Offset), 0, null, coordinatePosition);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawBorder_CoordinateSize_Offset), 0, null, coordinateSize);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawBorder_RenderColor_Offset), 0, null, renderColor);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawBorder_BorderScale_Offset), 0, null, borderScale);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawBorder_BackgroundScale_Offset), 0, null, backgroundScale);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawBorder_Rotation_Offset), 0, null, rotation);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawBorder_PivotPoint_Offset), 0, null, pivotPoint);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_DrawBorder_CornerSize_Offset), 0, null, cornerSize);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_DrawBorder_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Canvas:K2_Deproject
    static readonly IntPtr K2_Deproject_NativeFunction;
    static readonly int K2_Deproject_ParamsSize;
    static readonly int K2_Deproject_ScreenPosition_Offset;
    static readonly int K2_Deproject_WorldOrigin_Offset;
    static readonly int K2_Deproject_WorldDirection_Offset;
    
    public void Deproject(System.DoubleNumerics.Vector2 screenPosition, out System.DoubleNumerics.Vector3 worldOrigin, out System.DoubleNumerics.Vector3 worldDirection)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_Deproject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, K2_Deproject_ScreenPosition_Offset), 0, null, screenPosition);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_Deproject_NativeFunction, ParamsBuffer);
            
            worldOrigin = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, K2_Deproject_WorldOrigin_Offset), 0, null);
            worldDirection = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, K2_Deproject_WorldDirection_Offset), 0, null);
            
        }
    }
    
    
}
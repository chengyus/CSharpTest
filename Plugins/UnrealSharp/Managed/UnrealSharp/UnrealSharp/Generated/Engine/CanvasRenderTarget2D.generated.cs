// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class CanvasRenderTarget2D : UnrealSharp.Engine.TextureRenderTarget2D
{
    
    static readonly IntPtr NativeClassPtr;
    static CanvasRenderTarget2D()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("CanvasRenderTarget2D");
        
        
        UpdateResource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UpdateResource");
        GetSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSize");
        GetSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSize_NativeFunction);
        GetSize_Width_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSize_NativeFunction, "Width");
        GetSize_Height_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSize_NativeFunction, "Height");
        CreateCanvasRenderTarget2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateCanvasRenderTarget2D");
        CreateCanvasRenderTarget2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateCanvasRenderTarget2D_NativeFunction);
        CreateCanvasRenderTarget2D_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateCanvasRenderTarget2D_NativeFunction, "WorldContextObject");
        CreateCanvasRenderTarget2D_CanvasRenderTarget2DClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateCanvasRenderTarget2D_NativeFunction, "CanvasRenderTarget2DClass");
        CreateCanvasRenderTarget2D_Width_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateCanvasRenderTarget2D_NativeFunction, "Width");
        CreateCanvasRenderTarget2D_Height_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateCanvasRenderTarget2D_NativeFunction, "Height");
        CreateCanvasRenderTarget2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateCanvasRenderTarget2D_NativeFunction, "ReturnValue");
        
        IntPtr ReceiveUpdate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveUpdate");
        ReceiveUpdate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveUpdate_NativeFunction);
        ReceiveUpdate_Canvas_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveUpdate_NativeFunction, "Canvas");
        ReceiveUpdate_Width_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveUpdate_NativeFunction, "Width");
        ReceiveUpdate_Height_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveUpdate_NativeFunction, "Height");
        
        
    }
    
    protected CanvasRenderTarget2D(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.CanvasRenderTarget2D:UpdateResource
    static readonly IntPtr UpdateResource_NativeFunction;
    
    public void UpdateResource()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UpdateResource_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.CanvasRenderTarget2D:GetSize
    static readonly IntPtr GetSize_NativeFunction;
    static readonly int GetSize_ParamsSize;
    static readonly int GetSize_Width_Offset;
    static readonly int GetSize_Height_Offset;
    
    public void GetSize(out int width, out int height)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSize_NativeFunction, ParamsBuffer);
            
            width = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetSize_Width_Offset), 0, null);
            height = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetSize_Height_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.CanvasRenderTarget2D:CreateCanvasRenderTarget2D
    static readonly IntPtr CreateCanvasRenderTarget2D_NativeFunction;
    static readonly int CreateCanvasRenderTarget2D_ParamsSize;
    static readonly int CreateCanvasRenderTarget2D_WorldContextObject_Offset;
    static readonly int CreateCanvasRenderTarget2D_CanvasRenderTarget2DClass_Offset;
    static readonly int CreateCanvasRenderTarget2D_Width_Offset;
    static readonly int CreateCanvasRenderTarget2D_Height_Offset;
    static readonly int CreateCanvasRenderTarget2D_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.CanvasRenderTarget2D CreateCanvasRenderTarget2D(UnrealSharp.CoreUObject.Object worldContextObject, SubclassOf<UnrealSharp.Engine.CanvasRenderTarget2D> canvasRenderTarget2DClass, int width = 1024, int height = 1024)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateCanvasRenderTarget2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CreateCanvasRenderTarget2D_WorldContextObject_Offset), 0, null, worldContextObject);
            SubclassOfMarshaller<UnrealSharp.Engine.CanvasRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, CreateCanvasRenderTarget2D_CanvasRenderTarget2DClass_Offset), 0, null, canvasRenderTarget2DClass);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateCanvasRenderTarget2D_Width_Offset), 0, null, width);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateCanvasRenderTarget2D_Height_Offset), 0, null, height);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateCanvasRenderTarget2D_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.CanvasRenderTarget2D returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.CanvasRenderTarget2D>.FromNative(IntPtr.Add(ParamsBuffer, CreateCanvasRenderTarget2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CanvasRenderTarget2D:ReceiveUpdate
    IntPtr ReceiveUpdate_NativeFunction;
    static readonly int ReceiveUpdate_ParamsSize;
    static readonly int ReceiveUpdate_Canvas_Offset;
    static readonly int ReceiveUpdate_Width_Offset;
    static readonly int ReceiveUpdate_Height_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveUpdate(UnrealSharp.Engine.Canvas canvas, int width, int height)
    {
        unsafe
        {
            if (ReceiveUpdate_NativeFunction == IntPtr.Zero)
            {
                ReceiveUpdate_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveUpdate");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveUpdate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Canvas>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveUpdate_Canvas_Offset), 0, null, canvas);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveUpdate_Width_Offset), 0, null, width);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveUpdate_Height_Offset), 0, null, height);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveUpdate_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveUpdate_Implementation(UnrealSharp.Engine.Canvas canvas, int width, int height)
    {
    }
    void Invoke_ReceiveUpdate(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Canvas canvas = ObjectMarshaller<UnrealSharp.Engine.Canvas>.FromNative(IntPtr.Add(buffer, ReceiveUpdate_Canvas_Offset), 0, null);
            int width = BlittableMarshaller<int>.FromNative(IntPtr.Add(buffer, ReceiveUpdate_Width_Offset), 0, null);
            int height = BlittableMarshaller<int>.FromNative(IntPtr.Add(buffer, ReceiveUpdate_Height_Offset), 0, null);
            ReceiveUpdate_Implementation(canvas, width, height);
        }
    }
    
    
}
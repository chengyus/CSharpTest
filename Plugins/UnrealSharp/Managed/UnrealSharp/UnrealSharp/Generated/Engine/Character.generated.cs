// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class Character : UnrealSharp.Engine.Pawn
{
    
    static Character()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("Character");
        
        Mesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Mesh");
        CharacterMovement_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CharacterMovement");
        CapsuleComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CapsuleComponent");
        CrouchedEyeHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CrouchedEyeHeight");
        bIsCrouched_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsCrouched");
        bIsCrouched_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIsCrouched");
        bPressedJump_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bPressedJump");
        bPressedJump_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bPressedJump");
        bWasJumping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bWasJumping");
        bWasJumping_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bWasJumping");
        JumpKeyHoldTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "JumpKeyHoldTime");
        JumpForceTimeRemaining_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "JumpForceTimeRemaining");
        ProxyJumpForceStartedTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ProxyJumpForceStartedTime");
        JumpMaxHoldTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "JumpMaxHoldTime");
        JumpMaxCount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "JumpMaxCount");
        JumpCurrentCount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "JumpCurrentCount");
        JumpCurrentCountPreJump_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "JumpCurrentCountPreJump");
        
        UnCrouch_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UnCrouch");
        UnCrouch_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UnCrouch_NativeFunction);
        UnCrouch_bClientSimulation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnCrouch_NativeFunction, "bClientSimulation");
        StopJumping_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopJumping");
        StopAnimMontage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopAnimMontage");
        StopAnimMontage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StopAnimMontage_NativeFunction);
        StopAnimMontage_AnimMontage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopAnimMontage_NativeFunction, "AnimMontage");
        PlayAnimMontage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlayAnimMontage");
        PlayAnimMontage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PlayAnimMontage_NativeFunction);
        PlayAnimMontage_AnimMontage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimMontage_NativeFunction, "AnimMontage");
        PlayAnimMontage_InPlayRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimMontage_NativeFunction, "InPlayRate");
        PlayAnimMontage_StartSectionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimMontage_NativeFunction, "StartSectionName");
        PlayAnimMontage_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayAnimMontage_NativeFunction, "ReturnValue");
        LaunchCharacter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LaunchCharacter");
        LaunchCharacter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LaunchCharacter_NativeFunction);
        LaunchCharacter_LaunchVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LaunchCharacter_NativeFunction, "LaunchVelocity");
        LaunchCharacter_bXYOverride_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LaunchCharacter_NativeFunction, "bXYOverride");
        LaunchCharacter_bZOverride_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LaunchCharacter_NativeFunction, "bZOverride");
        Jump_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Jump");
        IsPlayingRootMotion_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPlayingRootMotion");
        IsPlayingRootMotion_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPlayingRootMotion_NativeFunction);
        IsPlayingRootMotion_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPlayingRootMotion_NativeFunction, "ReturnValue");
        IsPlayingNetworkedRootMotionMontage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPlayingNetworkedRootMotionMontage");
        IsPlayingNetworkedRootMotionMontage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPlayingNetworkedRootMotionMontage_NativeFunction);
        IsPlayingNetworkedRootMotionMontage_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPlayingNetworkedRootMotionMontage_NativeFunction, "ReturnValue");
        IsJumpProvidingForce_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsJumpProvidingForce");
        IsJumpProvidingForce_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsJumpProvidingForce_NativeFunction);
        IsJumpProvidingForce_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsJumpProvidingForce_NativeFunction, "ReturnValue");
        HasAnyRootMotion_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasAnyRootMotion");
        HasAnyRootMotion_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasAnyRootMotion_NativeFunction);
        HasAnyRootMotion_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasAnyRootMotion_NativeFunction, "ReturnValue");
        GetCurrentMontage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentMontage");
        GetCurrentMontage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentMontage_NativeFunction);
        GetCurrentMontage_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentMontage_NativeFunction, "ReturnValue");
        GetBaseTranslationOffset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBaseTranslationOffset");
        GetBaseTranslationOffset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBaseTranslationOffset_NativeFunction);
        GetBaseTranslationOffset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBaseTranslationOffset_NativeFunction, "ReturnValue");
        GetBaseRotationOffsetRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBaseRotationOffsetRotator");
        GetBaseRotationOffsetRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBaseRotationOffsetRotator_NativeFunction);
        GetBaseRotationOffsetRotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBaseRotationOffsetRotator_NativeFunction, "ReturnValue");
        GetAnimRootMotionTranslationScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnimRootMotionTranslationScale");
        GetAnimRootMotionTranslationScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnimRootMotionTranslationScale_NativeFunction);
        GetAnimRootMotionTranslationScale_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimRootMotionTranslationScale_NativeFunction, "ReturnValue");
        Crouch_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Crouch");
        Crouch_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Crouch_NativeFunction);
        Crouch_bClientSimulation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Crouch_NativeFunction, "bClientSimulation");
        CanJump_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CanJump");
        CanJump_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CanJump_NativeFunction);
        CanJump_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanJump_NativeFunction, "ReturnValue");
        CanCrouch_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CanCrouch");
        CanCrouch_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CanCrouch_NativeFunction);
        CanCrouch_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanCrouch_NativeFunction, "ReturnValue");
        CacheInitialMeshOffset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CacheInitialMeshOffset");
        CacheInitialMeshOffset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CacheInitialMeshOffset_NativeFunction);
        CacheInitialMeshOffset_MeshRelativeLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CacheInitialMeshOffset_NativeFunction, "MeshRelativeLocation");
        CacheInitialMeshOffset_MeshRelativeRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CacheInitialMeshOffset_NativeFunction, "MeshRelativeRotation");
        
        IntPtr OnWalkingOffLedge_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnWalkingOffLedge");
        OnWalkingOffLedge_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnWalkingOffLedge_NativeFunction);
        OnWalkingOffLedge_PreviousFloorImpactNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnWalkingOffLedge_NativeFunction, "PreviousFloorImpactNormal");
        OnWalkingOffLedge_PreviousFloorContactNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnWalkingOffLedge_NativeFunction, "PreviousFloorContactNormal");
        OnWalkingOffLedge_PreviousLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnWalkingOffLedge_NativeFunction, "PreviousLocation");
        OnWalkingOffLedge_TimeDelta_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnWalkingOffLedge_NativeFunction, "TimeDelta");
        
        IntPtr OnLaunched_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnLaunched");
        OnLaunched_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnLaunched_NativeFunction);
        OnLaunched_LaunchVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnLaunched_NativeFunction, "LaunchVelocity");
        OnLaunched_bXYOverride_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnLaunched_NativeFunction, "bXYOverride");
        OnLaunched_bZOverride_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnLaunched_NativeFunction, "bZOverride");
        
        IntPtr OnLanded_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnLanded");
        OnLanded_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnLanded_NativeFunction);
        OnLanded_Hit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnLanded_NativeFunction, "Hit");
        
        IntPtr K2_UpdateCustomMovement_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_UpdateCustomMovement");
        K2_UpdateCustomMovement_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_UpdateCustomMovement_NativeFunction);
        K2_UpdateCustomMovement_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_UpdateCustomMovement_NativeFunction, "DeltaTime");
        
        IntPtr K2_OnStartCrouch_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_OnStartCrouch");
        K2_OnStartCrouch_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_OnStartCrouch_NativeFunction);
        K2_OnStartCrouch_HalfHeightAdjust_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_OnStartCrouch_NativeFunction, "HalfHeightAdjust");
        K2_OnStartCrouch_ScaledHalfHeightAdjust_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_OnStartCrouch_NativeFunction, "ScaledHalfHeightAdjust");
        
        IntPtr K2_OnMovementModeChanged_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_OnMovementModeChanged");
        K2_OnMovementModeChanged_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_OnMovementModeChanged_NativeFunction);
        K2_OnMovementModeChanged_PrevMovementMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_OnMovementModeChanged_NativeFunction, "PrevMovementMode");
        K2_OnMovementModeChanged_NewMovementMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_OnMovementModeChanged_NativeFunction, "NewMovementMode");
        K2_OnMovementModeChanged_PrevCustomMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_OnMovementModeChanged_NativeFunction, "PrevCustomMode");
        K2_OnMovementModeChanged_NewCustomMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_OnMovementModeChanged_NativeFunction, "NewCustomMode");
        
        IntPtr K2_OnEndCrouch_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_OnEndCrouch");
        K2_OnEndCrouch_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_OnEndCrouch_NativeFunction);
        K2_OnEndCrouch_HalfHeightAdjust_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_OnEndCrouch_NativeFunction, "HalfHeightAdjust");
        K2_OnEndCrouch_ScaledHalfHeightAdjust_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_OnEndCrouch_NativeFunction, "ScaledHalfHeightAdjust");
        
        IntPtr CanJumpInternal_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CanJumpInternal");
        CanJumpInternal_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CanJumpInternal_NativeFunction);
        CanJumpInternal_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanJumpInternal_NativeFunction, "ReturnValue");
        
        
    }
    
    protected Character(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Engine.Character:Mesh
    static readonly int Mesh_Offset;
    
    public UnrealSharp.Engine.SkeletalMeshComponent Mesh
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.SkeletalMeshComponent>.FromNative(IntPtr.Add(NativeObject, Mesh_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/Engine.Character:CharacterMovement
    static readonly int CharacterMovement_Offset;
    
    public UnrealSharp.Engine.CharacterMovementComponent CharacterMovement
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.CharacterMovementComponent>.FromNative(IntPtr.Add(NativeObject, CharacterMovement_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/Engine.Character:CapsuleComponent
    static readonly int CapsuleComponent_Offset;
    
    public UnrealSharp.Engine.CapsuleComponent CapsuleComponent
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.CapsuleComponent>.FromNative(IntPtr.Add(NativeObject, CapsuleComponent_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.Character:CrouchedEyeHeight
    static readonly int CrouchedEyeHeight_Offset;
    
    public float CrouchedEyeHeight
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CrouchedEyeHeight_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, CrouchedEyeHeight_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.Character:bIsCrouched
    static readonly int bIsCrouched_Offset;
    static readonly IntPtr bIsCrouched_NativeProperty;
    
    public bool bIsCrouched
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIsCrouched_NativeProperty, bIsCrouched_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Character:bPressedJump
    static readonly int bPressedJump_Offset;
    static readonly IntPtr bPressedJump_NativeProperty;
    
    public bool bPressedJump
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bPressedJump_NativeProperty, bPressedJump_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Character:bWasJumping
    static readonly int bWasJumping_Offset;
    static readonly IntPtr bWasJumping_NativeProperty;
    
    public bool bWasJumping
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bWasJumping_NativeProperty, bWasJumping_Offset);
        }
    }
    
    // FloatProperty /Script/Engine.Character:JumpKeyHoldTime
    static readonly int JumpKeyHoldTime_Offset;
    
    public float JumpKeyHoldTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, JumpKeyHoldTime_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.Character:JumpForceTimeRemaining
    static readonly int JumpForceTimeRemaining_Offset;
    
    public float JumpForceTimeRemaining
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, JumpForceTimeRemaining_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.Character:ProxyJumpForceStartedTime
    static readonly int ProxyJumpForceStartedTime_Offset;
    
    public float ProxyJumpForceStartedTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ProxyJumpForceStartedTime_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.Character:JumpMaxHoldTime
    static readonly int JumpMaxHoldTime_Offset;
    
    public float JumpMaxHoldTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, JumpMaxHoldTime_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, JumpMaxHoldTime_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.Character:JumpMaxCount
    static readonly int JumpMaxCount_Offset;
    
    public int JumpMaxCount
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, JumpMaxCount_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, JumpMaxCount_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.Character:JumpCurrentCount
    static readonly int JumpCurrentCount_Offset;
    
    public int JumpCurrentCount
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, JumpCurrentCount_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Engine.Character:JumpCurrentCountPreJump
    static readonly int JumpCurrentCountPreJump_Offset;
    
    public int JumpCurrentCountPreJump
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, JumpCurrentCountPreJump_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.Character:UnCrouch
    static readonly IntPtr UnCrouch_NativeFunction;
    static readonly int UnCrouch_ParamsSize;
    static readonly int UnCrouch_bClientSimulation_Offset;
    
    public void UnCrouch(bool bClientSimulation = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UnCrouch_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, UnCrouch_bClientSimulation_Offset), 0, null, bClientSimulation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UnCrouch_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Character:StopJumping
    static readonly IntPtr StopJumping_NativeFunction;
    
    public void StopJumping()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopJumping_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.Character:StopAnimMontage
    static readonly IntPtr StopAnimMontage_NativeFunction;
    static readonly int StopAnimMontage_ParamsSize;
    static readonly int StopAnimMontage_AnimMontage_Offset;
    
    public void StopAnimMontage(UnrealSharp.Engine.AnimMontage animMontage = default(UnrealSharp.Engine.AnimMontage))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StopAnimMontage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, StopAnimMontage_AnimMontage_Offset), 0, null, animMontage);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopAnimMontage_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Character:PlayAnimMontage
    static readonly IntPtr PlayAnimMontage_NativeFunction;
    static readonly int PlayAnimMontage_ParamsSize;
    static readonly int PlayAnimMontage_AnimMontage_Offset;
    static readonly int PlayAnimMontage_InPlayRate_Offset;
    static readonly int PlayAnimMontage_StartSectionName_Offset;
    static readonly int PlayAnimMontage_ReturnValue_Offset;
    
    public float PlayAnimMontage(UnrealSharp.Engine.AnimMontage animMontage, float inPlayRate = 1.000000f, Name startSectionName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PlayAnimMontage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimMontage_AnimMontage_Offset), 0, null, animMontage);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimMontage_InPlayRate_Offset), 0, null, inPlayRate);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, PlayAnimMontage_StartSectionName_Offset), 0, null, startSectionName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PlayAnimMontage_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, PlayAnimMontage_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Character:LaunchCharacter
    static readonly IntPtr LaunchCharacter_NativeFunction;
    static readonly int LaunchCharacter_ParamsSize;
    static readonly int LaunchCharacter_LaunchVelocity_Offset;
    static readonly int LaunchCharacter_bXYOverride_Offset;
    static readonly int LaunchCharacter_bZOverride_Offset;
    
    public void LaunchCharacter(System.DoubleNumerics.Vector3 launchVelocity, bool bXYOverride, bool bZOverride)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LaunchCharacter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LaunchCharacter_LaunchVelocity_Offset), 0, null, launchVelocity);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LaunchCharacter_bXYOverride_Offset), 0, null, bXYOverride);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LaunchCharacter_bZOverride_Offset), 0, null, bZOverride);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, LaunchCharacter_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Character:Jump
    static readonly IntPtr Jump_NativeFunction;
    
    public void Jump()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Jump_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.Character:IsPlayingRootMotion
    static readonly IntPtr IsPlayingRootMotion_NativeFunction;
    static readonly int IsPlayingRootMotion_ParamsSize;
    static readonly int IsPlayingRootMotion_ReturnValue_Offset;
    
    public bool IsPlayingRootMotion()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPlayingRootMotion_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsPlayingRootMotion_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPlayingRootMotion_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Character:IsPlayingNetworkedRootMotionMontage
    static readonly IntPtr IsPlayingNetworkedRootMotionMontage_NativeFunction;
    static readonly int IsPlayingNetworkedRootMotionMontage_ParamsSize;
    static readonly int IsPlayingNetworkedRootMotionMontage_ReturnValue_Offset;
    
    public bool IsPlayingNetworkedRootMotionMontage()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPlayingNetworkedRootMotionMontage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsPlayingNetworkedRootMotionMontage_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPlayingNetworkedRootMotionMontage_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Character:IsJumpProvidingForce
    static readonly IntPtr IsJumpProvidingForce_NativeFunction;
    static readonly int IsJumpProvidingForce_ParamsSize;
    static readonly int IsJumpProvidingForce_ReturnValue_Offset;
    
    public bool IsJumpProvidingForce()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsJumpProvidingForce_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsJumpProvidingForce_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsJumpProvidingForce_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Character:HasAnyRootMotion
    static readonly IntPtr HasAnyRootMotion_NativeFunction;
    static readonly int HasAnyRootMotion_ParamsSize;
    static readonly int HasAnyRootMotion_ReturnValue_Offset;
    
    public bool HasAnyRootMotion()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasAnyRootMotion_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasAnyRootMotion_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasAnyRootMotion_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Character:GetCurrentMontage
    static readonly IntPtr GetCurrentMontage_NativeFunction;
    static readonly int GetCurrentMontage_ParamsSize;
    static readonly int GetCurrentMontage_ReturnValue_Offset;
    
    public UnrealSharp.Engine.AnimMontage GetCurrentMontage()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentMontage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurrentMontage_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AnimMontage returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AnimMontage>.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentMontage_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Character:GetBaseTranslationOffset
    static readonly IntPtr GetBaseTranslationOffset_NativeFunction;
    static readonly int GetBaseTranslationOffset_ParamsSize;
    static readonly int GetBaseTranslationOffset_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetBaseTranslationOffset()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBaseTranslationOffset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBaseTranslationOffset_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetBaseTranslationOffset_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Character:GetBaseRotationOffsetRotator
    static readonly IntPtr GetBaseRotationOffsetRotator_NativeFunction;
    static readonly int GetBaseRotationOffsetRotator_ParamsSize;
    static readonly int GetBaseRotationOffsetRotator_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetBaseRotationOffset()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBaseRotationOffsetRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBaseRotationOffsetRotator_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetBaseRotationOffsetRotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Character:GetAnimRootMotionTranslationScale
    static readonly IntPtr GetAnimRootMotionTranslationScale_NativeFunction;
    static readonly int GetAnimRootMotionTranslationScale_ParamsSize;
    static readonly int GetAnimRootMotionTranslationScale_ReturnValue_Offset;
    
    public float GetAnimRootMotionTranslationScale()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnimRootMotionTranslationScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAnimRootMotionTranslationScale_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetAnimRootMotionTranslationScale_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Character:Crouch
    static readonly IntPtr Crouch_NativeFunction;
    static readonly int Crouch_ParamsSize;
    static readonly int Crouch_bClientSimulation_Offset;
    
    public void Crouch(bool bClientSimulation = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Crouch_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, Crouch_bClientSimulation_Offset), 0, null, bClientSimulation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Crouch_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Character:CanJump
    static readonly IntPtr CanJump_NativeFunction;
    static readonly int CanJump_ParamsSize;
    static readonly int CanJump_ReturnValue_Offset;
    
    public bool CanJump()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CanJump_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CanJump_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CanJump_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Character:CanCrouch
    static readonly IntPtr CanCrouch_NativeFunction;
    static readonly int CanCrouch_ParamsSize;
    static readonly int CanCrouch_ReturnValue_Offset;
    
    public bool CanCrouch()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CanCrouch_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CanCrouch_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CanCrouch_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Character:CacheInitialMeshOffset
    static readonly IntPtr CacheInitialMeshOffset_NativeFunction;
    static readonly int CacheInitialMeshOffset_ParamsSize;
    static readonly int CacheInitialMeshOffset_MeshRelativeLocation_Offset;
    static readonly int CacheInitialMeshOffset_MeshRelativeRotation_Offset;
    
    public void CacheInitialMeshOffset(System.DoubleNumerics.Vector3 meshRelativeLocation, UnrealSharp.Rotator meshRelativeRotation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CacheInitialMeshOffset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, CacheInitialMeshOffset_MeshRelativeLocation_Offset), 0, null, meshRelativeLocation);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, CacheInitialMeshOffset_MeshRelativeRotation_Offset), 0, null, meshRelativeRotation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CacheInitialMeshOffset_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Character:OnWalkingOffLedge
    IntPtr OnWalkingOffLedge_NativeFunction;
    static readonly int OnWalkingOffLedge_ParamsSize;
    static readonly int OnWalkingOffLedge_PreviousFloorImpactNormal_Offset;
    static readonly int OnWalkingOffLedge_PreviousFloorContactNormal_Offset;
    static readonly int OnWalkingOffLedge_PreviousLocation_Offset;
    static readonly int OnWalkingOffLedge_TimeDelta_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnWalkingOffLedge(System.DoubleNumerics.Vector3 previousFloorImpactNormal, System.DoubleNumerics.Vector3 previousFloorContactNormal, System.DoubleNumerics.Vector3 previousLocation, float timeDelta)
    {
        unsafe
        {
            if (OnWalkingOffLedge_NativeFunction == IntPtr.Zero)
            {
                OnWalkingOffLedge_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnWalkingOffLedge");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnWalkingOffLedge_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, OnWalkingOffLedge_PreviousFloorImpactNormal_Offset), 0, null, previousFloorImpactNormal);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, OnWalkingOffLedge_PreviousFloorContactNormal_Offset), 0, null, previousFloorContactNormal);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, OnWalkingOffLedge_PreviousLocation_Offset), 0, null, previousLocation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, OnWalkingOffLedge_TimeDelta_Offset), 0, null, timeDelta);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnWalkingOffLedge_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnWalkingOffLedge_Implementation(System.DoubleNumerics.Vector3 previousFloorImpactNormal, System.DoubleNumerics.Vector3 previousFloorContactNormal, System.DoubleNumerics.Vector3 previousLocation, float timeDelta)
    {
    }
    void Invoke_OnWalkingOffLedge(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            System.DoubleNumerics.Vector3 previousFloorImpactNormal = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(buffer, OnWalkingOffLedge_PreviousFloorImpactNormal_Offset), 0, null);
            System.DoubleNumerics.Vector3 previousFloorContactNormal = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(buffer, OnWalkingOffLedge_PreviousFloorContactNormal_Offset), 0, null);
            System.DoubleNumerics.Vector3 previousLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(buffer, OnWalkingOffLedge_PreviousLocation_Offset), 0, null);
            float timeDelta = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, OnWalkingOffLedge_TimeDelta_Offset), 0, null);
            OnWalkingOffLedge_Implementation(previousFloorImpactNormal, previousFloorContactNormal, previousLocation, timeDelta);
        }
    }
    
    // Function /Script/Engine.Character:OnLaunched
    IntPtr OnLaunched_NativeFunction;
    static readonly int OnLaunched_ParamsSize;
    static readonly int OnLaunched_LaunchVelocity_Offset;
    static readonly int OnLaunched_bXYOverride_Offset;
    static readonly int OnLaunched_bZOverride_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnLaunched(System.DoubleNumerics.Vector3 launchVelocity, bool bXYOverride, bool bZOverride)
    {
        unsafe
        {
            if (OnLaunched_NativeFunction == IntPtr.Zero)
            {
                OnLaunched_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnLaunched");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnLaunched_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, OnLaunched_LaunchVelocity_Offset), 0, null, launchVelocity);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, OnLaunched_bXYOverride_Offset), 0, null, bXYOverride);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, OnLaunched_bZOverride_Offset), 0, null, bZOverride);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnLaunched_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnLaunched_Implementation(System.DoubleNumerics.Vector3 launchVelocity, bool bXYOverride, bool bZOverride)
    {
    }
    void Invoke_OnLaunched(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            System.DoubleNumerics.Vector3 launchVelocity = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(buffer, OnLaunched_LaunchVelocity_Offset), 0, null);
            bool bXYOverride = BoolMarshaller.FromNative(IntPtr.Add(buffer, OnLaunched_bXYOverride_Offset), 0, null);
            bool bZOverride = BoolMarshaller.FromNative(IntPtr.Add(buffer, OnLaunched_bZOverride_Offset), 0, null);
            OnLaunched_Implementation(launchVelocity, bXYOverride, bZOverride);
        }
    }
    
    // Function /Script/Engine.Character:OnLanded
    IntPtr OnLanded_NativeFunction;
    static readonly int OnLanded_ParamsSize;
    static readonly int OnLanded_Hit_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnLanded(UnrealSharp.Engine.HitResult hit)
    {
        unsafe
        {
            if (OnLanded_NativeFunction == IntPtr.Zero)
            {
                OnLanded_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnLanded");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnLanded_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.HitResultMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OnLanded_Hit_Offset), 0, null, hit);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnLanded_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnLanded_Implementation(UnrealSharp.Engine.HitResult hit)
    {
    }
    void Invoke_OnLanded(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.HitResult hit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(buffer, OnLanded_Hit_Offset), 0, null);
            OnLanded_Implementation(hit);
        }
    }
    
    // Function /Script/Engine.Character:OnJumped
    IntPtr OnJumped_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnJumped()
    {
        unsafe
        {
            if (OnJumped_NativeFunction == IntPtr.Zero)
            {
                OnJumped_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnJumped");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnJumped_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnJumped_Implementation()
    {
    }
    void Invoke_OnJumped(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            OnJumped_Implementation();
        }
    }
    
    // Function /Script/Engine.Character:K2_UpdateCustomMovement
    IntPtr K2_UpdateCustomMovement_NativeFunction;
    static readonly int K2_UpdateCustomMovement_ParamsSize;
    static readonly int K2_UpdateCustomMovement_DeltaTime_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void UpdateCustomMovement(float deltaTime)
    {
        unsafe
        {
            if (K2_UpdateCustomMovement_NativeFunction == IntPtr.Zero)
            {
                K2_UpdateCustomMovement_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "K2_UpdateCustomMovement");
            }
            byte* ParamsBufferAllocation = stackalloc byte[K2_UpdateCustomMovement_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, K2_UpdateCustomMovement_DeltaTime_Offset), 0, null, deltaTime);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_UpdateCustomMovement_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void K2_UpdateCustomMovement_Implementation(float deltaTime)
    {
    }
    void Invoke_K2_UpdateCustomMovement(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            float deltaTime = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, K2_UpdateCustomMovement_DeltaTime_Offset), 0, null);
            K2_UpdateCustomMovement_Implementation(deltaTime);
        }
    }
    
    // Function /Script/Engine.Character:K2_OnStartCrouch
    IntPtr K2_OnStartCrouch_NativeFunction;
    static readonly int K2_OnStartCrouch_ParamsSize;
    static readonly int K2_OnStartCrouch_HalfHeightAdjust_Offset;
    static readonly int K2_OnStartCrouch_ScaledHalfHeightAdjust_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnStartCrouch(float halfHeightAdjust, float scaledHalfHeightAdjust)
    {
        unsafe
        {
            if (K2_OnStartCrouch_NativeFunction == IntPtr.Zero)
            {
                K2_OnStartCrouch_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "K2_OnStartCrouch");
            }
            byte* ParamsBufferAllocation = stackalloc byte[K2_OnStartCrouch_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, K2_OnStartCrouch_HalfHeightAdjust_Offset), 0, null, halfHeightAdjust);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, K2_OnStartCrouch_ScaledHalfHeightAdjust_Offset), 0, null, scaledHalfHeightAdjust);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_OnStartCrouch_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void K2_OnStartCrouch_Implementation(float halfHeightAdjust, float scaledHalfHeightAdjust)
    {
    }
    void Invoke_K2_OnStartCrouch(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            float halfHeightAdjust = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, K2_OnStartCrouch_HalfHeightAdjust_Offset), 0, null);
            float scaledHalfHeightAdjust = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, K2_OnStartCrouch_ScaledHalfHeightAdjust_Offset), 0, null);
            K2_OnStartCrouch_Implementation(halfHeightAdjust, scaledHalfHeightAdjust);
        }
    }
    
    // Function /Script/Engine.Character:K2_OnMovementModeChanged
    IntPtr K2_OnMovementModeChanged_NativeFunction;
    static readonly int K2_OnMovementModeChanged_ParamsSize;
    static readonly int K2_OnMovementModeChanged_PrevMovementMode_Offset;
    static readonly int K2_OnMovementModeChanged_NewMovementMode_Offset;
    static readonly int K2_OnMovementModeChanged_PrevCustomMode_Offset;
    static readonly int K2_OnMovementModeChanged_NewCustomMode_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnMovementModeChanged(UnrealSharp.Engine.EMovementMode prevMovementMode, UnrealSharp.Engine.EMovementMode newMovementMode, byte prevCustomMode, byte newCustomMode)
    {
        unsafe
        {
            if (K2_OnMovementModeChanged_NativeFunction == IntPtr.Zero)
            {
                K2_OnMovementModeChanged_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "K2_OnMovementModeChanged");
            }
            byte* ParamsBufferAllocation = stackalloc byte[K2_OnMovementModeChanged_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EMovementMode>.ToNative(IntPtr.Add(ParamsBuffer, K2_OnMovementModeChanged_PrevMovementMode_Offset), 0, null, prevMovementMode);
            BlittableMarshaller<UnrealSharp.Engine.EMovementMode>.ToNative(IntPtr.Add(ParamsBuffer, K2_OnMovementModeChanged_NewMovementMode_Offset), 0, null, newMovementMode);
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, K2_OnMovementModeChanged_PrevCustomMode_Offset), 0, null, prevCustomMode);
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, K2_OnMovementModeChanged_NewCustomMode_Offset), 0, null, newCustomMode);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_OnMovementModeChanged_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void K2_OnMovementModeChanged_Implementation(UnrealSharp.Engine.EMovementMode prevMovementMode, UnrealSharp.Engine.EMovementMode newMovementMode, byte prevCustomMode, byte newCustomMode)
    {
    }
    void Invoke_K2_OnMovementModeChanged(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.EMovementMode prevMovementMode = BlittableMarshaller<UnrealSharp.Engine.EMovementMode>.FromNative(IntPtr.Add(buffer, K2_OnMovementModeChanged_PrevMovementMode_Offset), 0, null);
            UnrealSharp.Engine.EMovementMode newMovementMode = BlittableMarshaller<UnrealSharp.Engine.EMovementMode>.FromNative(IntPtr.Add(buffer, K2_OnMovementModeChanged_NewMovementMode_Offset), 0, null);
            byte prevCustomMode = BlittableMarshaller<byte>.FromNative(IntPtr.Add(buffer, K2_OnMovementModeChanged_PrevCustomMode_Offset), 0, null);
            byte newCustomMode = BlittableMarshaller<byte>.FromNative(IntPtr.Add(buffer, K2_OnMovementModeChanged_NewCustomMode_Offset), 0, null);
            K2_OnMovementModeChanged_Implementation(prevMovementMode, newMovementMode, prevCustomMode, newCustomMode);
        }
    }
    
    // Function /Script/Engine.Character:K2_OnEndCrouch
    IntPtr K2_OnEndCrouch_NativeFunction;
    static readonly int K2_OnEndCrouch_ParamsSize;
    static readonly int K2_OnEndCrouch_HalfHeightAdjust_Offset;
    static readonly int K2_OnEndCrouch_ScaledHalfHeightAdjust_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnEndCrouch(float halfHeightAdjust, float scaledHalfHeightAdjust)
    {
        unsafe
        {
            if (K2_OnEndCrouch_NativeFunction == IntPtr.Zero)
            {
                K2_OnEndCrouch_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "K2_OnEndCrouch");
            }
            byte* ParamsBufferAllocation = stackalloc byte[K2_OnEndCrouch_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, K2_OnEndCrouch_HalfHeightAdjust_Offset), 0, null, halfHeightAdjust);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, K2_OnEndCrouch_ScaledHalfHeightAdjust_Offset), 0, null, scaledHalfHeightAdjust);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_OnEndCrouch_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void K2_OnEndCrouch_Implementation(float halfHeightAdjust, float scaledHalfHeightAdjust)
    {
    }
    void Invoke_K2_OnEndCrouch(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            float halfHeightAdjust = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, K2_OnEndCrouch_HalfHeightAdjust_Offset), 0, null);
            float scaledHalfHeightAdjust = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, K2_OnEndCrouch_ScaledHalfHeightAdjust_Offset), 0, null);
            K2_OnEndCrouch_Implementation(halfHeightAdjust, scaledHalfHeightAdjust);
        }
    }
    
    // Function /Script/Engine.Character:CanJumpInternal
    IntPtr CanJumpInternal_NativeFunction;
    static readonly int CanJumpInternal_ParamsSize;
    static readonly int CanJumpInternal_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual bool CanJumpInternal()
    {
        unsafe
        {
            if (CanJumpInternal_NativeFunction == IntPtr.Zero)
            {
                CanJumpInternal_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "CanJumpInternal");
            }
            byte* ParamsBufferAllocation = stackalloc byte[CanJumpInternal_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CanJumpInternal_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CanJumpInternal_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool CanJumpInternal_Implementation()
    {
        return default(bool);
    }
    void Invoke_CanJumpInternal(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            bool returnValue = CanJumpInternal_Implementation();
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class CharacterMovementComponent : UnrealSharp.Engine.PawnMovementComponent
{
    
    static CharacterMovementComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("CharacterMovementComponent");
        
        GravityScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "GravityScale");
        MaxStepHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxStepHeight");
        JumpZVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "JumpZVelocity");
        JumpOffJumpZFactor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "JumpOffJumpZFactor");
        GravityDirection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "GravityDirection");
        WorldToGravityTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WorldToGravityTransform");
        GravityToWorldTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "GravityToWorldTransform");
        MovementMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MovementMode");
        CustomMovementMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CustomMovementMode");
        NetworkSmoothingMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NetworkSmoothingMode");
        GroundFriction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "GroundFriction");
        MaxWalkSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxWalkSpeed");
        MaxWalkSpeedCrouched_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxWalkSpeedCrouched");
        MaxSwimSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxSwimSpeed");
        MaxFlySpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxFlySpeed");
        MaxCustomMovementSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxCustomMovementSpeed");
        MaxAcceleration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxAcceleration");
        MinAnalogWalkSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinAnalogWalkSpeed");
        BrakingFrictionFactor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BrakingFrictionFactor");
        BrakingFriction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BrakingFriction");
        BrakingSubStepTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BrakingSubStepTime");
        BrakingDecelerationWalking_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BrakingDecelerationWalking");
        BrakingDecelerationFalling_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BrakingDecelerationFalling");
        BrakingDecelerationSwimming_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BrakingDecelerationSwimming");
        BrakingDecelerationFlying_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BrakingDecelerationFlying");
        AirControl_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AirControl");
        AirControlBoostMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AirControlBoostMultiplier");
        AirControlBoostVelocityThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AirControlBoostVelocityThreshold");
        FallingLateralFriction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FallingLateralFriction");
        CrouchedHalfHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CrouchedHalfHeight");
        Buoyancy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Buoyancy");
        PerchRadiusThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PerchRadiusThreshold");
        PerchAdditionalHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PerchAdditionalHeight");
        RotationRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RotationRate");
        bUseSeparateBrakingFriction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseSeparateBrakingFriction");
        bUseSeparateBrakingFriction_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseSeparateBrakingFriction");
        bApplyGravityWhileJumping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bApplyGravityWhileJumping");
        bApplyGravityWhileJumping_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bApplyGravityWhileJumping");
        bUseControllerDesiredRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseControllerDesiredRotation");
        bUseControllerDesiredRotation_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseControllerDesiredRotation");
        bOrientRotationToMovement_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOrientRotationToMovement");
        bOrientRotationToMovement_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bOrientRotationToMovement");
        bSweepWhileNavWalking_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSweepWhileNavWalking");
        bSweepWhileNavWalking_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bSweepWhileNavWalking");
        bRunPhysicsWithNoController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bRunPhysicsWithNoController");
        bRunPhysicsWithNoController_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bRunPhysicsWithNoController");
        bForceNextFloorCheck_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bForceNextFloorCheck");
        bForceNextFloorCheck_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bForceNextFloorCheck");
        bCanWalkOffLedges_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCanWalkOffLedges");
        bCanWalkOffLedges_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCanWalkOffLedges");
        bCanWalkOffLedgesWhenCrouching_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCanWalkOffLedgesWhenCrouching");
        bCanWalkOffLedgesWhenCrouching_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCanWalkOffLedgesWhenCrouching");
        bEnablePhysicsInteraction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnablePhysicsInteraction");
        bEnablePhysicsInteraction_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnablePhysicsInteraction");
        bTouchForceScaledToMass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bTouchForceScaledToMass");
        bTouchForceScaledToMass_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bTouchForceScaledToMass");
        bPushForceScaledToMass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bPushForceScaledToMass");
        bPushForceScaledToMass_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bPushForceScaledToMass");
        bPushForceUsingZOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bPushForceUsingZOffset");
        bPushForceUsingZOffset_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bPushForceUsingZOffset");
        bScalePushForceToVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bScalePushForceToVelocity");
        bScalePushForceToVelocity_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bScalePushForceToVelocity");
        MaxOutOfWaterStepHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxOutOfWaterStepHeight");
        OutofWaterZ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OutofWaterZ");
        Mass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Mass");
        StandingDownwardForceScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StandingDownwardForceScale");
        InitialPushForceFactor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InitialPushForceFactor");
        PushForceFactor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PushForceFactor");
        PushForcePointZOffsetFactor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PushForcePointZOffsetFactor");
        TouchForceFactor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TouchForceFactor");
        MinTouchForce_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinTouchForce");
        MaxTouchForce_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxTouchForce");
        RepulsionForce_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RepulsionForce");
        MaxSimulationTimeStep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxSimulationTimeStep");
        MaxSimulationIterations_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxSimulationIterations");
        MaxJumpApexAttemptsPerSimulation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxJumpApexAttemptsPerSimulation");
        MaxDepenetrationWithGeometry_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxDepenetrationWithGeometry");
        MaxDepenetrationWithGeometryAsProxy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxDepenetrationWithGeometryAsProxy");
        MaxDepenetrationWithPawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxDepenetrationWithPawn");
        MaxDepenetrationWithPawnAsProxy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxDepenetrationWithPawnAsProxy");
        LedgeCheckThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LedgeCheckThreshold");
        JumpOutOfWaterPitch_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "JumpOutOfWaterPitch");
        CurrentFloor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CurrentFloor");
        DefaultLandMovementMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultLandMovementMode");
        DefaultWaterMovementMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultWaterMovementMode");
        bMaintainHorizontalGroundVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bMaintainHorizontalGroundVelocity");
        bMaintainHorizontalGroundVelocity_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bMaintainHorizontalGroundVelocity");
        bImpartBaseVelocityX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImpartBaseVelocityX");
        bImpartBaseVelocityX_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bImpartBaseVelocityX");
        bImpartBaseVelocityY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImpartBaseVelocityY");
        bImpartBaseVelocityY_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bImpartBaseVelocityY");
        bImpartBaseVelocityZ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImpartBaseVelocityZ");
        bImpartBaseVelocityZ_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bImpartBaseVelocityZ");
        bImpartBaseAngularVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImpartBaseAngularVelocity");
        bImpartBaseAngularVelocity_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bImpartBaseAngularVelocity");
        bJustTeleported_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bJustTeleported");
        bJustTeleported_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bJustTeleported");
        bIgnoreClientMovementErrorChecksAndCorrection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIgnoreClientMovementErrorChecksAndCorrection");
        bIgnoreClientMovementErrorChecksAndCorrection_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIgnoreClientMovementErrorChecksAndCorrection");
        bServerAcceptClientAuthoritativePosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bServerAcceptClientAuthoritativePosition");
        bServerAcceptClientAuthoritativePosition_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bServerAcceptClientAuthoritativePosition");
        bNotifyApex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bNotifyApex");
        bNotifyApex_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bNotifyApex");
        bWantsToCrouch_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bWantsToCrouch");
        bWantsToCrouch_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bWantsToCrouch");
        bCrouchMaintainsBaseLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCrouchMaintainsBaseLocation");
        bCrouchMaintainsBaseLocation_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCrouchMaintainsBaseLocation");
        bIgnoreBaseRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIgnoreBaseRotation");
        bIgnoreBaseRotation_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIgnoreBaseRotation");
        bAlwaysCheckFloor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAlwaysCheckFloor");
        bAlwaysCheckFloor_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAlwaysCheckFloor");
        bUseFlatBaseForFloorChecks_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseFlatBaseForFloorChecks");
        bUseFlatBaseForFloorChecks_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseFlatBaseForFloorChecks");
        bUseRVOAvoidance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseRVOAvoidance");
        bUseRVOAvoidance_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseRVOAvoidance");
        bRequestedMoveUseAcceleration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bRequestedMoveUseAcceleration");
        bRequestedMoveUseAcceleration_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bRequestedMoveUseAcceleration");
        bAllowPhysicsRotationDuringAnimRootMotion_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAllowPhysicsRotationDuringAnimRootMotion");
        bAllowPhysicsRotationDuringAnimRootMotion_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAllowPhysicsRotationDuringAnimRootMotion");
        FormerBaseVelocityDecayHalfLife_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FormerBaseVelocityDecayHalfLife");
        bProjectNavMeshWalking_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bProjectNavMeshWalking");
        bProjectNavMeshWalking_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bProjectNavMeshWalking");
        bProjectNavMeshOnBothWorldChannels_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bProjectNavMeshOnBothWorldChannels");
        bProjectNavMeshOnBothWorldChannels_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bProjectNavMeshOnBothWorldChannels");
        AvoidanceConsiderationRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AvoidanceConsiderationRadius");
        AvoidanceUID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AvoidanceUID");
        AvoidanceGroup_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AvoidanceGroup");
        GroupsToAvoid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "GroupsToAvoid");
        GroupsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "GroupsToIgnore");
        AvoidanceWeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AvoidanceWeight");
        NavMeshProjectionInterval_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NavMeshProjectionInterval");
        NavMeshProjectionInterpSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NavMeshProjectionInterpSpeed");
        NavMeshProjectionHeightScaleUp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NavMeshProjectionHeightScaleUp");
        NavMeshProjectionHeightScaleDown_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NavMeshProjectionHeightScaleDown");
        NavWalkingFloorDistTolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NavWalkingFloorDistTolerance");
        
        SetWalkableFloorZ_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWalkableFloorZ");
        SetWalkableFloorZ_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWalkableFloorZ_NativeFunction);
        SetWalkableFloorZ_InWalkableFloorZ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWalkableFloorZ_NativeFunction, "InWalkableFloorZ");
        SetWalkableFloorAngle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWalkableFloorAngle");
        SetWalkableFloorAngle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWalkableFloorAngle_NativeFunction);
        SetWalkableFloorAngle_InWalkableFloorAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWalkableFloorAngle_NativeFunction, "InWalkableFloorAngle");
        SetMovementMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMovementMode");
        SetMovementMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMovementMode_NativeFunction);
        SetMovementMode_NewMovementMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMovementMode_NativeFunction, "NewMovementMode");
        SetMovementMode_NewCustomMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMovementMode_NativeFunction, "NewCustomMode");
        SetGroupsToIgnoreMask_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGroupsToIgnoreMask");
        SetGroupsToIgnoreMask_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGroupsToIgnoreMask_NativeFunction);
        SetGroupsToIgnoreMask_GroupMask_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGroupsToIgnoreMask_NativeFunction, "GroupMask");
        SetGroupsToIgnore_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGroupsToIgnore");
        SetGroupsToIgnore_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGroupsToIgnore_NativeFunction);
        SetGroupsToIgnore_GroupFlags_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGroupsToIgnore_NativeFunction, "GroupFlags");
        SetGroupsToAvoidMask_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGroupsToAvoidMask");
        SetGroupsToAvoidMask_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGroupsToAvoidMask_NativeFunction);
        SetGroupsToAvoidMask_GroupMask_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGroupsToAvoidMask_NativeFunction, "GroupMask");
        SetGroupsToAvoid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGroupsToAvoid");
        SetGroupsToAvoid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGroupsToAvoid_NativeFunction);
        SetGroupsToAvoid_GroupFlags_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGroupsToAvoid_NativeFunction, "GroupFlags");
        SetAvoidanceGroupMask_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAvoidanceGroupMask");
        SetAvoidanceGroupMask_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAvoidanceGroupMask_NativeFunction);
        SetAvoidanceGroupMask_GroupMask_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAvoidanceGroupMask_NativeFunction, "GroupMask");
        SetAvoidanceGroup_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAvoidanceGroup");
        SetAvoidanceGroup_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAvoidanceGroup_NativeFunction);
        SetAvoidanceGroup_GroupFlags_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAvoidanceGroup_NativeFunction, "GroupFlags");
        SetAvoidanceEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAvoidanceEnabled");
        SetAvoidanceEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAvoidanceEnabled_NativeFunction);
        SetAvoidanceEnabled_bEnable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAvoidanceEnabled_NativeFunction, "bEnable");
        K2_GetWalkableFloorZ_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_GetWalkableFloorZ");
        K2_GetWalkableFloorZ_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_GetWalkableFloorZ_NativeFunction);
        K2_GetWalkableFloorZ_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetWalkableFloorZ_NativeFunction, "ReturnValue");
        K2_GetWalkableFloorAngle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_GetWalkableFloorAngle");
        K2_GetWalkableFloorAngle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_GetWalkableFloorAngle_NativeFunction);
        K2_GetWalkableFloorAngle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetWalkableFloorAngle_NativeFunction, "ReturnValue");
        K2_FindFloor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_FindFloor");
        K2_FindFloor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_FindFloor_NativeFunction);
        K2_FindFloor_CapsuleLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_FindFloor_NativeFunction, "CapsuleLocation");
        K2_FindFloor_FloorResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_FindFloor_NativeFunction, "FloorResult");
        K2_ComputeFloorDist_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_ComputeFloorDist");
        K2_ComputeFloorDist_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_ComputeFloorDist_NativeFunction);
        K2_ComputeFloorDist_CapsuleLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_ComputeFloorDist_NativeFunction, "CapsuleLocation");
        K2_ComputeFloorDist_LineDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_ComputeFloorDist_NativeFunction, "LineDistance");
        K2_ComputeFloorDist_SweepDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_ComputeFloorDist_NativeFunction, "SweepDistance");
        K2_ComputeFloorDist_SweepRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_ComputeFloorDist_NativeFunction, "SweepRadius");
        K2_ComputeFloorDist_FloorResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_ComputeFloorDist_NativeFunction, "FloorResult");
        IsWalking_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsWalking");
        IsWalking_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsWalking_NativeFunction);
        IsWalking_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsWalking_NativeFunction, "ReturnValue");
        IsWalkable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsWalkable");
        IsWalkable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsWalkable_NativeFunction);
        IsWalkable_Hit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsWalkable_NativeFunction, "Hit");
        IsWalkable_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsWalkable_NativeFunction, "ReturnValue");
        GetValidPerchRadius_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValidPerchRadius");
        GetValidPerchRadius_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValidPerchRadius_NativeFunction);
        GetValidPerchRadius_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValidPerchRadius_NativeFunction, "ReturnValue");
        GetPerchRadiusThreshold_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPerchRadiusThreshold");
        GetPerchRadiusThreshold_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPerchRadiusThreshold_NativeFunction);
        GetPerchRadiusThreshold_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPerchRadiusThreshold_NativeFunction, "ReturnValue");
        GetMovementBase_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMovementBase");
        GetMovementBase_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMovementBase_NativeFunction);
        GetMovementBase_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMovementBase_NativeFunction, "ReturnValue");
        GetMinAnalogSpeed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMinAnalogSpeed");
        GetMinAnalogSpeed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMinAnalogSpeed_NativeFunction);
        GetMinAnalogSpeed_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMinAnalogSpeed_NativeFunction, "ReturnValue");
        GetMaxJumpHeightWithJumpTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaxJumpHeightWithJumpTime");
        GetMaxJumpHeightWithJumpTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaxJumpHeightWithJumpTime_NativeFunction);
        GetMaxJumpHeightWithJumpTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaxJumpHeightWithJumpTime_NativeFunction, "ReturnValue");
        GetMaxJumpHeight_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaxJumpHeight");
        GetMaxJumpHeight_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaxJumpHeight_NativeFunction);
        GetMaxJumpHeight_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaxJumpHeight_NativeFunction, "ReturnValue");
        GetMaxBrakingDeceleration_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaxBrakingDeceleration");
        GetMaxBrakingDeceleration_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaxBrakingDeceleration_NativeFunction);
        GetMaxBrakingDeceleration_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaxBrakingDeceleration_NativeFunction, "ReturnValue");
        GetMaxAcceleration_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaxAcceleration");
        GetMaxAcceleration_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaxAcceleration_NativeFunction);
        GetMaxAcceleration_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaxAcceleration_NativeFunction, "ReturnValue");
        GetLastUpdateVelocity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLastUpdateVelocity");
        GetLastUpdateVelocity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLastUpdateVelocity_NativeFunction);
        GetLastUpdateVelocity_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLastUpdateVelocity_NativeFunction, "ReturnValue");
        GetLastUpdateRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLastUpdateRotation");
        GetLastUpdateRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLastUpdateRotation_NativeFunction);
        GetLastUpdateRotation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLastUpdateRotation_NativeFunction, "ReturnValue");
        GetLastUpdateRequestedVelocity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLastUpdateRequestedVelocity");
        GetLastUpdateRequestedVelocity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLastUpdateRequestedVelocity_NativeFunction);
        GetLastUpdateRequestedVelocity_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLastUpdateRequestedVelocity_NativeFunction, "ReturnValue");
        GetLastUpdateLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLastUpdateLocation");
        GetLastUpdateLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLastUpdateLocation_NativeFunction);
        GetLastUpdateLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLastUpdateLocation_NativeFunction, "ReturnValue");
        GetImpartedMovementBaseVelocity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetImpartedMovementBaseVelocity");
        GetImpartedMovementBaseVelocity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetImpartedMovementBaseVelocity_NativeFunction);
        GetImpartedMovementBaseVelocity_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetImpartedMovementBaseVelocity_NativeFunction, "ReturnValue");
        GetCurrentAcceleration_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentAcceleration");
        GetCurrentAcceleration_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentAcceleration_NativeFunction);
        GetCurrentAcceleration_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentAcceleration_NativeFunction, "ReturnValue");
        GetCharacterOwner_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCharacterOwner");
        GetCharacterOwner_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCharacterOwner_NativeFunction);
        GetCharacterOwner_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCharacterOwner_NativeFunction, "ReturnValue");
        GetAnalogInputModifier_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnalogInputModifier");
        GetAnalogInputModifier_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnalogInputModifier_NativeFunction);
        GetAnalogInputModifier_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnalogInputModifier_NativeFunction, "ReturnValue");
        DisableMovement_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DisableMovement");
        ClearAccumulatedForces_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearAccumulatedForces");
        CalcVelocity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CalcVelocity");
        CalcVelocity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CalcVelocity_NativeFunction);
        CalcVelocity_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CalcVelocity_NativeFunction, "DeltaTime");
        CalcVelocity_Friction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CalcVelocity_NativeFunction, "Friction");
        CalcVelocity_bFluid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CalcVelocity_NativeFunction, "bFluid");
        CalcVelocity_BrakingDeceleration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CalcVelocity_NativeFunction, "BrakingDeceleration");
        AddImpulse_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddImpulse");
        AddImpulse_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddImpulse_NativeFunction);
        AddImpulse_Impulse_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddImpulse_NativeFunction, "Impulse");
        AddImpulse_bVelocityChange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddImpulse_NativeFunction, "bVelocityChange");
        AddForce_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddForce");
        AddForce_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddForce_NativeFunction);
        AddForce_Force_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddForce_NativeFunction, "Force");
        
        
    }
    
    protected CharacterMovementComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Engine.CharacterMovementComponent:GravityScale
    static readonly int GravityScale_Offset;
    
    public float GravityScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, GravityScale_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, GravityScale_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:MaxStepHeight
    static readonly int MaxStepHeight_Offset;
    
    public float MaxStepHeight
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxStepHeight_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxStepHeight_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:JumpZVelocity
    static readonly int JumpZVelocity_Offset;
    
    public float JumpZVelocity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, JumpZVelocity_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, JumpZVelocity_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:JumpOffJumpZFactor
    static readonly int JumpOffJumpZFactor_Offset;
    
    public float JumpOffJumpZFactor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, JumpOffJumpZFactor_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, JumpOffJumpZFactor_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.CharacterMovementComponent:GravityDirection
    static readonly int GravityDirection_Offset;
    
    public System.DoubleNumerics.Vector3 GravityDirection
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, GravityDirection_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.CharacterMovementComponent:WorldToGravityTransform
    static readonly int WorldToGravityTransform_Offset;
    
    public System.DoubleNumerics.Quaternion WorldToGravityTransform
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(NativeObject, WorldToGravityTransform_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.CharacterMovementComponent:GravityToWorldTransform
    static readonly int GravityToWorldTransform_Offset;
    
    public System.DoubleNumerics.Quaternion GravityToWorldTransform
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(NativeObject, GravityToWorldTransform_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/Engine.CharacterMovementComponent:MovementMode
    static readonly int MovementMode_Offset;
    
    public UnrealSharp.Engine.EMovementMode MovementMode
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EMovementMode>.FromNative(IntPtr.Add(NativeObject, MovementMode_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/Engine.CharacterMovementComponent:CustomMovementMode
    static readonly int CustomMovementMode_Offset;
    
    public byte CustomMovementMode
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<byte>.FromNative(IntPtr.Add(NativeObject, CustomMovementMode_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/Engine.CharacterMovementComponent:NetworkSmoothingMode
    static readonly int NetworkSmoothingMode_Offset;
    
    public UnrealSharp.Engine.ENetworkSmoothingMode NetworkSmoothingMode
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ENetworkSmoothingMode>.FromNative(IntPtr.Add(NativeObject, NetworkSmoothingMode_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:GroundFriction
    static readonly int GroundFriction_Offset;
    
    public float GroundFriction
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, GroundFriction_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, GroundFriction_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:MaxWalkSpeed
    static readonly int MaxWalkSpeed_Offset;
    
    public float MaxWalkSpeed
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxWalkSpeed_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxWalkSpeed_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:MaxWalkSpeedCrouched
    static readonly int MaxWalkSpeedCrouched_Offset;
    
    public float MaxWalkSpeedCrouched
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxWalkSpeedCrouched_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxWalkSpeedCrouched_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:MaxSwimSpeed
    static readonly int MaxSwimSpeed_Offset;
    
    public float MaxSwimSpeed
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxSwimSpeed_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxSwimSpeed_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:MaxFlySpeed
    static readonly int MaxFlySpeed_Offset;
    
    public float MaxFlySpeed
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxFlySpeed_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxFlySpeed_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:MaxCustomMovementSpeed
    static readonly int MaxCustomMovementSpeed_Offset;
    
    public float MaxCustomMovementSpeed
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxCustomMovementSpeed_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxCustomMovementSpeed_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:MaxAcceleration
    static readonly int MaxAcceleration_Offset;
    
    public float MaxAcceleration
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxAcceleration_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxAcceleration_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:MinAnalogWalkSpeed
    static readonly int MinAnalogWalkSpeed_Offset;
    
    public float MinAnalogWalkSpeed
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinAnalogWalkSpeed_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MinAnalogWalkSpeed_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:BrakingFrictionFactor
    static readonly int BrakingFrictionFactor_Offset;
    
    public float BrakingFrictionFactor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, BrakingFrictionFactor_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, BrakingFrictionFactor_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:BrakingFriction
    static readonly int BrakingFriction_Offset;
    
    public float BrakingFriction
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, BrakingFriction_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, BrakingFriction_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:BrakingSubStepTime
    static readonly int BrakingSubStepTime_Offset;
    
    public float BrakingSubStepTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, BrakingSubStepTime_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, BrakingSubStepTime_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:BrakingDecelerationWalking
    static readonly int BrakingDecelerationWalking_Offset;
    
    public float BrakingDecelerationWalking
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, BrakingDecelerationWalking_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, BrakingDecelerationWalking_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:BrakingDecelerationFalling
    static readonly int BrakingDecelerationFalling_Offset;
    
    public float BrakingDecelerationFalling
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, BrakingDecelerationFalling_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, BrakingDecelerationFalling_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:BrakingDecelerationSwimming
    static readonly int BrakingDecelerationSwimming_Offset;
    
    public float BrakingDecelerationSwimming
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, BrakingDecelerationSwimming_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, BrakingDecelerationSwimming_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:BrakingDecelerationFlying
    static readonly int BrakingDecelerationFlying_Offset;
    
    public float BrakingDecelerationFlying
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, BrakingDecelerationFlying_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, BrakingDecelerationFlying_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:AirControl
    static readonly int AirControl_Offset;
    
    public float AirControl
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AirControl_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, AirControl_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:AirControlBoostMultiplier
    static readonly int AirControlBoostMultiplier_Offset;
    
    public float AirControlBoostMultiplier
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AirControlBoostMultiplier_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, AirControlBoostMultiplier_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:AirControlBoostVelocityThreshold
    static readonly int AirControlBoostVelocityThreshold_Offset;
    
    public float AirControlBoostVelocityThreshold
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AirControlBoostVelocityThreshold_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, AirControlBoostVelocityThreshold_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:FallingLateralFriction
    static readonly int FallingLateralFriction_Offset;
    
    public float FallingLateralFriction
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, FallingLateralFriction_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, FallingLateralFriction_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:CrouchedHalfHeight
    static readonly int CrouchedHalfHeight_Offset;
    
    public float CrouchedHalfHeight
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CrouchedHalfHeight_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, CrouchedHalfHeight_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:Buoyancy
    static readonly int Buoyancy_Offset;
    
    public float Buoyancy
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Buoyancy_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Buoyancy_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:PerchRadiusThreshold
    static readonly int PerchRadiusThreshold_Offset;
    
    public float PerchRadiusThreshold
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PerchRadiusThreshold_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PerchRadiusThreshold_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:PerchAdditionalHeight
    static readonly int PerchAdditionalHeight_Offset;
    
    public float PerchAdditionalHeight
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PerchAdditionalHeight_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PerchAdditionalHeight_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.CharacterMovementComponent:RotationRate
    static readonly int RotationRate_Offset;
    
    public UnrealSharp.Rotator RotationRate
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(NativeObject, RotationRate_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(NativeObject, RotationRate_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bUseSeparateBrakingFriction
    static readonly int bUseSeparateBrakingFriction_Offset;
    static readonly IntPtr bUseSeparateBrakingFriction_NativeProperty;
    
    public bool bUseSeparateBrakingFriction
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseSeparateBrakingFriction_NativeProperty, bUseSeparateBrakingFriction_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bUseSeparateBrakingFriction_NativeProperty, bUseSeparateBrakingFriction_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bApplyGravityWhileJumping
    static readonly int bApplyGravityWhileJumping_Offset;
    static readonly IntPtr bApplyGravityWhileJumping_NativeProperty;
    
    public bool bApplyGravityWhileJumping
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bApplyGravityWhileJumping_NativeProperty, bApplyGravityWhileJumping_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bApplyGravityWhileJumping_NativeProperty, bApplyGravityWhileJumping_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bUseControllerDesiredRotation
    static readonly int bUseControllerDesiredRotation_Offset;
    static readonly IntPtr bUseControllerDesiredRotation_NativeProperty;
    
    public bool bUseControllerDesiredRotation
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseControllerDesiredRotation_NativeProperty, bUseControllerDesiredRotation_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bUseControllerDesiredRotation_NativeProperty, bUseControllerDesiredRotation_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bOrientRotationToMovement
    static readonly int bOrientRotationToMovement_Offset;
    static readonly IntPtr bOrientRotationToMovement_NativeProperty;
    
    public bool bOrientRotationToMovement
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bOrientRotationToMovement_NativeProperty, bOrientRotationToMovement_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bOrientRotationToMovement_NativeProperty, bOrientRotationToMovement_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bSweepWhileNavWalking
    static readonly int bSweepWhileNavWalking_Offset;
    static readonly IntPtr bSweepWhileNavWalking_NativeProperty;
    
    public bool bSweepWhileNavWalking
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bSweepWhileNavWalking_NativeProperty, bSweepWhileNavWalking_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bSweepWhileNavWalking_NativeProperty, bSweepWhileNavWalking_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bRunPhysicsWithNoController
    static readonly int bRunPhysicsWithNoController_Offset;
    static readonly IntPtr bRunPhysicsWithNoController_NativeProperty;
    
    public bool bRunPhysicsWithNoController
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bRunPhysicsWithNoController_NativeProperty, bRunPhysicsWithNoController_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bRunPhysicsWithNoController_NativeProperty, bRunPhysicsWithNoController_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bForceNextFloorCheck
    static readonly int bForceNextFloorCheck_Offset;
    static readonly IntPtr bForceNextFloorCheck_NativeProperty;
    
    public bool bForceNextFloorCheck
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bForceNextFloorCheck_NativeProperty, bForceNextFloorCheck_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bForceNextFloorCheck_NativeProperty, bForceNextFloorCheck_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bCanWalkOffLedges
    static readonly int bCanWalkOffLedges_Offset;
    static readonly IntPtr bCanWalkOffLedges_NativeProperty;
    
    public bool bCanWalkOffLedges
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCanWalkOffLedges_NativeProperty, bCanWalkOffLedges_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bCanWalkOffLedges_NativeProperty, bCanWalkOffLedges_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bCanWalkOffLedgesWhenCrouching
    static readonly int bCanWalkOffLedgesWhenCrouching_Offset;
    static readonly IntPtr bCanWalkOffLedgesWhenCrouching_NativeProperty;
    
    public bool bCanWalkOffLedgesWhenCrouching
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCanWalkOffLedgesWhenCrouching_NativeProperty, bCanWalkOffLedgesWhenCrouching_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bCanWalkOffLedgesWhenCrouching_NativeProperty, bCanWalkOffLedgesWhenCrouching_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bEnablePhysicsInteraction
    static readonly int bEnablePhysicsInteraction_Offset;
    static readonly IntPtr bEnablePhysicsInteraction_NativeProperty;
    
    public bool bEnablePhysicsInteraction
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnablePhysicsInteraction_NativeProperty, bEnablePhysicsInteraction_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bEnablePhysicsInteraction_NativeProperty, bEnablePhysicsInteraction_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bTouchForceScaledToMass
    static readonly int bTouchForceScaledToMass_Offset;
    static readonly IntPtr bTouchForceScaledToMass_NativeProperty;
    
    public bool bTouchForceScaledToMass
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bTouchForceScaledToMass_NativeProperty, bTouchForceScaledToMass_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bTouchForceScaledToMass_NativeProperty, bTouchForceScaledToMass_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bPushForceScaledToMass
    static readonly int bPushForceScaledToMass_Offset;
    static readonly IntPtr bPushForceScaledToMass_NativeProperty;
    
    public bool bPushForceScaledToMass
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bPushForceScaledToMass_NativeProperty, bPushForceScaledToMass_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bPushForceScaledToMass_NativeProperty, bPushForceScaledToMass_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bPushForceUsingZOffset
    static readonly int bPushForceUsingZOffset_Offset;
    static readonly IntPtr bPushForceUsingZOffset_NativeProperty;
    
    public bool bPushForceUsingZOffset
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bPushForceUsingZOffset_NativeProperty, bPushForceUsingZOffset_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bPushForceUsingZOffset_NativeProperty, bPushForceUsingZOffset_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bScalePushForceToVelocity
    static readonly int bScalePushForceToVelocity_Offset;
    static readonly IntPtr bScalePushForceToVelocity_NativeProperty;
    
    public bool bScalePushForceToVelocity
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bScalePushForceToVelocity_NativeProperty, bScalePushForceToVelocity_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bScalePushForceToVelocity_NativeProperty, bScalePushForceToVelocity_Offset, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:MaxOutOfWaterStepHeight
    static readonly int MaxOutOfWaterStepHeight_Offset;
    
    public float MaxOutOfWaterStepHeight
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxOutOfWaterStepHeight_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxOutOfWaterStepHeight_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:OutofWaterZ
    static readonly int OutofWaterZ_Offset;
    
    public float OutofWaterZ
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, OutofWaterZ_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, OutofWaterZ_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:Mass
    static readonly int Mass_Offset;
    
    public float Mass
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Mass_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Mass_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:StandingDownwardForceScale
    static readonly int StandingDownwardForceScale_Offset;
    
    public float StandingDownwardForceScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, StandingDownwardForceScale_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, StandingDownwardForceScale_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:InitialPushForceFactor
    static readonly int InitialPushForceFactor_Offset;
    
    public float InitialPushForceFactor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, InitialPushForceFactor_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, InitialPushForceFactor_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:PushForceFactor
    static readonly int PushForceFactor_Offset;
    
    public float PushForceFactor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PushForceFactor_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PushForceFactor_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:PushForcePointZOffsetFactor
    static readonly int PushForcePointZOffsetFactor_Offset;
    
    public float PushForcePointZOffsetFactor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PushForcePointZOffsetFactor_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PushForcePointZOffsetFactor_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:TouchForceFactor
    static readonly int TouchForceFactor_Offset;
    
    public float TouchForceFactor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, TouchForceFactor_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, TouchForceFactor_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:MinTouchForce
    static readonly int MinTouchForce_Offset;
    
    public float MinTouchForce
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinTouchForce_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MinTouchForce_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:MaxTouchForce
    static readonly int MaxTouchForce_Offset;
    
    public float MaxTouchForce
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxTouchForce_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxTouchForce_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:RepulsionForce
    static readonly int RepulsionForce_Offset;
    
    public float RepulsionForce
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, RepulsionForce_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, RepulsionForce_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:MaxSimulationTimeStep
    static readonly int MaxSimulationTimeStep_Offset;
    
    public float MaxSimulationTimeStep
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxSimulationTimeStep_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxSimulationTimeStep_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.CharacterMovementComponent:MaxSimulationIterations
    static readonly int MaxSimulationIterations_Offset;
    
    public int MaxSimulationIterations
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, MaxSimulationIterations_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, MaxSimulationIterations_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.CharacterMovementComponent:MaxJumpApexAttemptsPerSimulation
    static readonly int MaxJumpApexAttemptsPerSimulation_Offset;
    
    public int MaxJumpApexAttemptsPerSimulation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, MaxJumpApexAttemptsPerSimulation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, MaxJumpApexAttemptsPerSimulation_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:MaxDepenetrationWithGeometry
    static readonly int MaxDepenetrationWithGeometry_Offset;
    
    public float MaxDepenetrationWithGeometry
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxDepenetrationWithGeometry_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxDepenetrationWithGeometry_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:MaxDepenetrationWithGeometryAsProxy
    static readonly int MaxDepenetrationWithGeometryAsProxy_Offset;
    
    public float MaxDepenetrationWithGeometryAsProxy
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxDepenetrationWithGeometryAsProxy_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxDepenetrationWithGeometryAsProxy_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:MaxDepenetrationWithPawn
    static readonly int MaxDepenetrationWithPawn_Offset;
    
    public float MaxDepenetrationWithPawn
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxDepenetrationWithPawn_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxDepenetrationWithPawn_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:MaxDepenetrationWithPawnAsProxy
    static readonly int MaxDepenetrationWithPawnAsProxy_Offset;
    
    public float MaxDepenetrationWithPawnAsProxy
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxDepenetrationWithPawnAsProxy_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxDepenetrationWithPawnAsProxy_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:LedgeCheckThreshold
    static readonly int LedgeCheckThreshold_Offset;
    
    public float LedgeCheckThreshold
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LedgeCheckThreshold_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, LedgeCheckThreshold_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:JumpOutOfWaterPitch
    static readonly int JumpOutOfWaterPitch_Offset;
    
    public float JumpOutOfWaterPitch
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, JumpOutOfWaterPitch_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, JumpOutOfWaterPitch_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.CharacterMovementComponent:CurrentFloor
    static readonly int CurrentFloor_Offset;
    
    public UnrealSharp.Engine.FindFloorResult CurrentFloor
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.FindFloorResultMarshaler.FromNative(IntPtr.Add(NativeObject, CurrentFloor_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/Engine.CharacterMovementComponent:DefaultLandMovementMode
    static readonly int DefaultLandMovementMode_Offset;
    
    public UnrealSharp.Engine.EMovementMode DefaultLandMovementMode
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EMovementMode>.FromNative(IntPtr.Add(NativeObject, DefaultLandMovementMode_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EMovementMode>.ToNative(IntPtr.Add(NativeObject, DefaultLandMovementMode_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/Engine.CharacterMovementComponent:DefaultWaterMovementMode
    static readonly int DefaultWaterMovementMode_Offset;
    
    public UnrealSharp.Engine.EMovementMode DefaultWaterMovementMode
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EMovementMode>.FromNative(IntPtr.Add(NativeObject, DefaultWaterMovementMode_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EMovementMode>.ToNative(IntPtr.Add(NativeObject, DefaultWaterMovementMode_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bMaintainHorizontalGroundVelocity
    static readonly int bMaintainHorizontalGroundVelocity_Offset;
    static readonly IntPtr bMaintainHorizontalGroundVelocity_NativeProperty;
    
    public bool bMaintainHorizontalGroundVelocity
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bMaintainHorizontalGroundVelocity_NativeProperty, bMaintainHorizontalGroundVelocity_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bMaintainHorizontalGroundVelocity_NativeProperty, bMaintainHorizontalGroundVelocity_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bImpartBaseVelocityX
    static readonly int bImpartBaseVelocityX_Offset;
    static readonly IntPtr bImpartBaseVelocityX_NativeProperty;
    
    public bool bImpartBaseVelocityX
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bImpartBaseVelocityX_NativeProperty, bImpartBaseVelocityX_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bImpartBaseVelocityX_NativeProperty, bImpartBaseVelocityX_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bImpartBaseVelocityY
    static readonly int bImpartBaseVelocityY_Offset;
    static readonly IntPtr bImpartBaseVelocityY_NativeProperty;
    
    public bool bImpartBaseVelocityY
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bImpartBaseVelocityY_NativeProperty, bImpartBaseVelocityY_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bImpartBaseVelocityY_NativeProperty, bImpartBaseVelocityY_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bImpartBaseVelocityZ
    static readonly int bImpartBaseVelocityZ_Offset;
    static readonly IntPtr bImpartBaseVelocityZ_NativeProperty;
    
    public bool bImpartBaseVelocityZ
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bImpartBaseVelocityZ_NativeProperty, bImpartBaseVelocityZ_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bImpartBaseVelocityZ_NativeProperty, bImpartBaseVelocityZ_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bImpartBaseAngularVelocity
    static readonly int bImpartBaseAngularVelocity_Offset;
    static readonly IntPtr bImpartBaseAngularVelocity_NativeProperty;
    
    public bool bImpartBaseAngularVelocity
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bImpartBaseAngularVelocity_NativeProperty, bImpartBaseAngularVelocity_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bImpartBaseAngularVelocity_NativeProperty, bImpartBaseAngularVelocity_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bJustTeleported
    static readonly int bJustTeleported_Offset;
    static readonly IntPtr bJustTeleported_NativeProperty;
    
    public bool bJustTeleported
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bJustTeleported_NativeProperty, bJustTeleported_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bJustTeleported_NativeProperty, bJustTeleported_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bIgnoreClientMovementErrorChecksAndCorrection
    static readonly int bIgnoreClientMovementErrorChecksAndCorrection_Offset;
    static readonly IntPtr bIgnoreClientMovementErrorChecksAndCorrection_NativeProperty;
    
    public bool bIgnoreClientMovementErrorChecksAndCorrection
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIgnoreClientMovementErrorChecksAndCorrection_NativeProperty, bIgnoreClientMovementErrorChecksAndCorrection_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bIgnoreClientMovementErrorChecksAndCorrection_NativeProperty, bIgnoreClientMovementErrorChecksAndCorrection_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bServerAcceptClientAuthoritativePosition
    static readonly int bServerAcceptClientAuthoritativePosition_Offset;
    static readonly IntPtr bServerAcceptClientAuthoritativePosition_NativeProperty;
    
    public bool bServerAcceptClientAuthoritativePosition
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bServerAcceptClientAuthoritativePosition_NativeProperty, bServerAcceptClientAuthoritativePosition_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bServerAcceptClientAuthoritativePosition_NativeProperty, bServerAcceptClientAuthoritativePosition_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bNotifyApex
    static readonly int bNotifyApex_Offset;
    static readonly IntPtr bNotifyApex_NativeProperty;
    
    public bool bNotifyApex
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bNotifyApex_NativeProperty, bNotifyApex_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bNotifyApex_NativeProperty, bNotifyApex_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bWantsToCrouch
    static readonly int bWantsToCrouch_Offset;
    static readonly IntPtr bWantsToCrouch_NativeProperty;
    
    public bool bWantsToCrouch
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bWantsToCrouch_NativeProperty, bWantsToCrouch_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bCrouchMaintainsBaseLocation
    static readonly int bCrouchMaintainsBaseLocation_Offset;
    static readonly IntPtr bCrouchMaintainsBaseLocation_NativeProperty;
    
    public bool bCrouchMaintainsBaseLocation
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCrouchMaintainsBaseLocation_NativeProperty, bCrouchMaintainsBaseLocation_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bCrouchMaintainsBaseLocation_NativeProperty, bCrouchMaintainsBaseLocation_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bIgnoreBaseRotation
    static readonly int bIgnoreBaseRotation_Offset;
    static readonly IntPtr bIgnoreBaseRotation_NativeProperty;
    
    public bool bIgnoreBaseRotation
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIgnoreBaseRotation_NativeProperty, bIgnoreBaseRotation_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bIgnoreBaseRotation_NativeProperty, bIgnoreBaseRotation_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bAlwaysCheckFloor
    static readonly int bAlwaysCheckFloor_Offset;
    static readonly IntPtr bAlwaysCheckFloor_NativeProperty;
    
    public bool bAlwaysCheckFloor
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAlwaysCheckFloor_NativeProperty, bAlwaysCheckFloor_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bAlwaysCheckFloor_NativeProperty, bAlwaysCheckFloor_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bUseFlatBaseForFloorChecks
    static readonly int bUseFlatBaseForFloorChecks_Offset;
    static readonly IntPtr bUseFlatBaseForFloorChecks_NativeProperty;
    
    public bool bUseFlatBaseForFloorChecks
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseFlatBaseForFloorChecks_NativeProperty, bUseFlatBaseForFloorChecks_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bUseFlatBaseForFloorChecks_NativeProperty, bUseFlatBaseForFloorChecks_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bUseRVOAvoidance
    static readonly int bUseRVOAvoidance_Offset;
    static readonly IntPtr bUseRVOAvoidance_NativeProperty;
    
    public bool bUseRVOAvoidance
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseRVOAvoidance_NativeProperty, bUseRVOAvoidance_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bRequestedMoveUseAcceleration
    static readonly int bRequestedMoveUseAcceleration_Offset;
    static readonly IntPtr bRequestedMoveUseAcceleration_NativeProperty;
    
    public bool bRequestedMoveUseAcceleration
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bRequestedMoveUseAcceleration_NativeProperty, bRequestedMoveUseAcceleration_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bRequestedMoveUseAcceleration_NativeProperty, bRequestedMoveUseAcceleration_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bAllowPhysicsRotationDuringAnimRootMotion
    static readonly int bAllowPhysicsRotationDuringAnimRootMotion_Offset;
    static readonly IntPtr bAllowPhysicsRotationDuringAnimRootMotion_NativeProperty;
    
    public bool bAllowPhysicsRotationDuringAnimRootMotion
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAllowPhysicsRotationDuringAnimRootMotion_NativeProperty, bAllowPhysicsRotationDuringAnimRootMotion_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bAllowPhysicsRotationDuringAnimRootMotion_NativeProperty, bAllowPhysicsRotationDuringAnimRootMotion_Offset, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:FormerBaseVelocityDecayHalfLife
    static readonly int FormerBaseVelocityDecayHalfLife_Offset;
    
    public float FormerBaseVelocityDecayHalfLife
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, FormerBaseVelocityDecayHalfLife_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, FormerBaseVelocityDecayHalfLife_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bProjectNavMeshWalking
    static readonly int bProjectNavMeshWalking_Offset;
    static readonly IntPtr bProjectNavMeshWalking_NativeProperty;
    
    public bool bProjectNavMeshWalking
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bProjectNavMeshWalking_NativeProperty, bProjectNavMeshWalking_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.CharacterMovementComponent:bProjectNavMeshOnBothWorldChannels
    static readonly int bProjectNavMeshOnBothWorldChannels_Offset;
    static readonly IntPtr bProjectNavMeshOnBothWorldChannels_NativeProperty;
    
    public bool bProjectNavMeshOnBothWorldChannels
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bProjectNavMeshOnBothWorldChannels_NativeProperty, bProjectNavMeshOnBothWorldChannels_Offset);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:AvoidanceConsiderationRadius
    static readonly int AvoidanceConsiderationRadius_Offset;
    
    public float AvoidanceConsiderationRadius
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AvoidanceConsiderationRadius_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Engine.CharacterMovementComponent:AvoidanceUID
    static readonly int AvoidanceUID_Offset;
    
    public int AvoidanceUID
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, AvoidanceUID_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.CharacterMovementComponent:AvoidanceGroup
    static readonly int AvoidanceGroup_Offset;
    
    public UnrealSharp.Engine.NavAvoidanceMask AvoidanceGroup
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.NavAvoidanceMaskMarshaler.FromNative(IntPtr.Add(NativeObject, AvoidanceGroup_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.CharacterMovementComponent:GroupsToAvoid
    static readonly int GroupsToAvoid_Offset;
    
    public UnrealSharp.Engine.NavAvoidanceMask GroupsToAvoid
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.NavAvoidanceMaskMarshaler.FromNative(IntPtr.Add(NativeObject, GroupsToAvoid_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.CharacterMovementComponent:GroupsToIgnore
    static readonly int GroupsToIgnore_Offset;
    
    public UnrealSharp.Engine.NavAvoidanceMask GroupsToIgnore
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.NavAvoidanceMaskMarshaler.FromNative(IntPtr.Add(NativeObject, GroupsToIgnore_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:AvoidanceWeight
    static readonly int AvoidanceWeight_Offset;
    
    public float AvoidanceWeight
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AvoidanceWeight_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:NavMeshProjectionInterval
    static readonly int NavMeshProjectionInterval_Offset;
    
    public float NavMeshProjectionInterval
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, NavMeshProjectionInterval_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, NavMeshProjectionInterval_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:NavMeshProjectionInterpSpeed
    static readonly int NavMeshProjectionInterpSpeed_Offset;
    
    public float NavMeshProjectionInterpSpeed
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, NavMeshProjectionInterpSpeed_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, NavMeshProjectionInterpSpeed_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:NavMeshProjectionHeightScaleUp
    static readonly int NavMeshProjectionHeightScaleUp_Offset;
    
    public float NavMeshProjectionHeightScaleUp
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, NavMeshProjectionHeightScaleUp_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, NavMeshProjectionHeightScaleUp_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:NavMeshProjectionHeightScaleDown
    static readonly int NavMeshProjectionHeightScaleDown_Offset;
    
    public float NavMeshProjectionHeightScaleDown
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, NavMeshProjectionHeightScaleDown_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, NavMeshProjectionHeightScaleDown_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.CharacterMovementComponent:NavWalkingFloorDistTolerance
    static readonly int NavWalkingFloorDistTolerance_Offset;
    
    public float NavWalkingFloorDistTolerance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, NavWalkingFloorDistTolerance_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, NavWalkingFloorDistTolerance_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:SetWalkableFloorZ
    static readonly IntPtr SetWalkableFloorZ_NativeFunction;
    static readonly int SetWalkableFloorZ_ParamsSize;
    static readonly int SetWalkableFloorZ_InWalkableFloorZ_Offset;
    
    public void SetWalkableFloorZ(float inWalkableFloorZ)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWalkableFloorZ_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetWalkableFloorZ_InWalkableFloorZ_Offset), 0, null, inWalkableFloorZ);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetWalkableFloorZ_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:SetWalkableFloorAngle
    static readonly IntPtr SetWalkableFloorAngle_NativeFunction;
    static readonly int SetWalkableFloorAngle_ParamsSize;
    static readonly int SetWalkableFloorAngle_InWalkableFloorAngle_Offset;
    
    public void SetWalkableFloorAngle(float inWalkableFloorAngle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWalkableFloorAngle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetWalkableFloorAngle_InWalkableFloorAngle_Offset), 0, null, inWalkableFloorAngle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetWalkableFloorAngle_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:SetMovementMode
    static readonly IntPtr SetMovementMode_NativeFunction;
    static readonly int SetMovementMode_ParamsSize;
    static readonly int SetMovementMode_NewMovementMode_Offset;
    static readonly int SetMovementMode_NewCustomMode_Offset;
    
    public void SetMovementMode(UnrealSharp.Engine.EMovementMode newMovementMode, byte newCustomMode = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMovementMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EMovementMode>.ToNative(IntPtr.Add(ParamsBuffer, SetMovementMode_NewMovementMode_Offset), 0, null, newMovementMode);
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, SetMovementMode_NewCustomMode_Offset), 0, null, newCustomMode);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMovementMode_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:SetGroupsToIgnoreMask
    static readonly IntPtr SetGroupsToIgnoreMask_NativeFunction;
    static readonly int SetGroupsToIgnoreMask_ParamsSize;
    static readonly int SetGroupsToIgnoreMask_GroupMask_Offset;
    
    public void SetGroupsToIgnoreMask(UnrealSharp.Engine.NavAvoidanceMask groupMask)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGroupsToIgnoreMask_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.NavAvoidanceMaskMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetGroupsToIgnoreMask_GroupMask_Offset), 0, null, groupMask);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetGroupsToIgnoreMask_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:SetGroupsToIgnore
    static readonly IntPtr SetGroupsToIgnore_NativeFunction;
    static readonly int SetGroupsToIgnore_ParamsSize;
    static readonly int SetGroupsToIgnore_GroupFlags_Offset;
    
    [Obsolete("Please use SetGroupsToIgnoreMask function instead.")]
    public void SetGroupsToIgnore(int groupFlags)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGroupsToIgnore_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetGroupsToIgnore_GroupFlags_Offset), 0, null, groupFlags);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetGroupsToIgnore_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:SetGroupsToAvoidMask
    static readonly IntPtr SetGroupsToAvoidMask_NativeFunction;
    static readonly int SetGroupsToAvoidMask_ParamsSize;
    static readonly int SetGroupsToAvoidMask_GroupMask_Offset;
    
    public void SetGroupsToAvoidMask(UnrealSharp.Engine.NavAvoidanceMask groupMask)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGroupsToAvoidMask_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.NavAvoidanceMaskMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetGroupsToAvoidMask_GroupMask_Offset), 0, null, groupMask);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetGroupsToAvoidMask_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:SetGroupsToAvoid
    static readonly IntPtr SetGroupsToAvoid_NativeFunction;
    static readonly int SetGroupsToAvoid_ParamsSize;
    static readonly int SetGroupsToAvoid_GroupFlags_Offset;
    
    [Obsolete("Please use SetGroupsToAvoidMask function instead.")]
    public void SetGroupsToAvoid(int groupFlags)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGroupsToAvoid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetGroupsToAvoid_GroupFlags_Offset), 0, null, groupFlags);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetGroupsToAvoid_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:SetAvoidanceGroupMask
    static readonly IntPtr SetAvoidanceGroupMask_NativeFunction;
    static readonly int SetAvoidanceGroupMask_ParamsSize;
    static readonly int SetAvoidanceGroupMask_GroupMask_Offset;
    
    public void SetAvoidanceGroupMask(UnrealSharp.Engine.NavAvoidanceMask groupMask)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAvoidanceGroupMask_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.NavAvoidanceMaskMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetAvoidanceGroupMask_GroupMask_Offset), 0, null, groupMask);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAvoidanceGroupMask_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:SetAvoidanceGroup
    static readonly IntPtr SetAvoidanceGroup_NativeFunction;
    static readonly int SetAvoidanceGroup_ParamsSize;
    static readonly int SetAvoidanceGroup_GroupFlags_Offset;
    
    [Obsolete("Please use SetAvoidanceGroupMask function instead.")]
    public void SetAvoidanceGroup(int groupFlags)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAvoidanceGroup_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetAvoidanceGroup_GroupFlags_Offset), 0, null, groupFlags);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAvoidanceGroup_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:SetAvoidanceEnabled
    static readonly IntPtr SetAvoidanceEnabled_NativeFunction;
    static readonly int SetAvoidanceEnabled_ParamsSize;
    static readonly int SetAvoidanceEnabled_bEnable_Offset;
    
    public void SetAvoidanceEnabled(bool bEnable)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAvoidanceEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAvoidanceEnabled_bEnable_Offset), 0, null, bEnable);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAvoidanceEnabled_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:K2_GetWalkableFloorZ
    static readonly IntPtr K2_GetWalkableFloorZ_NativeFunction;
    static readonly int K2_GetWalkableFloorZ_ParamsSize;
    static readonly int K2_GetWalkableFloorZ_ReturnValue_Offset;
    
    public float GetWalkableFloorZ()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_GetWalkableFloorZ_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_GetWalkableFloorZ_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, K2_GetWalkableFloorZ_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:K2_GetWalkableFloorAngle
    static readonly IntPtr K2_GetWalkableFloorAngle_NativeFunction;
    static readonly int K2_GetWalkableFloorAngle_ParamsSize;
    static readonly int K2_GetWalkableFloorAngle_ReturnValue_Offset;
    
    public float GetWalkableFloorAngle()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_GetWalkableFloorAngle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_GetWalkableFloorAngle_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, K2_GetWalkableFloorAngle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:K2_FindFloor
    static readonly IntPtr K2_FindFloor_NativeFunction;
    static readonly int K2_FindFloor_ParamsSize;
    static readonly int K2_FindFloor_CapsuleLocation_Offset;
    static readonly int K2_FindFloor_FloorResult_Offset;
    
    public void FindFloor(System.DoubleNumerics.Vector3 capsuleLocation, out UnrealSharp.Engine.FindFloorResult floorResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_FindFloor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_FindFloor_CapsuleLocation_Offset), 0, null, capsuleLocation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_FindFloor_NativeFunction, ParamsBuffer);
            
            floorResult = UnrealSharp.Engine.FindFloorResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_FindFloor_FloorResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:K2_ComputeFloorDist
    static readonly IntPtr K2_ComputeFloorDist_NativeFunction;
    static readonly int K2_ComputeFloorDist_ParamsSize;
    static readonly int K2_ComputeFloorDist_CapsuleLocation_Offset;
    static readonly int K2_ComputeFloorDist_LineDistance_Offset;
    static readonly int K2_ComputeFloorDist_SweepDistance_Offset;
    static readonly int K2_ComputeFloorDist_SweepRadius_Offset;
    static readonly int K2_ComputeFloorDist_FloorResult_Offset;
    
    public void ComputeFloorDistance(System.DoubleNumerics.Vector3 capsuleLocation, float lineDistance, float sweepDistance, float sweepRadius, out UnrealSharp.Engine.FindFloorResult floorResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_ComputeFloorDist_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_ComputeFloorDist_CapsuleLocation_Offset), 0, null, capsuleLocation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, K2_ComputeFloorDist_LineDistance_Offset), 0, null, lineDistance);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, K2_ComputeFloorDist_SweepDistance_Offset), 0, null, sweepDistance);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, K2_ComputeFloorDist_SweepRadius_Offset), 0, null, sweepRadius);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_ComputeFloorDist_NativeFunction, ParamsBuffer);
            
            floorResult = UnrealSharp.Engine.FindFloorResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_ComputeFloorDist_FloorResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:IsWalking
    static readonly IntPtr IsWalking_NativeFunction;
    static readonly int IsWalking_ParamsSize;
    static readonly int IsWalking_ReturnValue_Offset;
    
    public bool IsWalking()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsWalking_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsWalking_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsWalking_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:IsWalkable
    static readonly IntPtr IsWalkable_NativeFunction;
    static readonly int IsWalkable_ParamsSize;
    static readonly int IsWalkable_Hit_Offset;
    static readonly int IsWalkable_ReturnValue_Offset;
    
    public bool IsWalkable(UnrealSharp.Engine.HitResult hit)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsWalkable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.HitResultMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsWalkable_Hit_Offset), 0, null, hit);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsWalkable_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsWalkable_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:GetValidPerchRadius
    static readonly IntPtr GetValidPerchRadius_NativeFunction;
    static readonly int GetValidPerchRadius_ParamsSize;
    static readonly int GetValidPerchRadius_ReturnValue_Offset;
    
    public float GetValidPerchRadius()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValidPerchRadius_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetValidPerchRadius_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetValidPerchRadius_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:GetPerchRadiusThreshold
    static readonly IntPtr GetPerchRadiusThreshold_NativeFunction;
    static readonly int GetPerchRadiusThreshold_ParamsSize;
    static readonly int GetPerchRadiusThreshold_ReturnValue_Offset;
    
    public float GetPerchRadiusThreshold()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPerchRadiusThreshold_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPerchRadiusThreshold_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetPerchRadiusThreshold_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:GetMovementBase
    static readonly IntPtr GetMovementBase_NativeFunction;
    static readonly int GetMovementBase_ParamsSize;
    static readonly int GetMovementBase_ReturnValue_Offset;
    
    public UnrealSharp.Engine.PrimitiveComponent GetMovementBase()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMovementBase_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMovementBase_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PrimitiveComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.FromNative(IntPtr.Add(ParamsBuffer, GetMovementBase_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:GetMinAnalogSpeed
    static readonly IntPtr GetMinAnalogSpeed_NativeFunction;
    static readonly int GetMinAnalogSpeed_ParamsSize;
    static readonly int GetMinAnalogSpeed_ReturnValue_Offset;
    
    public float GetMinAnalogSpeed()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMinAnalogSpeed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMinAnalogSpeed_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetMinAnalogSpeed_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:GetMaxJumpHeightWithJumpTime
    static readonly IntPtr GetMaxJumpHeightWithJumpTime_NativeFunction;
    static readonly int GetMaxJumpHeightWithJumpTime_ParamsSize;
    static readonly int GetMaxJumpHeightWithJumpTime_ReturnValue_Offset;
    
    public float GetMaxJumpHeightWithJumpTime()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaxJumpHeightWithJumpTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMaxJumpHeightWithJumpTime_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetMaxJumpHeightWithJumpTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:GetMaxJumpHeight
    static readonly IntPtr GetMaxJumpHeight_NativeFunction;
    static readonly int GetMaxJumpHeight_ParamsSize;
    static readonly int GetMaxJumpHeight_ReturnValue_Offset;
    
    public float GetMaxJumpHeight()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaxJumpHeight_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMaxJumpHeight_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetMaxJumpHeight_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:GetMaxBrakingDeceleration
    static readonly IntPtr GetMaxBrakingDeceleration_NativeFunction;
    static readonly int GetMaxBrakingDeceleration_ParamsSize;
    static readonly int GetMaxBrakingDeceleration_ReturnValue_Offset;
    
    public float GetMaxBrakingDeceleration()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaxBrakingDeceleration_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMaxBrakingDeceleration_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetMaxBrakingDeceleration_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:GetMaxAcceleration
    static readonly IntPtr GetMaxAcceleration_NativeFunction;
    static readonly int GetMaxAcceleration_ParamsSize;
    static readonly int GetMaxAcceleration_ReturnValue_Offset;
    
    public float GetMaxAcceleration()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaxAcceleration_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMaxAcceleration_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetMaxAcceleration_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:GetLastUpdateVelocity
    static readonly IntPtr GetLastUpdateVelocity_NativeFunction;
    static readonly int GetLastUpdateVelocity_ParamsSize;
    static readonly int GetLastUpdateVelocity_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetLastUpdateVelocity()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLastUpdateVelocity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLastUpdateVelocity_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLastUpdateVelocity_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:GetLastUpdateRotation
    static readonly IntPtr GetLastUpdateRotation_NativeFunction;
    static readonly int GetLastUpdateRotation_ParamsSize;
    static readonly int GetLastUpdateRotation_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetLastUpdateRotation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLastUpdateRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLastUpdateRotation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetLastUpdateRotation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:GetLastUpdateRequestedVelocity
    static readonly IntPtr GetLastUpdateRequestedVelocity_NativeFunction;
    static readonly int GetLastUpdateRequestedVelocity_ParamsSize;
    static readonly int GetLastUpdateRequestedVelocity_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetLastUpdateRequestedVelocity()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLastUpdateRequestedVelocity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLastUpdateRequestedVelocity_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLastUpdateRequestedVelocity_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:GetLastUpdateLocation
    static readonly IntPtr GetLastUpdateLocation_NativeFunction;
    static readonly int GetLastUpdateLocation_ParamsSize;
    static readonly int GetLastUpdateLocation_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetLastUpdateLocation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLastUpdateLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLastUpdateLocation_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLastUpdateLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:GetImpartedMovementBaseVelocity
    static readonly IntPtr GetImpartedMovementBaseVelocity_NativeFunction;
    static readonly int GetImpartedMovementBaseVelocity_ParamsSize;
    static readonly int GetImpartedMovementBaseVelocity_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetImpartedMovementBaseVelocity()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetImpartedMovementBaseVelocity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetImpartedMovementBaseVelocity_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetImpartedMovementBaseVelocity_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:GetCurrentAcceleration
    static readonly IntPtr GetCurrentAcceleration_NativeFunction;
    static readonly int GetCurrentAcceleration_ParamsSize;
    static readonly int GetCurrentAcceleration_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetCurrentAcceleration()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentAcceleration_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurrentAcceleration_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentAcceleration_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:GetCharacterOwner
    static readonly IntPtr GetCharacterOwner_NativeFunction;
    static readonly int GetCharacterOwner_ParamsSize;
    static readonly int GetCharacterOwner_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Character GetCharacterOwner()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCharacterOwner_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCharacterOwner_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Character returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Character>.FromNative(IntPtr.Add(ParamsBuffer, GetCharacterOwner_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:GetAnalogInputModifier
    static readonly IntPtr GetAnalogInputModifier_NativeFunction;
    static readonly int GetAnalogInputModifier_ParamsSize;
    static readonly int GetAnalogInputModifier_ReturnValue_Offset;
    
    public float GetAnalogInputModifier()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnalogInputModifier_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAnalogInputModifier_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetAnalogInputModifier_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:DisableMovement
    static readonly IntPtr DisableMovement_NativeFunction;
    
    public void DisableMovement()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DisableMovement_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:ClearAccumulatedForces
    static readonly IntPtr ClearAccumulatedForces_NativeFunction;
    
    public void ClearAccumulatedForces()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearAccumulatedForces_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:CalcVelocity
    static readonly IntPtr CalcVelocity_NativeFunction;
    static readonly int CalcVelocity_ParamsSize;
    static readonly int CalcVelocity_DeltaTime_Offset;
    static readonly int CalcVelocity_Friction_Offset;
    static readonly int CalcVelocity_bFluid_Offset;
    static readonly int CalcVelocity_BrakingDeceleration_Offset;
    
    public void CalcVelocity(float deltaTime, float friction, bool bFluid, float brakingDeceleration)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CalcVelocity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CalcVelocity_DeltaTime_Offset), 0, null, deltaTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CalcVelocity_Friction_Offset), 0, null, friction);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CalcVelocity_bFluid_Offset), 0, null, bFluid);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CalcVelocity_BrakingDeceleration_Offset), 0, null, brakingDeceleration);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CalcVelocity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:AddImpulse
    static readonly IntPtr AddImpulse_NativeFunction;
    static readonly int AddImpulse_ParamsSize;
    static readonly int AddImpulse_Impulse_Offset;
    static readonly int AddImpulse_bVelocityChange_Offset;
    
    public void AddImpulse(System.DoubleNumerics.Vector3 impulse, bool bVelocityChange = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddImpulse_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddImpulse_Impulse_Offset), 0, null, impulse);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddImpulse_bVelocityChange_Offset), 0, null, bVelocityChange);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddImpulse_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.CharacterMovementComponent:AddForce
    static readonly IntPtr AddForce_NativeFunction;
    static readonly int AddForce_ParamsSize;
    static readonly int AddForce_Force_Offset;
    
    public void AddForce(System.DoubleNumerics.Vector3 force)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddForce_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddForce_Force_Offset), 0, null, force);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddForce_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
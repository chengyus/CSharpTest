// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class CheatManager : UnrealSharp.CoreUObject.Object
{
    
    static CheatManager()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("CheatManager");
        
        DebugCameraControllerClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DebugCameraControllerClass");
        
        Walk_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Walk");
        Teleport_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Teleport");
        Slomo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Slomo");
        Slomo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Slomo_NativeFunction);
        Slomo_NewTimeDilation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Slomo_NativeFunction, "NewTimeDilation");
        PlayersOnly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlayersOnly");
        God_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "God");
        Ghost_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Ghost");
        GetPlayerController_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayerController");
        GetPlayerController_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayerController_NativeFunction);
        GetPlayerController_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerController_NativeFunction, "ReturnValue");
        FreezeFrame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FreezeFrame");
        FreezeFrame_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FreezeFrame_NativeFunction);
        FreezeFrame_Delay_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FreezeFrame_NativeFunction, "Delay");
        Fly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Fly");
        EnableDebugCamera_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EnableDebugCamera");
        DisableDebugCamera_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DisableDebugCamera");
        DestroyTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DestroyTarget");
        DamageTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DamageTarget");
        DamageTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DamageTarget_NativeFunction);
        DamageTarget_DamageAmount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DamageTarget_NativeFunction, "DamageAmount");
        ChangeSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ChangeSize");
        ChangeSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ChangeSize_NativeFunction);
        ChangeSize_F_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ChangeSize_NativeFunction, "F");
        
        
    }
    
    protected CheatManager(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ClassProperty /Script/Engine.CheatManager:DebugCameraControllerClass
    static readonly int DebugCameraControllerClass_Offset;
    
    public SubclassOf<UnrealSharp.Engine.DebugCameraController> DebugCameraControllerClass
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.Engine.DebugCameraController>.FromNative(IntPtr.Add(NativeObject, DebugCameraControllerClass_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.CheatManager:Walk
    static readonly IntPtr Walk_NativeFunction;
    
    public void Walk()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Walk_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.CheatManager:Teleport
    static readonly IntPtr Teleport_NativeFunction;
    
    public void Teleport()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Teleport_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.CheatManager:Slomo
    static readonly IntPtr Slomo_NativeFunction;
    static readonly int Slomo_ParamsSize;
    static readonly int Slomo_NewTimeDilation_Offset;
    
    public void Slomo(float newTimeDilation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Slomo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Slomo_NewTimeDilation_Offset), 0, null, newTimeDilation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Slomo_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.CheatManager:PlayersOnly
    static readonly IntPtr PlayersOnly_NativeFunction;
    
    public void PlayersOnly()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PlayersOnly_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.CheatManager:God
    static readonly IntPtr God_NativeFunction;
    
    public void God()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, God_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.CheatManager:Ghost
    static readonly IntPtr Ghost_NativeFunction;
    
    public void Ghost()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Ghost_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.CheatManager:GetPlayerController
    static readonly IntPtr GetPlayerController_NativeFunction;
    static readonly int GetPlayerController_ParamsSize;
    static readonly int GetPlayerController_ReturnValue_Offset;
    
    public UnrealSharp.Engine.PlayerController GetPlayerController()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayerController_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPlayerController_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PlayerController returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(ParamsBuffer, GetPlayerController_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CheatManager:FreezeFrame
    static readonly IntPtr FreezeFrame_NativeFunction;
    static readonly int FreezeFrame_ParamsSize;
    static readonly int FreezeFrame_Delay_Offset;
    
    public void FreezeFrame(float delay)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FreezeFrame_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FreezeFrame_Delay_Offset), 0, null, delay);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FreezeFrame_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.CheatManager:Fly
    static readonly IntPtr Fly_NativeFunction;
    
    public void Fly()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Fly_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.CheatManager:EnableDebugCamera
    static readonly IntPtr EnableDebugCamera_NativeFunction;
    
    protected void EnableDebugCamera()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, EnableDebugCamera_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.CheatManager:DisableDebugCamera
    static readonly IntPtr DisableDebugCamera_NativeFunction;
    
    protected void DisableDebugCamera()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DisableDebugCamera_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.CheatManager:DestroyTarget
    static readonly IntPtr DestroyTarget_NativeFunction;
    
    public void DestroyTarget()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DestroyTarget_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.CheatManager:DamageTarget
    static readonly IntPtr DamageTarget_NativeFunction;
    static readonly int DamageTarget_ParamsSize;
    static readonly int DamageTarget_DamageAmount_Offset;
    
    public void DamageTarget(float damageAmount)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DamageTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DamageTarget_DamageAmount_Offset), 0, null, damageAmount);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DamageTarget_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.CheatManager:ChangeSize
    static readonly IntPtr ChangeSize_NativeFunction;
    static readonly int ChangeSize_ParamsSize;
    static readonly int ChangeSize_F_Offset;
    
    public void ChangeSize(float f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ChangeSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ChangeSize_F_Offset), 0, null, f);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ChangeSize_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.CheatManager:ReceiveInitCheatManager
    IntPtr ReceiveInitCheatManager_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveInitCheatManager()
    {
        unsafe
        {
            if (ReceiveInitCheatManager_NativeFunction == IntPtr.Zero)
            {
                ReceiveInitCheatManager_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveInitCheatManager");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveInitCheatManager_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveInitCheatManager_Implementation()
    {
    }
    void Invoke_ReceiveInitCheatManager(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            ReceiveInitCheatManager_Implementation();
        }
    }
    
    // Function /Script/Engine.CheatManager:ReceiveEndPlay
    IntPtr ReceiveEndPlay_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveEndPlay()
    {
        unsafe
        {
            if (ReceiveEndPlay_NativeFunction == IntPtr.Zero)
            {
                ReceiveEndPlay_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveEndPlay");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveEndPlay_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveEndPlay_Implementation()
    {
    }
    void Invoke_ReceiveEndPlay(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            ReceiveEndPlay_Implementation();
        }
    }
    
    
}
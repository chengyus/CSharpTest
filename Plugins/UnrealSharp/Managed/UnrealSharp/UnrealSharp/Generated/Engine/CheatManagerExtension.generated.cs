// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class CheatManagerExtension : UnrealSharp.CoreUObject.Object
{
    
    static CheatManagerExtension()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("CheatManagerExtension");
        
        
        GetPlayerController_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayerController");
        GetPlayerController_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayerController_NativeFunction);
        GetPlayerController_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerController_NativeFunction, "ReturnValue");
        
        
    }
    
    protected CheatManagerExtension(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.CheatManagerExtension:GetPlayerController
    static readonly IntPtr GetPlayerController_NativeFunction;
    static readonly int GetPlayerController_ParamsSize;
    static readonly int GetPlayerController_ReturnValue_Offset;
    
    public UnrealSharp.Engine.PlayerController GetPlayerController()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayerController_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPlayerController_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PlayerController returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(ParamsBuffer, GetPlayerController_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.CheatManagerExtension:RemovedFromCheatManager
    IntPtr RemovedFromCheatManager_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void RemovedFromCheatManager()
    {
        unsafe
        {
            if (RemovedFromCheatManager_NativeFunction == IntPtr.Zero)
            {
                RemovedFromCheatManager_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "RemovedFromCheatManager");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemovedFromCheatManager_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void RemovedFromCheatManager_Implementation()
    {
    }
    void Invoke_RemovedFromCheatManager(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            RemovedFromCheatManager_Implementation();
        }
    }
    
    // Function /Script/Engine.CheatManagerExtension:AddedToCheatManager
    IntPtr AddedToCheatManager_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void AddedToCheatManager()
    {
        unsafe
        {
            if (AddedToCheatManager_NativeFunction == IntPtr.Zero)
            {
                AddedToCheatManager_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "AddedToCheatManager");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddedToCheatManager_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void AddedToCheatManager_Implementation()
    {
    }
    void Invoke_AddedToCheatManager(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            AddedToCheatManager_Implementation();
        }
    }
    
    
}
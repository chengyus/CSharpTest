// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
abstract public partial class Controller : UnrealSharp.Engine.Actor
{
    
    static Controller()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("Controller");
        
        PlayerState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PlayerState");
        
        UnPossess_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UnPossess");
        StopMovement_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopMovement");
        SetInitialLocationAndRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetInitialLocationAndRotation");
        SetInitialLocationAndRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetInitialLocationAndRotation_NativeFunction);
        SetInitialLocationAndRotation_NewLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInitialLocationAndRotation_NativeFunction, "NewLocation");
        SetInitialLocationAndRotation_NewRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInitialLocationAndRotation_NativeFunction, "NewRotation");
        SetIgnoreMoveInput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIgnoreMoveInput");
        SetIgnoreMoveInput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIgnoreMoveInput_NativeFunction);
        SetIgnoreMoveInput_bNewMoveInput_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIgnoreMoveInput_NativeFunction, "bNewMoveInput");
        SetIgnoreLookInput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIgnoreLookInput");
        SetIgnoreLookInput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIgnoreLookInput_NativeFunction);
        SetIgnoreLookInput_bNewLookInput_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIgnoreLookInput_NativeFunction, "bNewLookInput");
        SetControlRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControlRotation");
        SetControlRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControlRotation_NativeFunction);
        SetControlRotation_NewRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControlRotation_NativeFunction, "NewRotation");
        ResetIgnoreMoveInput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetIgnoreMoveInput");
        ResetIgnoreLookInput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetIgnoreLookInput");
        ResetIgnoreInputFlags_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetIgnoreInputFlags");
        Possess_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Possess");
        Possess_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Possess_NativeFunction);
        Possess_InPawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Possess_NativeFunction, "InPawn");
        LineOfSightTo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LineOfSightTo");
        LineOfSightTo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LineOfSightTo_NativeFunction);
        LineOfSightTo_Other_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineOfSightTo_NativeFunction, "Other");
        LineOfSightTo_ViewPoint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineOfSightTo_NativeFunction, "ViewPoint");
        LineOfSightTo_bAlternateChecks_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineOfSightTo_NativeFunction, "bAlternateChecks");
        LineOfSightTo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineOfSightTo_NativeFunction, "ReturnValue");
        K2_GetPawn_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_GetPawn");
        K2_GetPawn_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_GetPawn_NativeFunction);
        K2_GetPawn_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetPawn_NativeFunction, "ReturnValue");
        IsPlayerController_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPlayerController");
        IsPlayerController_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPlayerController_NativeFunction);
        IsPlayerController_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPlayerController_NativeFunction, "ReturnValue");
        IsMoveInputIgnored_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsMoveInputIgnored");
        IsMoveInputIgnored_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsMoveInputIgnored_NativeFunction);
        IsMoveInputIgnored_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsMoveInputIgnored_NativeFunction, "ReturnValue");
        IsLookInputIgnored_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsLookInputIgnored");
        IsLookInputIgnored_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsLookInputIgnored_NativeFunction);
        IsLookInputIgnored_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLookInputIgnored_NativeFunction, "ReturnValue");
        IsLocalPlayerController_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsLocalPlayerController");
        IsLocalPlayerController_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsLocalPlayerController_NativeFunction);
        IsLocalPlayerController_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLocalPlayerController_NativeFunction, "ReturnValue");
        IsLocalController_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsLocalController");
        IsLocalController_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsLocalController_NativeFunction);
        IsLocalController_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLocalController_NativeFunction, "ReturnValue");
        GetViewTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetViewTarget");
        GetViewTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetViewTarget_NativeFunction);
        GetViewTarget_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetViewTarget_NativeFunction, "ReturnValue");
        GetPlayerViewPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayerViewPoint");
        GetPlayerViewPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayerViewPoint_NativeFunction);
        GetPlayerViewPoint_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerViewPoint_NativeFunction, "Location");
        GetPlayerViewPoint_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerViewPoint_NativeFunction, "Rotation");
        GetDesiredRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDesiredRotation");
        GetDesiredRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDesiredRotation_NativeFunction);
        GetDesiredRotation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDesiredRotation_NativeFunction, "ReturnValue");
        GetControlRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlRotation");
        GetControlRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlRotation_NativeFunction);
        GetControlRotation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlRotation_NativeFunction, "ReturnValue");
        
        IntPtr ReceiveUnPossess_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveUnPossess");
        ReceiveUnPossess_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveUnPossess_NativeFunction);
        ReceiveUnPossess_UnpossessedPawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveUnPossess_NativeFunction, "UnpossessedPawn");
        
        IntPtr ReceivePossess_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceivePossess");
        ReceivePossess_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceivePossess_NativeFunction);
        ReceivePossess_PossessedPawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceivePossess_NativeFunction, "PossessedPawn");
        
        IntPtr ReceiveInstigatedAnyDamage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveInstigatedAnyDamage");
        ReceiveInstigatedAnyDamage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveInstigatedAnyDamage_NativeFunction);
        ReceiveInstigatedAnyDamage_Damage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveInstigatedAnyDamage_NativeFunction, "Damage");
        ReceiveInstigatedAnyDamage_DamageType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveInstigatedAnyDamage_NativeFunction, "DamageType");
        ReceiveInstigatedAnyDamage_DamagedActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveInstigatedAnyDamage_NativeFunction, "DamagedActor");
        ReceiveInstigatedAnyDamage_DamageCauser_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveInstigatedAnyDamage_NativeFunction, "DamageCauser");
        
        
    }
    
    protected Controller(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Engine.Controller:PlayerState
    static readonly int PlayerState_Offset;
    
    public UnrealSharp.Engine.PlayerState PlayerState
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.PlayerState>.FromNative(IntPtr.Add(NativeObject, PlayerState_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.Controller:UnPossess
    static readonly IntPtr UnPossess_NativeFunction;
    
    public void UnPossess()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UnPossess_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.Controller:StopMovement
    static readonly IntPtr StopMovement_NativeFunction;
    
    public void StopMovement()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopMovement_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.Controller:SetInitialLocationAndRotation
    static readonly IntPtr SetInitialLocationAndRotation_NativeFunction;
    static readonly int SetInitialLocationAndRotation_ParamsSize;
    static readonly int SetInitialLocationAndRotation_NewLocation_Offset;
    static readonly int SetInitialLocationAndRotation_NewRotation_Offset;
    
    public void SetInitialLocationAndRotation(System.DoubleNumerics.Vector3 newLocation, UnrealSharp.Rotator newRotation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetInitialLocationAndRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetInitialLocationAndRotation_NewLocation_Offset), 0, null, newLocation);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SetInitialLocationAndRotation_NewRotation_Offset), 0, null, newRotation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetInitialLocationAndRotation_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.Controller:SetIgnoreMoveInput
    static readonly IntPtr SetIgnoreMoveInput_NativeFunction;
    static readonly int SetIgnoreMoveInput_ParamsSize;
    static readonly int SetIgnoreMoveInput_bNewMoveInput_Offset;
    
    public void SetIgnoreMoveInput(bool bNewMoveInput)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIgnoreMoveInput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetIgnoreMoveInput_bNewMoveInput_Offset), 0, null, bNewMoveInput);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIgnoreMoveInput_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Controller:SetIgnoreLookInput
    static readonly IntPtr SetIgnoreLookInput_NativeFunction;
    static readonly int SetIgnoreLookInput_ParamsSize;
    static readonly int SetIgnoreLookInput_bNewLookInput_Offset;
    
    public void SetIgnoreLookInput(bool bNewLookInput)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIgnoreLookInput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetIgnoreLookInput_bNewLookInput_Offset), 0, null, bNewLookInput);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIgnoreLookInput_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Controller:SetControlRotation
    static readonly IntPtr SetControlRotation_NativeFunction;
    static readonly int SetControlRotation_ParamsSize;
    static readonly int SetControlRotation_NewRotation_Offset;
    
    public void SetControlRotation(UnrealSharp.Rotator newRotation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControlRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SetControlRotation_NewRotation_Offset), 0, null, newRotation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControlRotation_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.Controller:ResetIgnoreMoveInput
    static readonly IntPtr ResetIgnoreMoveInput_NativeFunction;
    
    public void ResetIgnoreMoveInput()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetIgnoreMoveInput_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.Controller:ResetIgnoreLookInput
    static readonly IntPtr ResetIgnoreLookInput_NativeFunction;
    
    public void ResetIgnoreLookInput()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetIgnoreLookInput_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.Controller:ResetIgnoreInputFlags
    static readonly IntPtr ResetIgnoreInputFlags_NativeFunction;
    
    public void ResetIgnoreInputFlags()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetIgnoreInputFlags_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.Controller:Possess
    static readonly IntPtr Possess_NativeFunction;
    static readonly int Possess_ParamsSize;
    static readonly int Possess_InPawn_Offset;
    
    public void Possess(UnrealSharp.Engine.Pawn inPawn)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Possess_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(ParamsBuffer, Possess_InPawn_Offset), 0, null, inPawn);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Possess_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Controller:LineOfSightTo
    static readonly IntPtr LineOfSightTo_NativeFunction;
    static readonly int LineOfSightTo_ParamsSize;
    static readonly int LineOfSightTo_Other_Offset;
    static readonly int LineOfSightTo_ViewPoint_Offset;
    static readonly int LineOfSightTo_bAlternateChecks_Offset;
    static readonly int LineOfSightTo_ReturnValue_Offset;
    
    public bool LineOfSightTo(UnrealSharp.Engine.Actor other, System.DoubleNumerics.Vector3 viewPoint, bool bAlternateChecks = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LineOfSightTo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, LineOfSightTo_Other_Offset), 0, null, other);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LineOfSightTo_ViewPoint_Offset), 0, null, viewPoint);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LineOfSightTo_bAlternateChecks_Offset), 0, null, bAlternateChecks);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, LineOfSightTo_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LineOfSightTo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Controller:K2_GetPawn
    static readonly IntPtr K2_GetPawn_NativeFunction;
    static readonly int K2_GetPawn_ParamsSize;
    static readonly int K2_GetPawn_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Pawn GetControlledPawn()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_GetPawn_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_GetPawn_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Pawn returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(ParamsBuffer, K2_GetPawn_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Controller:IsPlayerController
    static readonly IntPtr IsPlayerController_NativeFunction;
    static readonly int IsPlayerController_ParamsSize;
    static readonly int IsPlayerController_ReturnValue_Offset;
    
    public bool IsPlayerController()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPlayerController_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsPlayerController_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPlayerController_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Controller:IsMoveInputIgnored
    static readonly IntPtr IsMoveInputIgnored_NativeFunction;
    static readonly int IsMoveInputIgnored_ParamsSize;
    static readonly int IsMoveInputIgnored_ReturnValue_Offset;
    
    public bool IsMoveInputIgnored()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsMoveInputIgnored_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsMoveInputIgnored_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsMoveInputIgnored_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Controller:IsLookInputIgnored
    static readonly IntPtr IsLookInputIgnored_NativeFunction;
    static readonly int IsLookInputIgnored_ParamsSize;
    static readonly int IsLookInputIgnored_ReturnValue_Offset;
    
    public bool IsLookInputIgnored()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsLookInputIgnored_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsLookInputIgnored_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsLookInputIgnored_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Controller:IsLocalPlayerController
    static readonly IntPtr IsLocalPlayerController_NativeFunction;
    static readonly int IsLocalPlayerController_ParamsSize;
    static readonly int IsLocalPlayerController_ReturnValue_Offset;
    
    public bool IsLocalPlayerController()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsLocalPlayerController_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsLocalPlayerController_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsLocalPlayerController_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Controller:IsLocalController
    static readonly IntPtr IsLocalController_NativeFunction;
    static readonly int IsLocalController_ParamsSize;
    static readonly int IsLocalController_ReturnValue_Offset;
    
    public bool IsLocalController()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsLocalController_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsLocalController_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsLocalController_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Controller:GetViewTarget
    static readonly IntPtr GetViewTarget_NativeFunction;
    static readonly int GetViewTarget_ParamsSize;
    static readonly int GetViewTarget_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Actor GetViewTarget()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetViewTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetViewTarget_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Actor returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(ParamsBuffer, GetViewTarget_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Controller:GetPlayerViewPoint
    static readonly IntPtr GetPlayerViewPoint_NativeFunction;
    static readonly int GetPlayerViewPoint_ParamsSize;
    static readonly int GetPlayerViewPoint_Location_Offset;
    static readonly int GetPlayerViewPoint_Rotation_Offset;
    
    public void GetPlayerViewPoint(out System.DoubleNumerics.Vector3 location, out UnrealSharp.Rotator rotation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayerViewPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPlayerViewPoint_NativeFunction, ParamsBuffer);
            
            location = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetPlayerViewPoint_Location_Offset), 0, null);
            rotation = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetPlayerViewPoint_Rotation_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.Controller:GetDesiredRotation
    static readonly IntPtr GetDesiredRotation_NativeFunction;
    static readonly int GetDesiredRotation_ParamsSize;
    static readonly int GetDesiredRotation_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetDesiredRotation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDesiredRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDesiredRotation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetDesiredRotation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Controller:GetControlRotation
    static readonly IntPtr GetControlRotation_NativeFunction;
    static readonly int GetControlRotation_ParamsSize;
    static readonly int GetControlRotation_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetControlRotation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlRotation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetControlRotation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Controller:ReceiveUnPossess
    IntPtr ReceiveUnPossess_NativeFunction;
    static readonly int ReceiveUnPossess_ParamsSize;
    static readonly int ReceiveUnPossess_UnpossessedPawn_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void ReceiveUnPossess(UnrealSharp.Engine.Pawn unpossessedPawn)
    {
        unsafe
        {
            if (ReceiveUnPossess_NativeFunction == IntPtr.Zero)
            {
                ReceiveUnPossess_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveUnPossess");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveUnPossess_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveUnPossess_UnpossessedPawn_Offset), 0, null, unpossessedPawn);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveUnPossess_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveUnPossess_Implementation(UnrealSharp.Engine.Pawn unpossessedPawn)
    {
    }
    void Invoke_ReceiveUnPossess(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Pawn unpossessedPawn = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(buffer, ReceiveUnPossess_UnpossessedPawn_Offset), 0, null);
            ReceiveUnPossess_Implementation(unpossessedPawn);
        }
    }
    
    // Function /Script/Engine.Controller:ReceivePossess
    IntPtr ReceivePossess_NativeFunction;
    static readonly int ReceivePossess_ParamsSize;
    static readonly int ReceivePossess_PossessedPawn_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void ReceivePossess(UnrealSharp.Engine.Pawn possessedPawn)
    {
        unsafe
        {
            if (ReceivePossess_NativeFunction == IntPtr.Zero)
            {
                ReceivePossess_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceivePossess");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceivePossess_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(ParamsBuffer, ReceivePossess_PossessedPawn_Offset), 0, null, possessedPawn);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceivePossess_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceivePossess_Implementation(UnrealSharp.Engine.Pawn possessedPawn)
    {
    }
    void Invoke_ReceivePossess(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Pawn possessedPawn = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(buffer, ReceivePossess_PossessedPawn_Offset), 0, null);
            ReceivePossess_Implementation(possessedPawn);
        }
    }
    
    // Function /Script/Engine.Controller:ReceiveInstigatedAnyDamage
    IntPtr ReceiveInstigatedAnyDamage_NativeFunction;
    static readonly int ReceiveInstigatedAnyDamage_ParamsSize;
    static readonly int ReceiveInstigatedAnyDamage_Damage_Offset;
    static readonly int ReceiveInstigatedAnyDamage_DamageType_Offset;
    static readonly int ReceiveInstigatedAnyDamage_DamagedActor_Offset;
    static readonly int ReceiveInstigatedAnyDamage_DamageCauser_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void ReceiveInstigatedAnyDamage(float damage, UnrealSharp.Engine.DamageType damageType, UnrealSharp.Engine.Actor damagedActor, UnrealSharp.Engine.Actor damageCauser)
    {
        unsafe
        {
            if (ReceiveInstigatedAnyDamage_NativeFunction == IntPtr.Zero)
            {
                ReceiveInstigatedAnyDamage_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveInstigatedAnyDamage");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveInstigatedAnyDamage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveInstigatedAnyDamage_Damage_Offset), 0, null, damage);
            ObjectMarshaller<UnrealSharp.Engine.DamageType>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveInstigatedAnyDamage_DamageType_Offset), 0, null, damageType);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveInstigatedAnyDamage_DamagedActor_Offset), 0, null, damagedActor);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveInstigatedAnyDamage_DamageCauser_Offset), 0, null, damageCauser);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveInstigatedAnyDamage_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveInstigatedAnyDamage_Implementation(float damage, UnrealSharp.Engine.DamageType damageType, UnrealSharp.Engine.Actor damagedActor, UnrealSharp.Engine.Actor damageCauser)
    {
    }
    void Invoke_ReceiveInstigatedAnyDamage(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            float damage = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, ReceiveInstigatedAnyDamage_Damage_Offset), 0, null);
            UnrealSharp.Engine.DamageType damageType = ObjectMarshaller<UnrealSharp.Engine.DamageType>.FromNative(IntPtr.Add(buffer, ReceiveInstigatedAnyDamage_DamageType_Offset), 0, null);
            UnrealSharp.Engine.Actor damagedActor = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, ReceiveInstigatedAnyDamage_DamagedActor_Offset), 0, null);
            UnrealSharp.Engine.Actor damageCauser = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, ReceiveInstigatedAnyDamage_DamageCauser_Offset), 0, null);
            ReceiveInstigatedAnyDamage_Implementation(damage, damageType, damagedActor, damageCauser);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
abstract public partial class CurveBase : UnrealSharp.CoreUObject.Object
{
    
    static CurveBase()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("CurveBase");
        
        
        GetValueRange_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetValueRange");
        GetValueRange_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetValueRange_NativeFunction);
        GetValueRange_MinValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueRange_NativeFunction, "MinValue");
        GetValueRange_MaxValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetValueRange_NativeFunction, "MaxValue");
        GetTimeRange_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTimeRange");
        GetTimeRange_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTimeRange_NativeFunction);
        GetTimeRange_MinTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTimeRange_NativeFunction, "MinTime");
        GetTimeRange_MaxTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTimeRange_NativeFunction, "MaxTime");
        
        
    }
    
    protected CurveBase(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.CurveBase:GetValueRange
    static readonly IntPtr GetValueRange_NativeFunction;
    static readonly int GetValueRange_ParamsSize;
    static readonly int GetValueRange_MinValue_Offset;
    static readonly int GetValueRange_MaxValue_Offset;
    
    public void GetValueRange(out float minValue, out float maxValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetValueRange_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetValueRange_NativeFunction, ParamsBuffer);
            
            minValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetValueRange_MinValue_Offset), 0, null);
            maxValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetValueRange_MaxValue_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.CurveBase:GetTimeRange
    static readonly IntPtr GetTimeRange_NativeFunction;
    static readonly int GetTimeRange_ParamsSize;
    static readonly int GetTimeRange_MinTime_Offset;
    static readonly int GetTimeRange_MaxTime_Offset;
    
    public void GetTimeRange(out float minTime, out float maxTime)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTimeRange_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTimeRange_NativeFunction, ParamsBuffer);
            
            minTime = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetTimeRange_MinTime_Offset), 0, null);
            maxTime = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetTimeRange_MaxTime_Offset), 0, null);
            
        }
    }
    
    
}
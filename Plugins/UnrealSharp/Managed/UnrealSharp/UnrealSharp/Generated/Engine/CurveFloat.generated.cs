// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class CurveFloat : UnrealSharp.Engine.CurveBase
{
    
    static CurveFloat()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("CurveFloat");
        
        
        GetFloatValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFloatValue");
        GetFloatValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFloatValue_NativeFunction);
        GetFloatValue_InTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatValue_NativeFunction, "InTime");
        GetFloatValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatValue_NativeFunction, "ReturnValue");
        
        
    }
    
    protected CurveFloat(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.CurveFloat:GetFloatValue
    static readonly IntPtr GetFloatValue_NativeFunction;
    static readonly int GetFloatValue_ParamsSize;
    static readonly int GetFloatValue_InTime_Offset;
    static readonly int GetFloatValue_ReturnValue_Offset;
    
    public float GetFloatValue(float inTime)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFloatValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetFloatValue_InTime_Offset), 0, null, inTime);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFloatValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetFloatValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class CurveLinearColorAtlas : UnrealSharp.Engine.Texture2D
{
    
    static CurveLinearColorAtlas()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("CurveLinearColorAtlas");
        
        
        GetCurvePosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurvePosition");
        GetCurvePosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurvePosition_NativeFunction);
        GetCurvePosition_InCurve_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurvePosition_NativeFunction, "InCurve");
        GetCurvePosition_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurvePosition_NativeFunction, "Position");
        GetCurvePosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurvePosition_NativeFunction, "ReturnValue");
        
        
    }
    
    protected CurveLinearColorAtlas(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.CurveLinearColorAtlas:GetCurvePosition
    static readonly IntPtr GetCurvePosition_NativeFunction;
    static readonly int GetCurvePosition_ParamsSize;
    static readonly int GetCurvePosition_InCurve_Offset;
    static readonly int GetCurvePosition_Position_Offset;
    static readonly int GetCurvePosition_ReturnValue_Offset;
    
    public bool GetCurvePosition(UnrealSharp.Engine.CurveLinearColor inCurve, out float position)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurvePosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.CurveLinearColor>.ToNative(IntPtr.Add(ParamsBuffer, GetCurvePosition_InCurve_Offset), 0, null, inCurve);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurvePosition_NativeFunction, ParamsBuffer);
            
            position = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCurvePosition_Position_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCurvePosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
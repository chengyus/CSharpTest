// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class DataTableFunctionLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static DataTableFunctionLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("DataTableFunctionLibrary");
        
        
        GetDataTableRowNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDataTableRowNames");
        GetDataTableRowNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDataTableRowNames_NativeFunction);
        GetDataTableRowNames_Table_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDataTableRowNames_NativeFunction, "Table");
        GetDataTableRowNames_OutRowNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDataTableRowNames_NativeFunction, "OutRowNames");
        GetDataTableRowNames_OutRowNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetDataTableRowNames_NativeFunction, "OutRowNames");
        FillDataTableFromJSONString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FillDataTableFromJSONString");
        FillDataTableFromJSONString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FillDataTableFromJSONString_NativeFunction);
        FillDataTableFromJSONString_DataTable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillDataTableFromJSONString_NativeFunction, "DataTable");
        FillDataTableFromJSONString_JSONString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillDataTableFromJSONString_NativeFunction, "JSONString");
        FillDataTableFromJSONString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillDataTableFromJSONString_NativeFunction, "ReturnValue");
        FillDataTableFromJSONFile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FillDataTableFromJSONFile");
        FillDataTableFromJSONFile_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FillDataTableFromJSONFile_NativeFunction);
        FillDataTableFromJSONFile_DataTable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillDataTableFromJSONFile_NativeFunction, "DataTable");
        FillDataTableFromJSONFile_JSONFilePath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillDataTableFromJSONFile_NativeFunction, "JSONFilePath");
        FillDataTableFromJSONFile_ImportRowStruct_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillDataTableFromJSONFile_NativeFunction, "ImportRowStruct");
        FillDataTableFromJSONFile_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillDataTableFromJSONFile_NativeFunction, "ReturnValue");
        FillDataTableFromCSVString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FillDataTableFromCSVString");
        FillDataTableFromCSVString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FillDataTableFromCSVString_NativeFunction);
        FillDataTableFromCSVString_DataTable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillDataTableFromCSVString_NativeFunction, "DataTable");
        FillDataTableFromCSVString_CSVString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillDataTableFromCSVString_NativeFunction, "CSVString");
        FillDataTableFromCSVString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillDataTableFromCSVString_NativeFunction, "ReturnValue");
        FillDataTableFromCSVFile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FillDataTableFromCSVFile");
        FillDataTableFromCSVFile_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FillDataTableFromCSVFile_NativeFunction);
        FillDataTableFromCSVFile_DataTable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillDataTableFromCSVFile_NativeFunction, "DataTable");
        FillDataTableFromCSVFile_CSVFilePath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillDataTableFromCSVFile_NativeFunction, "CSVFilePath");
        FillDataTableFromCSVFile_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FillDataTableFromCSVFile_NativeFunction, "ReturnValue");
        EvaluateCurveTableRow_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EvaluateCurveTableRow");
        EvaluateCurveTableRow_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EvaluateCurveTableRow_NativeFunction);
        EvaluateCurveTableRow_CurveTable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateCurveTableRow_NativeFunction, "CurveTable");
        EvaluateCurveTableRow_RowName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateCurveTableRow_NativeFunction, "RowName");
        EvaluateCurveTableRow_InXY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateCurveTableRow_NativeFunction, "InXY");
        EvaluateCurveTableRow_OutResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateCurveTableRow_NativeFunction, "OutResult");
        EvaluateCurveTableRow_OutXY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateCurveTableRow_NativeFunction, "OutXY");
        EvaluateCurveTableRow_ContextString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateCurveTableRow_NativeFunction, "ContextString");
        DoesDataTableRowExist_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DoesDataTableRowExist");
        DoesDataTableRowExist_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DoesDataTableRowExist_NativeFunction);
        DoesDataTableRowExist_Table_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesDataTableRowExist_NativeFunction, "Table");
        DoesDataTableRowExist_RowName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesDataTableRowExist_NativeFunction, "RowName");
        DoesDataTableRowExist_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesDataTableRowExist_NativeFunction, "ReturnValue");
        
        
    }
    
    protected DataTableFunctionLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.DataTableFunctionLibrary:GetDataTableRowNames
    static readonly IntPtr GetDataTableRowNames_NativeFunction;
    static readonly int GetDataTableRowNames_ParamsSize;
    static readonly int GetDataTableRowNames_Table_Offset;
    static readonly int GetDataTableRowNames_OutRowNames_Offset;
    static readonly int GetDataTableRowNames_OutRowNames_ElementSize;
    
    public static void GetDataTableRowNames(UnrealSharp.Engine.DataTable table, out System.Collections.Generic.IList<Name> outRowNames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDataTableRowNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.DataTable>.ToNative(IntPtr.Add(ParamsBuffer, GetDataTableRowNames_Table_Offset), 0, null, table);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetDataTableRowNames_NativeFunction, ParamsBuffer);
            
            IntPtr OutRowNames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetDataTableRowNames_OutRowNames_Offset);
            UnrealArrayCopyMarshaler<Name> OutRowNames_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetDataTableRowNames_OutRowNames_ElementSize);
            outRowNames = OutRowNames_Marshaler.FromNative(OutRowNames_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(OutRowNames_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.DataTableFunctionLibrary:FillDataTableFromJSONString
    static readonly IntPtr FillDataTableFromJSONString_NativeFunction;
    static readonly int FillDataTableFromJSONString_ParamsSize;
    static readonly int FillDataTableFromJSONString_DataTable_Offset;
    static readonly int FillDataTableFromJSONString_JSONString_Offset;
    static readonly int FillDataTableFromJSONString_ReturnValue_Offset;
    
    public static bool FillDataTableFromJSONString(UnrealSharp.Engine.DataTable dataTable, string jSONString)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FillDataTableFromJSONString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.DataTable>.ToNative(IntPtr.Add(ParamsBuffer, FillDataTableFromJSONString_DataTable_Offset), 0, null, dataTable);
            IntPtr JSONString_NativePtr = IntPtr.Add(ParamsBuffer,FillDataTableFromJSONString_JSONString_Offset);
            StringMarshaller.ToNative(JSONString_NativePtr,0,null,jSONString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FillDataTableFromJSONString_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, FillDataTableFromJSONString_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(JSONString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.DataTableFunctionLibrary:FillDataTableFromJSONFile
    static readonly IntPtr FillDataTableFromJSONFile_NativeFunction;
    static readonly int FillDataTableFromJSONFile_ParamsSize;
    static readonly int FillDataTableFromJSONFile_DataTable_Offset;
    static readonly int FillDataTableFromJSONFile_JSONFilePath_Offset;
    static readonly int FillDataTableFromJSONFile_ImportRowStruct_Offset;
    static readonly int FillDataTableFromJSONFile_ReturnValue_Offset;
    
    public static bool FillDataTableFromJSONFile(UnrealSharp.Engine.DataTable dataTable, string jSONFilePath, UnrealSharp.CoreUObject.ScriptStruct importRowStruct = default(UnrealSharp.CoreUObject.ScriptStruct))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FillDataTableFromJSONFile_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.DataTable>.ToNative(IntPtr.Add(ParamsBuffer, FillDataTableFromJSONFile_DataTable_Offset), 0, null, dataTable);
            IntPtr JSONFilePath_NativePtr = IntPtr.Add(ParamsBuffer,FillDataTableFromJSONFile_JSONFilePath_Offset);
            StringMarshaller.ToNative(JSONFilePath_NativePtr,0,null,jSONFilePath);
            ObjectMarshaller<UnrealSharp.CoreUObject.ScriptStruct>.ToNative(IntPtr.Add(ParamsBuffer, FillDataTableFromJSONFile_ImportRowStruct_Offset), 0, null, importRowStruct);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FillDataTableFromJSONFile_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, FillDataTableFromJSONFile_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(JSONFilePath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.DataTableFunctionLibrary:FillDataTableFromCSVString
    static readonly IntPtr FillDataTableFromCSVString_NativeFunction;
    static readonly int FillDataTableFromCSVString_ParamsSize;
    static readonly int FillDataTableFromCSVString_DataTable_Offset;
    static readonly int FillDataTableFromCSVString_CSVString_Offset;
    static readonly int FillDataTableFromCSVString_ReturnValue_Offset;
    
    public static bool FillDataTableFromCSVString(UnrealSharp.Engine.DataTable dataTable, string cSVString)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FillDataTableFromCSVString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.DataTable>.ToNative(IntPtr.Add(ParamsBuffer, FillDataTableFromCSVString_DataTable_Offset), 0, null, dataTable);
            IntPtr CSVString_NativePtr = IntPtr.Add(ParamsBuffer,FillDataTableFromCSVString_CSVString_Offset);
            StringMarshaller.ToNative(CSVString_NativePtr,0,null,cSVString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FillDataTableFromCSVString_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, FillDataTableFromCSVString_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(CSVString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.DataTableFunctionLibrary:FillDataTableFromCSVFile
    static readonly IntPtr FillDataTableFromCSVFile_NativeFunction;
    static readonly int FillDataTableFromCSVFile_ParamsSize;
    static readonly int FillDataTableFromCSVFile_DataTable_Offset;
    static readonly int FillDataTableFromCSVFile_CSVFilePath_Offset;
    static readonly int FillDataTableFromCSVFile_ReturnValue_Offset;
    
    public static bool FillDataTableFromCSVFile(UnrealSharp.Engine.DataTable dataTable, string cSVFilePath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FillDataTableFromCSVFile_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.DataTable>.ToNative(IntPtr.Add(ParamsBuffer, FillDataTableFromCSVFile_DataTable_Offset), 0, null, dataTable);
            IntPtr CSVFilePath_NativePtr = IntPtr.Add(ParamsBuffer,FillDataTableFromCSVFile_CSVFilePath_Offset);
            StringMarshaller.ToNative(CSVFilePath_NativePtr,0,null,cSVFilePath);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FillDataTableFromCSVFile_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, FillDataTableFromCSVFile_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(CSVFilePath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.DataTableFunctionLibrary:EvaluateCurveTableRow
    static readonly IntPtr EvaluateCurveTableRow_NativeFunction;
    static readonly int EvaluateCurveTableRow_ParamsSize;
    static readonly int EvaluateCurveTableRow_CurveTable_Offset;
    static readonly int EvaluateCurveTableRow_RowName_Offset;
    static readonly int EvaluateCurveTableRow_InXY_Offset;
    static readonly int EvaluateCurveTableRow_OutResult_Offset;
    static readonly int EvaluateCurveTableRow_OutXY_Offset;
    static readonly int EvaluateCurveTableRow_ContextString_Offset;
    
    public static void EvaluateCurveTableRow(UnrealSharp.Engine.CurveTable curveTable, Name rowName, float inXY, out UnrealSharp.Engine.EEvaluateCurveTableResult outResult, out float outXY, string contextString)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EvaluateCurveTableRow_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.CurveTable>.ToNative(IntPtr.Add(ParamsBuffer, EvaluateCurveTableRow_CurveTable_Offset), 0, null, curveTable);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, EvaluateCurveTableRow_RowName_Offset), 0, null, rowName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, EvaluateCurveTableRow_InXY_Offset), 0, null, inXY);
            IntPtr ContextString_NativePtr = IntPtr.Add(ParamsBuffer,EvaluateCurveTableRow_ContextString_Offset);
            StringMarshaller.ToNative(ContextString_NativePtr,0,null,contextString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EvaluateCurveTableRow_NativeFunction, ParamsBuffer);
            
            outResult = BlittableMarshaller<UnrealSharp.Engine.EEvaluateCurveTableResult>.FromNative(IntPtr.Add(ParamsBuffer, EvaluateCurveTableRow_OutResult_Offset), 0, null);
            outXY = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, EvaluateCurveTableRow_OutXY_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ContextString_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.DataTableFunctionLibrary:DoesDataTableRowExist
    static readonly IntPtr DoesDataTableRowExist_NativeFunction;
    static readonly int DoesDataTableRowExist_ParamsSize;
    static readonly int DoesDataTableRowExist_Table_Offset;
    static readonly int DoesDataTableRowExist_RowName_Offset;
    static readonly int DoesDataTableRowExist_ReturnValue_Offset;
    
    public static bool DoesDataTableRowExist(UnrealSharp.Engine.DataTable table, Name rowName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DoesDataTableRowExist_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.DataTable>.ToNative(IntPtr.Add(ParamsBuffer, DoesDataTableRowExist_Table_Offset), 0, null, table);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, DoesDataTableRowExist_RowName_Offset), 0, null, rowName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DoesDataTableRowExist_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DoesDataTableRowExist_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
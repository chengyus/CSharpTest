// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class DebugCameraController : UnrealSharp.Engine.PlayerController
{
    
    static DebugCameraController()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("DebugCameraController");
        
        SpeedScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SpeedScale");
        InitialMaxSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InitialMaxSpeed");
        InitialAccel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InitialAccel");
        InitialDecel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InitialDecel");
        
        ToggleDisplay_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ToggleDisplay");
        SetPawnMovementSpeedScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPawnMovementSpeedScale");
        SetPawnMovementSpeedScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPawnMovementSpeedScale_NativeFunction);
        SetPawnMovementSpeedScale_NewSpeedScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPawnMovementSpeedScale_NativeFunction, "NewSpeedScale");
        GetSelectedActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSelectedActor");
        GetSelectedActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSelectedActor_NativeFunction);
        GetSelectedActor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSelectedActor_NativeFunction, "ReturnValue");
        
        IntPtr ReceiveOnDeactivate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveOnDeactivate");
        ReceiveOnDeactivate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveOnDeactivate_NativeFunction);
        ReceiveOnDeactivate_RestoredPC_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveOnDeactivate_NativeFunction, "RestoredPC");
        
        IntPtr ReceiveOnActorSelected_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveOnActorSelected");
        ReceiveOnActorSelected_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveOnActorSelected_NativeFunction);
        ReceiveOnActorSelected_NewSelectedActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveOnActorSelected_NativeFunction, "NewSelectedActor");
        ReceiveOnActorSelected_SelectHitLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveOnActorSelected_NativeFunction, "SelectHitLocation");
        ReceiveOnActorSelected_SelectHitNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveOnActorSelected_NativeFunction, "SelectHitNormal");
        ReceiveOnActorSelected_Hit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveOnActorSelected_NativeFunction, "Hit");
        
        IntPtr ReceiveOnActivate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveOnActivate");
        ReceiveOnActivate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveOnActivate_NativeFunction);
        ReceiveOnActivate_OriginalPC_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveOnActivate_NativeFunction, "OriginalPC");
        
        
    }
    
    protected DebugCameraController(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Engine.DebugCameraController:SpeedScale
    static readonly int SpeedScale_Offset;
    
    public float SpeedScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SpeedScale_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DebugCameraController:InitialMaxSpeed
    static readonly int InitialMaxSpeed_Offset;
    
    public float InitialMaxSpeed
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, InitialMaxSpeed_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DebugCameraController:InitialAccel
    static readonly int InitialAccel_Offset;
    
    public float InitialAccel
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, InitialAccel_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DebugCameraController:InitialDecel
    static readonly int InitialDecel_Offset;
    
    public float InitialDecel
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, InitialDecel_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.DebugCameraController:ToggleDisplay
    static readonly IntPtr ToggleDisplay_NativeFunction;
    
    public void ToggleDisplay()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ToggleDisplay_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.DebugCameraController:SetPawnMovementSpeedScale
    static readonly IntPtr SetPawnMovementSpeedScale_NativeFunction;
    static readonly int SetPawnMovementSpeedScale_ParamsSize;
    static readonly int SetPawnMovementSpeedScale_NewSpeedScale_Offset;
    
    public void SetPawnMovementSpeedScale(float newSpeedScale)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPawnMovementSpeedScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPawnMovementSpeedScale_NewSpeedScale_Offset), 0, null, newSpeedScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPawnMovementSpeedScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DebugCameraController:GetSelectedActor
    static readonly IntPtr GetSelectedActor_NativeFunction;
    static readonly int GetSelectedActor_ParamsSize;
    static readonly int GetSelectedActor_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Actor GetSelectedActor()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSelectedActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSelectedActor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Actor returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(ParamsBuffer, GetSelectedActor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.DebugCameraController:ReceiveOnDeactivate
    IntPtr ReceiveOnDeactivate_NativeFunction;
    static readonly int ReceiveOnDeactivate_ParamsSize;
    static readonly int ReceiveOnDeactivate_RestoredPC_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveOnDeactivate(UnrealSharp.Engine.PlayerController restoredPC)
    {
        unsafe
        {
            if (ReceiveOnDeactivate_NativeFunction == IntPtr.Zero)
            {
                ReceiveOnDeactivate_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveOnDeactivate");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveOnDeactivate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveOnDeactivate_RestoredPC_Offset), 0, null, restoredPC);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveOnDeactivate_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveOnDeactivate_Implementation(UnrealSharp.Engine.PlayerController restoredPC)
    {
    }
    void Invoke_ReceiveOnDeactivate(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.PlayerController restoredPC = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(buffer, ReceiveOnDeactivate_RestoredPC_Offset), 0, null);
            ReceiveOnDeactivate_Implementation(restoredPC);
        }
    }
    
    // Function /Script/Engine.DebugCameraController:ReceiveOnActorSelected
    IntPtr ReceiveOnActorSelected_NativeFunction;
    static readonly int ReceiveOnActorSelected_ParamsSize;
    static readonly int ReceiveOnActorSelected_NewSelectedActor_Offset;
    static readonly int ReceiveOnActorSelected_SelectHitLocation_Offset;
    static readonly int ReceiveOnActorSelected_SelectHitNormal_Offset;
    static readonly int ReceiveOnActorSelected_Hit_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void ReceiveOnActorSelected(UnrealSharp.Engine.Actor newSelectedActor, System.DoubleNumerics.Vector3 selectHitLocation, System.DoubleNumerics.Vector3 selectHitNormal, UnrealSharp.Engine.HitResult hit)
    {
        unsafe
        {
            if (ReceiveOnActorSelected_NativeFunction == IntPtr.Zero)
            {
                ReceiveOnActorSelected_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveOnActorSelected");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveOnActorSelected_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveOnActorSelected_NewSelectedActor_Offset), 0, null, newSelectedActor);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveOnActorSelected_SelectHitLocation_Offset), 0, null, selectHitLocation);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveOnActorSelected_SelectHitNormal_Offset), 0, null, selectHitNormal);
            UnrealSharp.Engine.HitResultMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ReceiveOnActorSelected_Hit_Offset), 0, null, hit);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveOnActorSelected_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveOnActorSelected_Implementation(UnrealSharp.Engine.Actor newSelectedActor, System.DoubleNumerics.Vector3 selectHitLocation, System.DoubleNumerics.Vector3 selectHitNormal, UnrealSharp.Engine.HitResult hit)
    {
    }
    void Invoke_ReceiveOnActorSelected(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Actor newSelectedActor = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, ReceiveOnActorSelected_NewSelectedActor_Offset), 0, null);
            System.DoubleNumerics.Vector3 selectHitLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(buffer, ReceiveOnActorSelected_SelectHitLocation_Offset), 0, null);
            System.DoubleNumerics.Vector3 selectHitNormal = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(buffer, ReceiveOnActorSelected_SelectHitNormal_Offset), 0, null);
            UnrealSharp.Engine.HitResult hit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(buffer, ReceiveOnActorSelected_Hit_Offset), 0, null);
            ReceiveOnActorSelected_Implementation(newSelectedActor, selectHitLocation, selectHitNormal, hit);
        }
    }
    
    // Function /Script/Engine.DebugCameraController:ReceiveOnActivate
    IntPtr ReceiveOnActivate_NativeFunction;
    static readonly int ReceiveOnActivate_ParamsSize;
    static readonly int ReceiveOnActivate_OriginalPC_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveOnActivate(UnrealSharp.Engine.PlayerController originalPC)
    {
        unsafe
        {
            if (ReceiveOnActivate_NativeFunction == IntPtr.Zero)
            {
                ReceiveOnActivate_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveOnActivate");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveOnActivate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveOnActivate_OriginalPC_Offset), 0, null, originalPC);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveOnActivate_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveOnActivate_Implementation(UnrealSharp.Engine.PlayerController originalPC)
    {
    }
    void Invoke_ReceiveOnActivate(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.PlayerController originalPC = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(buffer, ReceiveOnActivate_OriginalPC_Offset), 0, null);
            ReceiveOnActivate_Implementation(originalPC);
        }
    }
    
    
}
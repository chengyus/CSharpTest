// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class DefaultPawn : UnrealSharp.Engine.Pawn
{
    
    static DefaultPawn()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("DefaultPawn");
        
        BaseTurnRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BaseTurnRate");
        BaseLookUpRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BaseLookUpRate");
        MovementComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MovementComponent");
        CollisionComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CollisionComponent");
        MeshComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MeshComponent");
        bAddDefaultMovementBindings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAddDefaultMovementBindings");
        bAddDefaultMovementBindings_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAddDefaultMovementBindings");
        
        TurnAtRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TurnAtRate");
        TurnAtRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TurnAtRate_NativeFunction);
        TurnAtRate_Rate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TurnAtRate_NativeFunction, "Rate");
        MoveUp_World_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MoveUp_World");
        MoveUp_World_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MoveUp_World_NativeFunction);
        MoveUp_World_Val_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveUp_World_NativeFunction, "Val");
        MoveRight_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MoveRight");
        MoveRight_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MoveRight_NativeFunction);
        MoveRight_Val_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveRight_NativeFunction, "Val");
        MoveForward_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MoveForward");
        MoveForward_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MoveForward_NativeFunction);
        MoveForward_Val_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveForward_NativeFunction, "Val");
        LookUpAtRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LookUpAtRate");
        LookUpAtRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LookUpAtRate_NativeFunction);
        LookUpAtRate_Rate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LookUpAtRate_NativeFunction, "Rate");
        
        
    }
    
    protected DefaultPawn(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Engine.DefaultPawn:BaseTurnRate
    static readonly int BaseTurnRate_Offset;
    
    public float BaseTurnRate
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, BaseTurnRate_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DefaultPawn:BaseLookUpRate
    static readonly int BaseLookUpRate_Offset;
    
    public float BaseLookUpRate
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, BaseLookUpRate_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/Engine.DefaultPawn:MovementComponent
    static readonly int MovementComponent_Offset;
    
    public UnrealSharp.Engine.PawnMovementComponent MovementComponent
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.PawnMovementComponent>.FromNative(IntPtr.Add(NativeObject, MovementComponent_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/Engine.DefaultPawn:CollisionComponent
    static readonly int CollisionComponent_Offset;
    
    public UnrealSharp.Engine.SphereComponent CollisionComponent
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.SphereComponent>.FromNative(IntPtr.Add(NativeObject, CollisionComponent_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/Engine.DefaultPawn:MeshComponent
    static readonly int MeshComponent_Offset;
    
    public UnrealSharp.Engine.StaticMeshComponent MeshComponent
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.StaticMeshComponent>.FromNative(IntPtr.Add(NativeObject, MeshComponent_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.DefaultPawn:bAddDefaultMovementBindings
    static readonly int bAddDefaultMovementBindings_Offset;
    static readonly IntPtr bAddDefaultMovementBindings_NativeProperty;
    
    public bool bAddDefaultMovementBindings
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAddDefaultMovementBindings_NativeProperty, bAddDefaultMovementBindings_Offset);
        }
    }
    
    // Function /Script/Engine.DefaultPawn:TurnAtRate
    static readonly IntPtr TurnAtRate_NativeFunction;
    static readonly int TurnAtRate_ParamsSize;
    static readonly int TurnAtRate_Rate_Offset;
    
    public void TurnAtRate(float rate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TurnAtRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, TurnAtRate_Rate_Offset), 0, null, rate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, TurnAtRate_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DefaultPawn:MoveUp_World
    static readonly IntPtr MoveUp_World_NativeFunction;
    static readonly int MoveUp_World_ParamsSize;
    static readonly int MoveUp_World_Val_Offset;
    
    public void MoveUp_World(float val)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MoveUp_World_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, MoveUp_World_Val_Offset), 0, null, val);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, MoveUp_World_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DefaultPawn:MoveRight
    static readonly IntPtr MoveRight_NativeFunction;
    static readonly int MoveRight_ParamsSize;
    static readonly int MoveRight_Val_Offset;
    
    public void MoveRight(float val)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MoveRight_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, MoveRight_Val_Offset), 0, null, val);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, MoveRight_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DefaultPawn:MoveForward
    static readonly IntPtr MoveForward_NativeFunction;
    static readonly int MoveForward_ParamsSize;
    static readonly int MoveForward_Val_Offset;
    
    public void MoveForward(float val)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MoveForward_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, MoveForward_Val_Offset), 0, null, val);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, MoveForward_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DefaultPawn:LookUpAtRate
    static readonly IntPtr LookUpAtRate_NativeFunction;
    static readonly int LookUpAtRate_ParamsSize;
    static readonly int LookUpAtRate_Rate_Offset;
    
    public void LookUpAtRate(float rate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LookUpAtRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LookUpAtRate_Rate_Offset), 0, null, rate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, LookUpAtRate_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
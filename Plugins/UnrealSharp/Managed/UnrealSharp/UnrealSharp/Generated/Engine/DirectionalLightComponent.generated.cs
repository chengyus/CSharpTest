// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class DirectionalLightComponent : UnrealSharp.Engine.LightComponent
{
    
    static DirectionalLightComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("DirectionalLightComponent");
        
        ShadowCascadeBiasDistribution_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShadowCascadeBiasDistribution");
        bEnableLightShaftOcclusion_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableLightShaftOcclusion");
        bEnableLightShaftOcclusion_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableLightShaftOcclusion");
        OcclusionMaskDarkness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OcclusionMaskDarkness");
        OcclusionDepthRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OcclusionDepthRange");
        LightShaftOverrideDirection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LightShaftOverrideDirection");
        DynamicShadowDistanceMovableLight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DynamicShadowDistanceMovableLight");
        DynamicShadowDistanceStationaryLight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DynamicShadowDistanceStationaryLight");
        DynamicShadowCascades_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DynamicShadowCascades");
        CascadeDistributionExponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CascadeDistributionExponent");
        CascadeTransitionFraction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CascadeTransitionFraction");
        ShadowDistanceFadeoutFraction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShadowDistanceFadeoutFraction");
        bUseInsetShadowsForMovableObjects_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseInsetShadowsForMovableObjects");
        bUseInsetShadowsForMovableObjects_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseInsetShadowsForMovableObjects");
        FarShadowCascadeCount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FarShadowCascadeCount");
        FarShadowDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FarShadowDistance");
        DistanceFieldShadowDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DistanceFieldShadowDistance");
        ForwardShadingPriority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ForwardShadingPriority");
        LightSourceAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LightSourceAngle");
        LightSourceSoftAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LightSourceSoftAngle");
        ShadowSourceAngleFactor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShadowSourceAngleFactor");
        TraceDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TraceDistance");
        bAtmosphereSunLight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAtmosphereSunLight");
        bAtmosphereSunLight_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAtmosphereSunLight");
        AtmosphereSunLightIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AtmosphereSunLightIndex");
        AtmosphereSunDiskColorScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AtmosphereSunDiskColorScale");
        bPerPixelAtmosphereTransmittance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bPerPixelAtmosphereTransmittance");
        bPerPixelAtmosphereTransmittance_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bPerPixelAtmosphereTransmittance");
        bCastShadowsOnClouds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastShadowsOnClouds");
        bCastShadowsOnClouds_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastShadowsOnClouds");
        bCastShadowsOnAtmosphere_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastShadowsOnAtmosphere");
        bCastShadowsOnAtmosphere_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastShadowsOnAtmosphere");
        bCastCloudShadows_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastCloudShadows");
        bCastCloudShadows_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastCloudShadows");
        CloudShadowStrength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CloudShadowStrength");
        CloudShadowOnAtmosphereStrength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CloudShadowOnAtmosphereStrength");
        CloudShadowOnSurfaceStrength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CloudShadowOnSurfaceStrength");
        CloudShadowDepthBias_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CloudShadowDepthBias");
        CloudShadowExtent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CloudShadowExtent");
        CloudShadowMapResolutionScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CloudShadowMapResolutionScale");
        CloudShadowRaySampleCountScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CloudShadowRaySampleCountScale");
        CloudScatteredLuminanceScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CloudScatteredLuminanceScale");
        bCastModulatedShadows_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastModulatedShadows");
        bCastModulatedShadows_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastModulatedShadows");
        ModulatedShadowColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ModulatedShadowColor");
        ShadowAmount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShadowAmount");
        
        SetShadowSourceAngleFactor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetShadowSourceAngleFactor");
        SetShadowSourceAngleFactor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetShadowSourceAngleFactor_NativeFunction);
        SetShadowSourceAngleFactor_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetShadowSourceAngleFactor_NativeFunction, "NewValue");
        SetShadowDistanceFadeoutFraction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetShadowDistanceFadeoutFraction");
        SetShadowDistanceFadeoutFraction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetShadowDistanceFadeoutFraction_NativeFunction);
        SetShadowDistanceFadeoutFraction_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetShadowDistanceFadeoutFraction_NativeFunction, "NewValue");
        SetShadowCascadeBiasDistribution_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetShadowCascadeBiasDistribution");
        SetShadowCascadeBiasDistribution_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetShadowCascadeBiasDistribution_NativeFunction);
        SetShadowCascadeBiasDistribution_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetShadowCascadeBiasDistribution_NativeFunction, "NewValue");
        SetShadowAmount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetShadowAmount");
        SetShadowAmount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetShadowAmount_NativeFunction);
        SetShadowAmount_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetShadowAmount_NativeFunction, "NewValue");
        SetOcclusionMaskDarkness_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOcclusionMaskDarkness");
        SetOcclusionMaskDarkness_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOcclusionMaskDarkness_NativeFunction);
        SetOcclusionMaskDarkness_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOcclusionMaskDarkness_NativeFunction, "NewValue");
        SetOcclusionDepthRange_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOcclusionDepthRange");
        SetOcclusionDepthRange_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOcclusionDepthRange_NativeFunction);
        SetOcclusionDepthRange_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOcclusionDepthRange_NativeFunction, "NewValue");
        SetLightSourceSoftAngle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLightSourceSoftAngle");
        SetLightSourceSoftAngle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLightSourceSoftAngle_NativeFunction);
        SetLightSourceSoftAngle_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLightSourceSoftAngle_NativeFunction, "NewValue");
        SetLightSourceAngle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLightSourceAngle");
        SetLightSourceAngle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLightSourceAngle_NativeFunction);
        SetLightSourceAngle_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLightSourceAngle_NativeFunction, "NewValue");
        SetLightShaftOverrideDirection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLightShaftOverrideDirection");
        SetLightShaftOverrideDirection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLightShaftOverrideDirection_NativeFunction);
        SetLightShaftOverrideDirection_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLightShaftOverrideDirection_NativeFunction, "NewValue");
        SetForwardShadingPriority_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetForwardShadingPriority");
        SetForwardShadingPriority_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetForwardShadingPriority_NativeFunction);
        SetForwardShadingPriority_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetForwardShadingPriority_NativeFunction, "NewValue");
        SetEnableLightShaftOcclusion_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetEnableLightShaftOcclusion");
        SetEnableLightShaftOcclusion_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetEnableLightShaftOcclusion_NativeFunction);
        SetEnableLightShaftOcclusion_bNewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEnableLightShaftOcclusion_NativeFunction, "bNewValue");
        SetDynamicShadowDistanceStationaryLight_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDynamicShadowDistanceStationaryLight");
        SetDynamicShadowDistanceStationaryLight_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDynamicShadowDistanceStationaryLight_NativeFunction);
        SetDynamicShadowDistanceStationaryLight_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDynamicShadowDistanceStationaryLight_NativeFunction, "NewValue");
        SetDynamicShadowDistanceMovableLight_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDynamicShadowDistanceMovableLight");
        SetDynamicShadowDistanceMovableLight_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDynamicShadowDistanceMovableLight_NativeFunction);
        SetDynamicShadowDistanceMovableLight_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDynamicShadowDistanceMovableLight_NativeFunction, "NewValue");
        SetDynamicShadowCascades_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDynamicShadowCascades");
        SetDynamicShadowCascades_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDynamicShadowCascades_NativeFunction);
        SetDynamicShadowCascades_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDynamicShadowCascades_NativeFunction, "NewValue");
        SetCascadeTransitionFraction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCascadeTransitionFraction");
        SetCascadeTransitionFraction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCascadeTransitionFraction_NativeFunction);
        SetCascadeTransitionFraction_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCascadeTransitionFraction_NativeFunction, "NewValue");
        SetCascadeDistributionExponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCascadeDistributionExponent");
        SetCascadeDistributionExponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCascadeDistributionExponent_NativeFunction);
        SetCascadeDistributionExponent_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCascadeDistributionExponent_NativeFunction, "NewValue");
        SetAtmosphereSunLightIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAtmosphereSunLightIndex");
        SetAtmosphereSunLightIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAtmosphereSunLightIndex_NativeFunction);
        SetAtmosphereSunLightIndex_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAtmosphereSunLightIndex_NativeFunction, "NewValue");
        SetAtmosphereSunLight_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAtmosphereSunLight");
        SetAtmosphereSunLight_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAtmosphereSunLight_NativeFunction);
        SetAtmosphereSunLight_bNewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAtmosphereSunLight_NativeFunction, "bNewValue");
        
        
    }
    
    protected DirectionalLightComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Engine.DirectionalLightComponent:ShadowCascadeBiasDistribution
    static readonly int ShadowCascadeBiasDistribution_Offset;
    
    public float ShadowCascadeBiasDistribution
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ShadowCascadeBiasDistribution_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.DirectionalLightComponent:bEnableLightShaftOcclusion
    static readonly int bEnableLightShaftOcclusion_Offset;
    static readonly IntPtr bEnableLightShaftOcclusion_NativeProperty;
    
    public bool bEnableLightShaftOcclusion
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableLightShaftOcclusion_NativeProperty, bEnableLightShaftOcclusion_Offset);
        }
    }
    
    // FloatProperty /Script/Engine.DirectionalLightComponent:OcclusionMaskDarkness
    static readonly int OcclusionMaskDarkness_Offset;
    
    public float OcclusionMaskDarkness
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, OcclusionMaskDarkness_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DirectionalLightComponent:OcclusionDepthRange
    static readonly int OcclusionDepthRange_Offset;
    
    public float OcclusionDepthRange
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, OcclusionDepthRange_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.DirectionalLightComponent:LightShaftOverrideDirection
    static readonly int LightShaftOverrideDirection_Offset;
    
    public System.DoubleNumerics.Vector3 LightShaftOverrideDirection
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, LightShaftOverrideDirection_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DirectionalLightComponent:DynamicShadowDistanceMovableLight
    static readonly int DynamicShadowDistanceMovableLight_Offset;
    
    public float DynamicShadowDistanceMovableLight
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, DynamicShadowDistanceMovableLight_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DirectionalLightComponent:DynamicShadowDistanceStationaryLight
    static readonly int DynamicShadowDistanceStationaryLight_Offset;
    
    public float DynamicShadowDistanceStationaryLight
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, DynamicShadowDistanceStationaryLight_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Engine.DirectionalLightComponent:DynamicShadowCascades
    static readonly int DynamicShadowCascades_Offset;
    
    public int DynamicShadowCascades
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, DynamicShadowCascades_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DirectionalLightComponent:CascadeDistributionExponent
    static readonly int CascadeDistributionExponent_Offset;
    
    public float CascadeDistributionExponent
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CascadeDistributionExponent_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DirectionalLightComponent:CascadeTransitionFraction
    static readonly int CascadeTransitionFraction_Offset;
    
    public float CascadeTransitionFraction
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CascadeTransitionFraction_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DirectionalLightComponent:ShadowDistanceFadeoutFraction
    static readonly int ShadowDistanceFadeoutFraction_Offset;
    
    public float ShadowDistanceFadeoutFraction
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ShadowDistanceFadeoutFraction_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.DirectionalLightComponent:bUseInsetShadowsForMovableObjects
    static readonly int bUseInsetShadowsForMovableObjects_Offset;
    static readonly IntPtr bUseInsetShadowsForMovableObjects_NativeProperty;
    
    public bool bUseInsetShadowsForMovableObjects
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseInsetShadowsForMovableObjects_NativeProperty, bUseInsetShadowsForMovableObjects_Offset);
        }
    }
    
    // IntProperty /Script/Engine.DirectionalLightComponent:FarShadowCascadeCount
    static readonly int FarShadowCascadeCount_Offset;
    
    public int FarShadowCascadeCount
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, FarShadowCascadeCount_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DirectionalLightComponent:FarShadowDistance
    static readonly int FarShadowDistance_Offset;
    
    public float FarShadowDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, FarShadowDistance_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DirectionalLightComponent:DistanceFieldShadowDistance
    static readonly int DistanceFieldShadowDistance_Offset;
    
    public float DistanceFieldShadowDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, DistanceFieldShadowDistance_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Engine.DirectionalLightComponent:ForwardShadingPriority
    static readonly int ForwardShadingPriority_Offset;
    
    public int ForwardShadingPriority
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, ForwardShadingPriority_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DirectionalLightComponent:LightSourceAngle
    static readonly int LightSourceAngle_Offset;
    
    public float LightSourceAngle
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LightSourceAngle_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DirectionalLightComponent:LightSourceSoftAngle
    static readonly int LightSourceSoftAngle_Offset;
    
    public float LightSourceSoftAngle
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LightSourceSoftAngle_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DirectionalLightComponent:ShadowSourceAngleFactor
    static readonly int ShadowSourceAngleFactor_Offset;
    
    public float ShadowSourceAngleFactor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ShadowSourceAngleFactor_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DirectionalLightComponent:TraceDistance
    static readonly int TraceDistance_Offset;
    
    public float TraceDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, TraceDistance_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.DirectionalLightComponent:bAtmosphereSunLight
    static readonly int bAtmosphereSunLight_Offset;
    static readonly IntPtr bAtmosphereSunLight_NativeProperty;
    
    public bool bAtmosphereSunLight
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAtmosphereSunLight_NativeProperty, bAtmosphereSunLight_Offset);
        }
    }
    
    // IntProperty /Script/Engine.DirectionalLightComponent:AtmosphereSunLightIndex
    static readonly int AtmosphereSunLightIndex_Offset;
    
    public int AtmosphereSunLightIndex
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, AtmosphereSunLightIndex_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.DirectionalLightComponent:AtmosphereSunDiskColorScale
    static readonly int AtmosphereSunDiskColorScale_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor AtmosphereSunDiskColorScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, AtmosphereSunDiskColorScale_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.DirectionalLightComponent:bPerPixelAtmosphereTransmittance
    static readonly int bPerPixelAtmosphereTransmittance_Offset;
    static readonly IntPtr bPerPixelAtmosphereTransmittance_NativeProperty;
    
    public bool bPerPixelAtmosphereTransmittance
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bPerPixelAtmosphereTransmittance_NativeProperty, bPerPixelAtmosphereTransmittance_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.DirectionalLightComponent:bCastShadowsOnClouds
    static readonly int bCastShadowsOnClouds_Offset;
    static readonly IntPtr bCastShadowsOnClouds_NativeProperty;
    
    public bool bCastShadowsOnClouds
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastShadowsOnClouds_NativeProperty, bCastShadowsOnClouds_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.DirectionalLightComponent:bCastShadowsOnAtmosphere
    static readonly int bCastShadowsOnAtmosphere_Offset;
    static readonly IntPtr bCastShadowsOnAtmosphere_NativeProperty;
    
    public bool bCastShadowsOnAtmosphere
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastShadowsOnAtmosphere_NativeProperty, bCastShadowsOnAtmosphere_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.DirectionalLightComponent:bCastCloudShadows
    static readonly int bCastCloudShadows_Offset;
    static readonly IntPtr bCastCloudShadows_NativeProperty;
    
    public bool bCastCloudShadows
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastCloudShadows_NativeProperty, bCastCloudShadows_Offset);
        }
    }
    
    // FloatProperty /Script/Engine.DirectionalLightComponent:CloudShadowStrength
    static readonly int CloudShadowStrength_Offset;
    
    public float CloudShadowStrength
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CloudShadowStrength_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DirectionalLightComponent:CloudShadowOnAtmosphereStrength
    static readonly int CloudShadowOnAtmosphereStrength_Offset;
    
    public float CloudShadowOnAtmosphereStrength
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CloudShadowOnAtmosphereStrength_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DirectionalLightComponent:CloudShadowOnSurfaceStrength
    static readonly int CloudShadowOnSurfaceStrength_Offset;
    
    public float CloudShadowOnSurfaceStrength
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CloudShadowOnSurfaceStrength_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DirectionalLightComponent:CloudShadowDepthBias
    static readonly int CloudShadowDepthBias_Offset;
    
    public float CloudShadowDepthBias
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CloudShadowDepthBias_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DirectionalLightComponent:CloudShadowExtent
    static readonly int CloudShadowExtent_Offset;
    
    public float CloudShadowExtent
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CloudShadowExtent_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DirectionalLightComponent:CloudShadowMapResolutionScale
    static readonly int CloudShadowMapResolutionScale_Offset;
    
    public float CloudShadowMapResolutionScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CloudShadowMapResolutionScale_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DirectionalLightComponent:CloudShadowRaySampleCountScale
    static readonly int CloudShadowRaySampleCountScale_Offset;
    
    public float CloudShadowRaySampleCountScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CloudShadowRaySampleCountScale_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.DirectionalLightComponent:CloudScatteredLuminanceScale
    static readonly int CloudScatteredLuminanceScale_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor CloudScatteredLuminanceScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, CloudScatteredLuminanceScale_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.DirectionalLightComponent:bCastModulatedShadows
    static readonly int bCastModulatedShadows_Offset;
    static readonly IntPtr bCastModulatedShadows_NativeProperty;
    
    public bool bCastModulatedShadows
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastModulatedShadows_NativeProperty, bCastModulatedShadows_Offset);
        }
    }
    
    // StructProperty /Script/Engine.DirectionalLightComponent:ModulatedShadowColor
    static readonly int ModulatedShadowColor_Offset;
    
    public UnrealSharp.CoreUObject.Color ModulatedShadowColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(NativeObject, ModulatedShadowColor_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.DirectionalLightComponent:ShadowAmount
    static readonly int ShadowAmount_Offset;
    
    public float ShadowAmount
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ShadowAmount_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.DirectionalLightComponent:SetShadowSourceAngleFactor
    static readonly IntPtr SetShadowSourceAngleFactor_NativeFunction;
    static readonly int SetShadowSourceAngleFactor_ParamsSize;
    static readonly int SetShadowSourceAngleFactor_NewValue_Offset;
    
    public void SetShadowSourceAngleFactor(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetShadowSourceAngleFactor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetShadowSourceAngleFactor_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetShadowSourceAngleFactor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DirectionalLightComponent:SetShadowDistanceFadeoutFraction
    static readonly IntPtr SetShadowDistanceFadeoutFraction_NativeFunction;
    static readonly int SetShadowDistanceFadeoutFraction_ParamsSize;
    static readonly int SetShadowDistanceFadeoutFraction_NewValue_Offset;
    
    public void SetShadowDistanceFadeoutFraction(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetShadowDistanceFadeoutFraction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetShadowDistanceFadeoutFraction_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetShadowDistanceFadeoutFraction_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DirectionalLightComponent:SetShadowCascadeBiasDistribution
    static readonly IntPtr SetShadowCascadeBiasDistribution_NativeFunction;
    static readonly int SetShadowCascadeBiasDistribution_ParamsSize;
    static readonly int SetShadowCascadeBiasDistribution_NewValue_Offset;
    
    public void SetShadowCascadeBiasDistribution(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetShadowCascadeBiasDistribution_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetShadowCascadeBiasDistribution_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetShadowCascadeBiasDistribution_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DirectionalLightComponent:SetShadowAmount
    static readonly IntPtr SetShadowAmount_NativeFunction;
    static readonly int SetShadowAmount_ParamsSize;
    static readonly int SetShadowAmount_NewValue_Offset;
    
    public void SetShadowAmount(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetShadowAmount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetShadowAmount_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetShadowAmount_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DirectionalLightComponent:SetOcclusionMaskDarkness
    static readonly IntPtr SetOcclusionMaskDarkness_NativeFunction;
    static readonly int SetOcclusionMaskDarkness_ParamsSize;
    static readonly int SetOcclusionMaskDarkness_NewValue_Offset;
    
    public void SetOcclusionMaskDarkness(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOcclusionMaskDarkness_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetOcclusionMaskDarkness_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOcclusionMaskDarkness_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DirectionalLightComponent:SetOcclusionDepthRange
    static readonly IntPtr SetOcclusionDepthRange_NativeFunction;
    static readonly int SetOcclusionDepthRange_ParamsSize;
    static readonly int SetOcclusionDepthRange_NewValue_Offset;
    
    public void SetOcclusionDepthRange(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOcclusionDepthRange_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetOcclusionDepthRange_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOcclusionDepthRange_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DirectionalLightComponent:SetLightSourceSoftAngle
    static readonly IntPtr SetLightSourceSoftAngle_NativeFunction;
    static readonly int SetLightSourceSoftAngle_ParamsSize;
    static readonly int SetLightSourceSoftAngle_NewValue_Offset;
    
    public void SetLightSourceSoftAngle(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLightSourceSoftAngle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLightSourceSoftAngle_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLightSourceSoftAngle_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DirectionalLightComponent:SetLightSourceAngle
    static readonly IntPtr SetLightSourceAngle_NativeFunction;
    static readonly int SetLightSourceAngle_ParamsSize;
    static readonly int SetLightSourceAngle_NewValue_Offset;
    
    public void SetLightSourceAngle(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLightSourceAngle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLightSourceAngle_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLightSourceAngle_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DirectionalLightComponent:SetLightShaftOverrideDirection
    static readonly IntPtr SetLightShaftOverrideDirection_NativeFunction;
    static readonly int SetLightShaftOverrideDirection_ParamsSize;
    static readonly int SetLightShaftOverrideDirection_NewValue_Offset;
    
    public void SetLightShaftOverrideDirection(System.DoubleNumerics.Vector3 newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLightShaftOverrideDirection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetLightShaftOverrideDirection_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLightShaftOverrideDirection_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DirectionalLightComponent:SetForwardShadingPriority
    static readonly IntPtr SetForwardShadingPriority_NativeFunction;
    static readonly int SetForwardShadingPriority_ParamsSize;
    static readonly int SetForwardShadingPriority_NewValue_Offset;
    
    public void SetForwardShadingPriority(int newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetForwardShadingPriority_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetForwardShadingPriority_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetForwardShadingPriority_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DirectionalLightComponent:SetEnableLightShaftOcclusion
    static readonly IntPtr SetEnableLightShaftOcclusion_NativeFunction;
    static readonly int SetEnableLightShaftOcclusion_ParamsSize;
    static readonly int SetEnableLightShaftOcclusion_bNewValue_Offset;
    
    public void SetEnableLightShaftOcclusion(bool bNewValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetEnableLightShaftOcclusion_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetEnableLightShaftOcclusion_bNewValue_Offset), 0, null, bNewValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetEnableLightShaftOcclusion_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DirectionalLightComponent:SetDynamicShadowDistanceStationaryLight
    static readonly IntPtr SetDynamicShadowDistanceStationaryLight_NativeFunction;
    static readonly int SetDynamicShadowDistanceStationaryLight_ParamsSize;
    static readonly int SetDynamicShadowDistanceStationaryLight_NewValue_Offset;
    
    public void SetDynamicShadowDistanceStationaryLight(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDynamicShadowDistanceStationaryLight_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetDynamicShadowDistanceStationaryLight_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDynamicShadowDistanceStationaryLight_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DirectionalLightComponent:SetDynamicShadowDistanceMovableLight
    static readonly IntPtr SetDynamicShadowDistanceMovableLight_NativeFunction;
    static readonly int SetDynamicShadowDistanceMovableLight_ParamsSize;
    static readonly int SetDynamicShadowDistanceMovableLight_NewValue_Offset;
    
    public void SetDynamicShadowDistanceMovableLight(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDynamicShadowDistanceMovableLight_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetDynamicShadowDistanceMovableLight_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDynamicShadowDistanceMovableLight_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DirectionalLightComponent:SetDynamicShadowCascades
    static readonly IntPtr SetDynamicShadowCascades_NativeFunction;
    static readonly int SetDynamicShadowCascades_ParamsSize;
    static readonly int SetDynamicShadowCascades_NewValue_Offset;
    
    public void SetDynamicShadowCascades(int newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDynamicShadowCascades_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetDynamicShadowCascades_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDynamicShadowCascades_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DirectionalLightComponent:SetCascadeTransitionFraction
    static readonly IntPtr SetCascadeTransitionFraction_NativeFunction;
    static readonly int SetCascadeTransitionFraction_ParamsSize;
    static readonly int SetCascadeTransitionFraction_NewValue_Offset;
    
    public void SetCascadeTransitionFraction(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCascadeTransitionFraction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCascadeTransitionFraction_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCascadeTransitionFraction_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DirectionalLightComponent:SetCascadeDistributionExponent
    static readonly IntPtr SetCascadeDistributionExponent_NativeFunction;
    static readonly int SetCascadeDistributionExponent_ParamsSize;
    static readonly int SetCascadeDistributionExponent_NewValue_Offset;
    
    public void SetCascadeDistributionExponent(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCascadeDistributionExponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCascadeDistributionExponent_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCascadeDistributionExponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DirectionalLightComponent:SetAtmosphereSunLightIndex
    static readonly IntPtr SetAtmosphereSunLightIndex_NativeFunction;
    static readonly int SetAtmosphereSunLightIndex_ParamsSize;
    static readonly int SetAtmosphereSunLightIndex_NewValue_Offset;
    
    public void SetAtmosphereSunLightIndex(int newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAtmosphereSunLightIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetAtmosphereSunLightIndex_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAtmosphereSunLightIndex_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.DirectionalLightComponent:SetAtmosphereSunLight
    static readonly IntPtr SetAtmosphereSunLight_NativeFunction;
    static readonly int SetAtmosphereSunLight_ParamsSize;
    static readonly int SetAtmosphereSunLight_bNewValue_Offset;
    
    public void SetAtmosphereSunLight(bool bNewValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAtmosphereSunLight_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAtmosphereSunLight_bNewValue_Offset), 0, null, bNewValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAtmosphereSunLight_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
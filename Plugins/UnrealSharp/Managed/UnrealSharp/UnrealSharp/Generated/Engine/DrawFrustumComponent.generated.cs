// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class DrawFrustumComponent : UnrealSharp.Engine.PrimitiveComponent
{
    
    static DrawFrustumComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("DrawFrustumComponent");
        
        bFrustumEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bFrustumEnabled");
        FrustumColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FrustumColor");
        FrustumAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FrustumAngle");
        FrustumAspectRatio_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FrustumAspectRatio");
        FrustumStartDist_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FrustumStartDist");
        FrustumEndDist_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FrustumEndDist");
        Texture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Texture");
        
        
        
    }
    
    protected DrawFrustumComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/Engine.DrawFrustumComponent:bFrustumEnabled
    static readonly int bFrustumEnabled_Offset;
    
    public bool bFrustumEnabled
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bFrustumEnabled_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bFrustumEnabled_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.DrawFrustumComponent:FrustumColor
    static readonly int FrustumColor_Offset;
    
    public UnrealSharp.CoreUObject.Color FrustumColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(NativeObject, FrustumColor_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(NativeObject, FrustumColor_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.DrawFrustumComponent:FrustumAngle
    static readonly int FrustumAngle_Offset;
    
    public float FrustumAngle
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, FrustumAngle_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, FrustumAngle_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.DrawFrustumComponent:FrustumAspectRatio
    static readonly int FrustumAspectRatio_Offset;
    
    public float FrustumAspectRatio
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, FrustumAspectRatio_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, FrustumAspectRatio_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.DrawFrustumComponent:FrustumStartDist
    static readonly int FrustumStartDist_Offset;
    
    public float FrustumStartDist
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, FrustumStartDist_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, FrustumStartDist_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.DrawFrustumComponent:FrustumEndDist
    static readonly int FrustumEndDist_Offset;
    
    public float FrustumEndDist
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, FrustumEndDist_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, FrustumEndDist_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/Engine.DrawFrustumComponent:Texture
    static readonly int Texture_Offset;
    
    public UnrealSharp.Engine.Texture Texture
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.Texture>.FromNative(IntPtr.Add(NativeObject, Texture_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.Texture>.ToNative(IntPtr.Add(NativeObject, Texture_Offset), 0, this, value);
        }
    }
    
    
}
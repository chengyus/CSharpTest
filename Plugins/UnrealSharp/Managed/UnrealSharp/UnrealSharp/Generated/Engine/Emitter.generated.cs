// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class Emitter : UnrealSharp.Engine.Actor
{
    
    static Emitter()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("Emitter");
        
        ParticleSystemComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ParticleSystemComponent");
        bPostUpdateTickGroup_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bPostUpdateTickGroup");
        bPostUpdateTickGroup_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bPostUpdateTickGroup");
        
        ToggleActive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ToggleActive");
        SetVectorParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVectorParameter");
        SetVectorParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVectorParameter_NativeFunction);
        SetVectorParameter_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVectorParameter_NativeFunction, "ParameterName");
        SetVectorParameter_Param_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVectorParameter_NativeFunction, "Param");
        SetTemplate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTemplate");
        SetTemplate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTemplate_NativeFunction);
        SetTemplate_NewTemplate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTemplate_NativeFunction, "NewTemplate");
        SetMaterialParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMaterialParameter");
        SetMaterialParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMaterialParameter_NativeFunction);
        SetMaterialParameter_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialParameter_NativeFunction, "ParameterName");
        SetMaterialParameter_Param_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialParameter_NativeFunction, "Param");
        SetFloatParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFloatParameter");
        SetFloatParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFloatParameter_NativeFunction);
        SetFloatParameter_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFloatParameter_NativeFunction, "ParameterName");
        SetFloatParameter_Param_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFloatParameter_NativeFunction, "Param");
        SetColorParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetColorParameter");
        SetColorParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetColorParameter_NativeFunction);
        SetColorParameter_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetColorParameter_NativeFunction, "ParameterName");
        SetColorParameter_Param_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetColorParameter_NativeFunction, "Param");
        SetActorParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetActorParameter");
        SetActorParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetActorParameter_NativeFunction);
        SetActorParameter_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetActorParameter_NativeFunction, "ParameterName");
        SetActorParameter_Param_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetActorParameter_NativeFunction, "Param");
        IsActive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsActive");
        IsActive_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsActive_NativeFunction);
        IsActive_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsActive_NativeFunction, "ReturnValue");
        Deactivate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Deactivate");
        Activate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Activate");
        
        
    }
    
    protected Emitter(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Engine.Emitter:ParticleSystemComponent
    static readonly int ParticleSystemComponent_Offset;
    
    public UnrealSharp.Engine.ParticleSystemComponent ParticleSystemComponent
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.ParticleSystemComponent>.FromNative(IntPtr.Add(NativeObject, ParticleSystemComponent_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.Emitter:bPostUpdateTickGroup
    static readonly int bPostUpdateTickGroup_Offset;
    static readonly IntPtr bPostUpdateTickGroup_NativeProperty;
    
    public bool bPostUpdateTickGroup
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bPostUpdateTickGroup_NativeProperty, bPostUpdateTickGroup_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bPostUpdateTickGroup_NativeProperty, bPostUpdateTickGroup_Offset, value);
        }
    }
    
    // Function /Script/Engine.Emitter:ToggleActive
    static readonly IntPtr ToggleActive_NativeFunction;
    
    [Obsolete("This function is obsolete")]
    public void ToggleActive()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ToggleActive_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.Emitter:SetVectorParameter
    static readonly IntPtr SetVectorParameter_NativeFunction;
    static readonly int SetVectorParameter_ParamsSize;
    static readonly int SetVectorParameter_ParameterName_Offset;
    static readonly int SetVectorParameter_Param_Offset;
    
    [Obsolete("This function is obsolete")]
    public void SetVectorParameter(Name parameterName, System.DoubleNumerics.Vector3 param)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVectorParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetVectorParameter_ParameterName_Offset), 0, null, parameterName);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetVectorParameter_Param_Offset), 0, null, param);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVectorParameter_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Emitter:SetTemplate
    static readonly IntPtr SetTemplate_NativeFunction;
    static readonly int SetTemplate_ParamsSize;
    static readonly int SetTemplate_NewTemplate_Offset;
    
    [Obsolete("This function is obsolete")]
    public void SetTemplate(UnrealSharp.Engine.ParticleSystem newTemplate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTemplate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.ParticleSystem>.ToNative(IntPtr.Add(ParamsBuffer, SetTemplate_NewTemplate_Offset), 0, null, newTemplate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTemplate_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Emitter:SetMaterialParameter
    static readonly IntPtr SetMaterialParameter_NativeFunction;
    static readonly int SetMaterialParameter_ParamsSize;
    static readonly int SetMaterialParameter_ParameterName_Offset;
    static readonly int SetMaterialParameter_Param_Offset;
    
    [Obsolete("This function is obsolete")]
    public void SetMaterialParameter(Name parameterName, UnrealSharp.Engine.MaterialInterface param)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMaterialParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialParameter_ParameterName_Offset), 0, null, parameterName);
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialParameter_Param_Offset), 0, null, param);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMaterialParameter_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Emitter:SetFloatParameter
    static readonly IntPtr SetFloatParameter_NativeFunction;
    static readonly int SetFloatParameter_ParamsSize;
    static readonly int SetFloatParameter_ParameterName_Offset;
    static readonly int SetFloatParameter_Param_Offset;
    
    [Obsolete("This function is obsolete")]
    public void SetFloatParameter(Name parameterName, float param)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFloatParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetFloatParameter_ParameterName_Offset), 0, null, parameterName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetFloatParameter_Param_Offset), 0, null, param);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFloatParameter_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Emitter:SetColorParameter
    static readonly IntPtr SetColorParameter_NativeFunction;
    static readonly int SetColorParameter_ParamsSize;
    static readonly int SetColorParameter_ParameterName_Offset;
    static readonly int SetColorParameter_Param_Offset;
    
    [Obsolete("This function is obsolete")]
    public void SetColorParameter(Name parameterName, UnrealSharp.CoreUObject.LinearColor param)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetColorParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetColorParameter_ParameterName_Offset), 0, null, parameterName);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetColorParameter_Param_Offset), 0, null, param);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetColorParameter_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Emitter:SetActorParameter
    static readonly IntPtr SetActorParameter_NativeFunction;
    static readonly int SetActorParameter_ParamsSize;
    static readonly int SetActorParameter_ParameterName_Offset;
    static readonly int SetActorParameter_Param_Offset;
    
    [Obsolete("This function is obsolete")]
    public void SetActorParameter(Name parameterName, UnrealSharp.Engine.Actor param)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetActorParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetActorParameter_ParameterName_Offset), 0, null, parameterName);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, SetActorParameter_Param_Offset), 0, null, param);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetActorParameter_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Emitter:IsActive
    static readonly IntPtr IsActive_NativeFunction;
    static readonly int IsActive_ParamsSize;
    static readonly int IsActive_ReturnValue_Offset;
    
    [Obsolete("This function is obsolete")]
    public bool IsActive()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsActive_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsActive_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsActive_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Emitter:Deactivate
    static readonly IntPtr Deactivate_NativeFunction;
    
    [Obsolete("This function is obsolete")]
    public void Deactivate()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Deactivate_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.Emitter:Activate
    static readonly IntPtr Activate_NativeFunction;
    
    [Obsolete("This function is obsolete")]
    public void Activate()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Activate_NativeFunction, IntPtr.Zero);
        }
    }
    
    
}
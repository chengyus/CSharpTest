// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class ExponentialHeightFogComponent : UnrealSharp.Engine.SceneComponent
{
    
    static ExponentialHeightFogComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ExponentialHeightFogComponent");
        
        FogDensity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FogDensity");
        FogHeightFalloff_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FogHeightFalloff");
        SecondFogData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SecondFogData");
        FogInscatteringLuminance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FogInscatteringLuminance");
        SkyAtmosphereAmbientContributionColorScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SkyAtmosphereAmbientContributionColorScale");
        InscatteringColorCubemap_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InscatteringColorCubemap");
        InscatteringColorCubemapAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InscatteringColorCubemapAngle");
        InscatteringTextureTint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InscatteringTextureTint");
        FullyDirectionalInscatteringColorDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FullyDirectionalInscatteringColorDistance");
        NonDirectionalInscatteringColorDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NonDirectionalInscatteringColorDistance");
        DirectionalInscatteringExponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DirectionalInscatteringExponent");
        DirectionalInscatteringStartDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DirectionalInscatteringStartDistance");
        DirectionalInscatteringLuminance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DirectionalInscatteringLuminance");
        FogMaxOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FogMaxOpacity");
        StartDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StartDistance");
        FogCutoffDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FogCutoffDistance");
        bEnableVolumetricFog_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableVolumetricFog");
        VolumetricFogScatteringDistribution_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VolumetricFogScatteringDistribution");
        VolumetricFogAlbedo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VolumetricFogAlbedo");
        VolumetricFogEmissive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VolumetricFogEmissive");
        VolumetricFogExtinctionScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VolumetricFogExtinctionScale");
        VolumetricFogDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VolumetricFogDistance");
        VolumetricFogStartDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VolumetricFogStartDistance");
        VolumetricFogNearFadeInDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VolumetricFogNearFadeInDistance");
        VolumetricFogStaticLightingScatteringIntensity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VolumetricFogStaticLightingScatteringIntensity");
        bOverrideLightColorsWithFogInscatteringColors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOverrideLightColorsWithFogInscatteringColors");
        
        SetVolumetricFogScatteringDistribution_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVolumetricFogScatteringDistribution");
        SetVolumetricFogScatteringDistribution_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVolumetricFogScatteringDistribution_NativeFunction);
        SetVolumetricFogScatteringDistribution_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVolumetricFogScatteringDistribution_NativeFunction, "NewValue");
        SetVolumetricFogExtinctionScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVolumetricFogExtinctionScale");
        SetVolumetricFogExtinctionScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVolumetricFogExtinctionScale_NativeFunction);
        SetVolumetricFogExtinctionScale_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVolumetricFogExtinctionScale_NativeFunction, "NewValue");
        SetVolumetricFogEmissive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVolumetricFogEmissive");
        SetVolumetricFogEmissive_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVolumetricFogEmissive_NativeFunction);
        SetVolumetricFogEmissive_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVolumetricFogEmissive_NativeFunction, "NewValue");
        SetVolumetricFogDistance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVolumetricFogDistance");
        SetVolumetricFogDistance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVolumetricFogDistance_NativeFunction);
        SetVolumetricFogDistance_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVolumetricFogDistance_NativeFunction, "NewValue");
        SetVolumetricFogAlbedo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVolumetricFogAlbedo");
        SetVolumetricFogAlbedo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVolumetricFogAlbedo_NativeFunction);
        SetVolumetricFogAlbedo_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVolumetricFogAlbedo_NativeFunction, "NewValue");
        SetVolumetricFog_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVolumetricFog");
        SetVolumetricFog_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVolumetricFog_NativeFunction);
        SetVolumetricFog_bNewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVolumetricFog_NativeFunction, "bNewValue");
        SetStartDistance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetStartDistance");
        SetStartDistance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetStartDistance_NativeFunction);
        SetStartDistance_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetStartDistance_NativeFunction, "Value");
        SetSecondFogHeightOffset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSecondFogHeightOffset");
        SetSecondFogHeightOffset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSecondFogHeightOffset_NativeFunction);
        SetSecondFogHeightOffset_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSecondFogHeightOffset_NativeFunction, "Value");
        SetSecondFogHeightFalloff_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSecondFogHeightFalloff");
        SetSecondFogHeightFalloff_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSecondFogHeightFalloff_NativeFunction);
        SetSecondFogHeightFalloff_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSecondFogHeightFalloff_NativeFunction, "Value");
        SetSecondFogDensity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSecondFogDensity");
        SetSecondFogDensity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSecondFogDensity_NativeFunction);
        SetSecondFogDensity_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSecondFogDensity_NativeFunction, "Value");
        SetSecondFogData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSecondFogData");
        SetSecondFogData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSecondFogData_NativeFunction);
        SetSecondFogData_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSecondFogData_NativeFunction, "NewValue");
        SetNonDirectionalInscatteringColorDistance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNonDirectionalInscatteringColorDistance");
        SetNonDirectionalInscatteringColorDistance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNonDirectionalInscatteringColorDistance_NativeFunction);
        SetNonDirectionalInscatteringColorDistance_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNonDirectionalInscatteringColorDistance_NativeFunction, "Value");
        SetInscatteringTextureTint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetInscatteringTextureTint");
        SetInscatteringTextureTint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetInscatteringTextureTint_NativeFunction);
        SetInscatteringTextureTint_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInscatteringTextureTint_NativeFunction, "Value");
        SetInscatteringColorCubemapAngle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetInscatteringColorCubemapAngle");
        SetInscatteringColorCubemapAngle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetInscatteringColorCubemapAngle_NativeFunction);
        SetInscatteringColorCubemapAngle_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInscatteringColorCubemapAngle_NativeFunction, "Value");
        SetInscatteringColorCubemap_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetInscatteringColorCubemap");
        SetInscatteringColorCubemap_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetInscatteringColorCubemap_NativeFunction);
        SetInscatteringColorCubemap_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInscatteringColorCubemap_NativeFunction, "Value");
        SetFullyDirectionalInscatteringColorDistance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFullyDirectionalInscatteringColorDistance");
        SetFullyDirectionalInscatteringColorDistance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFullyDirectionalInscatteringColorDistance_NativeFunction);
        SetFullyDirectionalInscatteringColorDistance_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFullyDirectionalInscatteringColorDistance_NativeFunction, "Value");
        SetFogMaxOpacity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFogMaxOpacity");
        SetFogMaxOpacity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFogMaxOpacity_NativeFunction);
        SetFogMaxOpacity_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFogMaxOpacity_NativeFunction, "Value");
        SetFogInscatteringColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFogInscatteringColor");
        SetFogInscatteringColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFogInscatteringColor_NativeFunction);
        SetFogInscatteringColor_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFogInscatteringColor_NativeFunction, "Value");
        SetFogHeightFalloff_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFogHeightFalloff");
        SetFogHeightFalloff_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFogHeightFalloff_NativeFunction);
        SetFogHeightFalloff_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFogHeightFalloff_NativeFunction, "Value");
        SetFogDensity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFogDensity");
        SetFogDensity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFogDensity_NativeFunction);
        SetFogDensity_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFogDensity_NativeFunction, "Value");
        SetFogCutoffDistance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFogCutoffDistance");
        SetFogCutoffDistance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFogCutoffDistance_NativeFunction);
        SetFogCutoffDistance_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFogCutoffDistance_NativeFunction, "Value");
        SetDirectionalInscatteringStartDistance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDirectionalInscatteringStartDistance");
        SetDirectionalInscatteringStartDistance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDirectionalInscatteringStartDistance_NativeFunction);
        SetDirectionalInscatteringStartDistance_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDirectionalInscatteringStartDistance_NativeFunction, "Value");
        SetDirectionalInscatteringExponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDirectionalInscatteringExponent");
        SetDirectionalInscatteringExponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDirectionalInscatteringExponent_NativeFunction);
        SetDirectionalInscatteringExponent_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDirectionalInscatteringExponent_NativeFunction, "Value");
        SetDirectionalInscatteringColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDirectionalInscatteringColor");
        SetDirectionalInscatteringColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDirectionalInscatteringColor_NativeFunction);
        SetDirectionalInscatteringColor_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDirectionalInscatteringColor_NativeFunction, "Value");
        
        
    }
    
    protected ExponentialHeightFogComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Engine.ExponentialHeightFogComponent:FogDensity
    static readonly int FogDensity_Offset;
    
    public float FogDensity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, FogDensity_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.ExponentialHeightFogComponent:FogHeightFalloff
    static readonly int FogHeightFalloff_Offset;
    
    public float FogHeightFalloff
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, FogHeightFalloff_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.ExponentialHeightFogComponent:SecondFogData
    static readonly int SecondFogData_Offset;
    
    public UnrealSharp.Engine.ExponentialHeightFogData SecondFogData
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ExponentialHeightFogData>.FromNative(IntPtr.Add(NativeObject, SecondFogData_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.ExponentialHeightFogComponent:FogInscatteringLuminance
    static readonly int FogInscatteringLuminance_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor FogInscatteringLuminance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, FogInscatteringLuminance_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.ExponentialHeightFogComponent:SkyAtmosphereAmbientContributionColorScale
    static readonly int SkyAtmosphereAmbientContributionColorScale_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor SkyAtmosphereAmbientContributionColorScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, SkyAtmosphereAmbientContributionColorScale_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/Engine.ExponentialHeightFogComponent:InscatteringColorCubemap
    static readonly int InscatteringColorCubemap_Offset;
    
    public UnrealSharp.Engine.TextureCube InscatteringColorCubemap
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.TextureCube>.FromNative(IntPtr.Add(NativeObject, InscatteringColorCubemap_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.ExponentialHeightFogComponent:InscatteringColorCubemapAngle
    static readonly int InscatteringColorCubemapAngle_Offset;
    
    public float InscatteringColorCubemapAngle
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, InscatteringColorCubemapAngle_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.ExponentialHeightFogComponent:InscatteringTextureTint
    static readonly int InscatteringTextureTint_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor InscatteringTextureTint
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, InscatteringTextureTint_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.ExponentialHeightFogComponent:FullyDirectionalInscatteringColorDistance
    static readonly int FullyDirectionalInscatteringColorDistance_Offset;
    
    public float FullyDirectionalInscatteringColorDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, FullyDirectionalInscatteringColorDistance_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.ExponentialHeightFogComponent:NonDirectionalInscatteringColorDistance
    static readonly int NonDirectionalInscatteringColorDistance_Offset;
    
    public float NonDirectionalInscatteringColorDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, NonDirectionalInscatteringColorDistance_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.ExponentialHeightFogComponent:DirectionalInscatteringExponent
    static readonly int DirectionalInscatteringExponent_Offset;
    
    public float DirectionalInscatteringExponent
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, DirectionalInscatteringExponent_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.ExponentialHeightFogComponent:DirectionalInscatteringStartDistance
    static readonly int DirectionalInscatteringStartDistance_Offset;
    
    public float DirectionalInscatteringStartDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, DirectionalInscatteringStartDistance_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.ExponentialHeightFogComponent:DirectionalInscatteringLuminance
    static readonly int DirectionalInscatteringLuminance_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor DirectionalInscatteringLuminance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, DirectionalInscatteringLuminance_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.ExponentialHeightFogComponent:FogMaxOpacity
    static readonly int FogMaxOpacity_Offset;
    
    public float FogMaxOpacity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, FogMaxOpacity_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.ExponentialHeightFogComponent:StartDistance
    static readonly int StartDistance_Offset;
    
    public float StartDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, StartDistance_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.ExponentialHeightFogComponent:FogCutoffDistance
    static readonly int FogCutoffDistance_Offset;
    
    public float FogCutoffDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, FogCutoffDistance_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.ExponentialHeightFogComponent:bEnableVolumetricFog
    static readonly int bEnableVolumetricFog_Offset;
    
    public bool bEnableVolumetricFog
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bEnableVolumetricFog_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.ExponentialHeightFogComponent:VolumetricFogScatteringDistribution
    static readonly int VolumetricFogScatteringDistribution_Offset;
    
    public float VolumetricFogScatteringDistribution
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, VolumetricFogScatteringDistribution_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.ExponentialHeightFogComponent:VolumetricFogAlbedo
    static readonly int VolumetricFogAlbedo_Offset;
    
    public UnrealSharp.CoreUObject.Color VolumetricFogAlbedo
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(NativeObject, VolumetricFogAlbedo_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.ExponentialHeightFogComponent:VolumetricFogEmissive
    static readonly int VolumetricFogEmissive_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor VolumetricFogEmissive
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, VolumetricFogEmissive_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.ExponentialHeightFogComponent:VolumetricFogExtinctionScale
    static readonly int VolumetricFogExtinctionScale_Offset;
    
    public float VolumetricFogExtinctionScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, VolumetricFogExtinctionScale_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.ExponentialHeightFogComponent:VolumetricFogDistance
    static readonly int VolumetricFogDistance_Offset;
    
    public float VolumetricFogDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, VolumetricFogDistance_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.ExponentialHeightFogComponent:VolumetricFogStartDistance
    static readonly int VolumetricFogStartDistance_Offset;
    
    public float VolumetricFogStartDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, VolumetricFogStartDistance_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.ExponentialHeightFogComponent:VolumetricFogNearFadeInDistance
    static readonly int VolumetricFogNearFadeInDistance_Offset;
    
    public float VolumetricFogNearFadeInDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, VolumetricFogNearFadeInDistance_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.ExponentialHeightFogComponent:VolumetricFogStaticLightingScatteringIntensity
    static readonly int VolumetricFogStaticLightingScatteringIntensity_Offset;
    
    public float VolumetricFogStaticLightingScatteringIntensity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, VolumetricFogStaticLightingScatteringIntensity_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.ExponentialHeightFogComponent:bOverrideLightColorsWithFogInscatteringColors
    static readonly int bOverrideLightColorsWithFogInscatteringColors_Offset;
    
    public bool bOverrideLightColorsWithFogInscatteringColors
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bOverrideLightColorsWithFogInscatteringColors_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetVolumetricFogScatteringDistribution
    static readonly IntPtr SetVolumetricFogScatteringDistribution_NativeFunction;
    static readonly int SetVolumetricFogScatteringDistribution_ParamsSize;
    static readonly int SetVolumetricFogScatteringDistribution_NewValue_Offset;
    
    public void SetVolumetricFogScatteringDistribution(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVolumetricFogScatteringDistribution_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetVolumetricFogScatteringDistribution_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVolumetricFogScatteringDistribution_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetVolumetricFogExtinctionScale
    static readonly IntPtr SetVolumetricFogExtinctionScale_NativeFunction;
    static readonly int SetVolumetricFogExtinctionScale_ParamsSize;
    static readonly int SetVolumetricFogExtinctionScale_NewValue_Offset;
    
    public void SetVolumetricFogExtinctionScale(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVolumetricFogExtinctionScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetVolumetricFogExtinctionScale_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVolumetricFogExtinctionScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetVolumetricFogEmissive
    static readonly IntPtr SetVolumetricFogEmissive_NativeFunction;
    static readonly int SetVolumetricFogEmissive_ParamsSize;
    static readonly int SetVolumetricFogEmissive_NewValue_Offset;
    
    public void SetVolumetricFogEmissive(UnrealSharp.CoreUObject.LinearColor newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVolumetricFogEmissive_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetVolumetricFogEmissive_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVolumetricFogEmissive_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetVolumetricFogDistance
    static readonly IntPtr SetVolumetricFogDistance_NativeFunction;
    static readonly int SetVolumetricFogDistance_ParamsSize;
    static readonly int SetVolumetricFogDistance_NewValue_Offset;
    
    public void SetVolumetricFogDistance(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVolumetricFogDistance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetVolumetricFogDistance_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVolumetricFogDistance_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetVolumetricFogAlbedo
    static readonly IntPtr SetVolumetricFogAlbedo_NativeFunction;
    static readonly int SetVolumetricFogAlbedo_ParamsSize;
    static readonly int SetVolumetricFogAlbedo_NewValue_Offset;
    
    public void SetVolumetricFogAlbedo(UnrealSharp.CoreUObject.Color newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVolumetricFogAlbedo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(ParamsBuffer, SetVolumetricFogAlbedo_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVolumetricFogAlbedo_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetVolumetricFog
    static readonly IntPtr SetVolumetricFog_NativeFunction;
    static readonly int SetVolumetricFog_ParamsSize;
    static readonly int SetVolumetricFog_bNewValue_Offset;
    
    public void SetVolumetricFog(bool bNewValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVolumetricFog_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetVolumetricFog_bNewValue_Offset), 0, null, bNewValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVolumetricFog_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetStartDistance
    static readonly IntPtr SetStartDistance_NativeFunction;
    static readonly int SetStartDistance_ParamsSize;
    static readonly int SetStartDistance_Value_Offset;
    
    public void SetStartDistance(float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetStartDistance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetStartDistance_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetStartDistance_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetSecondFogHeightOffset
    static readonly IntPtr SetSecondFogHeightOffset_NativeFunction;
    static readonly int SetSecondFogHeightOffset_ParamsSize;
    static readonly int SetSecondFogHeightOffset_Value_Offset;
    
    public void SetSecondFogHeightOffset(float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSecondFogHeightOffset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSecondFogHeightOffset_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSecondFogHeightOffset_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetSecondFogHeightFalloff
    static readonly IntPtr SetSecondFogHeightFalloff_NativeFunction;
    static readonly int SetSecondFogHeightFalloff_ParamsSize;
    static readonly int SetSecondFogHeightFalloff_Value_Offset;
    
    public void SetSecondFogHeightFalloff(float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSecondFogHeightFalloff_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSecondFogHeightFalloff_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSecondFogHeightFalloff_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetSecondFogDensity
    static readonly IntPtr SetSecondFogDensity_NativeFunction;
    static readonly int SetSecondFogDensity_ParamsSize;
    static readonly int SetSecondFogDensity_Value_Offset;
    
    public void SetSecondFogDensity(float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSecondFogDensity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSecondFogDensity_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSecondFogDensity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetSecondFogData
    static readonly IntPtr SetSecondFogData_NativeFunction;
    static readonly int SetSecondFogData_ParamsSize;
    static readonly int SetSecondFogData_NewValue_Offset;
    
    public void SetSecondFogData(UnrealSharp.Engine.ExponentialHeightFogData newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSecondFogData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ExponentialHeightFogData>.ToNative(IntPtr.Add(ParamsBuffer, SetSecondFogData_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSecondFogData_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetNonDirectionalInscatteringColorDistance
    static readonly IntPtr SetNonDirectionalInscatteringColorDistance_NativeFunction;
    static readonly int SetNonDirectionalInscatteringColorDistance_ParamsSize;
    static readonly int SetNonDirectionalInscatteringColorDistance_Value_Offset;
    
    public void SetNonDirectionalInscatteringColorDistance(float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNonDirectionalInscatteringColorDistance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetNonDirectionalInscatteringColorDistance_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNonDirectionalInscatteringColorDistance_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetInscatteringTextureTint
    static readonly IntPtr SetInscatteringTextureTint_NativeFunction;
    static readonly int SetInscatteringTextureTint_ParamsSize;
    static readonly int SetInscatteringTextureTint_Value_Offset;
    
    public void SetInscatteringTextureTint(UnrealSharp.CoreUObject.LinearColor value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetInscatteringTextureTint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetInscatteringTextureTint_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetInscatteringTextureTint_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetInscatteringColorCubemapAngle
    static readonly IntPtr SetInscatteringColorCubemapAngle_NativeFunction;
    static readonly int SetInscatteringColorCubemapAngle_ParamsSize;
    static readonly int SetInscatteringColorCubemapAngle_Value_Offset;
    
    public void SetInscatteringColorCubemapAngle(float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetInscatteringColorCubemapAngle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetInscatteringColorCubemapAngle_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetInscatteringColorCubemapAngle_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetInscatteringColorCubemap
    static readonly IntPtr SetInscatteringColorCubemap_NativeFunction;
    static readonly int SetInscatteringColorCubemap_ParamsSize;
    static readonly int SetInscatteringColorCubemap_Value_Offset;
    
    public void SetInscatteringColorCubemap(UnrealSharp.Engine.TextureCube value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetInscatteringColorCubemap_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.TextureCube>.ToNative(IntPtr.Add(ParamsBuffer, SetInscatteringColorCubemap_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetInscatteringColorCubemap_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetFullyDirectionalInscatteringColorDistance
    static readonly IntPtr SetFullyDirectionalInscatteringColorDistance_NativeFunction;
    static readonly int SetFullyDirectionalInscatteringColorDistance_ParamsSize;
    static readonly int SetFullyDirectionalInscatteringColorDistance_Value_Offset;
    
    public void SetFullyDirectionalInscatteringColorDistance(float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFullyDirectionalInscatteringColorDistance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetFullyDirectionalInscatteringColorDistance_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFullyDirectionalInscatteringColorDistance_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetFogMaxOpacity
    static readonly IntPtr SetFogMaxOpacity_NativeFunction;
    static readonly int SetFogMaxOpacity_ParamsSize;
    static readonly int SetFogMaxOpacity_Value_Offset;
    
    public void SetFogMaxOpacity(float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFogMaxOpacity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetFogMaxOpacity_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFogMaxOpacity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetFogInscatteringColor
    static readonly IntPtr SetFogInscatteringColor_NativeFunction;
    static readonly int SetFogInscatteringColor_ParamsSize;
    static readonly int SetFogInscatteringColor_Value_Offset;
    
    public void SetFogInscatteringColor(UnrealSharp.CoreUObject.LinearColor value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFogInscatteringColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetFogInscatteringColor_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFogInscatteringColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetFogHeightFalloff
    static readonly IntPtr SetFogHeightFalloff_NativeFunction;
    static readonly int SetFogHeightFalloff_ParamsSize;
    static readonly int SetFogHeightFalloff_Value_Offset;
    
    public void SetFogHeightFalloff(float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFogHeightFalloff_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetFogHeightFalloff_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFogHeightFalloff_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetFogDensity
    static readonly IntPtr SetFogDensity_NativeFunction;
    static readonly int SetFogDensity_ParamsSize;
    static readonly int SetFogDensity_Value_Offset;
    
    public void SetFogDensity(float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFogDensity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetFogDensity_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFogDensity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetFogCutoffDistance
    static readonly IntPtr SetFogCutoffDistance_NativeFunction;
    static readonly int SetFogCutoffDistance_ParamsSize;
    static readonly int SetFogCutoffDistance_Value_Offset;
    
    public void SetFogCutoffDistance(float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFogCutoffDistance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetFogCutoffDistance_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFogCutoffDistance_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetDirectionalInscatteringStartDistance
    static readonly IntPtr SetDirectionalInscatteringStartDistance_NativeFunction;
    static readonly int SetDirectionalInscatteringStartDistance_ParamsSize;
    static readonly int SetDirectionalInscatteringStartDistance_Value_Offset;
    
    public void SetDirectionalInscatteringStartDistance(float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDirectionalInscatteringStartDistance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetDirectionalInscatteringStartDistance_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDirectionalInscatteringStartDistance_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetDirectionalInscatteringExponent
    static readonly IntPtr SetDirectionalInscatteringExponent_NativeFunction;
    static readonly int SetDirectionalInscatteringExponent_ParamsSize;
    static readonly int SetDirectionalInscatteringExponent_Value_Offset;
    
    public void SetDirectionalInscatteringExponent(float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDirectionalInscatteringExponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetDirectionalInscatteringExponent_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDirectionalInscatteringExponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ExponentialHeightFogComponent:SetDirectionalInscatteringColor
    static readonly IntPtr SetDirectionalInscatteringColor_NativeFunction;
    static readonly int SetDirectionalInscatteringColor_ParamsSize;
    static readonly int SetDirectionalInscatteringColor_Value_Offset;
    
    public void SetDirectionalInscatteringColor(UnrealSharp.CoreUObject.LinearColor value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDirectionalInscatteringColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetDirectionalInscatteringColor_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDirectionalInscatteringColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
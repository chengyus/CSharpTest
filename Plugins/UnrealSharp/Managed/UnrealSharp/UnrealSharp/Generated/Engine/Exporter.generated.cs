// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
abstract public partial class Exporter : UnrealSharp.CoreUObject.Object
{
    
    static readonly IntPtr NativeClassPtr;
    static Exporter()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("Exporter");
        
        SupportedClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SupportedClass");
        bText_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bText");
        bText_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bText");
        ExportTask_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ExportTask");
        
        RunAssetExportTasks_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RunAssetExportTasks");
        RunAssetExportTasks_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RunAssetExportTasks_NativeFunction);
        RunAssetExportTasks_ExportTasks_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RunAssetExportTasks_NativeFunction, "ExportTasks");
        RunAssetExportTasks_ExportTasks_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(RunAssetExportTasks_NativeFunction, "ExportTasks");
        RunAssetExportTasks_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RunAssetExportTasks_NativeFunction, "ReturnValue");
        RunAssetExportTask_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RunAssetExportTask");
        RunAssetExportTask_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RunAssetExportTask_NativeFunction);
        RunAssetExportTask_Task_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RunAssetExportTask_NativeFunction, "Task");
        RunAssetExportTask_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RunAssetExportTask_NativeFunction, "ReturnValue");
        
        IntPtr ScriptRunAssetExportTask_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ScriptRunAssetExportTask");
        ScriptRunAssetExportTask_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ScriptRunAssetExportTask_NativeFunction);
        ScriptRunAssetExportTask_Task_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScriptRunAssetExportTask_NativeFunction, "Task");
        ScriptRunAssetExportTask_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScriptRunAssetExportTask_NativeFunction, "ReturnValue");
        
        
    }
    
    protected Exporter(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ClassProperty /Script/Engine.Exporter:SupportedClass
    static readonly int SupportedClass_Offset;
    
    public SubclassOf<UnrealSharp.CoreUObject.Object> SupportedClass
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(NativeObject, SupportedClass_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(NativeObject, SupportedClass_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.Exporter:bText
    static readonly int bText_Offset;
    static readonly IntPtr bText_NativeProperty;
    
    public bool bText
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bText_NativeProperty, bText_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bText_NativeProperty, bText_Offset, value);
        }
    }
    
    // ObjectProperty /Script/Engine.Exporter:ExportTask
    static readonly int ExportTask_Offset;
    
    public UnrealSharp.Engine.AssetExportTask ExportTask
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.AssetExportTask>.FromNative(IntPtr.Add(NativeObject, ExportTask_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.AssetExportTask>.ToNative(IntPtr.Add(NativeObject, ExportTask_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Engine.Exporter:RunAssetExportTasks
    static readonly IntPtr RunAssetExportTasks_NativeFunction;
    static readonly int RunAssetExportTasks_ParamsSize;
    static readonly int RunAssetExportTasks_ExportTasks_Offset;
    static readonly int RunAssetExportTasks_ExportTasks_ElementSize;
    static readonly int RunAssetExportTasks_ReturnValue_Offset;
    
    public static bool RunAssetExportTasks(System.Collections.Generic.IList<UnrealSharp.Engine.AssetExportTask> exportTasks)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RunAssetExportTasks_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExportTasks_NativeBuffer = IntPtr.Add(ParamsBuffer, RunAssetExportTasks_ExportTasks_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.AssetExportTask> ExportTasks_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.AssetExportTask>(1, ObjectMarshaller<UnrealSharp.Engine.AssetExportTask>.ToNative, ObjectMarshaller<UnrealSharp.Engine.AssetExportTask>.FromNative, RunAssetExportTasks_ExportTasks_ElementSize);
            ExportTasks_Marshaler.ToNative(ExportTasks_NativeBuffer, 0, null, exportTasks);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RunAssetExportTasks_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RunAssetExportTasks_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Exporter:RunAssetExportTask
    static readonly IntPtr RunAssetExportTask_NativeFunction;
    static readonly int RunAssetExportTask_ParamsSize;
    static readonly int RunAssetExportTask_Task_Offset;
    static readonly int RunAssetExportTask_ReturnValue_Offset;
    
    public static bool RunAssetExportTask(UnrealSharp.Engine.AssetExportTask task)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RunAssetExportTask_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AssetExportTask>.ToNative(IntPtr.Add(ParamsBuffer, RunAssetExportTask_Task_Offset), 0, null, task);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RunAssetExportTask_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RunAssetExportTask_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Exporter:ScriptRunAssetExportTask
    IntPtr ScriptRunAssetExportTask_NativeFunction;
    static readonly int ScriptRunAssetExportTask_ParamsSize;
    static readonly int ScriptRunAssetExportTask_Task_Offset;
    static readonly int ScriptRunAssetExportTask_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual bool ScriptRunAssetExportTask(UnrealSharp.Engine.AssetExportTask task)
    {
        unsafe
        {
            if (ScriptRunAssetExportTask_NativeFunction == IntPtr.Zero)
            {
                ScriptRunAssetExportTask_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ScriptRunAssetExportTask");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ScriptRunAssetExportTask_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AssetExportTask>.ToNative(IntPtr.Add(ParamsBuffer, ScriptRunAssetExportTask_Task_Offset), 0, null, task);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ScriptRunAssetExportTask_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ScriptRunAssetExportTask_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool ScriptRunAssetExportTask_Implementation(UnrealSharp.Engine.AssetExportTask task)
    {
        return default(bool);
    }
    void Invoke_ScriptRunAssetExportTask(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.AssetExportTask task = ObjectMarshaller<UnrealSharp.Engine.AssetExportTask>.FromNative(IntPtr.Add(buffer, ScriptRunAssetExportTask_Task_Offset), 0, null);
            bool returnValue = ScriptRunAssetExportTask_Implementation(task);
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    
}
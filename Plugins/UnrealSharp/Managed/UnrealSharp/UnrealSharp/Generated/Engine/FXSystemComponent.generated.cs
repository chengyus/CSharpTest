// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
abstract public partial class FXSystemComponent : UnrealSharp.Engine.PrimitiveComponent
{
    
    static FXSystemComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("FXSystemComponent");
        
        
        SetVectorParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVectorParameter");
        SetVectorParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVectorParameter_NativeFunction);
        SetVectorParameter_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVectorParameter_NativeFunction, "ParameterName");
        SetVectorParameter_Param_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVectorParameter_NativeFunction, "Param");
        SetUseAutoManageAttachment_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetUseAutoManageAttachment");
        SetUseAutoManageAttachment_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetUseAutoManageAttachment_NativeFunction);
        SetUseAutoManageAttachment_bAutoManage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUseAutoManageAttachment_NativeFunction, "bAutoManage");
        SetIntParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIntParameter");
        SetIntParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIntParameter_NativeFunction);
        SetIntParameter_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIntParameter_NativeFunction, "ParameterName");
        SetIntParameter_Param_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIntParameter_NativeFunction, "Param");
        SetFloatParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFloatParameter");
        SetFloatParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFloatParameter_NativeFunction);
        SetFloatParameter_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFloatParameter_NativeFunction, "ParameterName");
        SetFloatParameter_Param_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFloatParameter_NativeFunction, "Param");
        SetEmitterEnable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetEmitterEnable");
        SetEmitterEnable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetEmitterEnable_NativeFunction);
        SetEmitterEnable_EmitterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEmitterEnable_NativeFunction, "EmitterName");
        SetEmitterEnable_bNewEnableState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEmitterEnable_NativeFunction, "bNewEnableState");
        SetColorParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetColorParameter");
        SetColorParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetColorParameter_NativeFunction);
        SetColorParameter_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetColorParameter_NativeFunction, "ParameterName");
        SetColorParameter_Param_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetColorParameter_NativeFunction, "Param");
        SetBoolParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBoolParameter");
        SetBoolParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBoolParameter_NativeFunction);
        SetBoolParameter_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoolParameter_NativeFunction, "ParameterName");
        SetBoolParameter_Param_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoolParameter_NativeFunction, "Param");
        SetAutoAttachmentParameters_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAutoAttachmentParameters");
        SetAutoAttachmentParameters_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAutoAttachmentParameters_NativeFunction);
        SetAutoAttachmentParameters_Parent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAutoAttachmentParameters_NativeFunction, "Parent");
        SetAutoAttachmentParameters_SocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAutoAttachmentParameters_NativeFunction, "SocketName");
        SetAutoAttachmentParameters_LocationRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAutoAttachmentParameters_NativeFunction, "LocationRule");
        SetAutoAttachmentParameters_RotationRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAutoAttachmentParameters_NativeFunction, "RotationRule");
        SetAutoAttachmentParameters_ScaleRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAutoAttachmentParameters_NativeFunction, "ScaleRule");
        SetActorParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetActorParameter");
        SetActorParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetActorParameter_NativeFunction);
        SetActorParameter_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetActorParameter_NativeFunction, "ParameterName");
        SetActorParameter_Param_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetActorParameter_NativeFunction, "Param");
        ReleaseToPool_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReleaseToPool");
        GetFXSystemAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFXSystemAsset");
        GetFXSystemAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFXSystemAsset_NativeFunction);
        GetFXSystemAsset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFXSystemAsset_NativeFunction, "ReturnValue");
        
        
    }
    
    protected FXSystemComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.FXSystemComponent:SetVectorParameter
    static readonly IntPtr SetVectorParameter_NativeFunction;
    static readonly int SetVectorParameter_ParamsSize;
    static readonly int SetVectorParameter_ParameterName_Offset;
    static readonly int SetVectorParameter_Param_Offset;
    
    public void SetVectorParameter(Name parameterName, System.DoubleNumerics.Vector3 param)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVectorParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetVectorParameter_ParameterName_Offset), 0, null, parameterName);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetVectorParameter_Param_Offset), 0, null, param);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVectorParameter_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.FXSystemComponent:SetUseAutoManageAttachment
    static readonly IntPtr SetUseAutoManageAttachment_NativeFunction;
    static readonly int SetUseAutoManageAttachment_ParamsSize;
    static readonly int SetUseAutoManageAttachment_bAutoManage_Offset;
    
    public void SetUseAutoManageAttachment(bool bAutoManage)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetUseAutoManageAttachment_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetUseAutoManageAttachment_bAutoManage_Offset), 0, null, bAutoManage);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetUseAutoManageAttachment_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.FXSystemComponent:SetIntParameter
    static readonly IntPtr SetIntParameter_NativeFunction;
    static readonly int SetIntParameter_ParamsSize;
    static readonly int SetIntParameter_ParameterName_Offset;
    static readonly int SetIntParameter_Param_Offset;
    
    public void SetIntParameter(Name parameterName, int param)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIntParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetIntParameter_ParameterName_Offset), 0, null, parameterName);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetIntParameter_Param_Offset), 0, null, param);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIntParameter_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.FXSystemComponent:SetFloatParameter
    static readonly IntPtr SetFloatParameter_NativeFunction;
    static readonly int SetFloatParameter_ParamsSize;
    static readonly int SetFloatParameter_ParameterName_Offset;
    static readonly int SetFloatParameter_Param_Offset;
    
    public void SetFloatParameter(Name parameterName, float param)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFloatParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetFloatParameter_ParameterName_Offset), 0, null, parameterName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetFloatParameter_Param_Offset), 0, null, param);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFloatParameter_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.FXSystemComponent:SetEmitterEnable
    static readonly IntPtr SetEmitterEnable_NativeFunction;
    static readonly int SetEmitterEnable_ParamsSize;
    static readonly int SetEmitterEnable_EmitterName_Offset;
    static readonly int SetEmitterEnable_bNewEnableState_Offset;
    
    public void SetEmitterEnable(Name emitterName, bool bNewEnableState)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetEmitterEnable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetEmitterEnable_EmitterName_Offset), 0, null, emitterName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetEmitterEnable_bNewEnableState_Offset), 0, null, bNewEnableState);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetEmitterEnable_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.FXSystemComponent:SetColorParameter
    static readonly IntPtr SetColorParameter_NativeFunction;
    static readonly int SetColorParameter_ParamsSize;
    static readonly int SetColorParameter_ParameterName_Offset;
    static readonly int SetColorParameter_Param_Offset;
    
    public void SetColorParameter(Name parameterName, UnrealSharp.CoreUObject.LinearColor param)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetColorParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetColorParameter_ParameterName_Offset), 0, null, parameterName);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetColorParameter_Param_Offset), 0, null, param);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetColorParameter_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.FXSystemComponent:SetBoolParameter
    static readonly IntPtr SetBoolParameter_NativeFunction;
    static readonly int SetBoolParameter_ParamsSize;
    static readonly int SetBoolParameter_ParameterName_Offset;
    static readonly int SetBoolParameter_Param_Offset;
    
    public void SetBoolParameter(Name parameterName, bool param)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBoolParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetBoolParameter_ParameterName_Offset), 0, null, parameterName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetBoolParameter_Param_Offset), 0, null, param);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBoolParameter_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.FXSystemComponent:SetAutoAttachmentParameters
    static readonly IntPtr SetAutoAttachmentParameters_NativeFunction;
    static readonly int SetAutoAttachmentParameters_ParamsSize;
    static readonly int SetAutoAttachmentParameters_Parent_Offset;
    static readonly int SetAutoAttachmentParameters_SocketName_Offset;
    static readonly int SetAutoAttachmentParameters_LocationRule_Offset;
    static readonly int SetAutoAttachmentParameters_RotationRule_Offset;
    static readonly int SetAutoAttachmentParameters_ScaleRule_Offset;
    
    public void SetAutoAttachmentParameters(UnrealSharp.Engine.SceneComponent parent, Name socketName, UnrealSharp.Engine.EAttachmentRule locationRule, UnrealSharp.Engine.EAttachmentRule rotationRule, UnrealSharp.Engine.EAttachmentRule scaleRule)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAutoAttachmentParameters_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.ToNative(IntPtr.Add(ParamsBuffer, SetAutoAttachmentParameters_Parent_Offset), 0, null, parent);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetAutoAttachmentParameters_SocketName_Offset), 0, null, socketName);
            BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.ToNative(IntPtr.Add(ParamsBuffer, SetAutoAttachmentParameters_LocationRule_Offset), 0, null, locationRule);
            BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.ToNative(IntPtr.Add(ParamsBuffer, SetAutoAttachmentParameters_RotationRule_Offset), 0, null, rotationRule);
            BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.ToNative(IntPtr.Add(ParamsBuffer, SetAutoAttachmentParameters_ScaleRule_Offset), 0, null, scaleRule);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAutoAttachmentParameters_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.FXSystemComponent:SetActorParameter
    static readonly IntPtr SetActorParameter_NativeFunction;
    static readonly int SetActorParameter_ParamsSize;
    static readonly int SetActorParameter_ParameterName_Offset;
    static readonly int SetActorParameter_Param_Offset;
    
    public void SetActorParameter(Name parameterName, UnrealSharp.Engine.Actor param)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetActorParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetActorParameter_ParameterName_Offset), 0, null, parameterName);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, SetActorParameter_Param_Offset), 0, null, param);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetActorParameter_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.FXSystemComponent:ReleaseToPool
    static readonly IntPtr ReleaseToPool_NativeFunction;
    
    public void ReleaseToPool()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReleaseToPool_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.FXSystemComponent:GetFXSystemAsset
    static readonly IntPtr GetFXSystemAsset_NativeFunction;
    static readonly int GetFXSystemAsset_ParamsSize;
    static readonly int GetFXSystemAsset_ReturnValue_Offset;
    
    public UnrealSharp.Engine.FXSystemAsset GetFXSystemAsset()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFXSystemAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFXSystemAsset_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.FXSystemAsset returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.FXSystemAsset>.FromNative(IntPtr.Add(ParamsBuffer, GetFXSystemAsset_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
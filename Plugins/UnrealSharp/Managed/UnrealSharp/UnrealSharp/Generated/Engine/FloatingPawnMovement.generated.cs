// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class FloatingPawnMovement : UnrealSharp.Engine.PawnMovementComponent
{
    
    static FloatingPawnMovement()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("FloatingPawnMovement");
        
        MaxSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxSpeed");
        Acceleration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Acceleration");
        Deceleration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Deceleration");
        TurningBoost_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TurningBoost");
        
        
        
    }
    
    protected FloatingPawnMovement(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Engine.FloatingPawnMovement:MaxSpeed
    static readonly int MaxSpeed_Offset;
    
    public float MaxSpeed
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxSpeed_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxSpeed_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.FloatingPawnMovement:Acceleration
    static readonly int Acceleration_Offset;
    
    public float Acceleration
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Acceleration_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Acceleration_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.FloatingPawnMovement:Deceleration
    static readonly int Deceleration_Offset;
    
    public float Deceleration
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Deceleration_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Deceleration_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.FloatingPawnMovement:TurningBoost
    static readonly int TurningBoost_Offset;
    
    public float TurningBoost
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, TurningBoost_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, TurningBoost_Offset), 0, this, value);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class ForceFeedbackComponent : UnrealSharp.Engine.SceneComponent
{
    
    static ForceFeedbackComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ForceFeedbackComponent");
        
        ForceFeedbackEffect_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ForceFeedbackEffect");
        bLooping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bLooping");
        bLooping_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bLooping");
        bIgnoreTimeDilation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIgnoreTimeDilation");
        bIgnoreTimeDilation_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIgnoreTimeDilation");
        bOverrideAttenuation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOverrideAttenuation");
        bOverrideAttenuation_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bOverrideAttenuation");
        IntensityMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "IntensityMultiplier");
        AttenuationSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AttenuationSettings");
        AttenuationOverrides_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AttenuationOverrides");
        
        Stop_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Stop");
        SetIntensityMultiplier_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIntensityMultiplier");
        SetIntensityMultiplier_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIntensityMultiplier_NativeFunction);
        SetIntensityMultiplier_NewIntensityMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIntensityMultiplier_NativeFunction, "NewIntensityMultiplier");
        SetForceFeedbackEffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetForceFeedbackEffect");
        SetForceFeedbackEffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetForceFeedbackEffect_NativeFunction);
        SetForceFeedbackEffect_NewForceFeedbackEffect_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetForceFeedbackEffect_NativeFunction, "NewForceFeedbackEffect");
        Play_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Play");
        Play_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Play_NativeFunction);
        Play_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Play_NativeFunction, "StartTime");
        BP_GetAttenuationSettingsToApply_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BP_GetAttenuationSettingsToApply");
        BP_GetAttenuationSettingsToApply_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BP_GetAttenuationSettingsToApply_NativeFunction);
        BP_GetAttenuationSettingsToApply_OutAttenuationSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BP_GetAttenuationSettingsToApply_NativeFunction, "OutAttenuationSettings");
        BP_GetAttenuationSettingsToApply_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BP_GetAttenuationSettingsToApply_NativeFunction, "ReturnValue");
        AdjustAttenuation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AdjustAttenuation");
        AdjustAttenuation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AdjustAttenuation_NativeFunction);
        AdjustAttenuation_InAttenuationSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AdjustAttenuation_NativeFunction, "InAttenuationSettings");
        
        
    }
    
    protected ForceFeedbackComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Engine.ForceFeedbackComponent:ForceFeedbackEffect
    static readonly int ForceFeedbackEffect_Offset;
    
    public UnrealSharp.Engine.ForceFeedbackEffect ForceFeedbackEffect
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.ForceFeedbackEffect>.FromNative(IntPtr.Add(NativeObject, ForceFeedbackEffect_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.ForceFeedbackComponent:bLooping
    static readonly int bLooping_Offset;
    static readonly IntPtr bLooping_NativeProperty;
    
    public bool bLooping
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bLooping_NativeProperty, bLooping_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bLooping_NativeProperty, bLooping_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.ForceFeedbackComponent:bIgnoreTimeDilation
    static readonly int bIgnoreTimeDilation_Offset;
    static readonly IntPtr bIgnoreTimeDilation_NativeProperty;
    
    public bool bIgnoreTimeDilation
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIgnoreTimeDilation_NativeProperty, bIgnoreTimeDilation_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bIgnoreTimeDilation_NativeProperty, bIgnoreTimeDilation_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.ForceFeedbackComponent:bOverrideAttenuation
    static readonly int bOverrideAttenuation_Offset;
    static readonly IntPtr bOverrideAttenuation_NativeProperty;
    
    public bool bOverrideAttenuation
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bOverrideAttenuation_NativeProperty, bOverrideAttenuation_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bOverrideAttenuation_NativeProperty, bOverrideAttenuation_Offset, value);
        }
    }
    
    // FloatProperty /Script/Engine.ForceFeedbackComponent:IntensityMultiplier
    static readonly int IntensityMultiplier_Offset;
    
    public float IntensityMultiplier
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, IntensityMultiplier_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, IntensityMultiplier_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/Engine.ForceFeedbackComponent:AttenuationSettings
    static readonly int AttenuationSettings_Offset;
    
    public UnrealSharp.Engine.ForceFeedbackAttenuation AttenuationSettings
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.ForceFeedbackAttenuation>.FromNative(IntPtr.Add(NativeObject, AttenuationSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.ForceFeedbackAttenuation>.ToNative(IntPtr.Add(NativeObject, AttenuationSettings_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.ForceFeedbackComponent:AttenuationOverrides
    static readonly int AttenuationOverrides_Offset;
    
    public UnrealSharp.Engine.ForceFeedbackAttenuationSettings AttenuationOverrides
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.ForceFeedbackAttenuationSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, AttenuationOverrides_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.Engine.ForceFeedbackAttenuationSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, AttenuationOverrides_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Engine.ForceFeedbackComponent:Stop
    static readonly IntPtr Stop_NativeFunction;
    
    public void Stop()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Stop_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.ForceFeedbackComponent:SetIntensityMultiplier
    static readonly IntPtr SetIntensityMultiplier_NativeFunction;
    static readonly int SetIntensityMultiplier_ParamsSize;
    static readonly int SetIntensityMultiplier_NewIntensityMultiplier_Offset;
    
    public void SetIntensityMultiplier(float newIntensityMultiplier)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIntensityMultiplier_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetIntensityMultiplier_NewIntensityMultiplier_Offset), 0, null, newIntensityMultiplier);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIntensityMultiplier_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ForceFeedbackComponent:SetForceFeedbackEffect
    static readonly IntPtr SetForceFeedbackEffect_NativeFunction;
    static readonly int SetForceFeedbackEffect_ParamsSize;
    static readonly int SetForceFeedbackEffect_NewForceFeedbackEffect_Offset;
    
    public void SetForceFeedbackEffect(UnrealSharp.Engine.ForceFeedbackEffect newForceFeedbackEffect)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetForceFeedbackEffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.ForceFeedbackEffect>.ToNative(IntPtr.Add(ParamsBuffer, SetForceFeedbackEffect_NewForceFeedbackEffect_Offset), 0, null, newForceFeedbackEffect);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetForceFeedbackEffect_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ForceFeedbackComponent:Play
    static readonly IntPtr Play_NativeFunction;
    static readonly int Play_ParamsSize;
    static readonly int Play_StartTime_Offset;
    
    public void Play(float startTime = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Play_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Play_StartTime_Offset), 0, null, startTime);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Play_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ForceFeedbackComponent:BP_GetAttenuationSettingsToApply
    static readonly IntPtr BP_GetAttenuationSettingsToApply_NativeFunction;
    static readonly int BP_GetAttenuationSettingsToApply_ParamsSize;
    static readonly int BP_GetAttenuationSettingsToApply_OutAttenuationSettings_Offset;
    static readonly int BP_GetAttenuationSettingsToApply_ReturnValue_Offset;
    
    public bool GetAttenuationSettingsToApply(out UnrealSharp.Engine.ForceFeedbackAttenuationSettings outAttenuationSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BP_GetAttenuationSettingsToApply_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BP_GetAttenuationSettingsToApply_NativeFunction, ParamsBuffer);
            
            outAttenuationSettings = UnrealSharp.Engine.ForceFeedbackAttenuationSettingsMarshaler.FromNative(IntPtr.Add(ParamsBuffer, BP_GetAttenuationSettingsToApply_OutAttenuationSettings_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BP_GetAttenuationSettingsToApply_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ForceFeedbackComponent:AdjustAttenuation
    static readonly IntPtr AdjustAttenuation_NativeFunction;
    static readonly int AdjustAttenuation_ParamsSize;
    static readonly int AdjustAttenuation_InAttenuationSettings_Offset;
    
    public void AdjustAttenuation(UnrealSharp.Engine.ForceFeedbackAttenuationSettings inAttenuationSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AdjustAttenuation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.ForceFeedbackAttenuationSettingsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AdjustAttenuation_InAttenuationSettings_Offset), 0, null, inAttenuationSettings);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AdjustAttenuation_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    
}
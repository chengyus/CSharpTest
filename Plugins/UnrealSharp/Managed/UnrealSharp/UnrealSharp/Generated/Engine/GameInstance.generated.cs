// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class GameInstance : UnrealSharp.CoreUObject.Object
{
    
    static GameInstance()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("GameInstance");
        
        
        
        IntPtr HandleTravelError_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HandleTravelError");
        HandleTravelError_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HandleTravelError_NativeFunction);
        HandleTravelError_FailureType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HandleTravelError_NativeFunction, "FailureType");
        
        IntPtr HandleNetworkError_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HandleNetworkError");
        HandleNetworkError_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HandleNetworkError_NativeFunction);
        HandleNetworkError_FailureType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HandleNetworkError_NativeFunction, "FailureType");
        HandleNetworkError_bIsServer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HandleNetworkError_NativeFunction, "bIsServer");
        
        
    }
    
    protected GameInstance(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.GameInstance:ReceiveShutdown
    IntPtr ReceiveShutdown_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveShutdown()
    {
        unsafe
        {
            if (ReceiveShutdown_NativeFunction == IntPtr.Zero)
            {
                ReceiveShutdown_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveShutdown");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveShutdown_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveShutdown_Implementation()
    {
    }
    void Invoke_ReceiveShutdown(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            ReceiveShutdown_Implementation();
        }
    }
    
    // Function /Script/Engine.GameInstance:ReceiveInit
    IntPtr ReceiveInit_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveInit()
    {
        unsafe
        {
            if (ReceiveInit_NativeFunction == IntPtr.Zero)
            {
                ReceiveInit_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveInit");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveInit_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveInit_Implementation()
    {
    }
    void Invoke_ReceiveInit(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            ReceiveInit_Implementation();
        }
    }
    
    // Function /Script/Engine.GameInstance:HandleTravelError
    IntPtr HandleTravelError_NativeFunction;
    static readonly int HandleTravelError_ParamsSize;
    static readonly int HandleTravelError_FailureType_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void HandleTravelError(UnrealSharp.Engine.ETravelFailure failureType)
    {
        unsafe
        {
            if (HandleTravelError_NativeFunction == IntPtr.Zero)
            {
                HandleTravelError_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "HandleTravelError");
            }
            byte* ParamsBufferAllocation = stackalloc byte[HandleTravelError_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ETravelFailure>.ToNative(IntPtr.Add(ParamsBuffer, HandleTravelError_FailureType_Offset), 0, null, failureType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HandleTravelError_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void HandleTravelError_Implementation(UnrealSharp.Engine.ETravelFailure failureType)
    {
    }
    void Invoke_HandleTravelError(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.ETravelFailure failureType = BlittableMarshaller<UnrealSharp.Engine.ETravelFailure>.FromNative(IntPtr.Add(buffer, HandleTravelError_FailureType_Offset), 0, null);
            HandleTravelError_Implementation(failureType);
        }
    }
    
    // Function /Script/Engine.GameInstance:HandleNetworkError
    IntPtr HandleNetworkError_NativeFunction;
    static readonly int HandleNetworkError_ParamsSize;
    static readonly int HandleNetworkError_FailureType_Offset;
    static readonly int HandleNetworkError_bIsServer_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void HandleNetworkError(UnrealSharp.NetCore.ENetworkFailure failureType, bool bIsServer)
    {
        unsafe
        {
            if (HandleNetworkError_NativeFunction == IntPtr.Zero)
            {
                HandleNetworkError_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "HandleNetworkError");
            }
            byte* ParamsBufferAllocation = stackalloc byte[HandleNetworkError_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.NetCore.ENetworkFailure>.ToNative(IntPtr.Add(ParamsBuffer, HandleNetworkError_FailureType_Offset), 0, null, failureType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, HandleNetworkError_bIsServer_Offset), 0, null, bIsServer);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HandleNetworkError_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void HandleNetworkError_Implementation(UnrealSharp.NetCore.ENetworkFailure failureType, bool bIsServer)
    {
    }
    void Invoke_HandleNetworkError(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.NetCore.ENetworkFailure failureType = BlittableMarshaller<UnrealSharp.NetCore.ENetworkFailure>.FromNative(IntPtr.Add(buffer, HandleNetworkError_FailureType_Offset), 0, null);
            bool bIsServer = BoolMarshaller.FromNative(IntPtr.Add(buffer, HandleNetworkError_bIsServer_Offset), 0, null);
            HandleNetworkError_Implementation(failureType, bIsServer);
        }
    }
    
    
}
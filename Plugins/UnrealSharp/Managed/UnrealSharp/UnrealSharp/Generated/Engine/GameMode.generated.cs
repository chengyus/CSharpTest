// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class GameMode : UnrealSharp.Engine.GameModeBase
{
    
    static GameMode()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("GameMode");
        
        bDelayedStart_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bDelayedStart");
        bDelayedStart_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bDelayedStart");
        NumSpectators_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NumSpectators");
        NumPlayers_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NumPlayers");
        NumBots_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NumBots");
        MinRespawnDelay_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinRespawnDelay");
        NumTravellingPlayers_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NumTravellingPlayers");
        
        StartMatch_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartMatch");
        Say_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Say");
        Say_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Say_NativeFunction);
        Say_Msg_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Say_NativeFunction, "Msg");
        RestartGame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RestartGame");
        IsMatchInProgress_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsMatchInProgress");
        IsMatchInProgress_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsMatchInProgress_NativeFunction);
        IsMatchInProgress_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsMatchInProgress_NativeFunction, "ReturnValue");
        GetMatchState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMatchState");
        GetMatchState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMatchState_NativeFunction);
        GetMatchState_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMatchState_NativeFunction, "ReturnValue");
        EndMatch_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EndMatch");
        AbortMatch_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AbortMatch");
        
        IntPtr ReadyToStartMatch_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReadyToStartMatch");
        ReadyToStartMatch_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReadyToStartMatch_NativeFunction);
        ReadyToStartMatch_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadyToStartMatch_NativeFunction, "ReturnValue");
        
        IntPtr ReadyToEndMatch_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReadyToEndMatch");
        ReadyToEndMatch_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReadyToEndMatch_NativeFunction);
        ReadyToEndMatch_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadyToEndMatch_NativeFunction, "ReturnValue");
        
        IntPtr K2_OnSetMatchState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_OnSetMatchState");
        K2_OnSetMatchState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_OnSetMatchState_NativeFunction);
        K2_OnSetMatchState_NewState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_OnSetMatchState_NativeFunction, "NewState");
        
        
    }
    
    protected GameMode(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/Engine.GameMode:bDelayedStart
    static readonly int bDelayedStart_Offset;
    static readonly IntPtr bDelayedStart_NativeProperty;
    
    public bool bDelayedStart
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bDelayedStart_NativeProperty, bDelayedStart_Offset);
        }
    }
    
    // IntProperty /Script/Engine.GameMode:NumSpectators
    static readonly int NumSpectators_Offset;
    
    public int NumSpectators
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, NumSpectators_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Engine.GameMode:NumPlayers
    static readonly int NumPlayers_Offset;
    
    public int NumPlayers
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, NumPlayers_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Engine.GameMode:NumBots
    static readonly int NumBots_Offset;
    
    public int NumBots
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, NumBots_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.GameMode:MinRespawnDelay
    static readonly int MinRespawnDelay_Offset;
    
    public float MinRespawnDelay
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinRespawnDelay_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Engine.GameMode:NumTravellingPlayers
    static readonly int NumTravellingPlayers_Offset;
    
    public int NumTravellingPlayers
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, NumTravellingPlayers_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.GameMode:StartMatch
    static readonly IntPtr StartMatch_NativeFunction;
    
    public void StartMatch()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StartMatch_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.GameMode:Say
    static readonly IntPtr Say_NativeFunction;
    static readonly int Say_ParamsSize;
    static readonly int Say_Msg_Offset;
    
    public void Say(string msg)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Say_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Msg_NativePtr = IntPtr.Add(ParamsBuffer,Say_Msg_Offset);
            StringMarshaller.ToNative(Msg_NativePtr,0,null,msg);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Say_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Msg_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.GameMode:RestartGame
    static readonly IntPtr RestartGame_NativeFunction;
    
    public void RestartGame()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RestartGame_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.GameMode:IsMatchInProgress
    static readonly IntPtr IsMatchInProgress_NativeFunction;
    static readonly int IsMatchInProgress_ParamsSize;
    static readonly int IsMatchInProgress_ReturnValue_Offset;
    
    public bool IsMatchInProgress()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsMatchInProgress_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsMatchInProgress_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsMatchInProgress_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameMode:GetMatchState
    static readonly IntPtr GetMatchState_NativeFunction;
    static readonly int GetMatchState_ParamsSize;
    static readonly int GetMatchState_ReturnValue_Offset;
    
    public Name GetMatchState()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMatchState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMatchState_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetMatchState_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameMode:EndMatch
    static readonly IntPtr EndMatch_NativeFunction;
    
    public void EndMatch()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, EndMatch_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.GameMode:AbortMatch
    static readonly IntPtr AbortMatch_NativeFunction;
    
    public void AbortMatch()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AbortMatch_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.GameMode:ReadyToStartMatch
    IntPtr ReadyToStartMatch_NativeFunction;
    static readonly int ReadyToStartMatch_ParamsSize;
    static readonly int ReadyToStartMatch_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual bool ReadyToStartMatch()
    {
        unsafe
        {
            if (ReadyToStartMatch_NativeFunction == IntPtr.Zero)
            {
                ReadyToStartMatch_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReadyToStartMatch");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReadyToStartMatch_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReadyToStartMatch_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ReadyToStartMatch_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool ReadyToStartMatch_Implementation()
    {
        return default(bool);
    }
    void Invoke_ReadyToStartMatch(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            bool returnValue = ReadyToStartMatch_Implementation();
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/Engine.GameMode:ReadyToEndMatch
    IntPtr ReadyToEndMatch_NativeFunction;
    static readonly int ReadyToEndMatch_ParamsSize;
    static readonly int ReadyToEndMatch_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual bool ReadyToEndMatch()
    {
        unsafe
        {
            if (ReadyToEndMatch_NativeFunction == IntPtr.Zero)
            {
                ReadyToEndMatch_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReadyToEndMatch");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReadyToEndMatch_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReadyToEndMatch_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ReadyToEndMatch_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool ReadyToEndMatch_Implementation()
    {
        return default(bool);
    }
    void Invoke_ReadyToEndMatch(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            bool returnValue = ReadyToEndMatch_Implementation();
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/Engine.GameMode:K2_OnSetMatchState
    IntPtr K2_OnSetMatchState_NativeFunction;
    static readonly int K2_OnSetMatchState_ParamsSize;
    static readonly int K2_OnSetMatchState_NewState_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void OnSetMatchState(Name newState)
    {
        unsafe
        {
            if (K2_OnSetMatchState_NativeFunction == IntPtr.Zero)
            {
                K2_OnSetMatchState_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "K2_OnSetMatchState");
            }
            byte* ParamsBufferAllocation = stackalloc byte[K2_OnSetMatchState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, K2_OnSetMatchState_NewState_Offset), 0, null, newState);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_OnSetMatchState_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void K2_OnSetMatchState_Implementation(Name newState)
    {
    }
    void Invoke_K2_OnSetMatchState(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            Name newState = BlittableMarshaller<Name>.FromNative(IntPtr.Add(buffer, K2_OnSetMatchState_NewState_Offset), 0, null);
            K2_OnSetMatchState_Implementation(newState);
        }
    }
    
    
}
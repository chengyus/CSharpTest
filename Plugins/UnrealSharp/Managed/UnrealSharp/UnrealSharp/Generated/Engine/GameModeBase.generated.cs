// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class GameModeBase : UnrealSharp.Engine.Info
{
    
    static GameModeBase()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("GameModeBase");
        
        OptionsString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OptionsString");
        OptionsString_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "OptionsString");
        GameSessionClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "GameSessionClass");
        GameStateClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "GameStateClass");
        PlayerControllerClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PlayerControllerClass");
        PlayerStateClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PlayerStateClass");
        HUDClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "HUDClass");
        DefaultPawnClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultPawnClass");
        SpectatorClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SpectatorClass");
        ReplaySpectatorPlayerControllerClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ReplaySpectatorPlayerControllerClass");
        ServerStatReplicatorClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ServerStatReplicatorClass");
        bUseSeamlessTravel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseSeamlessTravel");
        bUseSeamlessTravel_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseSeamlessTravel");
        bStartPlayersAsSpectators_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bStartPlayersAsSpectators");
        bStartPlayersAsSpectators_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bStartPlayersAsSpectators");
        bPauseable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bPauseable");
        bPauseable_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bPauseable");
        
        StartPlay_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartPlay");
        ReturnToMainMenuHost_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReturnToMainMenuHost");
        RestartPlayerAtTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RestartPlayerAtTransform");
        RestartPlayerAtTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RestartPlayerAtTransform_NativeFunction);
        RestartPlayerAtTransform_NewPlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RestartPlayerAtTransform_NativeFunction, "NewPlayer");
        RestartPlayerAtTransform_SpawnTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RestartPlayerAtTransform_NativeFunction, "SpawnTransform");
        RestartPlayerAtPlayerStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RestartPlayerAtPlayerStart");
        RestartPlayerAtPlayerStart_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RestartPlayerAtPlayerStart_NativeFunction);
        RestartPlayerAtPlayerStart_NewPlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RestartPlayerAtPlayerStart_NativeFunction, "NewPlayer");
        RestartPlayerAtPlayerStart_StartSpot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RestartPlayerAtPlayerStart_NativeFunction, "StartSpot");
        RestartPlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RestartPlayer");
        RestartPlayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RestartPlayer_NativeFunction);
        RestartPlayer_NewPlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RestartPlayer_NativeFunction, "NewPlayer");
        ResetLevel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetLevel");
        K2_FindPlayerStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_FindPlayerStart");
        K2_FindPlayerStart_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_FindPlayerStart_NativeFunction);
        K2_FindPlayerStart_Player_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_FindPlayerStart_NativeFunction, "Player");
        K2_FindPlayerStart_IncomingName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_FindPlayerStart_NativeFunction, "IncomingName");
        K2_FindPlayerStart_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_FindPlayerStart_NativeFunction, "ReturnValue");
        HasMatchStarted_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasMatchStarted");
        HasMatchStarted_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasMatchStarted_NativeFunction);
        HasMatchStarted_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasMatchStarted_NativeFunction, "ReturnValue");
        HasMatchEnded_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasMatchEnded");
        HasMatchEnded_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasMatchEnded_NativeFunction);
        HasMatchEnded_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasMatchEnded_NativeFunction, "ReturnValue");
        GetNumSpectators_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumSpectators");
        GetNumSpectators_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumSpectators_NativeFunction);
        GetNumSpectators_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumSpectators_NativeFunction, "ReturnValue");
        GetNumPlayers_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumPlayers");
        GetNumPlayers_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumPlayers_NativeFunction);
        GetNumPlayers_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumPlayers_NativeFunction, "ReturnValue");
        ChangeName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ChangeName");
        ChangeName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ChangeName_NativeFunction);
        ChangeName_Controller_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ChangeName_NativeFunction, "Controller");
        ChangeName_NewName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ChangeName_NativeFunction, "NewName");
        ChangeName_bNameChange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ChangeName_NativeFunction, "bNameChange");
        
        IntPtr SpawnDefaultPawnFor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SpawnDefaultPawnFor");
        SpawnDefaultPawnFor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SpawnDefaultPawnFor_NativeFunction);
        SpawnDefaultPawnFor_NewPlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDefaultPawnFor_NativeFunction, "NewPlayer");
        SpawnDefaultPawnFor_StartSpot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDefaultPawnFor_NativeFunction, "StartSpot");
        SpawnDefaultPawnFor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDefaultPawnFor_NativeFunction, "ReturnValue");
        
        IntPtr SpawnDefaultPawnAtTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SpawnDefaultPawnAtTransform");
        SpawnDefaultPawnAtTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SpawnDefaultPawnAtTransform_NativeFunction);
        SpawnDefaultPawnAtTransform_NewPlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDefaultPawnAtTransform_NativeFunction, "NewPlayer");
        SpawnDefaultPawnAtTransform_SpawnTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDefaultPawnAtTransform_NativeFunction, "SpawnTransform");
        SpawnDefaultPawnAtTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDefaultPawnAtTransform_NativeFunction, "ReturnValue");
        
        IntPtr ShouldReset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ShouldReset");
        ShouldReset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ShouldReset_NativeFunction);
        ShouldReset_ActorToReset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ShouldReset_NativeFunction, "ActorToReset");
        ShouldReset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ShouldReset_NativeFunction, "ReturnValue");
        
        IntPtr PlayerCanRestart_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlayerCanRestart");
        PlayerCanRestart_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PlayerCanRestart_NativeFunction);
        PlayerCanRestart_Player_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayerCanRestart_NativeFunction, "Player");
        PlayerCanRestart_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayerCanRestart_NativeFunction, "ReturnValue");
        
        IntPtr MustSpectate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MustSpectate");
        MustSpectate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MustSpectate_NativeFunction);
        MustSpectate_NewPlayerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MustSpectate_NativeFunction, "NewPlayerController");
        MustSpectate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MustSpectate_NativeFunction, "ReturnValue");
        
        IntPtr K2_PostLogin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_PostLogin");
        K2_PostLogin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_PostLogin_NativeFunction);
        K2_PostLogin_NewPlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_PostLogin_NativeFunction, "NewPlayer");
        
        IntPtr K2_OnSwapPlayerControllers_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_OnSwapPlayerControllers");
        K2_OnSwapPlayerControllers_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_OnSwapPlayerControllers_NativeFunction);
        K2_OnSwapPlayerControllers_OldPC_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_OnSwapPlayerControllers_NativeFunction, "OldPC");
        K2_OnSwapPlayerControllers_NewPC_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_OnSwapPlayerControllers_NativeFunction, "NewPC");
        
        IntPtr K2_OnRestartPlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_OnRestartPlayer");
        K2_OnRestartPlayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_OnRestartPlayer_NativeFunction);
        K2_OnRestartPlayer_NewPlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_OnRestartPlayer_NativeFunction, "NewPlayer");
        
        IntPtr K2_OnLogout_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_OnLogout");
        K2_OnLogout_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_OnLogout_NativeFunction);
        K2_OnLogout_ExitingController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_OnLogout_NativeFunction, "ExitingController");
        
        IntPtr K2_OnChangeName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_OnChangeName");
        K2_OnChangeName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_OnChangeName_NativeFunction);
        K2_OnChangeName_Other_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_OnChangeName_NativeFunction, "Other");
        K2_OnChangeName_NewName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_OnChangeName_NativeFunction, "NewName");
        K2_OnChangeName_bNameChange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_OnChangeName_NativeFunction, "bNameChange");
        
        IntPtr InitStartSpot_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "InitStartSpot");
        InitStartSpot_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(InitStartSpot_NativeFunction);
        InitStartSpot_StartSpot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InitStartSpot_NativeFunction, "StartSpot");
        InitStartSpot_NewPlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InitStartSpot_NativeFunction, "NewPlayer");
        
        IntPtr InitializeHUDForPlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "InitializeHUDForPlayer");
        InitializeHUDForPlayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(InitializeHUDForPlayer_NativeFunction);
        InitializeHUDForPlayer_NewPlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InitializeHUDForPlayer_NativeFunction, "NewPlayer");
        
        IntPtr HandleStartingNewPlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HandleStartingNewPlayer");
        HandleStartingNewPlayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HandleStartingNewPlayer_NativeFunction);
        HandleStartingNewPlayer_NewPlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HandleStartingNewPlayer_NativeFunction, "NewPlayer");
        
        IntPtr GetDefaultPawnClassForController_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDefaultPawnClassForController");
        GetDefaultPawnClassForController_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDefaultPawnClassForController_NativeFunction);
        GetDefaultPawnClassForController_InController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultPawnClassForController_NativeFunction, "InController");
        GetDefaultPawnClassForController_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultPawnClassForController_NativeFunction, "ReturnValue");
        
        IntPtr FindPlayerStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindPlayerStart");
        FindPlayerStart_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindPlayerStart_NativeFunction);
        FindPlayerStart_Player_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindPlayerStart_NativeFunction, "Player");
        FindPlayerStart_IncomingName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindPlayerStart_NativeFunction, "IncomingName");
        FindPlayerStart_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindPlayerStart_NativeFunction, "ReturnValue");
        
        IntPtr ChoosePlayerStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ChoosePlayerStart");
        ChoosePlayerStart_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ChoosePlayerStart_NativeFunction);
        ChoosePlayerStart_Player_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ChoosePlayerStart_NativeFunction, "Player");
        ChoosePlayerStart_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ChoosePlayerStart_NativeFunction, "ReturnValue");
        
        IntPtr CanSpectate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CanSpectate");
        CanSpectate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CanSpectate_NativeFunction);
        CanSpectate_Viewer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanSpectate_NativeFunction, "Viewer");
        CanSpectate_ViewTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanSpectate_NativeFunction, "ViewTarget");
        CanSpectate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanSpectate_NativeFunction, "ReturnValue");
        
        
    }
    
    protected GameModeBase(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StrProperty /Script/Engine.GameModeBase:OptionsString
    static readonly int OptionsString_Offset;
    static readonly IntPtr OptionsString_NativeProperty;
    
    public string OptionsString
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,OptionsString_Offset),0,this);
        }
    }
    
    // ClassProperty /Script/Engine.GameModeBase:GameSessionClass
    static readonly int GameSessionClass_Offset;
    
    public SubclassOf<UnrealSharp.Engine.GameSession> GameSessionClass
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.Engine.GameSession>.FromNative(IntPtr.Add(NativeObject, GameSessionClass_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            SubclassOfMarshaller<UnrealSharp.Engine.GameSession>.ToNative(IntPtr.Add(NativeObject, GameSessionClass_Offset), 0, this, value);
        }
    }
    
    // ClassProperty /Script/Engine.GameModeBase:GameStateClass
    static readonly int GameStateClass_Offset;
    
    public SubclassOf<UnrealSharp.Engine.GameStateBase> GameStateClass
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.Engine.GameStateBase>.FromNative(IntPtr.Add(NativeObject, GameStateClass_Offset), 0, this);
        }
    }
    
    // ClassProperty /Script/Engine.GameModeBase:PlayerControllerClass
    static readonly int PlayerControllerClass_Offset;
    
    public SubclassOf<UnrealSharp.Engine.PlayerController> PlayerControllerClass
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(NativeObject, PlayerControllerClass_Offset), 0, this);
        }
    }
    
    // ClassProperty /Script/Engine.GameModeBase:PlayerStateClass
    static readonly int PlayerStateClass_Offset;
    
    public SubclassOf<UnrealSharp.Engine.PlayerState> PlayerStateClass
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.Engine.PlayerState>.FromNative(IntPtr.Add(NativeObject, PlayerStateClass_Offset), 0, this);
        }
    }
    
    // ClassProperty /Script/Engine.GameModeBase:HUDClass
    static readonly int HUDClass_Offset;
    
    public SubclassOf<UnrealSharp.Engine.HUD> HUDClass
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.Engine.HUD>.FromNative(IntPtr.Add(NativeObject, HUDClass_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            SubclassOfMarshaller<UnrealSharp.Engine.HUD>.ToNative(IntPtr.Add(NativeObject, HUDClass_Offset), 0, this, value);
        }
    }
    
    // ClassProperty /Script/Engine.GameModeBase:DefaultPawnClass
    static readonly int DefaultPawnClass_Offset;
    
    public SubclassOf<UnrealSharp.Engine.Pawn> DefaultPawnClass
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(NativeObject, DefaultPawnClass_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            SubclassOfMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(NativeObject, DefaultPawnClass_Offset), 0, this, value);
        }
    }
    
    // ClassProperty /Script/Engine.GameModeBase:SpectatorClass
    static readonly int SpectatorClass_Offset;
    
    public SubclassOf<UnrealSharp.Engine.SpectatorPawn> SpectatorClass
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.Engine.SpectatorPawn>.FromNative(IntPtr.Add(NativeObject, SpectatorClass_Offset), 0, this);
        }
    }
    
    // ClassProperty /Script/Engine.GameModeBase:ReplaySpectatorPlayerControllerClass
    static readonly int ReplaySpectatorPlayerControllerClass_Offset;
    
    public SubclassOf<UnrealSharp.Engine.PlayerController> ReplaySpectatorPlayerControllerClass
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(NativeObject, ReplaySpectatorPlayerControllerClass_Offset), 0, this);
        }
    }
    
    // ClassProperty /Script/Engine.GameModeBase:ServerStatReplicatorClass
    static readonly int ServerStatReplicatorClass_Offset;
    
    public SubclassOf<UnrealSharp.Engine.ServerStatReplicator> ServerStatReplicatorClass
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.Engine.ServerStatReplicator>.FromNative(IntPtr.Add(NativeObject, ServerStatReplicatorClass_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.GameModeBase:bUseSeamlessTravel
    static readonly int bUseSeamlessTravel_Offset;
    static readonly IntPtr bUseSeamlessTravel_NativeProperty;
    
    public bool bUseSeamlessTravel
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseSeamlessTravel_NativeProperty, bUseSeamlessTravel_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bUseSeamlessTravel_NativeProperty, bUseSeamlessTravel_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.GameModeBase:bStartPlayersAsSpectators
    static readonly int bStartPlayersAsSpectators_Offset;
    static readonly IntPtr bStartPlayersAsSpectators_NativeProperty;
    
    public bool bStartPlayersAsSpectators
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bStartPlayersAsSpectators_NativeProperty, bStartPlayersAsSpectators_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.GameModeBase:bPauseable
    static readonly int bPauseable_Offset;
    static readonly IntPtr bPauseable_NativeProperty;
    
    public bool bPauseable
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bPauseable_NativeProperty, bPauseable_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bPauseable_NativeProperty, bPauseable_Offset, value);
        }
    }
    
    // Function /Script/Engine.GameModeBase:StartPlay
    static readonly IntPtr StartPlay_NativeFunction;
    
    public void StartPlay()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StartPlay_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.GameModeBase:ReturnToMainMenuHost
    static readonly IntPtr ReturnToMainMenuHost_NativeFunction;
    
    public void ReturnToMainMenuHost()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReturnToMainMenuHost_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.GameModeBase:RestartPlayerAtTransform
    static readonly IntPtr RestartPlayerAtTransform_NativeFunction;
    static readonly int RestartPlayerAtTransform_ParamsSize;
    static readonly int RestartPlayerAtTransform_NewPlayer_Offset;
    static readonly int RestartPlayerAtTransform_SpawnTransform_Offset;
    
    public void RestartPlayerAtTransform(UnrealSharp.Engine.Controller newPlayer, UnrealSharp.Transform spawnTransform)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RestartPlayerAtTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, RestartPlayerAtTransform_NewPlayer_Offset), 0, null, newPlayer);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, RestartPlayerAtTransform_SpawnTransform_Offset), 0, null, spawnTransform);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RestartPlayerAtTransform_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.GameModeBase:RestartPlayerAtPlayerStart
    static readonly IntPtr RestartPlayerAtPlayerStart_NativeFunction;
    static readonly int RestartPlayerAtPlayerStart_ParamsSize;
    static readonly int RestartPlayerAtPlayerStart_NewPlayer_Offset;
    static readonly int RestartPlayerAtPlayerStart_StartSpot_Offset;
    
    public void RestartPlayerAtPlayerStart(UnrealSharp.Engine.Controller newPlayer, UnrealSharp.Engine.Actor startSpot)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RestartPlayerAtPlayerStart_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, RestartPlayerAtPlayerStart_NewPlayer_Offset), 0, null, newPlayer);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, RestartPlayerAtPlayerStart_StartSpot_Offset), 0, null, startSpot);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RestartPlayerAtPlayerStart_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameModeBase:RestartPlayer
    static readonly IntPtr RestartPlayer_NativeFunction;
    static readonly int RestartPlayer_ParamsSize;
    static readonly int RestartPlayer_NewPlayer_Offset;
    
    public void RestartPlayer(UnrealSharp.Engine.Controller newPlayer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RestartPlayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, RestartPlayer_NewPlayer_Offset), 0, null, newPlayer);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RestartPlayer_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameModeBase:ResetLevel
    static readonly IntPtr ResetLevel_NativeFunction;
    
    public void ResetLevel()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetLevel_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.GameModeBase:K2_FindPlayerStart
    static readonly IntPtr K2_FindPlayerStart_NativeFunction;
    static readonly int K2_FindPlayerStart_ParamsSize;
    static readonly int K2_FindPlayerStart_Player_Offset;
    static readonly int K2_FindPlayerStart_IncomingName_Offset;
    static readonly int K2_FindPlayerStart_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Actor K2_FindPlayerStart(UnrealSharp.Engine.Controller player, string incomingName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_FindPlayerStart_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, K2_FindPlayerStart_Player_Offset), 0, null, player);
            IntPtr IncomingName_NativePtr = IntPtr.Add(ParamsBuffer,K2_FindPlayerStart_IncomingName_Offset);
            StringMarshaller.ToNative(IncomingName_NativePtr,0,null,incomingName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_FindPlayerStart_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Actor returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(ParamsBuffer, K2_FindPlayerStart_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(IncomingName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameModeBase:HasMatchStarted
    static readonly IntPtr HasMatchStarted_NativeFunction;
    static readonly int HasMatchStarted_ParamsSize;
    static readonly int HasMatchStarted_ReturnValue_Offset;
    
    public bool HasMatchStarted()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasMatchStarted_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasMatchStarted_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasMatchStarted_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameModeBase:HasMatchEnded
    static readonly IntPtr HasMatchEnded_NativeFunction;
    static readonly int HasMatchEnded_ParamsSize;
    static readonly int HasMatchEnded_ReturnValue_Offset;
    
    public bool HasMatchEnded()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasMatchEnded_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasMatchEnded_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasMatchEnded_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameModeBase:GetNumSpectators
    static readonly IntPtr GetNumSpectators_NativeFunction;
    static readonly int GetNumSpectators_ParamsSize;
    static readonly int GetNumSpectators_ReturnValue_Offset;
    
    public int GetNumSpectators()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumSpectators_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumSpectators_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumSpectators_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameModeBase:GetNumPlayers
    static readonly IntPtr GetNumPlayers_NativeFunction;
    static readonly int GetNumPlayers_ParamsSize;
    static readonly int GetNumPlayers_ReturnValue_Offset;
    
    public int GetNumPlayers()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumPlayers_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumPlayers_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumPlayers_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameModeBase:ChangeName
    static readonly IntPtr ChangeName_NativeFunction;
    static readonly int ChangeName_ParamsSize;
    static readonly int ChangeName_Controller_Offset;
    static readonly int ChangeName_NewName_Offset;
    static readonly int ChangeName_bNameChange_Offset;
    
    public void ChangeName(UnrealSharp.Engine.Controller controller, string newName, bool bNameChange)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ChangeName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, ChangeName_Controller_Offset), 0, null, controller);
            IntPtr NewName_NativePtr = IntPtr.Add(ParamsBuffer,ChangeName_NewName_Offset);
            StringMarshaller.ToNative(NewName_NativePtr,0,null,newName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ChangeName_bNameChange_Offset), 0, null, bNameChange);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ChangeName_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(NewName_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.GameModeBase:SpawnDefaultPawnFor
    IntPtr SpawnDefaultPawnFor_NativeFunction;
    static readonly int SpawnDefaultPawnFor_ParamsSize;
    static readonly int SpawnDefaultPawnFor_NewPlayer_Offset;
    static readonly int SpawnDefaultPawnFor_StartSpot_Offset;
    static readonly int SpawnDefaultPawnFor_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.Engine.Pawn SpawnDefaultPawnFor(UnrealSharp.Engine.Controller newPlayer, UnrealSharp.Engine.Actor startSpot)
    {
        unsafe
        {
            if (SpawnDefaultPawnFor_NativeFunction == IntPtr.Zero)
            {
                SpawnDefaultPawnFor_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "SpawnDefaultPawnFor");
            }
            byte* ParamsBufferAllocation = stackalloc byte[SpawnDefaultPawnFor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDefaultPawnFor_NewPlayer_Offset), 0, null, newPlayer);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDefaultPawnFor_StartSpot_Offset), 0, null, startSpot);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SpawnDefaultPawnFor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Pawn returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(ParamsBuffer, SpawnDefaultPawnFor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.Engine.Pawn SpawnDefaultPawnFor_Implementation(UnrealSharp.Engine.Controller newPlayer, UnrealSharp.Engine.Actor startSpot)
    {
        return default(UnrealSharp.Engine.Pawn);
    }
    void Invoke_SpawnDefaultPawnFor(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Controller newPlayer = ObjectMarshaller<UnrealSharp.Engine.Controller>.FromNative(IntPtr.Add(buffer, SpawnDefaultPawnFor_NewPlayer_Offset), 0, null);
            UnrealSharp.Engine.Actor startSpot = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, SpawnDefaultPawnFor_StartSpot_Offset), 0, null);
            UnrealSharp.Engine.Pawn returnValue = SpawnDefaultPawnFor_Implementation(newPlayer, startSpot);
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/Engine.GameModeBase:SpawnDefaultPawnAtTransform
    IntPtr SpawnDefaultPawnAtTransform_NativeFunction;
    static readonly int SpawnDefaultPawnAtTransform_ParamsSize;
    static readonly int SpawnDefaultPawnAtTransform_NewPlayer_Offset;
    static readonly int SpawnDefaultPawnAtTransform_SpawnTransform_Offset;
    static readonly int SpawnDefaultPawnAtTransform_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.Engine.Pawn SpawnDefaultPawnAtTransform(UnrealSharp.Engine.Controller newPlayer, UnrealSharp.Transform spawnTransform)
    {
        unsafe
        {
            if (SpawnDefaultPawnAtTransform_NativeFunction == IntPtr.Zero)
            {
                SpawnDefaultPawnAtTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "SpawnDefaultPawnAtTransform");
            }
            byte* ParamsBufferAllocation = stackalloc byte[SpawnDefaultPawnAtTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDefaultPawnAtTransform_NewPlayer_Offset), 0, null, newPlayer);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDefaultPawnAtTransform_SpawnTransform_Offset), 0, null, spawnTransform);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SpawnDefaultPawnAtTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Pawn returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(ParamsBuffer, SpawnDefaultPawnAtTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.Engine.Pawn SpawnDefaultPawnAtTransform_Implementation(UnrealSharp.Engine.Controller newPlayer, UnrealSharp.Transform spawnTransform)
    {
        return default(UnrealSharp.Engine.Pawn);
    }
    void Invoke_SpawnDefaultPawnAtTransform(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Controller newPlayer = ObjectMarshaller<UnrealSharp.Engine.Controller>.FromNative(IntPtr.Add(buffer, SpawnDefaultPawnAtTransform_NewPlayer_Offset), 0, null);
            UnrealSharp.Transform spawnTransform = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(buffer, SpawnDefaultPawnAtTransform_SpawnTransform_Offset), 0, null);
            UnrealSharp.Engine.Pawn returnValue = SpawnDefaultPawnAtTransform_Implementation(newPlayer, spawnTransform);
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/Engine.GameModeBase:ShouldReset
    IntPtr ShouldReset_NativeFunction;
    static readonly int ShouldReset_ParamsSize;
    static readonly int ShouldReset_ActorToReset_Offset;
    static readonly int ShouldReset_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual bool ShouldReset(UnrealSharp.Engine.Actor actorToReset)
    {
        unsafe
        {
            if (ShouldReset_NativeFunction == IntPtr.Zero)
            {
                ShouldReset_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ShouldReset");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ShouldReset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ShouldReset_ActorToReset_Offset), 0, null, actorToReset);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ShouldReset_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ShouldReset_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool ShouldReset_Implementation(UnrealSharp.Engine.Actor actorToReset)
    {
        return default(bool);
    }
    void Invoke_ShouldReset(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Actor actorToReset = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, ShouldReset_ActorToReset_Offset), 0, null);
            bool returnValue = ShouldReset_Implementation(actorToReset);
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/Engine.GameModeBase:PlayerCanRestart
    IntPtr PlayerCanRestart_NativeFunction;
    static readonly int PlayerCanRestart_ParamsSize;
    static readonly int PlayerCanRestart_Player_Offset;
    static readonly int PlayerCanRestart_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual bool PlayerCanRestart(UnrealSharp.Engine.PlayerController player)
    {
        unsafe
        {
            if (PlayerCanRestart_NativeFunction == IntPtr.Zero)
            {
                PlayerCanRestart_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "PlayerCanRestart");
            }
            byte* ParamsBufferAllocation = stackalloc byte[PlayerCanRestart_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, PlayerCanRestart_Player_Offset), 0, null, player);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PlayerCanRestart_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, PlayerCanRestart_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool PlayerCanRestart_Implementation(UnrealSharp.Engine.PlayerController player)
    {
        return default(bool);
    }
    void Invoke_PlayerCanRestart(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.PlayerController player = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(buffer, PlayerCanRestart_Player_Offset), 0, null);
            bool returnValue = PlayerCanRestart_Implementation(player);
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/Engine.GameModeBase:MustSpectate
    IntPtr MustSpectate_NativeFunction;
    static readonly int MustSpectate_ParamsSize;
    static readonly int MustSpectate_NewPlayerController_Offset;
    static readonly int MustSpectate_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual bool MustSpectate(UnrealSharp.Engine.PlayerController newPlayerController)
    {
        unsafe
        {
            if (MustSpectate_NativeFunction == IntPtr.Zero)
            {
                MustSpectate_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "MustSpectate");
            }
            byte* ParamsBufferAllocation = stackalloc byte[MustSpectate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, MustSpectate_NewPlayerController_Offset), 0, null, newPlayerController);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, MustSpectate_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, MustSpectate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool MustSpectate_Implementation(UnrealSharp.Engine.PlayerController newPlayerController)
    {
        return default(bool);
    }
    void Invoke_MustSpectate(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.PlayerController newPlayerController = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(buffer, MustSpectate_NewPlayerController_Offset), 0, null);
            bool returnValue = MustSpectate_Implementation(newPlayerController);
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/Engine.GameModeBase:K2_PostLogin
    IntPtr K2_PostLogin_NativeFunction;
    static readonly int K2_PostLogin_ParamsSize;
    static readonly int K2_PostLogin_NewPlayer_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnPostLogin(UnrealSharp.Engine.PlayerController newPlayer)
    {
        unsafe
        {
            if (K2_PostLogin_NativeFunction == IntPtr.Zero)
            {
                K2_PostLogin_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "K2_PostLogin");
            }
            byte* ParamsBufferAllocation = stackalloc byte[K2_PostLogin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, K2_PostLogin_NewPlayer_Offset), 0, null, newPlayer);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_PostLogin_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void K2_PostLogin_Implementation(UnrealSharp.Engine.PlayerController newPlayer)
    {
    }
    void Invoke_K2_PostLogin(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.PlayerController newPlayer = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(buffer, K2_PostLogin_NewPlayer_Offset), 0, null);
            K2_PostLogin_Implementation(newPlayer);
        }
    }
    
    // Function /Script/Engine.GameModeBase:K2_OnSwapPlayerControllers
    IntPtr K2_OnSwapPlayerControllers_NativeFunction;
    static readonly int K2_OnSwapPlayerControllers_ParamsSize;
    static readonly int K2_OnSwapPlayerControllers_OldPC_Offset;
    static readonly int K2_OnSwapPlayerControllers_NewPC_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void OnSwapPlayerControllers(UnrealSharp.Engine.PlayerController oldPC, UnrealSharp.Engine.PlayerController newPC)
    {
        unsafe
        {
            if (K2_OnSwapPlayerControllers_NativeFunction == IntPtr.Zero)
            {
                K2_OnSwapPlayerControllers_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "K2_OnSwapPlayerControllers");
            }
            byte* ParamsBufferAllocation = stackalloc byte[K2_OnSwapPlayerControllers_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, K2_OnSwapPlayerControllers_OldPC_Offset), 0, null, oldPC);
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, K2_OnSwapPlayerControllers_NewPC_Offset), 0, null, newPC);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_OnSwapPlayerControllers_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void K2_OnSwapPlayerControllers_Implementation(UnrealSharp.Engine.PlayerController oldPC, UnrealSharp.Engine.PlayerController newPC)
    {
    }
    void Invoke_K2_OnSwapPlayerControllers(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.PlayerController oldPC = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(buffer, K2_OnSwapPlayerControllers_OldPC_Offset), 0, null);
            UnrealSharp.Engine.PlayerController newPC = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(buffer, K2_OnSwapPlayerControllers_NewPC_Offset), 0, null);
            K2_OnSwapPlayerControllers_Implementation(oldPC, newPC);
        }
    }
    
    // Function /Script/Engine.GameModeBase:K2_OnRestartPlayer
    IntPtr K2_OnRestartPlayer_NativeFunction;
    static readonly int K2_OnRestartPlayer_ParamsSize;
    static readonly int K2_OnRestartPlayer_NewPlayer_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnRestartPlayer(UnrealSharp.Engine.Controller newPlayer)
    {
        unsafe
        {
            if (K2_OnRestartPlayer_NativeFunction == IntPtr.Zero)
            {
                K2_OnRestartPlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "K2_OnRestartPlayer");
            }
            byte* ParamsBufferAllocation = stackalloc byte[K2_OnRestartPlayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, K2_OnRestartPlayer_NewPlayer_Offset), 0, null, newPlayer);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_OnRestartPlayer_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void K2_OnRestartPlayer_Implementation(UnrealSharp.Engine.Controller newPlayer)
    {
    }
    void Invoke_K2_OnRestartPlayer(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Controller newPlayer = ObjectMarshaller<UnrealSharp.Engine.Controller>.FromNative(IntPtr.Add(buffer, K2_OnRestartPlayer_NewPlayer_Offset), 0, null);
            K2_OnRestartPlayer_Implementation(newPlayer);
        }
    }
    
    // Function /Script/Engine.GameModeBase:K2_OnLogout
    IntPtr K2_OnLogout_NativeFunction;
    static readonly int K2_OnLogout_ParamsSize;
    static readonly int K2_OnLogout_ExitingController_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnLogout(UnrealSharp.Engine.Controller exitingController)
    {
        unsafe
        {
            if (K2_OnLogout_NativeFunction == IntPtr.Zero)
            {
                K2_OnLogout_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "K2_OnLogout");
            }
            byte* ParamsBufferAllocation = stackalloc byte[K2_OnLogout_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, K2_OnLogout_ExitingController_Offset), 0, null, exitingController);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_OnLogout_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void K2_OnLogout_Implementation(UnrealSharp.Engine.Controller exitingController)
    {
    }
    void Invoke_K2_OnLogout(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Controller exitingController = ObjectMarshaller<UnrealSharp.Engine.Controller>.FromNative(IntPtr.Add(buffer, K2_OnLogout_ExitingController_Offset), 0, null);
            K2_OnLogout_Implementation(exitingController);
        }
    }
    
    // Function /Script/Engine.GameModeBase:K2_OnChangeName
    IntPtr K2_OnChangeName_NativeFunction;
    static readonly int K2_OnChangeName_ParamsSize;
    static readonly int K2_OnChangeName_Other_Offset;
    static readonly int K2_OnChangeName_NewName_Offset;
    static readonly int K2_OnChangeName_bNameChange_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnChangeName(UnrealSharp.Engine.Controller other, string newName, bool bNameChange)
    {
        unsafe
        {
            if (K2_OnChangeName_NativeFunction == IntPtr.Zero)
            {
                K2_OnChangeName_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "K2_OnChangeName");
            }
            byte* ParamsBufferAllocation = stackalloc byte[K2_OnChangeName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, K2_OnChangeName_Other_Offset), 0, null, other);
            IntPtr NewName_NativePtr = IntPtr.Add(ParamsBuffer,K2_OnChangeName_NewName_Offset);
            StringMarshaller.ToNative(NewName_NativePtr,0,null,newName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_OnChangeName_bNameChange_Offset), 0, null, bNameChange);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_OnChangeName_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(NewName_NativePtr, 0);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void K2_OnChangeName_Implementation(UnrealSharp.Engine.Controller other, string newName, bool bNameChange)
    {
    }
    void Invoke_K2_OnChangeName(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Controller other = ObjectMarshaller<UnrealSharp.Engine.Controller>.FromNative(IntPtr.Add(buffer, K2_OnChangeName_Other_Offset), 0, null);
            IntPtr NewName_NativePtr = IntPtr.Add(buffer,K2_OnChangeName_NewName_Offset);
            string newName = StringMarshaller.FromNative(NewName_NativePtr,0,null);
            bool bNameChange = BoolMarshaller.FromNative(IntPtr.Add(buffer, K2_OnChangeName_bNameChange_Offset), 0, null);
            K2_OnChangeName_Implementation(other, newName, bNameChange);
        }
    }
    
    // Function /Script/Engine.GameModeBase:InitStartSpot
    IntPtr InitStartSpot_NativeFunction;
    static readonly int InitStartSpot_ParamsSize;
    static readonly int InitStartSpot_StartSpot_Offset;
    static readonly int InitStartSpot_NewPlayer_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void InitStartSpot(UnrealSharp.Engine.Actor startSpot, UnrealSharp.Engine.Controller newPlayer)
    {
        unsafe
        {
            if (InitStartSpot_NativeFunction == IntPtr.Zero)
            {
                InitStartSpot_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "InitStartSpot");
            }
            byte* ParamsBufferAllocation = stackalloc byte[InitStartSpot_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, InitStartSpot_StartSpot_Offset), 0, null, startSpot);
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, InitStartSpot_NewPlayer_Offset), 0, null, newPlayer);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, InitStartSpot_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void InitStartSpot_Implementation(UnrealSharp.Engine.Actor startSpot, UnrealSharp.Engine.Controller newPlayer)
    {
    }
    void Invoke_InitStartSpot(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Actor startSpot = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, InitStartSpot_StartSpot_Offset), 0, null);
            UnrealSharp.Engine.Controller newPlayer = ObjectMarshaller<UnrealSharp.Engine.Controller>.FromNative(IntPtr.Add(buffer, InitStartSpot_NewPlayer_Offset), 0, null);
            InitStartSpot_Implementation(startSpot, newPlayer);
        }
    }
    
    // Function /Script/Engine.GameModeBase:InitializeHUDForPlayer
    IntPtr InitializeHUDForPlayer_NativeFunction;
    static readonly int InitializeHUDForPlayer_ParamsSize;
    static readonly int InitializeHUDForPlayer_NewPlayer_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void InitializeHUDForPlayer(UnrealSharp.Engine.PlayerController newPlayer)
    {
        unsafe
        {
            if (InitializeHUDForPlayer_NativeFunction == IntPtr.Zero)
            {
                InitializeHUDForPlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "InitializeHUDForPlayer");
            }
            byte* ParamsBufferAllocation = stackalloc byte[InitializeHUDForPlayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, InitializeHUDForPlayer_NewPlayer_Offset), 0, null, newPlayer);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, InitializeHUDForPlayer_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void InitializeHUDForPlayer_Implementation(UnrealSharp.Engine.PlayerController newPlayer)
    {
    }
    void Invoke_InitializeHUDForPlayer(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.PlayerController newPlayer = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(buffer, InitializeHUDForPlayer_NewPlayer_Offset), 0, null);
            InitializeHUDForPlayer_Implementation(newPlayer);
        }
    }
    
    // Function /Script/Engine.GameModeBase:HandleStartingNewPlayer
    IntPtr HandleStartingNewPlayer_NativeFunction;
    static readonly int HandleStartingNewPlayer_ParamsSize;
    static readonly int HandleStartingNewPlayer_NewPlayer_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void HandleStartingNewPlayer(UnrealSharp.Engine.PlayerController newPlayer)
    {
        unsafe
        {
            if (HandleStartingNewPlayer_NativeFunction == IntPtr.Zero)
            {
                HandleStartingNewPlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "HandleStartingNewPlayer");
            }
            byte* ParamsBufferAllocation = stackalloc byte[HandleStartingNewPlayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, HandleStartingNewPlayer_NewPlayer_Offset), 0, null, newPlayer);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HandleStartingNewPlayer_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void HandleStartingNewPlayer_Implementation(UnrealSharp.Engine.PlayerController newPlayer)
    {
    }
    void Invoke_HandleStartingNewPlayer(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.PlayerController newPlayer = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(buffer, HandleStartingNewPlayer_NewPlayer_Offset), 0, null);
            HandleStartingNewPlayer_Implementation(newPlayer);
        }
    }
    
    // Function /Script/Engine.GameModeBase:GetDefaultPawnClassForController
    IntPtr GetDefaultPawnClassForController_NativeFunction;
    static readonly int GetDefaultPawnClassForController_ParamsSize;
    static readonly int GetDefaultPawnClassForController_InController_Offset;
    static readonly int GetDefaultPawnClassForController_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual SubclassOf<UnrealSharp.CoreUObject.Object> GetDefaultPawnClassForController(UnrealSharp.Engine.Controller inController)
    {
        unsafe
        {
            if (GetDefaultPawnClassForController_NativeFunction == IntPtr.Zero)
            {
                GetDefaultPawnClassForController_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "GetDefaultPawnClassForController");
            }
            byte* ParamsBufferAllocation = stackalloc byte[GetDefaultPawnClassForController_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, GetDefaultPawnClassForController_InController_Offset), 0, null, inController);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDefaultPawnClassForController_NativeFunction, ParamsBuffer);
            
            SubclassOf<UnrealSharp.CoreUObject.Object> returnValue;
            returnValue = SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetDefaultPawnClassForController_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual SubclassOf<UnrealSharp.CoreUObject.Object> GetDefaultPawnClassForController_Implementation(UnrealSharp.Engine.Controller inController)
    {
        return default(SubclassOf<UnrealSharp.CoreUObject.Object>);
    }
    void Invoke_GetDefaultPawnClassForController(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Controller inController = ObjectMarshaller<UnrealSharp.Engine.Controller>.FromNative(IntPtr.Add(buffer, GetDefaultPawnClassForController_InController_Offset), 0, null);
            SubclassOf<UnrealSharp.CoreUObject.Object> returnValue = GetDefaultPawnClassForController_Implementation(inController);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/Engine.GameModeBase:FindPlayerStart
    IntPtr FindPlayerStart_NativeFunction;
    static readonly int FindPlayerStart_ParamsSize;
    static readonly int FindPlayerStart_Player_Offset;
    static readonly int FindPlayerStart_IncomingName_Offset;
    static readonly int FindPlayerStart_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.Engine.Actor FindPlayerStart(UnrealSharp.Engine.Controller player, string incomingName)
    {
        unsafe
        {
            if (FindPlayerStart_NativeFunction == IntPtr.Zero)
            {
                FindPlayerStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "FindPlayerStart");
            }
            byte* ParamsBufferAllocation = stackalloc byte[FindPlayerStart_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, FindPlayerStart_Player_Offset), 0, null, player);
            IntPtr IncomingName_NativePtr = IntPtr.Add(ParamsBuffer,FindPlayerStart_IncomingName_Offset);
            StringMarshaller.ToNative(IncomingName_NativePtr,0,null,incomingName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindPlayerStart_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Actor returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(ParamsBuffer, FindPlayerStart_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(IncomingName_NativePtr, 0);
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.Engine.Actor FindPlayerStart_Implementation(UnrealSharp.Engine.Controller player, string incomingName)
    {
        return default(UnrealSharp.Engine.Actor);
    }
    void Invoke_FindPlayerStart(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Controller player = ObjectMarshaller<UnrealSharp.Engine.Controller>.FromNative(IntPtr.Add(buffer, FindPlayerStart_Player_Offset), 0, null);
            IntPtr IncomingName_NativePtr = IntPtr.Add(buffer,FindPlayerStart_IncomingName_Offset);
            string incomingName = StringMarshaller.FromNative(IncomingName_NativePtr,0,null);
            UnrealSharp.Engine.Actor returnValue = FindPlayerStart_Implementation(player, incomingName);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/Engine.GameModeBase:ChoosePlayerStart
    IntPtr ChoosePlayerStart_NativeFunction;
    static readonly int ChoosePlayerStart_ParamsSize;
    static readonly int ChoosePlayerStart_Player_Offset;
    static readonly int ChoosePlayerStart_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.Engine.Actor ChoosePlayerStart(UnrealSharp.Engine.Controller player)
    {
        unsafe
        {
            if (ChoosePlayerStart_NativeFunction == IntPtr.Zero)
            {
                ChoosePlayerStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ChoosePlayerStart");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ChoosePlayerStart_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, ChoosePlayerStart_Player_Offset), 0, null, player);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ChoosePlayerStart_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Actor returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(ParamsBuffer, ChoosePlayerStart_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.Engine.Actor ChoosePlayerStart_Implementation(UnrealSharp.Engine.Controller player)
    {
        return default(UnrealSharp.Engine.Actor);
    }
    void Invoke_ChoosePlayerStart(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Controller player = ObjectMarshaller<UnrealSharp.Engine.Controller>.FromNative(IntPtr.Add(buffer, ChoosePlayerStart_Player_Offset), 0, null);
            UnrealSharp.Engine.Actor returnValue = ChoosePlayerStart_Implementation(player);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/Engine.GameModeBase:CanSpectate
    IntPtr CanSpectate_NativeFunction;
    static readonly int CanSpectate_ParamsSize;
    static readonly int CanSpectate_Viewer_Offset;
    static readonly int CanSpectate_ViewTarget_Offset;
    static readonly int CanSpectate_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual bool CanSpectate(UnrealSharp.Engine.PlayerController viewer, UnrealSharp.Engine.PlayerState viewTarget)
    {
        unsafe
        {
            if (CanSpectate_NativeFunction == IntPtr.Zero)
            {
                CanSpectate_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "CanSpectate");
            }
            byte* ParamsBufferAllocation = stackalloc byte[CanSpectate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, CanSpectate_Viewer_Offset), 0, null, viewer);
            ObjectMarshaller<UnrealSharp.Engine.PlayerState>.ToNative(IntPtr.Add(ParamsBuffer, CanSpectate_ViewTarget_Offset), 0, null, viewTarget);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CanSpectate_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CanSpectate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool CanSpectate_Implementation(UnrealSharp.Engine.PlayerController viewer, UnrealSharp.Engine.PlayerState viewTarget)
    {
        return default(bool);
    }
    void Invoke_CanSpectate(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.PlayerController viewer = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(buffer, CanSpectate_Viewer_Offset), 0, null);
            UnrealSharp.Engine.PlayerState viewTarget = ObjectMarshaller<UnrealSharp.Engine.PlayerState>.FromNative(IntPtr.Add(buffer, CanSpectate_ViewTarget_Offset), 0, null);
            bool returnValue = CanSpectate_Implementation(viewer, viewTarget);
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    
}
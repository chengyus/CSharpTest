// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class GameplayStatics : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static GameplayStatics()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("GameplayStatics");
        
        
        UnRetainAllSoundsInSoundClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UnRetainAllSoundsInSoundClass");
        UnRetainAllSoundsInSoundClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UnRetainAllSoundsInSoundClass_NativeFunction);
        UnRetainAllSoundsInSoundClass_InSoundClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnRetainAllSoundsInSoundClass_NativeFunction, "InSoundClass");
        SuggestProjectileVelocity_MovingTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SuggestProjectileVelocity_MovingTarget");
        SuggestProjectileVelocity_MovingTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SuggestProjectileVelocity_MovingTarget_NativeFunction);
        SuggestProjectileVelocity_MovingTarget_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SuggestProjectileVelocity_MovingTarget_NativeFunction, "WorldContextObject");
        SuggestProjectileVelocity_MovingTarget_OutLaunchVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SuggestProjectileVelocity_MovingTarget_NativeFunction, "OutLaunchVelocity");
        SuggestProjectileVelocity_MovingTarget_ProjectileStartLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SuggestProjectileVelocity_MovingTarget_NativeFunction, "ProjectileStartLocation");
        SuggestProjectileVelocity_MovingTarget_TargetActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SuggestProjectileVelocity_MovingTarget_NativeFunction, "TargetActor");
        SuggestProjectileVelocity_MovingTarget_TargetLocationOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SuggestProjectileVelocity_MovingTarget_NativeFunction, "TargetLocationOffset");
        SuggestProjectileVelocity_MovingTarget_GravityZOverride_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SuggestProjectileVelocity_MovingTarget_NativeFunction, "GravityZOverride");
        SuggestProjectileVelocity_MovingTarget_TimeToTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SuggestProjectileVelocity_MovingTarget_NativeFunction, "TimeToTarget");
        SuggestProjectileVelocity_MovingTarget_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SuggestProjectileVelocity_MovingTarget_NativeFunction, "DrawDebugType");
        SuggestProjectileVelocity_MovingTarget_DrawDebugTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SuggestProjectileVelocity_MovingTarget_NativeFunction, "DrawDebugTime");
        SuggestProjectileVelocity_MovingTarget_DrawDebugColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SuggestProjectileVelocity_MovingTarget_NativeFunction, "DrawDebugColor");
        SuggestProjectileVelocity_MovingTarget_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SuggestProjectileVelocity_MovingTarget_NativeFunction, "ReturnValue");
        SuggestProjectileVelocity_CustomArc_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SuggestProjectileVelocity_CustomArc");
        SuggestProjectileVelocity_CustomArc_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SuggestProjectileVelocity_CustomArc_NativeFunction);
        SuggestProjectileVelocity_CustomArc_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SuggestProjectileVelocity_CustomArc_NativeFunction, "WorldContextObject");
        SuggestProjectileVelocity_CustomArc_OutLaunchVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SuggestProjectileVelocity_CustomArc_NativeFunction, "OutLaunchVelocity");
        SuggestProjectileVelocity_CustomArc_StartPos_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SuggestProjectileVelocity_CustomArc_NativeFunction, "StartPos");
        SuggestProjectileVelocity_CustomArc_EndPos_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SuggestProjectileVelocity_CustomArc_NativeFunction, "EndPos");
        SuggestProjectileVelocity_CustomArc_OverrideGravityZ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SuggestProjectileVelocity_CustomArc_NativeFunction, "OverrideGravityZ");
        SuggestProjectileVelocity_CustomArc_ArcParam_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SuggestProjectileVelocity_CustomArc_NativeFunction, "ArcParam");
        SuggestProjectileVelocity_CustomArc_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SuggestProjectileVelocity_CustomArc_NativeFunction, "ReturnValue");
        SpawnSoundAttached_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SpawnSoundAttached");
        SpawnSoundAttached_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SpawnSoundAttached_NativeFunction);
        SpawnSoundAttached_Sound_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAttached_NativeFunction, "Sound");
        SpawnSoundAttached_AttachToComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAttached_NativeFunction, "AttachToComponent");
        SpawnSoundAttached_AttachPointName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAttached_NativeFunction, "AttachPointName");
        SpawnSoundAttached_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAttached_NativeFunction, "Location");
        SpawnSoundAttached_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAttached_NativeFunction, "Rotation");
        SpawnSoundAttached_LocationType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAttached_NativeFunction, "LocationType");
        SpawnSoundAttached_bStopWhenAttachedToDestroyed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAttached_NativeFunction, "bStopWhenAttachedToDestroyed");
        SpawnSoundAttached_VolumeMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAttached_NativeFunction, "VolumeMultiplier");
        SpawnSoundAttached_PitchMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAttached_NativeFunction, "PitchMultiplier");
        SpawnSoundAttached_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAttached_NativeFunction, "StartTime");
        SpawnSoundAttached_AttenuationSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAttached_NativeFunction, "AttenuationSettings");
        SpawnSoundAttached_ConcurrencySettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAttached_NativeFunction, "ConcurrencySettings");
        SpawnSoundAttached_bAutoDestroy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAttached_NativeFunction, "bAutoDestroy");
        SpawnSoundAttached_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAttached_NativeFunction, "ReturnValue");
        SpawnSoundAtLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SpawnSoundAtLocation");
        SpawnSoundAtLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SpawnSoundAtLocation_NativeFunction);
        SpawnSoundAtLocation_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAtLocation_NativeFunction, "WorldContextObject");
        SpawnSoundAtLocation_Sound_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAtLocation_NativeFunction, "Sound");
        SpawnSoundAtLocation_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAtLocation_NativeFunction, "Location");
        SpawnSoundAtLocation_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAtLocation_NativeFunction, "Rotation");
        SpawnSoundAtLocation_VolumeMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAtLocation_NativeFunction, "VolumeMultiplier");
        SpawnSoundAtLocation_PitchMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAtLocation_NativeFunction, "PitchMultiplier");
        SpawnSoundAtLocation_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAtLocation_NativeFunction, "StartTime");
        SpawnSoundAtLocation_AttenuationSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAtLocation_NativeFunction, "AttenuationSettings");
        SpawnSoundAtLocation_ConcurrencySettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAtLocation_NativeFunction, "ConcurrencySettings");
        SpawnSoundAtLocation_bAutoDestroy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAtLocation_NativeFunction, "bAutoDestroy");
        SpawnSoundAtLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSoundAtLocation_NativeFunction, "ReturnValue");
        SpawnSound2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SpawnSound2D");
        SpawnSound2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SpawnSound2D_NativeFunction);
        SpawnSound2D_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSound2D_NativeFunction, "WorldContextObject");
        SpawnSound2D_Sound_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSound2D_NativeFunction, "Sound");
        SpawnSound2D_VolumeMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSound2D_NativeFunction, "VolumeMultiplier");
        SpawnSound2D_PitchMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSound2D_NativeFunction, "PitchMultiplier");
        SpawnSound2D_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSound2D_NativeFunction, "StartTime");
        SpawnSound2D_ConcurrencySettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSound2D_NativeFunction, "ConcurrencySettings");
        SpawnSound2D_bPersistAcrossLevelTransition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSound2D_NativeFunction, "bPersistAcrossLevelTransition");
        SpawnSound2D_bAutoDestroy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSound2D_NativeFunction, "bAutoDestroy");
        SpawnSound2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnSound2D_NativeFunction, "ReturnValue");
        SpawnForceFeedbackAttached_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SpawnForceFeedbackAttached");
        SpawnForceFeedbackAttached_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SpawnForceFeedbackAttached_NativeFunction);
        SpawnForceFeedbackAttached_ForceFeedbackEffect_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAttached_NativeFunction, "ForceFeedbackEffect");
        SpawnForceFeedbackAttached_AttachToComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAttached_NativeFunction, "AttachToComponent");
        SpawnForceFeedbackAttached_AttachPointName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAttached_NativeFunction, "AttachPointName");
        SpawnForceFeedbackAttached_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAttached_NativeFunction, "Location");
        SpawnForceFeedbackAttached_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAttached_NativeFunction, "Rotation");
        SpawnForceFeedbackAttached_LocationType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAttached_NativeFunction, "LocationType");
        SpawnForceFeedbackAttached_bStopWhenAttachedToDestroyed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAttached_NativeFunction, "bStopWhenAttachedToDestroyed");
        SpawnForceFeedbackAttached_bLooping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAttached_NativeFunction, "bLooping");
        SpawnForceFeedbackAttached_IntensityMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAttached_NativeFunction, "IntensityMultiplier");
        SpawnForceFeedbackAttached_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAttached_NativeFunction, "StartTime");
        SpawnForceFeedbackAttached_AttenuationSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAttached_NativeFunction, "AttenuationSettings");
        SpawnForceFeedbackAttached_bAutoDestroy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAttached_NativeFunction, "bAutoDestroy");
        SpawnForceFeedbackAttached_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAttached_NativeFunction, "ReturnValue");
        SpawnForceFeedbackAtLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SpawnForceFeedbackAtLocation");
        SpawnForceFeedbackAtLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SpawnForceFeedbackAtLocation_NativeFunction);
        SpawnForceFeedbackAtLocation_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAtLocation_NativeFunction, "WorldContextObject");
        SpawnForceFeedbackAtLocation_ForceFeedbackEffect_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAtLocation_NativeFunction, "ForceFeedbackEffect");
        SpawnForceFeedbackAtLocation_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAtLocation_NativeFunction, "Location");
        SpawnForceFeedbackAtLocation_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAtLocation_NativeFunction, "Rotation");
        SpawnForceFeedbackAtLocation_bLooping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAtLocation_NativeFunction, "bLooping");
        SpawnForceFeedbackAtLocation_IntensityMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAtLocation_NativeFunction, "IntensityMultiplier");
        SpawnForceFeedbackAtLocation_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAtLocation_NativeFunction, "StartTime");
        SpawnForceFeedbackAtLocation_AttenuationSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAtLocation_NativeFunction, "AttenuationSettings");
        SpawnForceFeedbackAtLocation_bAutoDestroy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAtLocation_NativeFunction, "bAutoDestroy");
        SpawnForceFeedbackAtLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnForceFeedbackAtLocation_NativeFunction, "ReturnValue");
        SpawnEmitterAttached_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SpawnEmitterAttached");
        SpawnEmitterAttached_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SpawnEmitterAttached_NativeFunction);
        SpawnEmitterAttached_EmitterTemplate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnEmitterAttached_NativeFunction, "EmitterTemplate");
        SpawnEmitterAttached_AttachToComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnEmitterAttached_NativeFunction, "AttachToComponent");
        SpawnEmitterAttached_AttachPointName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnEmitterAttached_NativeFunction, "AttachPointName");
        SpawnEmitterAttached_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnEmitterAttached_NativeFunction, "Location");
        SpawnEmitterAttached_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnEmitterAttached_NativeFunction, "Rotation");
        SpawnEmitterAttached_Scale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnEmitterAttached_NativeFunction, "Scale");
        SpawnEmitterAttached_LocationType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnEmitterAttached_NativeFunction, "LocationType");
        SpawnEmitterAttached_bAutoDestroy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnEmitterAttached_NativeFunction, "bAutoDestroy");
        SpawnEmitterAttached_PoolingMethod_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnEmitterAttached_NativeFunction, "PoolingMethod");
        SpawnEmitterAttached_bAutoActivate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnEmitterAttached_NativeFunction, "bAutoActivate");
        SpawnEmitterAttached_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnEmitterAttached_NativeFunction, "ReturnValue");
        SpawnEmitterAtLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SpawnEmitterAtLocation");
        SpawnEmitterAtLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SpawnEmitterAtLocation_NativeFunction);
        SpawnEmitterAtLocation_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnEmitterAtLocation_NativeFunction, "WorldContextObject");
        SpawnEmitterAtLocation_EmitterTemplate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnEmitterAtLocation_NativeFunction, "EmitterTemplate");
        SpawnEmitterAtLocation_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnEmitterAtLocation_NativeFunction, "Location");
        SpawnEmitterAtLocation_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnEmitterAtLocation_NativeFunction, "Rotation");
        SpawnEmitterAtLocation_Scale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnEmitterAtLocation_NativeFunction, "Scale");
        SpawnEmitterAtLocation_bAutoDestroy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnEmitterAtLocation_NativeFunction, "bAutoDestroy");
        SpawnEmitterAtLocation_PoolingMethod_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnEmitterAtLocation_NativeFunction, "PoolingMethod");
        SpawnEmitterAtLocation_bAutoActivateSystem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnEmitterAtLocation_NativeFunction, "bAutoActivateSystem");
        SpawnEmitterAtLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnEmitterAtLocation_NativeFunction, "ReturnValue");
        SpawnDialogueAttached_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SpawnDialogueAttached");
        SpawnDialogueAttached_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SpawnDialogueAttached_NativeFunction);
        SpawnDialogueAttached_Dialogue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAttached_NativeFunction, "Dialogue");
        SpawnDialogueAttached_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAttached_NativeFunction, "Context");
        SpawnDialogueAttached_AttachToComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAttached_NativeFunction, "AttachToComponent");
        SpawnDialogueAttached_AttachPointName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAttached_NativeFunction, "AttachPointName");
        SpawnDialogueAttached_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAttached_NativeFunction, "Location");
        SpawnDialogueAttached_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAttached_NativeFunction, "Rotation");
        SpawnDialogueAttached_LocationType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAttached_NativeFunction, "LocationType");
        SpawnDialogueAttached_bStopWhenAttachedToDestroyed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAttached_NativeFunction, "bStopWhenAttachedToDestroyed");
        SpawnDialogueAttached_VolumeMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAttached_NativeFunction, "VolumeMultiplier");
        SpawnDialogueAttached_PitchMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAttached_NativeFunction, "PitchMultiplier");
        SpawnDialogueAttached_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAttached_NativeFunction, "StartTime");
        SpawnDialogueAttached_AttenuationSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAttached_NativeFunction, "AttenuationSettings");
        SpawnDialogueAttached_bAutoDestroy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAttached_NativeFunction, "bAutoDestroy");
        SpawnDialogueAttached_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAttached_NativeFunction, "ReturnValue");
        SpawnDialogueAtLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SpawnDialogueAtLocation");
        SpawnDialogueAtLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SpawnDialogueAtLocation_NativeFunction);
        SpawnDialogueAtLocation_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAtLocation_NativeFunction, "WorldContextObject");
        SpawnDialogueAtLocation_Dialogue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAtLocation_NativeFunction, "Dialogue");
        SpawnDialogueAtLocation_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAtLocation_NativeFunction, "Context");
        SpawnDialogueAtLocation_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAtLocation_NativeFunction, "Location");
        SpawnDialogueAtLocation_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAtLocation_NativeFunction, "Rotation");
        SpawnDialogueAtLocation_VolumeMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAtLocation_NativeFunction, "VolumeMultiplier");
        SpawnDialogueAtLocation_PitchMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAtLocation_NativeFunction, "PitchMultiplier");
        SpawnDialogueAtLocation_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAtLocation_NativeFunction, "StartTime");
        SpawnDialogueAtLocation_AttenuationSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAtLocation_NativeFunction, "AttenuationSettings");
        SpawnDialogueAtLocation_bAutoDestroy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAtLocation_NativeFunction, "bAutoDestroy");
        SpawnDialogueAtLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogueAtLocation_NativeFunction, "ReturnValue");
        SpawnDialogue2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SpawnDialogue2D");
        SpawnDialogue2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SpawnDialogue2D_NativeFunction);
        SpawnDialogue2D_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogue2D_NativeFunction, "WorldContextObject");
        SpawnDialogue2D_Dialogue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogue2D_NativeFunction, "Dialogue");
        SpawnDialogue2D_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogue2D_NativeFunction, "Context");
        SpawnDialogue2D_VolumeMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogue2D_NativeFunction, "VolumeMultiplier");
        SpawnDialogue2D_PitchMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogue2D_NativeFunction, "PitchMultiplier");
        SpawnDialogue2D_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogue2D_NativeFunction, "StartTime");
        SpawnDialogue2D_bAutoDestroy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogue2D_NativeFunction, "bAutoDestroy");
        SpawnDialogue2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDialogue2D_NativeFunction, "ReturnValue");
        SpawnDecalAttached_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SpawnDecalAttached");
        SpawnDecalAttached_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SpawnDecalAttached_NativeFunction);
        SpawnDecalAttached_DecalMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDecalAttached_NativeFunction, "DecalMaterial");
        SpawnDecalAttached_DecalSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDecalAttached_NativeFunction, "DecalSize");
        SpawnDecalAttached_AttachToComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDecalAttached_NativeFunction, "AttachToComponent");
        SpawnDecalAttached_AttachPointName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDecalAttached_NativeFunction, "AttachPointName");
        SpawnDecalAttached_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDecalAttached_NativeFunction, "Location");
        SpawnDecalAttached_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDecalAttached_NativeFunction, "Rotation");
        SpawnDecalAttached_LocationType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDecalAttached_NativeFunction, "LocationType");
        SpawnDecalAttached_LifeSpan_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDecalAttached_NativeFunction, "LifeSpan");
        SpawnDecalAttached_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDecalAttached_NativeFunction, "ReturnValue");
        SpawnDecalAtLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SpawnDecalAtLocation");
        SpawnDecalAtLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SpawnDecalAtLocation_NativeFunction);
        SpawnDecalAtLocation_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDecalAtLocation_NativeFunction, "WorldContextObject");
        SpawnDecalAtLocation_DecalMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDecalAtLocation_NativeFunction, "DecalMaterial");
        SpawnDecalAtLocation_DecalSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDecalAtLocation_NativeFunction, "DecalSize");
        SpawnDecalAtLocation_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDecalAtLocation_NativeFunction, "Location");
        SpawnDecalAtLocation_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDecalAtLocation_NativeFunction, "Rotation");
        SpawnDecalAtLocation_LifeSpan_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDecalAtLocation_NativeFunction, "LifeSpan");
        SpawnDecalAtLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SpawnDecalAtLocation_NativeFunction, "ReturnValue");
        SetWorldOriginLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWorldOriginLocation");
        SetWorldOriginLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWorldOriginLocation_NativeFunction);
        SetWorldOriginLocation_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWorldOriginLocation_NativeFunction, "WorldContextObject");
        SetWorldOriginLocation_NewLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWorldOriginLocation_NativeFunction, "NewLocation");
        SetViewportMouseCaptureMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetViewportMouseCaptureMode");
        SetViewportMouseCaptureMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetViewportMouseCaptureMode_NativeFunction);
        SetViewportMouseCaptureMode_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetViewportMouseCaptureMode_NativeFunction, "WorldContextObject");
        SetViewportMouseCaptureMode_MouseCaptureMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetViewportMouseCaptureMode_NativeFunction, "MouseCaptureMode");
        SetSubtitlesEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSubtitlesEnabled");
        SetSubtitlesEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSubtitlesEnabled_NativeFunction);
        SetSubtitlesEnabled_bEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSubtitlesEnabled_NativeFunction, "bEnabled");
        SetSoundMixClassOverride_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSoundMixClassOverride");
        SetSoundMixClassOverride_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSoundMixClassOverride_NativeFunction);
        SetSoundMixClassOverride_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSoundMixClassOverride_NativeFunction, "WorldContextObject");
        SetSoundMixClassOverride_InSoundMixModifier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSoundMixClassOverride_NativeFunction, "InSoundMixModifier");
        SetSoundMixClassOverride_InSoundClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSoundMixClassOverride_NativeFunction, "InSoundClass");
        SetSoundMixClassOverride_Volume_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSoundMixClassOverride_NativeFunction, "Volume");
        SetSoundMixClassOverride_Pitch_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSoundMixClassOverride_NativeFunction, "Pitch");
        SetSoundMixClassOverride_FadeInTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSoundMixClassOverride_NativeFunction, "FadeInTime");
        SetSoundMixClassOverride_bApplyToChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSoundMixClassOverride_NativeFunction, "bApplyToChildren");
        SetSoundClassDistanceScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSoundClassDistanceScale");
        SetSoundClassDistanceScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSoundClassDistanceScale_NativeFunction);
        SetSoundClassDistanceScale_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSoundClassDistanceScale_NativeFunction, "WorldContextObject");
        SetSoundClassDistanceScale_SoundClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSoundClassDistanceScale_NativeFunction, "SoundClass");
        SetSoundClassDistanceScale_DistanceAttenuationScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSoundClassDistanceScale_NativeFunction, "DistanceAttenuationScale");
        SetSoundClassDistanceScale_TimeSec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSoundClassDistanceScale_NativeFunction, "TimeSec");
        SetPlayerPlatformUserId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlayerPlatformUserId");
        SetPlayerPlatformUserId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlayerPlatformUserId_NativeFunction);
        SetPlayerPlatformUserId_PlayerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlayerPlatformUserId_NativeFunction, "PlayerController");
        SetPlayerPlatformUserId_UserId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlayerPlatformUserId_NativeFunction, "UserId");
        SetPlayerControllerID_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlayerControllerID");
        SetPlayerControllerID_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlayerControllerID_NativeFunction);
        SetPlayerControllerID_Player_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlayerControllerID_NativeFunction, "Player");
        SetPlayerControllerID_ControllerId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlayerControllerID_NativeFunction, "ControllerId");
        SetMaxAudioChannelsScaled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMaxAudioChannelsScaled");
        SetMaxAudioChannelsScaled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMaxAudioChannelsScaled_NativeFunction);
        SetMaxAudioChannelsScaled_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaxAudioChannelsScaled_NativeFunction, "WorldContextObject");
        SetMaxAudioChannelsScaled_MaxChannelCountScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaxAudioChannelsScaled_NativeFunction, "MaxChannelCountScale");
        SetGlobalTimeDilation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGlobalTimeDilation");
        SetGlobalTimeDilation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGlobalTimeDilation_NativeFunction);
        SetGlobalTimeDilation_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalTimeDilation_NativeFunction, "WorldContextObject");
        SetGlobalTimeDilation_TimeDilation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalTimeDilation_NativeFunction, "TimeDilation");
        SetGlobalPitchModulation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGlobalPitchModulation");
        SetGlobalPitchModulation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGlobalPitchModulation_NativeFunction);
        SetGlobalPitchModulation_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalPitchModulation_NativeFunction, "WorldContextObject");
        SetGlobalPitchModulation_PitchModulation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalPitchModulation_NativeFunction, "PitchModulation");
        SetGlobalPitchModulation_TimeSec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalPitchModulation_NativeFunction, "TimeSec");
        SetGlobalListenerFocusParameters_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGlobalListenerFocusParameters");
        SetGlobalListenerFocusParameters_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGlobalListenerFocusParameters_NativeFunction);
        SetGlobalListenerFocusParameters_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalListenerFocusParameters_NativeFunction, "WorldContextObject");
        SetGlobalListenerFocusParameters_FocusAzimuthScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalListenerFocusParameters_NativeFunction, "FocusAzimuthScale");
        SetGlobalListenerFocusParameters_NonFocusAzimuthScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalListenerFocusParameters_NativeFunction, "NonFocusAzimuthScale");
        SetGlobalListenerFocusParameters_FocusDistanceScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalListenerFocusParameters_NativeFunction, "FocusDistanceScale");
        SetGlobalListenerFocusParameters_NonFocusDistanceScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalListenerFocusParameters_NativeFunction, "NonFocusDistanceScale");
        SetGlobalListenerFocusParameters_FocusVolumeScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalListenerFocusParameters_NativeFunction, "FocusVolumeScale");
        SetGlobalListenerFocusParameters_NonFocusVolumeScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalListenerFocusParameters_NativeFunction, "NonFocusVolumeScale");
        SetGlobalListenerFocusParameters_FocusPriorityScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalListenerFocusParameters_NativeFunction, "FocusPriorityScale");
        SetGlobalListenerFocusParameters_NonFocusPriorityScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGlobalListenerFocusParameters_NativeFunction, "NonFocusPriorityScale");
        SetGamePaused_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGamePaused");
        SetGamePaused_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGamePaused_NativeFunction);
        SetGamePaused_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGamePaused_NativeFunction, "WorldContextObject");
        SetGamePaused_bPaused_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGamePaused_NativeFunction, "bPaused");
        SetGamePaused_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGamePaused_NativeFunction, "ReturnValue");
        SetForceDisableSplitscreen_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetForceDisableSplitscreen");
        SetForceDisableSplitscreen_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetForceDisableSplitscreen_NativeFunction);
        SetForceDisableSplitscreen_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetForceDisableSplitscreen_NativeFunction, "WorldContextObject");
        SetForceDisableSplitscreen_bDisable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetForceDisableSplitscreen_NativeFunction, "bDisable");
        SetEnableWorldRendering_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetEnableWorldRendering");
        SetEnableWorldRendering_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetEnableWorldRendering_NativeFunction);
        SetEnableWorldRendering_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEnableWorldRendering_NativeFunction, "WorldContextObject");
        SetEnableWorldRendering_bEnable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEnableWorldRendering_NativeFunction, "bEnable");
        SetBaseSoundMix_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBaseSoundMix");
        SetBaseSoundMix_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBaseSoundMix_NativeFunction);
        SetBaseSoundMix_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBaseSoundMix_NativeFunction, "WorldContextObject");
        SetBaseSoundMix_InSoundMix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBaseSoundMix_NativeFunction, "InSoundMix");
        SetActiveSpatialPluginByName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetActiveSpatialPluginByName");
        SetActiveSpatialPluginByName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetActiveSpatialPluginByName_NativeFunction);
        SetActiveSpatialPluginByName_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetActiveSpatialPluginByName_NativeFunction, "WorldContextObject");
        SetActiveSpatialPluginByName_InPluginName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetActiveSpatialPluginByName_NativeFunction, "InPluginName");
        SetActiveSpatialPluginByName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetActiveSpatialPluginByName_NativeFunction, "ReturnValue");
        SaveGameToSlot_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SaveGameToSlot");
        SaveGameToSlot_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SaveGameToSlot_NativeFunction);
        SaveGameToSlot_SaveGameObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SaveGameToSlot_NativeFunction, "SaveGameObject");
        SaveGameToSlot_SlotName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SaveGameToSlot_NativeFunction, "SlotName");
        SaveGameToSlot_UserIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SaveGameToSlot_NativeFunction, "UserIndex");
        SaveGameToSlot_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SaveGameToSlot_NativeFunction, "ReturnValue");
        RemovePlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemovePlayer");
        RemovePlayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemovePlayer_NativeFunction);
        RemovePlayer_Player_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemovePlayer_NativeFunction, "Player");
        RemovePlayer_bDestroyPawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemovePlayer_NativeFunction, "bDestroyPawn");
        RebaseZeroOriginOntoLocal_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RebaseZeroOriginOntoLocal");
        RebaseZeroOriginOntoLocal_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RebaseZeroOriginOntoLocal_NativeFunction);
        RebaseZeroOriginOntoLocal_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RebaseZeroOriginOntoLocal_NativeFunction, "WorldContextObject");
        RebaseZeroOriginOntoLocal_WorldLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RebaseZeroOriginOntoLocal_NativeFunction, "WorldLocation");
        RebaseZeroOriginOntoLocal_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RebaseZeroOriginOntoLocal_NativeFunction, "ReturnValue");
        RebaseLocalOriginOntoZero_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RebaseLocalOriginOntoZero");
        RebaseLocalOriginOntoZero_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RebaseLocalOriginOntoZero_NativeFunction);
        RebaseLocalOriginOntoZero_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RebaseLocalOriginOntoZero_NativeFunction, "WorldContextObject");
        RebaseLocalOriginOntoZero_WorldLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RebaseLocalOriginOntoZero_NativeFunction, "WorldLocation");
        RebaseLocalOriginOntoZero_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RebaseLocalOriginOntoZero_NativeFunction, "ReturnValue");
        PushSoundMixModifier_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PushSoundMixModifier");
        PushSoundMixModifier_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PushSoundMixModifier_NativeFunction);
        PushSoundMixModifier_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PushSoundMixModifier_NativeFunction, "WorldContextObject");
        PushSoundMixModifier_InSoundMixModifier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PushSoundMixModifier_NativeFunction, "InSoundMixModifier");
        ProjectWorldToScreen_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ProjectWorldToScreen");
        ProjectWorldToScreen_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ProjectWorldToScreen_NativeFunction);
        ProjectWorldToScreen_Player_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProjectWorldToScreen_NativeFunction, "Player");
        ProjectWorldToScreen_WorldPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProjectWorldToScreen_NativeFunction, "WorldPosition");
        ProjectWorldToScreen_ScreenPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProjectWorldToScreen_NativeFunction, "ScreenPosition");
        ProjectWorldToScreen_bPlayerViewportRelative_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProjectWorldToScreen_NativeFunction, "bPlayerViewportRelative");
        ProjectWorldToScreen_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProjectWorldToScreen_NativeFunction, "ReturnValue");
        PrimeSound_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PrimeSound");
        PrimeSound_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PrimeSound_NativeFunction);
        PrimeSound_InSound_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PrimeSound_NativeFunction, "InSound");
        PrimeAllSoundsInSoundClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PrimeAllSoundsInSoundClass");
        PrimeAllSoundsInSoundClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PrimeAllSoundsInSoundClass_NativeFunction);
        PrimeAllSoundsInSoundClass_InSoundClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PrimeAllSoundsInSoundClass_NativeFunction, "InSoundClass");
        PopSoundMixModifier_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PopSoundMixModifier");
        PopSoundMixModifier_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PopSoundMixModifier_NativeFunction);
        PopSoundMixModifier_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PopSoundMixModifier_NativeFunction, "WorldContextObject");
        PopSoundMixModifier_InSoundMixModifier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PopSoundMixModifier_NativeFunction, "InSoundMixModifier");
        PlayWorldCameraShake_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlayWorldCameraShake");
        PlayWorldCameraShake_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PlayWorldCameraShake_NativeFunction);
        PlayWorldCameraShake_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayWorldCameraShake_NativeFunction, "WorldContextObject");
        PlayWorldCameraShake_Shake_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayWorldCameraShake_NativeFunction, "Shake");
        PlayWorldCameraShake_Epicenter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayWorldCameraShake_NativeFunction, "Epicenter");
        PlayWorldCameraShake_InnerRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayWorldCameraShake_NativeFunction, "InnerRadius");
        PlayWorldCameraShake_OuterRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayWorldCameraShake_NativeFunction, "OuterRadius");
        PlayWorldCameraShake_Falloff_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayWorldCameraShake_NativeFunction, "Falloff");
        PlayWorldCameraShake_bOrientShakeTowardsEpicenter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayWorldCameraShake_NativeFunction, "bOrientShakeTowardsEpicenter");
        PlaySoundAtLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlaySoundAtLocation");
        PlaySoundAtLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PlaySoundAtLocation_NativeFunction);
        PlaySoundAtLocation_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySoundAtLocation_NativeFunction, "WorldContextObject");
        PlaySoundAtLocation_Sound_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySoundAtLocation_NativeFunction, "Sound");
        PlaySoundAtLocation_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySoundAtLocation_NativeFunction, "Location");
        PlaySoundAtLocation_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySoundAtLocation_NativeFunction, "Rotation");
        PlaySoundAtLocation_VolumeMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySoundAtLocation_NativeFunction, "VolumeMultiplier");
        PlaySoundAtLocation_PitchMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySoundAtLocation_NativeFunction, "PitchMultiplier");
        PlaySoundAtLocation_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySoundAtLocation_NativeFunction, "StartTime");
        PlaySoundAtLocation_AttenuationSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySoundAtLocation_NativeFunction, "AttenuationSettings");
        PlaySoundAtLocation_ConcurrencySettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySoundAtLocation_NativeFunction, "ConcurrencySettings");
        PlaySoundAtLocation_OwningActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySoundAtLocation_NativeFunction, "OwningActor");
        PlaySoundAtLocation_InitialParams_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySoundAtLocation_NativeFunction, "InitialParams");
        PlaySound2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlaySound2D");
        PlaySound2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PlaySound2D_NativeFunction);
        PlaySound2D_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySound2D_NativeFunction, "WorldContextObject");
        PlaySound2D_Sound_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySound2D_NativeFunction, "Sound");
        PlaySound2D_VolumeMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySound2D_NativeFunction, "VolumeMultiplier");
        PlaySound2D_PitchMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySound2D_NativeFunction, "PitchMultiplier");
        PlaySound2D_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySound2D_NativeFunction, "StartTime");
        PlaySound2D_ConcurrencySettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySound2D_NativeFunction, "ConcurrencySettings");
        PlaySound2D_OwningActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySound2D_NativeFunction, "OwningActor");
        PlaySound2D_bIsUISound_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlaySound2D_NativeFunction, "bIsUISound");
        PlayDialogueAtLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlayDialogueAtLocation");
        PlayDialogueAtLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PlayDialogueAtLocation_NativeFunction);
        PlayDialogueAtLocation_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayDialogueAtLocation_NativeFunction, "WorldContextObject");
        PlayDialogueAtLocation_Dialogue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayDialogueAtLocation_NativeFunction, "Dialogue");
        PlayDialogueAtLocation_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayDialogueAtLocation_NativeFunction, "Context");
        PlayDialogueAtLocation_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayDialogueAtLocation_NativeFunction, "Location");
        PlayDialogueAtLocation_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayDialogueAtLocation_NativeFunction, "Rotation");
        PlayDialogueAtLocation_VolumeMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayDialogueAtLocation_NativeFunction, "VolumeMultiplier");
        PlayDialogueAtLocation_PitchMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayDialogueAtLocation_NativeFunction, "PitchMultiplier");
        PlayDialogueAtLocation_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayDialogueAtLocation_NativeFunction, "StartTime");
        PlayDialogueAtLocation_AttenuationSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayDialogueAtLocation_NativeFunction, "AttenuationSettings");
        PlayDialogue2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlayDialogue2D");
        PlayDialogue2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PlayDialogue2D_NativeFunction);
        PlayDialogue2D_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayDialogue2D_NativeFunction, "WorldContextObject");
        PlayDialogue2D_Dialogue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayDialogue2D_NativeFunction, "Dialogue");
        PlayDialogue2D_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayDialogue2D_NativeFunction, "Context");
        PlayDialogue2D_VolumeMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayDialogue2D_NativeFunction, "VolumeMultiplier");
        PlayDialogue2D_PitchMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayDialogue2D_NativeFunction, "PitchMultiplier");
        PlayDialogue2D_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayDialogue2D_NativeFunction, "StartTime");
        ParseOption_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ParseOption");
        ParseOption_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ParseOption_NativeFunction);
        ParseOption_Options_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ParseOption_NativeFunction, "Options");
        ParseOption_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ParseOption_NativeFunction, "Key");
        ParseOption_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ParseOption_NativeFunction, "ReturnValue");
        OpenLevelBySoftObjectPtr_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OpenLevelBySoftObjectPtr");
        OpenLevelBySoftObjectPtr_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OpenLevelBySoftObjectPtr_NativeFunction);
        OpenLevelBySoftObjectPtr_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenLevelBySoftObjectPtr_NativeFunction, "WorldContextObject");
        OpenLevelBySoftObjectPtr_Level_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenLevelBySoftObjectPtr_NativeFunction, "Level");
        OpenLevelBySoftObjectPtr_bAbsolute_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenLevelBySoftObjectPtr_NativeFunction, "bAbsolute");
        OpenLevelBySoftObjectPtr_Options_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenLevelBySoftObjectPtr_NativeFunction, "Options");
        OpenLevel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OpenLevel");
        OpenLevel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OpenLevel_NativeFunction);
        OpenLevel_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenLevel_NativeFunction, "WorldContextObject");
        OpenLevel_LevelName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenLevel_NativeFunction, "LevelName");
        OpenLevel_bAbsolute_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenLevel_NativeFunction, "bAbsolute");
        OpenLevel_Options_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenLevel_NativeFunction, "Options");
        ObjectIsA_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ObjectIsA");
        ObjectIsA_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ObjectIsA_NativeFunction);
        ObjectIsA_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ObjectIsA_NativeFunction, "Object");
        ObjectIsA_ObjectClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ObjectIsA_NativeFunction, "ObjectClass");
        ObjectIsA_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ObjectIsA_NativeFunction, "ReturnValue");
        LoadGameFromSlot_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LoadGameFromSlot");
        LoadGameFromSlot_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LoadGameFromSlot_NativeFunction);
        LoadGameFromSlot_SlotName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LoadGameFromSlot_NativeFunction, "SlotName");
        LoadGameFromSlot_UserIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LoadGameFromSlot_NativeFunction, "UserIndex");
        LoadGameFromSlot_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LoadGameFromSlot_NativeFunction, "ReturnValue");
        IsSplitscreenForceDisabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsSplitscreenForceDisabled");
        IsSplitscreenForceDisabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsSplitscreenForceDisabled_NativeFunction);
        IsSplitscreenForceDisabled_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSplitscreenForceDisabled_NativeFunction, "WorldContextObject");
        IsSplitscreenForceDisabled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSplitscreenForceDisabled_NativeFunction, "ReturnValue");
        IsGamePaused_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsGamePaused");
        IsGamePaused_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsGamePaused_NativeFunction);
        IsGamePaused_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsGamePaused_NativeFunction, "WorldContextObject");
        IsGamePaused_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsGamePaused_NativeFunction, "ReturnValue");
        IsAnyLocalPlayerCameraWithinRange_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsAnyLocalPlayerCameraWithinRange");
        IsAnyLocalPlayerCameraWithinRange_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsAnyLocalPlayerCameraWithinRange_NativeFunction);
        IsAnyLocalPlayerCameraWithinRange_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAnyLocalPlayerCameraWithinRange_NativeFunction, "WorldContextObject");
        IsAnyLocalPlayerCameraWithinRange_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAnyLocalPlayerCameraWithinRange_NativeFunction, "Location");
        IsAnyLocalPlayerCameraWithinRange_MaximumRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAnyLocalPlayerCameraWithinRange_NativeFunction, "MaximumRange");
        IsAnyLocalPlayerCameraWithinRange_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAnyLocalPlayerCameraWithinRange_NativeFunction, "ReturnValue");
        HasOption_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasOption");
        HasOption_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasOption_NativeFunction);
        HasOption_Options_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasOption_NativeFunction, "Options");
        HasOption_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasOption_NativeFunction, "InKey");
        HasOption_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasOption_NativeFunction, "ReturnValue");
        HasLaunchOption_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasLaunchOption");
        HasLaunchOption_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasLaunchOption_NativeFunction);
        HasLaunchOption_OptionToCheck_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasLaunchOption_NativeFunction, "OptionToCheck");
        HasLaunchOption_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasLaunchOption_NativeFunction, "ReturnValue");
        GrassOverlappingSphereCount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GrassOverlappingSphereCount");
        GrassOverlappingSphereCount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GrassOverlappingSphereCount_NativeFunction);
        GrassOverlappingSphereCount_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GrassOverlappingSphereCount_NativeFunction, "WorldContextObject");
        GrassOverlappingSphereCount_StaticMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GrassOverlappingSphereCount_NativeFunction, "StaticMesh");
        GrassOverlappingSphereCount_CenterPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GrassOverlappingSphereCount_NativeFunction, "CenterPosition");
        GrassOverlappingSphereCount_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GrassOverlappingSphereCount_NativeFunction, "Radius");
        GrassOverlappingSphereCount_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GrassOverlappingSphereCount_NativeFunction, "ReturnValue");
        GetWorldOriginLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWorldOriginLocation");
        GetWorldOriginLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWorldOriginLocation_NativeFunction);
        GetWorldOriginLocation_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldOriginLocation_NativeFunction, "WorldContextObject");
        GetWorldOriginLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldOriginLocation_NativeFunction, "ReturnValue");
        GetWorldDeltaSeconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWorldDeltaSeconds");
        GetWorldDeltaSeconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWorldDeltaSeconds_NativeFunction);
        GetWorldDeltaSeconds_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldDeltaSeconds_NativeFunction, "WorldContextObject");
        GetWorldDeltaSeconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldDeltaSeconds_NativeFunction, "ReturnValue");
        GetViewProjectionMatrix_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetViewProjectionMatrix");
        GetViewProjectionMatrix_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetViewProjectionMatrix_NativeFunction);
        GetViewProjectionMatrix_DesiredView_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetViewProjectionMatrix_NativeFunction, "DesiredView");
        GetViewProjectionMatrix_ViewMatrix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetViewProjectionMatrix_NativeFunction, "ViewMatrix");
        GetViewProjectionMatrix_ProjectionMatrix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetViewProjectionMatrix_NativeFunction, "ProjectionMatrix");
        GetViewProjectionMatrix_ViewProjectionMatrix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetViewProjectionMatrix_NativeFunction, "ViewProjectionMatrix");
        GetViewportMouseCaptureMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetViewportMouseCaptureMode");
        GetViewportMouseCaptureMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetViewportMouseCaptureMode_NativeFunction);
        GetViewportMouseCaptureMode_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetViewportMouseCaptureMode_NativeFunction, "WorldContextObject");
        GetViewportMouseCaptureMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetViewportMouseCaptureMode_NativeFunction, "ReturnValue");
        GetUnpausedTimeSeconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetUnpausedTimeSeconds");
        GetUnpausedTimeSeconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetUnpausedTimeSeconds_NativeFunction);
        GetUnpausedTimeSeconds_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUnpausedTimeSeconds_NativeFunction, "WorldContextObject");
        GetUnpausedTimeSeconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUnpausedTimeSeconds_NativeFunction, "ReturnValue");
        GetTimeSeconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTimeSeconds");
        GetTimeSeconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTimeSeconds_NativeFunction);
        GetTimeSeconds_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTimeSeconds_NativeFunction, "WorldContextObject");
        GetTimeSeconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTimeSeconds_NativeFunction, "ReturnValue");
        GetSurfaceType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSurfaceType");
        GetSurfaceType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSurfaceType_NativeFunction);
        GetSurfaceType_Hit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSurfaceType_NativeFunction, "Hit");
        GetSurfaceType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSurfaceType_NativeFunction, "ReturnValue");
        GetStreamingLevel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStreamingLevel");
        GetStreamingLevel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStreamingLevel_NativeFunction);
        GetStreamingLevel_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStreamingLevel_NativeFunction, "WorldContextObject");
        GetStreamingLevel_PackageName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStreamingLevel_NativeFunction, "PackageName");
        GetStreamingLevel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStreamingLevel_NativeFunction, "ReturnValue");
        GetRealTimeSeconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRealTimeSeconds");
        GetRealTimeSeconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRealTimeSeconds_NativeFunction);
        GetRealTimeSeconds_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRealTimeSeconds_NativeFunction, "WorldContextObject");
        GetRealTimeSeconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRealTimeSeconds_NativeFunction, "ReturnValue");
        GetPlayerStateFromUniqueNetId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayerStateFromUniqueNetId");
        GetPlayerStateFromUniqueNetId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayerStateFromUniqueNetId_NativeFunction);
        GetPlayerStateFromUniqueNetId_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerStateFromUniqueNetId_NativeFunction, "WorldContextObject");
        GetPlayerStateFromUniqueNetId_UniqueId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerStateFromUniqueNetId_NativeFunction, "UniqueId");
        GetPlayerStateFromUniqueNetId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerStateFromUniqueNetId_NativeFunction, "ReturnValue");
        GetPlayerState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayerState");
        GetPlayerState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayerState_NativeFunction);
        GetPlayerState_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerState_NativeFunction, "WorldContextObject");
        GetPlayerState_PlayerStateIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerState_NativeFunction, "PlayerStateIndex");
        GetPlayerState_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerState_NativeFunction, "ReturnValue");
        GetPlayerPawn_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayerPawn");
        GetPlayerPawn_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayerPawn_NativeFunction);
        GetPlayerPawn_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerPawn_NativeFunction, "WorldContextObject");
        GetPlayerPawn_PlayerIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerPawn_NativeFunction, "PlayerIndex");
        GetPlayerPawn_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerPawn_NativeFunction, "ReturnValue");
        GetPlayerControllerID_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayerControllerID");
        GetPlayerControllerID_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayerControllerID_NativeFunction);
        GetPlayerControllerID_Player_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerControllerID_NativeFunction, "Player");
        GetPlayerControllerID_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerControllerID_NativeFunction, "ReturnValue");
        GetPlayerControllerFromPlatformUser_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayerControllerFromPlatformUser");
        GetPlayerControllerFromPlatformUser_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayerControllerFromPlatformUser_NativeFunction);
        GetPlayerControllerFromPlatformUser_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerControllerFromPlatformUser_NativeFunction, "WorldContextObject");
        GetPlayerControllerFromPlatformUser_UserId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerControllerFromPlatformUser_NativeFunction, "UserId");
        GetPlayerControllerFromPlatformUser_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerControllerFromPlatformUser_NativeFunction, "ReturnValue");
        GetPlayerControllerFromID_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayerControllerFromID");
        GetPlayerControllerFromID_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayerControllerFromID_NativeFunction);
        GetPlayerControllerFromID_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerControllerFromID_NativeFunction, "WorldContextObject");
        GetPlayerControllerFromID_ControllerID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerControllerFromID_NativeFunction, "ControllerID");
        GetPlayerControllerFromID_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerControllerFromID_NativeFunction, "ReturnValue");
        GetPlayerController_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayerController");
        GetPlayerController_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayerController_NativeFunction);
        GetPlayerController_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerController_NativeFunction, "WorldContextObject");
        GetPlayerController_PlayerIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerController_NativeFunction, "PlayerIndex");
        GetPlayerController_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerController_NativeFunction, "ReturnValue");
        GetPlayerCharacter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayerCharacter");
        GetPlayerCharacter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayerCharacter_NativeFunction);
        GetPlayerCharacter_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerCharacter_NativeFunction, "WorldContextObject");
        GetPlayerCharacter_PlayerIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerCharacter_NativeFunction, "PlayerIndex");
        GetPlayerCharacter_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerCharacter_NativeFunction, "ReturnValue");
        GetPlayerCameraManager_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayerCameraManager");
        GetPlayerCameraManager_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayerCameraManager_NativeFunction);
        GetPlayerCameraManager_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerCameraManager_NativeFunction, "WorldContextObject");
        GetPlayerCameraManager_PlayerIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerCameraManager_NativeFunction, "PlayerIndex");
        GetPlayerCameraManager_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerCameraManager_NativeFunction, "ReturnValue");
        GetPlatformName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlatformName");
        GetPlatformName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlatformName_NativeFunction);
        GetPlatformName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlatformName_NativeFunction, "ReturnValue");
        GetObjectClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetObjectClass");
        GetObjectClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetObjectClass_NativeFunction);
        GetObjectClass_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetObjectClass_NativeFunction, "Object");
        GetObjectClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetObjectClass_NativeFunction, "ReturnValue");
        GetNumPlayerStates_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumPlayerStates");
        GetNumPlayerStates_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumPlayerStates_NativeFunction);
        GetNumPlayerStates_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumPlayerStates_NativeFunction, "WorldContextObject");
        GetNumPlayerStates_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumPlayerStates_NativeFunction, "ReturnValue");
        GetNumPlayerControllers_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumPlayerControllers");
        GetNumPlayerControllers_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumPlayerControllers_NativeFunction);
        GetNumPlayerControllers_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumPlayerControllers_NativeFunction, "WorldContextObject");
        GetNumPlayerControllers_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumPlayerControllers_NativeFunction, "ReturnValue");
        GetNumLocalPlayerControllers_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumLocalPlayerControllers");
        GetNumLocalPlayerControllers_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumLocalPlayerControllers_NativeFunction);
        GetNumLocalPlayerControllers_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumLocalPlayerControllers_NativeFunction, "WorldContextObject");
        GetNumLocalPlayerControllers_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumLocalPlayerControllers_NativeFunction, "ReturnValue");
        GetMaxAudioChannelCount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaxAudioChannelCount");
        GetMaxAudioChannelCount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaxAudioChannelCount_NativeFunction);
        GetMaxAudioChannelCount_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaxAudioChannelCount_NativeFunction, "WorldContextObject");
        GetMaxAudioChannelCount_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaxAudioChannelCount_NativeFunction, "ReturnValue");
        GetKeyValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetKeyValue");
        GetKeyValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetKeyValue_NativeFunction);
        GetKeyValue_Pair_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetKeyValue_NativeFunction, "Pair");
        GetKeyValue_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetKeyValue_NativeFunction, "Key");
        GetKeyValue_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetKeyValue_NativeFunction, "Value");
        GetIntOption_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetIntOption");
        GetIntOption_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetIntOption_NativeFunction);
        GetIntOption_Options_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetIntOption_NativeFunction, "Options");
        GetIntOption_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetIntOption_NativeFunction, "Key");
        GetIntOption_DefaultValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetIntOption_NativeFunction, "DefaultValue");
        GetIntOption_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetIntOption_NativeFunction, "ReturnValue");
        GetGlobalTimeDilation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGlobalTimeDilation");
        GetGlobalTimeDilation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGlobalTimeDilation_NativeFunction);
        GetGlobalTimeDilation_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGlobalTimeDilation_NativeFunction, "WorldContextObject");
        GetGlobalTimeDilation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGlobalTimeDilation_NativeFunction, "ReturnValue");
        GetGameState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGameState");
        GetGameState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGameState_NativeFunction);
        GetGameState_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGameState_NativeFunction, "WorldContextObject");
        GetGameState_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGameState_NativeFunction, "ReturnValue");
        GetGameMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGameMode");
        GetGameMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGameMode_NativeFunction);
        GetGameMode_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGameMode_NativeFunction, "WorldContextObject");
        GetGameMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGameMode_NativeFunction, "ReturnValue");
        GetGameInstance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGameInstance");
        GetGameInstance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGameInstance_NativeFunction);
        GetGameInstance_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGameInstance_NativeFunction, "WorldContextObject");
        GetGameInstance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGameInstance_NativeFunction, "ReturnValue");
        GetEnableWorldRendering_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEnableWorldRendering");
        GetEnableWorldRendering_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEnableWorldRendering_NativeFunction);
        GetEnableWorldRendering_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEnableWorldRendering_NativeFunction, "WorldContextObject");
        GetEnableWorldRendering_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEnableWorldRendering_NativeFunction, "ReturnValue");
        GetCurrentReverbEffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentReverbEffect");
        GetCurrentReverbEffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentReverbEffect_NativeFunction);
        GetCurrentReverbEffect_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentReverbEffect_NativeFunction, "WorldContextObject");
        GetCurrentReverbEffect_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentReverbEffect_NativeFunction, "ReturnValue");
        GetCurrentLevelName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentLevelName");
        GetCurrentLevelName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentLevelName_NativeFunction);
        GetCurrentLevelName_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentLevelName_NativeFunction, "WorldContextObject");
        GetCurrentLevelName_bRemovePrefixString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentLevelName_NativeFunction, "bRemovePrefixString");
        GetCurrentLevelName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentLevelName_NativeFunction, "ReturnValue");
        GetClosestListenerLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetClosestListenerLocation");
        GetClosestListenerLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetClosestListenerLocation_NativeFunction);
        GetClosestListenerLocation_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClosestListenerLocation_NativeFunction, "WorldContextObject");
        GetClosestListenerLocation_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClosestListenerLocation_NativeFunction, "Location");
        GetClosestListenerLocation_MaximumRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClosestListenerLocation_NativeFunction, "MaximumRange");
        GetClosestListenerLocation_bAllowAttenuationOverride_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClosestListenerLocation_NativeFunction, "bAllowAttenuationOverride");
        GetClosestListenerLocation_ListenerPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClosestListenerLocation_NativeFunction, "ListenerPosition");
        GetClosestListenerLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClosestListenerLocation_NativeFunction, "ReturnValue");
        GetAvailableSpatialPluginNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAvailableSpatialPluginNames");
        GetAvailableSpatialPluginNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAvailableSpatialPluginNames_NativeFunction);
        GetAvailableSpatialPluginNames_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAvailableSpatialPluginNames_NativeFunction, "WorldContextObject");
        GetAvailableSpatialPluginNames_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAvailableSpatialPluginNames_NativeFunction, "ReturnValue");
        GetAvailableSpatialPluginNames_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAvailableSpatialPluginNames_NativeFunction, "ReturnValue");
        GetAudioTimeSeconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAudioTimeSeconds");
        GetAudioTimeSeconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAudioTimeSeconds_NativeFunction);
        GetAudioTimeSeconds_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAudioTimeSeconds_NativeFunction, "WorldContextObject");
        GetAudioTimeSeconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAudioTimeSeconds_NativeFunction, "ReturnValue");
        GetAllActorsWithTag_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAllActorsWithTag");
        GetAllActorsWithTag_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAllActorsWithTag_NativeFunction);
        GetAllActorsWithTag_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllActorsWithTag_NativeFunction, "WorldContextObject");
        GetAllActorsWithTag_Tag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllActorsWithTag_NativeFunction, "Tag");
        GetAllActorsWithTag_OutActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllActorsWithTag_NativeFunction, "OutActors");
        GetAllActorsWithTag_OutActors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAllActorsWithTag_NativeFunction, "OutActors");
        GetAllActorsWithInterface_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAllActorsWithInterface");
        GetAllActorsWithInterface_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAllActorsWithInterface_NativeFunction);
        GetAllActorsWithInterface_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllActorsWithInterface_NativeFunction, "WorldContextObject");
        GetAllActorsWithInterface_Interface_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllActorsWithInterface_NativeFunction, "Interface");
        GetAllActorsWithInterface_OutActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllActorsWithInterface_NativeFunction, "OutActors");
        GetAllActorsWithInterface_OutActors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAllActorsWithInterface_NativeFunction, "OutActors");
        GetAllActorsOfClassWithTag_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAllActorsOfClassWithTag");
        GetAllActorsOfClassWithTag_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAllActorsOfClassWithTag_NativeFunction);
        GetAllActorsOfClassWithTag_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllActorsOfClassWithTag_NativeFunction, "WorldContextObject");
        GetAllActorsOfClassWithTag_ActorClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllActorsOfClassWithTag_NativeFunction, "ActorClass");
        GetAllActorsOfClassWithTag_Tag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllActorsOfClassWithTag_NativeFunction, "Tag");
        GetAllActorsOfClassWithTag_OutActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllActorsOfClassWithTag_NativeFunction, "OutActors");
        GetAllActorsOfClassWithTag_OutActors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAllActorsOfClassWithTag_NativeFunction, "OutActors");
        GetAllActorsOfClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAllActorsOfClass");
        GetAllActorsOfClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAllActorsOfClass_NativeFunction);
        GetAllActorsOfClass_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllActorsOfClass_NativeFunction, "WorldContextObject");
        GetAllActorsOfClass_ActorClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllActorsOfClass_NativeFunction, "ActorClass");
        GetAllActorsOfClass_OutActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllActorsOfClass_NativeFunction, "OutActors");
        GetAllActorsOfClass_OutActors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAllActorsOfClass_NativeFunction, "OutActors");
        GetActorOfClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActorOfClass");
        GetActorOfClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActorOfClass_NativeFunction);
        GetActorOfClass_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorOfClass_NativeFunction, "WorldContextObject");
        GetActorOfClass_ActorClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorOfClass_NativeFunction, "ActorClass");
        GetActorOfClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorOfClass_NativeFunction, "ReturnValue");
        GetActorArrayBounds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActorArrayBounds");
        GetActorArrayBounds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActorArrayBounds_NativeFunction);
        GetActorArrayBounds_Actors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorArrayBounds_NativeFunction, "Actors");
        GetActorArrayBounds_Actors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetActorArrayBounds_NativeFunction, "Actors");
        GetActorArrayBounds_bOnlyCollidingComponents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorArrayBounds_NativeFunction, "bOnlyCollidingComponents");
        GetActorArrayBounds_Center_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorArrayBounds_NativeFunction, "Center");
        GetActorArrayBounds_BoxExtent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorArrayBounds_NativeFunction, "BoxExtent");
        GetActorArrayAverageLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActorArrayAverageLocation");
        GetActorArrayAverageLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActorArrayAverageLocation_NativeFunction);
        GetActorArrayAverageLocation_Actors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorArrayAverageLocation_NativeFunction, "Actors");
        GetActorArrayAverageLocation_Actors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetActorArrayAverageLocation_NativeFunction, "Actors");
        GetActorArrayAverageLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorArrayAverageLocation_NativeFunction, "ReturnValue");
        GetActiveSpatialPluginName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActiveSpatialPluginName");
        GetActiveSpatialPluginName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActiveSpatialPluginName_NativeFunction);
        GetActiveSpatialPluginName_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActiveSpatialPluginName_NativeFunction, "WorldContextObject");
        GetActiveSpatialPluginName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActiveSpatialPluginName_NativeFunction, "ReturnValue");
        GetAccurateRealTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAccurateRealTime");
        GetAccurateRealTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAccurateRealTime_NativeFunction);
        GetAccurateRealTime_Seconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAccurateRealTime_NativeFunction, "Seconds");
        GetAccurateRealTime_PartialSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAccurateRealTime_NativeFunction, "PartialSeconds");
        FlushLevelStreaming_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FlushLevelStreaming");
        FlushLevelStreaming_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FlushLevelStreaming_NativeFunction);
        FlushLevelStreaming_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FlushLevelStreaming_NativeFunction, "WorldContextObject");
        FindNearestActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindNearestActor");
        FindNearestActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindNearestActor_NativeFunction);
        FindNearestActor_Origin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNearestActor_NativeFunction, "Origin");
        FindNearestActor_ActorsToCheck_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNearestActor_NativeFunction, "ActorsToCheck");
        FindNearestActor_ActorsToCheck_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(FindNearestActor_NativeFunction, "ActorsToCheck");
        FindNearestActor_Distance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNearestActor_NativeFunction, "Distance");
        FindNearestActor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNearestActor_NativeFunction, "ReturnValue");
        FindCollisionUV_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindCollisionUV");
        FindCollisionUV_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindCollisionUV_NativeFunction);
        FindCollisionUV_Hit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindCollisionUV_NativeFunction, "Hit");
        FindCollisionUV_UVChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindCollisionUV_NativeFunction, "UVChannel");
        FindCollisionUV_UV_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindCollisionUV_NativeFunction, "UV");
        FindCollisionUV_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindCollisionUV_NativeFunction, "ReturnValue");
        EnableLiveStreaming_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EnableLiveStreaming");
        EnableLiveStreaming_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EnableLiveStreaming_NativeFunction);
        EnableLiveStreaming_Enable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EnableLiveStreaming_NativeFunction, "Enable");
        DoesSaveGameExist_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DoesSaveGameExist");
        DoesSaveGameExist_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DoesSaveGameExist_NativeFunction);
        DoesSaveGameExist_SlotName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesSaveGameExist_NativeFunction, "SlotName");
        DoesSaveGameExist_UserIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesSaveGameExist_NativeFunction, "UserIndex");
        DoesSaveGameExist_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesSaveGameExist_NativeFunction, "ReturnValue");
        DeprojectScreenToWorld_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeprojectScreenToWorld");
        DeprojectScreenToWorld_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeprojectScreenToWorld_NativeFunction);
        DeprojectScreenToWorld_Player_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeprojectScreenToWorld_NativeFunction, "Player");
        DeprojectScreenToWorld_ScreenPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeprojectScreenToWorld_NativeFunction, "ScreenPosition");
        DeprojectScreenToWorld_WorldPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeprojectScreenToWorld_NativeFunction, "WorldPosition");
        DeprojectScreenToWorld_WorldDirection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeprojectScreenToWorld_NativeFunction, "WorldDirection");
        DeprojectScreenToWorld_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeprojectScreenToWorld_NativeFunction, "ReturnValue");
        DeprojectSceneCaptureToWorld_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeprojectSceneCaptureToWorld");
        DeprojectSceneCaptureToWorld_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeprojectSceneCaptureToWorld_NativeFunction);
        DeprojectSceneCaptureToWorld_SceneCapture2D_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeprojectSceneCaptureToWorld_NativeFunction, "SceneCapture2D");
        DeprojectSceneCaptureToWorld_TargetUV_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeprojectSceneCaptureToWorld_NativeFunction, "TargetUV");
        DeprojectSceneCaptureToWorld_WorldPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeprojectSceneCaptureToWorld_NativeFunction, "WorldPosition");
        DeprojectSceneCaptureToWorld_WorldDirection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeprojectSceneCaptureToWorld_NativeFunction, "WorldDirection");
        DeprojectSceneCaptureToWorld_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeprojectSceneCaptureToWorld_NativeFunction, "ReturnValue");
        DeleteGameInSlot_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeleteGameInSlot");
        DeleteGameInSlot_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeleteGameInSlot_NativeFunction);
        DeleteGameInSlot_SlotName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteGameInSlot_NativeFunction, "SlotName");
        DeleteGameInSlot_UserIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteGameInSlot_NativeFunction, "UserIndex");
        DeleteGameInSlot_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteGameInSlot_NativeFunction, "ReturnValue");
        DeactivateReverbEffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeactivateReverbEffect");
        DeactivateReverbEffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeactivateReverbEffect_NativeFunction);
        DeactivateReverbEffect_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeactivateReverbEffect_NativeFunction, "WorldContextObject");
        DeactivateReverbEffect_TagName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeactivateReverbEffect_NativeFunction, "TagName");
        CreateSound2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateSound2D");
        CreateSound2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateSound2D_NativeFunction);
        CreateSound2D_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateSound2D_NativeFunction, "WorldContextObject");
        CreateSound2D_Sound_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateSound2D_NativeFunction, "Sound");
        CreateSound2D_VolumeMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateSound2D_NativeFunction, "VolumeMultiplier");
        CreateSound2D_PitchMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateSound2D_NativeFunction, "PitchMultiplier");
        CreateSound2D_StartTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateSound2D_NativeFunction, "StartTime");
        CreateSound2D_ConcurrencySettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateSound2D_NativeFunction, "ConcurrencySettings");
        CreateSound2D_bPersistAcrossLevelTransition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateSound2D_NativeFunction, "bPersistAcrossLevelTransition");
        CreateSound2D_bAutoDestroy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateSound2D_NativeFunction, "bAutoDestroy");
        CreateSound2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateSound2D_NativeFunction, "ReturnValue");
        CreateSaveGameObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateSaveGameObject");
        CreateSaveGameObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateSaveGameObject_NativeFunction);
        CreateSaveGameObject_SaveGameClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateSaveGameObject_NativeFunction, "SaveGameClass");
        CreateSaveGameObject_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateSaveGameObject_NativeFunction, "ReturnValue");
        CreatePlayerFromPlatformUser_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreatePlayerFromPlatformUser");
        CreatePlayerFromPlatformUser_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreatePlayerFromPlatformUser_NativeFunction);
        CreatePlayerFromPlatformUser_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreatePlayerFromPlatformUser_NativeFunction, "WorldContextObject");
        CreatePlayerFromPlatformUser_UserId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreatePlayerFromPlatformUser_NativeFunction, "UserId");
        CreatePlayerFromPlatformUser_bSpawnPlayerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreatePlayerFromPlatformUser_NativeFunction, "bSpawnPlayerController");
        CreatePlayerFromPlatformUser_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreatePlayerFromPlatformUser_NativeFunction, "ReturnValue");
        CreatePlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreatePlayer");
        CreatePlayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreatePlayer_NativeFunction);
        CreatePlayer_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreatePlayer_NativeFunction, "WorldContextObject");
        CreatePlayer_ControllerId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreatePlayer_NativeFunction, "ControllerId");
        CreatePlayer_bSpawnPlayerController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreatePlayer_NativeFunction, "bSpawnPlayerController");
        CreatePlayer_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreatePlayer_NativeFunction, "ReturnValue");
        ClearSoundMixModifiers_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearSoundMixModifiers");
        ClearSoundMixModifiers_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClearSoundMixModifiers_NativeFunction);
        ClearSoundMixModifiers_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearSoundMixModifiers_NativeFunction, "WorldContextObject");
        ClearSoundMixClassOverride_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearSoundMixClassOverride");
        ClearSoundMixClassOverride_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClearSoundMixClassOverride_NativeFunction);
        ClearSoundMixClassOverride_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearSoundMixClassOverride_NativeFunction, "WorldContextObject");
        ClearSoundMixClassOverride_InSoundMixModifier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearSoundMixClassOverride_NativeFunction, "InSoundMixModifier");
        ClearSoundMixClassOverride_InSoundClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearSoundMixClassOverride_NativeFunction, "InSoundClass");
        ClearSoundMixClassOverride_FadeOutTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearSoundMixClassOverride_NativeFunction, "FadeOutTime");
        CancelAsyncLoading_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CancelAsyncLoading");
        BlueprintSuggestProjectileVelocity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BlueprintSuggestProjectileVelocity");
        BlueprintSuggestProjectileVelocity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BlueprintSuggestProjectileVelocity_NativeFunction);
        BlueprintSuggestProjectileVelocity_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintSuggestProjectileVelocity_NativeFunction, "WorldContextObject");
        BlueprintSuggestProjectileVelocity_TossVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintSuggestProjectileVelocity_NativeFunction, "TossVelocity");
        BlueprintSuggestProjectileVelocity_StartLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintSuggestProjectileVelocity_NativeFunction, "StartLocation");
        BlueprintSuggestProjectileVelocity_EndLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintSuggestProjectileVelocity_NativeFunction, "EndLocation");
        BlueprintSuggestProjectileVelocity_LaunchSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintSuggestProjectileVelocity_NativeFunction, "LaunchSpeed");
        BlueprintSuggestProjectileVelocity_OverrideGravityZ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintSuggestProjectileVelocity_NativeFunction, "OverrideGravityZ");
        BlueprintSuggestProjectileVelocity_TraceOption_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintSuggestProjectileVelocity_NativeFunction, "TraceOption");
        BlueprintSuggestProjectileVelocity_CollisionRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintSuggestProjectileVelocity_NativeFunction, "CollisionRadius");
        BlueprintSuggestProjectileVelocity_bFavorHighArc_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintSuggestProjectileVelocity_NativeFunction, "bFavorHighArc");
        BlueprintSuggestProjectileVelocity_bDrawDebug_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintSuggestProjectileVelocity_NativeFunction, "bDrawDebug");
        BlueprintSuggestProjectileVelocity_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintSuggestProjectileVelocity_NativeFunction, "ReturnValue");
        Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Blueprint_PredictProjectilePath_ByTraceChannel");
        Blueprint_PredictProjectilePath_ByTraceChannel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction);
        Blueprint_PredictProjectilePath_ByTraceChannel_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction, "WorldContextObject");
        Blueprint_PredictProjectilePath_ByTraceChannel_OutHit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction, "OutHit");
        Blueprint_PredictProjectilePath_ByTraceChannel_OutPathPositions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction, "OutPathPositions");
        Blueprint_PredictProjectilePath_ByTraceChannel_OutPathPositions_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction, "OutPathPositions");
        Blueprint_PredictProjectilePath_ByTraceChannel_OutLastTraceDestination_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction, "OutLastTraceDestination");
        Blueprint_PredictProjectilePath_ByTraceChannel_StartPos_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction, "StartPos");
        Blueprint_PredictProjectilePath_ByTraceChannel_LaunchVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction, "LaunchVelocity");
        Blueprint_PredictProjectilePath_ByTraceChannel_bTracePath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction, "bTracePath");
        Blueprint_PredictProjectilePath_ByTraceChannel_ProjectileRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction, "ProjectileRadius");
        Blueprint_PredictProjectilePath_ByTraceChannel_TraceChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction, "TraceChannel");
        Blueprint_PredictProjectilePath_ByTraceChannel_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction, "bTraceComplex");
        Blueprint_PredictProjectilePath_ByTraceChannel_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction, "ActorsToIgnore");
        Blueprint_PredictProjectilePath_ByTraceChannel_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction, "ActorsToIgnore");
        Blueprint_PredictProjectilePath_ByTraceChannel_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction, "DrawDebugType");
        Blueprint_PredictProjectilePath_ByTraceChannel_DrawDebugTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction, "DrawDebugTime");
        Blueprint_PredictProjectilePath_ByTraceChannel_SimFrequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction, "SimFrequency");
        Blueprint_PredictProjectilePath_ByTraceChannel_MaxSimTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction, "MaxSimTime");
        Blueprint_PredictProjectilePath_ByTraceChannel_OverrideGravityZ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction, "OverrideGravityZ");
        Blueprint_PredictProjectilePath_ByTraceChannel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction, "ReturnValue");
        Blueprint_PredictProjectilePath_ByObjectType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Blueprint_PredictProjectilePath_ByObjectType");
        Blueprint_PredictProjectilePath_ByObjectType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Blueprint_PredictProjectilePath_ByObjectType_NativeFunction);
        Blueprint_PredictProjectilePath_ByObjectType_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByObjectType_NativeFunction, "WorldContextObject");
        Blueprint_PredictProjectilePath_ByObjectType_OutHit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByObjectType_NativeFunction, "OutHit");
        Blueprint_PredictProjectilePath_ByObjectType_OutPathPositions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByObjectType_NativeFunction, "OutPathPositions");
        Blueprint_PredictProjectilePath_ByObjectType_OutPathPositions_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Blueprint_PredictProjectilePath_ByObjectType_NativeFunction, "OutPathPositions");
        Blueprint_PredictProjectilePath_ByObjectType_OutLastTraceDestination_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByObjectType_NativeFunction, "OutLastTraceDestination");
        Blueprint_PredictProjectilePath_ByObjectType_StartPos_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByObjectType_NativeFunction, "StartPos");
        Blueprint_PredictProjectilePath_ByObjectType_LaunchVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByObjectType_NativeFunction, "LaunchVelocity");
        Blueprint_PredictProjectilePath_ByObjectType_bTracePath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByObjectType_NativeFunction, "bTracePath");
        Blueprint_PredictProjectilePath_ByObjectType_ProjectileRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByObjectType_NativeFunction, "ProjectileRadius");
        Blueprint_PredictProjectilePath_ByObjectType_ObjectTypes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByObjectType_NativeFunction, "ObjectTypes");
        Blueprint_PredictProjectilePath_ByObjectType_ObjectTypes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Blueprint_PredictProjectilePath_ByObjectType_NativeFunction, "ObjectTypes");
        Blueprint_PredictProjectilePath_ByObjectType_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByObjectType_NativeFunction, "bTraceComplex");
        Blueprint_PredictProjectilePath_ByObjectType_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByObjectType_NativeFunction, "ActorsToIgnore");
        Blueprint_PredictProjectilePath_ByObjectType_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Blueprint_PredictProjectilePath_ByObjectType_NativeFunction, "ActorsToIgnore");
        Blueprint_PredictProjectilePath_ByObjectType_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByObjectType_NativeFunction, "DrawDebugType");
        Blueprint_PredictProjectilePath_ByObjectType_DrawDebugTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByObjectType_NativeFunction, "DrawDebugTime");
        Blueprint_PredictProjectilePath_ByObjectType_SimFrequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByObjectType_NativeFunction, "SimFrequency");
        Blueprint_PredictProjectilePath_ByObjectType_MaxSimTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByObjectType_NativeFunction, "MaxSimTime");
        Blueprint_PredictProjectilePath_ByObjectType_OverrideGravityZ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByObjectType_NativeFunction, "OverrideGravityZ");
        Blueprint_PredictProjectilePath_ByObjectType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_ByObjectType_NativeFunction, "ReturnValue");
        Blueprint_PredictProjectilePath_Advanced_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Blueprint_PredictProjectilePath_Advanced");
        Blueprint_PredictProjectilePath_Advanced_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Blueprint_PredictProjectilePath_Advanced_NativeFunction);
        Blueprint_PredictProjectilePath_Advanced_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_Advanced_NativeFunction, "WorldContextObject");
        Blueprint_PredictProjectilePath_Advanced_PredictParams_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_Advanced_NativeFunction, "PredictParams");
        Blueprint_PredictProjectilePath_Advanced_PredictResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_Advanced_NativeFunction, "PredictResult");
        Blueprint_PredictProjectilePath_Advanced_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_PredictProjectilePath_Advanced_NativeFunction, "ReturnValue");
        AreSubtitlesEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AreSubtitlesEnabled");
        AreSubtitlesEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AreSubtitlesEnabled_NativeFunction);
        AreSubtitlesEnabled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AreSubtitlesEnabled_NativeFunction, "ReturnValue");
        AreAnyListenersWithinRange_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AreAnyListenersWithinRange");
        AreAnyListenersWithinRange_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AreAnyListenersWithinRange_NativeFunction);
        AreAnyListenersWithinRange_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AreAnyListenersWithinRange_NativeFunction, "WorldContextObject");
        AreAnyListenersWithinRange_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AreAnyListenersWithinRange_NativeFunction, "Location");
        AreAnyListenersWithinRange_MaximumRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AreAnyListenersWithinRange_NativeFunction, "MaximumRange");
        AreAnyListenersWithinRange_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AreAnyListenersWithinRange_NativeFunction, "ReturnValue");
        ApplyRadialDamageWithFalloff_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ApplyRadialDamageWithFalloff");
        ApplyRadialDamageWithFalloff_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ApplyRadialDamageWithFalloff_NativeFunction);
        ApplyRadialDamageWithFalloff_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamageWithFalloff_NativeFunction, "WorldContextObject");
        ApplyRadialDamageWithFalloff_BaseDamage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamageWithFalloff_NativeFunction, "BaseDamage");
        ApplyRadialDamageWithFalloff_MinimumDamage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamageWithFalloff_NativeFunction, "MinimumDamage");
        ApplyRadialDamageWithFalloff_Origin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamageWithFalloff_NativeFunction, "Origin");
        ApplyRadialDamageWithFalloff_DamageInnerRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamageWithFalloff_NativeFunction, "DamageInnerRadius");
        ApplyRadialDamageWithFalloff_DamageOuterRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamageWithFalloff_NativeFunction, "DamageOuterRadius");
        ApplyRadialDamageWithFalloff_DamageFalloff_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamageWithFalloff_NativeFunction, "DamageFalloff");
        ApplyRadialDamageWithFalloff_DamageTypeClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamageWithFalloff_NativeFunction, "DamageTypeClass");
        ApplyRadialDamageWithFalloff_IgnoreActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamageWithFalloff_NativeFunction, "IgnoreActors");
        ApplyRadialDamageWithFalloff_IgnoreActors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ApplyRadialDamageWithFalloff_NativeFunction, "IgnoreActors");
        ApplyRadialDamageWithFalloff_DamageCauser_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamageWithFalloff_NativeFunction, "DamageCauser");
        ApplyRadialDamageWithFalloff_InstigatedByController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamageWithFalloff_NativeFunction, "InstigatedByController");
        ApplyRadialDamageWithFalloff_DamagePreventionChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamageWithFalloff_NativeFunction, "DamagePreventionChannel");
        ApplyRadialDamageWithFalloff_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamageWithFalloff_NativeFunction, "ReturnValue");
        ApplyRadialDamage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ApplyRadialDamage");
        ApplyRadialDamage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ApplyRadialDamage_NativeFunction);
        ApplyRadialDamage_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamage_NativeFunction, "WorldContextObject");
        ApplyRadialDamage_BaseDamage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamage_NativeFunction, "BaseDamage");
        ApplyRadialDamage_Origin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamage_NativeFunction, "Origin");
        ApplyRadialDamage_DamageRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamage_NativeFunction, "DamageRadius");
        ApplyRadialDamage_DamageTypeClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamage_NativeFunction, "DamageTypeClass");
        ApplyRadialDamage_IgnoreActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamage_NativeFunction, "IgnoreActors");
        ApplyRadialDamage_IgnoreActors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ApplyRadialDamage_NativeFunction, "IgnoreActors");
        ApplyRadialDamage_DamageCauser_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamage_NativeFunction, "DamageCauser");
        ApplyRadialDamage_InstigatedByController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamage_NativeFunction, "InstigatedByController");
        ApplyRadialDamage_bDoFullDamage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamage_NativeFunction, "bDoFullDamage");
        ApplyRadialDamage_DamagePreventionChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamage_NativeFunction, "DamagePreventionChannel");
        ApplyRadialDamage_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialDamage_NativeFunction, "ReturnValue");
        ApplyPointDamage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ApplyPointDamage");
        ApplyPointDamage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ApplyPointDamage_NativeFunction);
        ApplyPointDamage_DamagedActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyPointDamage_NativeFunction, "DamagedActor");
        ApplyPointDamage_BaseDamage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyPointDamage_NativeFunction, "BaseDamage");
        ApplyPointDamage_HitFromDirection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyPointDamage_NativeFunction, "HitFromDirection");
        ApplyPointDamage_HitInfo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyPointDamage_NativeFunction, "HitInfo");
        ApplyPointDamage_EventInstigator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyPointDamage_NativeFunction, "EventInstigator");
        ApplyPointDamage_DamageCauser_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyPointDamage_NativeFunction, "DamageCauser");
        ApplyPointDamage_DamageTypeClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyPointDamage_NativeFunction, "DamageTypeClass");
        ApplyPointDamage_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyPointDamage_NativeFunction, "ReturnValue");
        ApplyDamage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ApplyDamage");
        ApplyDamage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ApplyDamage_NativeFunction);
        ApplyDamage_DamagedActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyDamage_NativeFunction, "DamagedActor");
        ApplyDamage_BaseDamage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyDamage_NativeFunction, "BaseDamage");
        ApplyDamage_EventInstigator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyDamage_NativeFunction, "EventInstigator");
        ApplyDamage_DamageCauser_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyDamage_NativeFunction, "DamageCauser");
        ApplyDamage_DamageTypeClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyDamage_NativeFunction, "DamageTypeClass");
        ApplyDamage_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyDamage_NativeFunction, "ReturnValue");
        AnnounceAccessibleString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AnnounceAccessibleString");
        AnnounceAccessibleString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AnnounceAccessibleString_NativeFunction);
        AnnounceAccessibleString_AnnouncementString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AnnounceAccessibleString_NativeFunction, "AnnouncementString");
        ActivateReverbEffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ActivateReverbEffect");
        ActivateReverbEffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ActivateReverbEffect_NativeFunction);
        ActivateReverbEffect_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ActivateReverbEffect_NativeFunction, "WorldContextObject");
        ActivateReverbEffect_ReverbEffect_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ActivateReverbEffect_NativeFunction, "ReverbEffect");
        ActivateReverbEffect_TagName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ActivateReverbEffect_NativeFunction, "TagName");
        ActivateReverbEffect_Priority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ActivateReverbEffect_NativeFunction, "Priority");
        ActivateReverbEffect_Volume_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ActivateReverbEffect_NativeFunction, "Volume");
        ActivateReverbEffect_FadeTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ActivateReverbEffect_NativeFunction, "FadeTime");
        
        
    }
    
    protected GameplayStatics(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.GameplayStatics:UnRetainAllSoundsInSoundClass
    static readonly IntPtr UnRetainAllSoundsInSoundClass_NativeFunction;
    static readonly int UnRetainAllSoundsInSoundClass_ParamsSize;
    static readonly int UnRetainAllSoundsInSoundClass_InSoundClass_Offset;
    
    public static void UnRetainAllSoundsInSoundClass(UnrealSharp.Engine.SoundClass inSoundClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UnRetainAllSoundsInSoundClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SoundClass>.ToNative(IntPtr.Add(ParamsBuffer, UnRetainAllSoundsInSoundClass_InSoundClass_Offset), 0, null, inSoundClass);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, UnRetainAllSoundsInSoundClass_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SuggestProjectileVelocity_MovingTarget
    static readonly IntPtr SuggestProjectileVelocity_MovingTarget_NativeFunction;
    static readonly int SuggestProjectileVelocity_MovingTarget_ParamsSize;
    static readonly int SuggestProjectileVelocity_MovingTarget_WorldContextObject_Offset;
    static readonly int SuggestProjectileVelocity_MovingTarget_OutLaunchVelocity_Offset;
    static readonly int SuggestProjectileVelocity_MovingTarget_ProjectileStartLocation_Offset;
    static readonly int SuggestProjectileVelocity_MovingTarget_TargetActor_Offset;
    static readonly int SuggestProjectileVelocity_MovingTarget_TargetLocationOffset_Offset;
    static readonly int SuggestProjectileVelocity_MovingTarget_GravityZOverride_Offset;
    static readonly int SuggestProjectileVelocity_MovingTarget_TimeToTarget_Offset;
    static readonly int SuggestProjectileVelocity_MovingTarget_DrawDebugType_Offset;
    static readonly int SuggestProjectileVelocity_MovingTarget_DrawDebugTime_Offset;
    static readonly int SuggestProjectileVelocity_MovingTarget_DrawDebugColor_Offset;
    static readonly int SuggestProjectileVelocity_MovingTarget_ReturnValue_Offset;
    
    public static bool SuggestProjectileVelocity_MovingTarget(UnrealSharp.CoreUObject.Object worldContextObject, out System.DoubleNumerics.Vector3 outLaunchVelocity, System.DoubleNumerics.Vector3 projectileStartLocation, UnrealSharp.Engine.Actor targetActor, System.DoubleNumerics.Vector3 targetLocationOffset, double gravityZOverride = 0.000000, double timeToTarget = 1.000000, UnrealSharp.Engine.EDrawDebugTrace drawDebugType = UnrealSharp.Engine.EDrawDebugTrace.None, float drawDebugTime = 3.000000f)
    {
        UnrealSharp.CoreUObject.LinearColor drawDebugColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return SuggestProjectileVelocity_MovingTarget(worldContextObject, out outLaunchVelocity, projectileStartLocation, targetActor, targetLocationOffset, gravityZOverride, timeToTarget, drawDebugType, drawDebugTime, drawDebugColor);
    }
    
    public static bool SuggestProjectileVelocity_MovingTarget(UnrealSharp.CoreUObject.Object worldContextObject, out System.DoubleNumerics.Vector3 outLaunchVelocity, System.DoubleNumerics.Vector3 projectileStartLocation, UnrealSharp.Engine.Actor targetActor, System.DoubleNumerics.Vector3 targetLocationOffset, double gravityZOverride, double timeToTarget, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, float drawDebugTime, UnrealSharp.CoreUObject.LinearColor drawDebugColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SuggestProjectileVelocity_MovingTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SuggestProjectileVelocity_MovingTarget_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SuggestProjectileVelocity_MovingTarget_ProjectileStartLocation_Offset), 0, null, projectileStartLocation);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, SuggestProjectileVelocity_MovingTarget_TargetActor_Offset), 0, null, targetActor);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SuggestProjectileVelocity_MovingTarget_TargetLocationOffset_Offset), 0, null, targetLocationOffset);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, SuggestProjectileVelocity_MovingTarget_GravityZOverride_Offset), 0, null, gravityZOverride);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, SuggestProjectileVelocity_MovingTarget_TimeToTarget_Offset), 0, null, timeToTarget);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, SuggestProjectileVelocity_MovingTarget_DrawDebugType_Offset), 0, null, drawDebugType);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SuggestProjectileVelocity_MovingTarget_DrawDebugTime_Offset), 0, null, drawDebugTime);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SuggestProjectileVelocity_MovingTarget_DrawDebugColor_Offset), 0, null, drawDebugColor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SuggestProjectileVelocity_MovingTarget_NativeFunction, ParamsBuffer);
            
            outLaunchVelocity = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, SuggestProjectileVelocity_MovingTarget_OutLaunchVelocity_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SuggestProjectileVelocity_MovingTarget_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SuggestProjectileVelocity_CustomArc
    static readonly IntPtr SuggestProjectileVelocity_CustomArc_NativeFunction;
    static readonly int SuggestProjectileVelocity_CustomArc_ParamsSize;
    static readonly int SuggestProjectileVelocity_CustomArc_WorldContextObject_Offset;
    static readonly int SuggestProjectileVelocity_CustomArc_OutLaunchVelocity_Offset;
    static readonly int SuggestProjectileVelocity_CustomArc_StartPos_Offset;
    static readonly int SuggestProjectileVelocity_CustomArc_EndPos_Offset;
    static readonly int SuggestProjectileVelocity_CustomArc_OverrideGravityZ_Offset;
    static readonly int SuggestProjectileVelocity_CustomArc_ArcParam_Offset;
    static readonly int SuggestProjectileVelocity_CustomArc_ReturnValue_Offset;
    
    public static bool SuggestProjectileVelocity_CustomArc(UnrealSharp.CoreUObject.Object worldContextObject, out System.DoubleNumerics.Vector3 outLaunchVelocity, System.DoubleNumerics.Vector3 startPos, System.DoubleNumerics.Vector3 endPos, float overrideGravityZ = 0.000000f, float arcParam = 0.500000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SuggestProjectileVelocity_CustomArc_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SuggestProjectileVelocity_CustomArc_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SuggestProjectileVelocity_CustomArc_StartPos_Offset), 0, null, startPos);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SuggestProjectileVelocity_CustomArc_EndPos_Offset), 0, null, endPos);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SuggestProjectileVelocity_CustomArc_OverrideGravityZ_Offset), 0, null, overrideGravityZ);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SuggestProjectileVelocity_CustomArc_ArcParam_Offset), 0, null, arcParam);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SuggestProjectileVelocity_CustomArc_NativeFunction, ParamsBuffer);
            
            outLaunchVelocity = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, SuggestProjectileVelocity_CustomArc_OutLaunchVelocity_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SuggestProjectileVelocity_CustomArc_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SpawnSoundAttached
    static readonly IntPtr SpawnSoundAttached_NativeFunction;
    static readonly int SpawnSoundAttached_ParamsSize;
    static readonly int SpawnSoundAttached_Sound_Offset;
    static readonly int SpawnSoundAttached_AttachToComponent_Offset;
    static readonly int SpawnSoundAttached_AttachPointName_Offset;
    static readonly int SpawnSoundAttached_Location_Offset;
    static readonly int SpawnSoundAttached_Rotation_Offset;
    static readonly int SpawnSoundAttached_LocationType_Offset;
    static readonly int SpawnSoundAttached_bStopWhenAttachedToDestroyed_Offset;
    static readonly int SpawnSoundAttached_VolumeMultiplier_Offset;
    static readonly int SpawnSoundAttached_PitchMultiplier_Offset;
    static readonly int SpawnSoundAttached_StartTime_Offset;
    static readonly int SpawnSoundAttached_AttenuationSettings_Offset;
    static readonly int SpawnSoundAttached_ConcurrencySettings_Offset;
    static readonly int SpawnSoundAttached_bAutoDestroy_Offset;
    static readonly int SpawnSoundAttached_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.AudioComponent SpawnSoundAttached(UnrealSharp.Engine.SoundBase sound, UnrealSharp.Engine.SceneComponent attachToComponent, Name attachPointName = default(Name), System.DoubleNumerics.Vector3 location = default(System.DoubleNumerics.Vector3), UnrealSharp.Rotator rotation = default(UnrealSharp.Rotator), UnrealSharp.Engine.EAttachLocation locationType = UnrealSharp.Engine.EAttachLocation.KeepRelativeOffset, bool bStopWhenAttachedToDestroyed = false, float volumeMultiplier = 1.000000f, float pitchMultiplier = 1.000000f, float startTime = 0.000000f, UnrealSharp.Engine.SoundAttenuation attenuationSettings = default(UnrealSharp.Engine.SoundAttenuation), UnrealSharp.Engine.SoundConcurrency concurrencySettings = default(UnrealSharp.Engine.SoundConcurrency), bool bAutoDestroy = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SpawnSoundAttached_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SoundBase>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAttached_Sound_Offset), 0, null, sound);
            ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAttached_AttachToComponent_Offset), 0, null, attachToComponent);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAttached_AttachPointName_Offset), 0, null, attachPointName);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAttached_Location_Offset), 0, null, location);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAttached_Rotation_Offset), 0, null, rotation);
            BlittableMarshaller<UnrealSharp.Engine.EAttachLocation>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAttached_LocationType_Offset), 0, null, locationType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAttached_bStopWhenAttachedToDestroyed_Offset), 0, null, bStopWhenAttachedToDestroyed);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAttached_VolumeMultiplier_Offset), 0, null, volumeMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAttached_PitchMultiplier_Offset), 0, null, pitchMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAttached_StartTime_Offset), 0, null, startTime);
            ObjectMarshaller<UnrealSharp.Engine.SoundAttenuation>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAttached_AttenuationSettings_Offset), 0, null, attenuationSettings);
            ObjectMarshaller<UnrealSharp.Engine.SoundConcurrency>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAttached_ConcurrencySettings_Offset), 0, null, concurrencySettings);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAttached_bAutoDestroy_Offset), 0, null, bAutoDestroy);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SpawnSoundAttached_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AudioComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AudioComponent>.FromNative(IntPtr.Add(ParamsBuffer, SpawnSoundAttached_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SpawnSoundAtLocation
    static readonly IntPtr SpawnSoundAtLocation_NativeFunction;
    static readonly int SpawnSoundAtLocation_ParamsSize;
    static readonly int SpawnSoundAtLocation_WorldContextObject_Offset;
    static readonly int SpawnSoundAtLocation_Sound_Offset;
    static readonly int SpawnSoundAtLocation_Location_Offset;
    static readonly int SpawnSoundAtLocation_Rotation_Offset;
    static readonly int SpawnSoundAtLocation_VolumeMultiplier_Offset;
    static readonly int SpawnSoundAtLocation_PitchMultiplier_Offset;
    static readonly int SpawnSoundAtLocation_StartTime_Offset;
    static readonly int SpawnSoundAtLocation_AttenuationSettings_Offset;
    static readonly int SpawnSoundAtLocation_ConcurrencySettings_Offset;
    static readonly int SpawnSoundAtLocation_bAutoDestroy_Offset;
    static readonly int SpawnSoundAtLocation_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.AudioComponent SpawnSoundAtLocation(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundBase sound, System.DoubleNumerics.Vector3 location, UnrealSharp.Rotator rotation, float volumeMultiplier = 1.000000f, float pitchMultiplier = 1.000000f, float startTime = 0.000000f, UnrealSharp.Engine.SoundAttenuation attenuationSettings = default(UnrealSharp.Engine.SoundAttenuation), UnrealSharp.Engine.SoundConcurrency concurrencySettings = default(UnrealSharp.Engine.SoundConcurrency), bool bAutoDestroy = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SpawnSoundAtLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAtLocation_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundBase>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAtLocation_Sound_Offset), 0, null, sound);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAtLocation_Location_Offset), 0, null, location);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAtLocation_Rotation_Offset), 0, null, rotation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAtLocation_VolumeMultiplier_Offset), 0, null, volumeMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAtLocation_PitchMultiplier_Offset), 0, null, pitchMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAtLocation_StartTime_Offset), 0, null, startTime);
            ObjectMarshaller<UnrealSharp.Engine.SoundAttenuation>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAtLocation_AttenuationSettings_Offset), 0, null, attenuationSettings);
            ObjectMarshaller<UnrealSharp.Engine.SoundConcurrency>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAtLocation_ConcurrencySettings_Offset), 0, null, concurrencySettings);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SpawnSoundAtLocation_bAutoDestroy_Offset), 0, null, bAutoDestroy);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SpawnSoundAtLocation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AudioComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AudioComponent>.FromNative(IntPtr.Add(ParamsBuffer, SpawnSoundAtLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SpawnSound2D
    static readonly IntPtr SpawnSound2D_NativeFunction;
    static readonly int SpawnSound2D_ParamsSize;
    static readonly int SpawnSound2D_WorldContextObject_Offset;
    static readonly int SpawnSound2D_Sound_Offset;
    static readonly int SpawnSound2D_VolumeMultiplier_Offset;
    static readonly int SpawnSound2D_PitchMultiplier_Offset;
    static readonly int SpawnSound2D_StartTime_Offset;
    static readonly int SpawnSound2D_ConcurrencySettings_Offset;
    static readonly int SpawnSound2D_bPersistAcrossLevelTransition_Offset;
    static readonly int SpawnSound2D_bAutoDestroy_Offset;
    static readonly int SpawnSound2D_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.AudioComponent SpawnSound2D(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundBase sound, float volumeMultiplier = 1.000000f, float pitchMultiplier = 1.000000f, float startTime = 0.000000f, UnrealSharp.Engine.SoundConcurrency concurrencySettings = default(UnrealSharp.Engine.SoundConcurrency), bool bPersistAcrossLevelTransition = false, bool bAutoDestroy = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SpawnSound2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSound2D_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundBase>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSound2D_Sound_Offset), 0, null, sound);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSound2D_VolumeMultiplier_Offset), 0, null, volumeMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSound2D_PitchMultiplier_Offset), 0, null, pitchMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSound2D_StartTime_Offset), 0, null, startTime);
            ObjectMarshaller<UnrealSharp.Engine.SoundConcurrency>.ToNative(IntPtr.Add(ParamsBuffer, SpawnSound2D_ConcurrencySettings_Offset), 0, null, concurrencySettings);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SpawnSound2D_bPersistAcrossLevelTransition_Offset), 0, null, bPersistAcrossLevelTransition);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SpawnSound2D_bAutoDestroy_Offset), 0, null, bAutoDestroy);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SpawnSound2D_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AudioComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AudioComponent>.FromNative(IntPtr.Add(ParamsBuffer, SpawnSound2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SpawnForceFeedbackAttached
    static readonly IntPtr SpawnForceFeedbackAttached_NativeFunction;
    static readonly int SpawnForceFeedbackAttached_ParamsSize;
    static readonly int SpawnForceFeedbackAttached_ForceFeedbackEffect_Offset;
    static readonly int SpawnForceFeedbackAttached_AttachToComponent_Offset;
    static readonly int SpawnForceFeedbackAttached_AttachPointName_Offset;
    static readonly int SpawnForceFeedbackAttached_Location_Offset;
    static readonly int SpawnForceFeedbackAttached_Rotation_Offset;
    static readonly int SpawnForceFeedbackAttached_LocationType_Offset;
    static readonly int SpawnForceFeedbackAttached_bStopWhenAttachedToDestroyed_Offset;
    static readonly int SpawnForceFeedbackAttached_bLooping_Offset;
    static readonly int SpawnForceFeedbackAttached_IntensityMultiplier_Offset;
    static readonly int SpawnForceFeedbackAttached_StartTime_Offset;
    static readonly int SpawnForceFeedbackAttached_AttenuationSettings_Offset;
    static readonly int SpawnForceFeedbackAttached_bAutoDestroy_Offset;
    static readonly int SpawnForceFeedbackAttached_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.ForceFeedbackComponent SpawnForceFeedbackAttached(UnrealSharp.Engine.ForceFeedbackEffect forceFeedbackEffect, UnrealSharp.Engine.SceneComponent attachToComponent, Name attachPointName = default(Name), System.DoubleNumerics.Vector3 location = default(System.DoubleNumerics.Vector3), UnrealSharp.Rotator rotation = default(UnrealSharp.Rotator), UnrealSharp.Engine.EAttachLocation locationType = UnrealSharp.Engine.EAttachLocation.KeepRelativeOffset, bool bStopWhenAttachedToDestroyed = false, bool bLooping = false, float intensityMultiplier = 1.000000f, float startTime = 0.000000f, UnrealSharp.Engine.ForceFeedbackAttenuation attenuationSettings = default(UnrealSharp.Engine.ForceFeedbackAttenuation), bool bAutoDestroy = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SpawnForceFeedbackAttached_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.ForceFeedbackEffect>.ToNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAttached_ForceFeedbackEffect_Offset), 0, null, forceFeedbackEffect);
            ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.ToNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAttached_AttachToComponent_Offset), 0, null, attachToComponent);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAttached_AttachPointName_Offset), 0, null, attachPointName);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAttached_Location_Offset), 0, null, location);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAttached_Rotation_Offset), 0, null, rotation);
            BlittableMarshaller<UnrealSharp.Engine.EAttachLocation>.ToNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAttached_LocationType_Offset), 0, null, locationType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAttached_bStopWhenAttachedToDestroyed_Offset), 0, null, bStopWhenAttachedToDestroyed);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAttached_bLooping_Offset), 0, null, bLooping);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAttached_IntensityMultiplier_Offset), 0, null, intensityMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAttached_StartTime_Offset), 0, null, startTime);
            ObjectMarshaller<UnrealSharp.Engine.ForceFeedbackAttenuation>.ToNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAttached_AttenuationSettings_Offset), 0, null, attenuationSettings);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAttached_bAutoDestroy_Offset), 0, null, bAutoDestroy);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SpawnForceFeedbackAttached_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.ForceFeedbackComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.ForceFeedbackComponent>.FromNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAttached_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SpawnForceFeedbackAtLocation
    static readonly IntPtr SpawnForceFeedbackAtLocation_NativeFunction;
    static readonly int SpawnForceFeedbackAtLocation_ParamsSize;
    static readonly int SpawnForceFeedbackAtLocation_WorldContextObject_Offset;
    static readonly int SpawnForceFeedbackAtLocation_ForceFeedbackEffect_Offset;
    static readonly int SpawnForceFeedbackAtLocation_Location_Offset;
    static readonly int SpawnForceFeedbackAtLocation_Rotation_Offset;
    static readonly int SpawnForceFeedbackAtLocation_bLooping_Offset;
    static readonly int SpawnForceFeedbackAtLocation_IntensityMultiplier_Offset;
    static readonly int SpawnForceFeedbackAtLocation_StartTime_Offset;
    static readonly int SpawnForceFeedbackAtLocation_AttenuationSettings_Offset;
    static readonly int SpawnForceFeedbackAtLocation_bAutoDestroy_Offset;
    static readonly int SpawnForceFeedbackAtLocation_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.ForceFeedbackComponent SpawnForceFeedbackAtLocation(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.ForceFeedbackEffect forceFeedbackEffect, System.DoubleNumerics.Vector3 location, UnrealSharp.Rotator rotation, bool bLooping = false, float intensityMultiplier = 1.000000f, float startTime = 0.000000f, UnrealSharp.Engine.ForceFeedbackAttenuation attenuationSettings = default(UnrealSharp.Engine.ForceFeedbackAttenuation), bool bAutoDestroy = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SpawnForceFeedbackAtLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAtLocation_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.ForceFeedbackEffect>.ToNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAtLocation_ForceFeedbackEffect_Offset), 0, null, forceFeedbackEffect);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAtLocation_Location_Offset), 0, null, location);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAtLocation_Rotation_Offset), 0, null, rotation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAtLocation_bLooping_Offset), 0, null, bLooping);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAtLocation_IntensityMultiplier_Offset), 0, null, intensityMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAtLocation_StartTime_Offset), 0, null, startTime);
            ObjectMarshaller<UnrealSharp.Engine.ForceFeedbackAttenuation>.ToNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAtLocation_AttenuationSettings_Offset), 0, null, attenuationSettings);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAtLocation_bAutoDestroy_Offset), 0, null, bAutoDestroy);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SpawnForceFeedbackAtLocation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.ForceFeedbackComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.ForceFeedbackComponent>.FromNative(IntPtr.Add(ParamsBuffer, SpawnForceFeedbackAtLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SpawnEmitterAttached
    static readonly IntPtr SpawnEmitterAttached_NativeFunction;
    static readonly int SpawnEmitterAttached_ParamsSize;
    static readonly int SpawnEmitterAttached_EmitterTemplate_Offset;
    static readonly int SpawnEmitterAttached_AttachToComponent_Offset;
    static readonly int SpawnEmitterAttached_AttachPointName_Offset;
    static readonly int SpawnEmitterAttached_Location_Offset;
    static readonly int SpawnEmitterAttached_Rotation_Offset;
    static readonly int SpawnEmitterAttached_Scale_Offset;
    static readonly int SpawnEmitterAttached_LocationType_Offset;
    static readonly int SpawnEmitterAttached_bAutoDestroy_Offset;
    static readonly int SpawnEmitterAttached_PoolingMethod_Offset;
    static readonly int SpawnEmitterAttached_bAutoActivate_Offset;
    static readonly int SpawnEmitterAttached_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.ParticleSystemComponent SpawnEmitterAttached(UnrealSharp.Engine.ParticleSystem emitterTemplate, UnrealSharp.Engine.SceneComponent attachToComponent, Name attachPointName = default(Name), System.DoubleNumerics.Vector3 location = default(System.DoubleNumerics.Vector3), UnrealSharp.Rotator rotation = default(UnrealSharp.Rotator))
    {
        System.DoubleNumerics.Vector3 scale = new System.DoubleNumerics.Vector3
        {
            X=1.000000f,
            Y=1.000000f,
            Z=1.000000f,
        };
        return SpawnEmitterAttached(emitterTemplate, attachToComponent, attachPointName, location, rotation, scale);
    }
    
    public static UnrealSharp.Engine.ParticleSystemComponent SpawnEmitterAttached(UnrealSharp.Engine.ParticleSystem emitterTemplate, UnrealSharp.Engine.SceneComponent attachToComponent, Name attachPointName, System.DoubleNumerics.Vector3 location, UnrealSharp.Rotator rotation, System.DoubleNumerics.Vector3 scale, UnrealSharp.Engine.EAttachLocation locationType = UnrealSharp.Engine.EAttachLocation.KeepRelativeOffset, bool bAutoDestroy = true, UnrealSharp.Engine.EPSCPoolMethod poolingMethod = default(UnrealSharp.Engine.EPSCPoolMethod), bool bAutoActivate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SpawnEmitterAttached_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.ParticleSystem>.ToNative(IntPtr.Add(ParamsBuffer, SpawnEmitterAttached_EmitterTemplate_Offset), 0, null, emitterTemplate);
            ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.ToNative(IntPtr.Add(ParamsBuffer, SpawnEmitterAttached_AttachToComponent_Offset), 0, null, attachToComponent);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SpawnEmitterAttached_AttachPointName_Offset), 0, null, attachPointName);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SpawnEmitterAttached_Location_Offset), 0, null, location);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SpawnEmitterAttached_Rotation_Offset), 0, null, rotation);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SpawnEmitterAttached_Scale_Offset), 0, null, scale);
            BlittableMarshaller<UnrealSharp.Engine.EAttachLocation>.ToNative(IntPtr.Add(ParamsBuffer, SpawnEmitterAttached_LocationType_Offset), 0, null, locationType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SpawnEmitterAttached_bAutoDestroy_Offset), 0, null, bAutoDestroy);
            BlittableMarshaller<UnrealSharp.Engine.EPSCPoolMethod>.ToNative(IntPtr.Add(ParamsBuffer, SpawnEmitterAttached_PoolingMethod_Offset), 0, null, poolingMethod);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SpawnEmitterAttached_bAutoActivate_Offset), 0, null, bAutoActivate);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SpawnEmitterAttached_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.ParticleSystemComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.ParticleSystemComponent>.FromNative(IntPtr.Add(ParamsBuffer, SpawnEmitterAttached_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SpawnEmitterAtLocation
    static readonly IntPtr SpawnEmitterAtLocation_NativeFunction;
    static readonly int SpawnEmitterAtLocation_ParamsSize;
    static readonly int SpawnEmitterAtLocation_WorldContextObject_Offset;
    static readonly int SpawnEmitterAtLocation_EmitterTemplate_Offset;
    static readonly int SpawnEmitterAtLocation_Location_Offset;
    static readonly int SpawnEmitterAtLocation_Rotation_Offset;
    static readonly int SpawnEmitterAtLocation_Scale_Offset;
    static readonly int SpawnEmitterAtLocation_bAutoDestroy_Offset;
    static readonly int SpawnEmitterAtLocation_PoolingMethod_Offset;
    static readonly int SpawnEmitterAtLocation_bAutoActivateSystem_Offset;
    static readonly int SpawnEmitterAtLocation_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.ParticleSystemComponent SpawnEmitterAtLocation(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.ParticleSystem emitterTemplate, System.DoubleNumerics.Vector3 location, UnrealSharp.Rotator rotation)
    {
        System.DoubleNumerics.Vector3 scale = new System.DoubleNumerics.Vector3
        {
            X=1.000000f,
            Y=1.000000f,
            Z=1.000000f,
        };
        return SpawnEmitterAtLocation(worldContextObject, emitterTemplate, location, rotation, scale);
    }
    
    public static UnrealSharp.Engine.ParticleSystemComponent SpawnEmitterAtLocation(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.ParticleSystem emitterTemplate, System.DoubleNumerics.Vector3 location, UnrealSharp.Rotator rotation, System.DoubleNumerics.Vector3 scale, bool bAutoDestroy = true, UnrealSharp.Engine.EPSCPoolMethod poolingMethod = default(UnrealSharp.Engine.EPSCPoolMethod), bool bAutoActivateSystem = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SpawnEmitterAtLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SpawnEmitterAtLocation_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.ParticleSystem>.ToNative(IntPtr.Add(ParamsBuffer, SpawnEmitterAtLocation_EmitterTemplate_Offset), 0, null, emitterTemplate);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SpawnEmitterAtLocation_Location_Offset), 0, null, location);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SpawnEmitterAtLocation_Rotation_Offset), 0, null, rotation);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SpawnEmitterAtLocation_Scale_Offset), 0, null, scale);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SpawnEmitterAtLocation_bAutoDestroy_Offset), 0, null, bAutoDestroy);
            BlittableMarshaller<UnrealSharp.Engine.EPSCPoolMethod>.ToNative(IntPtr.Add(ParamsBuffer, SpawnEmitterAtLocation_PoolingMethod_Offset), 0, null, poolingMethod);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SpawnEmitterAtLocation_bAutoActivateSystem_Offset), 0, null, bAutoActivateSystem);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SpawnEmitterAtLocation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.ParticleSystemComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.ParticleSystemComponent>.FromNative(IntPtr.Add(ParamsBuffer, SpawnEmitterAtLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SpawnDialogueAttached
    static readonly IntPtr SpawnDialogueAttached_NativeFunction;
    static readonly int SpawnDialogueAttached_ParamsSize;
    static readonly int SpawnDialogueAttached_Dialogue_Offset;
    static readonly int SpawnDialogueAttached_Context_Offset;
    static readonly int SpawnDialogueAttached_AttachToComponent_Offset;
    static readonly int SpawnDialogueAttached_AttachPointName_Offset;
    static readonly int SpawnDialogueAttached_Location_Offset;
    static readonly int SpawnDialogueAttached_Rotation_Offset;
    static readonly int SpawnDialogueAttached_LocationType_Offset;
    static readonly int SpawnDialogueAttached_bStopWhenAttachedToDestroyed_Offset;
    static readonly int SpawnDialogueAttached_VolumeMultiplier_Offset;
    static readonly int SpawnDialogueAttached_PitchMultiplier_Offset;
    static readonly int SpawnDialogueAttached_StartTime_Offset;
    static readonly int SpawnDialogueAttached_AttenuationSettings_Offset;
    static readonly int SpawnDialogueAttached_bAutoDestroy_Offset;
    static readonly int SpawnDialogueAttached_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.AudioComponent SpawnDialogueAttached(UnrealSharp.Engine.DialogueWave dialogue, UnrealSharp.Engine.DialogueContext context, UnrealSharp.Engine.SceneComponent attachToComponent, Name attachPointName = default(Name), System.DoubleNumerics.Vector3 location = default(System.DoubleNumerics.Vector3), UnrealSharp.Rotator rotation = default(UnrealSharp.Rotator), UnrealSharp.Engine.EAttachLocation locationType = UnrealSharp.Engine.EAttachLocation.KeepRelativeOffset, bool bStopWhenAttachedToDestroyed = false, float volumeMultiplier = 1.000000f, float pitchMultiplier = 1.000000f, float startTime = 0.000000f, UnrealSharp.Engine.SoundAttenuation attenuationSettings = default(UnrealSharp.Engine.SoundAttenuation), bool bAutoDestroy = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SpawnDialogueAttached_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.DialogueWave>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAttached_Dialogue_Offset), 0, null, dialogue);
            UnrealSharp.Engine.DialogueContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAttached_Context_Offset), 0, null, context);
            ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAttached_AttachToComponent_Offset), 0, null, attachToComponent);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAttached_AttachPointName_Offset), 0, null, attachPointName);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAttached_Location_Offset), 0, null, location);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAttached_Rotation_Offset), 0, null, rotation);
            BlittableMarshaller<UnrealSharp.Engine.EAttachLocation>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAttached_LocationType_Offset), 0, null, locationType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAttached_bStopWhenAttachedToDestroyed_Offset), 0, null, bStopWhenAttachedToDestroyed);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAttached_VolumeMultiplier_Offset), 0, null, volumeMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAttached_PitchMultiplier_Offset), 0, null, pitchMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAttached_StartTime_Offset), 0, null, startTime);
            ObjectMarshaller<UnrealSharp.Engine.SoundAttenuation>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAttached_AttenuationSettings_Offset), 0, null, attenuationSettings);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAttached_bAutoDestroy_Offset), 0, null, bAutoDestroy);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SpawnDialogueAttached_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AudioComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AudioComponent>.FromNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAttached_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SpawnDialogueAtLocation
    static readonly IntPtr SpawnDialogueAtLocation_NativeFunction;
    static readonly int SpawnDialogueAtLocation_ParamsSize;
    static readonly int SpawnDialogueAtLocation_WorldContextObject_Offset;
    static readonly int SpawnDialogueAtLocation_Dialogue_Offset;
    static readonly int SpawnDialogueAtLocation_Context_Offset;
    static readonly int SpawnDialogueAtLocation_Location_Offset;
    static readonly int SpawnDialogueAtLocation_Rotation_Offset;
    static readonly int SpawnDialogueAtLocation_VolumeMultiplier_Offset;
    static readonly int SpawnDialogueAtLocation_PitchMultiplier_Offset;
    static readonly int SpawnDialogueAtLocation_StartTime_Offset;
    static readonly int SpawnDialogueAtLocation_AttenuationSettings_Offset;
    static readonly int SpawnDialogueAtLocation_bAutoDestroy_Offset;
    static readonly int SpawnDialogueAtLocation_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.AudioComponent SpawnDialogueAtLocation(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.DialogueWave dialogue, UnrealSharp.Engine.DialogueContext context, System.DoubleNumerics.Vector3 location, UnrealSharp.Rotator rotation, float volumeMultiplier = 1.000000f, float pitchMultiplier = 1.000000f, float startTime = 0.000000f, UnrealSharp.Engine.SoundAttenuation attenuationSettings = default(UnrealSharp.Engine.SoundAttenuation), bool bAutoDestroy = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SpawnDialogueAtLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAtLocation_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.DialogueWave>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAtLocation_Dialogue_Offset), 0, null, dialogue);
            UnrealSharp.Engine.DialogueContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAtLocation_Context_Offset), 0, null, context);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAtLocation_Location_Offset), 0, null, location);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAtLocation_Rotation_Offset), 0, null, rotation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAtLocation_VolumeMultiplier_Offset), 0, null, volumeMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAtLocation_PitchMultiplier_Offset), 0, null, pitchMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAtLocation_StartTime_Offset), 0, null, startTime);
            ObjectMarshaller<UnrealSharp.Engine.SoundAttenuation>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAtLocation_AttenuationSettings_Offset), 0, null, attenuationSettings);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAtLocation_bAutoDestroy_Offset), 0, null, bAutoDestroy);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SpawnDialogueAtLocation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AudioComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AudioComponent>.FromNative(IntPtr.Add(ParamsBuffer, SpawnDialogueAtLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SpawnDialogue2D
    static readonly IntPtr SpawnDialogue2D_NativeFunction;
    static readonly int SpawnDialogue2D_ParamsSize;
    static readonly int SpawnDialogue2D_WorldContextObject_Offset;
    static readonly int SpawnDialogue2D_Dialogue_Offset;
    static readonly int SpawnDialogue2D_Context_Offset;
    static readonly int SpawnDialogue2D_VolumeMultiplier_Offset;
    static readonly int SpawnDialogue2D_PitchMultiplier_Offset;
    static readonly int SpawnDialogue2D_StartTime_Offset;
    static readonly int SpawnDialogue2D_bAutoDestroy_Offset;
    static readonly int SpawnDialogue2D_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.AudioComponent SpawnDialogue2D(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.DialogueWave dialogue, UnrealSharp.Engine.DialogueContext context, float volumeMultiplier = 1.000000f, float pitchMultiplier = 1.000000f, float startTime = 0.000000f, bool bAutoDestroy = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SpawnDialogue2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogue2D_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.DialogueWave>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogue2D_Dialogue_Offset), 0, null, dialogue);
            UnrealSharp.Engine.DialogueContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogue2D_Context_Offset), 0, null, context);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogue2D_VolumeMultiplier_Offset), 0, null, volumeMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogue2D_PitchMultiplier_Offset), 0, null, pitchMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogue2D_StartTime_Offset), 0, null, startTime);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SpawnDialogue2D_bAutoDestroy_Offset), 0, null, bAutoDestroy);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SpawnDialogue2D_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AudioComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AudioComponent>.FromNative(IntPtr.Add(ParamsBuffer, SpawnDialogue2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SpawnDecalAttached
    static readonly IntPtr SpawnDecalAttached_NativeFunction;
    static readonly int SpawnDecalAttached_ParamsSize;
    static readonly int SpawnDecalAttached_DecalMaterial_Offset;
    static readonly int SpawnDecalAttached_DecalSize_Offset;
    static readonly int SpawnDecalAttached_AttachToComponent_Offset;
    static readonly int SpawnDecalAttached_AttachPointName_Offset;
    static readonly int SpawnDecalAttached_Location_Offset;
    static readonly int SpawnDecalAttached_Rotation_Offset;
    static readonly int SpawnDecalAttached_LocationType_Offset;
    static readonly int SpawnDecalAttached_LifeSpan_Offset;
    static readonly int SpawnDecalAttached_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.DecalComponent SpawnDecalAttached(UnrealSharp.Engine.MaterialInterface decalMaterial, System.DoubleNumerics.Vector3 decalSize, UnrealSharp.Engine.SceneComponent attachToComponent, Name attachPointName = default(Name), System.DoubleNumerics.Vector3 location = default(System.DoubleNumerics.Vector3), UnrealSharp.Rotator rotation = default(UnrealSharp.Rotator), UnrealSharp.Engine.EAttachLocation locationType = UnrealSharp.Engine.EAttachLocation.KeepRelativeOffset, float lifeSpan = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SpawnDecalAttached_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDecalAttached_DecalMaterial_Offset), 0, null, decalMaterial);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDecalAttached_DecalSize_Offset), 0, null, decalSize);
            ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDecalAttached_AttachToComponent_Offset), 0, null, attachToComponent);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDecalAttached_AttachPointName_Offset), 0, null, attachPointName);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDecalAttached_Location_Offset), 0, null, location);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDecalAttached_Rotation_Offset), 0, null, rotation);
            BlittableMarshaller<UnrealSharp.Engine.EAttachLocation>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDecalAttached_LocationType_Offset), 0, null, locationType);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDecalAttached_LifeSpan_Offset), 0, null, lifeSpan);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SpawnDecalAttached_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.DecalComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.DecalComponent>.FromNative(IntPtr.Add(ParamsBuffer, SpawnDecalAttached_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SpawnDecalAtLocation
    static readonly IntPtr SpawnDecalAtLocation_NativeFunction;
    static readonly int SpawnDecalAtLocation_ParamsSize;
    static readonly int SpawnDecalAtLocation_WorldContextObject_Offset;
    static readonly int SpawnDecalAtLocation_DecalMaterial_Offset;
    static readonly int SpawnDecalAtLocation_DecalSize_Offset;
    static readonly int SpawnDecalAtLocation_Location_Offset;
    static readonly int SpawnDecalAtLocation_Rotation_Offset;
    static readonly int SpawnDecalAtLocation_LifeSpan_Offset;
    static readonly int SpawnDecalAtLocation_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.DecalComponent SpawnDecalAtLocation(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.MaterialInterface decalMaterial, System.DoubleNumerics.Vector3 decalSize, System.DoubleNumerics.Vector3 location)
    {
        UnrealSharp.Rotator rotation = new UnrealSharp.Rotator
        {
            Pitch=-90.000000f,
            Yaw=0.000000f,
            Roll=0.000000f,
        };
        return SpawnDecalAtLocation(worldContextObject, decalMaterial, decalSize, location, rotation);
    }
    
    public static UnrealSharp.Engine.DecalComponent SpawnDecalAtLocation(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.MaterialInterface decalMaterial, System.DoubleNumerics.Vector3 decalSize, System.DoubleNumerics.Vector3 location, UnrealSharp.Rotator rotation, float lifeSpan = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SpawnDecalAtLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDecalAtLocation_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDecalAtLocation_DecalMaterial_Offset), 0, null, decalMaterial);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDecalAtLocation_DecalSize_Offset), 0, null, decalSize);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDecalAtLocation_Location_Offset), 0, null, location);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDecalAtLocation_Rotation_Offset), 0, null, rotation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SpawnDecalAtLocation_LifeSpan_Offset), 0, null, lifeSpan);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SpawnDecalAtLocation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.DecalComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.DecalComponent>.FromNative(IntPtr.Add(ParamsBuffer, SpawnDecalAtLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SetWorldOriginLocation
    static readonly IntPtr SetWorldOriginLocation_NativeFunction;
    static readonly int SetWorldOriginLocation_ParamsSize;
    static readonly int SetWorldOriginLocation_WorldContextObject_Offset;
    static readonly int SetWorldOriginLocation_NewLocation_Offset;
    
    public static void SetWorldOriginLocation(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.CoreUObject.IntVector newLocation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWorldOriginLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetWorldOriginLocation_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<UnrealSharp.CoreUObject.IntVector>.ToNative(IntPtr.Add(ParamsBuffer, SetWorldOriginLocation_NewLocation_Offset), 0, null, newLocation);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetWorldOriginLocation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SetViewportMouseCaptureMode
    static readonly IntPtr SetViewportMouseCaptureMode_NativeFunction;
    static readonly int SetViewportMouseCaptureMode_ParamsSize;
    static readonly int SetViewportMouseCaptureMode_WorldContextObject_Offset;
    static readonly int SetViewportMouseCaptureMode_MouseCaptureMode_Offset;
    
    public static void SetViewportMouseCaptureMode(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.EMouseCaptureMode mouseCaptureMode)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetViewportMouseCaptureMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetViewportMouseCaptureMode_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<UnrealSharp.Engine.EMouseCaptureMode>.ToNative(IntPtr.Add(ParamsBuffer, SetViewportMouseCaptureMode_MouseCaptureMode_Offset), 0, null, mouseCaptureMode);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetViewportMouseCaptureMode_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SetSubtitlesEnabled
    static readonly IntPtr SetSubtitlesEnabled_NativeFunction;
    static readonly int SetSubtitlesEnabled_ParamsSize;
    static readonly int SetSubtitlesEnabled_bEnabled_Offset;
    
    public static void SetSubtitlesEnabled(bool bEnabled)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSubtitlesEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetSubtitlesEnabled_bEnabled_Offset), 0, null, bEnabled);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetSubtitlesEnabled_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SetSoundMixClassOverride
    static readonly IntPtr SetSoundMixClassOverride_NativeFunction;
    static readonly int SetSoundMixClassOverride_ParamsSize;
    static readonly int SetSoundMixClassOverride_WorldContextObject_Offset;
    static readonly int SetSoundMixClassOverride_InSoundMixModifier_Offset;
    static readonly int SetSoundMixClassOverride_InSoundClass_Offset;
    static readonly int SetSoundMixClassOverride_Volume_Offset;
    static readonly int SetSoundMixClassOverride_Pitch_Offset;
    static readonly int SetSoundMixClassOverride_FadeInTime_Offset;
    static readonly int SetSoundMixClassOverride_bApplyToChildren_Offset;
    
    public static void SetSoundMixClassOverride(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundMix inSoundMixModifier, UnrealSharp.Engine.SoundClass inSoundClass, float volume = 1.000000f, float pitch = 1.000000f, float fadeInTime = 1.000000f, bool bApplyToChildren = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSoundMixClassOverride_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetSoundMixClassOverride_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundMix>.ToNative(IntPtr.Add(ParamsBuffer, SetSoundMixClassOverride_InSoundMixModifier_Offset), 0, null, inSoundMixModifier);
            ObjectMarshaller<UnrealSharp.Engine.SoundClass>.ToNative(IntPtr.Add(ParamsBuffer, SetSoundMixClassOverride_InSoundClass_Offset), 0, null, inSoundClass);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSoundMixClassOverride_Volume_Offset), 0, null, volume);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSoundMixClassOverride_Pitch_Offset), 0, null, pitch);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSoundMixClassOverride_FadeInTime_Offset), 0, null, fadeInTime);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetSoundMixClassOverride_bApplyToChildren_Offset), 0, null, bApplyToChildren);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetSoundMixClassOverride_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SetSoundClassDistanceScale
    static readonly IntPtr SetSoundClassDistanceScale_NativeFunction;
    static readonly int SetSoundClassDistanceScale_ParamsSize;
    static readonly int SetSoundClassDistanceScale_WorldContextObject_Offset;
    static readonly int SetSoundClassDistanceScale_SoundClass_Offset;
    static readonly int SetSoundClassDistanceScale_DistanceAttenuationScale_Offset;
    static readonly int SetSoundClassDistanceScale_TimeSec_Offset;
    
    public static void SetSoundClassDistanceScale(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundClass soundClass, float distanceAttenuationScale, float timeSec = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSoundClassDistanceScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetSoundClassDistanceScale_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundClass>.ToNative(IntPtr.Add(ParamsBuffer, SetSoundClassDistanceScale_SoundClass_Offset), 0, null, soundClass);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSoundClassDistanceScale_DistanceAttenuationScale_Offset), 0, null, distanceAttenuationScale);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSoundClassDistanceScale_TimeSec_Offset), 0, null, timeSec);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetSoundClassDistanceScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SetPlayerPlatformUserId
    static readonly IntPtr SetPlayerPlatformUserId_NativeFunction;
    static readonly int SetPlayerPlatformUserId_ParamsSize;
    static readonly int SetPlayerPlatformUserId_PlayerController_Offset;
    static readonly int SetPlayerPlatformUserId_UserId_Offset;
    
    public static void SetPlayerPlatformUserId(UnrealSharp.Engine.PlayerController playerController, UnrealSharp.CoreUObject.PlatformUserId userId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlayerPlatformUserId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, SetPlayerPlatformUserId_PlayerController_Offset), 0, null, playerController);
            UnrealSharp.CoreUObject.PlatformUserIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetPlayerPlatformUserId_UserId_Offset), 0, null, userId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetPlayerPlatformUserId_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SetPlayerControllerID
    static readonly IntPtr SetPlayerControllerID_NativeFunction;
    static readonly int SetPlayerControllerID_ParamsSize;
    static readonly int SetPlayerControllerID_Player_Offset;
    static readonly int SetPlayerControllerID_ControllerId_Offset;
    
    public static void SetPlayerControllerID(UnrealSharp.Engine.PlayerController player, int controllerId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlayerControllerID_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, SetPlayerControllerID_Player_Offset), 0, null, player);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetPlayerControllerID_ControllerId_Offset), 0, null, controllerId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetPlayerControllerID_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SetMaxAudioChannelsScaled
    static readonly IntPtr SetMaxAudioChannelsScaled_NativeFunction;
    static readonly int SetMaxAudioChannelsScaled_ParamsSize;
    static readonly int SetMaxAudioChannelsScaled_WorldContextObject_Offset;
    static readonly int SetMaxAudioChannelsScaled_MaxChannelCountScale_Offset;
    
    public static void SetMaxAudioChannelsScaled(UnrealSharp.CoreUObject.Object worldContextObject, float maxChannelCountScale)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMaxAudioChannelsScaled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetMaxAudioChannelsScaled_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMaxAudioChannelsScaled_MaxChannelCountScale_Offset), 0, null, maxChannelCountScale);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetMaxAudioChannelsScaled_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SetGlobalTimeDilation
    static readonly IntPtr SetGlobalTimeDilation_NativeFunction;
    static readonly int SetGlobalTimeDilation_ParamsSize;
    static readonly int SetGlobalTimeDilation_WorldContextObject_Offset;
    static readonly int SetGlobalTimeDilation_TimeDilation_Offset;
    
    public static void SetGlobalTimeDilation(UnrealSharp.CoreUObject.Object worldContextObject, float timeDilation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGlobalTimeDilation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalTimeDilation_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalTimeDilation_TimeDilation_Offset), 0, null, timeDilation);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetGlobalTimeDilation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SetGlobalPitchModulation
    static readonly IntPtr SetGlobalPitchModulation_NativeFunction;
    static readonly int SetGlobalPitchModulation_ParamsSize;
    static readonly int SetGlobalPitchModulation_WorldContextObject_Offset;
    static readonly int SetGlobalPitchModulation_PitchModulation_Offset;
    static readonly int SetGlobalPitchModulation_TimeSec_Offset;
    
    public static void SetGlobalPitchModulation(UnrealSharp.CoreUObject.Object worldContextObject, float pitchModulation, float timeSec)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGlobalPitchModulation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalPitchModulation_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalPitchModulation_PitchModulation_Offset), 0, null, pitchModulation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalPitchModulation_TimeSec_Offset), 0, null, timeSec);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetGlobalPitchModulation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SetGlobalListenerFocusParameters
    static readonly IntPtr SetGlobalListenerFocusParameters_NativeFunction;
    static readonly int SetGlobalListenerFocusParameters_ParamsSize;
    static readonly int SetGlobalListenerFocusParameters_WorldContextObject_Offset;
    static readonly int SetGlobalListenerFocusParameters_FocusAzimuthScale_Offset;
    static readonly int SetGlobalListenerFocusParameters_NonFocusAzimuthScale_Offset;
    static readonly int SetGlobalListenerFocusParameters_FocusDistanceScale_Offset;
    static readonly int SetGlobalListenerFocusParameters_NonFocusDistanceScale_Offset;
    static readonly int SetGlobalListenerFocusParameters_FocusVolumeScale_Offset;
    static readonly int SetGlobalListenerFocusParameters_NonFocusVolumeScale_Offset;
    static readonly int SetGlobalListenerFocusParameters_FocusPriorityScale_Offset;
    static readonly int SetGlobalListenerFocusParameters_NonFocusPriorityScale_Offset;
    
    public static void SetGlobalListenerFocusParameters(UnrealSharp.CoreUObject.Object worldContextObject, float focusAzimuthScale = 1.000000f, float nonFocusAzimuthScale = 1.000000f, float focusDistanceScale = 1.000000f, float nonFocusDistanceScale = 1.000000f, float focusVolumeScale = 1.000000f, float nonFocusVolumeScale = 1.000000f, float focusPriorityScale = 1.000000f, float nonFocusPriorityScale = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGlobalListenerFocusParameters_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalListenerFocusParameters_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalListenerFocusParameters_FocusAzimuthScale_Offset), 0, null, focusAzimuthScale);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalListenerFocusParameters_NonFocusAzimuthScale_Offset), 0, null, nonFocusAzimuthScale);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalListenerFocusParameters_FocusDistanceScale_Offset), 0, null, focusDistanceScale);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalListenerFocusParameters_NonFocusDistanceScale_Offset), 0, null, nonFocusDistanceScale);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalListenerFocusParameters_FocusVolumeScale_Offset), 0, null, focusVolumeScale);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalListenerFocusParameters_NonFocusVolumeScale_Offset), 0, null, nonFocusVolumeScale);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalListenerFocusParameters_FocusPriorityScale_Offset), 0, null, focusPriorityScale);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetGlobalListenerFocusParameters_NonFocusPriorityScale_Offset), 0, null, nonFocusPriorityScale);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetGlobalListenerFocusParameters_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SetGamePaused
    static readonly IntPtr SetGamePaused_NativeFunction;
    static readonly int SetGamePaused_ParamsSize;
    static readonly int SetGamePaused_WorldContextObject_Offset;
    static readonly int SetGamePaused_bPaused_Offset;
    static readonly int SetGamePaused_ReturnValue_Offset;
    
    public static bool SetGamePaused(UnrealSharp.CoreUObject.Object worldContextObject, bool bPaused)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGamePaused_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetGamePaused_WorldContextObject_Offset), 0, null, worldContextObject);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetGamePaused_bPaused_Offset), 0, null, bPaused);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetGamePaused_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetGamePaused_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SetForceDisableSplitscreen
    static readonly IntPtr SetForceDisableSplitscreen_NativeFunction;
    static readonly int SetForceDisableSplitscreen_ParamsSize;
    static readonly int SetForceDisableSplitscreen_WorldContextObject_Offset;
    static readonly int SetForceDisableSplitscreen_bDisable_Offset;
    
    public static void SetForceDisableSplitscreen(UnrealSharp.CoreUObject.Object worldContextObject, bool bDisable)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetForceDisableSplitscreen_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetForceDisableSplitscreen_WorldContextObject_Offset), 0, null, worldContextObject);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetForceDisableSplitscreen_bDisable_Offset), 0, null, bDisable);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetForceDisableSplitscreen_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SetEnableWorldRendering
    static readonly IntPtr SetEnableWorldRendering_NativeFunction;
    static readonly int SetEnableWorldRendering_ParamsSize;
    static readonly int SetEnableWorldRendering_WorldContextObject_Offset;
    static readonly int SetEnableWorldRendering_bEnable_Offset;
    
    public static void SetEnableWorldRendering(UnrealSharp.CoreUObject.Object worldContextObject, bool bEnable)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetEnableWorldRendering_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetEnableWorldRendering_WorldContextObject_Offset), 0, null, worldContextObject);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetEnableWorldRendering_bEnable_Offset), 0, null, bEnable);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetEnableWorldRendering_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SetBaseSoundMix
    static readonly IntPtr SetBaseSoundMix_NativeFunction;
    static readonly int SetBaseSoundMix_ParamsSize;
    static readonly int SetBaseSoundMix_WorldContextObject_Offset;
    static readonly int SetBaseSoundMix_InSoundMix_Offset;
    
    public static void SetBaseSoundMix(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundMix inSoundMix)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBaseSoundMix_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetBaseSoundMix_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundMix>.ToNative(IntPtr.Add(ParamsBuffer, SetBaseSoundMix_InSoundMix_Offset), 0, null, inSoundMix);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetBaseSoundMix_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SetActiveSpatialPluginByName
    static readonly IntPtr SetActiveSpatialPluginByName_NativeFunction;
    static readonly int SetActiveSpatialPluginByName_ParamsSize;
    static readonly int SetActiveSpatialPluginByName_WorldContextObject_Offset;
    static readonly int SetActiveSpatialPluginByName_InPluginName_Offset;
    static readonly int SetActiveSpatialPluginByName_ReturnValue_Offset;
    
    public static bool SetActiveSpatialPluginByName(UnrealSharp.CoreUObject.Object worldContextObject, Name inPluginName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetActiveSpatialPluginByName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetActiveSpatialPluginByName_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetActiveSpatialPluginByName_InPluginName_Offset), 0, null, inPluginName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetActiveSpatialPluginByName_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetActiveSpatialPluginByName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:SaveGameToSlot
    static readonly IntPtr SaveGameToSlot_NativeFunction;
    static readonly int SaveGameToSlot_ParamsSize;
    static readonly int SaveGameToSlot_SaveGameObject_Offset;
    static readonly int SaveGameToSlot_SlotName_Offset;
    static readonly int SaveGameToSlot_UserIndex_Offset;
    static readonly int SaveGameToSlot_ReturnValue_Offset;
    
    public static bool SaveGameToSlot(UnrealSharp.Engine.SaveGame saveGameObject, string slotName, int userIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SaveGameToSlot_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SaveGame>.ToNative(IntPtr.Add(ParamsBuffer, SaveGameToSlot_SaveGameObject_Offset), 0, null, saveGameObject);
            IntPtr SlotName_NativePtr = IntPtr.Add(ParamsBuffer,SaveGameToSlot_SlotName_Offset);
            StringMarshaller.ToNative(SlotName_NativePtr,0,null,slotName);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SaveGameToSlot_UserIndex_Offset), 0, null, userIndex);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SaveGameToSlot_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SaveGameToSlot_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SlotName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:RemovePlayer
    static readonly IntPtr RemovePlayer_NativeFunction;
    static readonly int RemovePlayer_ParamsSize;
    static readonly int RemovePlayer_Player_Offset;
    static readonly int RemovePlayer_bDestroyPawn_Offset;
    
    public static void RemovePlayer(UnrealSharp.Engine.PlayerController player, bool bDestroyPawn)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemovePlayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, RemovePlayer_Player_Offset), 0, null, player);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, RemovePlayer_bDestroyPawn_Offset), 0, null, bDestroyPawn);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemovePlayer_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:RebaseZeroOriginOntoLocal
    static readonly IntPtr RebaseZeroOriginOntoLocal_NativeFunction;
    static readonly int RebaseZeroOriginOntoLocal_ParamsSize;
    static readonly int RebaseZeroOriginOntoLocal_WorldContextObject_Offset;
    static readonly int RebaseZeroOriginOntoLocal_WorldLocation_Offset;
    static readonly int RebaseZeroOriginOntoLocal_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 RebaseZeroOriginOntoLocal(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 worldLocation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RebaseZeroOriginOntoLocal_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, RebaseZeroOriginOntoLocal_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, RebaseZeroOriginOntoLocal_WorldLocation_Offset), 0, null, worldLocation);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RebaseZeroOriginOntoLocal_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, RebaseZeroOriginOntoLocal_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:RebaseLocalOriginOntoZero
    static readonly IntPtr RebaseLocalOriginOntoZero_NativeFunction;
    static readonly int RebaseLocalOriginOntoZero_ParamsSize;
    static readonly int RebaseLocalOriginOntoZero_WorldContextObject_Offset;
    static readonly int RebaseLocalOriginOntoZero_WorldLocation_Offset;
    static readonly int RebaseLocalOriginOntoZero_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 RebaseLocalOriginOntoZero(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 worldLocation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RebaseLocalOriginOntoZero_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, RebaseLocalOriginOntoZero_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, RebaseLocalOriginOntoZero_WorldLocation_Offset), 0, null, worldLocation);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RebaseLocalOriginOntoZero_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, RebaseLocalOriginOntoZero_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:PushSoundMixModifier
    static readonly IntPtr PushSoundMixModifier_NativeFunction;
    static readonly int PushSoundMixModifier_ParamsSize;
    static readonly int PushSoundMixModifier_WorldContextObject_Offset;
    static readonly int PushSoundMixModifier_InSoundMixModifier_Offset;
    
    public static void PushSoundMixModifier(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundMix inSoundMixModifier)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PushSoundMixModifier_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, PushSoundMixModifier_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundMix>.ToNative(IntPtr.Add(ParamsBuffer, PushSoundMixModifier_InSoundMixModifier_Offset), 0, null, inSoundMixModifier);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, PushSoundMixModifier_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:ProjectWorldToScreen
    static readonly IntPtr ProjectWorldToScreen_NativeFunction;
    static readonly int ProjectWorldToScreen_ParamsSize;
    static readonly int ProjectWorldToScreen_Player_Offset;
    static readonly int ProjectWorldToScreen_WorldPosition_Offset;
    static readonly int ProjectWorldToScreen_ScreenPosition_Offset;
    static readonly int ProjectWorldToScreen_bPlayerViewportRelative_Offset;
    static readonly int ProjectWorldToScreen_ReturnValue_Offset;
    
    public static bool ProjectWorldToScreen(UnrealSharp.Engine.PlayerController player, System.DoubleNumerics.Vector3 worldPosition, out System.DoubleNumerics.Vector2 screenPosition, bool bPlayerViewportRelative = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ProjectWorldToScreen_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, ProjectWorldToScreen_Player_Offset), 0, null, player);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ProjectWorldToScreen_WorldPosition_Offset), 0, null, worldPosition);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ProjectWorldToScreen_bPlayerViewportRelative_Offset), 0, null, bPlayerViewportRelative);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ProjectWorldToScreen_NativeFunction, ParamsBuffer);
            
            screenPosition = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, ProjectWorldToScreen_ScreenPosition_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ProjectWorldToScreen_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:PrimeSound
    static readonly IntPtr PrimeSound_NativeFunction;
    static readonly int PrimeSound_ParamsSize;
    static readonly int PrimeSound_InSound_Offset;
    
    public static void PrimeSound(UnrealSharp.Engine.SoundBase inSound)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PrimeSound_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SoundBase>.ToNative(IntPtr.Add(ParamsBuffer, PrimeSound_InSound_Offset), 0, null, inSound);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, PrimeSound_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:PrimeAllSoundsInSoundClass
    static readonly IntPtr PrimeAllSoundsInSoundClass_NativeFunction;
    static readonly int PrimeAllSoundsInSoundClass_ParamsSize;
    static readonly int PrimeAllSoundsInSoundClass_InSoundClass_Offset;
    
    public static void PrimeAllSoundsInSoundClass(UnrealSharp.Engine.SoundClass inSoundClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PrimeAllSoundsInSoundClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SoundClass>.ToNative(IntPtr.Add(ParamsBuffer, PrimeAllSoundsInSoundClass_InSoundClass_Offset), 0, null, inSoundClass);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, PrimeAllSoundsInSoundClass_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:PopSoundMixModifier
    static readonly IntPtr PopSoundMixModifier_NativeFunction;
    static readonly int PopSoundMixModifier_ParamsSize;
    static readonly int PopSoundMixModifier_WorldContextObject_Offset;
    static readonly int PopSoundMixModifier_InSoundMixModifier_Offset;
    
    public static void PopSoundMixModifier(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundMix inSoundMixModifier)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PopSoundMixModifier_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, PopSoundMixModifier_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundMix>.ToNative(IntPtr.Add(ParamsBuffer, PopSoundMixModifier_InSoundMixModifier_Offset), 0, null, inSoundMixModifier);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, PopSoundMixModifier_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:PlayWorldCameraShake
    static readonly IntPtr PlayWorldCameraShake_NativeFunction;
    static readonly int PlayWorldCameraShake_ParamsSize;
    static readonly int PlayWorldCameraShake_WorldContextObject_Offset;
    static readonly int PlayWorldCameraShake_Shake_Offset;
    static readonly int PlayWorldCameraShake_Epicenter_Offset;
    static readonly int PlayWorldCameraShake_InnerRadius_Offset;
    static readonly int PlayWorldCameraShake_OuterRadius_Offset;
    static readonly int PlayWorldCameraShake_Falloff_Offset;
    static readonly int PlayWorldCameraShake_bOrientShakeTowardsEpicenter_Offset;
    
    public static void PlayWorldCameraShake(UnrealSharp.CoreUObject.Object worldContextObject, SubclassOf<UnrealSharp.Engine.CameraShakeBase> shake, System.DoubleNumerics.Vector3 epicenter, float innerRadius, float outerRadius, float falloff = 1.000000f, bool bOrientShakeTowardsEpicenter = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PlayWorldCameraShake_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, PlayWorldCameraShake_WorldContextObject_Offset), 0, null, worldContextObject);
            SubclassOfMarshaller<UnrealSharp.Engine.CameraShakeBase>.ToNative(IntPtr.Add(ParamsBuffer, PlayWorldCameraShake_Shake_Offset), 0, null, shake);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, PlayWorldCameraShake_Epicenter_Offset), 0, null, epicenter);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlayWorldCameraShake_InnerRadius_Offset), 0, null, innerRadius);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlayWorldCameraShake_OuterRadius_Offset), 0, null, outerRadius);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlayWorldCameraShake_Falloff_Offset), 0, null, falloff);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, PlayWorldCameraShake_bOrientShakeTowardsEpicenter_Offset), 0, null, bOrientShakeTowardsEpicenter);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, PlayWorldCameraShake_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:PlaySoundAtLocation
    static readonly IntPtr PlaySoundAtLocation_NativeFunction;
    static readonly int PlaySoundAtLocation_ParamsSize;
    static readonly int PlaySoundAtLocation_WorldContextObject_Offset;
    static readonly int PlaySoundAtLocation_Sound_Offset;
    static readonly int PlaySoundAtLocation_Location_Offset;
    static readonly int PlaySoundAtLocation_Rotation_Offset;
    static readonly int PlaySoundAtLocation_VolumeMultiplier_Offset;
    static readonly int PlaySoundAtLocation_PitchMultiplier_Offset;
    static readonly int PlaySoundAtLocation_StartTime_Offset;
    static readonly int PlaySoundAtLocation_AttenuationSettings_Offset;
    static readonly int PlaySoundAtLocation_ConcurrencySettings_Offset;
    static readonly int PlaySoundAtLocation_OwningActor_Offset;
    static readonly int PlaySoundAtLocation_InitialParams_Offset;
    
    public static void PlaySoundAtLocation(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundBase sound, System.DoubleNumerics.Vector3 location, UnrealSharp.Rotator rotation, float volumeMultiplier = 1.000000f, float pitchMultiplier = 1.000000f, float startTime = 0.000000f, UnrealSharp.Engine.SoundAttenuation attenuationSettings = default(UnrealSharp.Engine.SoundAttenuation), UnrealSharp.Engine.SoundConcurrency concurrencySettings = default(UnrealSharp.Engine.SoundConcurrency), UnrealSharp.Engine.Actor owningActor = default(UnrealSharp.Engine.Actor), UnrealSharp.Engine.InitialActiveSoundParams initialParams = default(UnrealSharp.Engine.InitialActiveSoundParams))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PlaySoundAtLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, PlaySoundAtLocation_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundBase>.ToNative(IntPtr.Add(ParamsBuffer, PlaySoundAtLocation_Sound_Offset), 0, null, sound);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, PlaySoundAtLocation_Location_Offset), 0, null, location);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, PlaySoundAtLocation_Rotation_Offset), 0, null, rotation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlaySoundAtLocation_VolumeMultiplier_Offset), 0, null, volumeMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlaySoundAtLocation_PitchMultiplier_Offset), 0, null, pitchMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlaySoundAtLocation_StartTime_Offset), 0, null, startTime);
            ObjectMarshaller<UnrealSharp.Engine.SoundAttenuation>.ToNative(IntPtr.Add(ParamsBuffer, PlaySoundAtLocation_AttenuationSettings_Offset), 0, null, attenuationSettings);
            ObjectMarshaller<UnrealSharp.Engine.SoundConcurrency>.ToNative(IntPtr.Add(ParamsBuffer, PlaySoundAtLocation_ConcurrencySettings_Offset), 0, null, concurrencySettings);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, PlaySoundAtLocation_OwningActor_Offset), 0, null, owningActor);
            ObjectMarshaller<UnrealSharp.Engine.InitialActiveSoundParams>.ToNative(IntPtr.Add(ParamsBuffer, PlaySoundAtLocation_InitialParams_Offset), 0, null, initialParams);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, PlaySoundAtLocation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:PlaySound2D
    static readonly IntPtr PlaySound2D_NativeFunction;
    static readonly int PlaySound2D_ParamsSize;
    static readonly int PlaySound2D_WorldContextObject_Offset;
    static readonly int PlaySound2D_Sound_Offset;
    static readonly int PlaySound2D_VolumeMultiplier_Offset;
    static readonly int PlaySound2D_PitchMultiplier_Offset;
    static readonly int PlaySound2D_StartTime_Offset;
    static readonly int PlaySound2D_ConcurrencySettings_Offset;
    static readonly int PlaySound2D_OwningActor_Offset;
    static readonly int PlaySound2D_bIsUISound_Offset;
    
    public static void PlaySound2D(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundBase sound, float volumeMultiplier = 1.000000f, float pitchMultiplier = 1.000000f, float startTime = 0.000000f, UnrealSharp.Engine.SoundConcurrency concurrencySettings = default(UnrealSharp.Engine.SoundConcurrency), UnrealSharp.Engine.Actor owningActor = default(UnrealSharp.Engine.Actor), bool bIsUISound = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PlaySound2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, PlaySound2D_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundBase>.ToNative(IntPtr.Add(ParamsBuffer, PlaySound2D_Sound_Offset), 0, null, sound);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlaySound2D_VolumeMultiplier_Offset), 0, null, volumeMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlaySound2D_PitchMultiplier_Offset), 0, null, pitchMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlaySound2D_StartTime_Offset), 0, null, startTime);
            ObjectMarshaller<UnrealSharp.Engine.SoundConcurrency>.ToNative(IntPtr.Add(ParamsBuffer, PlaySound2D_ConcurrencySettings_Offset), 0, null, concurrencySettings);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, PlaySound2D_OwningActor_Offset), 0, null, owningActor);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, PlaySound2D_bIsUISound_Offset), 0, null, bIsUISound);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, PlaySound2D_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:PlayDialogueAtLocation
    static readonly IntPtr PlayDialogueAtLocation_NativeFunction;
    static readonly int PlayDialogueAtLocation_ParamsSize;
    static readonly int PlayDialogueAtLocation_WorldContextObject_Offset;
    static readonly int PlayDialogueAtLocation_Dialogue_Offset;
    static readonly int PlayDialogueAtLocation_Context_Offset;
    static readonly int PlayDialogueAtLocation_Location_Offset;
    static readonly int PlayDialogueAtLocation_Rotation_Offset;
    static readonly int PlayDialogueAtLocation_VolumeMultiplier_Offset;
    static readonly int PlayDialogueAtLocation_PitchMultiplier_Offset;
    static readonly int PlayDialogueAtLocation_StartTime_Offset;
    static readonly int PlayDialogueAtLocation_AttenuationSettings_Offset;
    
    public static void PlayDialogueAtLocation(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.DialogueWave dialogue, UnrealSharp.Engine.DialogueContext context, System.DoubleNumerics.Vector3 location, UnrealSharp.Rotator rotation, float volumeMultiplier = 1.000000f, float pitchMultiplier = 1.000000f, float startTime = 0.000000f, UnrealSharp.Engine.SoundAttenuation attenuationSettings = default(UnrealSharp.Engine.SoundAttenuation))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PlayDialogueAtLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, PlayDialogueAtLocation_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.DialogueWave>.ToNative(IntPtr.Add(ParamsBuffer, PlayDialogueAtLocation_Dialogue_Offset), 0, null, dialogue);
            UnrealSharp.Engine.DialogueContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, PlayDialogueAtLocation_Context_Offset), 0, null, context);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, PlayDialogueAtLocation_Location_Offset), 0, null, location);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, PlayDialogueAtLocation_Rotation_Offset), 0, null, rotation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlayDialogueAtLocation_VolumeMultiplier_Offset), 0, null, volumeMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlayDialogueAtLocation_PitchMultiplier_Offset), 0, null, pitchMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlayDialogueAtLocation_StartTime_Offset), 0, null, startTime);
            ObjectMarshaller<UnrealSharp.Engine.SoundAttenuation>.ToNative(IntPtr.Add(ParamsBuffer, PlayDialogueAtLocation_AttenuationSettings_Offset), 0, null, attenuationSettings);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, PlayDialogueAtLocation_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:PlayDialogue2D
    static readonly IntPtr PlayDialogue2D_NativeFunction;
    static readonly int PlayDialogue2D_ParamsSize;
    static readonly int PlayDialogue2D_WorldContextObject_Offset;
    static readonly int PlayDialogue2D_Dialogue_Offset;
    static readonly int PlayDialogue2D_Context_Offset;
    static readonly int PlayDialogue2D_VolumeMultiplier_Offset;
    static readonly int PlayDialogue2D_PitchMultiplier_Offset;
    static readonly int PlayDialogue2D_StartTime_Offset;
    
    public static void PlayDialogue2D(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.DialogueWave dialogue, UnrealSharp.Engine.DialogueContext context, float volumeMultiplier = 1.000000f, float pitchMultiplier = 1.000000f, float startTime = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PlayDialogue2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, PlayDialogue2D_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.DialogueWave>.ToNative(IntPtr.Add(ParamsBuffer, PlayDialogue2D_Dialogue_Offset), 0, null, dialogue);
            UnrealSharp.Engine.DialogueContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, PlayDialogue2D_Context_Offset), 0, null, context);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlayDialogue2D_VolumeMultiplier_Offset), 0, null, volumeMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlayDialogue2D_PitchMultiplier_Offset), 0, null, pitchMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlayDialogue2D_StartTime_Offset), 0, null, startTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, PlayDialogue2D_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:ParseOption
    static readonly IntPtr ParseOption_NativeFunction;
    static readonly int ParseOption_ParamsSize;
    static readonly int ParseOption_Options_Offset;
    static readonly int ParseOption_Key_Offset;
    static readonly int ParseOption_ReturnValue_Offset;
    
    public static string ParseOption(string options, string key)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ParseOption_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Options_NativePtr = IntPtr.Add(ParamsBuffer,ParseOption_Options_Offset);
            StringMarshaller.ToNative(Options_NativePtr,0,null,options);
            IntPtr Key_NativePtr = IntPtr.Add(ParamsBuffer,ParseOption_Key_Offset);
            StringMarshaller.ToNative(Key_NativePtr,0,null,key);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ParseOption_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,ParseOption_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(Options_NativePtr, 0);
            StringMarshaller.DestructInstance(Key_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:OpenLevelBySoftObjectPtr
    static readonly IntPtr OpenLevelBySoftObjectPtr_NativeFunction;
    static readonly int OpenLevelBySoftObjectPtr_ParamsSize;
    static readonly int OpenLevelBySoftObjectPtr_WorldContextObject_Offset;
    static readonly int OpenLevelBySoftObjectPtr_Level_Offset;
    static readonly int OpenLevelBySoftObjectPtr_bAbsolute_Offset;
    static readonly int OpenLevelBySoftObjectPtr_Options_Offset;
    
    public static void OpenLevelBySoftObjectPtr(UnrealSharp.CoreUObject.Object worldContextObject, SoftObject<UnrealSharp.Engine.World> level, bool bAbsolute = true, string options = "")
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[OpenLevelBySoftObjectPtr_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, OpenLevelBySoftObjectPtr_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<SoftObject<UnrealSharp.Engine.World>>.ToNative(IntPtr.Add(ParamsBuffer, OpenLevelBySoftObjectPtr_Level_Offset), 0, null, level);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, OpenLevelBySoftObjectPtr_bAbsolute_Offset), 0, null, bAbsolute);
            IntPtr Options_NativePtr = IntPtr.Add(ParamsBuffer,OpenLevelBySoftObjectPtr_Options_Offset);
            StringMarshaller.ToNative(Options_NativePtr,0,null,options);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, OpenLevelBySoftObjectPtr_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Options_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.GameplayStatics:OpenLevel
    static readonly IntPtr OpenLevel_NativeFunction;
    static readonly int OpenLevel_ParamsSize;
    static readonly int OpenLevel_WorldContextObject_Offset;
    static readonly int OpenLevel_LevelName_Offset;
    static readonly int OpenLevel_bAbsolute_Offset;
    static readonly int OpenLevel_Options_Offset;
    
    public static void OpenLevel(UnrealSharp.CoreUObject.Object worldContextObject, Name levelName, bool bAbsolute = true, string options = "")
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[OpenLevel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, OpenLevel_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, OpenLevel_LevelName_Offset), 0, null, levelName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, OpenLevel_bAbsolute_Offset), 0, null, bAbsolute);
            IntPtr Options_NativePtr = IntPtr.Add(ParamsBuffer,OpenLevel_Options_Offset);
            StringMarshaller.ToNative(Options_NativePtr,0,null,options);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, OpenLevel_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Options_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.GameplayStatics:ObjectIsA
    static readonly IntPtr ObjectIsA_NativeFunction;
    static readonly int ObjectIsA_ParamsSize;
    static readonly int ObjectIsA_Object_Offset;
    static readonly int ObjectIsA_ObjectClass_Offset;
    static readonly int ObjectIsA_ReturnValue_Offset;
    
    public static bool ObjectIsA(UnrealSharp.CoreUObject.Object @object, SubclassOf<UnrealSharp.CoreUObject.Object> objectClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ObjectIsA_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ObjectIsA_Object_Offset), 0, null, @object);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ObjectIsA_ObjectClass_Offset), 0, null, objectClass);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ObjectIsA_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ObjectIsA_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:LoadGameFromSlot
    static readonly IntPtr LoadGameFromSlot_NativeFunction;
    static readonly int LoadGameFromSlot_ParamsSize;
    static readonly int LoadGameFromSlot_SlotName_Offset;
    static readonly int LoadGameFromSlot_UserIndex_Offset;
    static readonly int LoadGameFromSlot_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.SaveGame LoadGameFromSlot(string slotName, int userIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LoadGameFromSlot_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SlotName_NativePtr = IntPtr.Add(ParamsBuffer,LoadGameFromSlot_SlotName_Offset);
            StringMarshaller.ToNative(SlotName_NativePtr,0,null,slotName);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, LoadGameFromSlot_UserIndex_Offset), 0, null, userIndex);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LoadGameFromSlot_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.SaveGame returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.SaveGame>.FromNative(IntPtr.Add(ParamsBuffer, LoadGameFromSlot_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SlotName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:IsSplitscreenForceDisabled
    static readonly IntPtr IsSplitscreenForceDisabled_NativeFunction;
    static readonly int IsSplitscreenForceDisabled_ParamsSize;
    static readonly int IsSplitscreenForceDisabled_WorldContextObject_Offset;
    static readonly int IsSplitscreenForceDisabled_ReturnValue_Offset;
    
    public static bool IsSplitscreenForceDisabled(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsSplitscreenForceDisabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, IsSplitscreenForceDisabled_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsSplitscreenForceDisabled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsSplitscreenForceDisabled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:IsGamePaused
    static readonly IntPtr IsGamePaused_NativeFunction;
    static readonly int IsGamePaused_ParamsSize;
    static readonly int IsGamePaused_WorldContextObject_Offset;
    static readonly int IsGamePaused_ReturnValue_Offset;
    
    public static bool IsGamePaused(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsGamePaused_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, IsGamePaused_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsGamePaused_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsGamePaused_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:IsAnyLocalPlayerCameraWithinRange
    static readonly IntPtr IsAnyLocalPlayerCameraWithinRange_NativeFunction;
    static readonly int IsAnyLocalPlayerCameraWithinRange_ParamsSize;
    static readonly int IsAnyLocalPlayerCameraWithinRange_WorldContextObject_Offset;
    static readonly int IsAnyLocalPlayerCameraWithinRange_Location_Offset;
    static readonly int IsAnyLocalPlayerCameraWithinRange_MaximumRange_Offset;
    static readonly int IsAnyLocalPlayerCameraWithinRange_ReturnValue_Offset;
    
    public static bool IsAnyLocalPlayerCameraWithinRange(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 location, float maximumRange)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsAnyLocalPlayerCameraWithinRange_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, IsAnyLocalPlayerCameraWithinRange_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, IsAnyLocalPlayerCameraWithinRange_Location_Offset), 0, null, location);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, IsAnyLocalPlayerCameraWithinRange_MaximumRange_Offset), 0, null, maximumRange);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsAnyLocalPlayerCameraWithinRange_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsAnyLocalPlayerCameraWithinRange_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:HasOption
    static readonly IntPtr HasOption_NativeFunction;
    static readonly int HasOption_ParamsSize;
    static readonly int HasOption_Options_Offset;
    static readonly int HasOption_InKey_Offset;
    static readonly int HasOption_ReturnValue_Offset;
    
    public static bool HasOption(string options, string inKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasOption_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Options_NativePtr = IntPtr.Add(ParamsBuffer,HasOption_Options_Offset);
            StringMarshaller.ToNative(Options_NativePtr,0,null,options);
            IntPtr InKey_NativePtr = IntPtr.Add(ParamsBuffer,HasOption_InKey_Offset);
            StringMarshaller.ToNative(InKey_NativePtr,0,null,inKey);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, HasOption_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasOption_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(Options_NativePtr, 0);
            StringMarshaller.DestructInstance(InKey_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:HasLaunchOption
    static readonly IntPtr HasLaunchOption_NativeFunction;
    static readonly int HasLaunchOption_ParamsSize;
    static readonly int HasLaunchOption_OptionToCheck_Offset;
    static readonly int HasLaunchOption_ReturnValue_Offset;
    
    public static bool HasLaunchOption(string optionToCheck)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasLaunchOption_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr OptionToCheck_NativePtr = IntPtr.Add(ParamsBuffer,HasLaunchOption_OptionToCheck_Offset);
            StringMarshaller.ToNative(OptionToCheck_NativePtr,0,null,optionToCheck);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, HasLaunchOption_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasLaunchOption_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(OptionToCheck_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GrassOverlappingSphereCount
    static readonly IntPtr GrassOverlappingSphereCount_NativeFunction;
    static readonly int GrassOverlappingSphereCount_ParamsSize;
    static readonly int GrassOverlappingSphereCount_WorldContextObject_Offset;
    static readonly int GrassOverlappingSphereCount_StaticMesh_Offset;
    static readonly int GrassOverlappingSphereCount_CenterPosition_Offset;
    static readonly int GrassOverlappingSphereCount_Radius_Offset;
    static readonly int GrassOverlappingSphereCount_ReturnValue_Offset;
    
    public static int GrassOverlappingSphereCount(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.StaticMesh staticMesh, System.DoubleNumerics.Vector3 centerPosition, float radius)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GrassOverlappingSphereCount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GrassOverlappingSphereCount_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.StaticMesh>.ToNative(IntPtr.Add(ParamsBuffer, GrassOverlappingSphereCount_StaticMesh_Offset), 0, null, staticMesh);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GrassOverlappingSphereCount_CenterPosition_Offset), 0, null, centerPosition);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GrassOverlappingSphereCount_Radius_Offset), 0, null, radius);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GrassOverlappingSphereCount_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GrassOverlappingSphereCount_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetWorldOriginLocation
    static readonly IntPtr GetWorldOriginLocation_NativeFunction;
    static readonly int GetWorldOriginLocation_ParamsSize;
    static readonly int GetWorldOriginLocation_WorldContextObject_Offset;
    static readonly int GetWorldOriginLocation_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.IntVector GetWorldOriginLocation(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWorldOriginLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetWorldOriginLocation_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetWorldOriginLocation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.IntVector returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.IntVector>.FromNative(IntPtr.Add(ParamsBuffer, GetWorldOriginLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetWorldDeltaSeconds
    static readonly IntPtr GetWorldDeltaSeconds_NativeFunction;
    static readonly int GetWorldDeltaSeconds_ParamsSize;
    static readonly int GetWorldDeltaSeconds_WorldContextObject_Offset;
    static readonly int GetWorldDeltaSeconds_ReturnValue_Offset;
    
    public static double GetWorldDeltaSeconds(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWorldDeltaSeconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetWorldDeltaSeconds_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetWorldDeltaSeconds_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, GetWorldDeltaSeconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetViewProjectionMatrix
    static readonly IntPtr GetViewProjectionMatrix_NativeFunction;
    static readonly int GetViewProjectionMatrix_ParamsSize;
    static readonly int GetViewProjectionMatrix_DesiredView_Offset;
    static readonly int GetViewProjectionMatrix_ViewMatrix_Offset;
    static readonly int GetViewProjectionMatrix_ProjectionMatrix_Offset;
    static readonly int GetViewProjectionMatrix_ViewProjectionMatrix_Offset;
    
    public static void GetViewProjectionMatrix(UnrealSharp.Engine.MinimalViewInfo desiredView, out System.DoubleNumerics.Matrix4x4 viewMatrix, out System.DoubleNumerics.Matrix4x4 projectionMatrix, out System.DoubleNumerics.Matrix4x4 viewProjectionMatrix)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetViewProjectionMatrix_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.MinimalViewInfoMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetViewProjectionMatrix_DesiredView_Offset), 0, null, desiredView);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetViewProjectionMatrix_NativeFunction, ParamsBuffer);
            
            viewMatrix = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, GetViewProjectionMatrix_ViewMatrix_Offset), 0, null);
            projectionMatrix = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, GetViewProjectionMatrix_ProjectionMatrix_Offset), 0, null);
            viewProjectionMatrix = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, GetViewProjectionMatrix_ViewProjectionMatrix_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetViewportMouseCaptureMode
    static readonly IntPtr GetViewportMouseCaptureMode_NativeFunction;
    static readonly int GetViewportMouseCaptureMode_ParamsSize;
    static readonly int GetViewportMouseCaptureMode_WorldContextObject_Offset;
    static readonly int GetViewportMouseCaptureMode_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.EMouseCaptureMode GetViewportMouseCaptureMode(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetViewportMouseCaptureMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetViewportMouseCaptureMode_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetViewportMouseCaptureMode_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.EMouseCaptureMode returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Engine.EMouseCaptureMode>.FromNative(IntPtr.Add(ParamsBuffer, GetViewportMouseCaptureMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetUnpausedTimeSeconds
    static readonly IntPtr GetUnpausedTimeSeconds_NativeFunction;
    static readonly int GetUnpausedTimeSeconds_ParamsSize;
    static readonly int GetUnpausedTimeSeconds_WorldContextObject_Offset;
    static readonly int GetUnpausedTimeSeconds_ReturnValue_Offset;
    
    public static double GetUnpausedTimeSeconds(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetUnpausedTimeSeconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetUnpausedTimeSeconds_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetUnpausedTimeSeconds_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, GetUnpausedTimeSeconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetTimeSeconds
    static readonly IntPtr GetTimeSeconds_NativeFunction;
    static readonly int GetTimeSeconds_ParamsSize;
    static readonly int GetTimeSeconds_WorldContextObject_Offset;
    static readonly int GetTimeSeconds_ReturnValue_Offset;
    
    public static double GetTimeSeconds(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTimeSeconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetTimeSeconds_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetTimeSeconds_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, GetTimeSeconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetSurfaceType
    static readonly IntPtr GetSurfaceType_NativeFunction;
    static readonly int GetSurfaceType_ParamsSize;
    static readonly int GetSurfaceType_Hit_Offset;
    static readonly int GetSurfaceType_ReturnValue_Offset;
    
    public static UnrealSharp.PhysicsCore.EPhysicalSurface GetSurfaceType(UnrealSharp.Engine.HitResult hit)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSurfaceType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.HitResultMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetSurfaceType_Hit_Offset), 0, null, hit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSurfaceType_NativeFunction, ParamsBuffer);
            
            UnrealSharp.PhysicsCore.EPhysicalSurface returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.PhysicsCore.EPhysicalSurface>.FromNative(IntPtr.Add(ParamsBuffer, GetSurfaceType_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetStreamingLevel
    static readonly IntPtr GetStreamingLevel_NativeFunction;
    static readonly int GetStreamingLevel_ParamsSize;
    static readonly int GetStreamingLevel_WorldContextObject_Offset;
    static readonly int GetStreamingLevel_PackageName_Offset;
    static readonly int GetStreamingLevel_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.LevelStreaming GetStreamingLevel(UnrealSharp.CoreUObject.Object worldContextObject, Name packageName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStreamingLevel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetStreamingLevel_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetStreamingLevel_PackageName_Offset), 0, null, packageName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetStreamingLevel_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.LevelStreaming returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.LevelStreaming>.FromNative(IntPtr.Add(ParamsBuffer, GetStreamingLevel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetRealTimeSeconds
    static readonly IntPtr GetRealTimeSeconds_NativeFunction;
    static readonly int GetRealTimeSeconds_ParamsSize;
    static readonly int GetRealTimeSeconds_WorldContextObject_Offset;
    static readonly int GetRealTimeSeconds_ReturnValue_Offset;
    
    public static double GetRealTimeSeconds(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRealTimeSeconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetRealTimeSeconds_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetRealTimeSeconds_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, GetRealTimeSeconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetPlayerStateFromUniqueNetId
    static readonly IntPtr GetPlayerStateFromUniqueNetId_NativeFunction;
    static readonly int GetPlayerStateFromUniqueNetId_ParamsSize;
    static readonly int GetPlayerStateFromUniqueNetId_WorldContextObject_Offset;
    static readonly int GetPlayerStateFromUniqueNetId_UniqueId_Offset;
    static readonly int GetPlayerStateFromUniqueNetId_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.PlayerState GetPlayerStateFromUniqueNetId(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.UniqueNetIdRepl uniqueId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayerStateFromUniqueNetId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerStateFromUniqueNetId_WorldContextObject_Offset), 0, null, worldContextObject);
            UnrealSharp.Engine.UniqueNetIdReplMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerStateFromUniqueNetId_UniqueId_Offset), 0, null, uniqueId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlayerStateFromUniqueNetId_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PlayerState returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PlayerState>.FromNative(IntPtr.Add(ParamsBuffer, GetPlayerStateFromUniqueNetId_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetPlayerState
    static readonly IntPtr GetPlayerState_NativeFunction;
    static readonly int GetPlayerState_ParamsSize;
    static readonly int GetPlayerState_WorldContextObject_Offset;
    static readonly int GetPlayerState_PlayerStateIndex_Offset;
    static readonly int GetPlayerState_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.PlayerState GetPlayerState(UnrealSharp.CoreUObject.Object worldContextObject, int playerStateIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayerState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerState_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerState_PlayerStateIndex_Offset), 0, null, playerStateIndex);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlayerState_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PlayerState returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PlayerState>.FromNative(IntPtr.Add(ParamsBuffer, GetPlayerState_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetPlayerPawn
    static readonly IntPtr GetPlayerPawn_NativeFunction;
    static readonly int GetPlayerPawn_ParamsSize;
    static readonly int GetPlayerPawn_WorldContextObject_Offset;
    static readonly int GetPlayerPawn_PlayerIndex_Offset;
    static readonly int GetPlayerPawn_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.Pawn GetPlayerPawn(UnrealSharp.CoreUObject.Object worldContextObject, int playerIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayerPawn_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerPawn_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerPawn_PlayerIndex_Offset), 0, null, playerIndex);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlayerPawn_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Pawn returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(ParamsBuffer, GetPlayerPawn_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetPlayerControllerID
    static readonly IntPtr GetPlayerControllerID_NativeFunction;
    static readonly int GetPlayerControllerID_ParamsSize;
    static readonly int GetPlayerControllerID_Player_Offset;
    static readonly int GetPlayerControllerID_ReturnValue_Offset;
    
    public static int GetPlayerControllerID(UnrealSharp.Engine.PlayerController player)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayerControllerID_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerControllerID_Player_Offset), 0, null, player);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlayerControllerID_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetPlayerControllerID_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetPlayerControllerFromPlatformUser
    static readonly IntPtr GetPlayerControllerFromPlatformUser_NativeFunction;
    static readonly int GetPlayerControllerFromPlatformUser_ParamsSize;
    static readonly int GetPlayerControllerFromPlatformUser_WorldContextObject_Offset;
    static readonly int GetPlayerControllerFromPlatformUser_UserId_Offset;
    static readonly int GetPlayerControllerFromPlatformUser_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.PlayerController GetPlayerControllerFromPlatformUser(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.CoreUObject.PlatformUserId userId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayerControllerFromPlatformUser_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerControllerFromPlatformUser_WorldContextObject_Offset), 0, null, worldContextObject);
            UnrealSharp.CoreUObject.PlatformUserIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerControllerFromPlatformUser_UserId_Offset), 0, null, userId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlayerControllerFromPlatformUser_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PlayerController returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(ParamsBuffer, GetPlayerControllerFromPlatformUser_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetPlayerControllerFromID
    static readonly IntPtr GetPlayerControllerFromID_NativeFunction;
    static readonly int GetPlayerControllerFromID_ParamsSize;
    static readonly int GetPlayerControllerFromID_WorldContextObject_Offset;
    static readonly int GetPlayerControllerFromID_ControllerID_Offset;
    static readonly int GetPlayerControllerFromID_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.PlayerController GetPlayerControllerFromID(UnrealSharp.CoreUObject.Object worldContextObject, int controllerID)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayerControllerFromID_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerControllerFromID_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerControllerFromID_ControllerID_Offset), 0, null, controllerID);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlayerControllerFromID_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PlayerController returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(ParamsBuffer, GetPlayerControllerFromID_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetPlayerController
    static readonly IntPtr GetPlayerController_NativeFunction;
    static readonly int GetPlayerController_ParamsSize;
    static readonly int GetPlayerController_WorldContextObject_Offset;
    static readonly int GetPlayerController_PlayerIndex_Offset;
    static readonly int GetPlayerController_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.PlayerController GetPlayerController(UnrealSharp.CoreUObject.Object worldContextObject, int playerIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayerController_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerController_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerController_PlayerIndex_Offset), 0, null, playerIndex);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlayerController_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PlayerController returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(ParamsBuffer, GetPlayerController_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetPlayerCharacter
    static readonly IntPtr GetPlayerCharacter_NativeFunction;
    static readonly int GetPlayerCharacter_ParamsSize;
    static readonly int GetPlayerCharacter_WorldContextObject_Offset;
    static readonly int GetPlayerCharacter_PlayerIndex_Offset;
    static readonly int GetPlayerCharacter_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.Character GetPlayerCharacter(UnrealSharp.CoreUObject.Object worldContextObject, int playerIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayerCharacter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerCharacter_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerCharacter_PlayerIndex_Offset), 0, null, playerIndex);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlayerCharacter_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Character returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Character>.FromNative(IntPtr.Add(ParamsBuffer, GetPlayerCharacter_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetPlayerCameraManager
    static readonly IntPtr GetPlayerCameraManager_NativeFunction;
    static readonly int GetPlayerCameraManager_ParamsSize;
    static readonly int GetPlayerCameraManager_WorldContextObject_Offset;
    static readonly int GetPlayerCameraManager_PlayerIndex_Offset;
    static readonly int GetPlayerCameraManager_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.PlayerCameraManager GetPlayerCameraManager(UnrealSharp.CoreUObject.Object worldContextObject, int playerIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayerCameraManager_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerCameraManager_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerCameraManager_PlayerIndex_Offset), 0, null, playerIndex);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlayerCameraManager_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PlayerCameraManager returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PlayerCameraManager>.FromNative(IntPtr.Add(ParamsBuffer, GetPlayerCameraManager_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetPlatformName
    static readonly IntPtr GetPlatformName_NativeFunction;
    static readonly int GetPlatformName_ParamsSize;
    static readonly int GetPlatformName_ReturnValue_Offset;
    
    public static string GetPlatformName()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlatformName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlatformName_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetPlatformName_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetObjectClass
    static readonly IntPtr GetObjectClass_NativeFunction;
    static readonly int GetObjectClass_ParamsSize;
    static readonly int GetObjectClass_Object_Offset;
    static readonly int GetObjectClass_ReturnValue_Offset;
    
    public static SubclassOf<UnrealSharp.CoreUObject.Object> GetObjectClass(UnrealSharp.CoreUObject.Object @object)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetObjectClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetObjectClass_Object_Offset), 0, null, @object);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetObjectClass_NativeFunction, ParamsBuffer);
            
            SubclassOf<UnrealSharp.CoreUObject.Object> returnValue;
            returnValue = SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetObjectClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetNumPlayerStates
    static readonly IntPtr GetNumPlayerStates_NativeFunction;
    static readonly int GetNumPlayerStates_ParamsSize;
    static readonly int GetNumPlayerStates_WorldContextObject_Offset;
    static readonly int GetNumPlayerStates_ReturnValue_Offset;
    
    public static int GetNumPlayerStates(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumPlayerStates_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetNumPlayerStates_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetNumPlayerStates_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumPlayerStates_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetNumPlayerControllers
    static readonly IntPtr GetNumPlayerControllers_NativeFunction;
    static readonly int GetNumPlayerControllers_ParamsSize;
    static readonly int GetNumPlayerControllers_WorldContextObject_Offset;
    static readonly int GetNumPlayerControllers_ReturnValue_Offset;
    
    public static int GetNumPlayerControllers(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumPlayerControllers_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetNumPlayerControllers_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetNumPlayerControllers_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumPlayerControllers_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetNumLocalPlayerControllers
    static readonly IntPtr GetNumLocalPlayerControllers_NativeFunction;
    static readonly int GetNumLocalPlayerControllers_ParamsSize;
    static readonly int GetNumLocalPlayerControllers_WorldContextObject_Offset;
    static readonly int GetNumLocalPlayerControllers_ReturnValue_Offset;
    
    public static int GetNumLocalPlayerControllers(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumLocalPlayerControllers_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetNumLocalPlayerControllers_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetNumLocalPlayerControllers_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumLocalPlayerControllers_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetMaxAudioChannelCount
    static readonly IntPtr GetMaxAudioChannelCount_NativeFunction;
    static readonly int GetMaxAudioChannelCount_ParamsSize;
    static readonly int GetMaxAudioChannelCount_WorldContextObject_Offset;
    static readonly int GetMaxAudioChannelCount_ReturnValue_Offset;
    
    public static int GetMaxAudioChannelCount(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaxAudioChannelCount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetMaxAudioChannelCount_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMaxAudioChannelCount_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetMaxAudioChannelCount_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetKeyValue
    static readonly IntPtr GetKeyValue_NativeFunction;
    static readonly int GetKeyValue_ParamsSize;
    static readonly int GetKeyValue_Pair_Offset;
    static readonly int GetKeyValue_Key_Offset;
    static readonly int GetKeyValue_Value_Offset;
    
    public static void GetKeyValue(string pair, out string key, out string value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetKeyValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Pair_NativePtr = IntPtr.Add(ParamsBuffer,GetKeyValue_Pair_Offset);
            StringMarshaller.ToNative(Pair_NativePtr,0,null,pair);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetKeyValue_NativeFunction, ParamsBuffer);
            
            IntPtr Key_NativePtr = IntPtr.Add(ParamsBuffer,GetKeyValue_Key_Offset);
            key = StringMarshaller.FromNative(Key_NativePtr,0,null);
            StringMarshaller.DestructInstance(Key_NativePtr, 0);
            IntPtr Value_NativePtr = IntPtr.Add(ParamsBuffer,GetKeyValue_Value_Offset);
            value = StringMarshaller.FromNative(Value_NativePtr,0,null);
            StringMarshaller.DestructInstance(Value_NativePtr, 0);
            
            StringMarshaller.DestructInstance(Pair_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetIntOption
    static readonly IntPtr GetIntOption_NativeFunction;
    static readonly int GetIntOption_ParamsSize;
    static readonly int GetIntOption_Options_Offset;
    static readonly int GetIntOption_Key_Offset;
    static readonly int GetIntOption_DefaultValue_Offset;
    static readonly int GetIntOption_ReturnValue_Offset;
    
    public static int GetIntOption(string options, string key, int defaultValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetIntOption_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Options_NativePtr = IntPtr.Add(ParamsBuffer,GetIntOption_Options_Offset);
            StringMarshaller.ToNative(Options_NativePtr,0,null,options);
            IntPtr Key_NativePtr = IntPtr.Add(ParamsBuffer,GetIntOption_Key_Offset);
            StringMarshaller.ToNative(Key_NativePtr,0,null,key);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetIntOption_DefaultValue_Offset), 0, null, defaultValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetIntOption_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetIntOption_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(Options_NativePtr, 0);
            StringMarshaller.DestructInstance(Key_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetGlobalTimeDilation
    static readonly IntPtr GetGlobalTimeDilation_NativeFunction;
    static readonly int GetGlobalTimeDilation_ParamsSize;
    static readonly int GetGlobalTimeDilation_WorldContextObject_Offset;
    static readonly int GetGlobalTimeDilation_ReturnValue_Offset;
    
    public static float GetGlobalTimeDilation(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGlobalTimeDilation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetGlobalTimeDilation_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetGlobalTimeDilation_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetGlobalTimeDilation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetGameState
    static readonly IntPtr GetGameState_NativeFunction;
    static readonly int GetGameState_ParamsSize;
    static readonly int GetGameState_WorldContextObject_Offset;
    static readonly int GetGameState_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.GameStateBase GetGameState(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGameState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetGameState_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetGameState_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.GameStateBase returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.GameStateBase>.FromNative(IntPtr.Add(ParamsBuffer, GetGameState_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetGameMode
    static readonly IntPtr GetGameMode_NativeFunction;
    static readonly int GetGameMode_ParamsSize;
    static readonly int GetGameMode_WorldContextObject_Offset;
    static readonly int GetGameMode_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.GameModeBase GetGameMode(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGameMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetGameMode_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetGameMode_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.GameModeBase returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.GameModeBase>.FromNative(IntPtr.Add(ParamsBuffer, GetGameMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetGameInstance
    static readonly IntPtr GetGameInstance_NativeFunction;
    static readonly int GetGameInstance_ParamsSize;
    static readonly int GetGameInstance_WorldContextObject_Offset;
    static readonly int GetGameInstance_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.GameInstance GetGameInstance(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGameInstance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetGameInstance_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetGameInstance_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.GameInstance returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.GameInstance>.FromNative(IntPtr.Add(ParamsBuffer, GetGameInstance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetEnableWorldRendering
    static readonly IntPtr GetEnableWorldRendering_NativeFunction;
    static readonly int GetEnableWorldRendering_ParamsSize;
    static readonly int GetEnableWorldRendering_WorldContextObject_Offset;
    static readonly int GetEnableWorldRendering_ReturnValue_Offset;
    
    public static bool GetEnableWorldRendering(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEnableWorldRendering_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetEnableWorldRendering_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetEnableWorldRendering_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetEnableWorldRendering_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetCurrentReverbEffect
    static readonly IntPtr GetCurrentReverbEffect_NativeFunction;
    static readonly int GetCurrentReverbEffect_ParamsSize;
    static readonly int GetCurrentReverbEffect_WorldContextObject_Offset;
    static readonly int GetCurrentReverbEffect_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.ReverbEffect GetCurrentReverbEffect(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentReverbEffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetCurrentReverbEffect_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetCurrentReverbEffect_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.ReverbEffect returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.ReverbEffect>.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentReverbEffect_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetCurrentLevelName
    static readonly IntPtr GetCurrentLevelName_NativeFunction;
    static readonly int GetCurrentLevelName_ParamsSize;
    static readonly int GetCurrentLevelName_WorldContextObject_Offset;
    static readonly int GetCurrentLevelName_bRemovePrefixString_Offset;
    static readonly int GetCurrentLevelName_ReturnValue_Offset;
    
    public static string GetCurrentLevelName(UnrealSharp.CoreUObject.Object worldContextObject, bool bRemovePrefixString = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentLevelName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetCurrentLevelName_WorldContextObject_Offset), 0, null, worldContextObject);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetCurrentLevelName_bRemovePrefixString_Offset), 0, null, bRemovePrefixString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetCurrentLevelName_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetCurrentLevelName_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetClosestListenerLocation
    static readonly IntPtr GetClosestListenerLocation_NativeFunction;
    static readonly int GetClosestListenerLocation_ParamsSize;
    static readonly int GetClosestListenerLocation_WorldContextObject_Offset;
    static readonly int GetClosestListenerLocation_Location_Offset;
    static readonly int GetClosestListenerLocation_MaximumRange_Offset;
    static readonly int GetClosestListenerLocation_bAllowAttenuationOverride_Offset;
    static readonly int GetClosestListenerLocation_ListenerPosition_Offset;
    static readonly int GetClosestListenerLocation_ReturnValue_Offset;
    
    public static bool GetClosestListenerLocation(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 location, float maximumRange, bool bAllowAttenuationOverride, out System.DoubleNumerics.Vector3 listenerPosition)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetClosestListenerLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetClosestListenerLocation_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetClosestListenerLocation_Location_Offset), 0, null, location);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetClosestListenerLocation_MaximumRange_Offset), 0, null, maximumRange);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetClosestListenerLocation_bAllowAttenuationOverride_Offset), 0, null, bAllowAttenuationOverride);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetClosestListenerLocation_NativeFunction, ParamsBuffer);
            
            listenerPosition = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetClosestListenerLocation_ListenerPosition_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetClosestListenerLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetAvailableSpatialPluginNames
    static readonly IntPtr GetAvailableSpatialPluginNames_NativeFunction;
    static readonly int GetAvailableSpatialPluginNames_ParamsSize;
    static readonly int GetAvailableSpatialPluginNames_WorldContextObject_Offset;
    static readonly int GetAvailableSpatialPluginNames_ReturnValue_Offset;
    static readonly int GetAvailableSpatialPluginNames_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<Name> GetAvailableSpatialPluginNames(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAvailableSpatialPluginNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetAvailableSpatialPluginNames_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAvailableSpatialPluginNames_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<Name> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAvailableSpatialPluginNames_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<Name> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetAvailableSpatialPluginNames_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetAudioTimeSeconds
    static readonly IntPtr GetAudioTimeSeconds_NativeFunction;
    static readonly int GetAudioTimeSeconds_ParamsSize;
    static readonly int GetAudioTimeSeconds_WorldContextObject_Offset;
    static readonly int GetAudioTimeSeconds_ReturnValue_Offset;
    
    public static double GetAudioTimeSeconds(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAudioTimeSeconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetAudioTimeSeconds_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAudioTimeSeconds_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, GetAudioTimeSeconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetAllActorsWithTag
    static readonly IntPtr GetAllActorsWithTag_NativeFunction;
    static readonly int GetAllActorsWithTag_ParamsSize;
    static readonly int GetAllActorsWithTag_WorldContextObject_Offset;
    static readonly int GetAllActorsWithTag_Tag_Offset;
    static readonly int GetAllActorsWithTag_OutActors_Offset;
    static readonly int GetAllActorsWithTag_OutActors_ElementSize;
    
    public static void GetAllActorsWithTag(UnrealSharp.CoreUObject.Object worldContextObject, Name tag, out System.Collections.Generic.IList<UnrealSharp.Engine.Actor> outActors)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAllActorsWithTag_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetAllActorsWithTag_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetAllActorsWithTag_Tag_Offset), 0, null, tag);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAllActorsWithTag_NativeFunction, ParamsBuffer);
            
            IntPtr OutActors_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAllActorsWithTag_OutActors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> OutActors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, GetAllActorsWithTag_OutActors_ElementSize);
            outActors = OutActors_Marshaler.FromNative(OutActors_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(OutActors_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetAllActorsWithInterface
    static readonly IntPtr GetAllActorsWithInterface_NativeFunction;
    static readonly int GetAllActorsWithInterface_ParamsSize;
    static readonly int GetAllActorsWithInterface_WorldContextObject_Offset;
    static readonly int GetAllActorsWithInterface_Interface_Offset;
    static readonly int GetAllActorsWithInterface_OutActors_Offset;
    static readonly int GetAllActorsWithInterface_OutActors_ElementSize;
    
    public static void GetAllActorsWithInterface(UnrealSharp.CoreUObject.Object worldContextObject, SubclassOf<UnrealSharp.CoreUObject.IInterface> @interface, out System.Collections.Generic.IList<UnrealSharp.Engine.Actor> outActors)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAllActorsWithInterface_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetAllActorsWithInterface_WorldContextObject_Offset), 0, null, worldContextObject);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.IInterface>.ToNative(IntPtr.Add(ParamsBuffer, GetAllActorsWithInterface_Interface_Offset), 0, null, @interface);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAllActorsWithInterface_NativeFunction, ParamsBuffer);
            
            IntPtr OutActors_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAllActorsWithInterface_OutActors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> OutActors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, GetAllActorsWithInterface_OutActors_ElementSize);
            outActors = OutActors_Marshaler.FromNative(OutActors_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(OutActors_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetAllActorsOfClassWithTag
    static readonly IntPtr GetAllActorsOfClassWithTag_NativeFunction;
    static readonly int GetAllActorsOfClassWithTag_ParamsSize;
    static readonly int GetAllActorsOfClassWithTag_WorldContextObject_Offset;
    static readonly int GetAllActorsOfClassWithTag_ActorClass_Offset;
    static readonly int GetAllActorsOfClassWithTag_Tag_Offset;
    static readonly int GetAllActorsOfClassWithTag_OutActors_Offset;
    static readonly int GetAllActorsOfClassWithTag_OutActors_ElementSize;
    
    public static void GetAllActorsOfClassWithTag(UnrealSharp.CoreUObject.Object worldContextObject, SubclassOf<UnrealSharp.Engine.Actor> actorClass, Name tag, out System.Collections.Generic.IList<UnrealSharp.Engine.Actor> outActors)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAllActorsOfClassWithTag_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetAllActorsOfClassWithTag_WorldContextObject_Offset), 0, null, worldContextObject);
            SubclassOfMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, GetAllActorsOfClassWithTag_ActorClass_Offset), 0, null, actorClass);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetAllActorsOfClassWithTag_Tag_Offset), 0, null, tag);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAllActorsOfClassWithTag_NativeFunction, ParamsBuffer);
            
            IntPtr OutActors_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAllActorsOfClassWithTag_OutActors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> OutActors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, GetAllActorsOfClassWithTag_OutActors_ElementSize);
            outActors = OutActors_Marshaler.FromNative(OutActors_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(OutActors_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetAllActorsOfClass
    static readonly IntPtr GetAllActorsOfClass_NativeFunction;
    static readonly int GetAllActorsOfClass_ParamsSize;
    static readonly int GetAllActorsOfClass_WorldContextObject_Offset;
    static readonly int GetAllActorsOfClass_ActorClass_Offset;
    static readonly int GetAllActorsOfClass_OutActors_Offset;
    static readonly int GetAllActorsOfClass_OutActors_ElementSize;
    
    public static void GetAllActorsOfClass(UnrealSharp.CoreUObject.Object worldContextObject, SubclassOf<UnrealSharp.Engine.Actor> actorClass, out System.Collections.Generic.IList<UnrealSharp.Engine.Actor> outActors)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAllActorsOfClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetAllActorsOfClass_WorldContextObject_Offset), 0, null, worldContextObject);
            SubclassOfMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, GetAllActorsOfClass_ActorClass_Offset), 0, null, actorClass);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAllActorsOfClass_NativeFunction, ParamsBuffer);
            
            IntPtr OutActors_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAllActorsOfClass_OutActors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> OutActors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, GetAllActorsOfClass_OutActors_ElementSize);
            outActors = OutActors_Marshaler.FromNative(OutActors_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(OutActors_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetActorOfClass
    static readonly IntPtr GetActorOfClass_NativeFunction;
    static readonly int GetActorOfClass_ParamsSize;
    static readonly int GetActorOfClass_WorldContextObject_Offset;
    static readonly int GetActorOfClass_ActorClass_Offset;
    static readonly int GetActorOfClass_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.Actor GetActorOfClass(UnrealSharp.CoreUObject.Object worldContextObject, SubclassOf<UnrealSharp.Engine.Actor> actorClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActorOfClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetActorOfClass_WorldContextObject_Offset), 0, null, worldContextObject);
            SubclassOfMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, GetActorOfClass_ActorClass_Offset), 0, null, actorClass);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetActorOfClass_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Actor returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(ParamsBuffer, GetActorOfClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetActorArrayBounds
    static readonly IntPtr GetActorArrayBounds_NativeFunction;
    static readonly int GetActorArrayBounds_ParamsSize;
    static readonly int GetActorArrayBounds_Actors_Offset;
    static readonly int GetActorArrayBounds_Actors_ElementSize;
    static readonly int GetActorArrayBounds_bOnlyCollidingComponents_Offset;
    static readonly int GetActorArrayBounds_Center_Offset;
    static readonly int GetActorArrayBounds_BoxExtent_Offset;
    
    public static void GetActorArrayBounds(System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actors, bool bOnlyCollidingComponents, out System.DoubleNumerics.Vector3 center, out System.DoubleNumerics.Vector3 boxExtent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActorArrayBounds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Actors_NativeBuffer = IntPtr.Add(ParamsBuffer, GetActorArrayBounds_Actors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> Actors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, GetActorArrayBounds_Actors_ElementSize);
            Actors_Marshaler.ToNative(Actors_NativeBuffer, 0, null, actors);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetActorArrayBounds_bOnlyCollidingComponents_Offset), 0, null, bOnlyCollidingComponents);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetActorArrayBounds_NativeFunction, ParamsBuffer);
            
            center = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetActorArrayBounds_Center_Offset), 0, null);
            boxExtent = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetActorArrayBounds_BoxExtent_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetActorArrayAverageLocation
    static readonly IntPtr GetActorArrayAverageLocation_NativeFunction;
    static readonly int GetActorArrayAverageLocation_ParamsSize;
    static readonly int GetActorArrayAverageLocation_Actors_Offset;
    static readonly int GetActorArrayAverageLocation_Actors_ElementSize;
    static readonly int GetActorArrayAverageLocation_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetActorArrayAverageLocation(System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actors)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActorArrayAverageLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Actors_NativeBuffer = IntPtr.Add(ParamsBuffer, GetActorArrayAverageLocation_Actors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> Actors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, GetActorArrayAverageLocation_Actors_ElementSize);
            Actors_Marshaler.ToNative(Actors_NativeBuffer, 0, null, actors);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetActorArrayAverageLocation_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetActorArrayAverageLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetActiveSpatialPluginName
    static readonly IntPtr GetActiveSpatialPluginName_NativeFunction;
    static readonly int GetActiveSpatialPluginName_ParamsSize;
    static readonly int GetActiveSpatialPluginName_WorldContextObject_Offset;
    static readonly int GetActiveSpatialPluginName_ReturnValue_Offset;
    
    public static Name GetActiveSpatialPluginName(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActiveSpatialPluginName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetActiveSpatialPluginName_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetActiveSpatialPluginName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetActiveSpatialPluginName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:GetAccurateRealTime
    static readonly IntPtr GetAccurateRealTime_NativeFunction;
    static readonly int GetAccurateRealTime_ParamsSize;
    static readonly int GetAccurateRealTime_Seconds_Offset;
    static readonly int GetAccurateRealTime_PartialSeconds_Offset;
    
    public static void GetAccurateRealTime(out int seconds, out double partialSeconds)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAccurateRealTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAccurateRealTime_NativeFunction, ParamsBuffer);
            
            seconds = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetAccurateRealTime_Seconds_Offset), 0, null);
            partialSeconds = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, GetAccurateRealTime_PartialSeconds_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:FlushLevelStreaming
    static readonly IntPtr FlushLevelStreaming_NativeFunction;
    static readonly int FlushLevelStreaming_ParamsSize;
    static readonly int FlushLevelStreaming_WorldContextObject_Offset;
    
    public static void FlushLevelStreaming(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FlushLevelStreaming_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, FlushLevelStreaming_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FlushLevelStreaming_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:FindNearestActor
    static readonly IntPtr FindNearestActor_NativeFunction;
    static readonly int FindNearestActor_ParamsSize;
    static readonly int FindNearestActor_Origin_Offset;
    static readonly int FindNearestActor_ActorsToCheck_Offset;
    static readonly int FindNearestActor_ActorsToCheck_ElementSize;
    static readonly int FindNearestActor_Distance_Offset;
    static readonly int FindNearestActor_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.Actor FindNearestActor(System.DoubleNumerics.Vector3 origin, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToCheck, out float distance)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindNearestActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindNearestActor_Origin_Offset), 0, null, origin);
            IntPtr ActorsToCheck_NativeBuffer = IntPtr.Add(ParamsBuffer, FindNearestActor_ActorsToCheck_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToCheck_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, FindNearestActor_ActorsToCheck_ElementSize);
            ActorsToCheck_Marshaler.ToNative(ActorsToCheck_NativeBuffer, 0, null, actorsToCheck);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindNearestActor_NativeFunction, ParamsBuffer);
            
            distance = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, FindNearestActor_Distance_Offset), 0, null);
            UnrealSharp.Engine.Actor returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(ParamsBuffer, FindNearestActor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:FindCollisionUV
    static readonly IntPtr FindCollisionUV_NativeFunction;
    static readonly int FindCollisionUV_ParamsSize;
    static readonly int FindCollisionUV_Hit_Offset;
    static readonly int FindCollisionUV_UVChannel_Offset;
    static readonly int FindCollisionUV_UV_Offset;
    static readonly int FindCollisionUV_ReturnValue_Offset;
    
    public static bool FindCollisionUV(UnrealSharp.Engine.HitResult hit, int uVChannel, out System.DoubleNumerics.Vector2 uV)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindCollisionUV_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.HitResultMarshaler.ToNative(IntPtr.Add(ParamsBuffer, FindCollisionUV_Hit_Offset), 0, null, hit);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, FindCollisionUV_UVChannel_Offset), 0, null, uVChannel);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindCollisionUV_NativeFunction, ParamsBuffer);
            
            uV = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, FindCollisionUV_UV_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, FindCollisionUV_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:EnableLiveStreaming
    static readonly IntPtr EnableLiveStreaming_NativeFunction;
    static readonly int EnableLiveStreaming_ParamsSize;
    static readonly int EnableLiveStreaming_Enable_Offset;
    
    public static void EnableLiveStreaming(bool enable)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EnableLiveStreaming_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, EnableLiveStreaming_Enable_Offset), 0, null, enable);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EnableLiveStreaming_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:DoesSaveGameExist
    static readonly IntPtr DoesSaveGameExist_NativeFunction;
    static readonly int DoesSaveGameExist_ParamsSize;
    static readonly int DoesSaveGameExist_SlotName_Offset;
    static readonly int DoesSaveGameExist_UserIndex_Offset;
    static readonly int DoesSaveGameExist_ReturnValue_Offset;
    
    public static bool DoesSaveGameExist(string slotName, int userIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DoesSaveGameExist_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SlotName_NativePtr = IntPtr.Add(ParamsBuffer,DoesSaveGameExist_SlotName_Offset);
            StringMarshaller.ToNative(SlotName_NativePtr,0,null,slotName);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, DoesSaveGameExist_UserIndex_Offset), 0, null, userIndex);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DoesSaveGameExist_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DoesSaveGameExist_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SlotName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:DeprojectScreenToWorld
    static readonly IntPtr DeprojectScreenToWorld_NativeFunction;
    static readonly int DeprojectScreenToWorld_ParamsSize;
    static readonly int DeprojectScreenToWorld_Player_Offset;
    static readonly int DeprojectScreenToWorld_ScreenPosition_Offset;
    static readonly int DeprojectScreenToWorld_WorldPosition_Offset;
    static readonly int DeprojectScreenToWorld_WorldDirection_Offset;
    static readonly int DeprojectScreenToWorld_ReturnValue_Offset;
    
    public static bool DeprojectScreenToWorld(UnrealSharp.Engine.PlayerController player, System.DoubleNumerics.Vector2 screenPosition, out System.DoubleNumerics.Vector3 worldPosition, out System.DoubleNumerics.Vector3 worldDirection)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeprojectScreenToWorld_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, DeprojectScreenToWorld_Player_Offset), 0, null, player);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DeprojectScreenToWorld_ScreenPosition_Offset), 0, null, screenPosition);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DeprojectScreenToWorld_NativeFunction, ParamsBuffer);
            
            worldPosition = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, DeprojectScreenToWorld_WorldPosition_Offset), 0, null);
            worldDirection = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, DeprojectScreenToWorld_WorldDirection_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DeprojectScreenToWorld_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:DeprojectSceneCaptureToWorld
    static readonly IntPtr DeprojectSceneCaptureToWorld_NativeFunction;
    static readonly int DeprojectSceneCaptureToWorld_ParamsSize;
    static readonly int DeprojectSceneCaptureToWorld_SceneCapture2D_Offset;
    static readonly int DeprojectSceneCaptureToWorld_TargetUV_Offset;
    static readonly int DeprojectSceneCaptureToWorld_WorldPosition_Offset;
    static readonly int DeprojectSceneCaptureToWorld_WorldDirection_Offset;
    static readonly int DeprojectSceneCaptureToWorld_ReturnValue_Offset;
    
    public static bool DeprojectSceneCaptureToWorld(UnrealSharp.Engine.SceneCapture2D sceneCapture2D, System.DoubleNumerics.Vector2 targetUV, out System.DoubleNumerics.Vector3 worldPosition, out System.DoubleNumerics.Vector3 worldDirection)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeprojectSceneCaptureToWorld_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SceneCapture2D>.ToNative(IntPtr.Add(ParamsBuffer, DeprojectSceneCaptureToWorld_SceneCapture2D_Offset), 0, null, sceneCapture2D);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DeprojectSceneCaptureToWorld_TargetUV_Offset), 0, null, targetUV);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DeprojectSceneCaptureToWorld_NativeFunction, ParamsBuffer);
            
            worldPosition = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, DeprojectSceneCaptureToWorld_WorldPosition_Offset), 0, null);
            worldDirection = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, DeprojectSceneCaptureToWorld_WorldDirection_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DeprojectSceneCaptureToWorld_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:DeleteGameInSlot
    static readonly IntPtr DeleteGameInSlot_NativeFunction;
    static readonly int DeleteGameInSlot_ParamsSize;
    static readonly int DeleteGameInSlot_SlotName_Offset;
    static readonly int DeleteGameInSlot_UserIndex_Offset;
    static readonly int DeleteGameInSlot_ReturnValue_Offset;
    
    public static bool DeleteGameInSlot(string slotName, int userIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeleteGameInSlot_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SlotName_NativePtr = IntPtr.Add(ParamsBuffer,DeleteGameInSlot_SlotName_Offset);
            StringMarshaller.ToNative(SlotName_NativePtr,0,null,slotName);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, DeleteGameInSlot_UserIndex_Offset), 0, null, userIndex);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DeleteGameInSlot_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DeleteGameInSlot_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SlotName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:DeactivateReverbEffect
    static readonly IntPtr DeactivateReverbEffect_NativeFunction;
    static readonly int DeactivateReverbEffect_ParamsSize;
    static readonly int DeactivateReverbEffect_WorldContextObject_Offset;
    static readonly int DeactivateReverbEffect_TagName_Offset;
    
    public static void DeactivateReverbEffect(UnrealSharp.CoreUObject.Object worldContextObject, Name tagName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeactivateReverbEffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DeactivateReverbEffect_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, DeactivateReverbEffect_TagName_Offset), 0, null, tagName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DeactivateReverbEffect_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:CreateSound2D
    static readonly IntPtr CreateSound2D_NativeFunction;
    static readonly int CreateSound2D_ParamsSize;
    static readonly int CreateSound2D_WorldContextObject_Offset;
    static readonly int CreateSound2D_Sound_Offset;
    static readonly int CreateSound2D_VolumeMultiplier_Offset;
    static readonly int CreateSound2D_PitchMultiplier_Offset;
    static readonly int CreateSound2D_StartTime_Offset;
    static readonly int CreateSound2D_ConcurrencySettings_Offset;
    static readonly int CreateSound2D_bPersistAcrossLevelTransition_Offset;
    static readonly int CreateSound2D_bAutoDestroy_Offset;
    static readonly int CreateSound2D_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.AudioComponent CreateSound2D(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundBase sound, float volumeMultiplier = 1.000000f, float pitchMultiplier = 1.000000f, float startTime = 0.000000f, UnrealSharp.Engine.SoundConcurrency concurrencySettings = default(UnrealSharp.Engine.SoundConcurrency), bool bPersistAcrossLevelTransition = false, bool bAutoDestroy = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateSound2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CreateSound2D_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundBase>.ToNative(IntPtr.Add(ParamsBuffer, CreateSound2D_Sound_Offset), 0, null, sound);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CreateSound2D_VolumeMultiplier_Offset), 0, null, volumeMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CreateSound2D_PitchMultiplier_Offset), 0, null, pitchMultiplier);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CreateSound2D_StartTime_Offset), 0, null, startTime);
            ObjectMarshaller<UnrealSharp.Engine.SoundConcurrency>.ToNative(IntPtr.Add(ParamsBuffer, CreateSound2D_ConcurrencySettings_Offset), 0, null, concurrencySettings);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CreateSound2D_bPersistAcrossLevelTransition_Offset), 0, null, bPersistAcrossLevelTransition);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CreateSound2D_bAutoDestroy_Offset), 0, null, bAutoDestroy);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateSound2D_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AudioComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AudioComponent>.FromNative(IntPtr.Add(ParamsBuffer, CreateSound2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:CreateSaveGameObject
    static readonly IntPtr CreateSaveGameObject_NativeFunction;
    static readonly int CreateSaveGameObject_ParamsSize;
    static readonly int CreateSaveGameObject_SaveGameClass_Offset;
    static readonly int CreateSaveGameObject_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.SaveGame CreateSaveGameObject(SubclassOf<UnrealSharp.Engine.SaveGame> saveGameClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateSaveGameObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.SaveGame>.ToNative(IntPtr.Add(ParamsBuffer, CreateSaveGameObject_SaveGameClass_Offset), 0, null, saveGameClass);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateSaveGameObject_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.SaveGame returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.SaveGame>.FromNative(IntPtr.Add(ParamsBuffer, CreateSaveGameObject_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:CreatePlayerFromPlatformUser
    static readonly IntPtr CreatePlayerFromPlatformUser_NativeFunction;
    static readonly int CreatePlayerFromPlatformUser_ParamsSize;
    static readonly int CreatePlayerFromPlatformUser_WorldContextObject_Offset;
    static readonly int CreatePlayerFromPlatformUser_UserId_Offset;
    static readonly int CreatePlayerFromPlatformUser_bSpawnPlayerController_Offset;
    static readonly int CreatePlayerFromPlatformUser_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.PlayerController CreatePlayerFromPlatformUser(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.CoreUObject.PlatformUserId userId, bool bSpawnPlayerController = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreatePlayerFromPlatformUser_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CreatePlayerFromPlatformUser_WorldContextObject_Offset), 0, null, worldContextObject);
            UnrealSharp.CoreUObject.PlatformUserIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, CreatePlayerFromPlatformUser_UserId_Offset), 0, null, userId);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CreatePlayerFromPlatformUser_bSpawnPlayerController_Offset), 0, null, bSpawnPlayerController);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreatePlayerFromPlatformUser_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PlayerController returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(ParamsBuffer, CreatePlayerFromPlatformUser_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:CreatePlayer
    static readonly IntPtr CreatePlayer_NativeFunction;
    static readonly int CreatePlayer_ParamsSize;
    static readonly int CreatePlayer_WorldContextObject_Offset;
    static readonly int CreatePlayer_ControllerId_Offset;
    static readonly int CreatePlayer_bSpawnPlayerController_Offset;
    static readonly int CreatePlayer_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.PlayerController CreatePlayer(UnrealSharp.CoreUObject.Object worldContextObject, int controllerId = -1, bool bSpawnPlayerController = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreatePlayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CreatePlayer_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreatePlayer_ControllerId_Offset), 0, null, controllerId);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CreatePlayer_bSpawnPlayerController_Offset), 0, null, bSpawnPlayerController);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreatePlayer_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PlayerController returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(ParamsBuffer, CreatePlayer_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:ClearSoundMixModifiers
    static readonly IntPtr ClearSoundMixModifiers_NativeFunction;
    static readonly int ClearSoundMixModifiers_ParamsSize;
    static readonly int ClearSoundMixModifiers_WorldContextObject_Offset;
    
    public static void ClearSoundMixModifiers(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClearSoundMixModifiers_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ClearSoundMixModifiers_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ClearSoundMixModifiers_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:ClearSoundMixClassOverride
    static readonly IntPtr ClearSoundMixClassOverride_NativeFunction;
    static readonly int ClearSoundMixClassOverride_ParamsSize;
    static readonly int ClearSoundMixClassOverride_WorldContextObject_Offset;
    static readonly int ClearSoundMixClassOverride_InSoundMixModifier_Offset;
    static readonly int ClearSoundMixClassOverride_InSoundClass_Offset;
    static readonly int ClearSoundMixClassOverride_FadeOutTime_Offset;
    
    public static void ClearSoundMixClassOverride(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.SoundMix inSoundMixModifier, UnrealSharp.Engine.SoundClass inSoundClass, float fadeOutTime = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClearSoundMixClassOverride_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ClearSoundMixClassOverride_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.SoundMix>.ToNative(IntPtr.Add(ParamsBuffer, ClearSoundMixClassOverride_InSoundMixModifier_Offset), 0, null, inSoundMixModifier);
            ObjectMarshaller<UnrealSharp.Engine.SoundClass>.ToNative(IntPtr.Add(ParamsBuffer, ClearSoundMixClassOverride_InSoundClass_Offset), 0, null, inSoundClass);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ClearSoundMixClassOverride_FadeOutTime_Offset), 0, null, fadeOutTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ClearSoundMixClassOverride_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.GameplayStatics:CancelAsyncLoading
    static readonly IntPtr CancelAsyncLoading_NativeFunction;
    
    public static void CancelAsyncLoading()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CancelAsyncLoading_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.GameplayStatics:BlueprintSuggestProjectileVelocity
    static readonly IntPtr BlueprintSuggestProjectileVelocity_NativeFunction;
    static readonly int BlueprintSuggestProjectileVelocity_ParamsSize;
    static readonly int BlueprintSuggestProjectileVelocity_WorldContextObject_Offset;
    static readonly int BlueprintSuggestProjectileVelocity_TossVelocity_Offset;
    static readonly int BlueprintSuggestProjectileVelocity_StartLocation_Offset;
    static readonly int BlueprintSuggestProjectileVelocity_EndLocation_Offset;
    static readonly int BlueprintSuggestProjectileVelocity_LaunchSpeed_Offset;
    static readonly int BlueprintSuggestProjectileVelocity_OverrideGravityZ_Offset;
    static readonly int BlueprintSuggestProjectileVelocity_TraceOption_Offset;
    static readonly int BlueprintSuggestProjectileVelocity_CollisionRadius_Offset;
    static readonly int BlueprintSuggestProjectileVelocity_bFavorHighArc_Offset;
    static readonly int BlueprintSuggestProjectileVelocity_bDrawDebug_Offset;
    static readonly int BlueprintSuggestProjectileVelocity_ReturnValue_Offset;
    
    public static bool BlueprintSuggestProjectileVelocity(UnrealSharp.CoreUObject.Object worldContextObject, out System.DoubleNumerics.Vector3 tossVelocity, System.DoubleNumerics.Vector3 startLocation, System.DoubleNumerics.Vector3 endLocation, float launchSpeed, float overrideGravityZ, UnrealSharp.Engine.ESuggestProjVelocityTraceOption traceOption, float collisionRadius, bool bFavorHighArc, bool bDrawDebug)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BlueprintSuggestProjectileVelocity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, BlueprintSuggestProjectileVelocity_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BlueprintSuggestProjectileVelocity_StartLocation_Offset), 0, null, startLocation);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BlueprintSuggestProjectileVelocity_EndLocation_Offset), 0, null, endLocation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, BlueprintSuggestProjectileVelocity_LaunchSpeed_Offset), 0, null, launchSpeed);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, BlueprintSuggestProjectileVelocity_OverrideGravityZ_Offset), 0, null, overrideGravityZ);
            BlittableMarshaller<UnrealSharp.Engine.ESuggestProjVelocityTraceOption>.ToNative(IntPtr.Add(ParamsBuffer, BlueprintSuggestProjectileVelocity_TraceOption_Offset), 0, null, traceOption);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, BlueprintSuggestProjectileVelocity_CollisionRadius_Offset), 0, null, collisionRadius);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BlueprintSuggestProjectileVelocity_bFavorHighArc_Offset), 0, null, bFavorHighArc);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BlueprintSuggestProjectileVelocity_bDrawDebug_Offset), 0, null, bDrawDebug);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BlueprintSuggestProjectileVelocity_NativeFunction, ParamsBuffer);
            
            tossVelocity = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, BlueprintSuggestProjectileVelocity_TossVelocity_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BlueprintSuggestProjectileVelocity_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:Blueprint_PredictProjectilePath_ByTraceChannel
    static readonly IntPtr Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction;
    static readonly int Blueprint_PredictProjectilePath_ByTraceChannel_ParamsSize;
    static readonly int Blueprint_PredictProjectilePath_ByTraceChannel_WorldContextObject_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByTraceChannel_OutHit_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByTraceChannel_OutPathPositions_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByTraceChannel_OutPathPositions_ElementSize;
    static readonly int Blueprint_PredictProjectilePath_ByTraceChannel_OutLastTraceDestination_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByTraceChannel_StartPos_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByTraceChannel_LaunchVelocity_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByTraceChannel_bTracePath_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByTraceChannel_ProjectileRadius_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByTraceChannel_TraceChannel_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByTraceChannel_bTraceComplex_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByTraceChannel_ActorsToIgnore_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByTraceChannel_ActorsToIgnore_ElementSize;
    static readonly int Blueprint_PredictProjectilePath_ByTraceChannel_DrawDebugType_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByTraceChannel_DrawDebugTime_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByTraceChannel_SimFrequency_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByTraceChannel_MaxSimTime_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByTraceChannel_OverrideGravityZ_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByTraceChannel_ReturnValue_Offset;
    
    public static bool Blueprint_PredictProjectilePath_ByTraceChannel(UnrealSharp.CoreUObject.Object worldContextObject, out UnrealSharp.Engine.HitResult outHit, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> outPathPositions, out System.DoubleNumerics.Vector3 outLastTraceDestination, System.DoubleNumerics.Vector3 startPos, System.DoubleNumerics.Vector3 launchVelocity, bool bTracePath, float projectileRadius, UnrealSharp.Engine.ECollisionChannel traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, float drawDebugTime, float simFrequency = 15.000000f, float maxSimTime = 2.000000f, float overrideGravityZ = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Blueprint_PredictProjectilePath_ByTraceChannel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByTraceChannel_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByTraceChannel_StartPos_Offset), 0, null, startPos);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByTraceChannel_LaunchVelocity_Offset), 0, null, launchVelocity);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByTraceChannel_bTracePath_Offset), 0, null, bTracePath);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByTraceChannel_ProjectileRadius_Offset), 0, null, projectileRadius);
            BlittableMarshaller<UnrealSharp.Engine.ECollisionChannel>.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByTraceChannel_TraceChannel_Offset), 0, null, traceChannel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByTraceChannel_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByTraceChannel_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, Blueprint_PredictProjectilePath_ByTraceChannel_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByTraceChannel_DrawDebugType_Offset), 0, null, drawDebugType);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByTraceChannel_DrawDebugTime_Offset), 0, null, drawDebugTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByTraceChannel_SimFrequency_Offset), 0, null, simFrequency);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByTraceChannel_MaxSimTime_Offset), 0, null, maxSimTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByTraceChannel_OverrideGravityZ_Offset), 0, null, overrideGravityZ);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Blueprint_PredictProjectilePath_ByTraceChannel_NativeFunction, ParamsBuffer);
            
            outHit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByTraceChannel_OutHit_Offset), 0, null);
            IntPtr OutPathPositions_NativeBuffer = IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByTraceChannel_OutPathPositions_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> OutPathPositions_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, Blueprint_PredictProjectilePath_ByTraceChannel_OutPathPositions_ElementSize);
            outPathPositions = OutPathPositions_Marshaler.FromNative(OutPathPositions_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(OutPathPositions_NativeBuffer, 0);
            outLastTraceDestination = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByTraceChannel_OutLastTraceDestination_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByTraceChannel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:Blueprint_PredictProjectilePath_ByObjectType
    static readonly IntPtr Blueprint_PredictProjectilePath_ByObjectType_NativeFunction;
    static readonly int Blueprint_PredictProjectilePath_ByObjectType_ParamsSize;
    static readonly int Blueprint_PredictProjectilePath_ByObjectType_WorldContextObject_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByObjectType_OutHit_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByObjectType_OutPathPositions_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByObjectType_OutPathPositions_ElementSize;
    static readonly int Blueprint_PredictProjectilePath_ByObjectType_OutLastTraceDestination_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByObjectType_StartPos_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByObjectType_LaunchVelocity_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByObjectType_bTracePath_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByObjectType_ProjectileRadius_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByObjectType_ObjectTypes_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByObjectType_ObjectTypes_ElementSize;
    static readonly int Blueprint_PredictProjectilePath_ByObjectType_bTraceComplex_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByObjectType_ActorsToIgnore_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByObjectType_ActorsToIgnore_ElementSize;
    static readonly int Blueprint_PredictProjectilePath_ByObjectType_DrawDebugType_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByObjectType_DrawDebugTime_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByObjectType_SimFrequency_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByObjectType_MaxSimTime_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByObjectType_OverrideGravityZ_Offset;
    static readonly int Blueprint_PredictProjectilePath_ByObjectType_ReturnValue_Offset;
    
    public static bool Blueprint_PredictProjectilePath_ByObjectType(UnrealSharp.CoreUObject.Object worldContextObject, out UnrealSharp.Engine.HitResult outHit, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> outPathPositions, out System.DoubleNumerics.Vector3 outLastTraceDestination, System.DoubleNumerics.Vector3 startPos, System.DoubleNumerics.Vector3 launchVelocity, bool bTracePath, float projectileRadius, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, float drawDebugTime, float simFrequency = 15.000000f, float maxSimTime = 2.000000f, float overrideGravityZ = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Blueprint_PredictProjectilePath_ByObjectType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByObjectType_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByObjectType_StartPos_Offset), 0, null, startPos);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByObjectType_LaunchVelocity_Offset), 0, null, launchVelocity);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByObjectType_bTracePath_Offset), 0, null, bTracePath);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByObjectType_ProjectileRadius_Offset), 0, null, projectileRadius);
            IntPtr ObjectTypes_NativeBuffer = IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByObjectType_ObjectTypes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery> ObjectTypes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery>(1, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.ToNative, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.FromNative, Blueprint_PredictProjectilePath_ByObjectType_ObjectTypes_ElementSize);
            ObjectTypes_Marshaler.ToNative(ObjectTypes_NativeBuffer, 0, null, objectTypes);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByObjectType_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByObjectType_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, Blueprint_PredictProjectilePath_ByObjectType_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByObjectType_DrawDebugType_Offset), 0, null, drawDebugType);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByObjectType_DrawDebugTime_Offset), 0, null, drawDebugTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByObjectType_SimFrequency_Offset), 0, null, simFrequency);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByObjectType_MaxSimTime_Offset), 0, null, maxSimTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByObjectType_OverrideGravityZ_Offset), 0, null, overrideGravityZ);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Blueprint_PredictProjectilePath_ByObjectType_NativeFunction, ParamsBuffer);
            
            outHit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByObjectType_OutHit_Offset), 0, null);
            IntPtr OutPathPositions_NativeBuffer = IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByObjectType_OutPathPositions_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> OutPathPositions_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, Blueprint_PredictProjectilePath_ByObjectType_OutPathPositions_ElementSize);
            outPathPositions = OutPathPositions_Marshaler.FromNative(OutPathPositions_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(OutPathPositions_NativeBuffer, 0);
            outLastTraceDestination = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByObjectType_OutLastTraceDestination_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_ByObjectType_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:Blueprint_PredictProjectilePath_Advanced
    static readonly IntPtr Blueprint_PredictProjectilePath_Advanced_NativeFunction;
    static readonly int Blueprint_PredictProjectilePath_Advanced_ParamsSize;
    static readonly int Blueprint_PredictProjectilePath_Advanced_WorldContextObject_Offset;
    static readonly int Blueprint_PredictProjectilePath_Advanced_PredictParams_Offset;
    static readonly int Blueprint_PredictProjectilePath_Advanced_PredictResult_Offset;
    static readonly int Blueprint_PredictProjectilePath_Advanced_ReturnValue_Offset;
    
    public static bool Blueprint_PredictProjectilePath_Advanced(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.PredictProjectilePathParams predictParams, out UnrealSharp.Engine.PredictProjectilePathResult predictResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Blueprint_PredictProjectilePath_Advanced_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_Advanced_WorldContextObject_Offset), 0, null, worldContextObject);
            UnrealSharp.Engine.PredictProjectilePathParamsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_Advanced_PredictParams_Offset), 0, null, predictParams);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Blueprint_PredictProjectilePath_Advanced_NativeFunction, ParamsBuffer);
            
            predictResult = UnrealSharp.Engine.PredictProjectilePathResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_Advanced_PredictResult_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Blueprint_PredictProjectilePath_Advanced_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:AreSubtitlesEnabled
    static readonly IntPtr AreSubtitlesEnabled_NativeFunction;
    static readonly int AreSubtitlesEnabled_ParamsSize;
    static readonly int AreSubtitlesEnabled_ReturnValue_Offset;
    
    public static bool AreSubtitlesEnabled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AreSubtitlesEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AreSubtitlesEnabled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AreSubtitlesEnabled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:AreAnyListenersWithinRange
    static readonly IntPtr AreAnyListenersWithinRange_NativeFunction;
    static readonly int AreAnyListenersWithinRange_ParamsSize;
    static readonly int AreAnyListenersWithinRange_WorldContextObject_Offset;
    static readonly int AreAnyListenersWithinRange_Location_Offset;
    static readonly int AreAnyListenersWithinRange_MaximumRange_Offset;
    static readonly int AreAnyListenersWithinRange_ReturnValue_Offset;
    
    public static bool AreAnyListenersWithinRange(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 location, float maximumRange)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AreAnyListenersWithinRange_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AreAnyListenersWithinRange_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AreAnyListenersWithinRange_Location_Offset), 0, null, location);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AreAnyListenersWithinRange_MaximumRange_Offset), 0, null, maximumRange);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AreAnyListenersWithinRange_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AreAnyListenersWithinRange_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:ApplyRadialDamageWithFalloff
    static readonly IntPtr ApplyRadialDamageWithFalloff_NativeFunction;
    static readonly int ApplyRadialDamageWithFalloff_ParamsSize;
    static readonly int ApplyRadialDamageWithFalloff_WorldContextObject_Offset;
    static readonly int ApplyRadialDamageWithFalloff_BaseDamage_Offset;
    static readonly int ApplyRadialDamageWithFalloff_MinimumDamage_Offset;
    static readonly int ApplyRadialDamageWithFalloff_Origin_Offset;
    static readonly int ApplyRadialDamageWithFalloff_DamageInnerRadius_Offset;
    static readonly int ApplyRadialDamageWithFalloff_DamageOuterRadius_Offset;
    static readonly int ApplyRadialDamageWithFalloff_DamageFalloff_Offset;
    static readonly int ApplyRadialDamageWithFalloff_DamageTypeClass_Offset;
    static readonly int ApplyRadialDamageWithFalloff_IgnoreActors_Offset;
    static readonly int ApplyRadialDamageWithFalloff_IgnoreActors_ElementSize;
    static readonly int ApplyRadialDamageWithFalloff_DamageCauser_Offset;
    static readonly int ApplyRadialDamageWithFalloff_InstigatedByController_Offset;
    static readonly int ApplyRadialDamageWithFalloff_DamagePreventionChannel_Offset;
    static readonly int ApplyRadialDamageWithFalloff_ReturnValue_Offset;
    
    public static bool ApplyRadialDamageWithFalloff(UnrealSharp.CoreUObject.Object worldContextObject, float baseDamage, float minimumDamage, System.DoubleNumerics.Vector3 origin, float damageInnerRadius, float damageOuterRadius, float damageFalloff, SubclassOf<UnrealSharp.Engine.DamageType> damageTypeClass, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> ignoreActors, UnrealSharp.Engine.Actor damageCauser = default(UnrealSharp.Engine.Actor), UnrealSharp.Engine.Controller instigatedByController = default(UnrealSharp.Engine.Controller), UnrealSharp.Engine.ECollisionChannel damagePreventionChannel = UnrealSharp.Engine.ECollisionChannel.ECC_Visibility)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ApplyRadialDamageWithFalloff_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamageWithFalloff_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamageWithFalloff_BaseDamage_Offset), 0, null, baseDamage);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamageWithFalloff_MinimumDamage_Offset), 0, null, minimumDamage);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamageWithFalloff_Origin_Offset), 0, null, origin);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamageWithFalloff_DamageInnerRadius_Offset), 0, null, damageInnerRadius);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamageWithFalloff_DamageOuterRadius_Offset), 0, null, damageOuterRadius);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamageWithFalloff_DamageFalloff_Offset), 0, null, damageFalloff);
            SubclassOfMarshaller<UnrealSharp.Engine.DamageType>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamageWithFalloff_DamageTypeClass_Offset), 0, null, damageTypeClass);
            IntPtr IgnoreActors_NativeBuffer = IntPtr.Add(ParamsBuffer, ApplyRadialDamageWithFalloff_IgnoreActors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> IgnoreActors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, ApplyRadialDamageWithFalloff_IgnoreActors_ElementSize);
            IgnoreActors_Marshaler.ToNative(IgnoreActors_NativeBuffer, 0, null, ignoreActors);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamageWithFalloff_DamageCauser_Offset), 0, null, damageCauser);
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamageWithFalloff_InstigatedByController_Offset), 0, null, instigatedByController);
            BlittableMarshaller<UnrealSharp.Engine.ECollisionChannel>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamageWithFalloff_DamagePreventionChannel_Offset), 0, null, damagePreventionChannel);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ApplyRadialDamageWithFalloff_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamageWithFalloff_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:ApplyRadialDamage
    static readonly IntPtr ApplyRadialDamage_NativeFunction;
    static readonly int ApplyRadialDamage_ParamsSize;
    static readonly int ApplyRadialDamage_WorldContextObject_Offset;
    static readonly int ApplyRadialDamage_BaseDamage_Offset;
    static readonly int ApplyRadialDamage_Origin_Offset;
    static readonly int ApplyRadialDamage_DamageRadius_Offset;
    static readonly int ApplyRadialDamage_DamageTypeClass_Offset;
    static readonly int ApplyRadialDamage_IgnoreActors_Offset;
    static readonly int ApplyRadialDamage_IgnoreActors_ElementSize;
    static readonly int ApplyRadialDamage_DamageCauser_Offset;
    static readonly int ApplyRadialDamage_InstigatedByController_Offset;
    static readonly int ApplyRadialDamage_bDoFullDamage_Offset;
    static readonly int ApplyRadialDamage_DamagePreventionChannel_Offset;
    static readonly int ApplyRadialDamage_ReturnValue_Offset;
    
    public static bool ApplyRadialDamage(UnrealSharp.CoreUObject.Object worldContextObject, float baseDamage, System.DoubleNumerics.Vector3 origin, float damageRadius, SubclassOf<UnrealSharp.Engine.DamageType> damageTypeClass, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> ignoreActors, UnrealSharp.Engine.Actor damageCauser = default(UnrealSharp.Engine.Actor), UnrealSharp.Engine.Controller instigatedByController = default(UnrealSharp.Engine.Controller), bool bDoFullDamage = false, UnrealSharp.Engine.ECollisionChannel damagePreventionChannel = UnrealSharp.Engine.ECollisionChannel.ECC_Visibility)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ApplyRadialDamage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamage_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamage_BaseDamage_Offset), 0, null, baseDamage);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamage_Origin_Offset), 0, null, origin);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamage_DamageRadius_Offset), 0, null, damageRadius);
            SubclassOfMarshaller<UnrealSharp.Engine.DamageType>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamage_DamageTypeClass_Offset), 0, null, damageTypeClass);
            IntPtr IgnoreActors_NativeBuffer = IntPtr.Add(ParamsBuffer, ApplyRadialDamage_IgnoreActors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> IgnoreActors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, ApplyRadialDamage_IgnoreActors_ElementSize);
            IgnoreActors_Marshaler.ToNative(IgnoreActors_NativeBuffer, 0, null, ignoreActors);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamage_DamageCauser_Offset), 0, null, damageCauser);
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamage_InstigatedByController_Offset), 0, null, instigatedByController);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamage_bDoFullDamage_Offset), 0, null, bDoFullDamage);
            BlittableMarshaller<UnrealSharp.Engine.ECollisionChannel>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamage_DamagePreventionChannel_Offset), 0, null, damagePreventionChannel);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ApplyRadialDamage_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ApplyRadialDamage_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:ApplyPointDamage
    static readonly IntPtr ApplyPointDamage_NativeFunction;
    static readonly int ApplyPointDamage_ParamsSize;
    static readonly int ApplyPointDamage_DamagedActor_Offset;
    static readonly int ApplyPointDamage_BaseDamage_Offset;
    static readonly int ApplyPointDamage_HitFromDirection_Offset;
    static readonly int ApplyPointDamage_HitInfo_Offset;
    static readonly int ApplyPointDamage_EventInstigator_Offset;
    static readonly int ApplyPointDamage_DamageCauser_Offset;
    static readonly int ApplyPointDamage_DamageTypeClass_Offset;
    static readonly int ApplyPointDamage_ReturnValue_Offset;
    
    public static float ApplyPointDamage(UnrealSharp.Engine.Actor damagedActor, float baseDamage, System.DoubleNumerics.Vector3 hitFromDirection, UnrealSharp.Engine.HitResult hitInfo, UnrealSharp.Engine.Controller eventInstigator, UnrealSharp.Engine.Actor damageCauser, SubclassOf<UnrealSharp.Engine.DamageType> damageTypeClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ApplyPointDamage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ApplyPointDamage_DamagedActor_Offset), 0, null, damagedActor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyPointDamage_BaseDamage_Offset), 0, null, baseDamage);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ApplyPointDamage_HitFromDirection_Offset), 0, null, hitFromDirection);
            UnrealSharp.Engine.HitResultMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ApplyPointDamage_HitInfo_Offset), 0, null, hitInfo);
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, ApplyPointDamage_EventInstigator_Offset), 0, null, eventInstigator);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ApplyPointDamage_DamageCauser_Offset), 0, null, damageCauser);
            SubclassOfMarshaller<UnrealSharp.Engine.DamageType>.ToNative(IntPtr.Add(ParamsBuffer, ApplyPointDamage_DamageTypeClass_Offset), 0, null, damageTypeClass);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ApplyPointDamage_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, ApplyPointDamage_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:ApplyDamage
    static readonly IntPtr ApplyDamage_NativeFunction;
    static readonly int ApplyDamage_ParamsSize;
    static readonly int ApplyDamage_DamagedActor_Offset;
    static readonly int ApplyDamage_BaseDamage_Offset;
    static readonly int ApplyDamage_EventInstigator_Offset;
    static readonly int ApplyDamage_DamageCauser_Offset;
    static readonly int ApplyDamage_DamageTypeClass_Offset;
    static readonly int ApplyDamage_ReturnValue_Offset;
    
    public static float ApplyDamage(UnrealSharp.Engine.Actor damagedActor, float baseDamage, UnrealSharp.Engine.Controller eventInstigator, UnrealSharp.Engine.Actor damageCauser, SubclassOf<UnrealSharp.Engine.DamageType> damageTypeClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ApplyDamage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ApplyDamage_DamagedActor_Offset), 0, null, damagedActor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyDamage_BaseDamage_Offset), 0, null, baseDamage);
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, ApplyDamage_EventInstigator_Offset), 0, null, eventInstigator);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ApplyDamage_DamageCauser_Offset), 0, null, damageCauser);
            SubclassOfMarshaller<UnrealSharp.Engine.DamageType>.ToNative(IntPtr.Add(ParamsBuffer, ApplyDamage_DamageTypeClass_Offset), 0, null, damageTypeClass);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ApplyDamage_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, ApplyDamage_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.GameplayStatics:AnnounceAccessibleString
    static readonly IntPtr AnnounceAccessibleString_NativeFunction;
    static readonly int AnnounceAccessibleString_ParamsSize;
    static readonly int AnnounceAccessibleString_AnnouncementString_Offset;
    
    public static void AnnounceAccessibleString(string announcementString)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AnnounceAccessibleString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AnnouncementString_NativePtr = IntPtr.Add(ParamsBuffer,AnnounceAccessibleString_AnnouncementString_Offset);
            StringMarshaller.ToNative(AnnouncementString_NativePtr,0,null,announcementString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AnnounceAccessibleString_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(AnnouncementString_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.GameplayStatics:ActivateReverbEffect
    static readonly IntPtr ActivateReverbEffect_NativeFunction;
    static readonly int ActivateReverbEffect_ParamsSize;
    static readonly int ActivateReverbEffect_WorldContextObject_Offset;
    static readonly int ActivateReverbEffect_ReverbEffect_Offset;
    static readonly int ActivateReverbEffect_TagName_Offset;
    static readonly int ActivateReverbEffect_Priority_Offset;
    static readonly int ActivateReverbEffect_Volume_Offset;
    static readonly int ActivateReverbEffect_FadeTime_Offset;
    
    public static void ActivateReverbEffect(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.ReverbEffect reverbEffect, Name tagName, float priority = 0.000000f, float volume = 0.500000f, float fadeTime = 2.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ActivateReverbEffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ActivateReverbEffect_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.ReverbEffect>.ToNative(IntPtr.Add(ParamsBuffer, ActivateReverbEffect_ReverbEffect_Offset), 0, null, reverbEffect);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ActivateReverbEffect_TagName_Offset), 0, null, tagName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ActivateReverbEffect_Priority_Offset), 0, null, priority);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ActivateReverbEffect_Volume_Offset), 0, null, volume);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ActivateReverbEffect_FadeTime_Offset), 0, null, fadeTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ActivateReverbEffect_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
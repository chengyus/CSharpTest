// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class HUD : UnrealSharp.Engine.Actor
{
    
    static HUD()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("HUD");
        
        PlayerOwner_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PlayerOwner");
        bLostFocusPaused_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bLostFocusPaused");
        bLostFocusPaused_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bLostFocusPaused");
        bShowHUD_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bShowHUD");
        bShowHUD_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bShowHUD");
        bShowDebugInfo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bShowDebugInfo");
        bShowDebugInfo_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bShowDebugInfo");
        bShowHitBoxDebugInfo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bShowHitBoxDebugInfo");
        bShowHitBoxDebugInfo_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bShowHitBoxDebugInfo");
        bShowOverlays_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bShowOverlays");
        bShowOverlays_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bShowOverlays");
        bEnableDebugTextShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableDebugTextShadow");
        bEnableDebugTextShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableDebugTextShadow");
        
        Project_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Project");
        Project_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Project_NativeFunction);
        Project_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Project_NativeFunction, "Location");
        Project_bClampToZeroPlane_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Project_NativeFunction, "bClampToZeroPlane");
        Project_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Project_NativeFunction, "ReturnValue");
        GetTextSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTextSize");
        GetTextSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTextSize_NativeFunction);
        GetTextSize_Text_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTextSize_NativeFunction, "Text");
        GetTextSize_OutWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTextSize_NativeFunction, "OutWidth");
        GetTextSize_OutHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTextSize_NativeFunction, "OutHeight");
        GetTextSize_Font_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTextSize_NativeFunction, "Font");
        GetTextSize_Scale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTextSize_NativeFunction, "Scale");
        GetOwningPlayerController_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOwningPlayerController");
        GetOwningPlayerController_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOwningPlayerController_NativeFunction);
        GetOwningPlayerController_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOwningPlayerController_NativeFunction, "ReturnValue");
        GetOwningPawn_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOwningPawn");
        GetOwningPawn_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOwningPawn_NativeFunction);
        GetOwningPawn_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOwningPawn_NativeFunction, "ReturnValue");
        GetActorsInSelectionRectangle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActorsInSelectionRectangle");
        GetActorsInSelectionRectangle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActorsInSelectionRectangle_NativeFunction);
        GetActorsInSelectionRectangle_ClassFilter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorsInSelectionRectangle_NativeFunction, "ClassFilter");
        GetActorsInSelectionRectangle_FirstPoint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorsInSelectionRectangle_NativeFunction, "FirstPoint");
        GetActorsInSelectionRectangle_SecondPoint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorsInSelectionRectangle_NativeFunction, "SecondPoint");
        GetActorsInSelectionRectangle_OutActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorsInSelectionRectangle_NativeFunction, "OutActors");
        GetActorsInSelectionRectangle_OutActors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetActorsInSelectionRectangle_NativeFunction, "OutActors");
        GetActorsInSelectionRectangle_bIncludeNonCollidingComponents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorsInSelectionRectangle_NativeFunction, "bIncludeNonCollidingComponents");
        GetActorsInSelectionRectangle_bActorMustBeFullyEnclosed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorsInSelectionRectangle_NativeFunction, "bActorMustBeFullyEnclosed");
        DrawTextureSimple_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawTextureSimple");
        DrawTextureSimple_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawTextureSimple_NativeFunction);
        DrawTextureSimple_Texture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawTextureSimple_NativeFunction, "Texture");
        DrawTextureSimple_ScreenX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawTextureSimple_NativeFunction, "ScreenX");
        DrawTextureSimple_ScreenY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawTextureSimple_NativeFunction, "ScreenY");
        DrawTextureSimple_Scale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawTextureSimple_NativeFunction, "Scale");
        DrawTextureSimple_bScalePosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawTextureSimple_NativeFunction, "bScalePosition");
        DrawTexture_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawTexture");
        DrawTexture_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawTexture_NativeFunction);
        DrawTexture_Texture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawTexture_NativeFunction, "Texture");
        DrawTexture_ScreenX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawTexture_NativeFunction, "ScreenX");
        DrawTexture_ScreenY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawTexture_NativeFunction, "ScreenY");
        DrawTexture_ScreenW_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawTexture_NativeFunction, "ScreenW");
        DrawTexture_ScreenH_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawTexture_NativeFunction, "ScreenH");
        DrawTexture_TextureU_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawTexture_NativeFunction, "TextureU");
        DrawTexture_TextureV_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawTexture_NativeFunction, "TextureV");
        DrawTexture_TextureUWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawTexture_NativeFunction, "TextureUWidth");
        DrawTexture_TextureVHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawTexture_NativeFunction, "TextureVHeight");
        DrawTexture_TintColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawTexture_NativeFunction, "TintColor");
        DrawTexture_BlendMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawTexture_NativeFunction, "BlendMode");
        DrawTexture_Scale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawTexture_NativeFunction, "Scale");
        DrawTexture_bScalePosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawTexture_NativeFunction, "bScalePosition");
        DrawTexture_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawTexture_NativeFunction, "Rotation");
        DrawTexture_RotPivot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawTexture_NativeFunction, "RotPivot");
        DrawText_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawText");
        DrawText_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawText_NativeFunction);
        DrawText_Text_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawText_NativeFunction, "Text");
        DrawText_TextColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawText_NativeFunction, "TextColor");
        DrawText_ScreenX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawText_NativeFunction, "ScreenX");
        DrawText_ScreenY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawText_NativeFunction, "ScreenY");
        DrawText_Font_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawText_NativeFunction, "Font");
        DrawText_Scale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawText_NativeFunction, "Scale");
        DrawText_bScalePosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawText_NativeFunction, "bScalePosition");
        DrawRect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawRect");
        DrawRect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawRect_NativeFunction);
        DrawRect_RectColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawRect_NativeFunction, "RectColor");
        DrawRect_ScreenX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawRect_NativeFunction, "ScreenX");
        DrawRect_ScreenY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawRect_NativeFunction, "ScreenY");
        DrawRect_ScreenW_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawRect_NativeFunction, "ScreenW");
        DrawRect_ScreenH_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawRect_NativeFunction, "ScreenH");
        DrawMaterialTriangle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawMaterialTriangle");
        DrawMaterialTriangle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawMaterialTriangle_NativeFunction);
        DrawMaterialTriangle_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterialTriangle_NativeFunction, "Material");
        DrawMaterialTriangle_V0_Pos_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterialTriangle_NativeFunction, "V0_Pos");
        DrawMaterialTriangle_V1_Pos_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterialTriangle_NativeFunction, "V1_Pos");
        DrawMaterialTriangle_V2_Pos_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterialTriangle_NativeFunction, "V2_Pos");
        DrawMaterialTriangle_V0_UV_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterialTriangle_NativeFunction, "V0_UV");
        DrawMaterialTriangle_V1_UV_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterialTriangle_NativeFunction, "V1_UV");
        DrawMaterialTriangle_V2_UV_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterialTriangle_NativeFunction, "V2_UV");
        DrawMaterialTriangle_V0_Color_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterialTriangle_NativeFunction, "V0_Color");
        DrawMaterialTriangle_V1_Color_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterialTriangle_NativeFunction, "V1_Color");
        DrawMaterialTriangle_V2_Color_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterialTriangle_NativeFunction, "V2_Color");
        DrawMaterialSimple_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawMaterialSimple");
        DrawMaterialSimple_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawMaterialSimple_NativeFunction);
        DrawMaterialSimple_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterialSimple_NativeFunction, "Material");
        DrawMaterialSimple_ScreenX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterialSimple_NativeFunction, "ScreenX");
        DrawMaterialSimple_ScreenY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterialSimple_NativeFunction, "ScreenY");
        DrawMaterialSimple_ScreenW_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterialSimple_NativeFunction, "ScreenW");
        DrawMaterialSimple_ScreenH_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterialSimple_NativeFunction, "ScreenH");
        DrawMaterialSimple_Scale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterialSimple_NativeFunction, "Scale");
        DrawMaterialSimple_bScalePosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterialSimple_NativeFunction, "bScalePosition");
        DrawMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawMaterial");
        DrawMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawMaterial_NativeFunction);
        DrawMaterial_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterial_NativeFunction, "Material");
        DrawMaterial_ScreenX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterial_NativeFunction, "ScreenX");
        DrawMaterial_ScreenY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterial_NativeFunction, "ScreenY");
        DrawMaterial_ScreenW_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterial_NativeFunction, "ScreenW");
        DrawMaterial_ScreenH_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterial_NativeFunction, "ScreenH");
        DrawMaterial_MaterialU_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterial_NativeFunction, "MaterialU");
        DrawMaterial_MaterialV_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterial_NativeFunction, "MaterialV");
        DrawMaterial_MaterialUWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterial_NativeFunction, "MaterialUWidth");
        DrawMaterial_MaterialVHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterial_NativeFunction, "MaterialVHeight");
        DrawMaterial_Scale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterial_NativeFunction, "Scale");
        DrawMaterial_bScalePosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterial_NativeFunction, "bScalePosition");
        DrawMaterial_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterial_NativeFunction, "Rotation");
        DrawMaterial_RotPivot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterial_NativeFunction, "RotPivot");
        DrawLine_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawLine");
        DrawLine_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawLine_NativeFunction);
        DrawLine_StartScreenX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawLine_NativeFunction, "StartScreenX");
        DrawLine_StartScreenY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawLine_NativeFunction, "StartScreenY");
        DrawLine_EndScreenX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawLine_NativeFunction, "EndScreenX");
        DrawLine_EndScreenY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawLine_NativeFunction, "EndScreenY");
        DrawLine_LineColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawLine_NativeFunction, "LineColor");
        DrawLine_LineThickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawLine_NativeFunction, "LineThickness");
        Deproject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Deproject");
        Deproject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Deproject_NativeFunction);
        Deproject_ScreenX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Deproject_NativeFunction, "ScreenX");
        Deproject_ScreenY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Deproject_NativeFunction, "ScreenY");
        Deproject_WorldPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Deproject_NativeFunction, "WorldPosition");
        Deproject_WorldDirection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Deproject_NativeFunction, "WorldDirection");
        AddHitBox_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddHitBox");
        AddHitBox_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddHitBox_NativeFunction);
        AddHitBox_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddHitBox_NativeFunction, "Position");
        AddHitBox_Size_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddHitBox_NativeFunction, "Size");
        AddHitBox_InName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddHitBox_NativeFunction, "InName");
        AddHitBox_bConsumesInput_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddHitBox_NativeFunction, "bConsumesInput");
        AddHitBox_Priority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddHitBox_NativeFunction, "Priority");
        
        IntPtr ReceiveHitBoxRelease_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveHitBoxRelease");
        ReceiveHitBoxRelease_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveHitBoxRelease_NativeFunction);
        ReceiveHitBoxRelease_BoxName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveHitBoxRelease_NativeFunction, "BoxName");
        
        IntPtr ReceiveHitBoxEndCursorOver_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveHitBoxEndCursorOver");
        ReceiveHitBoxEndCursorOver_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveHitBoxEndCursorOver_NativeFunction);
        ReceiveHitBoxEndCursorOver_BoxName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveHitBoxEndCursorOver_NativeFunction, "BoxName");
        
        IntPtr ReceiveHitBoxClick_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveHitBoxClick");
        ReceiveHitBoxClick_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveHitBoxClick_NativeFunction);
        ReceiveHitBoxClick_BoxName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveHitBoxClick_NativeFunction, "BoxName");
        
        IntPtr ReceiveHitBoxBeginCursorOver_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveHitBoxBeginCursorOver");
        ReceiveHitBoxBeginCursorOver_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveHitBoxBeginCursorOver_NativeFunction);
        ReceiveHitBoxBeginCursorOver_BoxName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveHitBoxBeginCursorOver_NativeFunction, "BoxName");
        
        IntPtr ReceiveDrawHUD_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveDrawHUD");
        ReceiveDrawHUD_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveDrawHUD_NativeFunction);
        ReceiveDrawHUD_SizeX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveDrawHUD_NativeFunction, "SizeX");
        ReceiveDrawHUD_SizeY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveDrawHUD_NativeFunction, "SizeY");
        
        
    }
    
    protected HUD(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Engine.HUD:PlayerOwner
    static readonly int PlayerOwner_Offset;
    
    public UnrealSharp.Engine.PlayerController PlayerOwner
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(NativeObject, PlayerOwner_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.HUD:bLostFocusPaused
    static readonly int bLostFocusPaused_Offset;
    static readonly IntPtr bLostFocusPaused_NativeProperty;
    
    public bool bLostFocusPaused
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bLostFocusPaused_NativeProperty, bLostFocusPaused_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.HUD:bShowHUD
    static readonly int bShowHUD_Offset;
    static readonly IntPtr bShowHUD_NativeProperty;
    
    public bool bShowHUD
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bShowHUD_NativeProperty, bShowHUD_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bShowHUD_NativeProperty, bShowHUD_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.HUD:bShowDebugInfo
    static readonly int bShowDebugInfo_Offset;
    static readonly IntPtr bShowDebugInfo_NativeProperty;
    
    public bool bShowDebugInfo
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bShowDebugInfo_NativeProperty, bShowDebugInfo_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bShowDebugInfo_NativeProperty, bShowDebugInfo_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.HUD:bShowHitBoxDebugInfo
    static readonly int bShowHitBoxDebugInfo_Offset;
    static readonly IntPtr bShowHitBoxDebugInfo_NativeProperty;
    
    public bool bShowHitBoxDebugInfo
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bShowHitBoxDebugInfo_NativeProperty, bShowHitBoxDebugInfo_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bShowHitBoxDebugInfo_NativeProperty, bShowHitBoxDebugInfo_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.HUD:bShowOverlays
    static readonly int bShowOverlays_Offset;
    static readonly IntPtr bShowOverlays_NativeProperty;
    
    public bool bShowOverlays
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bShowOverlays_NativeProperty, bShowOverlays_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bShowOverlays_NativeProperty, bShowOverlays_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.HUD:bEnableDebugTextShadow
    static readonly int bEnableDebugTextShadow_Offset;
    static readonly IntPtr bEnableDebugTextShadow_NativeProperty;
    
    public bool bEnableDebugTextShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableDebugTextShadow_NativeProperty, bEnableDebugTextShadow_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bEnableDebugTextShadow_NativeProperty, bEnableDebugTextShadow_Offset, value);
        }
    }
    
    // Function /Script/Engine.HUD:Project
    static readonly IntPtr Project_NativeFunction;
    static readonly int Project_ParamsSize;
    static readonly int Project_Location_Offset;
    static readonly int Project_bClampToZeroPlane_Offset;
    static readonly int Project_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 Project(System.DoubleNumerics.Vector3 location, bool bClampToZeroPlane = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Project_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Project_Location_Offset), 0, null, location);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, Project_bClampToZeroPlane_Offset), 0, null, bClampToZeroPlane);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Project_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Project_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.HUD:GetTextSize
    static readonly IntPtr GetTextSize_NativeFunction;
    static readonly int GetTextSize_ParamsSize;
    static readonly int GetTextSize_Text_Offset;
    static readonly int GetTextSize_OutWidth_Offset;
    static readonly int GetTextSize_OutHeight_Offset;
    static readonly int GetTextSize_Font_Offset;
    static readonly int GetTextSize_Scale_Offset;
    
    public void GetTextSize(string text, out float outWidth, out float outHeight, UnrealSharp.Engine.Font font = default(UnrealSharp.Engine.Font), float scale = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTextSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Text_NativePtr = IntPtr.Add(ParamsBuffer,GetTextSize_Text_Offset);
            StringMarshaller.ToNative(Text_NativePtr,0,null,text);
            ObjectMarshaller<UnrealSharp.Engine.Font>.ToNative(IntPtr.Add(ParamsBuffer, GetTextSize_Font_Offset), 0, null, font);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetTextSize_Scale_Offset), 0, null, scale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTextSize_NativeFunction, ParamsBuffer);
            
            outWidth = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetTextSize_OutWidth_Offset), 0, null);
            outHeight = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetTextSize_OutHeight_Offset), 0, null);
            
            StringMarshaller.DestructInstance(Text_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.HUD:GetOwningPlayerController
    static readonly IntPtr GetOwningPlayerController_NativeFunction;
    static readonly int GetOwningPlayerController_ParamsSize;
    static readonly int GetOwningPlayerController_ReturnValue_Offset;
    
    public UnrealSharp.Engine.PlayerController GetOwningPlayerController()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOwningPlayerController_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOwningPlayerController_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PlayerController returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(ParamsBuffer, GetOwningPlayerController_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.HUD:GetOwningPawn
    static readonly IntPtr GetOwningPawn_NativeFunction;
    static readonly int GetOwningPawn_ParamsSize;
    static readonly int GetOwningPawn_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Pawn GetOwningPawn()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOwningPawn_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOwningPawn_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Pawn returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(ParamsBuffer, GetOwningPawn_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.HUD:GetActorsInSelectionRectangle
    static readonly IntPtr GetActorsInSelectionRectangle_NativeFunction;
    static readonly int GetActorsInSelectionRectangle_ParamsSize;
    static readonly int GetActorsInSelectionRectangle_ClassFilter_Offset;
    static readonly int GetActorsInSelectionRectangle_FirstPoint_Offset;
    static readonly int GetActorsInSelectionRectangle_SecondPoint_Offset;
    static readonly int GetActorsInSelectionRectangle_OutActors_Offset;
    static readonly int GetActorsInSelectionRectangle_OutActors_ElementSize;
    static readonly int GetActorsInSelectionRectangle_bIncludeNonCollidingComponents_Offset;
    static readonly int GetActorsInSelectionRectangle_bActorMustBeFullyEnclosed_Offset;
    
    public void GetActorsInSelectionRectangle(SubclassOf<UnrealSharp.Engine.Actor> classFilter, System.DoubleNumerics.Vector2 firstPoint, System.DoubleNumerics.Vector2 secondPoint, out System.Collections.Generic.IList<UnrealSharp.Engine.Actor> outActors, bool bIncludeNonCollidingComponents = true, bool bActorMustBeFullyEnclosed = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActorsInSelectionRectangle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, GetActorsInSelectionRectangle_ClassFilter_Offset), 0, null, classFilter);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, GetActorsInSelectionRectangle_FirstPoint_Offset), 0, null, firstPoint);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, GetActorsInSelectionRectangle_SecondPoint_Offset), 0, null, secondPoint);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetActorsInSelectionRectangle_bIncludeNonCollidingComponents_Offset), 0, null, bIncludeNonCollidingComponents);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetActorsInSelectionRectangle_bActorMustBeFullyEnclosed_Offset), 0, null, bActorMustBeFullyEnclosed);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetActorsInSelectionRectangle_NativeFunction, ParamsBuffer);
            
            IntPtr OutActors_NativeBuffer = IntPtr.Add(ParamsBuffer, GetActorsInSelectionRectangle_OutActors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> OutActors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, GetActorsInSelectionRectangle_OutActors_ElementSize);
            outActors = OutActors_Marshaler.FromNative(OutActors_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(OutActors_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.HUD:DrawTextureSimple
    static readonly IntPtr DrawTextureSimple_NativeFunction;
    static readonly int DrawTextureSimple_ParamsSize;
    static readonly int DrawTextureSimple_Texture_Offset;
    static readonly int DrawTextureSimple_ScreenX_Offset;
    static readonly int DrawTextureSimple_ScreenY_Offset;
    static readonly int DrawTextureSimple_Scale_Offset;
    static readonly int DrawTextureSimple_bScalePosition_Offset;
    
    public void DrawTextureSimple(UnrealSharp.Engine.Texture texture, float screenX, float screenY, float scale = 1.000000f, bool bScalePosition = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawTextureSimple_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Texture>.ToNative(IntPtr.Add(ParamsBuffer, DrawTextureSimple_Texture_Offset), 0, null, texture);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawTextureSimple_ScreenX_Offset), 0, null, screenX);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawTextureSimple_ScreenY_Offset), 0, null, screenY);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawTextureSimple_Scale_Offset), 0, null, scale);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, DrawTextureSimple_bScalePosition_Offset), 0, null, bScalePosition);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DrawTextureSimple_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.HUD:DrawTexture
    static readonly IntPtr DrawTexture_NativeFunction;
    static readonly int DrawTexture_ParamsSize;
    static readonly int DrawTexture_Texture_Offset;
    static readonly int DrawTexture_ScreenX_Offset;
    static readonly int DrawTexture_ScreenY_Offset;
    static readonly int DrawTexture_ScreenW_Offset;
    static readonly int DrawTexture_ScreenH_Offset;
    static readonly int DrawTexture_TextureU_Offset;
    static readonly int DrawTexture_TextureV_Offset;
    static readonly int DrawTexture_TextureUWidth_Offset;
    static readonly int DrawTexture_TextureVHeight_Offset;
    static readonly int DrawTexture_TintColor_Offset;
    static readonly int DrawTexture_BlendMode_Offset;
    static readonly int DrawTexture_Scale_Offset;
    static readonly int DrawTexture_bScalePosition_Offset;
    static readonly int DrawTexture_Rotation_Offset;
    static readonly int DrawTexture_RotPivot_Offset;
    
    public void DrawTexture(UnrealSharp.Engine.Texture texture, float screenX, float screenY, float screenW, float screenH, float textureU, float textureV, float textureUWidth, float textureVHeight)
    {
        UnrealSharp.CoreUObject.LinearColor tintColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawTexture(texture, screenX, screenY, screenW, screenH, textureU, textureV, textureUWidth, textureVHeight, tintColor);
    }
    
    public void DrawTexture(UnrealSharp.Engine.Texture texture, float screenX, float screenY, float screenW, float screenH, float textureU, float textureV, float textureUWidth, float textureVHeight, UnrealSharp.CoreUObject.LinearColor tintColor, UnrealSharp.Engine.EBlendMode blendMode = UnrealSharp.Engine.EBlendMode.BLEND_Translucent, float scale = 1.000000f, bool bScalePosition = false, float rotation = 0.000000f, System.DoubleNumerics.Vector2 rotPivot = default(System.DoubleNumerics.Vector2))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawTexture_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Texture>.ToNative(IntPtr.Add(ParamsBuffer, DrawTexture_Texture_Offset), 0, null, texture);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawTexture_ScreenX_Offset), 0, null, screenX);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawTexture_ScreenY_Offset), 0, null, screenY);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawTexture_ScreenW_Offset), 0, null, screenW);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawTexture_ScreenH_Offset), 0, null, screenH);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawTexture_TextureU_Offset), 0, null, textureU);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawTexture_TextureV_Offset), 0, null, textureV);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawTexture_TextureUWidth_Offset), 0, null, textureUWidth);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawTexture_TextureVHeight_Offset), 0, null, textureVHeight);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawTexture_TintColor_Offset), 0, null, tintColor);
            BlittableMarshaller<UnrealSharp.Engine.EBlendMode>.ToNative(IntPtr.Add(ParamsBuffer, DrawTexture_BlendMode_Offset), 0, null, blendMode);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawTexture_Scale_Offset), 0, null, scale);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, DrawTexture_bScalePosition_Offset), 0, null, bScalePosition);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawTexture_Rotation_Offset), 0, null, rotation);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DrawTexture_RotPivot_Offset), 0, null, rotPivot);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DrawTexture_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.HUD:DrawText
    static readonly IntPtr DrawText_NativeFunction;
    static readonly int DrawText_ParamsSize;
    static readonly int DrawText_Text_Offset;
    static readonly int DrawText_TextColor_Offset;
    static readonly int DrawText_ScreenX_Offset;
    static readonly int DrawText_ScreenY_Offset;
    static readonly int DrawText_Font_Offset;
    static readonly int DrawText_Scale_Offset;
    static readonly int DrawText_bScalePosition_Offset;
    
    public void DrawText(string text, UnrealSharp.CoreUObject.LinearColor textColor, float screenX, float screenY, UnrealSharp.Engine.Font font = default(UnrealSharp.Engine.Font), float scale = 1.000000f, bool bScalePosition = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawText_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Text_NativePtr = IntPtr.Add(ParamsBuffer,DrawText_Text_Offset);
            StringMarshaller.ToNative(Text_NativePtr,0,null,text);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawText_TextColor_Offset), 0, null, textColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawText_ScreenX_Offset), 0, null, screenX);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawText_ScreenY_Offset), 0, null, screenY);
            ObjectMarshaller<UnrealSharp.Engine.Font>.ToNative(IntPtr.Add(ParamsBuffer, DrawText_Font_Offset), 0, null, font);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawText_Scale_Offset), 0, null, scale);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, DrawText_bScalePosition_Offset), 0, null, bScalePosition);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DrawText_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Text_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.HUD:DrawRect
    static readonly IntPtr DrawRect_NativeFunction;
    static readonly int DrawRect_ParamsSize;
    static readonly int DrawRect_RectColor_Offset;
    static readonly int DrawRect_ScreenX_Offset;
    static readonly int DrawRect_ScreenY_Offset;
    static readonly int DrawRect_ScreenW_Offset;
    static readonly int DrawRect_ScreenH_Offset;
    
    public void DrawRect(UnrealSharp.CoreUObject.LinearColor rectColor, float screenX, float screenY, float screenW, float screenH)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawRect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawRect_RectColor_Offset), 0, null, rectColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawRect_ScreenX_Offset), 0, null, screenX);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawRect_ScreenY_Offset), 0, null, screenY);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawRect_ScreenW_Offset), 0, null, screenW);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawRect_ScreenH_Offset), 0, null, screenH);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DrawRect_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.HUD:DrawMaterialTriangle
    static readonly IntPtr DrawMaterialTriangle_NativeFunction;
    static readonly int DrawMaterialTriangle_ParamsSize;
    static readonly int DrawMaterialTriangle_Material_Offset;
    static readonly int DrawMaterialTriangle_V0_Pos_Offset;
    static readonly int DrawMaterialTriangle_V1_Pos_Offset;
    static readonly int DrawMaterialTriangle_V2_Pos_Offset;
    static readonly int DrawMaterialTriangle_V0_UV_Offset;
    static readonly int DrawMaterialTriangle_V1_UV_Offset;
    static readonly int DrawMaterialTriangle_V2_UV_Offset;
    static readonly int DrawMaterialTriangle_V0_Color_Offset;
    static readonly int DrawMaterialTriangle_V1_Color_Offset;
    static readonly int DrawMaterialTriangle_V2_Color_Offset;
    
    public void DrawMaterialTriangle(UnrealSharp.Engine.MaterialInterface material, System.DoubleNumerics.Vector2 v0_Pos, System.DoubleNumerics.Vector2 v1_Pos, System.DoubleNumerics.Vector2 v2_Pos, System.DoubleNumerics.Vector2 v0_UV, System.DoubleNumerics.Vector2 v1_UV, System.DoubleNumerics.Vector2 v2_UV)
    {
        UnrealSharp.CoreUObject.LinearColor v0_Color = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawMaterialTriangle(material, v0_Pos, v1_Pos, v2_Pos, v0_UV, v1_UV, v2_UV, v0_Color);
    }
    
    public void DrawMaterialTriangle(UnrealSharp.Engine.MaterialInterface material, System.DoubleNumerics.Vector2 v0_Pos, System.DoubleNumerics.Vector2 v1_Pos, System.DoubleNumerics.Vector2 v2_Pos, System.DoubleNumerics.Vector2 v0_UV, System.DoubleNumerics.Vector2 v1_UV, System.DoubleNumerics.Vector2 v2_UV, UnrealSharp.CoreUObject.LinearColor v0_Color)
    {
        UnrealSharp.CoreUObject.LinearColor v1_Color = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawMaterialTriangle(material, v0_Pos, v1_Pos, v2_Pos, v0_UV, v1_UV, v2_UV, v0_Color, v1_Color);
    }
    
    public void DrawMaterialTriangle(UnrealSharp.Engine.MaterialInterface material, System.DoubleNumerics.Vector2 v0_Pos, System.DoubleNumerics.Vector2 v1_Pos, System.DoubleNumerics.Vector2 v2_Pos, System.DoubleNumerics.Vector2 v0_UV, System.DoubleNumerics.Vector2 v1_UV, System.DoubleNumerics.Vector2 v2_UV, UnrealSharp.CoreUObject.LinearColor v0_Color, UnrealSharp.CoreUObject.LinearColor v1_Color)
    {
        UnrealSharp.CoreUObject.LinearColor v2_Color = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawMaterialTriangle(material, v0_Pos, v1_Pos, v2_Pos, v0_UV, v1_UV, v2_UV, v0_Color, v1_Color, v2_Color);
    }
    
    public void DrawMaterialTriangle(UnrealSharp.Engine.MaterialInterface material, System.DoubleNumerics.Vector2 v0_Pos, System.DoubleNumerics.Vector2 v1_Pos, System.DoubleNumerics.Vector2 v2_Pos, System.DoubleNumerics.Vector2 v0_UV, System.DoubleNumerics.Vector2 v1_UV, System.DoubleNumerics.Vector2 v2_UV, UnrealSharp.CoreUObject.LinearColor v0_Color, UnrealSharp.CoreUObject.LinearColor v1_Color, UnrealSharp.CoreUObject.LinearColor v2_Color)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawMaterialTriangle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterialTriangle_Material_Offset), 0, null, material);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterialTriangle_V0_Pos_Offset), 0, null, v0_Pos);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterialTriangle_V1_Pos_Offset), 0, null, v1_Pos);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterialTriangle_V2_Pos_Offset), 0, null, v2_Pos);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterialTriangle_V0_UV_Offset), 0, null, v0_UV);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterialTriangle_V1_UV_Offset), 0, null, v1_UV);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterialTriangle_V2_UV_Offset), 0, null, v2_UV);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterialTriangle_V0_Color_Offset), 0, null, v0_Color);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterialTriangle_V1_Color_Offset), 0, null, v1_Color);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterialTriangle_V2_Color_Offset), 0, null, v2_Color);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DrawMaterialTriangle_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.HUD:DrawMaterialSimple
    static readonly IntPtr DrawMaterialSimple_NativeFunction;
    static readonly int DrawMaterialSimple_ParamsSize;
    static readonly int DrawMaterialSimple_Material_Offset;
    static readonly int DrawMaterialSimple_ScreenX_Offset;
    static readonly int DrawMaterialSimple_ScreenY_Offset;
    static readonly int DrawMaterialSimple_ScreenW_Offset;
    static readonly int DrawMaterialSimple_ScreenH_Offset;
    static readonly int DrawMaterialSimple_Scale_Offset;
    static readonly int DrawMaterialSimple_bScalePosition_Offset;
    
    public void DrawMaterialSimple(UnrealSharp.Engine.MaterialInterface material, float screenX, float screenY, float screenW, float screenH, float scale = 1.000000f, bool bScalePosition = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawMaterialSimple_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterialSimple_Material_Offset), 0, null, material);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterialSimple_ScreenX_Offset), 0, null, screenX);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterialSimple_ScreenY_Offset), 0, null, screenY);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterialSimple_ScreenW_Offset), 0, null, screenW);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterialSimple_ScreenH_Offset), 0, null, screenH);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterialSimple_Scale_Offset), 0, null, scale);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterialSimple_bScalePosition_Offset), 0, null, bScalePosition);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DrawMaterialSimple_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.HUD:DrawMaterial
    static readonly IntPtr DrawMaterial_NativeFunction;
    static readonly int DrawMaterial_ParamsSize;
    static readonly int DrawMaterial_Material_Offset;
    static readonly int DrawMaterial_ScreenX_Offset;
    static readonly int DrawMaterial_ScreenY_Offset;
    static readonly int DrawMaterial_ScreenW_Offset;
    static readonly int DrawMaterial_ScreenH_Offset;
    static readonly int DrawMaterial_MaterialU_Offset;
    static readonly int DrawMaterial_MaterialV_Offset;
    static readonly int DrawMaterial_MaterialUWidth_Offset;
    static readonly int DrawMaterial_MaterialVHeight_Offset;
    static readonly int DrawMaterial_Scale_Offset;
    static readonly int DrawMaterial_bScalePosition_Offset;
    static readonly int DrawMaterial_Rotation_Offset;
    static readonly int DrawMaterial_RotPivot_Offset;
    
    public void DrawMaterial(UnrealSharp.Engine.MaterialInterface material, float screenX, float screenY, float screenW, float screenH, float materialU, float materialV, float materialUWidth, float materialVHeight, float scale = 1.000000f, bool bScalePosition = false, float rotation = 0.000000f, System.DoubleNumerics.Vector2 rotPivot = default(System.DoubleNumerics.Vector2))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterial_Material_Offset), 0, null, material);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterial_ScreenX_Offset), 0, null, screenX);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterial_ScreenY_Offset), 0, null, screenY);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterial_ScreenW_Offset), 0, null, screenW);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterial_ScreenH_Offset), 0, null, screenH);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterial_MaterialU_Offset), 0, null, materialU);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterial_MaterialV_Offset), 0, null, materialV);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterial_MaterialUWidth_Offset), 0, null, materialUWidth);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterial_MaterialVHeight_Offset), 0, null, materialVHeight);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterial_Scale_Offset), 0, null, scale);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterial_bScalePosition_Offset), 0, null, bScalePosition);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterial_Rotation_Offset), 0, null, rotation);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterial_RotPivot_Offset), 0, null, rotPivot);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DrawMaterial_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.HUD:DrawLine
    static readonly IntPtr DrawLine_NativeFunction;
    static readonly int DrawLine_ParamsSize;
    static readonly int DrawLine_StartScreenX_Offset;
    static readonly int DrawLine_StartScreenY_Offset;
    static readonly int DrawLine_EndScreenX_Offset;
    static readonly int DrawLine_EndScreenY_Offset;
    static readonly int DrawLine_LineColor_Offset;
    static readonly int DrawLine_LineThickness_Offset;
    
    public void DrawLine(float startScreenX, float startScreenY, float endScreenX, float endScreenY, UnrealSharp.CoreUObject.LinearColor lineColor, float lineThickness = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawLine_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawLine_StartScreenX_Offset), 0, null, startScreenX);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawLine_StartScreenY_Offset), 0, null, startScreenY);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawLine_EndScreenX_Offset), 0, null, endScreenX);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawLine_EndScreenY_Offset), 0, null, endScreenY);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawLine_LineColor_Offset), 0, null, lineColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawLine_LineThickness_Offset), 0, null, lineThickness);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DrawLine_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.HUD:Deproject
    static readonly IntPtr Deproject_NativeFunction;
    static readonly int Deproject_ParamsSize;
    static readonly int Deproject_ScreenX_Offset;
    static readonly int Deproject_ScreenY_Offset;
    static readonly int Deproject_WorldPosition_Offset;
    static readonly int Deproject_WorldDirection_Offset;
    
    public void Deproject(float screenX, float screenY, out System.DoubleNumerics.Vector3 worldPosition, out System.DoubleNumerics.Vector3 worldDirection)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Deproject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Deproject_ScreenX_Offset), 0, null, screenX);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Deproject_ScreenY_Offset), 0, null, screenY);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Deproject_NativeFunction, ParamsBuffer);
            
            worldPosition = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Deproject_WorldPosition_Offset), 0, null);
            worldDirection = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Deproject_WorldDirection_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.HUD:AddHitBox
    static readonly IntPtr AddHitBox_NativeFunction;
    static readonly int AddHitBox_ParamsSize;
    static readonly int AddHitBox_Position_Offset;
    static readonly int AddHitBox_Size_Offset;
    static readonly int AddHitBox_InName_Offset;
    static readonly int AddHitBox_bConsumesInput_Offset;
    static readonly int AddHitBox_Priority_Offset;
    
    public void AddHitBox(System.DoubleNumerics.Vector2 position, System.DoubleNumerics.Vector2 size, Name inName, bool bConsumesInput, int priority = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddHitBox_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, AddHitBox_Position_Offset), 0, null, position);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, AddHitBox_Size_Offset), 0, null, size);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddHitBox_InName_Offset), 0, null, inName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddHitBox_bConsumesInput_Offset), 0, null, bConsumesInput);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, AddHitBox_Priority_Offset), 0, null, priority);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddHitBox_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.HUD:ReceiveHitBoxRelease
    IntPtr ReceiveHitBoxRelease_NativeFunction;
    static readonly int ReceiveHitBoxRelease_ParamsSize;
    static readonly int ReceiveHitBoxRelease_BoxName_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveHitBoxRelease(Name boxName)
    {
        unsafe
        {
            if (ReceiveHitBoxRelease_NativeFunction == IntPtr.Zero)
            {
                ReceiveHitBoxRelease_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveHitBoxRelease");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveHitBoxRelease_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveHitBoxRelease_BoxName_Offset), 0, null, boxName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveHitBoxRelease_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveHitBoxRelease_Implementation(Name boxName)
    {
    }
    void Invoke_ReceiveHitBoxRelease(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            Name boxName = BlittableMarshaller<Name>.FromNative(IntPtr.Add(buffer, ReceiveHitBoxRelease_BoxName_Offset), 0, null);
            ReceiveHitBoxRelease_Implementation(boxName);
        }
    }
    
    // Function /Script/Engine.HUD:ReceiveHitBoxEndCursorOver
    IntPtr ReceiveHitBoxEndCursorOver_NativeFunction;
    static readonly int ReceiveHitBoxEndCursorOver_ParamsSize;
    static readonly int ReceiveHitBoxEndCursorOver_BoxName_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveHitBoxEndCursorOver(Name boxName)
    {
        unsafe
        {
            if (ReceiveHitBoxEndCursorOver_NativeFunction == IntPtr.Zero)
            {
                ReceiveHitBoxEndCursorOver_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveHitBoxEndCursorOver");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveHitBoxEndCursorOver_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveHitBoxEndCursorOver_BoxName_Offset), 0, null, boxName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveHitBoxEndCursorOver_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveHitBoxEndCursorOver_Implementation(Name boxName)
    {
    }
    void Invoke_ReceiveHitBoxEndCursorOver(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            Name boxName = BlittableMarshaller<Name>.FromNative(IntPtr.Add(buffer, ReceiveHitBoxEndCursorOver_BoxName_Offset), 0, null);
            ReceiveHitBoxEndCursorOver_Implementation(boxName);
        }
    }
    
    // Function /Script/Engine.HUD:ReceiveHitBoxClick
    IntPtr ReceiveHitBoxClick_NativeFunction;
    static readonly int ReceiveHitBoxClick_ParamsSize;
    static readonly int ReceiveHitBoxClick_BoxName_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveHitBoxClick(Name boxName)
    {
        unsafe
        {
            if (ReceiveHitBoxClick_NativeFunction == IntPtr.Zero)
            {
                ReceiveHitBoxClick_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveHitBoxClick");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveHitBoxClick_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveHitBoxClick_BoxName_Offset), 0, null, boxName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveHitBoxClick_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveHitBoxClick_Implementation(Name boxName)
    {
    }
    void Invoke_ReceiveHitBoxClick(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            Name boxName = BlittableMarshaller<Name>.FromNative(IntPtr.Add(buffer, ReceiveHitBoxClick_BoxName_Offset), 0, null);
            ReceiveHitBoxClick_Implementation(boxName);
        }
    }
    
    // Function /Script/Engine.HUD:ReceiveHitBoxBeginCursorOver
    IntPtr ReceiveHitBoxBeginCursorOver_NativeFunction;
    static readonly int ReceiveHitBoxBeginCursorOver_ParamsSize;
    static readonly int ReceiveHitBoxBeginCursorOver_BoxName_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveHitBoxBeginCursorOver(Name boxName)
    {
        unsafe
        {
            if (ReceiveHitBoxBeginCursorOver_NativeFunction == IntPtr.Zero)
            {
                ReceiveHitBoxBeginCursorOver_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveHitBoxBeginCursorOver");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveHitBoxBeginCursorOver_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveHitBoxBeginCursorOver_BoxName_Offset), 0, null, boxName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveHitBoxBeginCursorOver_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveHitBoxBeginCursorOver_Implementation(Name boxName)
    {
    }
    void Invoke_ReceiveHitBoxBeginCursorOver(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            Name boxName = BlittableMarshaller<Name>.FromNative(IntPtr.Add(buffer, ReceiveHitBoxBeginCursorOver_BoxName_Offset), 0, null);
            ReceiveHitBoxBeginCursorOver_Implementation(boxName);
        }
    }
    
    // Function /Script/Engine.HUD:ReceiveDrawHUD
    IntPtr ReceiveDrawHUD_NativeFunction;
    static readonly int ReceiveDrawHUD_ParamsSize;
    static readonly int ReceiveDrawHUD_SizeX_Offset;
    static readonly int ReceiveDrawHUD_SizeY_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveDrawHUD(int sizeX, int sizeY)
    {
        unsafe
        {
            if (ReceiveDrawHUD_NativeFunction == IntPtr.Zero)
            {
                ReceiveDrawHUD_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveDrawHUD");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveDrawHUD_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveDrawHUD_SizeX_Offset), 0, null, sizeX);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveDrawHUD_SizeY_Offset), 0, null, sizeY);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveDrawHUD_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveDrawHUD_Implementation(int sizeX, int sizeY)
    {
    }
    void Invoke_ReceiveDrawHUD(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            int sizeX = BlittableMarshaller<int>.FromNative(IntPtr.Add(buffer, ReceiveDrawHUD_SizeX_Offset), 0, null);
            int sizeY = BlittableMarshaller<int>.FromNative(IntPtr.Add(buffer, ReceiveDrawHUD_SizeY_Offset), 0, null);
            ReceiveDrawHUD_Implementation(sizeX, sizeY);
        }
    }
    
    
}
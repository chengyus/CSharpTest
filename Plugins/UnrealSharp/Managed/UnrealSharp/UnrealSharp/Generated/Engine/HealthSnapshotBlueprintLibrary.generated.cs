// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class HealthSnapshotBlueprintLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static HealthSnapshotBlueprintLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("HealthSnapshotBlueprintLibrary");
        
        
        StopPerformanceSnapshots_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopPerformanceSnapshots");
        StartPerformanceSnapshots_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartPerformanceSnapshots");
        LogPerformanceSnapshot_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LogPerformanceSnapshot");
        LogPerformanceSnapshot_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LogPerformanceSnapshot_NativeFunction);
        LogPerformanceSnapshot_SnapshotTitle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogPerformanceSnapshot_NativeFunction, "SnapshotTitle");
        LogPerformanceSnapshot_bResetStats_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogPerformanceSnapshot_NativeFunction, "bResetStats");
        
        
    }
    
    protected HealthSnapshotBlueprintLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.HealthSnapshotBlueprintLibrary:StopPerformanceSnapshots
    static readonly IntPtr StopPerformanceSnapshots_NativeFunction;
    
    public static void StopPerformanceSnapshots()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, StopPerformanceSnapshots_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.HealthSnapshotBlueprintLibrary:StartPerformanceSnapshots
    static readonly IntPtr StartPerformanceSnapshots_NativeFunction;
    
    public static void StartPerformanceSnapshots()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, StartPerformanceSnapshots_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.HealthSnapshotBlueprintLibrary:LogPerformanceSnapshot
    static readonly IntPtr LogPerformanceSnapshot_NativeFunction;
    static readonly int LogPerformanceSnapshot_ParamsSize;
    static readonly int LogPerformanceSnapshot_SnapshotTitle_Offset;
    static readonly int LogPerformanceSnapshot_bResetStats_Offset;
    
    public static void LogPerformanceSnapshot(string snapshotTitle, bool bResetStats = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LogPerformanceSnapshot_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SnapshotTitle_NativePtr = IntPtr.Add(ParamsBuffer,LogPerformanceSnapshot_SnapshotTitle_Offset);
            StringMarshaller.ToNative(SnapshotTitle_NativePtr,0,null,snapshotTitle);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LogPerformanceSnapshot_bResetStats_Offset), 0, null, bResetStats);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LogPerformanceSnapshot_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(SnapshotTitle_NativePtr, 0);
        }
    }
    
    
}
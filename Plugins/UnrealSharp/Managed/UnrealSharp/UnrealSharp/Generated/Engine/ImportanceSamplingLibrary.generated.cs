// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class ImportanceSamplingLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static ImportanceSamplingLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ImportanceSamplingLibrary");
        
        
        RandomSobolFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomSobolFloat");
        RandomSobolFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomSobolFloat_NativeFunction);
        RandomSobolFloat_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomSobolFloat_NativeFunction, "Index");
        RandomSobolFloat_Dimension_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomSobolFloat_NativeFunction, "Dimension");
        RandomSobolFloat_Seed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomSobolFloat_NativeFunction, "Seed");
        RandomSobolFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomSobolFloat_NativeFunction, "ReturnValue");
        RandomSobolCell3D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomSobolCell3D");
        RandomSobolCell3D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomSobolCell3D_NativeFunction);
        RandomSobolCell3D_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomSobolCell3D_NativeFunction, "Index");
        RandomSobolCell3D_NumCells_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomSobolCell3D_NativeFunction, "NumCells");
        RandomSobolCell3D_Cell_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomSobolCell3D_NativeFunction, "Cell");
        RandomSobolCell3D_Seed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomSobolCell3D_NativeFunction, "Seed");
        RandomSobolCell3D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomSobolCell3D_NativeFunction, "ReturnValue");
        RandomSobolCell2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomSobolCell2D");
        RandomSobolCell2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomSobolCell2D_NativeFunction);
        RandomSobolCell2D_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomSobolCell2D_NativeFunction, "Index");
        RandomSobolCell2D_NumCells_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomSobolCell2D_NativeFunction, "NumCells");
        RandomSobolCell2D_Cell_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomSobolCell2D_NativeFunction, "Cell");
        RandomSobolCell2D_Seed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomSobolCell2D_NativeFunction, "Seed");
        RandomSobolCell2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomSobolCell2D_NativeFunction, "ReturnValue");
        NextSobolFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NextSobolFloat");
        NextSobolFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NextSobolFloat_NativeFunction);
        NextSobolFloat_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NextSobolFloat_NativeFunction, "Index");
        NextSobolFloat_Dimension_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NextSobolFloat_NativeFunction, "Dimension");
        NextSobolFloat_PreviousValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NextSobolFloat_NativeFunction, "PreviousValue");
        NextSobolFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NextSobolFloat_NativeFunction, "ReturnValue");
        NextSobolCell3D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NextSobolCell3D");
        NextSobolCell3D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NextSobolCell3D_NativeFunction);
        NextSobolCell3D_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NextSobolCell3D_NativeFunction, "Index");
        NextSobolCell3D_NumCells_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NextSobolCell3D_NativeFunction, "NumCells");
        NextSobolCell3D_PreviousValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NextSobolCell3D_NativeFunction, "PreviousValue");
        NextSobolCell3D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NextSobolCell3D_NativeFunction, "ReturnValue");
        NextSobolCell2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NextSobolCell2D");
        NextSobolCell2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NextSobolCell2D_NativeFunction);
        NextSobolCell2D_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NextSobolCell2D_NativeFunction, "Index");
        NextSobolCell2D_NumCells_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NextSobolCell2D_NativeFunction, "NumCells");
        NextSobolCell2D_PreviousValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NextSobolCell2D_NativeFunction, "PreviousValue");
        NextSobolCell2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NextSobolCell2D_NativeFunction, "ReturnValue");
        ImportanceSample_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ImportanceSample");
        ImportanceSample_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ImportanceSample_NativeFunction);
        ImportanceSample_Texture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportanceSample_NativeFunction, "Texture");
        ImportanceSample_Rand_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportanceSample_NativeFunction, "Rand");
        ImportanceSample_Samples_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportanceSample_NativeFunction, "Samples");
        ImportanceSample_Intensity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportanceSample_NativeFunction, "Intensity");
        ImportanceSample_SamplePosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportanceSample_NativeFunction, "SamplePosition");
        ImportanceSample_SampleColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportanceSample_NativeFunction, "SampleColor");
        ImportanceSample_SampleIntensity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportanceSample_NativeFunction, "SampleIntensity");
        ImportanceSample_SampleSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportanceSample_NativeFunction, "SampleSize");
        
        
    }
    
    protected ImportanceSamplingLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.ImportanceSamplingLibrary:RandomSobolFloat
    static readonly IntPtr RandomSobolFloat_NativeFunction;
    static readonly int RandomSobolFloat_ParamsSize;
    static readonly int RandomSobolFloat_Index_Offset;
    static readonly int RandomSobolFloat_Dimension_Offset;
    static readonly int RandomSobolFloat_Seed_Offset;
    static readonly int RandomSobolFloat_ReturnValue_Offset;
    
    public static float RandomSobolFloat(int index, int dimension, float seed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomSobolFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, RandomSobolFloat_Index_Offset), 0, null, index);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, RandomSobolFloat_Dimension_Offset), 0, null, dimension);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RandomSobolFloat_Seed_Offset), 0, null, seed);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomSobolFloat_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, RandomSobolFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ImportanceSamplingLibrary:RandomSobolCell3D
    static readonly IntPtr RandomSobolCell3D_NativeFunction;
    static readonly int RandomSobolCell3D_ParamsSize;
    static readonly int RandomSobolCell3D_Index_Offset;
    static readonly int RandomSobolCell3D_NumCells_Offset;
    static readonly int RandomSobolCell3D_Cell_Offset;
    static readonly int RandomSobolCell3D_Seed_Offset;
    static readonly int RandomSobolCell3D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 RandomSobolCell3D(int index, int numCells = 1)
    {
        System.DoubleNumerics.Vector3 cell = new System.DoubleNumerics.Vector3
        {
            X=0.000000f,
            Y=0.000000f,
            Z=0.000000f,
        };
        return RandomSobolCell3D(index, numCells, cell);
    }
    
    public static System.DoubleNumerics.Vector3 RandomSobolCell3D(int index, int numCells, System.DoubleNumerics.Vector3 cell)
    {
        System.DoubleNumerics.Vector3 seed = new System.DoubleNumerics.Vector3
        {
            X=0.000000f,
            Y=0.000000f,
            Z=0.000000f,
        };
        return RandomSobolCell3D(index, numCells, cell, seed);
    }
    
    public static System.DoubleNumerics.Vector3 RandomSobolCell3D(int index, int numCells, System.DoubleNumerics.Vector3 cell, System.DoubleNumerics.Vector3 seed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomSobolCell3D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, RandomSobolCell3D_Index_Offset), 0, null, index);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, RandomSobolCell3D_NumCells_Offset), 0, null, numCells);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, RandomSobolCell3D_Cell_Offset), 0, null, cell);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, RandomSobolCell3D_Seed_Offset), 0, null, seed);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomSobolCell3D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, RandomSobolCell3D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ImportanceSamplingLibrary:RandomSobolCell2D
    static readonly IntPtr RandomSobolCell2D_NativeFunction;
    static readonly int RandomSobolCell2D_ParamsSize;
    static readonly int RandomSobolCell2D_Index_Offset;
    static readonly int RandomSobolCell2D_NumCells_Offset;
    static readonly int RandomSobolCell2D_Cell_Offset;
    static readonly int RandomSobolCell2D_Seed_Offset;
    static readonly int RandomSobolCell2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 RandomSobolCell2D(int index, int numCells = 1)
    {
        System.DoubleNumerics.Vector2 cell = new System.DoubleNumerics.Vector2
        {
            X=0.000f,
            Y=0.000f,
        };
        return RandomSobolCell2D(index, numCells, cell);
    }
    
    public static System.DoubleNumerics.Vector2 RandomSobolCell2D(int index, int numCells, System.DoubleNumerics.Vector2 cell)
    {
        System.DoubleNumerics.Vector2 seed = new System.DoubleNumerics.Vector2
        {
            X=0.000f,
            Y=0.000f,
        };
        return RandomSobolCell2D(index, numCells, cell, seed);
    }
    
    public static System.DoubleNumerics.Vector2 RandomSobolCell2D(int index, int numCells, System.DoubleNumerics.Vector2 cell, System.DoubleNumerics.Vector2 seed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomSobolCell2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, RandomSobolCell2D_Index_Offset), 0, null, index);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, RandomSobolCell2D_NumCells_Offset), 0, null, numCells);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, RandomSobolCell2D_Cell_Offset), 0, null, cell);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, RandomSobolCell2D_Seed_Offset), 0, null, seed);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomSobolCell2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, RandomSobolCell2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ImportanceSamplingLibrary:NextSobolFloat
    static readonly IntPtr NextSobolFloat_NativeFunction;
    static readonly int NextSobolFloat_ParamsSize;
    static readonly int NextSobolFloat_Index_Offset;
    static readonly int NextSobolFloat_Dimension_Offset;
    static readonly int NextSobolFloat_PreviousValue_Offset;
    static readonly int NextSobolFloat_ReturnValue_Offset;
    
    public static float NextSobolFloat(int index, int dimension, float previousValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NextSobolFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, NextSobolFloat_Index_Offset), 0, null, index);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, NextSobolFloat_Dimension_Offset), 0, null, dimension);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, NextSobolFloat_PreviousValue_Offset), 0, null, previousValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NextSobolFloat_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, NextSobolFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ImportanceSamplingLibrary:NextSobolCell3D
    static readonly IntPtr NextSobolCell3D_NativeFunction;
    static readonly int NextSobolCell3D_ParamsSize;
    static readonly int NextSobolCell3D_Index_Offset;
    static readonly int NextSobolCell3D_NumCells_Offset;
    static readonly int NextSobolCell3D_PreviousValue_Offset;
    static readonly int NextSobolCell3D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 NextSobolCell3D(int index, int numCells = 1)
    {
        System.DoubleNumerics.Vector3 previousValue = new System.DoubleNumerics.Vector3
        {
            X=0.000000f,
            Y=0.000000f,
            Z=0.000000f,
        };
        return NextSobolCell3D(index, numCells, previousValue);
    }
    
    public static System.DoubleNumerics.Vector3 NextSobolCell3D(int index, int numCells, System.DoubleNumerics.Vector3 previousValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NextSobolCell3D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, NextSobolCell3D_Index_Offset), 0, null, index);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, NextSobolCell3D_NumCells_Offset), 0, null, numCells);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, NextSobolCell3D_PreviousValue_Offset), 0, null, previousValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NextSobolCell3D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, NextSobolCell3D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ImportanceSamplingLibrary:NextSobolCell2D
    static readonly IntPtr NextSobolCell2D_NativeFunction;
    static readonly int NextSobolCell2D_ParamsSize;
    static readonly int NextSobolCell2D_Index_Offset;
    static readonly int NextSobolCell2D_NumCells_Offset;
    static readonly int NextSobolCell2D_PreviousValue_Offset;
    static readonly int NextSobolCell2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 NextSobolCell2D(int index, int numCells = 1)
    {
        System.DoubleNumerics.Vector2 previousValue = new System.DoubleNumerics.Vector2
        {
            X=0.000f,
            Y=0.000f,
        };
        return NextSobolCell2D(index, numCells, previousValue);
    }
    
    public static System.DoubleNumerics.Vector2 NextSobolCell2D(int index, int numCells, System.DoubleNumerics.Vector2 previousValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NextSobolCell2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, NextSobolCell2D_Index_Offset), 0, null, index);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, NextSobolCell2D_NumCells_Offset), 0, null, numCells);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, NextSobolCell2D_PreviousValue_Offset), 0, null, previousValue);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NextSobolCell2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, NextSobolCell2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ImportanceSamplingLibrary:ImportanceSample
    static readonly IntPtr ImportanceSample_NativeFunction;
    static readonly int ImportanceSample_ParamsSize;
    static readonly int ImportanceSample_Texture_Offset;
    static readonly int ImportanceSample_Rand_Offset;
    static readonly int ImportanceSample_Samples_Offset;
    static readonly int ImportanceSample_Intensity_Offset;
    static readonly int ImportanceSample_SamplePosition_Offset;
    static readonly int ImportanceSample_SampleColor_Offset;
    static readonly int ImportanceSample_SampleIntensity_Offset;
    static readonly int ImportanceSample_SampleSize_Offset;
    
    public static void ImportanceSample(UnrealSharp.Engine.ImportanceTexture texture, System.DoubleNumerics.Vector2 rand, int samples, float intensity, out System.DoubleNumerics.Vector2 samplePosition, out UnrealSharp.CoreUObject.LinearColor sampleColor, out float sampleIntensity, out float sampleSize)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ImportanceSample_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.ImportanceTextureMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ImportanceSample_Texture_Offset), 0, null, texture);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, ImportanceSample_Rand_Offset), 0, null, rand);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ImportanceSample_Samples_Offset), 0, null, samples);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ImportanceSample_Intensity_Offset), 0, null, intensity);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ImportanceSample_NativeFunction, ParamsBuffer);
            
            samplePosition = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, ImportanceSample_SamplePosition_Offset), 0, null);
            sampleColor = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, ImportanceSample_SampleColor_Offset), 0, null);
            sampleIntensity = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, ImportanceSample_SampleIntensity_Offset), 0, null);
            sampleSize = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, ImportanceSample_SampleSize_Offset), 0, null);
            
        }
    }
    
    
}
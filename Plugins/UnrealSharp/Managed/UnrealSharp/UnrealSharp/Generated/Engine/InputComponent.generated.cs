// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class InputComponent : UnrealSharp.Engine.ActorComponent
{
    
    static InputComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InputComponent");
        
        
        WasControllerKeyJustReleased_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "WasControllerKeyJustReleased");
        WasControllerKeyJustReleased_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(WasControllerKeyJustReleased_NativeFunction);
        WasControllerKeyJustReleased_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WasControllerKeyJustReleased_NativeFunction, "Key");
        WasControllerKeyJustReleased_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WasControllerKeyJustReleased_NativeFunction, "ReturnValue");
        WasControllerKeyJustPressed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "WasControllerKeyJustPressed");
        WasControllerKeyJustPressed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(WasControllerKeyJustPressed_NativeFunction);
        WasControllerKeyJustPressed_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WasControllerKeyJustPressed_NativeFunction, "Key");
        WasControllerKeyJustPressed_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WasControllerKeyJustPressed_NativeFunction, "ReturnValue");
        IsControllerKeyDown_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsControllerKeyDown");
        IsControllerKeyDown_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsControllerKeyDown_NativeFunction);
        IsControllerKeyDown_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsControllerKeyDown_NativeFunction, "Key");
        IsControllerKeyDown_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsControllerKeyDown_NativeFunction, "ReturnValue");
        GetTouchState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTouchState");
        GetTouchState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTouchState_NativeFunction);
        GetTouchState_FingerIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTouchState_NativeFunction, "FingerIndex");
        GetTouchState_LocationX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTouchState_NativeFunction, "LocationX");
        GetTouchState_LocationY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTouchState_NativeFunction, "LocationY");
        GetTouchState_bIsCurrentlyPressed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTouchState_NativeFunction, "bIsCurrentlyPressed");
        GetControllerVectorKeyState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControllerVectorKeyState");
        GetControllerVectorKeyState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControllerVectorKeyState_NativeFunction);
        GetControllerVectorKeyState_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControllerVectorKeyState_NativeFunction, "Key");
        GetControllerVectorKeyState_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControllerVectorKeyState_NativeFunction, "ReturnValue");
        GetControllerMouseDelta_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControllerMouseDelta");
        GetControllerMouseDelta_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControllerMouseDelta_NativeFunction);
        GetControllerMouseDelta_DeltaX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControllerMouseDelta_NativeFunction, "DeltaX");
        GetControllerMouseDelta_DeltaY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControllerMouseDelta_NativeFunction, "DeltaY");
        GetControllerKeyTimeDown_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControllerKeyTimeDown");
        GetControllerKeyTimeDown_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControllerKeyTimeDown_NativeFunction);
        GetControllerKeyTimeDown_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControllerKeyTimeDown_NativeFunction, "Key");
        GetControllerKeyTimeDown_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControllerKeyTimeDown_NativeFunction, "ReturnValue");
        GetControllerAnalogStickState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControllerAnalogStickState");
        GetControllerAnalogStickState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControllerAnalogStickState_NativeFunction);
        GetControllerAnalogStickState_WhichStick_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControllerAnalogStickState_NativeFunction, "WhichStick");
        GetControllerAnalogStickState_StickX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControllerAnalogStickState_NativeFunction, "StickX");
        GetControllerAnalogStickState_StickY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControllerAnalogStickState_NativeFunction, "StickY");
        GetControllerAnalogKeyState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControllerAnalogKeyState");
        GetControllerAnalogKeyState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControllerAnalogKeyState_NativeFunction);
        GetControllerAnalogKeyState_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControllerAnalogKeyState_NativeFunction, "Key");
        GetControllerAnalogKeyState_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControllerAnalogKeyState_NativeFunction, "ReturnValue");
        
        
    }
    
    protected InputComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.InputComponent:WasControllerKeyJustReleased
    static readonly IntPtr WasControllerKeyJustReleased_NativeFunction;
    static readonly int WasControllerKeyJustReleased_ParamsSize;
    static readonly int WasControllerKeyJustReleased_Key_Offset;
    static readonly int WasControllerKeyJustReleased_ReturnValue_Offset;
    
    [Obsolete("Use PlayerController.WasInputKeyJustReleased instead.")]
    public bool WasControllerKeyJustReleased(UnrealSharp.InputCore.Key key)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[WasControllerKeyJustReleased_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.InputCore.KeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, WasControllerKeyJustReleased_Key_Offset), 0, null, key);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, WasControllerKeyJustReleased_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, WasControllerKeyJustReleased_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputComponent:WasControllerKeyJustPressed
    static readonly IntPtr WasControllerKeyJustPressed_NativeFunction;
    static readonly int WasControllerKeyJustPressed_ParamsSize;
    static readonly int WasControllerKeyJustPressed_Key_Offset;
    static readonly int WasControllerKeyJustPressed_ReturnValue_Offset;
    
    [Obsolete("Use PlayerController.WasInputKeyJustPressed instead.")]
    public bool WasControllerKeyJustPressed(UnrealSharp.InputCore.Key key)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[WasControllerKeyJustPressed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.InputCore.KeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, WasControllerKeyJustPressed_Key_Offset), 0, null, key);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, WasControllerKeyJustPressed_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, WasControllerKeyJustPressed_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputComponent:IsControllerKeyDown
    static readonly IntPtr IsControllerKeyDown_NativeFunction;
    static readonly int IsControllerKeyDown_ParamsSize;
    static readonly int IsControllerKeyDown_Key_Offset;
    static readonly int IsControllerKeyDown_ReturnValue_Offset;
    
    [Obsolete("Use PlayerController.IsInputKeyDown instead.")]
    public bool IsControllerKeyDown(UnrealSharp.InputCore.Key key)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsControllerKeyDown_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.InputCore.KeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsControllerKeyDown_Key_Offset), 0, null, key);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsControllerKeyDown_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsControllerKeyDown_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputComponent:GetTouchState
    static readonly IntPtr GetTouchState_NativeFunction;
    static readonly int GetTouchState_ParamsSize;
    static readonly int GetTouchState_FingerIndex_Offset;
    static readonly int GetTouchState_LocationX_Offset;
    static readonly int GetTouchState_LocationY_Offset;
    static readonly int GetTouchState_bIsCurrentlyPressed_Offset;
    
    [Obsolete("Use PlayerController.GetInputTouchState instead.")]
    public void GetTouchState(int fingerIndex, out float locationX, out float locationY, out bool bIsCurrentlyPressed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTouchState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetTouchState_FingerIndex_Offset), 0, null, fingerIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTouchState_NativeFunction, ParamsBuffer);
            
            locationX = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetTouchState_LocationX_Offset), 0, null);
            locationY = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetTouchState_LocationY_Offset), 0, null);
            bIsCurrentlyPressed = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetTouchState_bIsCurrentlyPressed_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.InputComponent:GetControllerVectorKeyState
    static readonly IntPtr GetControllerVectorKeyState_NativeFunction;
    static readonly int GetControllerVectorKeyState_ParamsSize;
    static readonly int GetControllerVectorKeyState_Key_Offset;
    static readonly int GetControllerVectorKeyState_ReturnValue_Offset;
    
    [Obsolete("Use PlayerController.GetInputVectorKeyState instead.")]
    public System.DoubleNumerics.Vector3 GetControllerVectorKeyState(UnrealSharp.InputCore.Key key)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControllerVectorKeyState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.InputCore.KeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetControllerVectorKeyState_Key_Offset), 0, null, key);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControllerVectorKeyState_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetControllerVectorKeyState_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputComponent:GetControllerMouseDelta
    static readonly IntPtr GetControllerMouseDelta_NativeFunction;
    static readonly int GetControllerMouseDelta_ParamsSize;
    static readonly int GetControllerMouseDelta_DeltaX_Offset;
    static readonly int GetControllerMouseDelta_DeltaY_Offset;
    
    [Obsolete("Use PlayerController.GetInputMouseDelta instead.")]
    public void GetControllerMouseDelta(out float deltaX, out float deltaY)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControllerMouseDelta_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControllerMouseDelta_NativeFunction, ParamsBuffer);
            
            deltaX = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetControllerMouseDelta_DeltaX_Offset), 0, null);
            deltaY = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetControllerMouseDelta_DeltaY_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.InputComponent:GetControllerKeyTimeDown
    static readonly IntPtr GetControllerKeyTimeDown_NativeFunction;
    static readonly int GetControllerKeyTimeDown_ParamsSize;
    static readonly int GetControllerKeyTimeDown_Key_Offset;
    static readonly int GetControllerKeyTimeDown_ReturnValue_Offset;
    
    [Obsolete("Use PlayerController.GetInputKeyTimeDown instead.")]
    public float GetControllerKeyTimeDown(UnrealSharp.InputCore.Key key)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControllerKeyTimeDown_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.InputCore.KeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetControllerKeyTimeDown_Key_Offset), 0, null, key);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControllerKeyTimeDown_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetControllerKeyTimeDown_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputComponent:GetControllerAnalogStickState
    static readonly IntPtr GetControllerAnalogStickState_NativeFunction;
    static readonly int GetControllerAnalogStickState_ParamsSize;
    static readonly int GetControllerAnalogStickState_WhichStick_Offset;
    static readonly int GetControllerAnalogStickState_StickX_Offset;
    static readonly int GetControllerAnalogStickState_StickY_Offset;
    
    [Obsolete("Use PlayerController.GetInputAnalogStickState instead.")]
    public void GetControllerAnalogStickState(UnrealSharp.Engine.EControllerAnalogStick whichStick, out float stickX, out float stickY)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControllerAnalogStickState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EControllerAnalogStick>.ToNative(IntPtr.Add(ParamsBuffer, GetControllerAnalogStickState_WhichStick_Offset), 0, null, whichStick);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControllerAnalogStickState_NativeFunction, ParamsBuffer);
            
            stickX = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetControllerAnalogStickState_StickX_Offset), 0, null);
            stickY = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetControllerAnalogStickState_StickY_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.InputComponent:GetControllerAnalogKeyState
    static readonly IntPtr GetControllerAnalogKeyState_NativeFunction;
    static readonly int GetControllerAnalogKeyState_ParamsSize;
    static readonly int GetControllerAnalogKeyState_Key_Offset;
    static readonly int GetControllerAnalogKeyState_ReturnValue_Offset;
    
    [Obsolete("Use PlayerController.GetInputAnalogKeyState instead.")]
    public float GetControllerAnalogKeyState(UnrealSharp.InputCore.Key key)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControllerAnalogKeyState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.InputCore.KeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetControllerAnalogKeyState_Key_Offset), 0, null, key);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControllerAnalogKeyState_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetControllerAnalogKeyState_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class InputDeviceLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static InputDeviceLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InputDeviceLibrary");
        
        
        PlatformUserId_None_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlatformUserId_None");
        PlatformUserId_None_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PlatformUserId_None_NativeFunction);
        PlatformUserId_None_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlatformUserId_None_NativeFunction, "ReturnValue");
        NotEqual_PlatformUserId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_PlatformUserId");
        NotEqual_PlatformUserId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_PlatformUserId_NativeFunction);
        NotEqual_PlatformUserId_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_PlatformUserId_NativeFunction, "A");
        NotEqual_PlatformUserId_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_PlatformUserId_NativeFunction, "B");
        NotEqual_PlatformUserId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_PlatformUserId_NativeFunction, "ReturnValue");
        NotEqual_InputDeviceId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_InputDeviceId");
        NotEqual_InputDeviceId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_InputDeviceId_NativeFunction);
        NotEqual_InputDeviceId_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_InputDeviceId_NativeFunction, "A");
        NotEqual_InputDeviceId_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_InputDeviceId_NativeFunction, "B");
        NotEqual_InputDeviceId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_InputDeviceId_NativeFunction, "ReturnValue");
        IsValidPlatformId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValidPlatformId");
        IsValidPlatformId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValidPlatformId_NativeFunction);
        IsValidPlatformId_UserId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidPlatformId_NativeFunction, "UserId");
        IsValidPlatformId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidPlatformId_NativeFunction, "ReturnValue");
        IsValidInputDevice_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValidInputDevice");
        IsValidInputDevice_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValidInputDevice_NativeFunction);
        IsValidInputDevice_DeviceId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidInputDevice_NativeFunction, "DeviceId");
        IsValidInputDevice_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidInputDevice_NativeFunction, "ReturnValue");
        IsUnpairedUserId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsUnpairedUserId");
        IsUnpairedUserId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsUnpairedUserId_NativeFunction);
        IsUnpairedUserId_PlatformId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsUnpairedUserId_NativeFunction, "PlatformId");
        IsUnpairedUserId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsUnpairedUserId_NativeFunction, "ReturnValue");
        IsInputDeviceMappedToUnpairedUser_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsInputDeviceMappedToUnpairedUser");
        IsInputDeviceMappedToUnpairedUser_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsInputDeviceMappedToUnpairedUser_NativeFunction);
        IsInputDeviceMappedToUnpairedUser_InputDevice_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsInputDeviceMappedToUnpairedUser_NativeFunction, "InputDevice");
        IsInputDeviceMappedToUnpairedUser_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsInputDeviceMappedToUnpairedUser_NativeFunction, "ReturnValue");
        IsDevicePropertyHandleValid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsDevicePropertyHandleValid");
        IsDevicePropertyHandleValid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsDevicePropertyHandleValid_NativeFunction);
        IsDevicePropertyHandleValid_InHandle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsDevicePropertyHandleValid_NativeFunction, "InHandle");
        IsDevicePropertyHandleValid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsDevicePropertyHandleValid_NativeFunction, "ReturnValue");
        InputDeviceId_None_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "InputDeviceId_None");
        InputDeviceId_None_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(InputDeviceId_None_NativeFunction);
        InputDeviceId_None_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InputDeviceId_None_NativeFunction, "ReturnValue");
        GetUserForUnpairedInputDevices_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetUserForUnpairedInputDevices");
        GetUserForUnpairedInputDevices_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetUserForUnpairedInputDevices_NativeFunction);
        GetUserForUnpairedInputDevices_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUserForUnpairedInputDevices_NativeFunction, "ReturnValue");
        GetUserForInputDevice_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetUserForInputDevice");
        GetUserForInputDevice_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetUserForInputDevice_NativeFunction);
        GetUserForInputDevice_DeviceId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUserForInputDevice_NativeFunction, "DeviceId");
        GetUserForInputDevice_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUserForInputDevice_NativeFunction, "ReturnValue");
        GetPrimaryPlatformUser_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPrimaryPlatformUser");
        GetPrimaryPlatformUser_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPrimaryPlatformUser_NativeFunction);
        GetPrimaryPlatformUser_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPrimaryPlatformUser_NativeFunction, "ReturnValue");
        GetPrimaryInputDeviceForUser_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPrimaryInputDeviceForUser");
        GetPrimaryInputDeviceForUser_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPrimaryInputDeviceForUser_NativeFunction);
        GetPrimaryInputDeviceForUser_UserId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPrimaryInputDeviceForUser_NativeFunction, "UserId");
        GetPrimaryInputDeviceForUser_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPrimaryInputDeviceForUser_NativeFunction, "ReturnValue");
        GetPlayerControllerFromPlatformUser_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayerControllerFromPlatformUser");
        GetPlayerControllerFromPlatformUser_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayerControllerFromPlatformUser_NativeFunction);
        GetPlayerControllerFromPlatformUser_UserId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerControllerFromPlatformUser_NativeFunction, "UserId");
        GetPlayerControllerFromPlatformUser_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerControllerFromPlatformUser_NativeFunction, "ReturnValue");
        GetPlayerControllerFromInputDevice_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayerControllerFromInputDevice");
        GetPlayerControllerFromInputDevice_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayerControllerFromInputDevice_NativeFunction);
        GetPlayerControllerFromInputDevice_DeviceId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerControllerFromInputDevice_NativeFunction, "DeviceId");
        GetPlayerControllerFromInputDevice_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerControllerFromInputDevice_NativeFunction, "ReturnValue");
        GetInputDeviceConnectionState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInputDeviceConnectionState");
        GetInputDeviceConnectionState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInputDeviceConnectionState_NativeFunction);
        GetInputDeviceConnectionState_DeviceId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputDeviceConnectionState_NativeFunction, "DeviceId");
        GetInputDeviceConnectionState_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputDeviceConnectionState_NativeFunction, "ReturnValue");
        GetDefaultInputDevice_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDefaultInputDevice");
        GetDefaultInputDevice_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDefaultInputDevice_NativeFunction);
        GetDefaultInputDevice_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultInputDevice_NativeFunction, "ReturnValue");
        GetAllInputDevicesForUser_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAllInputDevicesForUser");
        GetAllInputDevicesForUser_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAllInputDevicesForUser_NativeFunction);
        GetAllInputDevicesForUser_UserId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllInputDevicesForUser_NativeFunction, "UserId");
        GetAllInputDevicesForUser_OutInputDevices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllInputDevicesForUser_NativeFunction, "OutInputDevices");
        GetAllInputDevicesForUser_OutInputDevices_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAllInputDevicesForUser_NativeFunction, "OutInputDevices");
        GetAllInputDevicesForUser_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllInputDevicesForUser_NativeFunction, "ReturnValue");
        GetAllInputDevices_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAllInputDevices");
        GetAllInputDevices_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAllInputDevices_NativeFunction);
        GetAllInputDevices_OutInputDevices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllInputDevices_NativeFunction, "OutInputDevices");
        GetAllInputDevices_OutInputDevices_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAllInputDevices_NativeFunction, "OutInputDevices");
        GetAllInputDevices_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllInputDevices_NativeFunction, "ReturnValue");
        GetAllConnectedInputDevices_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAllConnectedInputDevices");
        GetAllConnectedInputDevices_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAllConnectedInputDevices_NativeFunction);
        GetAllConnectedInputDevices_OutInputDevices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllConnectedInputDevices_NativeFunction, "OutInputDevices");
        GetAllConnectedInputDevices_OutInputDevices_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAllConnectedInputDevices_NativeFunction, "OutInputDevices");
        GetAllConnectedInputDevices_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllConnectedInputDevices_NativeFunction, "ReturnValue");
        GetAllActiveUsers_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAllActiveUsers");
        GetAllActiveUsers_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAllActiveUsers_NativeFunction);
        GetAllActiveUsers_OutUsers_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllActiveUsers_NativeFunction, "OutUsers");
        GetAllActiveUsers_OutUsers_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAllActiveUsers_NativeFunction, "OutUsers");
        GetAllActiveUsers_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllActiveUsers_NativeFunction, "ReturnValue");
        EqualEqual_PlatformUserId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_PlatformUserId");
        EqualEqual_PlatformUserId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_PlatformUserId_NativeFunction);
        EqualEqual_PlatformUserId_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_PlatformUserId_NativeFunction, "A");
        EqualEqual_PlatformUserId_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_PlatformUserId_NativeFunction, "B");
        EqualEqual_PlatformUserId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_PlatformUserId_NativeFunction, "ReturnValue");
        EqualEqual_InputDeviceId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_InputDeviceId");
        EqualEqual_InputDeviceId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_InputDeviceId_NativeFunction);
        EqualEqual_InputDeviceId_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_InputDeviceId_NativeFunction, "A");
        EqualEqual_InputDeviceId_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_InputDeviceId_NativeFunction, "B");
        EqualEqual_InputDeviceId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_InputDeviceId_NativeFunction, "ReturnValue");
        
        
    }
    
    protected InputDeviceLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.InputDeviceLibrary:PlatformUserId_None
    static readonly IntPtr PlatformUserId_None_NativeFunction;
    static readonly int PlatformUserId_None_ParamsSize;
    static readonly int PlatformUserId_None_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.PlatformUserId PlatformUserId_None()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PlatformUserId_None_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, PlatformUserId_None_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.PlatformUserId returnValue;
            returnValue = UnrealSharp.CoreUObject.PlatformUserIdMarshaler.FromNative(IntPtr.Add(ParamsBuffer, PlatformUserId_None_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:NotEqual_PlatformUserId
    static readonly IntPtr NotEqual_PlatformUserId_NativeFunction;
    static readonly int NotEqual_PlatformUserId_ParamsSize;
    static readonly int NotEqual_PlatformUserId_A_Offset;
    static readonly int NotEqual_PlatformUserId_B_Offset;
    static readonly int NotEqual_PlatformUserId_ReturnValue_Offset;
    
    public static bool NotEqual(UnrealSharp.CoreUObject.PlatformUserId a, UnrealSharp.CoreUObject.PlatformUserId b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_PlatformUserId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.PlatformUserIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_PlatformUserId_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.PlatformUserIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_PlatformUserId_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_PlatformUserId_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_PlatformUserId_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:NotEqual_InputDeviceId
    static readonly IntPtr NotEqual_InputDeviceId_NativeFunction;
    static readonly int NotEqual_InputDeviceId_ParamsSize;
    static readonly int NotEqual_InputDeviceId_A_Offset;
    static readonly int NotEqual_InputDeviceId_B_Offset;
    static readonly int NotEqual_InputDeviceId_ReturnValue_Offset;
    
    public static bool NotEqual(UnrealSharp.CoreUObject.InputDeviceId a, UnrealSharp.CoreUObject.InputDeviceId b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_InputDeviceId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.InputDeviceIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_InputDeviceId_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.InputDeviceIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_InputDeviceId_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_InputDeviceId_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_InputDeviceId_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:IsValidPlatformId
    static readonly IntPtr IsValidPlatformId_NativeFunction;
    static readonly int IsValidPlatformId_ParamsSize;
    static readonly int IsValidPlatformId_UserId_Offset;
    static readonly int IsValidPlatformId_ReturnValue_Offset;
    
    public static bool IsValidPlatformId(UnrealSharp.CoreUObject.PlatformUserId userId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValidPlatformId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.PlatformUserIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsValidPlatformId_UserId_Offset), 0, null, userId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsValidPlatformId_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValidPlatformId_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:IsValidInputDevice
    static readonly IntPtr IsValidInputDevice_NativeFunction;
    static readonly int IsValidInputDevice_ParamsSize;
    static readonly int IsValidInputDevice_DeviceId_Offset;
    static readonly int IsValidInputDevice_ReturnValue_Offset;
    
    public static bool IsValidInputDevice(UnrealSharp.CoreUObject.InputDeviceId deviceId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValidInputDevice_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.InputDeviceIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsValidInputDevice_DeviceId_Offset), 0, null, deviceId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsValidInputDevice_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValidInputDevice_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:IsUnpairedUserId
    static readonly IntPtr IsUnpairedUserId_NativeFunction;
    static readonly int IsUnpairedUserId_ParamsSize;
    static readonly int IsUnpairedUserId_PlatformId_Offset;
    static readonly int IsUnpairedUserId_ReturnValue_Offset;
    
    public static bool IsUnpairedUserId(UnrealSharp.CoreUObject.PlatformUserId platformId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsUnpairedUserId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.PlatformUserIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsUnpairedUserId_PlatformId_Offset), 0, null, platformId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsUnpairedUserId_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsUnpairedUserId_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:IsInputDeviceMappedToUnpairedUser
    static readonly IntPtr IsInputDeviceMappedToUnpairedUser_NativeFunction;
    static readonly int IsInputDeviceMappedToUnpairedUser_ParamsSize;
    static readonly int IsInputDeviceMappedToUnpairedUser_InputDevice_Offset;
    static readonly int IsInputDeviceMappedToUnpairedUser_ReturnValue_Offset;
    
    public static bool IsInputDeviceMappedToUnpairedUser(UnrealSharp.CoreUObject.InputDeviceId inputDevice)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsInputDeviceMappedToUnpairedUser_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.InputDeviceIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsInputDeviceMappedToUnpairedUser_InputDevice_Offset), 0, null, inputDevice);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsInputDeviceMappedToUnpairedUser_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsInputDeviceMappedToUnpairedUser_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:IsDevicePropertyHandleValid
    static readonly IntPtr IsDevicePropertyHandleValid_NativeFunction;
    static readonly int IsDevicePropertyHandleValid_ParamsSize;
    static readonly int IsDevicePropertyHandleValid_InHandle_Offset;
    static readonly int IsDevicePropertyHandleValid_ReturnValue_Offset;
    
    public static bool IsDevicePropertyHandleValid(UnrealSharp.Engine.InputDevicePropertyHandle inHandle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsDevicePropertyHandleValid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.InputDevicePropertyHandleMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsDevicePropertyHandleValid_InHandle_Offset), 0, null, inHandle);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsDevicePropertyHandleValid_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsDevicePropertyHandleValid_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:InputDeviceId_None
    static readonly IntPtr InputDeviceId_None_NativeFunction;
    static readonly int InputDeviceId_None_ParamsSize;
    static readonly int InputDeviceId_None_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.InputDeviceId InputDeviceId_None()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[InputDeviceId_None_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, InputDeviceId_None_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.InputDeviceId returnValue;
            returnValue = UnrealSharp.CoreUObject.InputDeviceIdMarshaler.FromNative(IntPtr.Add(ParamsBuffer, InputDeviceId_None_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:GetUserForUnpairedInputDevices
    static readonly IntPtr GetUserForUnpairedInputDevices_NativeFunction;
    static readonly int GetUserForUnpairedInputDevices_ParamsSize;
    static readonly int GetUserForUnpairedInputDevices_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.PlatformUserId GetUserForUnpairedInputDevices()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetUserForUnpairedInputDevices_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetUserForUnpairedInputDevices_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.PlatformUserId returnValue;
            returnValue = UnrealSharp.CoreUObject.PlatformUserIdMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetUserForUnpairedInputDevices_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:GetUserForInputDevice
    static readonly IntPtr GetUserForInputDevice_NativeFunction;
    static readonly int GetUserForInputDevice_ParamsSize;
    static readonly int GetUserForInputDevice_DeviceId_Offset;
    static readonly int GetUserForInputDevice_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.PlatformUserId GetUserForInputDevice(UnrealSharp.CoreUObject.InputDeviceId deviceId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetUserForInputDevice_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.InputDeviceIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetUserForInputDevice_DeviceId_Offset), 0, null, deviceId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetUserForInputDevice_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.PlatformUserId returnValue;
            returnValue = UnrealSharp.CoreUObject.PlatformUserIdMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetUserForInputDevice_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:GetPrimaryPlatformUser
    static readonly IntPtr GetPrimaryPlatformUser_NativeFunction;
    static readonly int GetPrimaryPlatformUser_ParamsSize;
    static readonly int GetPrimaryPlatformUser_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.PlatformUserId GetPrimaryPlatformUser()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPrimaryPlatformUser_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPrimaryPlatformUser_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.PlatformUserId returnValue;
            returnValue = UnrealSharp.CoreUObject.PlatformUserIdMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetPrimaryPlatformUser_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:GetPrimaryInputDeviceForUser
    static readonly IntPtr GetPrimaryInputDeviceForUser_NativeFunction;
    static readonly int GetPrimaryInputDeviceForUser_ParamsSize;
    static readonly int GetPrimaryInputDeviceForUser_UserId_Offset;
    static readonly int GetPrimaryInputDeviceForUser_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.InputDeviceId GetPrimaryInputDeviceForUser(UnrealSharp.CoreUObject.PlatformUserId userId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPrimaryInputDeviceForUser_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.PlatformUserIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetPrimaryInputDeviceForUser_UserId_Offset), 0, null, userId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPrimaryInputDeviceForUser_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.InputDeviceId returnValue;
            returnValue = UnrealSharp.CoreUObject.InputDeviceIdMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetPrimaryInputDeviceForUser_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:GetPlayerControllerFromPlatformUser
    static readonly IntPtr GetPlayerControllerFromPlatformUser_NativeFunction;
    static readonly int GetPlayerControllerFromPlatformUser_ParamsSize;
    static readonly int GetPlayerControllerFromPlatformUser_UserId_Offset;
    static readonly int GetPlayerControllerFromPlatformUser_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.PlayerController GetPlayerControllerFromPlatformUser(UnrealSharp.CoreUObject.PlatformUserId userId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayerControllerFromPlatformUser_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.PlatformUserIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerControllerFromPlatformUser_UserId_Offset), 0, null, userId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlayerControllerFromPlatformUser_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PlayerController returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(ParamsBuffer, GetPlayerControllerFromPlatformUser_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:GetPlayerControllerFromInputDevice
    static readonly IntPtr GetPlayerControllerFromInputDevice_NativeFunction;
    static readonly int GetPlayerControllerFromInputDevice_ParamsSize;
    static readonly int GetPlayerControllerFromInputDevice_DeviceId_Offset;
    static readonly int GetPlayerControllerFromInputDevice_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.PlayerController GetPlayerControllerFromInputDevice(UnrealSharp.CoreUObject.InputDeviceId deviceId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayerControllerFromInputDevice_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.InputDeviceIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetPlayerControllerFromInputDevice_DeviceId_Offset), 0, null, deviceId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlayerControllerFromInputDevice_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PlayerController returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(ParamsBuffer, GetPlayerControllerFromInputDevice_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:GetInputDeviceConnectionState
    static readonly IntPtr GetInputDeviceConnectionState_NativeFunction;
    static readonly int GetInputDeviceConnectionState_ParamsSize;
    static readonly int GetInputDeviceConnectionState_DeviceId_Offset;
    static readonly int GetInputDeviceConnectionState_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.EInputDeviceConnectionState GetInputDeviceConnectionState(UnrealSharp.CoreUObject.InputDeviceId deviceId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInputDeviceConnectionState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.InputDeviceIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetInputDeviceConnectionState_DeviceId_Offset), 0, null, deviceId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetInputDeviceConnectionState_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.EInputDeviceConnectionState returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.EInputDeviceConnectionState>.FromNative(IntPtr.Add(ParamsBuffer, GetInputDeviceConnectionState_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:GetDefaultInputDevice
    static readonly IntPtr GetDefaultInputDevice_NativeFunction;
    static readonly int GetDefaultInputDevice_ParamsSize;
    static readonly int GetDefaultInputDevice_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.InputDeviceId GetDefaultInputDevice()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDefaultInputDevice_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetDefaultInputDevice_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.InputDeviceId returnValue;
            returnValue = UnrealSharp.CoreUObject.InputDeviceIdMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetDefaultInputDevice_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:GetAllInputDevicesForUser
    static readonly IntPtr GetAllInputDevicesForUser_NativeFunction;
    static readonly int GetAllInputDevicesForUser_ParamsSize;
    static readonly int GetAllInputDevicesForUser_UserId_Offset;
    static readonly int GetAllInputDevicesForUser_OutInputDevices_Offset;
    static readonly int GetAllInputDevicesForUser_OutInputDevices_ElementSize;
    static readonly int GetAllInputDevicesForUser_ReturnValue_Offset;
    
    public static int GetAllInputDevicesForUser(UnrealSharp.CoreUObject.PlatformUserId userId, out System.Collections.Generic.IList<UnrealSharp.CoreUObject.InputDeviceId> outInputDevices)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAllInputDevicesForUser_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.PlatformUserIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetAllInputDevicesForUser_UserId_Offset), 0, null, userId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAllInputDevicesForUser_NativeFunction, ParamsBuffer);
            
            IntPtr OutInputDevices_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAllInputDevicesForUser_OutInputDevices_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.InputDeviceId> OutInputDevices_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.InputDeviceId> (1, UnrealSharp.CoreUObject.InputDeviceIdMarshaler.ToNative, UnrealSharp.CoreUObject.InputDeviceIdMarshaler.FromNative, GetAllInputDevicesForUser_OutInputDevices_ElementSize);
            outInputDevices = OutInputDevices_Marshaler.FromNative(OutInputDevices_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.InputDeviceId>.DestructInstance(OutInputDevices_NativeBuffer, 0);
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetAllInputDevicesForUser_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:GetAllInputDevices
    static readonly IntPtr GetAllInputDevices_NativeFunction;
    static readonly int GetAllInputDevices_ParamsSize;
    static readonly int GetAllInputDevices_OutInputDevices_Offset;
    static readonly int GetAllInputDevices_OutInputDevices_ElementSize;
    static readonly int GetAllInputDevices_ReturnValue_Offset;
    
    public static int GetAllInputDevices(out System.Collections.Generic.IList<UnrealSharp.CoreUObject.InputDeviceId> outInputDevices)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAllInputDevices_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAllInputDevices_NativeFunction, ParamsBuffer);
            
            IntPtr OutInputDevices_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAllInputDevices_OutInputDevices_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.InputDeviceId> OutInputDevices_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.InputDeviceId> (1, UnrealSharp.CoreUObject.InputDeviceIdMarshaler.ToNative, UnrealSharp.CoreUObject.InputDeviceIdMarshaler.FromNative, GetAllInputDevices_OutInputDevices_ElementSize);
            outInputDevices = OutInputDevices_Marshaler.FromNative(OutInputDevices_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.InputDeviceId>.DestructInstance(OutInputDevices_NativeBuffer, 0);
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetAllInputDevices_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:GetAllConnectedInputDevices
    static readonly IntPtr GetAllConnectedInputDevices_NativeFunction;
    static readonly int GetAllConnectedInputDevices_ParamsSize;
    static readonly int GetAllConnectedInputDevices_OutInputDevices_Offset;
    static readonly int GetAllConnectedInputDevices_OutInputDevices_ElementSize;
    static readonly int GetAllConnectedInputDevices_ReturnValue_Offset;
    
    public static int GetAllConnectedInputDevices(out System.Collections.Generic.IList<UnrealSharp.CoreUObject.InputDeviceId> outInputDevices)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAllConnectedInputDevices_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAllConnectedInputDevices_NativeFunction, ParamsBuffer);
            
            IntPtr OutInputDevices_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAllConnectedInputDevices_OutInputDevices_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.InputDeviceId> OutInputDevices_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.InputDeviceId> (1, UnrealSharp.CoreUObject.InputDeviceIdMarshaler.ToNative, UnrealSharp.CoreUObject.InputDeviceIdMarshaler.FromNative, GetAllConnectedInputDevices_OutInputDevices_ElementSize);
            outInputDevices = OutInputDevices_Marshaler.FromNative(OutInputDevices_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.InputDeviceId>.DestructInstance(OutInputDevices_NativeBuffer, 0);
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetAllConnectedInputDevices_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:GetAllActiveUsers
    static readonly IntPtr GetAllActiveUsers_NativeFunction;
    static readonly int GetAllActiveUsers_ParamsSize;
    static readonly int GetAllActiveUsers_OutUsers_Offset;
    static readonly int GetAllActiveUsers_OutUsers_ElementSize;
    static readonly int GetAllActiveUsers_ReturnValue_Offset;
    
    public static int GetAllActiveUsers(out System.Collections.Generic.IList<UnrealSharp.CoreUObject.PlatformUserId> outUsers)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAllActiveUsers_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAllActiveUsers_NativeFunction, ParamsBuffer);
            
            IntPtr OutUsers_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAllActiveUsers_OutUsers_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.PlatformUserId> OutUsers_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.PlatformUserId> (1, UnrealSharp.CoreUObject.PlatformUserIdMarshaler.ToNative, UnrealSharp.CoreUObject.PlatformUserIdMarshaler.FromNative, GetAllActiveUsers_OutUsers_ElementSize);
            outUsers = OutUsers_Marshaler.FromNative(OutUsers_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.PlatformUserId>.DestructInstance(OutUsers_NativeBuffer, 0);
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetAllActiveUsers_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:EqualEqual_PlatformUserId
    static readonly IntPtr EqualEqual_PlatformUserId_NativeFunction;
    static readonly int EqualEqual_PlatformUserId_ParamsSize;
    static readonly int EqualEqual_PlatformUserId_A_Offset;
    static readonly int EqualEqual_PlatformUserId_B_Offset;
    static readonly int EqualEqual_PlatformUserId_ReturnValue_Offset;
    
    public static bool Equals(UnrealSharp.CoreUObject.PlatformUserId a, UnrealSharp.CoreUObject.PlatformUserId b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_PlatformUserId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.PlatformUserIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_PlatformUserId_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.PlatformUserIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_PlatformUserId_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_PlatformUserId_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_PlatformUserId_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InputDeviceLibrary:EqualEqual_InputDeviceId
    static readonly IntPtr EqualEqual_InputDeviceId_NativeFunction;
    static readonly int EqualEqual_InputDeviceId_ParamsSize;
    static readonly int EqualEqual_InputDeviceId_A_Offset;
    static readonly int EqualEqual_InputDeviceId_B_Offset;
    static readonly int EqualEqual_InputDeviceId_ReturnValue_Offset;
    
    public static bool Equals(UnrealSharp.CoreUObject.InputDeviceId a, UnrealSharp.CoreUObject.InputDeviceId b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_InputDeviceId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.InputDeviceIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_InputDeviceId_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.InputDeviceIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_InputDeviceId_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_InputDeviceId_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_InputDeviceId_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
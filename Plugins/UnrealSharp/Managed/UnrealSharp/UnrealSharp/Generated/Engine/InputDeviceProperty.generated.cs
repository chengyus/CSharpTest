// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
abstract public partial class InputDeviceProperty : UnrealSharp.CoreUObject.Object
{
    
    static InputDeviceProperty()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InputDeviceProperty");
        
        PropertyDuration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PropertyDuration");
        
        
        IntPtr ResetDeviceProperty_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetDeviceProperty");
        ResetDeviceProperty_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ResetDeviceProperty_NativeFunction);
        ResetDeviceProperty_PlatformUser_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResetDeviceProperty_NativeFunction, "PlatformUser");
        ResetDeviceProperty_DeviceId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResetDeviceProperty_NativeFunction, "DeviceId");
        ResetDeviceProperty_bForceReset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResetDeviceProperty_NativeFunction, "bForceReset");
        
        IntPtr EvaluateDeviceProperty_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EvaluateDeviceProperty");
        EvaluateDeviceProperty_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EvaluateDeviceProperty_NativeFunction);
        EvaluateDeviceProperty_PlatformUser_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateDeviceProperty_NativeFunction, "PlatformUser");
        EvaluateDeviceProperty_DeviceId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateDeviceProperty_NativeFunction, "DeviceId");
        EvaluateDeviceProperty_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateDeviceProperty_NativeFunction, "DeltaTime");
        EvaluateDeviceProperty_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EvaluateDeviceProperty_NativeFunction, "Duration");
        
        
    }
    
    protected InputDeviceProperty(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Engine.InputDeviceProperty:PropertyDuration
    static readonly int PropertyDuration_Offset;
    
    public float PropertyDuration
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PropertyDuration_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PropertyDuration_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Engine.InputDeviceProperty:ResetDeviceProperty
    IntPtr ResetDeviceProperty_NativeFunction;
    static readonly int ResetDeviceProperty_ParamsSize;
    static readonly int ResetDeviceProperty_PlatformUser_Offset;
    static readonly int ResetDeviceProperty_DeviceId_Offset;
    static readonly int ResetDeviceProperty_bForceReset_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void ResetDeviceProperty(UnrealSharp.CoreUObject.PlatformUserId platformUser, UnrealSharp.CoreUObject.InputDeviceId deviceId, bool bForceReset)
    {
        unsafe
        {
            if (ResetDeviceProperty_NativeFunction == IntPtr.Zero)
            {
                ResetDeviceProperty_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ResetDeviceProperty");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ResetDeviceProperty_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.PlatformUserIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ResetDeviceProperty_PlatformUser_Offset), 0, null, platformUser);
            UnrealSharp.CoreUObject.InputDeviceIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ResetDeviceProperty_DeviceId_Offset), 0, null, deviceId);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ResetDeviceProperty_bForceReset_Offset), 0, null, bForceReset);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetDeviceProperty_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ResetDeviceProperty_Implementation(UnrealSharp.CoreUObject.PlatformUserId platformUser, UnrealSharp.CoreUObject.InputDeviceId deviceId, bool bForceReset)
    {
    }
    void Invoke_ResetDeviceProperty(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.CoreUObject.PlatformUserId platformUser = UnrealSharp.CoreUObject.PlatformUserIdMarshaler.FromNative(IntPtr.Add(buffer, ResetDeviceProperty_PlatformUser_Offset), 0, null);
            UnrealSharp.CoreUObject.InputDeviceId deviceId = UnrealSharp.CoreUObject.InputDeviceIdMarshaler.FromNative(IntPtr.Add(buffer, ResetDeviceProperty_DeviceId_Offset), 0, null);
            bool bForceReset = BoolMarshaller.FromNative(IntPtr.Add(buffer, ResetDeviceProperty_bForceReset_Offset), 0, null);
            ResetDeviceProperty_Implementation(platformUser, deviceId, bForceReset);
        }
    }
    
    // Function /Script/Engine.InputDeviceProperty:EvaluateDeviceProperty
    IntPtr EvaluateDeviceProperty_NativeFunction;
    static readonly int EvaluateDeviceProperty_ParamsSize;
    static readonly int EvaluateDeviceProperty_PlatformUser_Offset;
    static readonly int EvaluateDeviceProperty_DeviceId_Offset;
    static readonly int EvaluateDeviceProperty_DeltaTime_Offset;
    static readonly int EvaluateDeviceProperty_Duration_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void EvaluateDeviceProperty(UnrealSharp.CoreUObject.PlatformUserId platformUser, UnrealSharp.CoreUObject.InputDeviceId deviceId, float deltaTime, float duration)
    {
        unsafe
        {
            if (EvaluateDeviceProperty_NativeFunction == IntPtr.Zero)
            {
                EvaluateDeviceProperty_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "EvaluateDeviceProperty");
            }
            byte* ParamsBufferAllocation = stackalloc byte[EvaluateDeviceProperty_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.PlatformUserIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, EvaluateDeviceProperty_PlatformUser_Offset), 0, null, platformUser);
            UnrealSharp.CoreUObject.InputDeviceIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, EvaluateDeviceProperty_DeviceId_Offset), 0, null, deviceId);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, EvaluateDeviceProperty_DeltaTime_Offset), 0, null, deltaTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, EvaluateDeviceProperty_Duration_Offset), 0, null, duration);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, EvaluateDeviceProperty_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void EvaluateDeviceProperty_Implementation(UnrealSharp.CoreUObject.PlatformUserId platformUser, UnrealSharp.CoreUObject.InputDeviceId deviceId, float deltaTime, float duration)
    {
    }
    void Invoke_EvaluateDeviceProperty(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.CoreUObject.PlatformUserId platformUser = UnrealSharp.CoreUObject.PlatformUserIdMarshaler.FromNative(IntPtr.Add(buffer, EvaluateDeviceProperty_PlatformUser_Offset), 0, null);
            UnrealSharp.CoreUObject.InputDeviceId deviceId = UnrealSharp.CoreUObject.InputDeviceIdMarshaler.FromNative(IntPtr.Add(buffer, EvaluateDeviceProperty_DeviceId_Offset), 0, null);
            float deltaTime = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, EvaluateDeviceProperty_DeltaTime_Offset), 0, null);
            float duration = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, EvaluateDeviceProperty_Duration_Offset), 0, null);
            EvaluateDeviceProperty_Implementation(platformUser, deviceId, deltaTime, duration);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class InstancedStaticMeshComponent : UnrealSharp.Engine.StaticMeshComponent, ISMInstanceManager
{
    
    static InstancedStaticMeshComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InstancedStaticMeshComponent");
        
        InstancingRandomSeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InstancingRandomSeed");
        InstanceStartCullDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InstanceStartCullDistance");
        InstanceEndCullDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InstanceEndCullDistance");
        
        UpdateInstanceTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UpdateInstanceTransform");
        UpdateInstanceTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UpdateInstanceTransform_NativeFunction);
        UpdateInstanceTransform_InstanceIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateInstanceTransform_NativeFunction, "InstanceIndex");
        UpdateInstanceTransform_NewInstanceTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateInstanceTransform_NativeFunction, "NewInstanceTransform");
        UpdateInstanceTransform_bWorldSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateInstanceTransform_NativeFunction, "bWorldSpace");
        UpdateInstanceTransform_bMarkRenderStateDirty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateInstanceTransform_NativeFunction, "bMarkRenderStateDirty");
        UpdateInstanceTransform_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateInstanceTransform_NativeFunction, "bTeleport");
        UpdateInstanceTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateInstanceTransform_NativeFunction, "ReturnValue");
        SetNumCustomDataFloats_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNumCustomDataFloats");
        SetNumCustomDataFloats_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNumCustomDataFloats_NativeFunction);
        SetNumCustomDataFloats_InNumCustomDataFloats_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNumCustomDataFloats_NativeFunction, "InNumCustomDataFloats");
        SetCustomDataValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomDataValue");
        SetCustomDataValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomDataValue_NativeFunction);
        SetCustomDataValue_InstanceIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomDataValue_NativeFunction, "InstanceIndex");
        SetCustomDataValue_CustomDataIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomDataValue_NativeFunction, "CustomDataIndex");
        SetCustomDataValue_CustomDataValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomDataValue_NativeFunction, "CustomDataValue");
        SetCustomDataValue_bMarkRenderStateDirty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomDataValue_NativeFunction, "bMarkRenderStateDirty");
        SetCustomDataValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomDataValue_NativeFunction, "ReturnValue");
        SetCullDistances_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCullDistances");
        SetCullDistances_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCullDistances_NativeFunction);
        SetCullDistances_StartCullDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCullDistances_NativeFunction, "StartCullDistance");
        SetCullDistances_EndCullDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCullDistances_NativeFunction, "EndCullDistance");
        RemoveInstances_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveInstances");
        RemoveInstances_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveInstances_NativeFunction);
        RemoveInstances_InstancesToRemove_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveInstances_NativeFunction, "InstancesToRemove");
        RemoveInstances_InstancesToRemove_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(RemoveInstances_NativeFunction, "InstancesToRemove");
        RemoveInstances_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveInstances_NativeFunction, "ReturnValue");
        RemoveInstance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveInstance");
        RemoveInstance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveInstance_NativeFunction);
        RemoveInstance_InstanceIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveInstance_NativeFunction, "InstanceIndex");
        RemoveInstance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveInstance_NativeFunction, "ReturnValue");
        IsValidInstance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValidInstance");
        IsValidInstance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValidInstance_NativeFunction);
        IsValidInstance_InstanceIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidInstance_NativeFunction, "InstanceIndex");
        IsValidInstance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidInstance_NativeFunction, "ReturnValue");
        GetInstanceTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInstanceTransform");
        GetInstanceTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInstanceTransform_NativeFunction);
        GetInstanceTransform_InstanceIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInstanceTransform_NativeFunction, "InstanceIndex");
        GetInstanceTransform_OutInstanceTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInstanceTransform_NativeFunction, "OutInstanceTransform");
        GetInstanceTransform_bWorldSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInstanceTransform_NativeFunction, "bWorldSpace");
        GetInstanceTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInstanceTransform_NativeFunction, "ReturnValue");
        GetInstancesOverlappingSphere_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInstancesOverlappingSphere");
        GetInstancesOverlappingSphere_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInstancesOverlappingSphere_NativeFunction);
        GetInstancesOverlappingSphere_Center_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInstancesOverlappingSphere_NativeFunction, "Center");
        GetInstancesOverlappingSphere_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInstancesOverlappingSphere_NativeFunction, "Radius");
        GetInstancesOverlappingSphere_bSphereInWorldSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInstancesOverlappingSphere_NativeFunction, "bSphereInWorldSpace");
        GetInstancesOverlappingSphere_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInstancesOverlappingSphere_NativeFunction, "ReturnValue");
        GetInstancesOverlappingSphere_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetInstancesOverlappingSphere_NativeFunction, "ReturnValue");
        GetInstancesOverlappingBox_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInstancesOverlappingBox");
        GetInstancesOverlappingBox_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInstancesOverlappingBox_NativeFunction);
        GetInstancesOverlappingBox_Box_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInstancesOverlappingBox_NativeFunction, "Box");
        GetInstancesOverlappingBox_bBoxInWorldSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInstancesOverlappingBox_NativeFunction, "bBoxInWorldSpace");
        GetInstancesOverlappingBox_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInstancesOverlappingBox_NativeFunction, "ReturnValue");
        GetInstancesOverlappingBox_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetInstancesOverlappingBox_NativeFunction, "ReturnValue");
        GetInstanceCount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInstanceCount");
        GetInstanceCount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInstanceCount_NativeFunction);
        GetInstanceCount_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInstanceCount_NativeFunction, "ReturnValue");
        GetCullDistances_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCullDistances");
        GetCullDistances_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCullDistances_NativeFunction);
        GetCullDistances_OutStartCullDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCullDistances_NativeFunction, "OutStartCullDistance");
        GetCullDistances_OutEndCullDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCullDistances_NativeFunction, "OutEndCullDistance");
        ClearInstances_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearInstances");
        BatchUpdateInstancesTransforms_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BatchUpdateInstancesTransforms");
        BatchUpdateInstancesTransforms_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BatchUpdateInstancesTransforms_NativeFunction);
        BatchUpdateInstancesTransforms_StartInstanceIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BatchUpdateInstancesTransforms_NativeFunction, "StartInstanceIndex");
        BatchUpdateInstancesTransforms_NewInstancesTransforms_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BatchUpdateInstancesTransforms_NativeFunction, "NewInstancesTransforms");
        BatchUpdateInstancesTransforms_NewInstancesTransforms_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BatchUpdateInstancesTransforms_NativeFunction, "NewInstancesTransforms");
        BatchUpdateInstancesTransforms_bWorldSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BatchUpdateInstancesTransforms_NativeFunction, "bWorldSpace");
        BatchUpdateInstancesTransforms_bMarkRenderStateDirty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BatchUpdateInstancesTransforms_NativeFunction, "bMarkRenderStateDirty");
        BatchUpdateInstancesTransforms_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BatchUpdateInstancesTransforms_NativeFunction, "bTeleport");
        BatchUpdateInstancesTransforms_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BatchUpdateInstancesTransforms_NativeFunction, "ReturnValue");
        BatchUpdateInstancesTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BatchUpdateInstancesTransform");
        BatchUpdateInstancesTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BatchUpdateInstancesTransform_NativeFunction);
        BatchUpdateInstancesTransform_StartInstanceIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BatchUpdateInstancesTransform_NativeFunction, "StartInstanceIndex");
        BatchUpdateInstancesTransform_NumInstances_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BatchUpdateInstancesTransform_NativeFunction, "NumInstances");
        BatchUpdateInstancesTransform_NewInstancesTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BatchUpdateInstancesTransform_NativeFunction, "NewInstancesTransform");
        BatchUpdateInstancesTransform_bWorldSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BatchUpdateInstancesTransform_NativeFunction, "bWorldSpace");
        BatchUpdateInstancesTransform_bMarkRenderStateDirty_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BatchUpdateInstancesTransform_NativeFunction, "bMarkRenderStateDirty");
        BatchUpdateInstancesTransform_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BatchUpdateInstancesTransform_NativeFunction, "bTeleport");
        BatchUpdateInstancesTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BatchUpdateInstancesTransform_NativeFunction, "ReturnValue");
        AddInstanceWorldSpace_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddInstanceWorldSpace");
        AddInstanceWorldSpace_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddInstanceWorldSpace_NativeFunction);
        AddInstanceWorldSpace_WorldTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddInstanceWorldSpace_NativeFunction, "WorldTransform");
        AddInstanceWorldSpace_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddInstanceWorldSpace_NativeFunction, "ReturnValue");
        AddInstances_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddInstances");
        AddInstances_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddInstances_NativeFunction);
        AddInstances_InstanceTransforms_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddInstances_NativeFunction, "InstanceTransforms");
        AddInstances_InstanceTransforms_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(AddInstances_NativeFunction, "InstanceTransforms");
        AddInstances_bShouldReturnIndices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddInstances_NativeFunction, "bShouldReturnIndices");
        AddInstances_bWorldSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddInstances_NativeFunction, "bWorldSpace");
        AddInstances_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddInstances_NativeFunction, "ReturnValue");
        AddInstances_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(AddInstances_NativeFunction, "ReturnValue");
        AddInstance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddInstance");
        AddInstance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddInstance_NativeFunction);
        AddInstance_InstanceTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddInstance_NativeFunction, "InstanceTransform");
        AddInstance_bWorldSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddInstance_NativeFunction, "bWorldSpace");
        AddInstance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddInstance_NativeFunction, "ReturnValue");
        
        
    }
    
    protected InstancedStaticMeshComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // IntProperty /Script/Engine.InstancedStaticMeshComponent:InstancingRandomSeed
    static readonly int InstancingRandomSeed_Offset;
    
    public int InstancingRandomSeed
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, InstancingRandomSeed_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, InstancingRandomSeed_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.InstancedStaticMeshComponent:InstanceStartCullDistance
    static readonly int InstanceStartCullDistance_Offset;
    
    public int InstanceStartCullDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, InstanceStartCullDistance_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Engine.InstancedStaticMeshComponent:InstanceEndCullDistance
    static readonly int InstanceEndCullDistance_Offset;
    
    public int InstanceEndCullDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, InstanceEndCullDistance_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.InstancedStaticMeshComponent:UpdateInstanceTransform
    static readonly IntPtr UpdateInstanceTransform_NativeFunction;
    static readonly int UpdateInstanceTransform_ParamsSize;
    static readonly int UpdateInstanceTransform_InstanceIndex_Offset;
    static readonly int UpdateInstanceTransform_NewInstanceTransform_Offset;
    static readonly int UpdateInstanceTransform_bWorldSpace_Offset;
    static readonly int UpdateInstanceTransform_bMarkRenderStateDirty_Offset;
    static readonly int UpdateInstanceTransform_bTeleport_Offset;
    static readonly int UpdateInstanceTransform_ReturnValue_Offset;
    
    public bool UpdateInstanceTransform(int instanceIndex, UnrealSharp.Transform newInstanceTransform, bool bWorldSpace = false, bool bMarkRenderStateDirty = false, bool bTeleport = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UpdateInstanceTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, UpdateInstanceTransform_InstanceIndex_Offset), 0, null, instanceIndex);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, UpdateInstanceTransform_NewInstanceTransform_Offset), 0, null, newInstanceTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, UpdateInstanceTransform_bWorldSpace_Offset), 0, null, bWorldSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, UpdateInstanceTransform_bMarkRenderStateDirty_Offset), 0, null, bMarkRenderStateDirty);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, UpdateInstanceTransform_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UpdateInstanceTransform_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, UpdateInstanceTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InstancedStaticMeshComponent:SetNumCustomDataFloats
    static readonly IntPtr SetNumCustomDataFloats_NativeFunction;
    static readonly int SetNumCustomDataFloats_ParamsSize;
    static readonly int SetNumCustomDataFloats_InNumCustomDataFloats_Offset;
    
    public void SetNumCustomDataFloats(int inNumCustomDataFloats)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNumCustomDataFloats_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetNumCustomDataFloats_InNumCustomDataFloats_Offset), 0, null, inNumCustomDataFloats);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNumCustomDataFloats_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.InstancedStaticMeshComponent:SetCustomDataValue
    static readonly IntPtr SetCustomDataValue_NativeFunction;
    static readonly int SetCustomDataValue_ParamsSize;
    static readonly int SetCustomDataValue_InstanceIndex_Offset;
    static readonly int SetCustomDataValue_CustomDataIndex_Offset;
    static readonly int SetCustomDataValue_CustomDataValue_Offset;
    static readonly int SetCustomDataValue_bMarkRenderStateDirty_Offset;
    static readonly int SetCustomDataValue_ReturnValue_Offset;
    
    public bool SetCustomDataValue(int instanceIndex, int customDataIndex, float customDataValue, bool bMarkRenderStateDirty = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomDataValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomDataValue_InstanceIndex_Offset), 0, null, instanceIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomDataValue_CustomDataIndex_Offset), 0, null, customDataIndex);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomDataValue_CustomDataValue_Offset), 0, null, customDataValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomDataValue_bMarkRenderStateDirty_Offset), 0, null, bMarkRenderStateDirty);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomDataValue_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomDataValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InstancedStaticMeshComponent:SetCullDistances
    static readonly IntPtr SetCullDistances_NativeFunction;
    static readonly int SetCullDistances_ParamsSize;
    static readonly int SetCullDistances_StartCullDistance_Offset;
    static readonly int SetCullDistances_EndCullDistance_Offset;
    
    public void SetCullDistances(int startCullDistance, int endCullDistance)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCullDistances_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetCullDistances_StartCullDistance_Offset), 0, null, startCullDistance);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetCullDistances_EndCullDistance_Offset), 0, null, endCullDistance);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCullDistances_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.InstancedStaticMeshComponent:RemoveInstances
    static readonly IntPtr RemoveInstances_NativeFunction;
    static readonly int RemoveInstances_ParamsSize;
    static readonly int RemoveInstances_InstancesToRemove_Offset;
    static readonly int RemoveInstances_InstancesToRemove_ElementSize;
    static readonly int RemoveInstances_ReturnValue_Offset;
    
    public bool RemoveInstances(System.Collections.Generic.IList<int> instancesToRemove)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveInstances_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InstancesToRemove_NativeBuffer = IntPtr.Add(ParamsBuffer, RemoveInstances_InstancesToRemove_Offset);
            UnrealArrayCopyMarshaler<int> InstancesToRemove_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, RemoveInstances_InstancesToRemove_ElementSize);
            InstancesToRemove_Marshaler.ToNative(InstancesToRemove_NativeBuffer, 0, null, instancesToRemove);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveInstances_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RemoveInstances_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InstancedStaticMeshComponent:RemoveInstance
    static readonly IntPtr RemoveInstance_NativeFunction;
    static readonly int RemoveInstance_ParamsSize;
    static readonly int RemoveInstance_InstanceIndex_Offset;
    static readonly int RemoveInstance_ReturnValue_Offset;
    
    public bool RemoveInstance(int instanceIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveInstance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, RemoveInstance_InstanceIndex_Offset), 0, null, instanceIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveInstance_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RemoveInstance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InstancedStaticMeshComponent:IsValidInstance
    static readonly IntPtr IsValidInstance_NativeFunction;
    static readonly int IsValidInstance_ParamsSize;
    static readonly int IsValidInstance_InstanceIndex_Offset;
    static readonly int IsValidInstance_ReturnValue_Offset;
    
    public bool IsValidInstance(int instanceIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValidInstance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, IsValidInstance_InstanceIndex_Offset), 0, null, instanceIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsValidInstance_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValidInstance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InstancedStaticMeshComponent:GetInstanceTransform
    static readonly IntPtr GetInstanceTransform_NativeFunction;
    static readonly int GetInstanceTransform_ParamsSize;
    static readonly int GetInstanceTransform_InstanceIndex_Offset;
    static readonly int GetInstanceTransform_OutInstanceTransform_Offset;
    static readonly int GetInstanceTransform_bWorldSpace_Offset;
    static readonly int GetInstanceTransform_ReturnValue_Offset;
    
    public bool GetInstanceTransform(int instanceIndex, out UnrealSharp.Transform outInstanceTransform, bool bWorldSpace = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInstanceTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetInstanceTransform_InstanceIndex_Offset), 0, null, instanceIndex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetInstanceTransform_bWorldSpace_Offset), 0, null, bWorldSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInstanceTransform_NativeFunction, ParamsBuffer);
            
            outInstanceTransform = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetInstanceTransform_OutInstanceTransform_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetInstanceTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InstancedStaticMeshComponent:GetInstancesOverlappingSphere
    static readonly IntPtr GetInstancesOverlappingSphere_NativeFunction;
    static readonly int GetInstancesOverlappingSphere_ParamsSize;
    static readonly int GetInstancesOverlappingSphere_Center_Offset;
    static readonly int GetInstancesOverlappingSphere_Radius_Offset;
    static readonly int GetInstancesOverlappingSphere_bSphereInWorldSpace_Offset;
    static readonly int GetInstancesOverlappingSphere_ReturnValue_Offset;
    static readonly int GetInstancesOverlappingSphere_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<int> GetInstancesOverlappingSphere(System.DoubleNumerics.Vector3 center, float radius, bool bSphereInWorldSpace = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInstancesOverlappingSphere_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetInstancesOverlappingSphere_Center_Offset), 0, null, center);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetInstancesOverlappingSphere_Radius_Offset), 0, null, radius);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetInstancesOverlappingSphere_bSphereInWorldSpace_Offset), 0, null, bSphereInWorldSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInstancesOverlappingSphere_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<int> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetInstancesOverlappingSphere_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<int> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<int> (1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, GetInstancesOverlappingSphere_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<int>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InstancedStaticMeshComponent:GetInstancesOverlappingBox
    static readonly IntPtr GetInstancesOverlappingBox_NativeFunction;
    static readonly int GetInstancesOverlappingBox_ParamsSize;
    static readonly int GetInstancesOverlappingBox_Box_Offset;
    static readonly int GetInstancesOverlappingBox_bBoxInWorldSpace_Offset;
    static readonly int GetInstancesOverlappingBox_ReturnValue_Offset;
    static readonly int GetInstancesOverlappingBox_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<int> GetInstancesOverlappingBox(UnrealSharp.CoreUObject.Box box, bool bBoxInWorldSpace = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInstancesOverlappingBox_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.BoxMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetInstancesOverlappingBox_Box_Offset), 0, null, box);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetInstancesOverlappingBox_bBoxInWorldSpace_Offset), 0, null, bBoxInWorldSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInstancesOverlappingBox_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<int> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetInstancesOverlappingBox_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<int> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<int> (1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, GetInstancesOverlappingBox_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<int>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InstancedStaticMeshComponent:GetInstanceCount
    static readonly IntPtr GetInstanceCount_NativeFunction;
    static readonly int GetInstanceCount_ParamsSize;
    static readonly int GetInstanceCount_ReturnValue_Offset;
    
    public int GetInstanceCount()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInstanceCount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInstanceCount_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetInstanceCount_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InstancedStaticMeshComponent:GetCullDistances
    static readonly IntPtr GetCullDistances_NativeFunction;
    static readonly int GetCullDistances_ParamsSize;
    static readonly int GetCullDistances_OutStartCullDistance_Offset;
    static readonly int GetCullDistances_OutEndCullDistance_Offset;
    
    public void GetCullDistances(out int outStartCullDistance, out int outEndCullDistance)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCullDistances_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCullDistances_NativeFunction, ParamsBuffer);
            
            outStartCullDistance = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetCullDistances_OutStartCullDistance_Offset), 0, null);
            outEndCullDistance = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetCullDistances_OutEndCullDistance_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.InstancedStaticMeshComponent:ClearInstances
    static readonly IntPtr ClearInstances_NativeFunction;
    
    public void ClearInstances()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearInstances_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.InstancedStaticMeshComponent:BatchUpdateInstancesTransforms
    static readonly IntPtr BatchUpdateInstancesTransforms_NativeFunction;
    static readonly int BatchUpdateInstancesTransforms_ParamsSize;
    static readonly int BatchUpdateInstancesTransforms_StartInstanceIndex_Offset;
    static readonly int BatchUpdateInstancesTransforms_NewInstancesTransforms_Offset;
    static readonly int BatchUpdateInstancesTransforms_NewInstancesTransforms_ElementSize;
    static readonly int BatchUpdateInstancesTransforms_bWorldSpace_Offset;
    static readonly int BatchUpdateInstancesTransforms_bMarkRenderStateDirty_Offset;
    static readonly int BatchUpdateInstancesTransforms_bTeleport_Offset;
    static readonly int BatchUpdateInstancesTransforms_ReturnValue_Offset;
    
    public bool BatchUpdateInstancesTransforms(int startInstanceIndex, System.Collections.Generic.IList<UnrealSharp.Transform> newInstancesTransforms, bool bWorldSpace = false, bool bMarkRenderStateDirty = false, bool bTeleport = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BatchUpdateInstancesTransforms_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, BatchUpdateInstancesTransforms_StartInstanceIndex_Offset), 0, null, startInstanceIndex);
            IntPtr NewInstancesTransforms_NativeBuffer = IntPtr.Add(ParamsBuffer, BatchUpdateInstancesTransforms_NewInstancesTransforms_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform> NewInstancesTransforms_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Transform>(1, BlittableMarshaller<UnrealSharp.Transform>.ToNative, BlittableMarshaller<UnrealSharp.Transform>.FromNative, BatchUpdateInstancesTransforms_NewInstancesTransforms_ElementSize);
            NewInstancesTransforms_Marshaler.ToNative(NewInstancesTransforms_NativeBuffer, 0, null, newInstancesTransforms);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BatchUpdateInstancesTransforms_bWorldSpace_Offset), 0, null, bWorldSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BatchUpdateInstancesTransforms_bMarkRenderStateDirty_Offset), 0, null, bMarkRenderStateDirty);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BatchUpdateInstancesTransforms_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BatchUpdateInstancesTransforms_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BatchUpdateInstancesTransforms_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InstancedStaticMeshComponent:BatchUpdateInstancesTransform
    static readonly IntPtr BatchUpdateInstancesTransform_NativeFunction;
    static readonly int BatchUpdateInstancesTransform_ParamsSize;
    static readonly int BatchUpdateInstancesTransform_StartInstanceIndex_Offset;
    static readonly int BatchUpdateInstancesTransform_NumInstances_Offset;
    static readonly int BatchUpdateInstancesTransform_NewInstancesTransform_Offset;
    static readonly int BatchUpdateInstancesTransform_bWorldSpace_Offset;
    static readonly int BatchUpdateInstancesTransform_bMarkRenderStateDirty_Offset;
    static readonly int BatchUpdateInstancesTransform_bTeleport_Offset;
    static readonly int BatchUpdateInstancesTransform_ReturnValue_Offset;
    
    public bool BatchUpdateInstancesTransform(int startInstanceIndex, int numInstances, UnrealSharp.Transform newInstancesTransform, bool bWorldSpace = false, bool bMarkRenderStateDirty = false, bool bTeleport = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BatchUpdateInstancesTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, BatchUpdateInstancesTransform_StartInstanceIndex_Offset), 0, null, startInstanceIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, BatchUpdateInstancesTransform_NumInstances_Offset), 0, null, numInstances);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, BatchUpdateInstancesTransform_NewInstancesTransform_Offset), 0, null, newInstancesTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BatchUpdateInstancesTransform_bWorldSpace_Offset), 0, null, bWorldSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BatchUpdateInstancesTransform_bMarkRenderStateDirty_Offset), 0, null, bMarkRenderStateDirty);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BatchUpdateInstancesTransform_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BatchUpdateInstancesTransform_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BatchUpdateInstancesTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InstancedStaticMeshComponent:AddInstanceWorldSpace
    static readonly IntPtr AddInstanceWorldSpace_NativeFunction;
    static readonly int AddInstanceWorldSpace_ParamsSize;
    static readonly int AddInstanceWorldSpace_WorldTransform_Offset;
    static readonly int AddInstanceWorldSpace_ReturnValue_Offset;
    
    [Obsolete("Use 'Add Instance' or 'Add Instances' with 'World Space' set to true.")]
    public int AddInstanceWorldSpace(UnrealSharp.Transform worldTransform)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddInstanceWorldSpace_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, AddInstanceWorldSpace_WorldTransform_Offset), 0, null, worldTransform);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddInstanceWorldSpace_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, AddInstanceWorldSpace_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InstancedStaticMeshComponent:AddInstances
    static readonly IntPtr AddInstances_NativeFunction;
    static readonly int AddInstances_ParamsSize;
    static readonly int AddInstances_InstanceTransforms_Offset;
    static readonly int AddInstances_InstanceTransforms_ElementSize;
    static readonly int AddInstances_bShouldReturnIndices_Offset;
    static readonly int AddInstances_bWorldSpace_Offset;
    static readonly int AddInstances_ReturnValue_Offset;
    static readonly int AddInstances_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<int> AddInstances(System.Collections.Generic.IList<UnrealSharp.Transform> instanceTransforms, bool bShouldReturnIndices, bool bWorldSpace = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddInstances_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InstanceTransforms_NativeBuffer = IntPtr.Add(ParamsBuffer, AddInstances_InstanceTransforms_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform> InstanceTransforms_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Transform>(1, BlittableMarshaller<UnrealSharp.Transform>.ToNative, BlittableMarshaller<UnrealSharp.Transform>.FromNative, AddInstances_InstanceTransforms_ElementSize);
            InstanceTransforms_Marshaler.ToNative(InstanceTransforms_NativeBuffer, 0, null, instanceTransforms);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddInstances_bShouldReturnIndices_Offset), 0, null, bShouldReturnIndices);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddInstances_bWorldSpace_Offset), 0, null, bWorldSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddInstances_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<int> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, AddInstances_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<int> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<int> (1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, AddInstances_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<int>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.InstancedStaticMeshComponent:AddInstance
    static readonly IntPtr AddInstance_NativeFunction;
    static readonly int AddInstance_ParamsSize;
    static readonly int AddInstance_InstanceTransform_Offset;
    static readonly int AddInstance_bWorldSpace_Offset;
    static readonly int AddInstance_ReturnValue_Offset;
    
    public int AddInstance(UnrealSharp.Transform instanceTransform, bool bWorldSpace = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddInstance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, AddInstance_InstanceTransform_Offset), 0, null, instanceTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddInstance_bWorldSpace_Offset), 0, null, bWorldSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddInstance_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, AddInstance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class KismetArrayLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static KismetArrayLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("KismetArrayLibrary");
        
        
        FilterArray_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FilterArray");
        FilterArray_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FilterArray_NativeFunction);
        FilterArray_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FilterArray_NativeFunction, "TargetArray");
        FilterArray_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(FilterArray_NativeFunction, "TargetArray");
        FilterArray_FilterClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FilterArray_NativeFunction, "FilterClass");
        FilterArray_FilteredArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FilterArray_NativeFunction, "FilteredArray");
        FilterArray_FilteredArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(FilterArray_NativeFunction, "FilteredArray");
        Array_Swap_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_Swap");
        Array_Swap_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_Swap_NativeFunction);
        Array_Swap_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Swap_NativeFunction, "TargetArray");
        Array_Swap_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_Swap_NativeFunction, "TargetArray");
        Array_Swap_FirstIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Swap_NativeFunction, "FirstIndex");
        Array_Swap_SecondIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Swap_NativeFunction, "SecondIndex");
        Array_ShuffleFromStream_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_ShuffleFromStream");
        Array_ShuffleFromStream_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_ShuffleFromStream_NativeFunction);
        Array_ShuffleFromStream_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_ShuffleFromStream_NativeFunction, "TargetArray");
        Array_ShuffleFromStream_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_ShuffleFromStream_NativeFunction, "TargetArray");
        Array_ShuffleFromStream_RandomStream_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_ShuffleFromStream_NativeFunction, "RandomStream");
        Array_Shuffle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_Shuffle");
        Array_Shuffle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_Shuffle_NativeFunction);
        Array_Shuffle_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Shuffle_NativeFunction, "TargetArray");
        Array_Shuffle_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_Shuffle_NativeFunction, "TargetArray");
        Array_Set_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_Set");
        Array_Set_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_Set_NativeFunction);
        Array_Set_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Set_NativeFunction, "TargetArray");
        Array_Set_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_Set_NativeFunction, "TargetArray");
        Array_Set_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Set_NativeFunction, "Index");
        Array_Set_Item_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Set_NativeFunction, "Item");
        Array_Set_bSizeToFit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Set_NativeFunction, "bSizeToFit");
        Array_Reverse_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_Reverse");
        Array_Reverse_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_Reverse_NativeFunction);
        Array_Reverse_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Reverse_NativeFunction, "TargetArray");
        Array_Reverse_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_Reverse_NativeFunction, "TargetArray");
        Array_Resize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_Resize");
        Array_Resize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_Resize_NativeFunction);
        Array_Resize_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Resize_NativeFunction, "TargetArray");
        Array_Resize_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_Resize_NativeFunction, "TargetArray");
        Array_Resize_Size_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Resize_NativeFunction, "Size");
        Array_RemoveItem_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_RemoveItem");
        Array_RemoveItem_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_RemoveItem_NativeFunction);
        Array_RemoveItem_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_RemoveItem_NativeFunction, "TargetArray");
        Array_RemoveItem_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_RemoveItem_NativeFunction, "TargetArray");
        Array_RemoveItem_Item_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_RemoveItem_NativeFunction, "Item");
        Array_RemoveItem_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_RemoveItem_NativeFunction, "ReturnValue");
        Array_Remove_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_Remove");
        Array_Remove_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_Remove_NativeFunction);
        Array_Remove_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Remove_NativeFunction, "TargetArray");
        Array_Remove_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_Remove_NativeFunction, "TargetArray");
        Array_Remove_IndexToRemove_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Remove_NativeFunction, "IndexToRemove");
        Array_RandomFromStream_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_RandomFromStream");
        Array_RandomFromStream_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_RandomFromStream_NativeFunction);
        Array_RandomFromStream_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_RandomFromStream_NativeFunction, "TargetArray");
        Array_RandomFromStream_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_RandomFromStream_NativeFunction, "TargetArray");
        Array_RandomFromStream_RandomStream_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_RandomFromStream_NativeFunction, "RandomStream");
        Array_RandomFromStream_OutItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_RandomFromStream_NativeFunction, "OutItem");
        Array_RandomFromStream_OutIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_RandomFromStream_NativeFunction, "OutIndex");
        Array_Random_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_Random");
        Array_Random_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_Random_NativeFunction);
        Array_Random_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Random_NativeFunction, "TargetArray");
        Array_Random_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_Random_NativeFunction, "TargetArray");
        Array_Random_OutItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Random_NativeFunction, "OutItem");
        Array_Random_OutIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Random_NativeFunction, "OutIndex");
        Array_Length_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_Length");
        Array_Length_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_Length_NativeFunction);
        Array_Length_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Length_NativeFunction, "TargetArray");
        Array_Length_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_Length_NativeFunction, "TargetArray");
        Array_Length_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Length_NativeFunction, "ReturnValue");
        Array_LastIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_LastIndex");
        Array_LastIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_LastIndex_NativeFunction);
        Array_LastIndex_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_LastIndex_NativeFunction, "TargetArray");
        Array_LastIndex_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_LastIndex_NativeFunction, "TargetArray");
        Array_LastIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_LastIndex_NativeFunction, "ReturnValue");
        Array_IsValidIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_IsValidIndex");
        Array_IsValidIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_IsValidIndex_NativeFunction);
        Array_IsValidIndex_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_IsValidIndex_NativeFunction, "TargetArray");
        Array_IsValidIndex_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_IsValidIndex_NativeFunction, "TargetArray");
        Array_IsValidIndex_IndexToTest_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_IsValidIndex_NativeFunction, "IndexToTest");
        Array_IsValidIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_IsValidIndex_NativeFunction, "ReturnValue");
        Array_IsNotEmpty_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_IsNotEmpty");
        Array_IsNotEmpty_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_IsNotEmpty_NativeFunction);
        Array_IsNotEmpty_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_IsNotEmpty_NativeFunction, "TargetArray");
        Array_IsNotEmpty_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_IsNotEmpty_NativeFunction, "TargetArray");
        Array_IsNotEmpty_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_IsNotEmpty_NativeFunction, "ReturnValue");
        Array_IsEmpty_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_IsEmpty");
        Array_IsEmpty_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_IsEmpty_NativeFunction);
        Array_IsEmpty_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_IsEmpty_NativeFunction, "TargetArray");
        Array_IsEmpty_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_IsEmpty_NativeFunction, "TargetArray");
        Array_IsEmpty_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_IsEmpty_NativeFunction, "ReturnValue");
        Array_Insert_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_Insert");
        Array_Insert_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_Insert_NativeFunction);
        Array_Insert_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Insert_NativeFunction, "TargetArray");
        Array_Insert_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_Insert_NativeFunction, "TargetArray");
        Array_Insert_NewItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Insert_NativeFunction, "NewItem");
        Array_Insert_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Insert_NativeFunction, "Index");
        Array_Identical_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_Identical");
        Array_Identical_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_Identical_NativeFunction);
        Array_Identical_ArrayA_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Identical_NativeFunction, "ArrayA");
        Array_Identical_ArrayA_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_Identical_NativeFunction, "ArrayA");
        Array_Identical_ArrayB_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Identical_NativeFunction, "ArrayB");
        Array_Identical_ArrayB_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_Identical_NativeFunction, "ArrayB");
        Array_Identical_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Identical_NativeFunction, "ReturnValue");
        Array_Find_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_Find");
        Array_Find_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_Find_NativeFunction);
        Array_Find_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Find_NativeFunction, "TargetArray");
        Array_Find_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_Find_NativeFunction, "TargetArray");
        Array_Find_ItemToFind_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Find_NativeFunction, "ItemToFind");
        Array_Find_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Find_NativeFunction, "ReturnValue");
        Array_Contains_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_Contains");
        Array_Contains_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_Contains_NativeFunction);
        Array_Contains_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Contains_NativeFunction, "TargetArray");
        Array_Contains_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_Contains_NativeFunction, "TargetArray");
        Array_Contains_ItemToFind_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Contains_NativeFunction, "ItemToFind");
        Array_Contains_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Contains_NativeFunction, "ReturnValue");
        Array_Clear_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_Clear");
        Array_Clear_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_Clear_NativeFunction);
        Array_Clear_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Clear_NativeFunction, "TargetArray");
        Array_Clear_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_Clear_NativeFunction, "TargetArray");
        Array_Append_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_Append");
        Array_Append_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_Append_NativeFunction);
        Array_Append_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Append_NativeFunction, "TargetArray");
        Array_Append_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_Append_NativeFunction, "TargetArray");
        Array_Append_SourceArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Append_NativeFunction, "SourceArray");
        Array_Append_SourceArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_Append_NativeFunction, "SourceArray");
        Array_AddUnique_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_AddUnique");
        Array_AddUnique_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_AddUnique_NativeFunction);
        Array_AddUnique_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_AddUnique_NativeFunction, "TargetArray");
        Array_AddUnique_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_AddUnique_NativeFunction, "TargetArray");
        Array_AddUnique_NewItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_AddUnique_NativeFunction, "NewItem");
        Array_AddUnique_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_AddUnique_NativeFunction, "ReturnValue");
        Array_Add_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Array_Add");
        Array_Add_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Array_Add_NativeFunction);
        Array_Add_TargetArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Add_NativeFunction, "TargetArray");
        Array_Add_TargetArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(Array_Add_NativeFunction, "TargetArray");
        Array_Add_NewItem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Add_NativeFunction, "NewItem");
        Array_Add_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Array_Add_NativeFunction, "ReturnValue");
        
        
    }
    
    protected KismetArrayLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.KismetArrayLibrary:FilterArray
    static readonly IntPtr FilterArray_NativeFunction;
    static readonly int FilterArray_ParamsSize;
    static readonly int FilterArray_TargetArray_Offset;
    static readonly int FilterArray_TargetArray_ElementSize;
    static readonly int FilterArray_FilterClass_Offset;
    static readonly int FilterArray_FilteredArray_Offset;
    static readonly int FilterArray_FilteredArray_ElementSize;
    
    public static void FilterArray(System.Collections.Generic.IList<UnrealSharp.Engine.Actor> targetArray, SubclassOf<UnrealSharp.Engine.Actor> filterClass, out System.Collections.Generic.IList<UnrealSharp.Engine.Actor> filteredArray)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FilterArray_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, FilterArray_TargetArray_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, FilterArray_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            SubclassOfMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, FilterArray_FilterClass_Offset), 0, null, filterClass);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FilterArray_NativeFunction, ParamsBuffer);
            
            IntPtr FilteredArray_NativeBuffer = IntPtr.Add(ParamsBuffer, FilterArray_FilteredArray_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> FilteredArray_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, FilterArray_FilteredArray_ElementSize);
            filteredArray = FilteredArray_Marshaler.FromNative(FilteredArray_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(FilteredArray_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_Swap
    static readonly IntPtr Array_Swap_NativeFunction;
    static readonly int Array_Swap_ParamsSize;
    static readonly int Array_Swap_TargetArray_Offset;
    static readonly int Array_Swap_TargetArray_ElementSize;
    static readonly int Array_Swap_FirstIndex_Offset;
    static readonly int Array_Swap_SecondIndex_Offset;
    
    public static void Array_Swap(System.Collections.Generic.IList<int> targetArray, int firstIndex, int secondIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_Swap_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_Swap_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_Swap_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Array_Swap_FirstIndex_Offset), 0, null, firstIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Array_Swap_SecondIndex_Offset), 0, null, secondIndex);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_Swap_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_ShuffleFromStream
    static readonly IntPtr Array_ShuffleFromStream_NativeFunction;
    static readonly int Array_ShuffleFromStream_ParamsSize;
    static readonly int Array_ShuffleFromStream_TargetArray_Offset;
    static readonly int Array_ShuffleFromStream_TargetArray_ElementSize;
    static readonly int Array_ShuffleFromStream_RandomStream_Offset;
    
    public static void Array_ShuffleFromStream(System.Collections.Generic.IList<int> targetArray, ref UnrealSharp.RandomStream randomStream)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_ShuffleFromStream_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_ShuffleFromStream_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_ShuffleFromStream_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            BlittableMarshaller<UnrealSharp.RandomStream>.ToNative(IntPtr.Add(ParamsBuffer, Array_ShuffleFromStream_RandomStream_Offset), 0, null, randomStream);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_ShuffleFromStream_NativeFunction, ParamsBuffer);
            
            randomStream = BlittableMarshaller<UnrealSharp.RandomStream>.FromNative(IntPtr.Add(ParamsBuffer, Array_ShuffleFromStream_RandomStream_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_Shuffle
    static readonly IntPtr Array_Shuffle_NativeFunction;
    static readonly int Array_Shuffle_ParamsSize;
    static readonly int Array_Shuffle_TargetArray_Offset;
    static readonly int Array_Shuffle_TargetArray_ElementSize;
    
    public static void Array_Shuffle(System.Collections.Generic.IList<int> targetArray)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_Shuffle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_Shuffle_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_Shuffle_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_Shuffle_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_Set
    static readonly IntPtr Array_Set_NativeFunction;
    static readonly int Array_Set_ParamsSize;
    static readonly int Array_Set_TargetArray_Offset;
    static readonly int Array_Set_TargetArray_ElementSize;
    static readonly int Array_Set_Index_Offset;
    static readonly int Array_Set_Item_Offset;
    static readonly int Array_Set_bSizeToFit_Offset;
    
    public static void Array_Set(System.Collections.Generic.IList<int> targetArray, int index, int item, bool bSizeToFit)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_Set_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_Set_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_Set_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Array_Set_Index_Offset), 0, null, index);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Array_Set_Item_Offset), 0, null, item);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, Array_Set_bSizeToFit_Offset), 0, null, bSizeToFit);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_Set_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_Reverse
    static readonly IntPtr Array_Reverse_NativeFunction;
    static readonly int Array_Reverse_ParamsSize;
    static readonly int Array_Reverse_TargetArray_Offset;
    static readonly int Array_Reverse_TargetArray_ElementSize;
    
    public static void Array_Reverse(System.Collections.Generic.IList<int> targetArray)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_Reverse_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_Reverse_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_Reverse_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_Reverse_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_Resize
    static readonly IntPtr Array_Resize_NativeFunction;
    static readonly int Array_Resize_ParamsSize;
    static readonly int Array_Resize_TargetArray_Offset;
    static readonly int Array_Resize_TargetArray_ElementSize;
    static readonly int Array_Resize_Size_Offset;
    
    public static void Array_Resize(System.Collections.Generic.IList<int> targetArray, int size)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_Resize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_Resize_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_Resize_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Array_Resize_Size_Offset), 0, null, size);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_Resize_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_RemoveItem
    static readonly IntPtr Array_RemoveItem_NativeFunction;
    static readonly int Array_RemoveItem_ParamsSize;
    static readonly int Array_RemoveItem_TargetArray_Offset;
    static readonly int Array_RemoveItem_TargetArray_ElementSize;
    static readonly int Array_RemoveItem_Item_Offset;
    static readonly int Array_RemoveItem_ReturnValue_Offset;
    
    public static bool Array_RemoveItem(System.Collections.Generic.IList<int> targetArray, int item)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_RemoveItem_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_RemoveItem_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_RemoveItem_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Array_RemoveItem_Item_Offset), 0, null, item);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_RemoveItem_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Array_RemoveItem_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_Remove
    static readonly IntPtr Array_Remove_NativeFunction;
    static readonly int Array_Remove_ParamsSize;
    static readonly int Array_Remove_TargetArray_Offset;
    static readonly int Array_Remove_TargetArray_ElementSize;
    static readonly int Array_Remove_IndexToRemove_Offset;
    
    public static void Array_Remove(System.Collections.Generic.IList<int> targetArray, int indexToRemove)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_Remove_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_Remove_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_Remove_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Array_Remove_IndexToRemove_Offset), 0, null, indexToRemove);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_Remove_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_RandomFromStream
    static readonly IntPtr Array_RandomFromStream_NativeFunction;
    static readonly int Array_RandomFromStream_ParamsSize;
    static readonly int Array_RandomFromStream_TargetArray_Offset;
    static readonly int Array_RandomFromStream_TargetArray_ElementSize;
    static readonly int Array_RandomFromStream_RandomStream_Offset;
    static readonly int Array_RandomFromStream_OutItem_Offset;
    static readonly int Array_RandomFromStream_OutIndex_Offset;
    
    public static void Array_RandomFromStream(System.Collections.Generic.IList<int> targetArray, ref UnrealSharp.RandomStream randomStream, out int outItem, out int outIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_RandomFromStream_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_RandomFromStream_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_RandomFromStream_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            BlittableMarshaller<UnrealSharp.RandomStream>.ToNative(IntPtr.Add(ParamsBuffer, Array_RandomFromStream_RandomStream_Offset), 0, null, randomStream);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_RandomFromStream_NativeFunction, ParamsBuffer);
            
            randomStream = BlittableMarshaller<UnrealSharp.RandomStream>.FromNative(IntPtr.Add(ParamsBuffer, Array_RandomFromStream_RandomStream_Offset), 0, null);
            outItem = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Array_RandomFromStream_OutItem_Offset), 0, null);
            outIndex = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Array_RandomFromStream_OutIndex_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_Random
    static readonly IntPtr Array_Random_NativeFunction;
    static readonly int Array_Random_ParamsSize;
    static readonly int Array_Random_TargetArray_Offset;
    static readonly int Array_Random_TargetArray_ElementSize;
    static readonly int Array_Random_OutItem_Offset;
    static readonly int Array_Random_OutIndex_Offset;
    
    public static void Array_Random(System.Collections.Generic.IList<int> targetArray, out int outItem, out int outIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_Random_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_Random_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_Random_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_Random_NativeFunction, ParamsBuffer);
            
            outItem = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Array_Random_OutItem_Offset), 0, null);
            outIndex = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Array_Random_OutIndex_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_Length
    static readonly IntPtr Array_Length_NativeFunction;
    static readonly int Array_Length_ParamsSize;
    static readonly int Array_Length_TargetArray_Offset;
    static readonly int Array_Length_TargetArray_ElementSize;
    static readonly int Array_Length_ReturnValue_Offset;
    
    public static int Array_Length(System.Collections.Generic.IList<int> targetArray)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_Length_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_Length_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_Length_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_Length_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Array_Length_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_LastIndex
    static readonly IntPtr Array_LastIndex_NativeFunction;
    static readonly int Array_LastIndex_ParamsSize;
    static readonly int Array_LastIndex_TargetArray_Offset;
    static readonly int Array_LastIndex_TargetArray_ElementSize;
    static readonly int Array_LastIndex_ReturnValue_Offset;
    
    public static int Array_LastIndex(System.Collections.Generic.IList<int> targetArray)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_LastIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_LastIndex_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_LastIndex_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_LastIndex_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Array_LastIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_IsValidIndex
    static readonly IntPtr Array_IsValidIndex_NativeFunction;
    static readonly int Array_IsValidIndex_ParamsSize;
    static readonly int Array_IsValidIndex_TargetArray_Offset;
    static readonly int Array_IsValidIndex_TargetArray_ElementSize;
    static readonly int Array_IsValidIndex_IndexToTest_Offset;
    static readonly int Array_IsValidIndex_ReturnValue_Offset;
    
    public static bool Array_IsValidIndex(System.Collections.Generic.IList<int> targetArray, int indexToTest)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_IsValidIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_IsValidIndex_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_IsValidIndex_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Array_IsValidIndex_IndexToTest_Offset), 0, null, indexToTest);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_IsValidIndex_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Array_IsValidIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_IsNotEmpty
    static readonly IntPtr Array_IsNotEmpty_NativeFunction;
    static readonly int Array_IsNotEmpty_ParamsSize;
    static readonly int Array_IsNotEmpty_TargetArray_Offset;
    static readonly int Array_IsNotEmpty_TargetArray_ElementSize;
    static readonly int Array_IsNotEmpty_ReturnValue_Offset;
    
    public static bool Array_IsNotEmpty(System.Collections.Generic.IList<int> targetArray)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_IsNotEmpty_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_IsNotEmpty_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_IsNotEmpty_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_IsNotEmpty_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Array_IsNotEmpty_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_IsEmpty
    static readonly IntPtr Array_IsEmpty_NativeFunction;
    static readonly int Array_IsEmpty_ParamsSize;
    static readonly int Array_IsEmpty_TargetArray_Offset;
    static readonly int Array_IsEmpty_TargetArray_ElementSize;
    static readonly int Array_IsEmpty_ReturnValue_Offset;
    
    public static bool Array_IsEmpty(System.Collections.Generic.IList<int> targetArray)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_IsEmpty_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_IsEmpty_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_IsEmpty_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_IsEmpty_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Array_IsEmpty_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_Insert
    static readonly IntPtr Array_Insert_NativeFunction;
    static readonly int Array_Insert_ParamsSize;
    static readonly int Array_Insert_TargetArray_Offset;
    static readonly int Array_Insert_TargetArray_ElementSize;
    static readonly int Array_Insert_NewItem_Offset;
    static readonly int Array_Insert_Index_Offset;
    
    public static void Array_Insert(System.Collections.Generic.IList<int> targetArray, int newItem, int index)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_Insert_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_Insert_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_Insert_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Array_Insert_NewItem_Offset), 0, null, newItem);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Array_Insert_Index_Offset), 0, null, index);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_Insert_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_Identical
    static readonly IntPtr Array_Identical_NativeFunction;
    static readonly int Array_Identical_ParamsSize;
    static readonly int Array_Identical_ArrayA_Offset;
    static readonly int Array_Identical_ArrayA_ElementSize;
    static readonly int Array_Identical_ArrayB_Offset;
    static readonly int Array_Identical_ArrayB_ElementSize;
    static readonly int Array_Identical_ReturnValue_Offset;
    
    public static bool Array_Identical(System.Collections.Generic.IList<int> arrayA, System.Collections.Generic.IList<int> arrayB)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_Identical_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ArrayA_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_Identical_ArrayA_Offset);
            UnrealArrayCopyMarshaler<int> ArrayA_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_Identical_ArrayA_ElementSize);
            ArrayA_Marshaler.ToNative(ArrayA_NativeBuffer, 0, null, arrayA);
            IntPtr ArrayB_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_Identical_ArrayB_Offset);
            UnrealArrayCopyMarshaler<int> ArrayB_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_Identical_ArrayB_ElementSize);
            ArrayB_Marshaler.ToNative(ArrayB_NativeBuffer, 0, null, arrayB);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_Identical_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Array_Identical_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_Find
    static readonly IntPtr Array_Find_NativeFunction;
    static readonly int Array_Find_ParamsSize;
    static readonly int Array_Find_TargetArray_Offset;
    static readonly int Array_Find_TargetArray_ElementSize;
    static readonly int Array_Find_ItemToFind_Offset;
    static readonly int Array_Find_ReturnValue_Offset;
    
    public static int Array_Find(System.Collections.Generic.IList<int> targetArray, int itemToFind)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_Find_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_Find_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_Find_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Array_Find_ItemToFind_Offset), 0, null, itemToFind);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_Find_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Array_Find_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_Contains
    static readonly IntPtr Array_Contains_NativeFunction;
    static readonly int Array_Contains_ParamsSize;
    static readonly int Array_Contains_TargetArray_Offset;
    static readonly int Array_Contains_TargetArray_ElementSize;
    static readonly int Array_Contains_ItemToFind_Offset;
    static readonly int Array_Contains_ReturnValue_Offset;
    
    public static bool Array_Contains(System.Collections.Generic.IList<int> targetArray, int itemToFind)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_Contains_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_Contains_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_Contains_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Array_Contains_ItemToFind_Offset), 0, null, itemToFind);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_Contains_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Array_Contains_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_Clear
    static readonly IntPtr Array_Clear_NativeFunction;
    static readonly int Array_Clear_ParamsSize;
    static readonly int Array_Clear_TargetArray_Offset;
    static readonly int Array_Clear_TargetArray_ElementSize;
    
    public static void Array_Clear(System.Collections.Generic.IList<int> targetArray)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_Clear_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_Clear_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_Clear_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_Clear_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_Append
    static readonly IntPtr Array_Append_NativeFunction;
    static readonly int Array_Append_ParamsSize;
    static readonly int Array_Append_TargetArray_Offset;
    static readonly int Array_Append_TargetArray_ElementSize;
    static readonly int Array_Append_SourceArray_Offset;
    static readonly int Array_Append_SourceArray_ElementSize;
    
    public static void Array_Append(System.Collections.Generic.IList<int> targetArray, System.Collections.Generic.IList<int> sourceArray)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_Append_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_Append_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_Append_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            IntPtr SourceArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_Append_SourceArray_Offset);
            UnrealArrayCopyMarshaler<int> SourceArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_Append_SourceArray_ElementSize);
            SourceArray_Marshaler.ToNative(SourceArray_NativeBuffer, 0, null, sourceArray);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_Append_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_AddUnique
    static readonly IntPtr Array_AddUnique_NativeFunction;
    static readonly int Array_AddUnique_ParamsSize;
    static readonly int Array_AddUnique_TargetArray_Offset;
    static readonly int Array_AddUnique_TargetArray_ElementSize;
    static readonly int Array_AddUnique_NewItem_Offset;
    static readonly int Array_AddUnique_ReturnValue_Offset;
    
    public static int Array_AddUnique(System.Collections.Generic.IList<int> targetArray, int newItem)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_AddUnique_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_AddUnique_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_AddUnique_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Array_AddUnique_NewItem_Offset), 0, null, newItem);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_AddUnique_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Array_AddUnique_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetArrayLibrary:Array_Add
    static readonly IntPtr Array_Add_NativeFunction;
    static readonly int Array_Add_ParamsSize;
    static readonly int Array_Add_TargetArray_Offset;
    static readonly int Array_Add_TargetArray_ElementSize;
    static readonly int Array_Add_NewItem_Offset;
    static readonly int Array_Add_ReturnValue_Offset;
    
    public static int Array_Add(System.Collections.Generic.IList<int> targetArray, int newItem)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Array_Add_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TargetArray_NativeBuffer = IntPtr.Add(ParamsBuffer, Array_Add_TargetArray_Offset);
            UnrealArrayCopyMarshaler<int> TargetArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, Array_Add_TargetArray_ElementSize);
            TargetArray_Marshaler.ToNative(TargetArray_NativeBuffer, 0, null, targetArray);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Array_Add_NewItem_Offset), 0, null, newItem);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Array_Add_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Array_Add_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
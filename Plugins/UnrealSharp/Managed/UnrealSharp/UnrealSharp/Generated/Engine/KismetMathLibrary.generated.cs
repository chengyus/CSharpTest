// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class MathLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static MathLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("KismetMathLibrary");
        
        
        Xor_IntInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Xor_IntInt");
        Xor_IntInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Xor_IntInt_NativeFunction);
        Xor_IntInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Xor_IntInt_NativeFunction, "A");
        Xor_IntInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Xor_IntInt_NativeFunction, "B");
        Xor_IntInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Xor_IntInt_NativeFunction, "ReturnValue");
        Xor_Int64Int64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Xor_Int64Int64");
        Xor_Int64Int64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Xor_Int64Int64_NativeFunction);
        Xor_Int64Int64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Xor_Int64Int64_NativeFunction, "A");
        Xor_Int64Int64_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Xor_Int64Int64_NativeFunction, "B");
        Xor_Int64Int64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Xor_Int64Int64_NativeFunction, "ReturnValue");
        Wrap_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Wrap");
        Wrap_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Wrap_NativeFunction);
        Wrap_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Wrap_NativeFunction, "Value");
        Wrap_Min_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Wrap_NativeFunction, "Min");
        Wrap_Max_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Wrap_NativeFunction, "Max");
        Wrap_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Wrap_NativeFunction, "ReturnValue");
        WeightedMovingAverage_FVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "WeightedMovingAverage_FVector");
        WeightedMovingAverage_FVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(WeightedMovingAverage_FVector_NativeFunction);
        WeightedMovingAverage_FVector_CurrentSample_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WeightedMovingAverage_FVector_NativeFunction, "CurrentSample");
        WeightedMovingAverage_FVector_PreviousSample_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WeightedMovingAverage_FVector_NativeFunction, "PreviousSample");
        WeightedMovingAverage_FVector_Weight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WeightedMovingAverage_FVector_NativeFunction, "Weight");
        WeightedMovingAverage_FVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WeightedMovingAverage_FVector_NativeFunction, "ReturnValue");
        WeightedMovingAverage_FRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "WeightedMovingAverage_FRotator");
        WeightedMovingAverage_FRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(WeightedMovingAverage_FRotator_NativeFunction);
        WeightedMovingAverage_FRotator_CurrentSample_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WeightedMovingAverage_FRotator_NativeFunction, "CurrentSample");
        WeightedMovingAverage_FRotator_PreviousSample_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WeightedMovingAverage_FRotator_NativeFunction, "PreviousSample");
        WeightedMovingAverage_FRotator_Weight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WeightedMovingAverage_FRotator_NativeFunction, "Weight");
        WeightedMovingAverage_FRotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WeightedMovingAverage_FRotator_NativeFunction, "ReturnValue");
        WeightedMovingAverage_Float_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "WeightedMovingAverage_Float");
        WeightedMovingAverage_Float_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(WeightedMovingAverage_Float_NativeFunction);
        WeightedMovingAverage_Float_CurrentSample_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WeightedMovingAverage_Float_NativeFunction, "CurrentSample");
        WeightedMovingAverage_Float_PreviousSample_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WeightedMovingAverage_Float_NativeFunction, "PreviousSample");
        WeightedMovingAverage_Float_Weight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WeightedMovingAverage_Float_NativeFunction, "Weight");
        WeightedMovingAverage_Float_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WeightedMovingAverage_Float_NativeFunction, "ReturnValue");
        VSizeXYSquared_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "VSizeXYSquared");
        VSizeXYSquared_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(VSizeXYSquared_NativeFunction);
        VSizeXYSquared_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VSizeXYSquared_NativeFunction, "A");
        VSizeXYSquared_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VSizeXYSquared_NativeFunction, "ReturnValue");
        VSizeXY_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "VSizeXY");
        VSizeXY_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(VSizeXY_NativeFunction);
        VSizeXY_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VSizeXY_NativeFunction, "A");
        VSizeXY_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VSizeXY_NativeFunction, "ReturnValue");
        VSizeSquared_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "VSizeSquared");
        VSizeSquared_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(VSizeSquared_NativeFunction);
        VSizeSquared_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VSizeSquared_NativeFunction, "A");
        VSizeSquared_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VSizeSquared_NativeFunction, "ReturnValue");
        VSize2DSquared_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "VSize2DSquared");
        VSize2DSquared_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(VSize2DSquared_NativeFunction);
        VSize2DSquared_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VSize2DSquared_NativeFunction, "A");
        VSize2DSquared_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VSize2DSquared_NativeFunction, "ReturnValue");
        VSize2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "VSize2D");
        VSize2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(VSize2D_NativeFunction);
        VSize2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VSize2D_NativeFunction, "A");
        VSize2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VSize2D_NativeFunction, "ReturnValue");
        VSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "VSize");
        VSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(VSize_NativeFunction);
        VSize_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VSize_NativeFunction, "A");
        VSize_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VSize_NativeFunction, "ReturnValue");
        VLerp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "VLerp");
        VLerp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(VLerp_NativeFunction);
        VLerp_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VLerp_NativeFunction, "A");
        VLerp_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VLerp_NativeFunction, "B");
        VLerp_Alpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VLerp_NativeFunction, "Alpha");
        VLerp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VLerp_NativeFunction, "ReturnValue");
        VInterpTo_Constant_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "VInterpTo_Constant");
        VInterpTo_Constant_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(VInterpTo_Constant_NativeFunction);
        VInterpTo_Constant_Current_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VInterpTo_Constant_NativeFunction, "Current");
        VInterpTo_Constant_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VInterpTo_Constant_NativeFunction, "Target");
        VInterpTo_Constant_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VInterpTo_Constant_NativeFunction, "DeltaTime");
        VInterpTo_Constant_InterpSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VInterpTo_Constant_NativeFunction, "InterpSpeed");
        VInterpTo_Constant_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VInterpTo_Constant_NativeFunction, "ReturnValue");
        VInterpTo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "VInterpTo");
        VInterpTo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(VInterpTo_NativeFunction);
        VInterpTo_Current_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VInterpTo_NativeFunction, "Current");
        VInterpTo_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VInterpTo_NativeFunction, "Target");
        VInterpTo_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VInterpTo_NativeFunction, "DeltaTime");
        VInterpTo_InterpSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VInterpTo_NativeFunction, "InterpSpeed");
        VInterpTo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VInterpTo_NativeFunction, "ReturnValue");
        VectorSpringInterp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "VectorSpringInterp");
        VectorSpringInterp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(VectorSpringInterp_NativeFunction);
        VectorSpringInterp_Current_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VectorSpringInterp_NativeFunction, "Current");
        VectorSpringInterp_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VectorSpringInterp_NativeFunction, "Target");
        VectorSpringInterp_SpringState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VectorSpringInterp_NativeFunction, "SpringState");
        VectorSpringInterp_Stiffness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VectorSpringInterp_NativeFunction, "Stiffness");
        VectorSpringInterp_CriticalDampingFactor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VectorSpringInterp_NativeFunction, "CriticalDampingFactor");
        VectorSpringInterp_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VectorSpringInterp_NativeFunction, "DeltaTime");
        VectorSpringInterp_Mass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VectorSpringInterp_NativeFunction, "Mass");
        VectorSpringInterp_TargetVelocityAmount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VectorSpringInterp_NativeFunction, "TargetVelocityAmount");
        VectorSpringInterp_bClamp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VectorSpringInterp_NativeFunction, "bClamp");
        VectorSpringInterp_MinValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VectorSpringInterp_NativeFunction, "MinValue");
        VectorSpringInterp_MaxValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VectorSpringInterp_NativeFunction, "MaxValue");
        VectorSpringInterp_bInitializeFromTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VectorSpringInterp_NativeFunction, "bInitializeFromTarget");
        VectorSpringInterp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(VectorSpringInterp_NativeFunction, "ReturnValue");
        Vector_Zero_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_Zero");
        Vector_Zero_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_Zero_NativeFunction);
        Vector_Zero_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Zero_NativeFunction, "ReturnValue");
        Vector_Up_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_Up");
        Vector_Up_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_Up_NativeFunction);
        Vector_Up_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Up_NativeFunction, "ReturnValue");
        Vector_UnwindEuler_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_UnwindEuler");
        Vector_UnwindEuler_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_UnwindEuler_NativeFunction);
        Vector_UnwindEuler_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_UnwindEuler_NativeFunction, "A");
        Vector_UnitCartesianToSpherical_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_UnitCartesianToSpherical");
        Vector_UnitCartesianToSpherical_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_UnitCartesianToSpherical_NativeFunction);
        Vector_UnitCartesianToSpherical_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_UnitCartesianToSpherical_NativeFunction, "A");
        Vector_UnitCartesianToSpherical_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_UnitCartesianToSpherical_NativeFunction, "ReturnValue");
        Vector_ToRadians_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_ToRadians");
        Vector_ToRadians_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_ToRadians_NativeFunction);
        Vector_ToRadians_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ToRadians_NativeFunction, "A");
        Vector_ToRadians_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ToRadians_NativeFunction, "ReturnValue");
        Vector_ToDegrees_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_ToDegrees");
        Vector_ToDegrees_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_ToDegrees_NativeFunction);
        Vector_ToDegrees_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ToDegrees_NativeFunction, "A");
        Vector_ToDegrees_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ToDegrees_NativeFunction, "ReturnValue");
        Vector_SnappedToGrid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_SnappedToGrid");
        Vector_SnappedToGrid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_SnappedToGrid_NativeFunction);
        Vector_SnappedToGrid_InVect_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_SnappedToGrid_NativeFunction, "InVect");
        Vector_SnappedToGrid_InGridSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_SnappedToGrid_NativeFunction, "InGridSize");
        Vector_SnappedToGrid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_SnappedToGrid_NativeFunction, "ReturnValue");
        Vector_SlerpVectorToDirection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_SlerpVectorToDirection");
        Vector_SlerpVectorToDirection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_SlerpVectorToDirection_NativeFunction);
        Vector_SlerpVectorToDirection_Vector_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_SlerpVectorToDirection_NativeFunction, "Vector");
        Vector_SlerpVectorToDirection_Direction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_SlerpVectorToDirection_NativeFunction, "Direction");
        Vector_SlerpVectorToDirection_Alpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_SlerpVectorToDirection_NativeFunction, "Alpha");
        Vector_SlerpVectorToDirection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_SlerpVectorToDirection_NativeFunction, "ReturnValue");
        Vector_SlerpNormals_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_SlerpNormals");
        Vector_SlerpNormals_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_SlerpNormals_NativeFunction);
        Vector_SlerpNormals_NormalA_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_SlerpNormals_NativeFunction, "NormalA");
        Vector_SlerpNormals_NormalB_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_SlerpNormals_NativeFunction, "NormalB");
        Vector_SlerpNormals_Alpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_SlerpNormals_NativeFunction, "Alpha");
        Vector_SlerpNormals_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_SlerpNormals_NativeFunction, "ReturnValue");
        Vector_Set_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_Set");
        Vector_Set_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_Set_NativeFunction);
        Vector_Set_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Set_NativeFunction, "A");
        Vector_Set_X_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Set_NativeFunction, "X");
        Vector_Set_Y_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Set_NativeFunction, "Y");
        Vector_Set_Z_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Set_NativeFunction, "Z");
        Vector_Right_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_Right");
        Vector_Right_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_Right_NativeFunction);
        Vector_Right_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Right_NativeFunction, "ReturnValue");
        Vector_Reciprocal_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_Reciprocal");
        Vector_Reciprocal_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_Reciprocal_NativeFunction);
        Vector_Reciprocal_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Reciprocal_NativeFunction, "A");
        Vector_Reciprocal_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Reciprocal_NativeFunction, "ReturnValue");
        Vector_ProjectOnToNormal_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_ProjectOnToNormal");
        Vector_ProjectOnToNormal_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_ProjectOnToNormal_NativeFunction);
        Vector_ProjectOnToNormal_V_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ProjectOnToNormal_NativeFunction, "V");
        Vector_ProjectOnToNormal_InNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ProjectOnToNormal_NativeFunction, "InNormal");
        Vector_ProjectOnToNormal_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ProjectOnToNormal_NativeFunction, "ReturnValue");
        Vector_One_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_One");
        Vector_One_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_One_NativeFunction);
        Vector_One_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_One_NativeFunction, "ReturnValue");
        Vector_NormalUnsafe_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_NormalUnsafe");
        Vector_NormalUnsafe_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_NormalUnsafe_NativeFunction);
        Vector_NormalUnsafe_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_NormalUnsafe_NativeFunction, "A");
        Vector_NormalUnsafe_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_NormalUnsafe_NativeFunction, "ReturnValue");
        Vector_Normalize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_Normalize");
        Vector_Normalize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_Normalize_NativeFunction);
        Vector_Normalize_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Normalize_NativeFunction, "A");
        Vector_Normalize_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Normalize_NativeFunction, "Tolerance");
        Vector_Normal2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_Normal2D");
        Vector_Normal2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_Normal2D_NativeFunction);
        Vector_Normal2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Normal2D_NativeFunction, "A");
        Vector_Normal2D_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Normal2D_NativeFunction, "Tolerance");
        Vector_Normal2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Normal2D_NativeFunction, "ReturnValue");
        Vector_MirrorByPlane_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_MirrorByPlane");
        Vector_MirrorByPlane_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_MirrorByPlane_NativeFunction);
        Vector_MirrorByPlane_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_MirrorByPlane_NativeFunction, "A");
        Vector_MirrorByPlane_InPlane_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_MirrorByPlane_NativeFunction, "InPlane");
        Vector_MirrorByPlane_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_MirrorByPlane_NativeFunction, "ReturnValue");
        Vector_Left_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_Left");
        Vector_Left_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_Left_NativeFunction);
        Vector_Left_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Left_NativeFunction, "ReturnValue");
        Vector_IsZero_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_IsZero");
        Vector_IsZero_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_IsZero_NativeFunction);
        Vector_IsZero_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_IsZero_NativeFunction, "A");
        Vector_IsZero_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_IsZero_NativeFunction, "ReturnValue");
        Vector_IsUnit_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_IsUnit");
        Vector_IsUnit_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_IsUnit_NativeFunction);
        Vector_IsUnit_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_IsUnit_NativeFunction, "A");
        Vector_IsUnit_SquaredLenthTolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_IsUnit_NativeFunction, "SquaredLenthTolerance");
        Vector_IsUnit_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_IsUnit_NativeFunction, "ReturnValue");
        Vector_IsUniform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_IsUniform");
        Vector_IsUniform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_IsUniform_NativeFunction);
        Vector_IsUniform_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_IsUniform_NativeFunction, "A");
        Vector_IsUniform_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_IsUniform_NativeFunction, "Tolerance");
        Vector_IsUniform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_IsUniform_NativeFunction, "ReturnValue");
        Vector_IsNormal_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_IsNormal");
        Vector_IsNormal_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_IsNormal_NativeFunction);
        Vector_IsNormal_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_IsNormal_NativeFunction, "A");
        Vector_IsNormal_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_IsNormal_NativeFunction, "ReturnValue");
        Vector_IsNearlyZero_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_IsNearlyZero");
        Vector_IsNearlyZero_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_IsNearlyZero_NativeFunction);
        Vector_IsNearlyZero_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_IsNearlyZero_NativeFunction, "A");
        Vector_IsNearlyZero_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_IsNearlyZero_NativeFunction, "Tolerance");
        Vector_IsNearlyZero_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_IsNearlyZero_NativeFunction, "ReturnValue");
        Vector_IsNAN_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_IsNAN");
        Vector_IsNAN_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_IsNAN_NativeFunction);
        Vector_IsNAN_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_IsNAN_NativeFunction, "A");
        Vector_IsNAN_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_IsNAN_NativeFunction, "ReturnValue");
        Vector_HeadingAngle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_HeadingAngle");
        Vector_HeadingAngle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_HeadingAngle_NativeFunction);
        Vector_HeadingAngle_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_HeadingAngle_NativeFunction, "A");
        Vector_HeadingAngle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_HeadingAngle_NativeFunction, "ReturnValue");
        Vector_GetSignVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_GetSignVector");
        Vector_GetSignVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_GetSignVector_NativeFunction);
        Vector_GetSignVector_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_GetSignVector_NativeFunction, "A");
        Vector_GetSignVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_GetSignVector_NativeFunction, "ReturnValue");
        Vector_GetProjection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_GetProjection");
        Vector_GetProjection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_GetProjection_NativeFunction);
        Vector_GetProjection_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_GetProjection_NativeFunction, "A");
        Vector_GetProjection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_GetProjection_NativeFunction, "ReturnValue");
        Vector_GetAbsMin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_GetAbsMin");
        Vector_GetAbsMin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_GetAbsMin_NativeFunction);
        Vector_GetAbsMin_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_GetAbsMin_NativeFunction, "A");
        Vector_GetAbsMin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_GetAbsMin_NativeFunction, "ReturnValue");
        Vector_GetAbsMax_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_GetAbsMax");
        Vector_GetAbsMax_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_GetAbsMax_NativeFunction);
        Vector_GetAbsMax_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_GetAbsMax_NativeFunction, "A");
        Vector_GetAbsMax_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_GetAbsMax_NativeFunction, "ReturnValue");
        Vector_GetAbs_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_GetAbs");
        Vector_GetAbs_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_GetAbs_NativeFunction);
        Vector_GetAbs_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_GetAbs_NativeFunction, "A");
        Vector_GetAbs_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_GetAbs_NativeFunction, "ReturnValue");
        Vector_Forward_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_Forward");
        Vector_Forward_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_Forward_NativeFunction);
        Vector_Forward_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Forward_NativeFunction, "ReturnValue");
        Vector_Down_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_Down");
        Vector_Down_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_Down_NativeFunction);
        Vector_Down_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Down_NativeFunction, "ReturnValue");
        Vector_DistanceSquared_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_DistanceSquared");
        Vector_DistanceSquared_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_DistanceSquared_NativeFunction);
        Vector_DistanceSquared_V1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_DistanceSquared_NativeFunction, "V1");
        Vector_DistanceSquared_V2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_DistanceSquared_NativeFunction, "V2");
        Vector_DistanceSquared_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_DistanceSquared_NativeFunction, "ReturnValue");
        Vector_Distance2DSquared_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_Distance2DSquared");
        Vector_Distance2DSquared_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_Distance2DSquared_NativeFunction);
        Vector_Distance2DSquared_V1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Distance2DSquared_NativeFunction, "V1");
        Vector_Distance2DSquared_V2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Distance2DSquared_NativeFunction, "V2");
        Vector_Distance2DSquared_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Distance2DSquared_NativeFunction, "ReturnValue");
        Vector_Distance2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_Distance2D");
        Vector_Distance2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_Distance2D_NativeFunction);
        Vector_Distance2D_V1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Distance2D_NativeFunction, "V1");
        Vector_Distance2D_V2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Distance2D_NativeFunction, "V2");
        Vector_Distance2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Distance2D_NativeFunction, "ReturnValue");
        Vector_Distance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_Distance");
        Vector_Distance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_Distance_NativeFunction);
        Vector_Distance_V1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Distance_NativeFunction, "V1");
        Vector_Distance_V2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Distance_NativeFunction, "V2");
        Vector_Distance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Distance_NativeFunction, "ReturnValue");
        Vector_CosineAngle2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_CosineAngle2D");
        Vector_CosineAngle2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_CosineAngle2D_NativeFunction);
        Vector_CosineAngle2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_CosineAngle2D_NativeFunction, "A");
        Vector_CosineAngle2D_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_CosineAngle2D_NativeFunction, "B");
        Vector_CosineAngle2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_CosineAngle2D_NativeFunction, "ReturnValue");
        Vector_ComponentMin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_ComponentMin");
        Vector_ComponentMin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_ComponentMin_NativeFunction);
        Vector_ComponentMin_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ComponentMin_NativeFunction, "A");
        Vector_ComponentMin_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ComponentMin_NativeFunction, "B");
        Vector_ComponentMin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ComponentMin_NativeFunction, "ReturnValue");
        Vector_ComponentMax_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_ComponentMax");
        Vector_ComponentMax_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_ComponentMax_NativeFunction);
        Vector_ComponentMax_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ComponentMax_NativeFunction, "A");
        Vector_ComponentMax_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ComponentMax_NativeFunction, "B");
        Vector_ComponentMax_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ComponentMax_NativeFunction, "ReturnValue");
        Vector_ClampSizeMax2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_ClampSizeMax2D");
        Vector_ClampSizeMax2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_ClampSizeMax2D_NativeFunction);
        Vector_ClampSizeMax2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ClampSizeMax2D_NativeFunction, "A");
        Vector_ClampSizeMax2D_Max_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ClampSizeMax2D_NativeFunction, "Max");
        Vector_ClampSizeMax2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ClampSizeMax2D_NativeFunction, "ReturnValue");
        Vector_ClampSizeMax_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_ClampSizeMax");
        Vector_ClampSizeMax_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_ClampSizeMax_NativeFunction);
        Vector_ClampSizeMax_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ClampSizeMax_NativeFunction, "A");
        Vector_ClampSizeMax_Max_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ClampSizeMax_NativeFunction, "Max");
        Vector_ClampSizeMax_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ClampSizeMax_NativeFunction, "ReturnValue");
        Vector_ClampSize2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_ClampSize2D");
        Vector_ClampSize2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_ClampSize2D_NativeFunction);
        Vector_ClampSize2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ClampSize2D_NativeFunction, "A");
        Vector_ClampSize2D_Min_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ClampSize2D_NativeFunction, "Min");
        Vector_ClampSize2D_Max_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ClampSize2D_NativeFunction, "Max");
        Vector_ClampSize2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_ClampSize2D_NativeFunction, "ReturnValue");
        Vector_BoundedToCube_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_BoundedToCube");
        Vector_BoundedToCube_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_BoundedToCube_NativeFunction);
        Vector_BoundedToCube_InVect_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_BoundedToCube_NativeFunction, "InVect");
        Vector_BoundedToCube_InRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_BoundedToCube_NativeFunction, "InRadius");
        Vector_BoundedToCube_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_BoundedToCube_NativeFunction, "ReturnValue");
        Vector_BoundedToBox_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_BoundedToBox");
        Vector_BoundedToBox_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_BoundedToBox_NativeFunction);
        Vector_BoundedToBox_InVect_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_BoundedToBox_NativeFunction, "InVect");
        Vector_BoundedToBox_InBoxMin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_BoundedToBox_NativeFunction, "InBoxMin");
        Vector_BoundedToBox_InBoxMax_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_BoundedToBox_NativeFunction, "InBoxMax");
        Vector_BoundedToBox_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_BoundedToBox_NativeFunction, "ReturnValue");
        Vector_Backward_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_Backward");
        Vector_Backward_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_Backward_NativeFunction);
        Vector_Backward_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Backward_NativeFunction, "ReturnValue");
        Vector_Assign_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_Assign");
        Vector_Assign_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_Assign_NativeFunction);
        Vector_Assign_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Assign_NativeFunction, "A");
        Vector_Assign_InVector_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_Assign_NativeFunction, "InVector");
        Vector_AddBounded_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector_AddBounded");
        Vector_AddBounded_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector_AddBounded_NativeFunction);
        Vector_AddBounded_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_AddBounded_NativeFunction, "A");
        Vector_AddBounded_InAddVect_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_AddBounded_NativeFunction, "InAddVect");
        Vector_AddBounded_InRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector_AddBounded_NativeFunction, "InRadius");
        Vector2DInterpTo_Constant_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector2DInterpTo_Constant");
        Vector2DInterpTo_Constant_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector2DInterpTo_Constant_NativeFunction);
        Vector2DInterpTo_Constant_Current_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector2DInterpTo_Constant_NativeFunction, "Current");
        Vector2DInterpTo_Constant_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector2DInterpTo_Constant_NativeFunction, "Target");
        Vector2DInterpTo_Constant_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector2DInterpTo_Constant_NativeFunction, "DeltaTime");
        Vector2DInterpTo_Constant_InterpSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector2DInterpTo_Constant_NativeFunction, "InterpSpeed");
        Vector2DInterpTo_Constant_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector2DInterpTo_Constant_NativeFunction, "ReturnValue");
        Vector2DInterpTo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector2DInterpTo");
        Vector2DInterpTo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector2DInterpTo_NativeFunction);
        Vector2DInterpTo_Current_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector2DInterpTo_NativeFunction, "Current");
        Vector2DInterpTo_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector2DInterpTo_NativeFunction, "Target");
        Vector2DInterpTo_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector2DInterpTo_NativeFunction, "DeltaTime");
        Vector2DInterpTo_InterpSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector2DInterpTo_NativeFunction, "InterpSpeed");
        Vector2DInterpTo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector2DInterpTo_NativeFunction, "ReturnValue");
        Vector2D_Zero_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector2D_Zero");
        Vector2D_Zero_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector2D_Zero_NativeFunction);
        Vector2D_Zero_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector2D_Zero_NativeFunction, "ReturnValue");
        Vector2D_Unit45Deg_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector2D_Unit45Deg");
        Vector2D_Unit45Deg_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector2D_Unit45Deg_NativeFunction);
        Vector2D_Unit45Deg_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector2D_Unit45Deg_NativeFunction, "ReturnValue");
        Vector2D_One_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Vector2D_One");
        Vector2D_One_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Vector2D_One_NativeFunction);
        Vector2D_One_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Vector2D_One_NativeFunction, "ReturnValue");
        UtcNow_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UtcNow");
        UtcNow_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UtcNow_NativeFunction);
        UtcNow_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UtcNow_NativeFunction, "ReturnValue");
        TransformRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TransformRotation");
        TransformRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TransformRotation_NativeFunction);
        TransformRotation_T_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TransformRotation_NativeFunction, "T");
        TransformRotation_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TransformRotation_NativeFunction, "Rotation");
        TransformRotation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TransformRotation_NativeFunction, "ReturnValue");
        TransformLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TransformLocation");
        TransformLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TransformLocation_NativeFunction);
        TransformLocation_T_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TransformLocation_NativeFunction, "T");
        TransformLocation_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TransformLocation_NativeFunction, "Location");
        TransformLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TransformLocation_NativeFunction, "ReturnValue");
        TransformDirection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TransformDirection");
        TransformDirection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TransformDirection_NativeFunction);
        TransformDirection_T_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TransformDirection_NativeFunction, "T");
        TransformDirection_Direction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TransformDirection_NativeFunction, "Direction");
        TransformDirection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TransformDirection_NativeFunction, "ReturnValue");
        Transform_Determinant_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Transform_Determinant");
        Transform_Determinant_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Transform_Determinant_NativeFunction);
        Transform_Determinant_Transform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Transform_Determinant_NativeFunction, "Transform");
        Transform_Determinant_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Transform_Determinant_NativeFunction, "ReturnValue");
        ToUnixTimestampDouble_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ToUnixTimestampDouble");
        ToUnixTimestampDouble_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ToUnixTimestampDouble_NativeFunction);
        ToUnixTimestampDouble_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ToUnixTimestampDouble_NativeFunction, "Time");
        ToUnixTimestampDouble_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ToUnixTimestampDouble_NativeFunction, "ReturnValue");
        ToUnixTimestamp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ToUnixTimestamp");
        ToUnixTimestamp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ToUnixTimestamp_NativeFunction);
        ToUnixTimestamp_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ToUnixTimestamp_NativeFunction, "Time");
        ToUnixTimestamp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ToUnixTimestamp_NativeFunction, "ReturnValue");
        ToSign2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ToSign2D");
        ToSign2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ToSign2D_NativeFunction);
        ToSign2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ToSign2D_NativeFunction, "A");
        ToSign2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ToSign2D_NativeFunction, "ReturnValue");
        ToRounded2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ToRounded2D");
        ToRounded2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ToRounded2D_NativeFunction);
        ToRounded2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ToRounded2D_NativeFunction, "A");
        ToRounded2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ToRounded2D_NativeFunction, "ReturnValue");
        ToHex_LinearColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ToHex_LinearColor");
        ToHex_LinearColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ToHex_LinearColor_NativeFunction);
        ToHex_LinearColor_InColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ToHex_LinearColor_NativeFunction, "InColor");
        ToHex_LinearColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ToHex_LinearColor_NativeFunction, "ReturnValue");
        ToDirectionAndLength2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ToDirectionAndLength2D");
        ToDirectionAndLength2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ToDirectionAndLength2D_NativeFunction);
        ToDirectionAndLength2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ToDirectionAndLength2D_NativeFunction, "A");
        ToDirectionAndLength2D_OutDir_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ToDirectionAndLength2D_NativeFunction, "OutDir");
        ToDirectionAndLength2D_OutLength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ToDirectionAndLength2D_NativeFunction, "OutLength");
        Today_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Today");
        Today_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Today_NativeFunction);
        Today_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Today_NativeFunction, "ReturnValue");
        TLerp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TLerp");
        TLerp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TLerp_NativeFunction);
        TLerp_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TLerp_NativeFunction, "A");
        TLerp_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TLerp_NativeFunction, "B");
        TLerp_Alpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TLerp_NativeFunction, "Alpha");
        TLerp_InterpMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TLerp_NativeFunction, "InterpMode");
        TLerp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TLerp_NativeFunction, "ReturnValue");
        TInterpTo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TInterpTo");
        TInterpTo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TInterpTo_NativeFunction);
        TInterpTo_Current_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TInterpTo_NativeFunction, "Current");
        TInterpTo_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TInterpTo_NativeFunction, "Target");
        TInterpTo_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TInterpTo_NativeFunction, "DeltaTime");
        TInterpTo_InterpSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TInterpTo_NativeFunction, "InterpSpeed");
        TInterpTo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TInterpTo_NativeFunction, "ReturnValue");
        TimespanZeroValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TimespanZeroValue");
        TimespanZeroValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TimespanZeroValue_NativeFunction);
        TimespanZeroValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TimespanZeroValue_NativeFunction, "ReturnValue");
        TimespanRatio_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TimespanRatio");
        TimespanRatio_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TimespanRatio_NativeFunction);
        TimespanRatio_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TimespanRatio_NativeFunction, "A");
        TimespanRatio_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TimespanRatio_NativeFunction, "B");
        TimespanRatio_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TimespanRatio_NativeFunction, "ReturnValue");
        TimespanMinValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TimespanMinValue");
        TimespanMinValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TimespanMinValue_NativeFunction);
        TimespanMinValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TimespanMinValue_NativeFunction, "ReturnValue");
        TimespanMaxValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TimespanMaxValue");
        TimespanMaxValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TimespanMaxValue_NativeFunction);
        TimespanMaxValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TimespanMaxValue_NativeFunction, "ReturnValue");
        TimespanFromString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TimespanFromString");
        TimespanFromString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TimespanFromString_NativeFunction);
        TimespanFromString_TimespanString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TimespanFromString_NativeFunction, "TimespanString");
        TimespanFromString_Result_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TimespanFromString_NativeFunction, "Result");
        TimespanFromString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TimespanFromString_NativeFunction, "ReturnValue");
        Tan_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Tan");
        Tan_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Tan_NativeFunction);
        Tan_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Tan_NativeFunction, "A");
        Tan_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Tan_NativeFunction, "ReturnValue");
        Subtract_VectorVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Subtract_VectorVector");
        Subtract_VectorVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Subtract_VectorVector_NativeFunction);
        Subtract_VectorVector_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_VectorVector_NativeFunction, "A");
        Subtract_VectorVector_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_VectorVector_NativeFunction, "B");
        Subtract_VectorVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_VectorVector_NativeFunction, "ReturnValue");
        Subtract_VectorInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Subtract_VectorInt");
        Subtract_VectorInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Subtract_VectorInt_NativeFunction);
        Subtract_VectorInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_VectorInt_NativeFunction, "A");
        Subtract_VectorInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_VectorInt_NativeFunction, "B");
        Subtract_VectorInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_VectorInt_NativeFunction, "ReturnValue");
        Subtract_VectorFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Subtract_VectorFloat");
        Subtract_VectorFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Subtract_VectorFloat_NativeFunction);
        Subtract_VectorFloat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_VectorFloat_NativeFunction, "A");
        Subtract_VectorFloat_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_VectorFloat_NativeFunction, "B");
        Subtract_VectorFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_VectorFloat_NativeFunction, "ReturnValue");
        Subtract_Vector2DVector2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Subtract_Vector2DVector2D");
        Subtract_Vector2DVector2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Subtract_Vector2DVector2D_NativeFunction);
        Subtract_Vector2DVector2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_Vector2DVector2D_NativeFunction, "A");
        Subtract_Vector2DVector2D_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_Vector2DVector2D_NativeFunction, "B");
        Subtract_Vector2DVector2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_Vector2DVector2D_NativeFunction, "ReturnValue");
        Subtract_Vector2DFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Subtract_Vector2DFloat");
        Subtract_Vector2DFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Subtract_Vector2DFloat_NativeFunction);
        Subtract_Vector2DFloat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_Vector2DFloat_NativeFunction, "A");
        Subtract_Vector2DFloat_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_Vector2DFloat_NativeFunction, "B");
        Subtract_Vector2DFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_Vector2DFloat_NativeFunction, "ReturnValue");
        Subtract_TimespanTimespan_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Subtract_TimespanTimespan");
        Subtract_TimespanTimespan_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Subtract_TimespanTimespan_NativeFunction);
        Subtract_TimespanTimespan_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_TimespanTimespan_NativeFunction, "A");
        Subtract_TimespanTimespan_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_TimespanTimespan_NativeFunction, "B");
        Subtract_TimespanTimespan_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_TimespanTimespan_NativeFunction, "ReturnValue");
        Subtract_QuatQuat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Subtract_QuatQuat");
        Subtract_QuatQuat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Subtract_QuatQuat_NativeFunction);
        Subtract_QuatQuat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_QuatQuat_NativeFunction, "A");
        Subtract_QuatQuat_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_QuatQuat_NativeFunction, "B");
        Subtract_QuatQuat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_QuatQuat_NativeFunction, "ReturnValue");
        Subtract_LinearColorLinearColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Subtract_LinearColorLinearColor");
        Subtract_LinearColorLinearColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Subtract_LinearColorLinearColor_NativeFunction);
        Subtract_LinearColorLinearColor_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_LinearColorLinearColor_NativeFunction, "A");
        Subtract_LinearColorLinearColor_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_LinearColorLinearColor_NativeFunction, "B");
        Subtract_LinearColorLinearColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_LinearColorLinearColor_NativeFunction, "ReturnValue");
        Subtract_IntPointIntPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Subtract_IntPointIntPoint");
        Subtract_IntPointIntPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Subtract_IntPointIntPoint_NativeFunction);
        Subtract_IntPointIntPoint_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_IntPointIntPoint_NativeFunction, "A");
        Subtract_IntPointIntPoint_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_IntPointIntPoint_NativeFunction, "B");
        Subtract_IntPointIntPoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_IntPointIntPoint_NativeFunction, "ReturnValue");
        Subtract_IntPointInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Subtract_IntPointInt");
        Subtract_IntPointInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Subtract_IntPointInt_NativeFunction);
        Subtract_IntPointInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_IntPointInt_NativeFunction, "A");
        Subtract_IntPointInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_IntPointInt_NativeFunction, "B");
        Subtract_IntPointInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_IntPointInt_NativeFunction, "ReturnValue");
        Subtract_IntInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Subtract_IntInt");
        Subtract_IntInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Subtract_IntInt_NativeFunction);
        Subtract_IntInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_IntInt_NativeFunction, "A");
        Subtract_IntInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_IntInt_NativeFunction, "B");
        Subtract_IntInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_IntInt_NativeFunction, "ReturnValue");
        Subtract_Int64Int64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Subtract_Int64Int64");
        Subtract_Int64Int64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Subtract_Int64Int64_NativeFunction);
        Subtract_Int64Int64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_Int64Int64_NativeFunction, "A");
        Subtract_Int64Int64_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_Int64Int64_NativeFunction, "B");
        Subtract_Int64Int64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_Int64Int64_NativeFunction, "ReturnValue");
        Subtract_DoubleDouble_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Subtract_DoubleDouble");
        Subtract_DoubleDouble_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Subtract_DoubleDouble_NativeFunction);
        Subtract_DoubleDouble_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_DoubleDouble_NativeFunction, "A");
        Subtract_DoubleDouble_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_DoubleDouble_NativeFunction, "B");
        Subtract_DoubleDouble_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_DoubleDouble_NativeFunction, "ReturnValue");
        Subtract_DateTimeTimespan_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Subtract_DateTimeTimespan");
        Subtract_DateTimeTimespan_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Subtract_DateTimeTimespan_NativeFunction);
        Subtract_DateTimeTimespan_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_DateTimeTimespan_NativeFunction, "A");
        Subtract_DateTimeTimespan_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_DateTimeTimespan_NativeFunction, "B");
        Subtract_DateTimeTimespan_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_DateTimeTimespan_NativeFunction, "ReturnValue");
        Subtract_DateTimeDateTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Subtract_DateTimeDateTime");
        Subtract_DateTimeDateTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Subtract_DateTimeDateTime_NativeFunction);
        Subtract_DateTimeDateTime_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_DateTimeDateTime_NativeFunction, "A");
        Subtract_DateTimeDateTime_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_DateTimeDateTime_NativeFunction, "B");
        Subtract_DateTimeDateTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_DateTimeDateTime_NativeFunction, "ReturnValue");
        Subtract_ByteByte_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Subtract_ByteByte");
        Subtract_ByteByte_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Subtract_ByteByte_NativeFunction);
        Subtract_ByteByte_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_ByteByte_NativeFunction, "A");
        Subtract_ByteByte_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_ByteByte_NativeFunction, "B");
        Subtract_ByteByte_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Subtract_ByteByte_NativeFunction, "ReturnValue");
        Square_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Square");
        Square_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Square_NativeFunction);
        Square_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Square_NativeFunction, "A");
        Square_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Square_NativeFunction, "ReturnValue");
        Sqrt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Sqrt");
        Sqrt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Sqrt_NativeFunction);
        Sqrt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Sqrt_NativeFunction, "A");
        Sqrt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Sqrt_NativeFunction, "ReturnValue");
        Spherical2DToUnitCartesian_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Spherical2DToUnitCartesian");
        Spherical2DToUnitCartesian_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Spherical2DToUnitCartesian_NativeFunction);
        Spherical2DToUnitCartesian_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Spherical2DToUnitCartesian_NativeFunction, "A");
        Spherical2DToUnitCartesian_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Spherical2DToUnitCartesian_NativeFunction, "ReturnValue");
        Sin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Sin");
        Sin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Sin_NativeFunction);
        Sin_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Sin_NativeFunction, "A");
        Sin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Sin_NativeFunction, "ReturnValue");
        SignOfInteger64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SignOfInteger64");
        SignOfInteger64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SignOfInteger64_NativeFunction);
        SignOfInteger64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SignOfInteger64_NativeFunction, "A");
        SignOfInteger64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SignOfInteger64_NativeFunction, "ReturnValue");
        SignOfInteger_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SignOfInteger");
        SignOfInteger_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SignOfInteger_NativeFunction);
        SignOfInteger_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SignOfInteger_NativeFunction, "A");
        SignOfInteger_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SignOfInteger_NativeFunction, "ReturnValue");
        SignOfFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SignOfFloat");
        SignOfFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SignOfFloat_NativeFunction);
        SignOfFloat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SignOfFloat_NativeFunction, "A");
        SignOfFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SignOfFloat_NativeFunction, "ReturnValue");
        SetVectorSpringStateVelocity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVectorSpringStateVelocity");
        SetVectorSpringStateVelocity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVectorSpringStateVelocity_NativeFunction);
        SetVectorSpringStateVelocity_SpringState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVectorSpringStateVelocity_NativeFunction, "SpringState");
        SetVectorSpringStateVelocity_Velocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVectorSpringStateVelocity_NativeFunction, "Velocity");
        SetRandomStreamSeed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRandomStreamSeed");
        SetRandomStreamSeed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRandomStreamSeed_NativeFunction);
        SetRandomStreamSeed_Stream_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRandomStreamSeed_NativeFunction, "Stream");
        SetRandomStreamSeed_NewSeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRandomStreamSeed_NativeFunction, "NewSeed");
        SetQuaternionSpringStateAngularVelocity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetQuaternionSpringStateAngularVelocity");
        SetQuaternionSpringStateAngularVelocity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetQuaternionSpringStateAngularVelocity_NativeFunction);
        SetQuaternionSpringStateAngularVelocity_SpringState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetQuaternionSpringStateAngularVelocity_NativeFunction, "SpringState");
        SetQuaternionSpringStateAngularVelocity_AngularVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetQuaternionSpringStateAngularVelocity_NativeFunction, "AngularVelocity");
        SetFloatSpringStateVelocity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFloatSpringStateVelocity");
        SetFloatSpringStateVelocity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFloatSpringStateVelocity_NativeFunction);
        SetFloatSpringStateVelocity_SpringState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFloatSpringStateVelocity_NativeFunction, "SpringState");
        SetFloatSpringStateVelocity_Velocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFloatSpringStateVelocity_NativeFunction, "Velocity");
        Set2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Set2D");
        Set2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Set2D_NativeFunction);
        Set2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Set2D_NativeFunction, "A");
        Set2D_X_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Set2D_NativeFunction, "X");
        Set2D_Y_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Set2D_NativeFunction, "Y");
        SelectVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SelectVector");
        SelectVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SelectVector_NativeFunction);
        SelectVector_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectVector_NativeFunction, "A");
        SelectVector_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectVector_NativeFunction, "B");
        SelectVector_bPickA_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectVector_NativeFunction, "bPickA");
        SelectVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectVector_NativeFunction, "ReturnValue");
        SelectTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SelectTransform");
        SelectTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SelectTransform_NativeFunction);
        SelectTransform_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectTransform_NativeFunction, "A");
        SelectTransform_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectTransform_NativeFunction, "B");
        SelectTransform_bPickA_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectTransform_NativeFunction, "bPickA");
        SelectTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectTransform_NativeFunction, "ReturnValue");
        SelectString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SelectString");
        SelectString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SelectString_NativeFunction);
        SelectString_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectString_NativeFunction, "A");
        SelectString_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectString_NativeFunction, "B");
        SelectString_bPickA_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectString_NativeFunction, "bPickA");
        SelectString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectString_NativeFunction, "ReturnValue");
        SelectRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SelectRotator");
        SelectRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SelectRotator_NativeFunction);
        SelectRotator_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectRotator_NativeFunction, "A");
        SelectRotator_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectRotator_NativeFunction, "B");
        SelectRotator_bPickA_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectRotator_NativeFunction, "bPickA");
        SelectRotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectRotator_NativeFunction, "ReturnValue");
        SelectObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SelectObject");
        SelectObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SelectObject_NativeFunction);
        SelectObject_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectObject_NativeFunction, "A");
        SelectObject_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectObject_NativeFunction, "B");
        SelectObject_bSelectA_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectObject_NativeFunction, "bSelectA");
        SelectObject_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectObject_NativeFunction, "ReturnValue");
        SelectInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SelectInt");
        SelectInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SelectInt_NativeFunction);
        SelectInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectInt_NativeFunction, "A");
        SelectInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectInt_NativeFunction, "B");
        SelectInt_bPickA_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectInt_NativeFunction, "bPickA");
        SelectInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectInt_NativeFunction, "ReturnValue");
        SelectFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SelectFloat");
        SelectFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SelectFloat_NativeFunction);
        SelectFloat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectFloat_NativeFunction, "A");
        SelectFloat_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectFloat_NativeFunction, "B");
        SelectFloat_bPickA_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectFloat_NativeFunction, "bPickA");
        SelectFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectFloat_NativeFunction, "ReturnValue");
        SelectColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SelectColor");
        SelectColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SelectColor_NativeFunction);
        SelectColor_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectColor_NativeFunction, "A");
        SelectColor_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectColor_NativeFunction, "B");
        SelectColor_bPickA_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectColor_NativeFunction, "bPickA");
        SelectColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectColor_NativeFunction, "ReturnValue");
        SelectClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SelectClass");
        SelectClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SelectClass_NativeFunction);
        SelectClass_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectClass_NativeFunction, "A");
        SelectClass_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectClass_NativeFunction, "B");
        SelectClass_bSelectA_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectClass_NativeFunction, "bSelectA");
        SelectClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectClass_NativeFunction, "ReturnValue");
        SeedRandomStream_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SeedRandomStream");
        SeedRandomStream_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SeedRandomStream_NativeFunction);
        SeedRandomStream_Stream_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SeedRandomStream_NativeFunction, "Stream");
        SafeDivide_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SafeDivide");
        SafeDivide_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SafeDivide_NativeFunction);
        SafeDivide_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SafeDivide_NativeFunction, "A");
        SafeDivide_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SafeDivide_NativeFunction, "B");
        SafeDivide_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SafeDivide_NativeFunction, "ReturnValue");
        Round64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Round64");
        Round64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Round64_NativeFunction);
        Round64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Round64_NativeFunction, "A");
        Round64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Round64_NativeFunction, "ReturnValue");
        Round_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Round");
        Round_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Round_NativeFunction);
        Round_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Round_NativeFunction, "A");
        Round_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Round_NativeFunction, "ReturnValue");
        RotatorFromAxisAndAngle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RotatorFromAxisAndAngle");
        RotatorFromAxisAndAngle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RotatorFromAxisAndAngle_NativeFunction);
        RotatorFromAxisAndAngle_Axis_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RotatorFromAxisAndAngle_NativeFunction, "Axis");
        RotatorFromAxisAndAngle_Angle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RotatorFromAxisAndAngle_NativeFunction, "Angle");
        RotatorFromAxisAndAngle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RotatorFromAxisAndAngle_NativeFunction, "ReturnValue");
        RotateAngleAxis_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RotateAngleAxis");
        RotateAngleAxis_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RotateAngleAxis_NativeFunction);
        RotateAngleAxis_InVect_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RotateAngleAxis_NativeFunction, "InVect");
        RotateAngleAxis_AngleDeg_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RotateAngleAxis_NativeFunction, "AngleDeg");
        RotateAngleAxis_Axis_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RotateAngleAxis_NativeFunction, "Axis");
        RotateAngleAxis_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RotateAngleAxis_NativeFunction, "ReturnValue");
        RLerp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RLerp");
        RLerp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RLerp_NativeFunction);
        RLerp_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RLerp_NativeFunction, "A");
        RLerp_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RLerp_NativeFunction, "B");
        RLerp_Alpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RLerp_NativeFunction, "Alpha");
        RLerp_bShortestPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RLerp_NativeFunction, "bShortestPath");
        RLerp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RLerp_NativeFunction, "ReturnValue");
        RInterpTo_Constant_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RInterpTo_Constant");
        RInterpTo_Constant_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RInterpTo_Constant_NativeFunction);
        RInterpTo_Constant_Current_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RInterpTo_Constant_NativeFunction, "Current");
        RInterpTo_Constant_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RInterpTo_Constant_NativeFunction, "Target");
        RInterpTo_Constant_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RInterpTo_Constant_NativeFunction, "DeltaTime");
        RInterpTo_Constant_InterpSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RInterpTo_Constant_NativeFunction, "InterpSpeed");
        RInterpTo_Constant_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RInterpTo_Constant_NativeFunction, "ReturnValue");
        RInterpTo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RInterpTo");
        RInterpTo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RInterpTo_NativeFunction);
        RInterpTo_Current_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RInterpTo_NativeFunction, "Current");
        RInterpTo_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RInterpTo_NativeFunction, "Target");
        RInterpTo_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RInterpTo_NativeFunction, "DeltaTime");
        RInterpTo_InterpSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RInterpTo_NativeFunction, "InterpSpeed");
        RInterpTo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RInterpTo_NativeFunction, "ReturnValue");
        RGBToHSV_Vector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RGBToHSV_Vector");
        RGBToHSV_Vector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RGBToHSV_Vector_NativeFunction);
        RGBToHSV_Vector_RGB_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RGBToHSV_Vector_NativeFunction, "RGB");
        RGBToHSV_Vector_HSV_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RGBToHSV_Vector_NativeFunction, "HSV");
        RGBToHSV_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RGBToHSV");
        RGBToHSV_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RGBToHSV_NativeFunction);
        RGBToHSV_InColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RGBToHSV_NativeFunction, "InColor");
        RGBToHSV_H_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RGBToHSV_NativeFunction, "H");
        RGBToHSV_S_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RGBToHSV_NativeFunction, "S");
        RGBToHSV_V_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RGBToHSV_NativeFunction, "V");
        RGBToHSV_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RGBToHSV_NativeFunction, "A");
        RGBLinearToHSV_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RGBLinearToHSV");
        RGBLinearToHSV_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RGBLinearToHSV_NativeFunction);
        RGBLinearToHSV_RGB_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RGBLinearToHSV_NativeFunction, "RGB");
        RGBLinearToHSV_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RGBLinearToHSV_NativeFunction, "ReturnValue");
        ResetVectorSpringState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetVectorSpringState");
        ResetVectorSpringState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ResetVectorSpringState_NativeFunction);
        ResetVectorSpringState_SpringState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResetVectorSpringState_NativeFunction, "SpringState");
        ResetRandomStream_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetRandomStream");
        ResetRandomStream_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ResetRandomStream_NativeFunction);
        ResetRandomStream_Stream_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResetRandomStream_NativeFunction, "Stream");
        ResetQuaternionSpringState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetQuaternionSpringState");
        ResetQuaternionSpringState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ResetQuaternionSpringState_NativeFunction);
        ResetQuaternionSpringState_SpringState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResetQuaternionSpringState_NativeFunction, "SpringState");
        ResetFloatSpringState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetFloatSpringState");
        ResetFloatSpringState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ResetFloatSpringState_NativeFunction);
        ResetFloatSpringState_SpringState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResetFloatSpringState_NativeFunction, "SpringState");
        RandomUnitVectorInEllipticalConeInRadiansFromStream_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomUnitVectorInEllipticalConeInRadiansFromStream");
        RandomUnitVectorInEllipticalConeInRadiansFromStream_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomUnitVectorInEllipticalConeInRadiansFromStream_NativeFunction);
        RandomUnitVectorInEllipticalConeInRadiansFromStream_Stream_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInEllipticalConeInRadiansFromStream_NativeFunction, "Stream");
        RandomUnitVectorInEllipticalConeInRadiansFromStream_ConeDir_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInEllipticalConeInRadiansFromStream_NativeFunction, "ConeDir");
        RandomUnitVectorInEllipticalConeInRadiansFromStream_MaxYawInRadians_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInEllipticalConeInRadiansFromStream_NativeFunction, "MaxYawInRadians");
        RandomUnitVectorInEllipticalConeInRadiansFromStream_MaxPitchInRadians_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInEllipticalConeInRadiansFromStream_NativeFunction, "MaxPitchInRadians");
        RandomUnitVectorInEllipticalConeInRadiansFromStream_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInEllipticalConeInRadiansFromStream_NativeFunction, "ReturnValue");
        RandomUnitVectorInEllipticalConeInRadians_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomUnitVectorInEllipticalConeInRadians");
        RandomUnitVectorInEllipticalConeInRadians_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomUnitVectorInEllipticalConeInRadians_NativeFunction);
        RandomUnitVectorInEllipticalConeInRadians_ConeDir_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInEllipticalConeInRadians_NativeFunction, "ConeDir");
        RandomUnitVectorInEllipticalConeInRadians_MaxYawInRadians_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInEllipticalConeInRadians_NativeFunction, "MaxYawInRadians");
        RandomUnitVectorInEllipticalConeInRadians_MaxPitchInRadians_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInEllipticalConeInRadians_NativeFunction, "MaxPitchInRadians");
        RandomUnitVectorInEllipticalConeInRadians_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInEllipticalConeInRadians_NativeFunction, "ReturnValue");
        RandomUnitVectorInEllipticalConeInDegreesFromStream_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomUnitVectorInEllipticalConeInDegreesFromStream");
        RandomUnitVectorInEllipticalConeInDegreesFromStream_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomUnitVectorInEllipticalConeInDegreesFromStream_NativeFunction);
        RandomUnitVectorInEllipticalConeInDegreesFromStream_Stream_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInEllipticalConeInDegreesFromStream_NativeFunction, "Stream");
        RandomUnitVectorInEllipticalConeInDegreesFromStream_ConeDir_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInEllipticalConeInDegreesFromStream_NativeFunction, "ConeDir");
        RandomUnitVectorInEllipticalConeInDegreesFromStream_MaxYawInDegrees_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInEllipticalConeInDegreesFromStream_NativeFunction, "MaxYawInDegrees");
        RandomUnitVectorInEllipticalConeInDegreesFromStream_MaxPitchInDegrees_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInEllipticalConeInDegreesFromStream_NativeFunction, "MaxPitchInDegrees");
        RandomUnitVectorInEllipticalConeInDegreesFromStream_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInEllipticalConeInDegreesFromStream_NativeFunction, "ReturnValue");
        RandomUnitVectorInEllipticalConeInDegrees_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomUnitVectorInEllipticalConeInDegrees");
        RandomUnitVectorInEllipticalConeInDegrees_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomUnitVectorInEllipticalConeInDegrees_NativeFunction);
        RandomUnitVectorInEllipticalConeInDegrees_ConeDir_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInEllipticalConeInDegrees_NativeFunction, "ConeDir");
        RandomUnitVectorInEllipticalConeInDegrees_MaxYawInDegrees_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInEllipticalConeInDegrees_NativeFunction, "MaxYawInDegrees");
        RandomUnitVectorInEllipticalConeInDegrees_MaxPitchInDegrees_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInEllipticalConeInDegrees_NativeFunction, "MaxPitchInDegrees");
        RandomUnitVectorInEllipticalConeInDegrees_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInEllipticalConeInDegrees_NativeFunction, "ReturnValue");
        RandomUnitVectorInConeInRadiansFromStream_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomUnitVectorInConeInRadiansFromStream");
        RandomUnitVectorInConeInRadiansFromStream_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomUnitVectorInConeInRadiansFromStream_NativeFunction);
        RandomUnitVectorInConeInRadiansFromStream_Stream_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInConeInRadiansFromStream_NativeFunction, "Stream");
        RandomUnitVectorInConeInRadiansFromStream_ConeDir_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInConeInRadiansFromStream_NativeFunction, "ConeDir");
        RandomUnitVectorInConeInRadiansFromStream_ConeHalfAngleInRadians_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInConeInRadiansFromStream_NativeFunction, "ConeHalfAngleInRadians");
        RandomUnitVectorInConeInRadiansFromStream_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInConeInRadiansFromStream_NativeFunction, "ReturnValue");
        RandomUnitVectorInConeInRadians_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomUnitVectorInConeInRadians");
        RandomUnitVectorInConeInRadians_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomUnitVectorInConeInRadians_NativeFunction);
        RandomUnitVectorInConeInRadians_ConeDir_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInConeInRadians_NativeFunction, "ConeDir");
        RandomUnitVectorInConeInRadians_ConeHalfAngleInRadians_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInConeInRadians_NativeFunction, "ConeHalfAngleInRadians");
        RandomUnitVectorInConeInRadians_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInConeInRadians_NativeFunction, "ReturnValue");
        RandomUnitVectorInConeInDegreesFromStream_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomUnitVectorInConeInDegreesFromStream");
        RandomUnitVectorInConeInDegreesFromStream_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomUnitVectorInConeInDegreesFromStream_NativeFunction);
        RandomUnitVectorInConeInDegreesFromStream_Stream_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInConeInDegreesFromStream_NativeFunction, "Stream");
        RandomUnitVectorInConeInDegreesFromStream_ConeDir_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInConeInDegreesFromStream_NativeFunction, "ConeDir");
        RandomUnitVectorInConeInDegreesFromStream_ConeHalfAngleInDegrees_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInConeInDegreesFromStream_NativeFunction, "ConeHalfAngleInDegrees");
        RandomUnitVectorInConeInDegreesFromStream_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInConeInDegreesFromStream_NativeFunction, "ReturnValue");
        RandomUnitVectorInConeInDegrees_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomUnitVectorInConeInDegrees");
        RandomUnitVectorInConeInDegrees_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomUnitVectorInConeInDegrees_NativeFunction);
        RandomUnitVectorInConeInDegrees_ConeDir_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInConeInDegrees_NativeFunction, "ConeDir");
        RandomUnitVectorInConeInDegrees_ConeHalfAngleInDegrees_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInConeInDegrees_NativeFunction, "ConeHalfAngleInDegrees");
        RandomUnitVectorInConeInDegrees_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorInConeInDegrees_NativeFunction, "ReturnValue");
        RandomUnitVectorFromStream_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomUnitVectorFromStream");
        RandomUnitVectorFromStream_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomUnitVectorFromStream_NativeFunction);
        RandomUnitVectorFromStream_Stream_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorFromStream_NativeFunction, "Stream");
        RandomUnitVectorFromStream_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVectorFromStream_NativeFunction, "ReturnValue");
        RandomUnitVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomUnitVector");
        RandomUnitVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomUnitVector_NativeFunction);
        RandomUnitVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomUnitVector_NativeFunction, "ReturnValue");
        RandomRotatorFromStream_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomRotatorFromStream");
        RandomRotatorFromStream_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomRotatorFromStream_NativeFunction);
        RandomRotatorFromStream_Stream_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomRotatorFromStream_NativeFunction, "Stream");
        RandomRotatorFromStream_bRoll_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomRotatorFromStream_NativeFunction, "bRoll");
        RandomRotatorFromStream_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomRotatorFromStream_NativeFunction, "ReturnValue");
        RandomRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomRotator");
        RandomRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomRotator_NativeFunction);
        RandomRotator_bRoll_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomRotator_NativeFunction, "bRoll");
        RandomRotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomRotator_NativeFunction, "ReturnValue");
        RandomPointInBoundingBoxFromStream_Box_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomPointInBoundingBoxFromStream_Box");
        RandomPointInBoundingBoxFromStream_Box_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomPointInBoundingBoxFromStream_Box_NativeFunction);
        RandomPointInBoundingBoxFromStream_Box_Stream_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomPointInBoundingBoxFromStream_Box_NativeFunction, "Stream");
        RandomPointInBoundingBoxFromStream_Box_Box_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomPointInBoundingBoxFromStream_Box_NativeFunction, "Box");
        RandomPointInBoundingBoxFromStream_Box_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomPointInBoundingBoxFromStream_Box_NativeFunction, "ReturnValue");
        RandomPointInBoundingBoxFromStream_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomPointInBoundingBoxFromStream");
        RandomPointInBoundingBoxFromStream_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomPointInBoundingBoxFromStream_NativeFunction);
        RandomPointInBoundingBoxFromStream_Stream_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomPointInBoundingBoxFromStream_NativeFunction, "Stream");
        RandomPointInBoundingBoxFromStream_Center_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomPointInBoundingBoxFromStream_NativeFunction, "Center");
        RandomPointInBoundingBoxFromStream_HalfSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomPointInBoundingBoxFromStream_NativeFunction, "HalfSize");
        RandomPointInBoundingBoxFromStream_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomPointInBoundingBoxFromStream_NativeFunction, "ReturnValue");
        RandomPointInBoundingBox_Box_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomPointInBoundingBox_Box");
        RandomPointInBoundingBox_Box_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomPointInBoundingBox_Box_NativeFunction);
        RandomPointInBoundingBox_Box_Box_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomPointInBoundingBox_Box_NativeFunction, "Box");
        RandomPointInBoundingBox_Box_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomPointInBoundingBox_Box_NativeFunction, "ReturnValue");
        RandomPointInBoundingBox_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomPointInBoundingBox");
        RandomPointInBoundingBox_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomPointInBoundingBox_NativeFunction);
        RandomPointInBoundingBox_Center_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomPointInBoundingBox_NativeFunction, "Center");
        RandomPointInBoundingBox_HalfSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomPointInBoundingBox_NativeFunction, "HalfSize");
        RandomPointInBoundingBox_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomPointInBoundingBox_NativeFunction, "ReturnValue");
        RandomIntegerInRangeFromStream_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomIntegerInRangeFromStream");
        RandomIntegerInRangeFromStream_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomIntegerInRangeFromStream_NativeFunction);
        RandomIntegerInRangeFromStream_Stream_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomIntegerInRangeFromStream_NativeFunction, "Stream");
        RandomIntegerInRangeFromStream_Min_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomIntegerInRangeFromStream_NativeFunction, "Min");
        RandomIntegerInRangeFromStream_Max_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomIntegerInRangeFromStream_NativeFunction, "Max");
        RandomIntegerInRangeFromStream_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomIntegerInRangeFromStream_NativeFunction, "ReturnValue");
        RandomIntegerInRange_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomIntegerInRange");
        RandomIntegerInRange_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomIntegerInRange_NativeFunction);
        RandomIntegerInRange_Min_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomIntegerInRange_NativeFunction, "Min");
        RandomIntegerInRange_Max_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomIntegerInRange_NativeFunction, "Max");
        RandomIntegerInRange_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomIntegerInRange_NativeFunction, "ReturnValue");
        RandomIntegerFromStream_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomIntegerFromStream");
        RandomIntegerFromStream_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomIntegerFromStream_NativeFunction);
        RandomIntegerFromStream_Stream_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomIntegerFromStream_NativeFunction, "Stream");
        RandomIntegerFromStream_Max_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomIntegerFromStream_NativeFunction, "Max");
        RandomIntegerFromStream_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomIntegerFromStream_NativeFunction, "ReturnValue");
        RandomInteger64InRange_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomInteger64InRange");
        RandomInteger64InRange_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomInteger64InRange_NativeFunction);
        RandomInteger64InRange_Min_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomInteger64InRange_NativeFunction, "Min");
        RandomInteger64InRange_Max_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomInteger64InRange_NativeFunction, "Max");
        RandomInteger64InRange_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomInteger64InRange_NativeFunction, "ReturnValue");
        RandomInteger64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomInteger64");
        RandomInteger64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomInteger64_NativeFunction);
        RandomInteger64_Max_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomInteger64_NativeFunction, "Max");
        RandomInteger64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomInteger64_NativeFunction, "ReturnValue");
        RandomInteger_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomInteger");
        RandomInteger_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomInteger_NativeFunction);
        RandomInteger_Max_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomInteger_NativeFunction, "Max");
        RandomInteger_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomInteger_NativeFunction, "ReturnValue");
        RandomFloatInRangeFromStream_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomFloatInRangeFromStream");
        RandomFloatInRangeFromStream_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomFloatInRangeFromStream_NativeFunction);
        RandomFloatInRangeFromStream_Stream_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomFloatInRangeFromStream_NativeFunction, "Stream");
        RandomFloatInRangeFromStream_Min_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomFloatInRangeFromStream_NativeFunction, "Min");
        RandomFloatInRangeFromStream_Max_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomFloatInRangeFromStream_NativeFunction, "Max");
        RandomFloatInRangeFromStream_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomFloatInRangeFromStream_NativeFunction, "ReturnValue");
        RandomFloatInRange_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomFloatInRange");
        RandomFloatInRange_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomFloatInRange_NativeFunction);
        RandomFloatInRange_Min_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomFloatInRange_NativeFunction, "Min");
        RandomFloatInRange_Max_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomFloatInRange_NativeFunction, "Max");
        RandomFloatInRange_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomFloatInRange_NativeFunction, "ReturnValue");
        RandomFloatFromStream_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomFloatFromStream");
        RandomFloatFromStream_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomFloatFromStream_NativeFunction);
        RandomFloatFromStream_Stream_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomFloatFromStream_NativeFunction, "Stream");
        RandomFloatFromStream_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomFloatFromStream_NativeFunction, "ReturnValue");
        RandomFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomFloat");
        RandomFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomFloat_NativeFunction);
        RandomFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomFloat_NativeFunction, "ReturnValue");
        RandomBoolWithWeightFromStream_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomBoolWithWeightFromStream");
        RandomBoolWithWeightFromStream_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomBoolWithWeightFromStream_NativeFunction);
        RandomBoolWithWeightFromStream_RandomStream_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomBoolWithWeightFromStream_NativeFunction, "RandomStream");
        RandomBoolWithWeightFromStream_Weight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomBoolWithWeightFromStream_NativeFunction, "Weight");
        RandomBoolWithWeightFromStream_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomBoolWithWeightFromStream_NativeFunction, "ReturnValue");
        RandomBoolWithWeight_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomBoolWithWeight");
        RandomBoolWithWeight_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomBoolWithWeight_NativeFunction);
        RandomBoolWithWeight_Weight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomBoolWithWeight_NativeFunction, "Weight");
        RandomBoolWithWeight_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomBoolWithWeight_NativeFunction, "ReturnValue");
        RandomBoolFromStream_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomBoolFromStream");
        RandomBoolFromStream_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomBoolFromStream_NativeFunction);
        RandomBoolFromStream_Stream_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomBoolFromStream_NativeFunction, "Stream");
        RandomBoolFromStream_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomBoolFromStream_NativeFunction, "ReturnValue");
        RandomBool_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RandomBool");
        RandomBool_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RandomBool_NativeFunction);
        RandomBool_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RandomBool_NativeFunction, "ReturnValue");
        RadiansToDegrees_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RadiansToDegrees");
        RadiansToDegrees_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RadiansToDegrees_NativeFunction);
        RadiansToDegrees_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RadiansToDegrees_NativeFunction, "A");
        RadiansToDegrees_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RadiansToDegrees_NativeFunction, "ReturnValue");
        QuaternionSpringInterp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "QuaternionSpringInterp");
        QuaternionSpringInterp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(QuaternionSpringInterp_NativeFunction);
        QuaternionSpringInterp_Current_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(QuaternionSpringInterp_NativeFunction, "Current");
        QuaternionSpringInterp_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(QuaternionSpringInterp_NativeFunction, "Target");
        QuaternionSpringInterp_SpringState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(QuaternionSpringInterp_NativeFunction, "SpringState");
        QuaternionSpringInterp_Stiffness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(QuaternionSpringInterp_NativeFunction, "Stiffness");
        QuaternionSpringInterp_CriticalDampingFactor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(QuaternionSpringInterp_NativeFunction, "CriticalDampingFactor");
        QuaternionSpringInterp_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(QuaternionSpringInterp_NativeFunction, "DeltaTime");
        QuaternionSpringInterp_Mass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(QuaternionSpringInterp_NativeFunction, "Mass");
        QuaternionSpringInterp_TargetVelocityAmount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(QuaternionSpringInterp_NativeFunction, "TargetVelocityAmount");
        QuaternionSpringInterp_bInitializeFromTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(QuaternionSpringInterp_NativeFunction, "bInitializeFromTarget");
        QuaternionSpringInterp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(QuaternionSpringInterp_NativeFunction, "ReturnValue");
        Quat_VectorUp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_VectorUp");
        Quat_VectorUp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_VectorUp_NativeFunction);
        Quat_VectorUp_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_VectorUp_NativeFunction, "Q");
        Quat_VectorUp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_VectorUp_NativeFunction, "ReturnValue");
        Quat_VectorRight_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_VectorRight");
        Quat_VectorRight_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_VectorRight_NativeFunction);
        Quat_VectorRight_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_VectorRight_NativeFunction, "Q");
        Quat_VectorRight_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_VectorRight_NativeFunction, "ReturnValue");
        Quat_VectorForward_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_VectorForward");
        Quat_VectorForward_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_VectorForward_NativeFunction);
        Quat_VectorForward_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_VectorForward_NativeFunction, "Q");
        Quat_VectorForward_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_VectorForward_NativeFunction, "ReturnValue");
        Quat_UnrotateVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_UnrotateVector");
        Quat_UnrotateVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_UnrotateVector_NativeFunction);
        Quat_UnrotateVector_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_UnrotateVector_NativeFunction, "Q");
        Quat_UnrotateVector_V_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_UnrotateVector_NativeFunction, "V");
        Quat_UnrotateVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_UnrotateVector_NativeFunction, "ReturnValue");
        Quat_Slerp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_Slerp");
        Quat_Slerp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_Slerp_NativeFunction);
        Quat_Slerp_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Slerp_NativeFunction, "A");
        Quat_Slerp_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Slerp_NativeFunction, "B");
        Quat_Slerp_Alpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Slerp_NativeFunction, "Alpha");
        Quat_Slerp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Slerp_NativeFunction, "ReturnValue");
        Quat_SizeSquared_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_SizeSquared");
        Quat_SizeSquared_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_SizeSquared_NativeFunction);
        Quat_SizeSquared_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_SizeSquared_NativeFunction, "Q");
        Quat_SizeSquared_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_SizeSquared_NativeFunction, "ReturnValue");
        Quat_Size_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_Size");
        Quat_Size_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_Size_NativeFunction);
        Quat_Size_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Size_NativeFunction, "Q");
        Quat_Size_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Size_NativeFunction, "ReturnValue");
        Quat_SetFromEuler_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_SetFromEuler");
        Quat_SetFromEuler_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_SetFromEuler_NativeFunction);
        Quat_SetFromEuler_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_SetFromEuler_NativeFunction, "Q");
        Quat_SetFromEuler_Euler_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_SetFromEuler_NativeFunction, "Euler");
        Quat_SetComponents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_SetComponents");
        Quat_SetComponents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_SetComponents_NativeFunction);
        Quat_SetComponents_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_SetComponents_NativeFunction, "Q");
        Quat_SetComponents_X_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_SetComponents_NativeFunction, "X");
        Quat_SetComponents_Y_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_SetComponents_NativeFunction, "Y");
        Quat_SetComponents_Z_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_SetComponents_NativeFunction, "Z");
        Quat_SetComponents_W_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_SetComponents_NativeFunction, "W");
        Quat_Rotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_Rotator");
        Quat_Rotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_Rotator_NativeFunction);
        Quat_Rotator_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Rotator_NativeFunction, "Q");
        Quat_Rotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Rotator_NativeFunction, "ReturnValue");
        Quat_RotateVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_RotateVector");
        Quat_RotateVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_RotateVector_NativeFunction);
        Quat_RotateVector_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_RotateVector_NativeFunction, "Q");
        Quat_RotateVector_V_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_RotateVector_NativeFunction, "V");
        Quat_RotateVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_RotateVector_NativeFunction, "ReturnValue");
        Quat_Normalized_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_Normalized");
        Quat_Normalized_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_Normalized_NativeFunction);
        Quat_Normalized_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Normalized_NativeFunction, "Q");
        Quat_Normalized_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Normalized_NativeFunction, "Tolerance");
        Quat_Normalized_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Normalized_NativeFunction, "ReturnValue");
        Quat_Normalize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_Normalize");
        Quat_Normalize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_Normalize_NativeFunction);
        Quat_Normalize_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Normalize_NativeFunction, "Q");
        Quat_Normalize_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Normalize_NativeFunction, "Tolerance");
        Quat_MakeFromEuler_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_MakeFromEuler");
        Quat_MakeFromEuler_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_MakeFromEuler_NativeFunction);
        Quat_MakeFromEuler_Euler_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_MakeFromEuler_NativeFunction, "Euler");
        Quat_MakeFromEuler_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_MakeFromEuler_NativeFunction, "ReturnValue");
        Quat_Log_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_Log");
        Quat_Log_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_Log_NativeFunction);
        Quat_Log_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Log_NativeFunction, "Q");
        Quat_Log_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Log_NativeFunction, "ReturnValue");
        Quat_IsNormalized_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_IsNormalized");
        Quat_IsNormalized_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_IsNormalized_NativeFunction);
        Quat_IsNormalized_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_IsNormalized_NativeFunction, "Q");
        Quat_IsNormalized_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_IsNormalized_NativeFunction, "ReturnValue");
        Quat_IsNonFinite_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_IsNonFinite");
        Quat_IsNonFinite_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_IsNonFinite_NativeFunction);
        Quat_IsNonFinite_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_IsNonFinite_NativeFunction, "Q");
        Quat_IsNonFinite_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_IsNonFinite_NativeFunction, "ReturnValue");
        Quat_IsIdentity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_IsIdentity");
        Quat_IsIdentity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_IsIdentity_NativeFunction);
        Quat_IsIdentity_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_IsIdentity_NativeFunction, "Q");
        Quat_IsIdentity_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_IsIdentity_NativeFunction, "Tolerance");
        Quat_IsIdentity_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_IsIdentity_NativeFunction, "ReturnValue");
        Quat_IsFinite_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_IsFinite");
        Quat_IsFinite_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_IsFinite_NativeFunction);
        Quat_IsFinite_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_IsFinite_NativeFunction, "Q");
        Quat_IsFinite_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_IsFinite_NativeFunction, "ReturnValue");
        Quat_Inversed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_Inversed");
        Quat_Inversed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_Inversed_NativeFunction);
        Quat_Inversed_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Inversed_NativeFunction, "Q");
        Quat_Inversed_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Inversed_NativeFunction, "ReturnValue");
        Quat_Identity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_Identity");
        Quat_Identity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_Identity_NativeFunction);
        Quat_Identity_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Identity_NativeFunction, "ReturnValue");
        Quat_GetRotationAxis_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_GetRotationAxis");
        Quat_GetRotationAxis_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_GetRotationAxis_NativeFunction);
        Quat_GetRotationAxis_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_GetRotationAxis_NativeFunction, "Q");
        Quat_GetRotationAxis_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_GetRotationAxis_NativeFunction, "ReturnValue");
        Quat_GetAxisZ_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_GetAxisZ");
        Quat_GetAxisZ_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_GetAxisZ_NativeFunction);
        Quat_GetAxisZ_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_GetAxisZ_NativeFunction, "Q");
        Quat_GetAxisZ_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_GetAxisZ_NativeFunction, "ReturnValue");
        Quat_GetAxisY_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_GetAxisY");
        Quat_GetAxisY_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_GetAxisY_NativeFunction);
        Quat_GetAxisY_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_GetAxisY_NativeFunction, "Q");
        Quat_GetAxisY_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_GetAxisY_NativeFunction, "ReturnValue");
        Quat_GetAxisX_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_GetAxisX");
        Quat_GetAxisX_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_GetAxisX_NativeFunction);
        Quat_GetAxisX_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_GetAxisX_NativeFunction, "Q");
        Quat_GetAxisX_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_GetAxisX_NativeFunction, "ReturnValue");
        Quat_GetAngle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_GetAngle");
        Quat_GetAngle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_GetAngle_NativeFunction);
        Quat_GetAngle_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_GetAngle_NativeFunction, "Q");
        Quat_GetAngle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_GetAngle_NativeFunction, "ReturnValue");
        Quat_FindBetweenVectors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_FindBetweenVectors");
        Quat_FindBetweenVectors_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_FindBetweenVectors_NativeFunction);
        Quat_FindBetweenVectors_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_FindBetweenVectors_NativeFunction, "Start");
        Quat_FindBetweenVectors_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_FindBetweenVectors_NativeFunction, "End");
        Quat_FindBetweenVectors_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_FindBetweenVectors_NativeFunction, "ReturnValue");
        Quat_FindBetweenNormals_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_FindBetweenNormals");
        Quat_FindBetweenNormals_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_FindBetweenNormals_NativeFunction);
        Quat_FindBetweenNormals_StartNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_FindBetweenNormals_NativeFunction, "StartNormal");
        Quat_FindBetweenNormals_EndNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_FindBetweenNormals_NativeFunction, "EndNormal");
        Quat_FindBetweenNormals_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_FindBetweenNormals_NativeFunction, "ReturnValue");
        Quat_Exp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_Exp");
        Quat_Exp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_Exp_NativeFunction);
        Quat_Exp_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Exp_NativeFunction, "Q");
        Quat_Exp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Exp_NativeFunction, "ReturnValue");
        Quat_Euler_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_Euler");
        Quat_Euler_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_Euler_NativeFunction);
        Quat_Euler_Q_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Euler_NativeFunction, "Q");
        Quat_Euler_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_Euler_NativeFunction, "ReturnValue");
        Quat_EnforceShortestArcWith_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_EnforceShortestArcWith");
        Quat_EnforceShortestArcWith_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_EnforceShortestArcWith_NativeFunction);
        Quat_EnforceShortestArcWith_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_EnforceShortestArcWith_NativeFunction, "A");
        Quat_EnforceShortestArcWith_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_EnforceShortestArcWith_NativeFunction, "B");
        Quat_AngularDistance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Quat_AngularDistance");
        Quat_AngularDistance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Quat_AngularDistance_NativeFunction);
        Quat_AngularDistance_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_AngularDistance_NativeFunction, "A");
        Quat_AngularDistance_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_AngularDistance_NativeFunction, "B");
        Quat_AngularDistance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Quat_AngularDistance_NativeFunction, "ReturnValue");
        ProjectVectorOnToVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ProjectVectorOnToVector");
        ProjectVectorOnToVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ProjectVectorOnToVector_NativeFunction);
        ProjectVectorOnToVector_V_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProjectVectorOnToVector_NativeFunction, "V");
        ProjectVectorOnToVector_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProjectVectorOnToVector_NativeFunction, "Target");
        ProjectVectorOnToVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProjectVectorOnToVector_NativeFunction, "ReturnValue");
        ProjectVectorOnToPlane_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ProjectVectorOnToPlane");
        ProjectVectorOnToPlane_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ProjectVectorOnToPlane_NativeFunction);
        ProjectVectorOnToPlane_V_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProjectVectorOnToPlane_NativeFunction, "V");
        ProjectVectorOnToPlane_PlaneNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProjectVectorOnToPlane_NativeFunction, "PlaneNormal");
        ProjectVectorOnToPlane_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProjectVectorOnToPlane_NativeFunction, "ReturnValue");
        ProjectPointOnToPlane_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ProjectPointOnToPlane");
        ProjectPointOnToPlane_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ProjectPointOnToPlane_NativeFunction);
        ProjectPointOnToPlane_Point_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProjectPointOnToPlane_NativeFunction, "Point");
        ProjectPointOnToPlane_PlaneBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProjectPointOnToPlane_NativeFunction, "PlaneBase");
        ProjectPointOnToPlane_PlaneNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProjectPointOnToPlane_NativeFunction, "PlaneNormal");
        ProjectPointOnToPlane_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProjectPointOnToPlane_NativeFunction, "ReturnValue");
        PointsAreCoplanar_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PointsAreCoplanar");
        PointsAreCoplanar_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PointsAreCoplanar_NativeFunction);
        PointsAreCoplanar_Points_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PointsAreCoplanar_NativeFunction, "Points");
        PointsAreCoplanar_Points_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(PointsAreCoplanar_NativeFunction, "Points");
        PointsAreCoplanar_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PointsAreCoplanar_NativeFunction, "Tolerance");
        PointsAreCoplanar_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PointsAreCoplanar_NativeFunction, "ReturnValue");
        PerlinNoise1D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PerlinNoise1D");
        PerlinNoise1D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PerlinNoise1D_NativeFunction);
        PerlinNoise1D_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PerlinNoise1D_NativeFunction, "Value");
        PerlinNoise1D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PerlinNoise1D_NativeFunction, "ReturnValue");
        Percent_IntInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Percent_IntInt");
        Percent_IntInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Percent_IntInt_NativeFunction);
        Percent_IntInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Percent_IntInt_NativeFunction, "A");
        Percent_IntInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Percent_IntInt_NativeFunction, "B");
        Percent_IntInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Percent_IntInt_NativeFunction, "ReturnValue");
        Percent_Int64Int64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Percent_Int64Int64");
        Percent_Int64Int64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Percent_Int64Int64_NativeFunction);
        Percent_Int64Int64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Percent_Int64Int64_NativeFunction, "A");
        Percent_Int64Int64_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Percent_Int64Int64_NativeFunction, "B");
        Percent_Int64Int64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Percent_Int64Int64_NativeFunction, "ReturnValue");
        Percent_FloatFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Percent_FloatFloat");
        Percent_FloatFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Percent_FloatFloat_NativeFunction);
        Percent_FloatFloat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Percent_FloatFloat_NativeFunction, "A");
        Percent_FloatFloat_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Percent_FloatFloat_NativeFunction, "B");
        Percent_FloatFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Percent_FloatFloat_NativeFunction, "ReturnValue");
        Percent_ByteByte_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Percent_ByteByte");
        Percent_ByteByte_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Percent_ByteByte_NativeFunction);
        Percent_ByteByte_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Percent_ByteByte_NativeFunction, "A");
        Percent_ByteByte_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Percent_ByteByte_NativeFunction, "B");
        Percent_ByteByte_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Percent_ByteByte_NativeFunction, "ReturnValue");
        Or_IntInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Or_IntInt");
        Or_IntInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Or_IntInt_NativeFunction);
        Or_IntInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Or_IntInt_NativeFunction, "A");
        Or_IntInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Or_IntInt_NativeFunction, "B");
        Or_IntInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Or_IntInt_NativeFunction, "ReturnValue");
        Or_Int64Int64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Or_Int64Int64");
        Or_Int64Int64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Or_Int64Int64_NativeFunction);
        Or_Int64Int64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Or_Int64Int64_NativeFunction, "A");
        Or_Int64Int64_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Or_Int64Int64_NativeFunction, "B");
        Or_Int64Int64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Or_Int64Int64_NativeFunction, "ReturnValue");
        Now_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Now");
        Now_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Now_NativeFunction);
        Now_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Now_NativeFunction, "ReturnValue");
        NotEqualExactly_VectorVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqualExactly_VectorVector");
        NotEqualExactly_VectorVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqualExactly_VectorVector_NativeFunction);
        NotEqualExactly_VectorVector_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqualExactly_VectorVector_NativeFunction, "A");
        NotEqualExactly_VectorVector_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqualExactly_VectorVector_NativeFunction, "B");
        NotEqualExactly_VectorVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqualExactly_VectorVector_NativeFunction, "ReturnValue");
        NotEqualExactly_Vector2DVector2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqualExactly_Vector2DVector2D");
        NotEqualExactly_Vector2DVector2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqualExactly_Vector2DVector2D_NativeFunction);
        NotEqualExactly_Vector2DVector2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqualExactly_Vector2DVector2D_NativeFunction, "A");
        NotEqualExactly_Vector2DVector2D_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqualExactly_Vector2DVector2D_NativeFunction, "B");
        NotEqualExactly_Vector2DVector2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqualExactly_Vector2DVector2D_NativeFunction, "ReturnValue");
        NotEqual_VectorVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_VectorVector");
        NotEqual_VectorVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_VectorVector_NativeFunction);
        NotEqual_VectorVector_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_VectorVector_NativeFunction, "A");
        NotEqual_VectorVector_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_VectorVector_NativeFunction, "B");
        NotEqual_VectorVector_ErrorTolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_VectorVector_NativeFunction, "ErrorTolerance");
        NotEqual_VectorVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_VectorVector_NativeFunction, "ReturnValue");
        NotEqual_Vector2DVector2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_Vector2DVector2D");
        NotEqual_Vector2DVector2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_Vector2DVector2D_NativeFunction);
        NotEqual_Vector2DVector2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_Vector2DVector2D_NativeFunction, "A");
        NotEqual_Vector2DVector2D_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_Vector2DVector2D_NativeFunction, "B");
        NotEqual_Vector2DVector2D_ErrorTolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_Vector2DVector2D_NativeFunction, "ErrorTolerance");
        NotEqual_Vector2DVector2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_Vector2DVector2D_NativeFunction, "ReturnValue");
        NotEqual_TimespanTimespan_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_TimespanTimespan");
        NotEqual_TimespanTimespan_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_TimespanTimespan_NativeFunction);
        NotEqual_TimespanTimespan_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_TimespanTimespan_NativeFunction, "A");
        NotEqual_TimespanTimespan_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_TimespanTimespan_NativeFunction, "B");
        NotEqual_TimespanTimespan_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_TimespanTimespan_NativeFunction, "ReturnValue");
        NotEqual_RotatorRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_RotatorRotator");
        NotEqual_RotatorRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_RotatorRotator_NativeFunction);
        NotEqual_RotatorRotator_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_RotatorRotator_NativeFunction, "A");
        NotEqual_RotatorRotator_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_RotatorRotator_NativeFunction, "B");
        NotEqual_RotatorRotator_ErrorTolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_RotatorRotator_NativeFunction, "ErrorTolerance");
        NotEqual_RotatorRotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_RotatorRotator_NativeFunction, "ReturnValue");
        NotEqual_QuatQuat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_QuatQuat");
        NotEqual_QuatQuat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_QuatQuat_NativeFunction);
        NotEqual_QuatQuat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_QuatQuat_NativeFunction, "A");
        NotEqual_QuatQuat_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_QuatQuat_NativeFunction, "B");
        NotEqual_QuatQuat_ErrorTolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_QuatQuat_NativeFunction, "ErrorTolerance");
        NotEqual_QuatQuat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_QuatQuat_NativeFunction, "ReturnValue");
        NotEqual_ObjectObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_ObjectObject");
        NotEqual_ObjectObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_ObjectObject_NativeFunction);
        NotEqual_ObjectObject_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_ObjectObject_NativeFunction, "A");
        NotEqual_ObjectObject_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_ObjectObject_NativeFunction, "B");
        NotEqual_ObjectObject_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_ObjectObject_NativeFunction, "ReturnValue");
        NotEqual_NameName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_NameName");
        NotEqual_NameName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_NameName_NativeFunction);
        NotEqual_NameName_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_NameName_NativeFunction, "A");
        NotEqual_NameName_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_NameName_NativeFunction, "B");
        NotEqual_NameName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_NameName_NativeFunction, "ReturnValue");
        NotEqual_MatrixMatrix_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_MatrixMatrix");
        NotEqual_MatrixMatrix_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_MatrixMatrix_NativeFunction);
        NotEqual_MatrixMatrix_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_MatrixMatrix_NativeFunction, "A");
        NotEqual_MatrixMatrix_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_MatrixMatrix_NativeFunction, "B");
        NotEqual_MatrixMatrix_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_MatrixMatrix_NativeFunction, "Tolerance");
        NotEqual_MatrixMatrix_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_MatrixMatrix_NativeFunction, "ReturnValue");
        NotEqual_LinearColorLinearColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_LinearColorLinearColor");
        NotEqual_LinearColorLinearColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_LinearColorLinearColor_NativeFunction);
        NotEqual_LinearColorLinearColor_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_LinearColorLinearColor_NativeFunction, "A");
        NotEqual_LinearColorLinearColor_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_LinearColorLinearColor_NativeFunction, "B");
        NotEqual_LinearColorLinearColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_LinearColorLinearColor_NativeFunction, "ReturnValue");
        NotEqual_IntPointIntPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_IntPointIntPoint");
        NotEqual_IntPointIntPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_IntPointIntPoint_NativeFunction);
        NotEqual_IntPointIntPoint_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_IntPointIntPoint_NativeFunction, "A");
        NotEqual_IntPointIntPoint_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_IntPointIntPoint_NativeFunction, "B");
        NotEqual_IntPointIntPoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_IntPointIntPoint_NativeFunction, "ReturnValue");
        NotEqual_IntInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_IntInt");
        NotEqual_IntInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_IntInt_NativeFunction);
        NotEqual_IntInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_IntInt_NativeFunction, "A");
        NotEqual_IntInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_IntInt_NativeFunction, "B");
        NotEqual_IntInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_IntInt_NativeFunction, "ReturnValue");
        NotEqual_Int64Int64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_Int64Int64");
        NotEqual_Int64Int64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_Int64Int64_NativeFunction);
        NotEqual_Int64Int64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_Int64Int64_NativeFunction, "A");
        NotEqual_Int64Int64_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_Int64Int64_NativeFunction, "B");
        NotEqual_Int64Int64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_Int64Int64_NativeFunction, "ReturnValue");
        NotEqual_DoubleDouble_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_DoubleDouble");
        NotEqual_DoubleDouble_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_DoubleDouble_NativeFunction);
        NotEqual_DoubleDouble_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_DoubleDouble_NativeFunction, "A");
        NotEqual_DoubleDouble_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_DoubleDouble_NativeFunction, "B");
        NotEqual_DoubleDouble_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_DoubleDouble_NativeFunction, "ReturnValue");
        NotEqual_DateTimeDateTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_DateTimeDateTime");
        NotEqual_DateTimeDateTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_DateTimeDateTime_NativeFunction);
        NotEqual_DateTimeDateTime_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_DateTimeDateTime_NativeFunction, "A");
        NotEqual_DateTimeDateTime_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_DateTimeDateTime_NativeFunction, "B");
        NotEqual_DateTimeDateTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_DateTimeDateTime_NativeFunction, "ReturnValue");
        NotEqual_ClassClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_ClassClass");
        NotEqual_ClassClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_ClassClass_NativeFunction);
        NotEqual_ClassClass_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_ClassClass_NativeFunction, "A");
        NotEqual_ClassClass_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_ClassClass_NativeFunction, "B");
        NotEqual_ClassClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_ClassClass_NativeFunction, "ReturnValue");
        NotEqual_ByteByte_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_ByteByte");
        NotEqual_ByteByte_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_ByteByte_NativeFunction);
        NotEqual_ByteByte_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_ByteByte_NativeFunction, "A");
        NotEqual_ByteByte_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_ByteByte_NativeFunction, "B");
        NotEqual_ByteByte_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_ByteByte_NativeFunction, "ReturnValue");
        NotEqual_BoolBool_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_BoolBool");
        NotEqual_BoolBool_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_BoolBool_NativeFunction);
        NotEqual_BoolBool_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_BoolBool_NativeFunction, "A");
        NotEqual_BoolBool_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_BoolBool_NativeFunction, "B");
        NotEqual_BoolBool_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_BoolBool_NativeFunction, "ReturnValue");
        Not_PreBool_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Not_PreBool");
        Not_PreBool_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Not_PreBool_NativeFunction);
        Not_PreBool_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Not_PreBool_NativeFunction, "A");
        Not_PreBool_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Not_PreBool_NativeFunction, "ReturnValue");
        Not_Int64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Not_Int64");
        Not_Int64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Not_Int64_NativeFunction);
        Not_Int64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Not_Int64_NativeFunction, "A");
        Not_Int64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Not_Int64_NativeFunction, "ReturnValue");
        Not_Int_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Not_Int");
        Not_Int_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Not_Int_NativeFunction);
        Not_Int_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Not_Int_NativeFunction, "A");
        Not_Int_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Not_Int_NativeFunction, "ReturnValue");
        NormalSafe2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NormalSafe2D");
        NormalSafe2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NormalSafe2D_NativeFunction);
        NormalSafe2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NormalSafe2D_NativeFunction, "A");
        NormalSafe2D_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NormalSafe2D_NativeFunction, "Tolerance");
        NormalSafe2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NormalSafe2D_NativeFunction, "ReturnValue");
        NormalizeToRange_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NormalizeToRange");
        NormalizeToRange_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NormalizeToRange_NativeFunction);
        NormalizeToRange_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NormalizeToRange_NativeFunction, "Value");
        NormalizeToRange_RangeMin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NormalizeToRange_NativeFunction, "RangeMin");
        NormalizeToRange_RangeMax_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NormalizeToRange_NativeFunction, "RangeMax");
        NormalizeToRange_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NormalizeToRange_NativeFunction, "ReturnValue");
        NormalizedDeltaRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NormalizedDeltaRotator");
        NormalizedDeltaRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NormalizedDeltaRotator_NativeFunction);
        NormalizedDeltaRotator_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NormalizedDeltaRotator_NativeFunction, "A");
        NormalizedDeltaRotator_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NormalizedDeltaRotator_NativeFunction, "B");
        NormalizedDeltaRotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NormalizedDeltaRotator_NativeFunction, "ReturnValue");
        NormalizeAxis_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NormalizeAxis");
        NormalizeAxis_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NormalizeAxis_NativeFunction);
        NormalizeAxis_Angle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NormalizeAxis_NativeFunction, "Angle");
        NormalizeAxis_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NormalizeAxis_NativeFunction, "ReturnValue");
        Normalize2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Normalize2D");
        Normalize2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Normalize2D_NativeFunction);
        Normalize2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Normalize2D_NativeFunction, "A");
        Normalize2D_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Normalize2D_NativeFunction, "Tolerance");
        Normal2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Normal2D");
        Normal2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Normal2D_NativeFunction);
        Normal2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Normal2D_NativeFunction, "A");
        Normal2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Normal2D_NativeFunction, "ReturnValue");
        Normal_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Normal");
        Normal_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Normal_NativeFunction);
        Normal_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Normal_NativeFunction, "A");
        Normal_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Normal_NativeFunction, "Tolerance");
        Normal_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Normal_NativeFunction, "ReturnValue");
        NegateVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NegateVector");
        NegateVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NegateVector_NativeFunction);
        NegateVector_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NegateVector_NativeFunction, "A");
        NegateVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NegateVector_NativeFunction, "ReturnValue");
        NegateRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NegateRotator");
        NegateRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NegateRotator_NativeFunction);
        NegateRotator_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NegateRotator_NativeFunction, "A");
        NegateRotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NegateRotator_NativeFunction, "ReturnValue");
        Negated2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Negated2D");
        Negated2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Negated2D_NativeFunction);
        Negated2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Negated2D_NativeFunction, "A");
        Negated2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Negated2D_NativeFunction, "ReturnValue");
        NearlyEqual_TransformTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NearlyEqual_TransformTransform");
        NearlyEqual_TransformTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NearlyEqual_TransformTransform_NativeFunction);
        NearlyEqual_TransformTransform_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NearlyEqual_TransformTransform_NativeFunction, "A");
        NearlyEqual_TransformTransform_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NearlyEqual_TransformTransform_NativeFunction, "B");
        NearlyEqual_TransformTransform_LocationTolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NearlyEqual_TransformTransform_NativeFunction, "LocationTolerance");
        NearlyEqual_TransformTransform_RotationTolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NearlyEqual_TransformTransform_NativeFunction, "RotationTolerance");
        NearlyEqual_TransformTransform_Scale3DTolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NearlyEqual_TransformTransform_NativeFunction, "Scale3DTolerance");
        NearlyEqual_TransformTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NearlyEqual_TransformTransform_NativeFunction, "ReturnValue");
        NearlyEqual_FloatFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NearlyEqual_FloatFloat");
        NearlyEqual_FloatFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NearlyEqual_FloatFloat_NativeFunction);
        NearlyEqual_FloatFloat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NearlyEqual_FloatFloat_NativeFunction, "A");
        NearlyEqual_FloatFloat_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NearlyEqual_FloatFloat_NativeFunction, "B");
        NearlyEqual_FloatFloat_ErrorTolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NearlyEqual_FloatFloat_NativeFunction, "ErrorTolerance");
        NearlyEqual_FloatFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NearlyEqual_FloatFloat_NativeFunction, "ReturnValue");
        MultiplyMultiply_FloatFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MultiplyMultiply_FloatFloat");
        MultiplyMultiply_FloatFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MultiplyMultiply_FloatFloat_NativeFunction);
        MultiplyMultiply_FloatFloat_Base_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MultiplyMultiply_FloatFloat_NativeFunction, "Base");
        MultiplyMultiply_FloatFloat_Exp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MultiplyMultiply_FloatFloat_NativeFunction, "Exp");
        MultiplyMultiply_FloatFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MultiplyMultiply_FloatFloat_NativeFunction, "ReturnValue");
        MultiplyByPi_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MultiplyByPi");
        MultiplyByPi_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MultiplyByPi_NativeFunction);
        MultiplyByPi_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MultiplyByPi_NativeFunction, "Value");
        MultiplyByPi_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MultiplyByPi_NativeFunction, "ReturnValue");
        Multiply_VectorVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Multiply_VectorVector");
        Multiply_VectorVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Multiply_VectorVector_NativeFunction);
        Multiply_VectorVector_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_VectorVector_NativeFunction, "A");
        Multiply_VectorVector_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_VectorVector_NativeFunction, "B");
        Multiply_VectorVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_VectorVector_NativeFunction, "ReturnValue");
        Multiply_VectorInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Multiply_VectorInt");
        Multiply_VectorInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Multiply_VectorInt_NativeFunction);
        Multiply_VectorInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_VectorInt_NativeFunction, "A");
        Multiply_VectorInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_VectorInt_NativeFunction, "B");
        Multiply_VectorInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_VectorInt_NativeFunction, "ReturnValue");
        Multiply_VectorFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Multiply_VectorFloat");
        Multiply_VectorFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Multiply_VectorFloat_NativeFunction);
        Multiply_VectorFloat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_VectorFloat_NativeFunction, "A");
        Multiply_VectorFloat_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_VectorFloat_NativeFunction, "B");
        Multiply_VectorFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_VectorFloat_NativeFunction, "ReturnValue");
        Multiply_Vector2DVector2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Multiply_Vector2DVector2D");
        Multiply_Vector2DVector2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Multiply_Vector2DVector2D_NativeFunction);
        Multiply_Vector2DVector2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_Vector2DVector2D_NativeFunction, "A");
        Multiply_Vector2DVector2D_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_Vector2DVector2D_NativeFunction, "B");
        Multiply_Vector2DVector2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_Vector2DVector2D_NativeFunction, "ReturnValue");
        Multiply_Vector2DFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Multiply_Vector2DFloat");
        Multiply_Vector2DFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Multiply_Vector2DFloat_NativeFunction);
        Multiply_Vector2DFloat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_Vector2DFloat_NativeFunction, "A");
        Multiply_Vector2DFloat_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_Vector2DFloat_NativeFunction, "B");
        Multiply_Vector2DFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_Vector2DFloat_NativeFunction, "ReturnValue");
        Multiply_TimespanFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Multiply_TimespanFloat");
        Multiply_TimespanFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Multiply_TimespanFloat_NativeFunction);
        Multiply_TimespanFloat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_TimespanFloat_NativeFunction, "A");
        Multiply_TimespanFloat_Scalar_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_TimespanFloat_NativeFunction, "Scalar");
        Multiply_TimespanFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_TimespanFloat_NativeFunction, "ReturnValue");
        Multiply_RotatorInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Multiply_RotatorInt");
        Multiply_RotatorInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Multiply_RotatorInt_NativeFunction);
        Multiply_RotatorInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_RotatorInt_NativeFunction, "A");
        Multiply_RotatorInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_RotatorInt_NativeFunction, "B");
        Multiply_RotatorInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_RotatorInt_NativeFunction, "ReturnValue");
        Multiply_RotatorFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Multiply_RotatorFloat");
        Multiply_RotatorFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Multiply_RotatorFloat_NativeFunction);
        Multiply_RotatorFloat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_RotatorFloat_NativeFunction, "A");
        Multiply_RotatorFloat_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_RotatorFloat_NativeFunction, "B");
        Multiply_RotatorFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_RotatorFloat_NativeFunction, "ReturnValue");
        Multiply_QuatQuat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Multiply_QuatQuat");
        Multiply_QuatQuat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Multiply_QuatQuat_NativeFunction);
        Multiply_QuatQuat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_QuatQuat_NativeFunction, "A");
        Multiply_QuatQuat_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_QuatQuat_NativeFunction, "B");
        Multiply_QuatQuat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_QuatQuat_NativeFunction, "ReturnValue");
        Multiply_MatrixMatrix_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Multiply_MatrixMatrix");
        Multiply_MatrixMatrix_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Multiply_MatrixMatrix_NativeFunction);
        Multiply_MatrixMatrix_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_MatrixMatrix_NativeFunction, "A");
        Multiply_MatrixMatrix_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_MatrixMatrix_NativeFunction, "B");
        Multiply_MatrixMatrix_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_MatrixMatrix_NativeFunction, "ReturnValue");
        Multiply_MatrixFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Multiply_MatrixFloat");
        Multiply_MatrixFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Multiply_MatrixFloat_NativeFunction);
        Multiply_MatrixFloat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_MatrixFloat_NativeFunction, "A");
        Multiply_MatrixFloat_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_MatrixFloat_NativeFunction, "B");
        Multiply_MatrixFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_MatrixFloat_NativeFunction, "ReturnValue");
        Multiply_LinearColorLinearColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Multiply_LinearColorLinearColor");
        Multiply_LinearColorLinearColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Multiply_LinearColorLinearColor_NativeFunction);
        Multiply_LinearColorLinearColor_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_LinearColorLinearColor_NativeFunction, "A");
        Multiply_LinearColorLinearColor_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_LinearColorLinearColor_NativeFunction, "B");
        Multiply_LinearColorLinearColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_LinearColorLinearColor_NativeFunction, "ReturnValue");
        Multiply_LinearColorFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Multiply_LinearColorFloat");
        Multiply_LinearColorFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Multiply_LinearColorFloat_NativeFunction);
        Multiply_LinearColorFloat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_LinearColorFloat_NativeFunction, "A");
        Multiply_LinearColorFloat_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_LinearColorFloat_NativeFunction, "B");
        Multiply_LinearColorFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_LinearColorFloat_NativeFunction, "ReturnValue");
        Multiply_IntPointIntPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Multiply_IntPointIntPoint");
        Multiply_IntPointIntPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Multiply_IntPointIntPoint_NativeFunction);
        Multiply_IntPointIntPoint_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_IntPointIntPoint_NativeFunction, "A");
        Multiply_IntPointIntPoint_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_IntPointIntPoint_NativeFunction, "B");
        Multiply_IntPointIntPoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_IntPointIntPoint_NativeFunction, "ReturnValue");
        Multiply_IntPointInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Multiply_IntPointInt");
        Multiply_IntPointInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Multiply_IntPointInt_NativeFunction);
        Multiply_IntPointInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_IntPointInt_NativeFunction, "A");
        Multiply_IntPointInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_IntPointInt_NativeFunction, "B");
        Multiply_IntPointInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_IntPointInt_NativeFunction, "ReturnValue");
        Multiply_IntInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Multiply_IntInt");
        Multiply_IntInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Multiply_IntInt_NativeFunction);
        Multiply_IntInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_IntInt_NativeFunction, "A");
        Multiply_IntInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_IntInt_NativeFunction, "B");
        Multiply_IntInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_IntInt_NativeFunction, "ReturnValue");
        Multiply_IntFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Multiply_IntFloat");
        Multiply_IntFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Multiply_IntFloat_NativeFunction);
        Multiply_IntFloat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_IntFloat_NativeFunction, "A");
        Multiply_IntFloat_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_IntFloat_NativeFunction, "B");
        Multiply_IntFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_IntFloat_NativeFunction, "ReturnValue");
        Multiply_Int64Int64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Multiply_Int64Int64");
        Multiply_Int64Int64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Multiply_Int64Int64_NativeFunction);
        Multiply_Int64Int64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_Int64Int64_NativeFunction, "A");
        Multiply_Int64Int64_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_Int64Int64_NativeFunction, "B");
        Multiply_Int64Int64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_Int64Int64_NativeFunction, "ReturnValue");
        Multiply_DoubleDouble_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Multiply_DoubleDouble");
        Multiply_DoubleDouble_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Multiply_DoubleDouble_NativeFunction);
        Multiply_DoubleDouble_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_DoubleDouble_NativeFunction, "A");
        Multiply_DoubleDouble_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_DoubleDouble_NativeFunction, "B");
        Multiply_DoubleDouble_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_DoubleDouble_NativeFunction, "ReturnValue");
        Multiply_ByteByte_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Multiply_ByteByte");
        Multiply_ByteByte_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Multiply_ByteByte_NativeFunction);
        Multiply_ByteByte_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_ByteByte_NativeFunction, "A");
        Multiply_ByteByte_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_ByteByte_NativeFunction, "B");
        Multiply_ByteByte_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Multiply_ByteByte_NativeFunction, "ReturnValue");
        MirrorVectorByNormal_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MirrorVectorByNormal");
        MirrorVectorByNormal_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MirrorVectorByNormal_NativeFunction);
        MirrorVectorByNormal_InVect_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MirrorVectorByNormal_NativeFunction, "InVect");
        MirrorVectorByNormal_InNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MirrorVectorByNormal_NativeFunction, "InNormal");
        MirrorVectorByNormal_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MirrorVectorByNormal_NativeFunction, "ReturnValue");
        MinOfIntArray_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MinOfIntArray");
        MinOfIntArray_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MinOfIntArray_NativeFunction);
        MinOfIntArray_IntArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinOfIntArray_NativeFunction, "IntArray");
        MinOfIntArray_IntArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(MinOfIntArray_NativeFunction, "IntArray");
        MinOfIntArray_IndexOfMinValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinOfIntArray_NativeFunction, "IndexOfMinValue");
        MinOfIntArray_MinValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinOfIntArray_NativeFunction, "MinValue");
        MinOfFloatArray_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MinOfFloatArray");
        MinOfFloatArray_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MinOfFloatArray_NativeFunction);
        MinOfFloatArray_FloatArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinOfFloatArray_NativeFunction, "FloatArray");
        MinOfFloatArray_FloatArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(MinOfFloatArray_NativeFunction, "FloatArray");
        MinOfFloatArray_IndexOfMinValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinOfFloatArray_NativeFunction, "IndexOfMinValue");
        MinOfFloatArray_MinValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinOfFloatArray_NativeFunction, "MinValue");
        MinOfByteArray_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MinOfByteArray");
        MinOfByteArray_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MinOfByteArray_NativeFunction);
        MinOfByteArray_ByteArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinOfByteArray_NativeFunction, "ByteArray");
        MinOfByteArray_ByteArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(MinOfByteArray_NativeFunction, "ByteArray");
        MinOfByteArray_IndexOfMinValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinOfByteArray_NativeFunction, "IndexOfMinValue");
        MinOfByteArray_MinValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinOfByteArray_NativeFunction, "MinValue");
        MinInt64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MinInt64");
        MinInt64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MinInt64_NativeFunction);
        MinInt64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinInt64_NativeFunction, "A");
        MinInt64_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinInt64_NativeFunction, "B");
        MinInt64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinInt64_NativeFunction, "ReturnValue");
        MinimumAreaRectangle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MinimumAreaRectangle");
        MinimumAreaRectangle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MinimumAreaRectangle_NativeFunction);
        MinimumAreaRectangle_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinimumAreaRectangle_NativeFunction, "WorldContextObject");
        MinimumAreaRectangle_InVerts_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinimumAreaRectangle_NativeFunction, "InVerts");
        MinimumAreaRectangle_InVerts_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(MinimumAreaRectangle_NativeFunction, "InVerts");
        MinimumAreaRectangle_SampleSurfaceNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinimumAreaRectangle_NativeFunction, "SampleSurfaceNormal");
        MinimumAreaRectangle_OutRectCenter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinimumAreaRectangle_NativeFunction, "OutRectCenter");
        MinimumAreaRectangle_OutRectRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinimumAreaRectangle_NativeFunction, "OutRectRotation");
        MinimumAreaRectangle_OutSideLengthX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinimumAreaRectangle_NativeFunction, "OutSideLengthX");
        MinimumAreaRectangle_OutSideLengthY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinimumAreaRectangle_NativeFunction, "OutSideLengthY");
        MinimumAreaRectangle_bDebugDraw_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinimumAreaRectangle_NativeFunction, "bDebugDraw");
        MinAreaRectangle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MinAreaRectangle");
        MinAreaRectangle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MinAreaRectangle_NativeFunction);
        MinAreaRectangle_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinAreaRectangle_NativeFunction, "WorldContextObject");
        MinAreaRectangle_InPoints_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinAreaRectangle_NativeFunction, "InPoints");
        MinAreaRectangle_InPoints_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(MinAreaRectangle_NativeFunction, "InPoints");
        MinAreaRectangle_SampleSurfaceNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinAreaRectangle_NativeFunction, "SampleSurfaceNormal");
        MinAreaRectangle_OutRectCenter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinAreaRectangle_NativeFunction, "OutRectCenter");
        MinAreaRectangle_OutRectRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinAreaRectangle_NativeFunction, "OutRectRotation");
        MinAreaRectangle_OutRectLengthX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinAreaRectangle_NativeFunction, "OutRectLengthX");
        MinAreaRectangle_OutRectLengthY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinAreaRectangle_NativeFunction, "OutRectLengthY");
        MinAreaRectangle_bDebugDraw_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MinAreaRectangle_NativeFunction, "bDebugDraw");
        Min_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Min");
        Min_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Min_NativeFunction);
        Min_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Min_NativeFunction, "A");
        Min_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Min_NativeFunction, "B");
        Min_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Min_NativeFunction, "ReturnValue");
        MedianOfIntArray_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MedianOfIntArray");
        MedianOfIntArray_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MedianOfIntArray_NativeFunction);
        MedianOfIntArray_IntArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MedianOfIntArray_NativeFunction, "IntArray");
        MedianOfIntArray_IntArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(MedianOfIntArray_NativeFunction, "IntArray");
        MedianOfIntArray_MedianValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MedianOfIntArray_NativeFunction, "MedianValue");
        MaxOfIntArray_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MaxOfIntArray");
        MaxOfIntArray_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MaxOfIntArray_NativeFunction);
        MaxOfIntArray_IntArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MaxOfIntArray_NativeFunction, "IntArray");
        MaxOfIntArray_IntArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(MaxOfIntArray_NativeFunction, "IntArray");
        MaxOfIntArray_IndexOfMaxValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MaxOfIntArray_NativeFunction, "IndexOfMaxValue");
        MaxOfIntArray_MaxValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MaxOfIntArray_NativeFunction, "MaxValue");
        MaxOfFloatArray_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MaxOfFloatArray");
        MaxOfFloatArray_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MaxOfFloatArray_NativeFunction);
        MaxOfFloatArray_FloatArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MaxOfFloatArray_NativeFunction, "FloatArray");
        MaxOfFloatArray_FloatArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(MaxOfFloatArray_NativeFunction, "FloatArray");
        MaxOfFloatArray_IndexOfMaxValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MaxOfFloatArray_NativeFunction, "IndexOfMaxValue");
        MaxOfFloatArray_MaxValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MaxOfFloatArray_NativeFunction, "MaxValue");
        MaxOfByteArray_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MaxOfByteArray");
        MaxOfByteArray_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MaxOfByteArray_NativeFunction);
        MaxOfByteArray_ByteArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MaxOfByteArray_NativeFunction, "ByteArray");
        MaxOfByteArray_ByteArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(MaxOfByteArray_NativeFunction, "ByteArray");
        MaxOfByteArray_IndexOfMaxValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MaxOfByteArray_NativeFunction, "IndexOfMaxValue");
        MaxOfByteArray_MaxValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MaxOfByteArray_NativeFunction, "MaxValue");
        MaxInt64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MaxInt64");
        MaxInt64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MaxInt64_NativeFunction);
        MaxInt64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MaxInt64_NativeFunction, "A");
        MaxInt64_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MaxInt64_NativeFunction, "B");
        MaxInt64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MaxInt64_NativeFunction, "ReturnValue");
        Max_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Max");
        Max_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Max_NativeFunction);
        Max_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Max_NativeFunction, "A");
        Max_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Max_NativeFunction, "B");
        Max_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Max_NativeFunction, "ReturnValue");
        Matrix_TransformVector4_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_TransformVector4");
        Matrix_TransformVector4_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_TransformVector4_NativeFunction);
        Matrix_TransformVector4_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_TransformVector4_NativeFunction, "M");
        Matrix_TransformVector4_V_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_TransformVector4_NativeFunction, "V");
        Matrix_TransformVector4_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_TransformVector4_NativeFunction, "ReturnValue");
        Matrix_TransformVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_TransformVector");
        Matrix_TransformVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_TransformVector_NativeFunction);
        Matrix_TransformVector_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_TransformVector_NativeFunction, "M");
        Matrix_TransformVector_V_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_TransformVector_NativeFunction, "V");
        Matrix_TransformVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_TransformVector_NativeFunction, "ReturnValue");
        Matrix_TransformPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_TransformPosition");
        Matrix_TransformPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_TransformPosition_NativeFunction);
        Matrix_TransformPosition_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_TransformPosition_NativeFunction, "M");
        Matrix_TransformPosition_V_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_TransformPosition_NativeFunction, "V");
        Matrix_TransformPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_TransformPosition_NativeFunction, "ReturnValue");
        Matrix_ToQuat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_ToQuat");
        Matrix_ToQuat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_ToQuat_NativeFunction);
        Matrix_ToQuat_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_ToQuat_NativeFunction, "M");
        Matrix_ToQuat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_ToQuat_NativeFunction, "ReturnValue");
        Matrix_SetOrigin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_SetOrigin");
        Matrix_SetOrigin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_SetOrigin_NativeFunction);
        Matrix_SetOrigin_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_SetOrigin_NativeFunction, "M");
        Matrix_SetOrigin_NewOrigin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_SetOrigin_NativeFunction, "NewOrigin");
        Matrix_SetColumn_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_SetColumn");
        Matrix_SetColumn_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_SetColumn_NativeFunction);
        Matrix_SetColumn_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_SetColumn_NativeFunction, "M");
        Matrix_SetColumn_Column_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_SetColumn_NativeFunction, "Column");
        Matrix_SetColumn_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_SetColumn_NativeFunction, "Value");
        Matrix_SetAxis_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_SetAxis");
        Matrix_SetAxis_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_SetAxis_NativeFunction);
        Matrix_SetAxis_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_SetAxis_NativeFunction, "M");
        Matrix_SetAxis_Axis_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_SetAxis_NativeFunction, "Axis");
        Matrix_SetAxis_AxisVector_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_SetAxis_NativeFunction, "AxisVector");
        Matrix_ScaleTranslation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_ScaleTranslation");
        Matrix_ScaleTranslation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_ScaleTranslation_NativeFunction);
        Matrix_ScaleTranslation_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_ScaleTranslation_NativeFunction, "M");
        Matrix_ScaleTranslation_Scale3D_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_ScaleTranslation_NativeFunction, "Scale3D");
        Matrix_ScaleTranslation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_ScaleTranslation_NativeFunction, "ReturnValue");
        Matrix_RemoveTranslation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_RemoveTranslation");
        Matrix_RemoveTranslation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_RemoveTranslation_NativeFunction);
        Matrix_RemoveTranslation_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_RemoveTranslation_NativeFunction, "M");
        Matrix_RemoveTranslation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_RemoveTranslation_NativeFunction, "ReturnValue");
        Matrix_RemoveScaling_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_RemoveScaling");
        Matrix_RemoveScaling_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_RemoveScaling_NativeFunction);
        Matrix_RemoveScaling_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_RemoveScaling_NativeFunction, "M");
        Matrix_RemoveScaling_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_RemoveScaling_NativeFunction, "Tolerance");
        Matrix_Mirror_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_Mirror");
        Matrix_Mirror_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_Mirror_NativeFunction);
        Matrix_Mirror_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_Mirror_NativeFunction, "M");
        Matrix_Mirror_MirrorAxis_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_Mirror_NativeFunction, "MirrorAxis");
        Matrix_Mirror_FlipAxis_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_Mirror_NativeFunction, "FlipAxis");
        Matrix_Mirror_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_Mirror_NativeFunction, "ReturnValue");
        Matrix_InverseTransformVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_InverseTransformVector");
        Matrix_InverseTransformVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_InverseTransformVector_NativeFunction);
        Matrix_InverseTransformVector_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_InverseTransformVector_NativeFunction, "M");
        Matrix_InverseTransformVector_V_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_InverseTransformVector_NativeFunction, "V");
        Matrix_InverseTransformVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_InverseTransformVector_NativeFunction, "ReturnValue");
        Matrix_InverseTransformPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_InverseTransformPosition");
        Matrix_InverseTransformPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_InverseTransformPosition_NativeFunction);
        Matrix_InverseTransformPosition_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_InverseTransformPosition_NativeFunction, "M");
        Matrix_InverseTransformPosition_V_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_InverseTransformPosition_NativeFunction, "V");
        Matrix_InverseTransformPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_InverseTransformPosition_NativeFunction, "ReturnValue");
        Matrix_Identity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_Identity");
        Matrix_Identity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_Identity_NativeFunction);
        Matrix_Identity_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_Identity_NativeFunction, "ReturnValue");
        Matrix_GetUnitAxis_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_GetUnitAxis");
        Matrix_GetUnitAxis_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_GetUnitAxis_NativeFunction);
        Matrix_GetUnitAxis_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetUnitAxis_NativeFunction, "M");
        Matrix_GetUnitAxis_Axis_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetUnitAxis_NativeFunction, "Axis");
        Matrix_GetUnitAxis_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetUnitAxis_NativeFunction, "ReturnValue");
        Matrix_GetUnitAxes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_GetUnitAxes");
        Matrix_GetUnitAxes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_GetUnitAxes_NativeFunction);
        Matrix_GetUnitAxes_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetUnitAxes_NativeFunction, "M");
        Matrix_GetUnitAxes_X_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetUnitAxes_NativeFunction, "X");
        Matrix_GetUnitAxes_Y_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetUnitAxes_NativeFunction, "Y");
        Matrix_GetUnitAxes_Z_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetUnitAxes_NativeFunction, "Z");
        Matrix_GetTransposed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_GetTransposed");
        Matrix_GetTransposed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_GetTransposed_NativeFunction);
        Matrix_GetTransposed_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetTransposed_NativeFunction, "M");
        Matrix_GetTransposed_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetTransposed_NativeFunction, "ReturnValue");
        Matrix_GetTransposeAdjoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_GetTransposeAdjoint");
        Matrix_GetTransposeAdjoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_GetTransposeAdjoint_NativeFunction);
        Matrix_GetTransposeAdjoint_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetTransposeAdjoint_NativeFunction, "M");
        Matrix_GetTransposeAdjoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetTransposeAdjoint_NativeFunction, "ReturnValue");
        Matrix_GetScaleVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_GetScaleVector");
        Matrix_GetScaleVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_GetScaleVector_NativeFunction);
        Matrix_GetScaleVector_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetScaleVector_NativeFunction, "M");
        Matrix_GetScaleVector_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetScaleVector_NativeFunction, "Tolerance");
        Matrix_GetScaleVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetScaleVector_NativeFunction, "ReturnValue");
        Matrix_GetScaledAxis_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_GetScaledAxis");
        Matrix_GetScaledAxis_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_GetScaledAxis_NativeFunction);
        Matrix_GetScaledAxis_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetScaledAxis_NativeFunction, "M");
        Matrix_GetScaledAxis_Axis_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetScaledAxis_NativeFunction, "Axis");
        Matrix_GetScaledAxis_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetScaledAxis_NativeFunction, "ReturnValue");
        Matrix_GetScaledAxes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_GetScaledAxes");
        Matrix_GetScaledAxes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_GetScaledAxes_NativeFunction);
        Matrix_GetScaledAxes_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetScaledAxes_NativeFunction, "M");
        Matrix_GetScaledAxes_X_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetScaledAxes_NativeFunction, "X");
        Matrix_GetScaledAxes_Y_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetScaledAxes_NativeFunction, "Y");
        Matrix_GetScaledAxes_Z_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetScaledAxes_NativeFunction, "Z");
        Matrix_GetRotDeterminant_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_GetRotDeterminant");
        Matrix_GetRotDeterminant_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_GetRotDeterminant_NativeFunction);
        Matrix_GetRotDeterminant_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetRotDeterminant_NativeFunction, "M");
        Matrix_GetRotDeterminant_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetRotDeterminant_NativeFunction, "ReturnValue");
        Matrix_GetRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_GetRotator");
        Matrix_GetRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_GetRotator_NativeFunction);
        Matrix_GetRotator_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetRotator_NativeFunction, "M");
        Matrix_GetRotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetRotator_NativeFunction, "ReturnValue");
        Matrix_GetOrigin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_GetOrigin");
        Matrix_GetOrigin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_GetOrigin_NativeFunction);
        Matrix_GetOrigin_InMatrix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetOrigin_NativeFunction, "InMatrix");
        Matrix_GetOrigin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetOrigin_NativeFunction, "ReturnValue");
        Matrix_GetMaximumAxisScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_GetMaximumAxisScale");
        Matrix_GetMaximumAxisScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_GetMaximumAxisScale_NativeFunction);
        Matrix_GetMaximumAxisScale_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetMaximumAxisScale_NativeFunction, "M");
        Matrix_GetMaximumAxisScale_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetMaximumAxisScale_NativeFunction, "ReturnValue");
        Matrix_GetMatrixWithoutScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_GetMatrixWithoutScale");
        Matrix_GetMatrixWithoutScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_GetMatrixWithoutScale_NativeFunction);
        Matrix_GetMatrixWithoutScale_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetMatrixWithoutScale_NativeFunction, "M");
        Matrix_GetMatrixWithoutScale_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetMatrixWithoutScale_NativeFunction, "Tolerance");
        Matrix_GetMatrixWithoutScale_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetMatrixWithoutScale_NativeFunction, "ReturnValue");
        Matrix_GetInverse_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_GetInverse");
        Matrix_GetInverse_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_GetInverse_NativeFunction);
        Matrix_GetInverse_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetInverse_NativeFunction, "M");
        Matrix_GetInverse_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetInverse_NativeFunction, "ReturnValue");
        Matrix_GetFrustumTopPlane_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_GetFrustumTopPlane");
        Matrix_GetFrustumTopPlane_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_GetFrustumTopPlane_NativeFunction);
        Matrix_GetFrustumTopPlane_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetFrustumTopPlane_NativeFunction, "M");
        Matrix_GetFrustumTopPlane_OutPlane_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetFrustumTopPlane_NativeFunction, "OutPlane");
        Matrix_GetFrustumTopPlane_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetFrustumTopPlane_NativeFunction, "ReturnValue");
        Matrix_GetFrustumRightPlane_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_GetFrustumRightPlane");
        Matrix_GetFrustumRightPlane_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_GetFrustumRightPlane_NativeFunction);
        Matrix_GetFrustumRightPlane_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetFrustumRightPlane_NativeFunction, "M");
        Matrix_GetFrustumRightPlane_OutPlane_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetFrustumRightPlane_NativeFunction, "OutPlane");
        Matrix_GetFrustumRightPlane_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetFrustumRightPlane_NativeFunction, "ReturnValue");
        Matrix_GetFrustumNearPlane_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_GetFrustumNearPlane");
        Matrix_GetFrustumNearPlane_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_GetFrustumNearPlane_NativeFunction);
        Matrix_GetFrustumNearPlane_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetFrustumNearPlane_NativeFunction, "M");
        Matrix_GetFrustumNearPlane_OutPlane_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetFrustumNearPlane_NativeFunction, "OutPlane");
        Matrix_GetFrustumNearPlane_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetFrustumNearPlane_NativeFunction, "ReturnValue");
        Matrix_GetFrustumLeftPlane_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_GetFrustumLeftPlane");
        Matrix_GetFrustumLeftPlane_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_GetFrustumLeftPlane_NativeFunction);
        Matrix_GetFrustumLeftPlane_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetFrustumLeftPlane_NativeFunction, "M");
        Matrix_GetFrustumLeftPlane_OutPlane_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetFrustumLeftPlane_NativeFunction, "OutPlane");
        Matrix_GetFrustumLeftPlane_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetFrustumLeftPlane_NativeFunction, "ReturnValue");
        Matrix_GetFrustumFarPlane_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_GetFrustumFarPlane");
        Matrix_GetFrustumFarPlane_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_GetFrustumFarPlane_NativeFunction);
        Matrix_GetFrustumFarPlane_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetFrustumFarPlane_NativeFunction, "M");
        Matrix_GetFrustumFarPlane_OutPlane_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetFrustumFarPlane_NativeFunction, "OutPlane");
        Matrix_GetFrustumFarPlane_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetFrustumFarPlane_NativeFunction, "ReturnValue");
        Matrix_GetFrustumBottomPlane_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_GetFrustumBottomPlane");
        Matrix_GetFrustumBottomPlane_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_GetFrustumBottomPlane_NativeFunction);
        Matrix_GetFrustumBottomPlane_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetFrustumBottomPlane_NativeFunction, "M");
        Matrix_GetFrustumBottomPlane_OutPlane_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetFrustumBottomPlane_NativeFunction, "OutPlane");
        Matrix_GetFrustumBottomPlane_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetFrustumBottomPlane_NativeFunction, "ReturnValue");
        Matrix_GetDeterminant_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_GetDeterminant");
        Matrix_GetDeterminant_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_GetDeterminant_NativeFunction);
        Matrix_GetDeterminant_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetDeterminant_NativeFunction, "M");
        Matrix_GetDeterminant_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetDeterminant_NativeFunction, "ReturnValue");
        Matrix_GetColumn_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_GetColumn");
        Matrix_GetColumn_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_GetColumn_NativeFunction);
        Matrix_GetColumn_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetColumn_NativeFunction, "M");
        Matrix_GetColumn_Column_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetColumn_NativeFunction, "Column");
        Matrix_GetColumn_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_GetColumn_NativeFunction, "ReturnValue");
        Matrix_ContainsNaN_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_ContainsNaN");
        Matrix_ContainsNaN_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_ContainsNaN_NativeFunction);
        Matrix_ContainsNaN_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_ContainsNaN_NativeFunction, "M");
        Matrix_ContainsNaN_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_ContainsNaN_NativeFunction, "ReturnValue");
        Matrix_ConcatenateTranslation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_ConcatenateTranslation");
        Matrix_ConcatenateTranslation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_ConcatenateTranslation_NativeFunction);
        Matrix_ConcatenateTranslation_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_ConcatenateTranslation_NativeFunction, "M");
        Matrix_ConcatenateTranslation_Translation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_ConcatenateTranslation_NativeFunction, "Translation");
        Matrix_ConcatenateTranslation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_ConcatenateTranslation_NativeFunction, "ReturnValue");
        Matrix_ApplyScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Matrix_ApplyScale");
        Matrix_ApplyScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Matrix_ApplyScale_NativeFunction);
        Matrix_ApplyScale_M_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_ApplyScale_NativeFunction, "M");
        Matrix_ApplyScale_Scale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_ApplyScale_NativeFunction, "Scale");
        Matrix_ApplyScale_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Matrix_ApplyScale_NativeFunction, "ReturnValue");
        MapRangeUnclamped_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MapRangeUnclamped");
        MapRangeUnclamped_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MapRangeUnclamped_NativeFunction);
        MapRangeUnclamped_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MapRangeUnclamped_NativeFunction, "Value");
        MapRangeUnclamped_InRangeA_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MapRangeUnclamped_NativeFunction, "InRangeA");
        MapRangeUnclamped_InRangeB_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MapRangeUnclamped_NativeFunction, "InRangeB");
        MapRangeUnclamped_OutRangeA_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MapRangeUnclamped_NativeFunction, "OutRangeA");
        MapRangeUnclamped_OutRangeB_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MapRangeUnclamped_NativeFunction, "OutRangeB");
        MapRangeUnclamped_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MapRangeUnclamped_NativeFunction, "ReturnValue");
        MapRangeClamped_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MapRangeClamped");
        MapRangeClamped_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MapRangeClamped_NativeFunction);
        MapRangeClamped_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MapRangeClamped_NativeFunction, "Value");
        MapRangeClamped_InRangeA_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MapRangeClamped_NativeFunction, "InRangeA");
        MapRangeClamped_InRangeB_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MapRangeClamped_NativeFunction, "InRangeB");
        MapRangeClamped_OutRangeA_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MapRangeClamped_NativeFunction, "OutRangeA");
        MapRangeClamped_OutRangeB_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MapRangeClamped_NativeFunction, "OutRangeB");
        MapRangeClamped_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MapRangeClamped_NativeFunction, "ReturnValue");
        MakeRotFromZY_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeRotFromZY");
        MakeRotFromZY_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeRotFromZY_NativeFunction);
        MakeRotFromZY_Z_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromZY_NativeFunction, "Z");
        MakeRotFromZY_Y_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromZY_NativeFunction, "Y");
        MakeRotFromZY_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromZY_NativeFunction, "ReturnValue");
        MakeRotFromZX_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeRotFromZX");
        MakeRotFromZX_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeRotFromZX_NativeFunction);
        MakeRotFromZX_Z_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromZX_NativeFunction, "Z");
        MakeRotFromZX_X_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromZX_NativeFunction, "X");
        MakeRotFromZX_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromZX_NativeFunction, "ReturnValue");
        MakeRotFromZ_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeRotFromZ");
        MakeRotFromZ_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeRotFromZ_NativeFunction);
        MakeRotFromZ_Z_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromZ_NativeFunction, "Z");
        MakeRotFromZ_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromZ_NativeFunction, "ReturnValue");
        MakeRotFromYZ_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeRotFromYZ");
        MakeRotFromYZ_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeRotFromYZ_NativeFunction);
        MakeRotFromYZ_Y_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromYZ_NativeFunction, "Y");
        MakeRotFromYZ_Z_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromYZ_NativeFunction, "Z");
        MakeRotFromYZ_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromYZ_NativeFunction, "ReturnValue");
        MakeRotFromYX_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeRotFromYX");
        MakeRotFromYX_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeRotFromYX_NativeFunction);
        MakeRotFromYX_Y_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromYX_NativeFunction, "Y");
        MakeRotFromYX_X_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromYX_NativeFunction, "X");
        MakeRotFromYX_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromYX_NativeFunction, "ReturnValue");
        MakeRotFromY_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeRotFromY");
        MakeRotFromY_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeRotFromY_NativeFunction);
        MakeRotFromY_Y_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromY_NativeFunction, "Y");
        MakeRotFromY_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromY_NativeFunction, "ReturnValue");
        MakeRotFromXZ_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeRotFromXZ");
        MakeRotFromXZ_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeRotFromXZ_NativeFunction);
        MakeRotFromXZ_X_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromXZ_NativeFunction, "X");
        MakeRotFromXZ_Z_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromXZ_NativeFunction, "Z");
        MakeRotFromXZ_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromXZ_NativeFunction, "ReturnValue");
        MakeRotFromXY_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeRotFromXY");
        MakeRotFromXY_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeRotFromXY_NativeFunction);
        MakeRotFromXY_X_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromXY_NativeFunction, "X");
        MakeRotFromXY_Y_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromXY_NativeFunction, "Y");
        MakeRotFromXY_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromXY_NativeFunction, "ReturnValue");
        MakeRotFromX_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeRotFromX");
        MakeRotFromX_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeRotFromX_NativeFunction);
        MakeRotFromX_X_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromX_NativeFunction, "X");
        MakeRotFromX_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotFromX_NativeFunction, "ReturnValue");
        MakeRotationFromAxes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeRotationFromAxes");
        MakeRotationFromAxes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeRotationFromAxes_NativeFunction);
        MakeRotationFromAxes_Forward_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotationFromAxes_NativeFunction, "Forward");
        MakeRotationFromAxes_Right_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotationFromAxes_NativeFunction, "Right");
        MakeRotationFromAxes_Up_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotationFromAxes_NativeFunction, "Up");
        MakeRotationFromAxes_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRotationFromAxes_NativeFunction, "ReturnValue");
        MakeRelativeTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeRelativeTransform");
        MakeRelativeTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeRelativeTransform_NativeFunction);
        MakeRelativeTransform_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRelativeTransform_NativeFunction, "A");
        MakeRelativeTransform_RelativeTo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRelativeTransform_NativeFunction, "RelativeTo");
        MakeRelativeTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeRelativeTransform_NativeFunction, "ReturnValue");
        MakePulsatingValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakePulsatingValue");
        MakePulsatingValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakePulsatingValue_NativeFunction);
        MakePulsatingValue_InCurrentTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakePulsatingValue_NativeFunction, "InCurrentTime");
        MakePulsatingValue_InPulsesPerSecond_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakePulsatingValue_NativeFunction, "InPulsesPerSecond");
        MakePulsatingValue_InPhase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakePulsatingValue_NativeFunction, "InPhase");
        MakePulsatingValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakePulsatingValue_NativeFunction, "ReturnValue");
        MakePlaneFromPointAndNormal_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakePlaneFromPointAndNormal");
        MakePlaneFromPointAndNormal_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakePlaneFromPointAndNormal_NativeFunction);
        MakePlaneFromPointAndNormal_Point_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakePlaneFromPointAndNormal_NativeFunction, "Point");
        MakePlaneFromPointAndNormal_Normal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakePlaneFromPointAndNormal_NativeFunction, "Normal");
        MakePlaneFromPointAndNormal_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakePlaneFromPointAndNormal_NativeFunction, "ReturnValue");
        Loge_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Loge");
        Loge_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Loge_NativeFunction);
        Loge_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Loge_NativeFunction, "A");
        Loge_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Loge_NativeFunction, "ReturnValue");
        Log_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Log");
        Log_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Log_NativeFunction);
        Log_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Log_NativeFunction, "A");
        Log_Base_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Log_NativeFunction, "Base");
        Log_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Log_NativeFunction, "ReturnValue");
        LinePlaneIntersection_OriginNormal_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinePlaneIntersection_OriginNormal");
        LinePlaneIntersection_OriginNormal_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinePlaneIntersection_OriginNormal_NativeFunction);
        LinePlaneIntersection_OriginNormal_LineStart_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinePlaneIntersection_OriginNormal_NativeFunction, "LineStart");
        LinePlaneIntersection_OriginNormal_LineEnd_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinePlaneIntersection_OriginNormal_NativeFunction, "LineEnd");
        LinePlaneIntersection_OriginNormal_PlaneOrigin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinePlaneIntersection_OriginNormal_NativeFunction, "PlaneOrigin");
        LinePlaneIntersection_OriginNormal_PlaneNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinePlaneIntersection_OriginNormal_NativeFunction, "PlaneNormal");
        LinePlaneIntersection_OriginNormal_T_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinePlaneIntersection_OriginNormal_NativeFunction, "T");
        LinePlaneIntersection_OriginNormal_Intersection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinePlaneIntersection_OriginNormal_NativeFunction, "Intersection");
        LinePlaneIntersection_OriginNormal_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinePlaneIntersection_OriginNormal_NativeFunction, "ReturnValue");
        LinePlaneIntersection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinePlaneIntersection");
        LinePlaneIntersection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinePlaneIntersection_NativeFunction);
        LinePlaneIntersection_LineStart_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinePlaneIntersection_NativeFunction, "LineStart");
        LinePlaneIntersection_LineEnd_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinePlaneIntersection_NativeFunction, "LineEnd");
        LinePlaneIntersection_APlane_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinePlaneIntersection_NativeFunction, "APlane");
        LinePlaneIntersection_T_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinePlaneIntersection_NativeFunction, "T");
        LinePlaneIntersection_Intersection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinePlaneIntersection_NativeFunction, "Intersection");
        LinePlaneIntersection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinePlaneIntersection_NativeFunction, "ReturnValue");
        LinearColorLerpUsingHSV_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColorLerpUsingHSV");
        LinearColorLerpUsingHSV_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColorLerpUsingHSV_NativeFunction);
        LinearColorLerpUsingHSV_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColorLerpUsingHSV_NativeFunction, "A");
        LinearColorLerpUsingHSV_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColorLerpUsingHSV_NativeFunction, "B");
        LinearColorLerpUsingHSV_Alpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColorLerpUsingHSV_NativeFunction, "Alpha");
        LinearColorLerpUsingHSV_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColorLerpUsingHSV_NativeFunction, "ReturnValue");
        LinearColorLerp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColorLerp");
        LinearColorLerp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColorLerp_NativeFunction);
        LinearColorLerp_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColorLerp_NativeFunction, "A");
        LinearColorLerp_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColorLerp_NativeFunction, "B");
        LinearColorLerp_Alpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColorLerp_NativeFunction, "Alpha");
        LinearColorLerp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColorLerp_NativeFunction, "ReturnValue");
        LinearColor_Yellow_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_Yellow");
        LinearColor_Yellow_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_Yellow_NativeFunction);
        LinearColor_Yellow_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_Yellow_NativeFunction, "ReturnValue");
        LinearColor_White_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_White");
        LinearColor_White_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_White_NativeFunction);
        LinearColor_White_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_White_NativeFunction, "ReturnValue");
        LinearColor_Transparent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_Transparent");
        LinearColor_Transparent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_Transparent_NativeFunction);
        LinearColor_Transparent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_Transparent_NativeFunction, "ReturnValue");
        LinearColor_ToRGBE_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_ToRGBE");
        LinearColor_ToRGBE_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_ToRGBE_NativeFunction);
        LinearColor_ToRGBE_InLinearColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_ToRGBE_NativeFunction, "InLinearColor");
        LinearColor_ToRGBE_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_ToRGBE_NativeFunction, "ReturnValue");
        LinearColor_ToNewOpacity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_ToNewOpacity");
        LinearColor_ToNewOpacity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_ToNewOpacity_NativeFunction);
        LinearColor_ToNewOpacity_InColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_ToNewOpacity_NativeFunction, "InColor");
        LinearColor_ToNewOpacity_InOpacity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_ToNewOpacity_NativeFunction, "InOpacity");
        LinearColor_ToNewOpacity_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_ToNewOpacity_NativeFunction, "ReturnValue");
        LinearColor_SetTemperature_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_SetTemperature");
        LinearColor_SetTemperature_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_SetTemperature_NativeFunction);
        LinearColor_SetTemperature_InOutColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_SetTemperature_NativeFunction, "InOutColor");
        LinearColor_SetTemperature_InTemperature_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_SetTemperature_NativeFunction, "InTemperature");
        LinearColor_SetRGBA_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_SetRGBA");
        LinearColor_SetRGBA_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_SetRGBA_NativeFunction);
        LinearColor_SetRGBA_InOutColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_SetRGBA_NativeFunction, "InOutColor");
        LinearColor_SetRGBA_R_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_SetRGBA_NativeFunction, "R");
        LinearColor_SetRGBA_G_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_SetRGBA_NativeFunction, "G");
        LinearColor_SetRGBA_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_SetRGBA_NativeFunction, "B");
        LinearColor_SetRGBA_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_SetRGBA_NativeFunction, "A");
        LinearColor_SetRandomHue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_SetRandomHue");
        LinearColor_SetRandomHue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_SetRandomHue_NativeFunction);
        LinearColor_SetRandomHue_InOutColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_SetRandomHue_NativeFunction, "InOutColor");
        LinearColor_SetFromSRGB_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_SetFromSRGB");
        LinearColor_SetFromSRGB_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_SetFromSRGB_NativeFunction);
        LinearColor_SetFromSRGB_InOutColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_SetFromSRGB_NativeFunction, "InOutColor");
        LinearColor_SetFromSRGB_InSRGB_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_SetFromSRGB_NativeFunction, "InSRGB");
        LinearColor_SetFromPow22_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_SetFromPow22");
        LinearColor_SetFromPow22_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_SetFromPow22_NativeFunction);
        LinearColor_SetFromPow22_InOutColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_SetFromPow22_NativeFunction, "InOutColor");
        LinearColor_SetFromPow22_InColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_SetFromPow22_NativeFunction, "InColor");
        LinearColor_SetFromHSV_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_SetFromHSV");
        LinearColor_SetFromHSV_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_SetFromHSV_NativeFunction);
        LinearColor_SetFromHSV_InOutColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_SetFromHSV_NativeFunction, "InOutColor");
        LinearColor_SetFromHSV_H_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_SetFromHSV_NativeFunction, "H");
        LinearColor_SetFromHSV_S_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_SetFromHSV_NativeFunction, "S");
        LinearColor_SetFromHSV_V_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_SetFromHSV_NativeFunction, "V");
        LinearColor_SetFromHSV_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_SetFromHSV_NativeFunction, "A");
        LinearColor_Set_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_Set");
        LinearColor_Set_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_Set_NativeFunction);
        LinearColor_Set_InOutColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_Set_NativeFunction, "InOutColor");
        LinearColor_Set_InColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_Set_NativeFunction, "InColor");
        LinearColor_Red_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_Red");
        LinearColor_Red_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_Red_NativeFunction);
        LinearColor_Red_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_Red_NativeFunction, "ReturnValue");
        LinearColor_QuantizeRound_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_QuantizeRound");
        LinearColor_QuantizeRound_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_QuantizeRound_NativeFunction);
        LinearColor_QuantizeRound_InColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_QuantizeRound_NativeFunction, "InColor");
        LinearColor_QuantizeRound_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_QuantizeRound_NativeFunction, "ReturnValue");
        LinearColor_Quantize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_Quantize");
        LinearColor_Quantize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_Quantize_NativeFunction);
        LinearColor_Quantize_InColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_Quantize_NativeFunction, "InColor");
        LinearColor_Quantize_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_Quantize_NativeFunction, "ReturnValue");
        LinearColor_IsNearEqual_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_IsNearEqual");
        LinearColor_IsNearEqual_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_IsNearEqual_NativeFunction);
        LinearColor_IsNearEqual_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_IsNearEqual_NativeFunction, "A");
        LinearColor_IsNearEqual_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_IsNearEqual_NativeFunction, "B");
        LinearColor_IsNearEqual_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_IsNearEqual_NativeFunction, "Tolerance");
        LinearColor_IsNearEqual_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_IsNearEqual_NativeFunction, "ReturnValue");
        LinearColor_Green_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_Green");
        LinearColor_Green_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_Green_NativeFunction);
        LinearColor_Green_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_Green_NativeFunction, "ReturnValue");
        LinearColor_Gray_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_Gray");
        LinearColor_Gray_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_Gray_NativeFunction);
        LinearColor_Gray_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_Gray_NativeFunction, "ReturnValue");
        LinearColor_GetMin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_GetMin");
        LinearColor_GetMin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_GetMin_NativeFunction);
        LinearColor_GetMin_InColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_GetMin_NativeFunction, "InColor");
        LinearColor_GetMin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_GetMin_NativeFunction, "ReturnValue");
        LinearColor_GetMax_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_GetMax");
        LinearColor_GetMax_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_GetMax_NativeFunction);
        LinearColor_GetMax_InColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_GetMax_NativeFunction, "InColor");
        LinearColor_GetMax_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_GetMax_NativeFunction, "ReturnValue");
        LinearColor_GetLuminance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_GetLuminance");
        LinearColor_GetLuminance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_GetLuminance_NativeFunction);
        LinearColor_GetLuminance_InColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_GetLuminance_NativeFunction, "InColor");
        LinearColor_GetLuminance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_GetLuminance_NativeFunction, "ReturnValue");
        LinearColor_Distance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_Distance");
        LinearColor_Distance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_Distance_NativeFunction);
        LinearColor_Distance_C1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_Distance_NativeFunction, "C1");
        LinearColor_Distance_C2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_Distance_NativeFunction, "C2");
        LinearColor_Distance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_Distance_NativeFunction, "ReturnValue");
        LinearColor_Desaturated_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_Desaturated");
        LinearColor_Desaturated_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_Desaturated_NativeFunction);
        LinearColor_Desaturated_InColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_Desaturated_NativeFunction, "InColor");
        LinearColor_Desaturated_InDesaturation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_Desaturated_NativeFunction, "InDesaturation");
        LinearColor_Desaturated_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_Desaturated_NativeFunction, "ReturnValue");
        LinearColor_Blue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_Blue");
        LinearColor_Blue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_Blue_NativeFunction);
        LinearColor_Blue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_Blue_NativeFunction, "ReturnValue");
        LinearColor_Black_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LinearColor_Black");
        LinearColor_Black_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LinearColor_Black_NativeFunction);
        LinearColor_Black_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LinearColor_Black_NativeFunction, "ReturnValue");
        LessLess_VectorRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LessLess_VectorRotator");
        LessLess_VectorRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LessLess_VectorRotator_NativeFunction);
        LessLess_VectorRotator_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LessLess_VectorRotator_NativeFunction, "A");
        LessLess_VectorRotator_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LessLess_VectorRotator_NativeFunction, "B");
        LessLess_VectorRotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LessLess_VectorRotator_NativeFunction, "ReturnValue");
        LessEqual_TimespanTimespan_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LessEqual_TimespanTimespan");
        LessEqual_TimespanTimespan_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LessEqual_TimespanTimespan_NativeFunction);
        LessEqual_TimespanTimespan_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LessEqual_TimespanTimespan_NativeFunction, "A");
        LessEqual_TimespanTimespan_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LessEqual_TimespanTimespan_NativeFunction, "B");
        LessEqual_TimespanTimespan_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LessEqual_TimespanTimespan_NativeFunction, "ReturnValue");
        LessEqual_IntInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LessEqual_IntInt");
        LessEqual_IntInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LessEqual_IntInt_NativeFunction);
        LessEqual_IntInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LessEqual_IntInt_NativeFunction, "A");
        LessEqual_IntInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LessEqual_IntInt_NativeFunction, "B");
        LessEqual_IntInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LessEqual_IntInt_NativeFunction, "ReturnValue");
        LessEqual_Int64Int64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LessEqual_Int64Int64");
        LessEqual_Int64Int64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LessEqual_Int64Int64_NativeFunction);
        LessEqual_Int64Int64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LessEqual_Int64Int64_NativeFunction, "A");
        LessEqual_Int64Int64_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LessEqual_Int64Int64_NativeFunction, "B");
        LessEqual_Int64Int64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LessEqual_Int64Int64_NativeFunction, "ReturnValue");
        LessEqual_DoubleDouble_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LessEqual_DoubleDouble");
        LessEqual_DoubleDouble_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LessEqual_DoubleDouble_NativeFunction);
        LessEqual_DoubleDouble_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LessEqual_DoubleDouble_NativeFunction, "A");
        LessEqual_DoubleDouble_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LessEqual_DoubleDouble_NativeFunction, "B");
        LessEqual_DoubleDouble_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LessEqual_DoubleDouble_NativeFunction, "ReturnValue");
        LessEqual_DateTimeDateTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LessEqual_DateTimeDateTime");
        LessEqual_DateTimeDateTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LessEqual_DateTimeDateTime_NativeFunction);
        LessEqual_DateTimeDateTime_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LessEqual_DateTimeDateTime_NativeFunction, "A");
        LessEqual_DateTimeDateTime_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LessEqual_DateTimeDateTime_NativeFunction, "B");
        LessEqual_DateTimeDateTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LessEqual_DateTimeDateTime_NativeFunction, "ReturnValue");
        LessEqual_ByteByte_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LessEqual_ByteByte");
        LessEqual_ByteByte_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LessEqual_ByteByte_NativeFunction);
        LessEqual_ByteByte_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LessEqual_ByteByte_NativeFunction, "A");
        LessEqual_ByteByte_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LessEqual_ByteByte_NativeFunction, "B");
        LessEqual_ByteByte_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LessEqual_ByteByte_NativeFunction, "ReturnValue");
        Less_TimespanTimespan_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Less_TimespanTimespan");
        Less_TimespanTimespan_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Less_TimespanTimespan_NativeFunction);
        Less_TimespanTimespan_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Less_TimespanTimespan_NativeFunction, "A");
        Less_TimespanTimespan_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Less_TimespanTimespan_NativeFunction, "B");
        Less_TimespanTimespan_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Less_TimespanTimespan_NativeFunction, "ReturnValue");
        Less_IntInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Less_IntInt");
        Less_IntInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Less_IntInt_NativeFunction);
        Less_IntInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Less_IntInt_NativeFunction, "A");
        Less_IntInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Less_IntInt_NativeFunction, "B");
        Less_IntInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Less_IntInt_NativeFunction, "ReturnValue");
        Less_Int64Int64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Less_Int64Int64");
        Less_Int64Int64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Less_Int64Int64_NativeFunction);
        Less_Int64Int64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Less_Int64Int64_NativeFunction, "A");
        Less_Int64Int64_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Less_Int64Int64_NativeFunction, "B");
        Less_Int64Int64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Less_Int64Int64_NativeFunction, "ReturnValue");
        Less_DoubleDouble_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Less_DoubleDouble");
        Less_DoubleDouble_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Less_DoubleDouble_NativeFunction);
        Less_DoubleDouble_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Less_DoubleDouble_NativeFunction, "A");
        Less_DoubleDouble_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Less_DoubleDouble_NativeFunction, "B");
        Less_DoubleDouble_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Less_DoubleDouble_NativeFunction, "ReturnValue");
        Less_DateTimeDateTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Less_DateTimeDateTime");
        Less_DateTimeDateTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Less_DateTimeDateTime_NativeFunction);
        Less_DateTimeDateTime_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Less_DateTimeDateTime_NativeFunction, "A");
        Less_DateTimeDateTime_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Less_DateTimeDateTime_NativeFunction, "B");
        Less_DateTimeDateTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Less_DateTimeDateTime_NativeFunction, "ReturnValue");
        Less_ByteByte_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Less_ByteByte");
        Less_ByteByte_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Less_ByteByte_NativeFunction);
        Less_ByteByte_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Less_ByteByte_NativeFunction, "A");
        Less_ByteByte_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Less_ByteByte_NativeFunction, "B");
        Less_ByteByte_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Less_ByteByte_NativeFunction, "ReturnValue");
        Lerp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Lerp");
        Lerp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Lerp_NativeFunction);
        Lerp_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Lerp_NativeFunction, "A");
        Lerp_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Lerp_NativeFunction, "B");
        Lerp_Alpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Lerp_NativeFunction, "Alpha");
        Lerp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Lerp_NativeFunction, "ReturnValue");
        IsZero2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsZero2D");
        IsZero2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsZero2D_NativeFunction);
        IsZero2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsZero2D_NativeFunction, "A");
        IsZero2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsZero2D_NativeFunction, "ReturnValue");
        IsPointInBoxWithTransform_Box_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPointInBoxWithTransform_Box");
        IsPointInBoxWithTransform_Box_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPointInBoxWithTransform_Box_NativeFunction);
        IsPointInBoxWithTransform_Box_Point_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPointInBoxWithTransform_Box_NativeFunction, "Point");
        IsPointInBoxWithTransform_Box_BoxWorldTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPointInBoxWithTransform_Box_NativeFunction, "BoxWorldTransform");
        IsPointInBoxWithTransform_Box_BoxExtent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPointInBoxWithTransform_Box_NativeFunction, "BoxExtent");
        IsPointInBoxWithTransform_Box_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPointInBoxWithTransform_Box_NativeFunction, "ReturnValue");
        IsPointInBoxWithTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPointInBoxWithTransform");
        IsPointInBoxWithTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPointInBoxWithTransform_NativeFunction);
        IsPointInBoxWithTransform_Point_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPointInBoxWithTransform_NativeFunction, "Point");
        IsPointInBoxWithTransform_BoxWorldTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPointInBoxWithTransform_NativeFunction, "BoxWorldTransform");
        IsPointInBoxWithTransform_BoxExtent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPointInBoxWithTransform_NativeFunction, "BoxExtent");
        IsPointInBoxWithTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPointInBoxWithTransform_NativeFunction, "ReturnValue");
        IsPointInBox_Box_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPointInBox_Box");
        IsPointInBox_Box_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPointInBox_Box_NativeFunction);
        IsPointInBox_Box_Point_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPointInBox_Box_NativeFunction, "Point");
        IsPointInBox_Box_Box_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPointInBox_Box_NativeFunction, "Box");
        IsPointInBox_Box_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPointInBox_Box_NativeFunction, "ReturnValue");
        IsPointInBox_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPointInBox");
        IsPointInBox_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPointInBox_NativeFunction);
        IsPointInBox_Point_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPointInBox_NativeFunction, "Point");
        IsPointInBox_BoxOrigin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPointInBox_NativeFunction, "BoxOrigin");
        IsPointInBox_BoxExtent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPointInBox_NativeFunction, "BoxExtent");
        IsPointInBox_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPointInBox_NativeFunction, "ReturnValue");
        IsNearlyZero2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsNearlyZero2D");
        IsNearlyZero2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsNearlyZero2D_NativeFunction);
        IsNearlyZero2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsNearlyZero2D_NativeFunction, "A");
        IsNearlyZero2D_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsNearlyZero2D_NativeFunction, "Tolerance");
        IsNearlyZero2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsNearlyZero2D_NativeFunction, "ReturnValue");
        IsMorning_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsMorning");
        IsMorning_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsMorning_NativeFunction);
        IsMorning_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsMorning_NativeFunction, "A");
        IsMorning_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsMorning_NativeFunction, "ReturnValue");
        IsLeapYear_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsLeapYear");
        IsLeapYear_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsLeapYear_NativeFunction);
        IsLeapYear_Year_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLeapYear_NativeFunction, "Year");
        IsLeapYear_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLeapYear_NativeFunction, "ReturnValue");
        IsAfternoon_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsAfternoon");
        IsAfternoon_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsAfternoon_NativeFunction);
        IsAfternoon_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAfternoon_NativeFunction, "A");
        IsAfternoon_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAfternoon_NativeFunction, "ReturnValue");
        InvertTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "InvertTransform");
        InvertTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(InvertTransform_NativeFunction);
        InvertTransform_T_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InvertTransform_NativeFunction, "T");
        InvertTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InvertTransform_NativeFunction, "ReturnValue");
        InverseTransformRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "InverseTransformRotation");
        InverseTransformRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(InverseTransformRotation_NativeFunction);
        InverseTransformRotation_T_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InverseTransformRotation_NativeFunction, "T");
        InverseTransformRotation_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InverseTransformRotation_NativeFunction, "Rotation");
        InverseTransformRotation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InverseTransformRotation_NativeFunction, "ReturnValue");
        InverseTransformLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "InverseTransformLocation");
        InverseTransformLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(InverseTransformLocation_NativeFunction);
        InverseTransformLocation_T_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InverseTransformLocation_NativeFunction, "T");
        InverseTransformLocation_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InverseTransformLocation_NativeFunction, "Location");
        InverseTransformLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InverseTransformLocation_NativeFunction, "ReturnValue");
        InverseTransformDirection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "InverseTransformDirection");
        InverseTransformDirection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(InverseTransformDirection_NativeFunction);
        InverseTransformDirection_T_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InverseTransformDirection_NativeFunction, "T");
        InverseTransformDirection_Direction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InverseTransformDirection_NativeFunction, "Direction");
        InverseTransformDirection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InverseTransformDirection_NativeFunction, "ReturnValue");
        IntPoint_Zero_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IntPoint_Zero");
        IntPoint_Zero_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IntPoint_Zero_NativeFunction);
        IntPoint_Zero_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IntPoint_Zero_NativeFunction, "ReturnValue");
        IntPoint_Up_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IntPoint_Up");
        IntPoint_Up_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IntPoint_Up_NativeFunction);
        IntPoint_Up_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IntPoint_Up_NativeFunction, "ReturnValue");
        IntPoint_Right_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IntPoint_Right");
        IntPoint_Right_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IntPoint_Right_NativeFunction);
        IntPoint_Right_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IntPoint_Right_NativeFunction, "ReturnValue");
        IntPoint_One_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IntPoint_One");
        IntPoint_One_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IntPoint_One_NativeFunction);
        IntPoint_One_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IntPoint_One_NativeFunction, "ReturnValue");
        IntPoint_Left_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IntPoint_Left");
        IntPoint_Left_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IntPoint_Left_NativeFunction);
        IntPoint_Left_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IntPoint_Left_NativeFunction, "ReturnValue");
        IntPoint_Down_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IntPoint_Down");
        IntPoint_Down_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IntPoint_Down_NativeFunction);
        IntPoint_Down_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IntPoint_Down_NativeFunction, "ReturnValue");
        InRange_IntInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "InRange_IntInt");
        InRange_IntInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(InRange_IntInt_NativeFunction);
        InRange_IntInt_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InRange_IntInt_NativeFunction, "Value");
        InRange_IntInt_Min_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InRange_IntInt_NativeFunction, "Min");
        InRange_IntInt_Max_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InRange_IntInt_NativeFunction, "Max");
        InRange_IntInt_InclusiveMin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InRange_IntInt_NativeFunction, "InclusiveMin");
        InRange_IntInt_InclusiveMax_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InRange_IntInt_NativeFunction, "InclusiveMax");
        InRange_IntInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InRange_IntInt_NativeFunction, "ReturnValue");
        InRange_Int64Int64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "InRange_Int64Int64");
        InRange_Int64Int64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(InRange_Int64Int64_NativeFunction);
        InRange_Int64Int64_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InRange_Int64Int64_NativeFunction, "Value");
        InRange_Int64Int64_Min_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InRange_Int64Int64_NativeFunction, "Min");
        InRange_Int64Int64_Max_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InRange_Int64Int64_NativeFunction, "Max");
        InRange_Int64Int64_InclusiveMin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InRange_Int64Int64_NativeFunction, "InclusiveMin");
        InRange_Int64Int64_InclusiveMax_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InRange_Int64Int64_NativeFunction, "InclusiveMax");
        InRange_Int64Int64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InRange_Int64Int64_NativeFunction, "ReturnValue");
        InRange_FloatFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "InRange_FloatFloat");
        InRange_FloatFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(InRange_FloatFloat_NativeFunction);
        InRange_FloatFloat_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InRange_FloatFloat_NativeFunction, "Value");
        InRange_FloatFloat_Min_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InRange_FloatFloat_NativeFunction, "Min");
        InRange_FloatFloat_Max_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InRange_FloatFloat_NativeFunction, "Max");
        InRange_FloatFloat_InclusiveMin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InRange_FloatFloat_NativeFunction, "InclusiveMin");
        InRange_FloatFloat_InclusiveMax_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InRange_FloatFloat_NativeFunction, "InclusiveMax");
        InRange_FloatFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InRange_FloatFloat_NativeFunction, "ReturnValue");
        Hypotenuse_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Hypotenuse");
        Hypotenuse_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Hypotenuse_NativeFunction);
        Hypotenuse_Width_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Hypotenuse_NativeFunction, "Width");
        Hypotenuse_Height_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Hypotenuse_NativeFunction, "Height");
        Hypotenuse_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Hypotenuse_NativeFunction, "ReturnValue");
        HSVToRGBLinear_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HSVToRGBLinear");
        HSVToRGBLinear_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HSVToRGBLinear_NativeFunction);
        HSVToRGBLinear_HSV_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HSVToRGBLinear_NativeFunction, "HSV");
        HSVToRGBLinear_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HSVToRGBLinear_NativeFunction, "ReturnValue");
        HSVToRGB_Vector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HSVToRGB_Vector");
        HSVToRGB_Vector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HSVToRGB_Vector_NativeFunction);
        HSVToRGB_Vector_HSV_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HSVToRGB_Vector_NativeFunction, "HSV");
        HSVToRGB_Vector_RGB_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HSVToRGB_Vector_NativeFunction, "RGB");
        HSVToRGB_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HSVToRGB");
        HSVToRGB_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HSVToRGB_NativeFunction);
        HSVToRGB_H_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HSVToRGB_NativeFunction, "H");
        HSVToRGB_S_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HSVToRGB_NativeFunction, "S");
        HSVToRGB_V_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HSVToRGB_NativeFunction, "V");
        HSVToRGB_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HSVToRGB_NativeFunction, "A");
        HSVToRGB_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HSVToRGB_NativeFunction, "ReturnValue");
        GridSnap_Float_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GridSnap_Float");
        GridSnap_Float_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GridSnap_Float_NativeFunction);
        GridSnap_Float_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GridSnap_Float_NativeFunction, "Location");
        GridSnap_Float_GridSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GridSnap_Float_NativeFunction, "GridSize");
        GridSnap_Float_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GridSnap_Float_NativeFunction, "ReturnValue");
        GreaterGreater_VectorRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GreaterGreater_VectorRotator");
        GreaterGreater_VectorRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GreaterGreater_VectorRotator_NativeFunction);
        GreaterGreater_VectorRotator_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GreaterGreater_VectorRotator_NativeFunction, "A");
        GreaterGreater_VectorRotator_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GreaterGreater_VectorRotator_NativeFunction, "B");
        GreaterGreater_VectorRotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GreaterGreater_VectorRotator_NativeFunction, "ReturnValue");
        GreaterEqual_TimespanTimespan_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GreaterEqual_TimespanTimespan");
        GreaterEqual_TimespanTimespan_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GreaterEqual_TimespanTimespan_NativeFunction);
        GreaterEqual_TimespanTimespan_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GreaterEqual_TimespanTimespan_NativeFunction, "A");
        GreaterEqual_TimespanTimespan_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GreaterEqual_TimespanTimespan_NativeFunction, "B");
        GreaterEqual_TimespanTimespan_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GreaterEqual_TimespanTimespan_NativeFunction, "ReturnValue");
        GreaterEqual_IntInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GreaterEqual_IntInt");
        GreaterEqual_IntInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GreaterEqual_IntInt_NativeFunction);
        GreaterEqual_IntInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GreaterEqual_IntInt_NativeFunction, "A");
        GreaterEqual_IntInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GreaterEqual_IntInt_NativeFunction, "B");
        GreaterEqual_IntInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GreaterEqual_IntInt_NativeFunction, "ReturnValue");
        GreaterEqual_Int64Int64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GreaterEqual_Int64Int64");
        GreaterEqual_Int64Int64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GreaterEqual_Int64Int64_NativeFunction);
        GreaterEqual_Int64Int64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GreaterEqual_Int64Int64_NativeFunction, "A");
        GreaterEqual_Int64Int64_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GreaterEqual_Int64Int64_NativeFunction, "B");
        GreaterEqual_Int64Int64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GreaterEqual_Int64Int64_NativeFunction, "ReturnValue");
        GreaterEqual_DoubleDouble_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GreaterEqual_DoubleDouble");
        GreaterEqual_DoubleDouble_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GreaterEqual_DoubleDouble_NativeFunction);
        GreaterEqual_DoubleDouble_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GreaterEqual_DoubleDouble_NativeFunction, "A");
        GreaterEqual_DoubleDouble_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GreaterEqual_DoubleDouble_NativeFunction, "B");
        GreaterEqual_DoubleDouble_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GreaterEqual_DoubleDouble_NativeFunction, "ReturnValue");
        GreaterEqual_DateTimeDateTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GreaterEqual_DateTimeDateTime");
        GreaterEqual_DateTimeDateTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GreaterEqual_DateTimeDateTime_NativeFunction);
        GreaterEqual_DateTimeDateTime_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GreaterEqual_DateTimeDateTime_NativeFunction, "A");
        GreaterEqual_DateTimeDateTime_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GreaterEqual_DateTimeDateTime_NativeFunction, "B");
        GreaterEqual_DateTimeDateTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GreaterEqual_DateTimeDateTime_NativeFunction, "ReturnValue");
        GreaterEqual_ByteByte_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GreaterEqual_ByteByte");
        GreaterEqual_ByteByte_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GreaterEqual_ByteByte_NativeFunction);
        GreaterEqual_ByteByte_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GreaterEqual_ByteByte_NativeFunction, "A");
        GreaterEqual_ByteByte_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GreaterEqual_ByteByte_NativeFunction, "B");
        GreaterEqual_ByteByte_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GreaterEqual_ByteByte_NativeFunction, "ReturnValue");
        Greater_TimespanTimespan_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Greater_TimespanTimespan");
        Greater_TimespanTimespan_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Greater_TimespanTimespan_NativeFunction);
        Greater_TimespanTimespan_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Greater_TimespanTimespan_NativeFunction, "A");
        Greater_TimespanTimespan_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Greater_TimespanTimespan_NativeFunction, "B");
        Greater_TimespanTimespan_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Greater_TimespanTimespan_NativeFunction, "ReturnValue");
        Greater_IntInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Greater_IntInt");
        Greater_IntInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Greater_IntInt_NativeFunction);
        Greater_IntInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Greater_IntInt_NativeFunction, "A");
        Greater_IntInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Greater_IntInt_NativeFunction, "B");
        Greater_IntInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Greater_IntInt_NativeFunction, "ReturnValue");
        Greater_Int64Int64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Greater_Int64Int64");
        Greater_Int64Int64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Greater_Int64Int64_NativeFunction);
        Greater_Int64Int64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Greater_Int64Int64_NativeFunction, "A");
        Greater_Int64Int64_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Greater_Int64Int64_NativeFunction, "B");
        Greater_Int64Int64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Greater_Int64Int64_NativeFunction, "ReturnValue");
        Greater_DoubleDouble_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Greater_DoubleDouble");
        Greater_DoubleDouble_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Greater_DoubleDouble_NativeFunction);
        Greater_DoubleDouble_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Greater_DoubleDouble_NativeFunction, "A");
        Greater_DoubleDouble_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Greater_DoubleDouble_NativeFunction, "B");
        Greater_DoubleDouble_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Greater_DoubleDouble_NativeFunction, "ReturnValue");
        Greater_DateTimeDateTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Greater_DateTimeDateTime");
        Greater_DateTimeDateTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Greater_DateTimeDateTime_NativeFunction);
        Greater_DateTimeDateTime_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Greater_DateTimeDateTime_NativeFunction, "A");
        Greater_DateTimeDateTime_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Greater_DateTimeDateTime_NativeFunction, "B");
        Greater_DateTimeDateTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Greater_DateTimeDateTime_NativeFunction, "ReturnValue");
        Greater_ByteByte_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Greater_ByteByte");
        Greater_ByteByte_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Greater_ByteByte_NativeFunction);
        Greater_ByteByte_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Greater_ByteByte_NativeFunction, "A");
        Greater_ByteByte_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Greater_ByteByte_NativeFunction, "B");
        Greater_ByteByte_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Greater_ByteByte_NativeFunction, "ReturnValue");
        GetYear_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetYear");
        GetYear_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetYear_NativeFunction);
        GetYear_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetYear_NativeFunction, "A");
        GetYear_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetYear_NativeFunction, "ReturnValue");
        GetYawPitchFromVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetYawPitchFromVector");
        GetYawPitchFromVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetYawPitchFromVector_NativeFunction);
        GetYawPitchFromVector_InVec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetYawPitchFromVector_NativeFunction, "InVec");
        GetYawPitchFromVector_Yaw_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetYawPitchFromVector_NativeFunction, "Yaw");
        GetYawPitchFromVector_Pitch_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetYawPitchFromVector_NativeFunction, "Pitch");
        GetVectorArrayAverage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVectorArrayAverage");
        GetVectorArrayAverage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVectorArrayAverage_NativeFunction);
        GetVectorArrayAverage_Vectors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorArrayAverage_NativeFunction, "Vectors");
        GetVectorArrayAverage_Vectors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetVectorArrayAverage_NativeFunction, "Vectors");
        GetVectorArrayAverage_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorArrayAverage_NativeFunction, "ReturnValue");
        GetUpVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetUpVector");
        GetUpVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetUpVector_NativeFunction);
        GetUpVector_InRot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUpVector_NativeFunction, "InRot");
        GetUpVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUpVector_NativeFunction, "ReturnValue");
        GetTotalSeconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTotalSeconds");
        GetTotalSeconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTotalSeconds_NativeFunction);
        GetTotalSeconds_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTotalSeconds_NativeFunction, "A");
        GetTotalSeconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTotalSeconds_NativeFunction, "ReturnValue");
        GetTotalMinutes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTotalMinutes");
        GetTotalMinutes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTotalMinutes_NativeFunction);
        GetTotalMinutes_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTotalMinutes_NativeFunction, "A");
        GetTotalMinutes_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTotalMinutes_NativeFunction, "ReturnValue");
        GetTotalMilliseconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTotalMilliseconds");
        GetTotalMilliseconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTotalMilliseconds_NativeFunction);
        GetTotalMilliseconds_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTotalMilliseconds_NativeFunction, "A");
        GetTotalMilliseconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTotalMilliseconds_NativeFunction, "ReturnValue");
        GetTotalHours_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTotalHours");
        GetTotalHours_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTotalHours_NativeFunction);
        GetTotalHours_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTotalHours_NativeFunction, "A");
        GetTotalHours_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTotalHours_NativeFunction, "ReturnValue");
        GetTotalDays_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTotalDays");
        GetTotalDays_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTotalDays_NativeFunction);
        GetTotalDays_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTotalDays_NativeFunction, "A");
        GetTotalDays_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTotalDays_NativeFunction, "ReturnValue");
        GetTimeOfDay_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTimeOfDay");
        GetTimeOfDay_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTimeOfDay_NativeFunction);
        GetTimeOfDay_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTimeOfDay_NativeFunction, "A");
        GetTimeOfDay_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTimeOfDay_NativeFunction, "ReturnValue");
        GetTAU_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTAU");
        GetTAU_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTAU_NativeFunction);
        GetTAU_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTAU_NativeFunction, "ReturnValue");
        GetSlopeDegreeAngles_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSlopeDegreeAngles");
        GetSlopeDegreeAngles_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSlopeDegreeAngles_NativeFunction);
        GetSlopeDegreeAngles_MyRightYAxis_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSlopeDegreeAngles_NativeFunction, "MyRightYAxis");
        GetSlopeDegreeAngles_FloorNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSlopeDegreeAngles_NativeFunction, "FloorNormal");
        GetSlopeDegreeAngles_UpVector_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSlopeDegreeAngles_NativeFunction, "UpVector");
        GetSlopeDegreeAngles_OutSlopePitchDegreeAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSlopeDegreeAngles_NativeFunction, "OutSlopePitchDegreeAngle");
        GetSlopeDegreeAngles_OutSlopeRollDegreeAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSlopeDegreeAngles_NativeFunction, "OutSlopeRollDegreeAngle");
        GetSeconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSeconds");
        GetSeconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSeconds_NativeFunction);
        GetSeconds_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSeconds_NativeFunction, "A");
        GetSeconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSeconds_NativeFunction, "ReturnValue");
        GetSecond_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSecond");
        GetSecond_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSecond_NativeFunction);
        GetSecond_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSecond_NativeFunction, "A");
        GetSecond_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSecond_NativeFunction, "ReturnValue");
        GetRotated2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRotated2D");
        GetRotated2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRotated2D_NativeFunction);
        GetRotated2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotated2D_NativeFunction, "A");
        GetRotated2D_AngleDeg_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotated2D_NativeFunction, "AngleDeg");
        GetRotated2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotated2D_NativeFunction, "ReturnValue");
        GetRightVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRightVector");
        GetRightVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRightVector_NativeFunction);
        GetRightVector_InRot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRightVector_NativeFunction, "InRot");
        GetRightVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRightVector_NativeFunction, "ReturnValue");
        GetReflectionVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetReflectionVector");
        GetReflectionVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetReflectionVector_NativeFunction);
        GetReflectionVector_Direction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetReflectionVector_NativeFunction, "Direction");
        GetReflectionVector_SurfaceNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetReflectionVector_NativeFunction, "SurfaceNormal");
        GetReflectionVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetReflectionVector_NativeFunction, "ReturnValue");
        GetPointDistanceToSegment_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPointDistanceToSegment");
        GetPointDistanceToSegment_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPointDistanceToSegment_NativeFunction);
        GetPointDistanceToSegment_Point_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPointDistanceToSegment_NativeFunction, "Point");
        GetPointDistanceToSegment_SegmentStart_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPointDistanceToSegment_NativeFunction, "SegmentStart");
        GetPointDistanceToSegment_SegmentEnd_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPointDistanceToSegment_NativeFunction, "SegmentEnd");
        GetPointDistanceToSegment_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPointDistanceToSegment_NativeFunction, "ReturnValue");
        GetPointDistanceToLine_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPointDistanceToLine");
        GetPointDistanceToLine_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPointDistanceToLine_NativeFunction);
        GetPointDistanceToLine_Point_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPointDistanceToLine_NativeFunction, "Point");
        GetPointDistanceToLine_LineOrigin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPointDistanceToLine_NativeFunction, "LineOrigin");
        GetPointDistanceToLine_LineDirection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPointDistanceToLine_NativeFunction, "LineDirection");
        GetPointDistanceToLine_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPointDistanceToLine_NativeFunction, "ReturnValue");
        GetPI_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPI");
        GetPI_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPI_NativeFunction);
        GetPI_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPI_NativeFunction, "ReturnValue");
        GetMonth_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMonth");
        GetMonth_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMonth_NativeFunction);
        GetMonth_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMonth_NativeFunction, "A");
        GetMonth_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMonth_NativeFunction, "ReturnValue");
        GetMinutes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMinutes");
        GetMinutes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMinutes_NativeFunction);
        GetMinutes_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMinutes_NativeFunction, "A");
        GetMinutes_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMinutes_NativeFunction, "ReturnValue");
        GetMinute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMinute");
        GetMinute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMinute_NativeFunction);
        GetMinute_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMinute_NativeFunction, "A");
        GetMinute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMinute_NativeFunction, "ReturnValue");
        GetMinElement_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMinElement");
        GetMinElement_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMinElement_NativeFunction);
        GetMinElement_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMinElement_NativeFunction, "A");
        GetMinElement_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMinElement_NativeFunction, "ReturnValue");
        GetMin2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMin2D");
        GetMin2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMin2D_NativeFunction);
        GetMin2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMin2D_NativeFunction, "A");
        GetMin2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMin2D_NativeFunction, "ReturnValue");
        GetMilliseconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMilliseconds");
        GetMilliseconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMilliseconds_NativeFunction);
        GetMilliseconds_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMilliseconds_NativeFunction, "A");
        GetMilliseconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMilliseconds_NativeFunction, "ReturnValue");
        GetMillisecond_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMillisecond");
        GetMillisecond_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMillisecond_NativeFunction);
        GetMillisecond_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMillisecond_NativeFunction, "A");
        GetMillisecond_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMillisecond_NativeFunction, "ReturnValue");
        GetMaxElement_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaxElement");
        GetMaxElement_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaxElement_NativeFunction);
        GetMaxElement_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaxElement_NativeFunction, "A");
        GetMaxElement_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaxElement_NativeFunction, "ReturnValue");
        GetMax2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMax2D");
        GetMax2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMax2D_NativeFunction);
        GetMax2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMax2D_NativeFunction, "A");
        GetMax2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMax2D_NativeFunction, "ReturnValue");
        GetHours_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHours");
        GetHours_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHours_NativeFunction);
        GetHours_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHours_NativeFunction, "A");
        GetHours_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHours_NativeFunction, "ReturnValue");
        GetHour12_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHour12");
        GetHour12_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHour12_NativeFunction);
        GetHour12_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHour12_NativeFunction, "A");
        GetHour12_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHour12_NativeFunction, "ReturnValue");
        GetHour_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHour");
        GetHour_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHour_NativeFunction);
        GetHour_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHour_NativeFunction, "A");
        GetHour_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHour_NativeFunction, "ReturnValue");
        GetForwardVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetForwardVector");
        GetForwardVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetForwardVector_NativeFunction);
        GetForwardVector_InRot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetForwardVector_NativeFunction, "InRot");
        GetForwardVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetForwardVector_NativeFunction, "ReturnValue");
        GetDuration_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDuration");
        GetDuration_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDuration_NativeFunction);
        GetDuration_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDuration_NativeFunction, "A");
        GetDuration_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDuration_NativeFunction, "ReturnValue");
        GetDirectionUnitVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDirectionUnitVector");
        GetDirectionUnitVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDirectionUnitVector_NativeFunction);
        GetDirectionUnitVector_From_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDirectionUnitVector_NativeFunction, "From");
        GetDirectionUnitVector_To_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDirectionUnitVector_NativeFunction, "To");
        GetDirectionUnitVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDirectionUnitVector_NativeFunction, "ReturnValue");
        GetDays_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDays");
        GetDays_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDays_NativeFunction);
        GetDays_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDays_NativeFunction, "A");
        GetDays_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDays_NativeFunction, "ReturnValue");
        GetDayOfYear_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDayOfYear");
        GetDayOfYear_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDayOfYear_NativeFunction);
        GetDayOfYear_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDayOfYear_NativeFunction, "A");
        GetDayOfYear_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDayOfYear_NativeFunction, "ReturnValue");
        GetDay_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDay");
        GetDay_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDay_NativeFunction);
        GetDay_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDay_NativeFunction, "A");
        GetDay_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDay_NativeFunction, "ReturnValue");
        GetDate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDate");
        GetDate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDate_NativeFunction);
        GetDate_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDate_NativeFunction, "A");
        GetDate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDate_NativeFunction, "ReturnValue");
        GetAzimuthAndElevation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAzimuthAndElevation");
        GetAzimuthAndElevation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAzimuthAndElevation_NativeFunction);
        GetAzimuthAndElevation_InDirection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAzimuthAndElevation_NativeFunction, "InDirection");
        GetAzimuthAndElevation_ReferenceFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAzimuthAndElevation_NativeFunction, "ReferenceFrame");
        GetAzimuthAndElevation_Azimuth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAzimuthAndElevation_NativeFunction, "Azimuth");
        GetAzimuthAndElevation_Elevation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAzimuthAndElevation_NativeFunction, "Elevation");
        GetAxes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAxes");
        GetAxes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAxes_NativeFunction);
        GetAxes_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAxes_NativeFunction, "A");
        GetAxes_X_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAxes_NativeFunction, "X");
        GetAxes_Y_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAxes_NativeFunction, "Y");
        GetAxes_Z_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAxes_NativeFunction, "Z");
        GetAbsMax2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAbsMax2D");
        GetAbsMax2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAbsMax2D_NativeFunction);
        GetAbsMax2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAbsMax2D_NativeFunction, "A");
        GetAbsMax2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAbsMax2D_NativeFunction, "ReturnValue");
        GetAbs2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAbs2D");
        GetAbs2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAbs2D_NativeFunction);
        GetAbs2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAbs2D_NativeFunction, "A");
        GetAbs2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAbs2D_NativeFunction, "ReturnValue");
        FWrap_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FWrap");
        FWrap_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FWrap_NativeFunction);
        FWrap_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FWrap_NativeFunction, "Value");
        FWrap_Min_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FWrap_NativeFunction, "Min");
        FWrap_Max_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FWrap_NativeFunction, "Max");
        FWrap_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FWrap_NativeFunction, "ReturnValue");
        FTruncVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FTruncVector");
        FTruncVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FTruncVector_NativeFunction);
        FTruncVector_InVector_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FTruncVector_NativeFunction, "InVector");
        FTruncVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FTruncVector_NativeFunction, "ReturnValue");
        FTrunc64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FTrunc64");
        FTrunc64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FTrunc64_NativeFunction);
        FTrunc64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FTrunc64_NativeFunction, "A");
        FTrunc64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FTrunc64_NativeFunction, "ReturnValue");
        FTrunc_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FTrunc");
        FTrunc_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FTrunc_NativeFunction);
        FTrunc_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FTrunc_NativeFunction, "A");
        FTrunc_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FTrunc_NativeFunction, "ReturnValue");
        FromUnixTimestamp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FromUnixTimestamp");
        FromUnixTimestamp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FromUnixTimestamp_NativeFunction);
        FromUnixTimestamp_UnixTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FromUnixTimestamp_NativeFunction, "UnixTime");
        FromUnixTimestamp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FromUnixTimestamp_NativeFunction, "ReturnValue");
        FromSeconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FromSeconds");
        FromSeconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FromSeconds_NativeFunction);
        FromSeconds_Seconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FromSeconds_NativeFunction, "Seconds");
        FromSeconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FromSeconds_NativeFunction, "ReturnValue");
        FromMinutes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FromMinutes");
        FromMinutes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FromMinutes_NativeFunction);
        FromMinutes_Minutes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FromMinutes_NativeFunction, "Minutes");
        FromMinutes_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FromMinutes_NativeFunction, "ReturnValue");
        FromMilliseconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FromMilliseconds");
        FromMilliseconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FromMilliseconds_NativeFunction);
        FromMilliseconds_Milliseconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FromMilliseconds_NativeFunction, "Milliseconds");
        FromMilliseconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FromMilliseconds_NativeFunction, "ReturnValue");
        FromHours_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FromHours");
        FromHours_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FromHours_NativeFunction);
        FromHours_Hours_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FromHours_NativeFunction, "Hours");
        FromHours_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FromHours_NativeFunction, "ReturnValue");
        FromDays_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FromDays");
        FromDays_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FromDays_NativeFunction);
        FromDays_Days_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FromDays_NativeFunction, "Days");
        FromDays_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FromDays_NativeFunction, "ReturnValue");
        Fraction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Fraction");
        Fraction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Fraction_NativeFunction);
        Fraction_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Fraction_NativeFunction, "A");
        Fraction_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Fraction_NativeFunction, "ReturnValue");
        FMod64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FMod64");
        FMod64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FMod64_NativeFunction);
        FMod64_Dividend_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FMod64_NativeFunction, "Dividend");
        FMod64_Divisor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FMod64_NativeFunction, "Divisor");
        FMod64_Remainder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FMod64_NativeFunction, "Remainder");
        FMod64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FMod64_NativeFunction, "ReturnValue");
        FMod_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FMod");
        FMod_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FMod_NativeFunction);
        FMod_Dividend_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FMod_NativeFunction, "Dividend");
        FMod_Divisor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FMod_NativeFunction, "Divisor");
        FMod_Remainder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FMod_NativeFunction, "Remainder");
        FMod_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FMod_NativeFunction, "ReturnValue");
        FMin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FMin");
        FMin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FMin_NativeFunction);
        FMin_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FMin_NativeFunction, "A");
        FMin_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FMin_NativeFunction, "B");
        FMin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FMin_NativeFunction, "ReturnValue");
        FMax_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FMax");
        FMax_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FMax_NativeFunction);
        FMax_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FMax_NativeFunction, "A");
        FMax_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FMax_NativeFunction, "B");
        FMax_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FMax_NativeFunction, "ReturnValue");
        FloatSpringInterp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FloatSpringInterp");
        FloatSpringInterp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FloatSpringInterp_NativeFunction);
        FloatSpringInterp_Current_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FloatSpringInterp_NativeFunction, "Current");
        FloatSpringInterp_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FloatSpringInterp_NativeFunction, "Target");
        FloatSpringInterp_SpringState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FloatSpringInterp_NativeFunction, "SpringState");
        FloatSpringInterp_Stiffness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FloatSpringInterp_NativeFunction, "Stiffness");
        FloatSpringInterp_CriticalDampingFactor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FloatSpringInterp_NativeFunction, "CriticalDampingFactor");
        FloatSpringInterp_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FloatSpringInterp_NativeFunction, "DeltaTime");
        FloatSpringInterp_Mass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FloatSpringInterp_NativeFunction, "Mass");
        FloatSpringInterp_TargetVelocityAmount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FloatSpringInterp_NativeFunction, "TargetVelocityAmount");
        FloatSpringInterp_bClamp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FloatSpringInterp_NativeFunction, "bClamp");
        FloatSpringInterp_MinValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FloatSpringInterp_NativeFunction, "MinValue");
        FloatSpringInterp_MaxValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FloatSpringInterp_NativeFunction, "MaxValue");
        FloatSpringInterp_bInitializeFromTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FloatSpringInterp_NativeFunction, "bInitializeFromTarget");
        FloatSpringInterp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FloatSpringInterp_NativeFunction, "ReturnValue");
        FixedTurn_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FixedTurn");
        FixedTurn_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FixedTurn_NativeFunction);
        FixedTurn_InCurrent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FixedTurn_NativeFunction, "InCurrent");
        FixedTurn_InDesired_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FixedTurn_NativeFunction, "InDesired");
        FixedTurn_InDeltaRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FixedTurn_NativeFunction, "InDeltaRate");
        FixedTurn_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FixedTurn_NativeFunction, "ReturnValue");
        FInterpTo_Constant_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FInterpTo_Constant");
        FInterpTo_Constant_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FInterpTo_Constant_NativeFunction);
        FInterpTo_Constant_Current_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FInterpTo_Constant_NativeFunction, "Current");
        FInterpTo_Constant_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FInterpTo_Constant_NativeFunction, "Target");
        FInterpTo_Constant_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FInterpTo_Constant_NativeFunction, "DeltaTime");
        FInterpTo_Constant_InterpSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FInterpTo_Constant_NativeFunction, "InterpSpeed");
        FInterpTo_Constant_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FInterpTo_Constant_NativeFunction, "ReturnValue");
        FInterpTo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FInterpTo");
        FInterpTo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FInterpTo_NativeFunction);
        FInterpTo_Current_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FInterpTo_NativeFunction, "Current");
        FInterpTo_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FInterpTo_NativeFunction, "Target");
        FInterpTo_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FInterpTo_NativeFunction, "DeltaTime");
        FInterpTo_InterpSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FInterpTo_NativeFunction, "InterpSpeed");
        FInterpTo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FInterpTo_NativeFunction, "ReturnValue");
        FInterpEaseInOut_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FInterpEaseInOut");
        FInterpEaseInOut_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FInterpEaseInOut_NativeFunction);
        FInterpEaseInOut_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FInterpEaseInOut_NativeFunction, "A");
        FInterpEaseInOut_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FInterpEaseInOut_NativeFunction, "B");
        FInterpEaseInOut_Alpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FInterpEaseInOut_NativeFunction, "Alpha");
        FInterpEaseInOut_Exponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FInterpEaseInOut_NativeFunction, "Exponent");
        FInterpEaseInOut_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FInterpEaseInOut_NativeFunction, "ReturnValue");
        FindRelativeLookAtRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindRelativeLookAtRotation");
        FindRelativeLookAtRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindRelativeLookAtRotation_NativeFunction);
        FindRelativeLookAtRotation_StartTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindRelativeLookAtRotation_NativeFunction, "StartTransform");
        FindRelativeLookAtRotation_TargetLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindRelativeLookAtRotation_NativeFunction, "TargetLocation");
        FindRelativeLookAtRotation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindRelativeLookAtRotation_NativeFunction, "ReturnValue");
        FindNearestPointsOnLineSegments_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindNearestPointsOnLineSegments");
        FindNearestPointsOnLineSegments_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindNearestPointsOnLineSegments_NativeFunction);
        FindNearestPointsOnLineSegments_Segment1Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNearestPointsOnLineSegments_NativeFunction, "Segment1Start");
        FindNearestPointsOnLineSegments_Segment1End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNearestPointsOnLineSegments_NativeFunction, "Segment1End");
        FindNearestPointsOnLineSegments_Segment2Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNearestPointsOnLineSegments_NativeFunction, "Segment2Start");
        FindNearestPointsOnLineSegments_Segment2End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNearestPointsOnLineSegments_NativeFunction, "Segment2End");
        FindNearestPointsOnLineSegments_Segment1Point_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNearestPointsOnLineSegments_NativeFunction, "Segment1Point");
        FindNearestPointsOnLineSegments_Segment2Point_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindNearestPointsOnLineSegments_NativeFunction, "Segment2Point");
        FindLookAtRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindLookAtRotation");
        FindLookAtRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindLookAtRotation_NativeFunction);
        FindLookAtRotation_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindLookAtRotation_NativeFunction, "Start");
        FindLookAtRotation_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindLookAtRotation_NativeFunction, "Target");
        FindLookAtRotation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindLookAtRotation_NativeFunction, "ReturnValue");
        FindClosestPointOnSegment_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindClosestPointOnSegment");
        FindClosestPointOnSegment_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindClosestPointOnSegment_NativeFunction);
        FindClosestPointOnSegment_Point_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindClosestPointOnSegment_NativeFunction, "Point");
        FindClosestPointOnSegment_SegmentStart_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindClosestPointOnSegment_NativeFunction, "SegmentStart");
        FindClosestPointOnSegment_SegmentEnd_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindClosestPointOnSegment_NativeFunction, "SegmentEnd");
        FindClosestPointOnSegment_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindClosestPointOnSegment_NativeFunction, "ReturnValue");
        FindClosestPointOnLine_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindClosestPointOnLine");
        FindClosestPointOnLine_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindClosestPointOnLine_NativeFunction);
        FindClosestPointOnLine_Point_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindClosestPointOnLine_NativeFunction, "Point");
        FindClosestPointOnLine_LineOrigin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindClosestPointOnLine_NativeFunction, "LineOrigin");
        FindClosestPointOnLine_LineDirection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindClosestPointOnLine_NativeFunction, "LineDirection");
        FindClosestPointOnLine_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindClosestPointOnLine_NativeFunction, "ReturnValue");
        FFloor64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FFloor64");
        FFloor64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FFloor64_NativeFunction);
        FFloor64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FFloor64_NativeFunction, "A");
        FFloor64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FFloor64_NativeFunction, "ReturnValue");
        FFloor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FFloor");
        FFloor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FFloor_NativeFunction);
        FFloor_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FFloor_NativeFunction, "A");
        FFloor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FFloor_NativeFunction, "ReturnValue");
        FClamp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FClamp");
        FClamp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FClamp_NativeFunction);
        FClamp_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FClamp_NativeFunction, "Value");
        FClamp_Min_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FClamp_NativeFunction, "Min");
        FClamp_Max_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FClamp_NativeFunction, "Max");
        FClamp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FClamp_NativeFunction, "ReturnValue");
        FCeil64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FCeil64");
        FCeil64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FCeil64_NativeFunction);
        FCeil64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FCeil64_NativeFunction, "A");
        FCeil64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FCeil64_NativeFunction, "ReturnValue");
        FCeil_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FCeil");
        FCeil_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FCeil_NativeFunction);
        FCeil_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FCeil_NativeFunction, "A");
        FCeil_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FCeil_NativeFunction, "ReturnValue");
        Exp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Exp");
        Exp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Exp_NativeFunction);
        Exp_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Exp_NativeFunction, "A");
        Exp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Exp_NativeFunction, "ReturnValue");
        EqualExactly_VectorVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualExactly_VectorVector");
        EqualExactly_VectorVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualExactly_VectorVector_NativeFunction);
        EqualExactly_VectorVector_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualExactly_VectorVector_NativeFunction, "A");
        EqualExactly_VectorVector_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualExactly_VectorVector_NativeFunction, "B");
        EqualExactly_VectorVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualExactly_VectorVector_NativeFunction, "ReturnValue");
        EqualExactly_Vector2DVector2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualExactly_Vector2DVector2D");
        EqualExactly_Vector2DVector2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualExactly_Vector2DVector2D_NativeFunction);
        EqualExactly_Vector2DVector2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualExactly_Vector2DVector2D_NativeFunction, "A");
        EqualExactly_Vector2DVector2D_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualExactly_Vector2DVector2D_NativeFunction, "B");
        EqualExactly_Vector2DVector2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualExactly_Vector2DVector2D_NativeFunction, "ReturnValue");
        EqualEqual_VectorVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_VectorVector");
        EqualEqual_VectorVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_VectorVector_NativeFunction);
        EqualEqual_VectorVector_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_VectorVector_NativeFunction, "A");
        EqualEqual_VectorVector_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_VectorVector_NativeFunction, "B");
        EqualEqual_VectorVector_ErrorTolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_VectorVector_NativeFunction, "ErrorTolerance");
        EqualEqual_VectorVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_VectorVector_NativeFunction, "ReturnValue");
        EqualEqual_Vector2DVector2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_Vector2DVector2D");
        EqualEqual_Vector2DVector2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_Vector2DVector2D_NativeFunction);
        EqualEqual_Vector2DVector2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_Vector2DVector2D_NativeFunction, "A");
        EqualEqual_Vector2DVector2D_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_Vector2DVector2D_NativeFunction, "B");
        EqualEqual_Vector2DVector2D_ErrorTolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_Vector2DVector2D_NativeFunction, "ErrorTolerance");
        EqualEqual_Vector2DVector2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_Vector2DVector2D_NativeFunction, "ReturnValue");
        EqualEqual_TransformTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_TransformTransform");
        EqualEqual_TransformTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_TransformTransform_NativeFunction);
        EqualEqual_TransformTransform_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_TransformTransform_NativeFunction, "A");
        EqualEqual_TransformTransform_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_TransformTransform_NativeFunction, "B");
        EqualEqual_TransformTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_TransformTransform_NativeFunction, "ReturnValue");
        EqualEqual_TimespanTimespan_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_TimespanTimespan");
        EqualEqual_TimespanTimespan_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_TimespanTimespan_NativeFunction);
        EqualEqual_TimespanTimespan_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_TimespanTimespan_NativeFunction, "A");
        EqualEqual_TimespanTimespan_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_TimespanTimespan_NativeFunction, "B");
        EqualEqual_TimespanTimespan_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_TimespanTimespan_NativeFunction, "ReturnValue");
        EqualEqual_RotatorRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_RotatorRotator");
        EqualEqual_RotatorRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_RotatorRotator_NativeFunction);
        EqualEqual_RotatorRotator_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_RotatorRotator_NativeFunction, "A");
        EqualEqual_RotatorRotator_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_RotatorRotator_NativeFunction, "B");
        EqualEqual_RotatorRotator_ErrorTolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_RotatorRotator_NativeFunction, "ErrorTolerance");
        EqualEqual_RotatorRotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_RotatorRotator_NativeFunction, "ReturnValue");
        EqualEqual_QuatQuat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_QuatQuat");
        EqualEqual_QuatQuat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_QuatQuat_NativeFunction);
        EqualEqual_QuatQuat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_QuatQuat_NativeFunction, "A");
        EqualEqual_QuatQuat_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_QuatQuat_NativeFunction, "B");
        EqualEqual_QuatQuat_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_QuatQuat_NativeFunction, "Tolerance");
        EqualEqual_QuatQuat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_QuatQuat_NativeFunction, "ReturnValue");
        EqualEqual_ObjectObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_ObjectObject");
        EqualEqual_ObjectObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_ObjectObject_NativeFunction);
        EqualEqual_ObjectObject_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_ObjectObject_NativeFunction, "A");
        EqualEqual_ObjectObject_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_ObjectObject_NativeFunction, "B");
        EqualEqual_ObjectObject_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_ObjectObject_NativeFunction, "ReturnValue");
        EqualEqual_NameName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_NameName");
        EqualEqual_NameName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_NameName_NativeFunction);
        EqualEqual_NameName_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_NameName_NativeFunction, "A");
        EqualEqual_NameName_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_NameName_NativeFunction, "B");
        EqualEqual_NameName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_NameName_NativeFunction, "ReturnValue");
        EqualEqual_MatrixMatrix_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_MatrixMatrix");
        EqualEqual_MatrixMatrix_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_MatrixMatrix_NativeFunction);
        EqualEqual_MatrixMatrix_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_MatrixMatrix_NativeFunction, "A");
        EqualEqual_MatrixMatrix_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_MatrixMatrix_NativeFunction, "B");
        EqualEqual_MatrixMatrix_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_MatrixMatrix_NativeFunction, "Tolerance");
        EqualEqual_MatrixMatrix_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_MatrixMatrix_NativeFunction, "ReturnValue");
        EqualEqual_LinearColorLinearColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_LinearColorLinearColor");
        EqualEqual_LinearColorLinearColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_LinearColorLinearColor_NativeFunction);
        EqualEqual_LinearColorLinearColor_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_LinearColorLinearColor_NativeFunction, "A");
        EqualEqual_LinearColorLinearColor_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_LinearColorLinearColor_NativeFunction, "B");
        EqualEqual_LinearColorLinearColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_LinearColorLinearColor_NativeFunction, "ReturnValue");
        EqualEqual_IntInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_IntInt");
        EqualEqual_IntInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_IntInt_NativeFunction);
        EqualEqual_IntInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_IntInt_NativeFunction, "A");
        EqualEqual_IntInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_IntInt_NativeFunction, "B");
        EqualEqual_IntInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_IntInt_NativeFunction, "ReturnValue");
        EqualEqual_Int64Int64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_Int64Int64");
        EqualEqual_Int64Int64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_Int64Int64_NativeFunction);
        EqualEqual_Int64Int64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_Int64Int64_NativeFunction, "A");
        EqualEqual_Int64Int64_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_Int64Int64_NativeFunction, "B");
        EqualEqual_Int64Int64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_Int64Int64_NativeFunction, "ReturnValue");
        EqualEqual_DoubleDouble_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_DoubleDouble");
        EqualEqual_DoubleDouble_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_DoubleDouble_NativeFunction);
        EqualEqual_DoubleDouble_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_DoubleDouble_NativeFunction, "A");
        EqualEqual_DoubleDouble_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_DoubleDouble_NativeFunction, "B");
        EqualEqual_DoubleDouble_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_DoubleDouble_NativeFunction, "ReturnValue");
        EqualEqual_DateTimeDateTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_DateTimeDateTime");
        EqualEqual_DateTimeDateTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_DateTimeDateTime_NativeFunction);
        EqualEqual_DateTimeDateTime_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_DateTimeDateTime_NativeFunction, "A");
        EqualEqual_DateTimeDateTime_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_DateTimeDateTime_NativeFunction, "B");
        EqualEqual_DateTimeDateTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_DateTimeDateTime_NativeFunction, "ReturnValue");
        EqualEqual_ClassClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_ClassClass");
        EqualEqual_ClassClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_ClassClass_NativeFunction);
        EqualEqual_ClassClass_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_ClassClass_NativeFunction, "A");
        EqualEqual_ClassClass_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_ClassClass_NativeFunction, "B");
        EqualEqual_ClassClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_ClassClass_NativeFunction, "ReturnValue");
        EqualEqual_ByteByte_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_ByteByte");
        EqualEqual_ByteByte_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_ByteByte_NativeFunction);
        EqualEqual_ByteByte_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_ByteByte_NativeFunction, "A");
        EqualEqual_ByteByte_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_ByteByte_NativeFunction, "B");
        EqualEqual_ByteByte_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_ByteByte_NativeFunction, "ReturnValue");
        EqualEqual_BoolBool_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_BoolBool");
        EqualEqual_BoolBool_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_BoolBool_NativeFunction);
        EqualEqual_BoolBool_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_BoolBool_NativeFunction, "A");
        EqualEqual_BoolBool_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_BoolBool_NativeFunction, "B");
        EqualEqual_BoolBool_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_BoolBool_NativeFunction, "ReturnValue");
        Equal_IntPointIntPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Equal_IntPointIntPoint");
        Equal_IntPointIntPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Equal_IntPointIntPoint_NativeFunction);
        Equal_IntPointIntPoint_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Equal_IntPointIntPoint_NativeFunction, "A");
        Equal_IntPointIntPoint_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Equal_IntPointIntPoint_NativeFunction, "B");
        Equal_IntPointIntPoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Equal_IntPointIntPoint_NativeFunction, "ReturnValue");
        DynamicWeightedMovingAverage_FVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DynamicWeightedMovingAverage_FVector");
        DynamicWeightedMovingAverage_FVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DynamicWeightedMovingAverage_FVector_NativeFunction);
        DynamicWeightedMovingAverage_FVector_CurrentSample_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DynamicWeightedMovingAverage_FVector_NativeFunction, "CurrentSample");
        DynamicWeightedMovingAverage_FVector_PreviousSample_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DynamicWeightedMovingAverage_FVector_NativeFunction, "PreviousSample");
        DynamicWeightedMovingAverage_FVector_MaxDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DynamicWeightedMovingAverage_FVector_NativeFunction, "MaxDistance");
        DynamicWeightedMovingAverage_FVector_MinWeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DynamicWeightedMovingAverage_FVector_NativeFunction, "MinWeight");
        DynamicWeightedMovingAverage_FVector_MaxWeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DynamicWeightedMovingAverage_FVector_NativeFunction, "MaxWeight");
        DynamicWeightedMovingAverage_FVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DynamicWeightedMovingAverage_FVector_NativeFunction, "ReturnValue");
        DynamicWeightedMovingAverage_FRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DynamicWeightedMovingAverage_FRotator");
        DynamicWeightedMovingAverage_FRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DynamicWeightedMovingAverage_FRotator_NativeFunction);
        DynamicWeightedMovingAverage_FRotator_CurrentSample_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DynamicWeightedMovingAverage_FRotator_NativeFunction, "CurrentSample");
        DynamicWeightedMovingAverage_FRotator_PreviousSample_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DynamicWeightedMovingAverage_FRotator_NativeFunction, "PreviousSample");
        DynamicWeightedMovingAverage_FRotator_MaxDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DynamicWeightedMovingAverage_FRotator_NativeFunction, "MaxDistance");
        DynamicWeightedMovingAverage_FRotator_MinWeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DynamicWeightedMovingAverage_FRotator_NativeFunction, "MinWeight");
        DynamicWeightedMovingAverage_FRotator_MaxWeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DynamicWeightedMovingAverage_FRotator_NativeFunction, "MaxWeight");
        DynamicWeightedMovingAverage_FRotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DynamicWeightedMovingAverage_FRotator_NativeFunction, "ReturnValue");
        DynamicWeightedMovingAverage_Float_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DynamicWeightedMovingAverage_Float");
        DynamicWeightedMovingAverage_Float_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DynamicWeightedMovingAverage_Float_NativeFunction);
        DynamicWeightedMovingAverage_Float_CurrentSample_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DynamicWeightedMovingAverage_Float_NativeFunction, "CurrentSample");
        DynamicWeightedMovingAverage_Float_PreviousSample_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DynamicWeightedMovingAverage_Float_NativeFunction, "PreviousSample");
        DynamicWeightedMovingAverage_Float_MaxDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DynamicWeightedMovingAverage_Float_NativeFunction, "MaxDistance");
        DynamicWeightedMovingAverage_Float_MinWeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DynamicWeightedMovingAverage_Float_NativeFunction, "MinWeight");
        DynamicWeightedMovingAverage_Float_MaxWeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DynamicWeightedMovingAverage_Float_NativeFunction, "MaxWeight");
        DynamicWeightedMovingAverage_Float_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DynamicWeightedMovingAverage_Float_NativeFunction, "ReturnValue");
        DotProduct2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DotProduct2D");
        DotProduct2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DotProduct2D_NativeFunction);
        DotProduct2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DotProduct2D_NativeFunction, "A");
        DotProduct2D_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DotProduct2D_NativeFunction, "B");
        DotProduct2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DotProduct2D_NativeFunction, "ReturnValue");
        Dot_VectorVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Dot_VectorVector");
        Dot_VectorVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Dot_VectorVector_NativeFunction);
        Dot_VectorVector_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Dot_VectorVector_NativeFunction, "A");
        Dot_VectorVector_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Dot_VectorVector_NativeFunction, "B");
        Dot_VectorVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Dot_VectorVector_NativeFunction, "ReturnValue");
        Divide_VectorVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Divide_VectorVector");
        Divide_VectorVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Divide_VectorVector_NativeFunction);
        Divide_VectorVector_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_VectorVector_NativeFunction, "A");
        Divide_VectorVector_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_VectorVector_NativeFunction, "B");
        Divide_VectorVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_VectorVector_NativeFunction, "ReturnValue");
        Divide_VectorInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Divide_VectorInt");
        Divide_VectorInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Divide_VectorInt_NativeFunction);
        Divide_VectorInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_VectorInt_NativeFunction, "A");
        Divide_VectorInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_VectorInt_NativeFunction, "B");
        Divide_VectorInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_VectorInt_NativeFunction, "ReturnValue");
        Divide_VectorFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Divide_VectorFloat");
        Divide_VectorFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Divide_VectorFloat_NativeFunction);
        Divide_VectorFloat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_VectorFloat_NativeFunction, "A");
        Divide_VectorFloat_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_VectorFloat_NativeFunction, "B");
        Divide_VectorFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_VectorFloat_NativeFunction, "ReturnValue");
        Divide_Vector2DVector2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Divide_Vector2DVector2D");
        Divide_Vector2DVector2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Divide_Vector2DVector2D_NativeFunction);
        Divide_Vector2DVector2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_Vector2DVector2D_NativeFunction, "A");
        Divide_Vector2DVector2D_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_Vector2DVector2D_NativeFunction, "B");
        Divide_Vector2DVector2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_Vector2DVector2D_NativeFunction, "ReturnValue");
        Divide_Vector2DFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Divide_Vector2DFloat");
        Divide_Vector2DFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Divide_Vector2DFloat_NativeFunction);
        Divide_Vector2DFloat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_Vector2DFloat_NativeFunction, "A");
        Divide_Vector2DFloat_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_Vector2DFloat_NativeFunction, "B");
        Divide_Vector2DFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_Vector2DFloat_NativeFunction, "ReturnValue");
        Divide_TimespanFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Divide_TimespanFloat");
        Divide_TimespanFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Divide_TimespanFloat_NativeFunction);
        Divide_TimespanFloat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_TimespanFloat_NativeFunction, "A");
        Divide_TimespanFloat_Scalar_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_TimespanFloat_NativeFunction, "Scalar");
        Divide_TimespanFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_TimespanFloat_NativeFunction, "ReturnValue");
        Divide_LinearColorLinearColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Divide_LinearColorLinearColor");
        Divide_LinearColorLinearColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Divide_LinearColorLinearColor_NativeFunction);
        Divide_LinearColorLinearColor_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_LinearColorLinearColor_NativeFunction, "A");
        Divide_LinearColorLinearColor_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_LinearColorLinearColor_NativeFunction, "B");
        Divide_LinearColorLinearColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_LinearColorLinearColor_NativeFunction, "ReturnValue");
        Divide_IntPointIntPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Divide_IntPointIntPoint");
        Divide_IntPointIntPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Divide_IntPointIntPoint_NativeFunction);
        Divide_IntPointIntPoint_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_IntPointIntPoint_NativeFunction, "A");
        Divide_IntPointIntPoint_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_IntPointIntPoint_NativeFunction, "B");
        Divide_IntPointIntPoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_IntPointIntPoint_NativeFunction, "ReturnValue");
        Divide_IntPointInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Divide_IntPointInt");
        Divide_IntPointInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Divide_IntPointInt_NativeFunction);
        Divide_IntPointInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_IntPointInt_NativeFunction, "A");
        Divide_IntPointInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_IntPointInt_NativeFunction, "B");
        Divide_IntPointInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_IntPointInt_NativeFunction, "ReturnValue");
        Divide_IntInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Divide_IntInt");
        Divide_IntInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Divide_IntInt_NativeFunction);
        Divide_IntInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_IntInt_NativeFunction, "A");
        Divide_IntInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_IntInt_NativeFunction, "B");
        Divide_IntInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_IntInt_NativeFunction, "ReturnValue");
        Divide_Int64Int64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Divide_Int64Int64");
        Divide_Int64Int64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Divide_Int64Int64_NativeFunction);
        Divide_Int64Int64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_Int64Int64_NativeFunction, "A");
        Divide_Int64Int64_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_Int64Int64_NativeFunction, "B");
        Divide_Int64Int64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_Int64Int64_NativeFunction, "ReturnValue");
        Divide_DoubleDouble_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Divide_DoubleDouble");
        Divide_DoubleDouble_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Divide_DoubleDouble_NativeFunction);
        Divide_DoubleDouble_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_DoubleDouble_NativeFunction, "A");
        Divide_DoubleDouble_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_DoubleDouble_NativeFunction, "B");
        Divide_DoubleDouble_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_DoubleDouble_NativeFunction, "ReturnValue");
        Divide_ByteByte_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Divide_ByteByte");
        Divide_ByteByte_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Divide_ByteByte_NativeFunction);
        Divide_ByteByte_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_ByteByte_NativeFunction, "A");
        Divide_ByteByte_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_ByteByte_NativeFunction, "B");
        Divide_ByteByte_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Divide_ByteByte_NativeFunction, "ReturnValue");
        DistanceSquared2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DistanceSquared2D");
        DistanceSquared2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DistanceSquared2D_NativeFunction);
        DistanceSquared2D_V1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DistanceSquared2D_NativeFunction, "V1");
        DistanceSquared2D_V2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DistanceSquared2D_NativeFunction, "V2");
        DistanceSquared2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DistanceSquared2D_NativeFunction, "ReturnValue");
        Distance2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Distance2D");
        Distance2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Distance2D_NativeFunction);
        Distance2D_V1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Distance2D_NativeFunction, "V1");
        Distance2D_V2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Distance2D_NativeFunction, "V2");
        Distance2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Distance2D_NativeFunction, "ReturnValue");
        DegTan_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DegTan");
        DegTan_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DegTan_NativeFunction);
        DegTan_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DegTan_NativeFunction, "A");
        DegTan_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DegTan_NativeFunction, "ReturnValue");
        DegSin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DegSin");
        DegSin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DegSin_NativeFunction);
        DegSin_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DegSin_NativeFunction, "A");
        DegSin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DegSin_NativeFunction, "ReturnValue");
        DegreesToRadians_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DegreesToRadians");
        DegreesToRadians_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DegreesToRadians_NativeFunction);
        DegreesToRadians_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DegreesToRadians_NativeFunction, "A");
        DegreesToRadians_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DegreesToRadians_NativeFunction, "ReturnValue");
        DegCos_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DegCos");
        DegCos_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DegCos_NativeFunction);
        DegCos_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DegCos_NativeFunction, "A");
        DegCos_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DegCos_NativeFunction, "ReturnValue");
        DegAtan2_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DegAtan2");
        DegAtan2_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DegAtan2_NativeFunction);
        DegAtan2_Y_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DegAtan2_NativeFunction, "Y");
        DegAtan2_X_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DegAtan2_NativeFunction, "X");
        DegAtan2_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DegAtan2_NativeFunction, "ReturnValue");
        DegAtan_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DegAtan");
        DegAtan_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DegAtan_NativeFunction);
        DegAtan_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DegAtan_NativeFunction, "A");
        DegAtan_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DegAtan_NativeFunction, "ReturnValue");
        DegAsin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DegAsin");
        DegAsin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DegAsin_NativeFunction);
        DegAsin_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DegAsin_NativeFunction, "A");
        DegAsin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DegAsin_NativeFunction, "ReturnValue");
        DegAcos_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DegAcos");
        DegAcos_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DegAcos_NativeFunction);
        DegAcos_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DegAcos_NativeFunction, "A");
        DegAcos_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DegAcos_NativeFunction, "ReturnValue");
        DaysInYear_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DaysInYear");
        DaysInYear_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DaysInYear_NativeFunction);
        DaysInYear_Year_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DaysInYear_NativeFunction, "Year");
        DaysInYear_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DaysInYear_NativeFunction, "ReturnValue");
        DaysInMonth_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DaysInMonth");
        DaysInMonth_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DaysInMonth_NativeFunction);
        DaysInMonth_Year_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DaysInMonth_NativeFunction, "Year");
        DaysInMonth_Month_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DaysInMonth_NativeFunction, "Month");
        DaysInMonth_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DaysInMonth_NativeFunction, "ReturnValue");
        DateTimeMinValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DateTimeMinValue");
        DateTimeMinValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DateTimeMinValue_NativeFunction);
        DateTimeMinValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DateTimeMinValue_NativeFunction, "ReturnValue");
        DateTimeMaxValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DateTimeMaxValue");
        DateTimeMaxValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DateTimeMaxValue_NativeFunction);
        DateTimeMaxValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DateTimeMaxValue_NativeFunction, "ReturnValue");
        DateTimeFromString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DateTimeFromString");
        DateTimeFromString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DateTimeFromString_NativeFunction);
        DateTimeFromString_DateTimeString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DateTimeFromString_NativeFunction, "DateTimeString");
        DateTimeFromString_Result_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DateTimeFromString_NativeFunction, "Result");
        DateTimeFromString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DateTimeFromString_NativeFunction, "ReturnValue");
        DateTimeFromIsoString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DateTimeFromIsoString");
        DateTimeFromIsoString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DateTimeFromIsoString_NativeFunction);
        DateTimeFromIsoString_IsoString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DateTimeFromIsoString_NativeFunction, "IsoString");
        DateTimeFromIsoString_Result_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DateTimeFromIsoString_NativeFunction, "Result");
        DateTimeFromIsoString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DateTimeFromIsoString_NativeFunction, "ReturnValue");
        CrossProduct2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CrossProduct2D");
        CrossProduct2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CrossProduct2D_NativeFunction);
        CrossProduct2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CrossProduct2D_NativeFunction, "A");
        CrossProduct2D_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CrossProduct2D_NativeFunction, "B");
        CrossProduct2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CrossProduct2D_NativeFunction, "ReturnValue");
        Cross_VectorVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Cross_VectorVector");
        Cross_VectorVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Cross_VectorVector_NativeFunction);
        Cross_VectorVector_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Cross_VectorVector_NativeFunction, "A");
        Cross_VectorVector_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Cross_VectorVector_NativeFunction, "B");
        Cross_VectorVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Cross_VectorVector_NativeFunction, "ReturnValue");
        CreateVectorFromYawPitch_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateVectorFromYawPitch");
        CreateVectorFromYawPitch_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateVectorFromYawPitch_NativeFunction);
        CreateVectorFromYawPitch_Yaw_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateVectorFromYawPitch_NativeFunction, "Yaw");
        CreateVectorFromYawPitch_Pitch_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateVectorFromYawPitch_NativeFunction, "Pitch");
        CreateVectorFromYawPitch_Length_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateVectorFromYawPitch_NativeFunction, "Length");
        CreateVectorFromYawPitch_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateVectorFromYawPitch_NativeFunction, "ReturnValue");
        Cos_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Cos");
        Cos_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Cos_NativeFunction);
        Cos_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Cos_NativeFunction, "A");
        Cos_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Cos_NativeFunction, "ReturnValue");
        Conv_VectorToVector2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_VectorToVector2D");
        Conv_VectorToVector2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_VectorToVector2D_NativeFunction);
        Conv_VectorToVector2D_InVector_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_VectorToVector2D_NativeFunction, "InVector");
        Conv_VectorToVector2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_VectorToVector2D_NativeFunction, "ReturnValue");
        Conv_VectorToTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_VectorToTransform");
        Conv_VectorToTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_VectorToTransform_NativeFunction);
        Conv_VectorToTransform_InLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_VectorToTransform_NativeFunction, "InLocation");
        Conv_VectorToTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_VectorToTransform_NativeFunction, "ReturnValue");
        Conv_VectorToRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_VectorToRotator");
        Conv_VectorToRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_VectorToRotator_NativeFunction);
        Conv_VectorToRotator_InVec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_VectorToRotator_NativeFunction, "InVec");
        Conv_VectorToRotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_VectorToRotator_NativeFunction, "ReturnValue");
        Conv_VectorToQuaternion_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_VectorToQuaternion");
        Conv_VectorToQuaternion_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_VectorToQuaternion_NativeFunction);
        Conv_VectorToQuaternion_InVec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_VectorToQuaternion_NativeFunction, "InVec");
        Conv_VectorToQuaternion_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_VectorToQuaternion_NativeFunction, "ReturnValue");
        Conv_VectorToLinearColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_VectorToLinearColor");
        Conv_VectorToLinearColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_VectorToLinearColor_NativeFunction);
        Conv_VectorToLinearColor_InVec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_VectorToLinearColor_NativeFunction, "InVec");
        Conv_VectorToLinearColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_VectorToLinearColor_NativeFunction, "ReturnValue");
        Conv_Vector4ToVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_Vector4ToVector");
        Conv_Vector4ToVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_Vector4ToVector_NativeFunction);
        Conv_Vector4ToVector_InVector4_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Vector4ToVector_NativeFunction, "InVector4");
        Conv_Vector4ToVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Vector4ToVector_NativeFunction, "ReturnValue");
        Conv_Vector4ToRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_Vector4ToRotator");
        Conv_Vector4ToRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_Vector4ToRotator_NativeFunction);
        Conv_Vector4ToRotator_InVec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Vector4ToRotator_NativeFunction, "InVec");
        Conv_Vector4ToRotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Vector4ToRotator_NativeFunction, "ReturnValue");
        Conv_Vector4ToQuaternion_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_Vector4ToQuaternion");
        Conv_Vector4ToQuaternion_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_Vector4ToQuaternion_NativeFunction);
        Conv_Vector4ToQuaternion_InVec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Vector4ToQuaternion_NativeFunction, "InVec");
        Conv_Vector4ToQuaternion_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Vector4ToQuaternion_NativeFunction, "ReturnValue");
        Conv_Vector2DToVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_Vector2DToVector");
        Conv_Vector2DToVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_Vector2DToVector_NativeFunction);
        Conv_Vector2DToVector_InVector2D_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Vector2DToVector_NativeFunction, "InVector2D");
        Conv_Vector2DToVector_Z_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Vector2DToVector_NativeFunction, "Z");
        Conv_Vector2DToVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Vector2DToVector_NativeFunction, "ReturnValue");
        Conv_Vector2DToIntPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_Vector2DToIntPoint");
        Conv_Vector2DToIntPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_Vector2DToIntPoint_NativeFunction);
        Conv_Vector2DToIntPoint_InVector2D_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Vector2DToIntPoint_NativeFunction, "InVector2D");
        Conv_Vector2DToIntPoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Vector2DToIntPoint_NativeFunction, "ReturnValue");
        Conv_TransformToMatrix_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_TransformToMatrix");
        Conv_TransformToMatrix_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_TransformToMatrix_NativeFunction);
        Conv_TransformToMatrix_Transform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_TransformToMatrix_NativeFunction, "Transform");
        Conv_TransformToMatrix_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_TransformToMatrix_NativeFunction, "ReturnValue");
        Conv_RotatorToVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_RotatorToVector");
        Conv_RotatorToVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_RotatorToVector_NativeFunction);
        Conv_RotatorToVector_InRot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_RotatorToVector_NativeFunction, "InRot");
        Conv_RotatorToVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_RotatorToVector_NativeFunction, "ReturnValue");
        Conv_RotatorToTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_RotatorToTransform");
        Conv_RotatorToTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_RotatorToTransform_NativeFunction);
        Conv_RotatorToTransform_InRotator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_RotatorToTransform_NativeFunction, "InRotator");
        Conv_RotatorToTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_RotatorToTransform_NativeFunction, "ReturnValue");
        Conv_RotatorToQuaternion_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_RotatorToQuaternion");
        Conv_RotatorToQuaternion_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_RotatorToQuaternion_NativeFunction);
        Conv_RotatorToQuaternion_InRot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_RotatorToQuaternion_NativeFunction, "InRot");
        Conv_RotatorToQuaternion_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_RotatorToQuaternion_NativeFunction, "ReturnValue");
        Conv_MatrixToTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_MatrixToTransform");
        Conv_MatrixToTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_MatrixToTransform_NativeFunction);
        Conv_MatrixToTransform_InMatrix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_MatrixToTransform_NativeFunction, "InMatrix");
        Conv_MatrixToTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_MatrixToTransform_NativeFunction, "ReturnValue");
        Conv_MatrixToRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_MatrixToRotator");
        Conv_MatrixToRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_MatrixToRotator_NativeFunction);
        Conv_MatrixToRotator_InMatrix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_MatrixToRotator_NativeFunction, "InMatrix");
        Conv_MatrixToRotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_MatrixToRotator_NativeFunction, "ReturnValue");
        Conv_LinearColorToVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_LinearColorToVector");
        Conv_LinearColorToVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_LinearColorToVector_NativeFunction);
        Conv_LinearColorToVector_InLinearColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_LinearColorToVector_NativeFunction, "InLinearColor");
        Conv_LinearColorToVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_LinearColorToVector_NativeFunction, "ReturnValue");
        Conv_LinearColorToColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_LinearColorToColor");
        Conv_LinearColorToColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_LinearColorToColor_NativeFunction);
        Conv_LinearColorToColor_InLinearColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_LinearColorToColor_NativeFunction, "InLinearColor");
        Conv_LinearColorToColor_InUseSRGB_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_LinearColorToColor_NativeFunction, "InUseSRGB");
        Conv_LinearColorToColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_LinearColorToColor_NativeFunction, "ReturnValue");
        Conv_IntVectorToVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_IntVectorToVector");
        Conv_IntVectorToVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_IntVectorToVector_NativeFunction);
        Conv_IntVectorToVector_InIntVector_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntVectorToVector_NativeFunction, "InIntVector");
        Conv_IntVectorToVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntVectorToVector_NativeFunction, "ReturnValue");
        Conv_IntToVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_IntToVector");
        Conv_IntToVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_IntToVector_NativeFunction);
        Conv_IntToVector_InInt_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntToVector_NativeFunction, "InInt");
        Conv_IntToVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntToVector_NativeFunction, "ReturnValue");
        Conv_IntToIntVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_IntToIntVector");
        Conv_IntToIntVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_IntToIntVector_NativeFunction);
        Conv_IntToIntVector_InInt_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntToIntVector_NativeFunction, "InInt");
        Conv_IntToIntVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntToIntVector_NativeFunction, "ReturnValue");
        Conv_IntToInt64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_IntToInt64");
        Conv_IntToInt64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_IntToInt64_NativeFunction);
        Conv_IntToInt64_InInt_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntToInt64_NativeFunction, "InInt");
        Conv_IntToInt64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntToInt64_NativeFunction, "ReturnValue");
        Conv_IntToDouble_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_IntToDouble");
        Conv_IntToDouble_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_IntToDouble_NativeFunction);
        Conv_IntToDouble_InInt_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntToDouble_NativeFunction, "InInt");
        Conv_IntToDouble_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntToDouble_NativeFunction, "ReturnValue");
        Conv_IntToByte_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_IntToByte");
        Conv_IntToByte_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_IntToByte_NativeFunction);
        Conv_IntToByte_InInt_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntToByte_NativeFunction, "InInt");
        Conv_IntToByte_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntToByte_NativeFunction, "ReturnValue");
        Conv_IntToBool_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_IntToBool");
        Conv_IntToBool_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_IntToBool_NativeFunction);
        Conv_IntToBool_InInt_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntToBool_NativeFunction, "InInt");
        Conv_IntToBool_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntToBool_NativeFunction, "ReturnValue");
        Conv_IntPointToVector2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_IntPointToVector2D");
        Conv_IntPointToVector2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_IntPointToVector2D_NativeFunction);
        Conv_IntPointToVector2D_InIntPoint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntPointToVector2D_NativeFunction, "InIntPoint");
        Conv_IntPointToVector2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntPointToVector2D_NativeFunction, "ReturnValue");
        Conv_Int64ToInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_Int64ToInt");
        Conv_Int64ToInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_Int64ToInt_NativeFunction);
        Conv_Int64ToInt_InInt_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Int64ToInt_NativeFunction, "InInt");
        Conv_Int64ToInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Int64ToInt_NativeFunction, "ReturnValue");
        Conv_Int64ToDouble_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_Int64ToDouble");
        Conv_Int64ToDouble_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_Int64ToDouble_NativeFunction);
        Conv_Int64ToDouble_InInt_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Int64ToDouble_NativeFunction, "InInt");
        Conv_Int64ToDouble_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Int64ToDouble_NativeFunction, "ReturnValue");
        Conv_Int64ToByte_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_Int64ToByte");
        Conv_Int64ToByte_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_Int64ToByte_NativeFunction);
        Conv_Int64ToByte_InInt_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Int64ToByte_NativeFunction, "InInt");
        Conv_Int64ToByte_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Int64ToByte_NativeFunction, "ReturnValue");
        Conv_DoubleToVector2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_DoubleToVector2D");
        Conv_DoubleToVector2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_DoubleToVector2D_NativeFunction);
        Conv_DoubleToVector2D_InDouble_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_DoubleToVector2D_NativeFunction, "InDouble");
        Conv_DoubleToVector2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_DoubleToVector2D_NativeFunction, "ReturnValue");
        Conv_DoubleToVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_DoubleToVector");
        Conv_DoubleToVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_DoubleToVector_NativeFunction);
        Conv_DoubleToVector_InDouble_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_DoubleToVector_NativeFunction, "InDouble");
        Conv_DoubleToVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_DoubleToVector_NativeFunction, "ReturnValue");
        Conv_DoubleToLinearColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_DoubleToLinearColor");
        Conv_DoubleToLinearColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_DoubleToLinearColor_NativeFunction);
        Conv_DoubleToLinearColor_InDouble_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_DoubleToLinearColor_NativeFunction, "InDouble");
        Conv_DoubleToLinearColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_DoubleToLinearColor_NativeFunction, "ReturnValue");
        Conv_DoubleToInt64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_DoubleToInt64");
        Conv_DoubleToInt64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_DoubleToInt64_NativeFunction);
        Conv_DoubleToInt64_InDouble_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_DoubleToInt64_NativeFunction, "InDouble");
        Conv_DoubleToInt64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_DoubleToInt64_NativeFunction, "ReturnValue");
        Conv_ColorToLinearColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_ColorToLinearColor");
        Conv_ColorToLinearColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_ColorToLinearColor_NativeFunction);
        Conv_ColorToLinearColor_InColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_ColorToLinearColor_NativeFunction, "InColor");
        Conv_ColorToLinearColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_ColorToLinearColor_NativeFunction, "ReturnValue");
        Conv_ByteToInt64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_ByteToInt64");
        Conv_ByteToInt64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_ByteToInt64_NativeFunction);
        Conv_ByteToInt64_InByte_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_ByteToInt64_NativeFunction, "InByte");
        Conv_ByteToInt64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_ByteToInt64_NativeFunction, "ReturnValue");
        Conv_ByteToInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_ByteToInt");
        Conv_ByteToInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_ByteToInt_NativeFunction);
        Conv_ByteToInt_InByte_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_ByteToInt_NativeFunction, "InByte");
        Conv_ByteToInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_ByteToInt_NativeFunction, "ReturnValue");
        Conv_ByteToDouble_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_ByteToDouble");
        Conv_ByteToDouble_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_ByteToDouble_NativeFunction);
        Conv_ByteToDouble_InByte_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_ByteToDouble_NativeFunction, "InByte");
        Conv_ByteToDouble_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_ByteToDouble_NativeFunction, "ReturnValue");
        Conv_BoolToInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_BoolToInt");
        Conv_BoolToInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_BoolToInt_NativeFunction);
        Conv_BoolToInt_InBool_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_BoolToInt_NativeFunction, "InBool");
        Conv_BoolToInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_BoolToInt_NativeFunction, "ReturnValue");
        Conv_BoolToDouble_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_BoolToDouble");
        Conv_BoolToDouble_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_BoolToDouble_NativeFunction);
        Conv_BoolToDouble_InBool_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_BoolToDouble_NativeFunction, "InBool");
        Conv_BoolToDouble_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_BoolToDouble_NativeFunction, "ReturnValue");
        Conv_BoolToByte_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_BoolToByte");
        Conv_BoolToByte_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_BoolToByte_NativeFunction);
        Conv_BoolToByte_InBool_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_BoolToByte_NativeFunction, "InBool");
        Conv_BoolToByte_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_BoolToByte_NativeFunction, "ReturnValue");
        ComposeTransforms_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ComposeTransforms");
        ComposeTransforms_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ComposeTransforms_NativeFunction);
        ComposeTransforms_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComposeTransforms_NativeFunction, "A");
        ComposeTransforms_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComposeTransforms_NativeFunction, "B");
        ComposeTransforms_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComposeTransforms_NativeFunction, "ReturnValue");
        ComposeRotators_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ComposeRotators");
        ComposeRotators_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ComposeRotators_NativeFunction);
        ComposeRotators_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComposeRotators_NativeFunction, "A");
        ComposeRotators_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComposeRotators_NativeFunction, "B");
        ComposeRotators_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComposeRotators_NativeFunction, "ReturnValue");
        ClassIsChildOf_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClassIsChildOf");
        ClassIsChildOf_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClassIsChildOf_NativeFunction);
        ClassIsChildOf_TestClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClassIsChildOf_NativeFunction, "TestClass");
        ClassIsChildOf_ParentClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClassIsChildOf_NativeFunction, "ParentClass");
        ClassIsChildOf_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClassIsChildOf_NativeFunction, "ReturnValue");
        ClampVectorSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClampVectorSize");
        ClampVectorSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClampVectorSize_NativeFunction);
        ClampVectorSize_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClampVectorSize_NativeFunction, "A");
        ClampVectorSize_Min_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClampVectorSize_NativeFunction, "Min");
        ClampVectorSize_Max_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClampVectorSize_NativeFunction, "Max");
        ClampVectorSize_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClampVectorSize_NativeFunction, "ReturnValue");
        ClampInt64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClampInt64");
        ClampInt64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClampInt64_NativeFunction);
        ClampInt64_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClampInt64_NativeFunction, "Value");
        ClampInt64_Min_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClampInt64_NativeFunction, "Min");
        ClampInt64_Max_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClampInt64_NativeFunction, "Max");
        ClampInt64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClampInt64_NativeFunction, "ReturnValue");
        ClampAxis_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClampAxis");
        ClampAxis_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClampAxis_NativeFunction);
        ClampAxis_Angle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClampAxis_NativeFunction, "Angle");
        ClampAxis_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClampAxis_NativeFunction, "ReturnValue");
        ClampAxes2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClampAxes2D");
        ClampAxes2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClampAxes2D_NativeFunction);
        ClampAxes2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClampAxes2D_NativeFunction, "A");
        ClampAxes2D_MinAxisVal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClampAxes2D_NativeFunction, "MinAxisVal");
        ClampAxes2D_MaxAxisVal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClampAxes2D_NativeFunction, "MaxAxisVal");
        ClampAxes2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClampAxes2D_NativeFunction, "ReturnValue");
        ClampAngle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClampAngle");
        ClampAngle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClampAngle_NativeFunction);
        ClampAngle_AngleDegrees_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClampAngle_NativeFunction, "AngleDegrees");
        ClampAngle_MinAngleDegrees_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClampAngle_NativeFunction, "MinAngleDegrees");
        ClampAngle_MaxAngleDegrees_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClampAngle_NativeFunction, "MaxAngleDegrees");
        ClampAngle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClampAngle_NativeFunction, "ReturnValue");
        Clamp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Clamp");
        Clamp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Clamp_NativeFunction);
        Clamp_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Clamp_NativeFunction, "Value");
        Clamp_Min_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Clamp_NativeFunction, "Min");
        Clamp_Max_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Clamp_NativeFunction, "Max");
        Clamp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Clamp_NativeFunction, "ReturnValue");
        CInterpTo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CInterpTo");
        CInterpTo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CInterpTo_NativeFunction);
        CInterpTo_Current_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CInterpTo_NativeFunction, "Current");
        CInterpTo_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CInterpTo_NativeFunction, "Target");
        CInterpTo_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CInterpTo_NativeFunction, "DeltaTime");
        CInterpTo_InterpSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CInterpTo_NativeFunction, "InterpSpeed");
        CInterpTo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CInterpTo_NativeFunction, "ReturnValue");
        BreakRotIntoAxes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BreakRotIntoAxes");
        BreakRotIntoAxes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BreakRotIntoAxes_NativeFunction);
        BreakRotIntoAxes_InRot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BreakRotIntoAxes_NativeFunction, "InRot");
        BreakRotIntoAxes_X_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BreakRotIntoAxes_NativeFunction, "X");
        BreakRotIntoAxes_Y_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BreakRotIntoAxes_NativeFunction, "Y");
        BreakRotIntoAxes_Z_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BreakRotIntoAxes_NativeFunction, "Z");
        BreakColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BreakColor");
        BreakColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BreakColor_NativeFunction);
        BreakColor_InColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BreakColor_NativeFunction, "InColor");
        BreakColor_R_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BreakColor_NativeFunction, "R");
        BreakColor_G_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BreakColor_NativeFunction, "G");
        BreakColor_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BreakColor_NativeFunction, "B");
        BreakColor_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BreakColor_NativeFunction, "A");
        BooleanXOR_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BooleanXOR");
        BooleanXOR_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BooleanXOR_NativeFunction);
        BooleanXOR_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BooleanXOR_NativeFunction, "A");
        BooleanXOR_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BooleanXOR_NativeFunction, "B");
        BooleanXOR_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BooleanXOR_NativeFunction, "ReturnValue");
        BooleanOR_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BooleanOR");
        BooleanOR_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BooleanOR_NativeFunction);
        BooleanOR_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BooleanOR_NativeFunction, "A");
        BooleanOR_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BooleanOR_NativeFunction, "B");
        BooleanOR_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BooleanOR_NativeFunction, "ReturnValue");
        BooleanNOR_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BooleanNOR");
        BooleanNOR_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BooleanNOR_NativeFunction);
        BooleanNOR_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BooleanNOR_NativeFunction, "A");
        BooleanNOR_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BooleanNOR_NativeFunction, "B");
        BooleanNOR_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BooleanNOR_NativeFunction, "ReturnValue");
        BooleanNAND_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BooleanNAND");
        BooleanNAND_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BooleanNAND_NativeFunction);
        BooleanNAND_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BooleanNAND_NativeFunction, "A");
        BooleanNAND_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BooleanNAND_NativeFunction, "B");
        BooleanNAND_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BooleanNAND_NativeFunction, "ReturnValue");
        BooleanAND_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BooleanAND");
        BooleanAND_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BooleanAND_NativeFunction);
        BooleanAND_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BooleanAND_NativeFunction, "A");
        BooleanAND_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BooleanAND_NativeFunction, "B");
        BooleanAND_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BooleanAND_NativeFunction, "ReturnValue");
        BMin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BMin");
        BMin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BMin_NativeFunction);
        BMin_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BMin_NativeFunction, "A");
        BMin_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BMin_NativeFunction, "B");
        BMin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BMin_NativeFunction, "ReturnValue");
        BMax_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BMax");
        BMax_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BMax_NativeFunction);
        BMax_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BMax_NativeFunction, "A");
        BMax_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BMax_NativeFunction, "B");
        BMax_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BMax_NativeFunction, "ReturnValue");
        AverageOfIntArray_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AverageOfIntArray");
        AverageOfIntArray_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AverageOfIntArray_NativeFunction);
        AverageOfIntArray_IntArray_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AverageOfIntArray_NativeFunction, "IntArray");
        AverageOfIntArray_IntArray_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(AverageOfIntArray_NativeFunction, "IntArray");
        AverageOfIntArray_AverageValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AverageOfIntArray_NativeFunction, "AverageValue");
        Atan2_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Atan2");
        Atan2_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Atan2_NativeFunction);
        Atan2_Y_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Atan2_NativeFunction, "Y");
        Atan2_X_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Atan2_NativeFunction, "X");
        Atan2_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Atan2_NativeFunction, "ReturnValue");
        Atan_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Atan");
        Atan_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Atan_NativeFunction);
        Atan_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Atan_NativeFunction, "A");
        Atan_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Atan_NativeFunction, "ReturnValue");
        Asin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Asin");
        Asin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Asin_NativeFunction);
        Asin_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Asin_NativeFunction, "A");
        Asin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Asin_NativeFunction, "ReturnValue");
        And_IntInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "And_IntInt");
        And_IntInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(And_IntInt_NativeFunction);
        And_IntInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(And_IntInt_NativeFunction, "A");
        And_IntInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(And_IntInt_NativeFunction, "B");
        And_IntInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(And_IntInt_NativeFunction, "ReturnValue");
        And_Int64Int64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "And_Int64Int64");
        And_Int64Int64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(And_Int64Int64_NativeFunction);
        And_Int64Int64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(And_Int64Int64_NativeFunction, "A");
        And_Int64Int64_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(And_Int64Int64_NativeFunction, "B");
        And_Int64Int64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(And_Int64Int64_NativeFunction, "ReturnValue");
        Add_VectorVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Add_VectorVector");
        Add_VectorVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Add_VectorVector_NativeFunction);
        Add_VectorVector_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_VectorVector_NativeFunction, "A");
        Add_VectorVector_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_VectorVector_NativeFunction, "B");
        Add_VectorVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_VectorVector_NativeFunction, "ReturnValue");
        Add_VectorInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Add_VectorInt");
        Add_VectorInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Add_VectorInt_NativeFunction);
        Add_VectorInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_VectorInt_NativeFunction, "A");
        Add_VectorInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_VectorInt_NativeFunction, "B");
        Add_VectorInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_VectorInt_NativeFunction, "ReturnValue");
        Add_VectorFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Add_VectorFloat");
        Add_VectorFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Add_VectorFloat_NativeFunction);
        Add_VectorFloat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_VectorFloat_NativeFunction, "A");
        Add_VectorFloat_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_VectorFloat_NativeFunction, "B");
        Add_VectorFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_VectorFloat_NativeFunction, "ReturnValue");
        Add_Vector2DVector2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Add_Vector2DVector2D");
        Add_Vector2DVector2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Add_Vector2DVector2D_NativeFunction);
        Add_Vector2DVector2D_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_Vector2DVector2D_NativeFunction, "A");
        Add_Vector2DVector2D_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_Vector2DVector2D_NativeFunction, "B");
        Add_Vector2DVector2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_Vector2DVector2D_NativeFunction, "ReturnValue");
        Add_Vector2DFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Add_Vector2DFloat");
        Add_Vector2DFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Add_Vector2DFloat_NativeFunction);
        Add_Vector2DFloat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_Vector2DFloat_NativeFunction, "A");
        Add_Vector2DFloat_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_Vector2DFloat_NativeFunction, "B");
        Add_Vector2DFloat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_Vector2DFloat_NativeFunction, "ReturnValue");
        Add_TimespanTimespan_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Add_TimespanTimespan");
        Add_TimespanTimespan_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Add_TimespanTimespan_NativeFunction);
        Add_TimespanTimespan_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_TimespanTimespan_NativeFunction, "A");
        Add_TimespanTimespan_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_TimespanTimespan_NativeFunction, "B");
        Add_TimespanTimespan_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_TimespanTimespan_NativeFunction, "ReturnValue");
        Add_QuatQuat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Add_QuatQuat");
        Add_QuatQuat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Add_QuatQuat_NativeFunction);
        Add_QuatQuat_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_QuatQuat_NativeFunction, "A");
        Add_QuatQuat_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_QuatQuat_NativeFunction, "B");
        Add_QuatQuat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_QuatQuat_NativeFunction, "ReturnValue");
        Add_MatrixMatrix_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Add_MatrixMatrix");
        Add_MatrixMatrix_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Add_MatrixMatrix_NativeFunction);
        Add_MatrixMatrix_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_MatrixMatrix_NativeFunction, "A");
        Add_MatrixMatrix_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_MatrixMatrix_NativeFunction, "B");
        Add_MatrixMatrix_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_MatrixMatrix_NativeFunction, "ReturnValue");
        Add_LinearColorLinearColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Add_LinearColorLinearColor");
        Add_LinearColorLinearColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Add_LinearColorLinearColor_NativeFunction);
        Add_LinearColorLinearColor_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_LinearColorLinearColor_NativeFunction, "A");
        Add_LinearColorLinearColor_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_LinearColorLinearColor_NativeFunction, "B");
        Add_LinearColorLinearColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_LinearColorLinearColor_NativeFunction, "ReturnValue");
        Add_IntPointIntPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Add_IntPointIntPoint");
        Add_IntPointIntPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Add_IntPointIntPoint_NativeFunction);
        Add_IntPointIntPoint_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_IntPointIntPoint_NativeFunction, "A");
        Add_IntPointIntPoint_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_IntPointIntPoint_NativeFunction, "B");
        Add_IntPointIntPoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_IntPointIntPoint_NativeFunction, "ReturnValue");
        Add_IntPointInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Add_IntPointInt");
        Add_IntPointInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Add_IntPointInt_NativeFunction);
        Add_IntPointInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_IntPointInt_NativeFunction, "A");
        Add_IntPointInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_IntPointInt_NativeFunction, "B");
        Add_IntPointInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_IntPointInt_NativeFunction, "ReturnValue");
        Add_IntInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Add_IntInt");
        Add_IntInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Add_IntInt_NativeFunction);
        Add_IntInt_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_IntInt_NativeFunction, "A");
        Add_IntInt_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_IntInt_NativeFunction, "B");
        Add_IntInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_IntInt_NativeFunction, "ReturnValue");
        Add_Int64Int64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Add_Int64Int64");
        Add_Int64Int64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Add_Int64Int64_NativeFunction);
        Add_Int64Int64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_Int64Int64_NativeFunction, "A");
        Add_Int64Int64_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_Int64Int64_NativeFunction, "B");
        Add_Int64Int64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_Int64Int64_NativeFunction, "ReturnValue");
        Add_DoubleDouble_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Add_DoubleDouble");
        Add_DoubleDouble_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Add_DoubleDouble_NativeFunction);
        Add_DoubleDouble_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_DoubleDouble_NativeFunction, "A");
        Add_DoubleDouble_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_DoubleDouble_NativeFunction, "B");
        Add_DoubleDouble_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_DoubleDouble_NativeFunction, "ReturnValue");
        Add_DateTimeTimespan_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Add_DateTimeTimespan");
        Add_DateTimeTimespan_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Add_DateTimeTimespan_NativeFunction);
        Add_DateTimeTimespan_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_DateTimeTimespan_NativeFunction, "A");
        Add_DateTimeTimespan_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_DateTimeTimespan_NativeFunction, "B");
        Add_DateTimeTimespan_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_DateTimeTimespan_NativeFunction, "ReturnValue");
        Add_DateTimeDateTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Add_DateTimeDateTime");
        Add_DateTimeDateTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Add_DateTimeDateTime_NativeFunction);
        Add_DateTimeDateTime_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_DateTimeDateTime_NativeFunction, "A");
        Add_DateTimeDateTime_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_DateTimeDateTime_NativeFunction, "B");
        Add_DateTimeDateTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_DateTimeDateTime_NativeFunction, "ReturnValue");
        Add_ByteByte_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Add_ByteByte");
        Add_ByteByte_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Add_ByteByte_NativeFunction);
        Add_ByteByte_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_ByteByte_NativeFunction, "A");
        Add_ByteByte_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_ByteByte_NativeFunction, "B");
        Add_ByteByte_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Add_ByteByte_NativeFunction, "ReturnValue");
        Acos_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Acos");
        Acos_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Acos_NativeFunction);
        Acos_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Acos_NativeFunction, "A");
        Acos_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Acos_NativeFunction, "ReturnValue");
        Abs_Int64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Abs_Int64");
        Abs_Int64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Abs_Int64_NativeFunction);
        Abs_Int64_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Abs_Int64_NativeFunction, "A");
        Abs_Int64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Abs_Int64_NativeFunction, "ReturnValue");
        Abs_Int_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Abs_Int");
        Abs_Int_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Abs_Int_NativeFunction);
        Abs_Int_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Abs_Int_NativeFunction, "A");
        Abs_Int_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Abs_Int_NativeFunction, "ReturnValue");
        Abs_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Abs");
        Abs_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Abs_NativeFunction);
        Abs_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Abs_NativeFunction, "A");
        Abs_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Abs_NativeFunction, "ReturnValue");
        
        
    }
    
    protected MathLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.KismetMathLibrary:Xor_IntInt
    static readonly IntPtr Xor_IntInt_NativeFunction;
    static readonly int Xor_IntInt_ParamsSize;
    static readonly int Xor_IntInt_A_Offset;
    static readonly int Xor_IntInt_B_Offset;
    static readonly int Xor_IntInt_ReturnValue_Offset;
    
    public static int Xor_IntInt(int a, int b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Xor_IntInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Xor_IntInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Xor_IntInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Xor_IntInt_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Xor_IntInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Xor_Int64Int64
    static readonly IntPtr Xor_Int64Int64_NativeFunction;
    static readonly int Xor_Int64Int64_ParamsSize;
    static readonly int Xor_Int64Int64_A_Offset;
    static readonly int Xor_Int64Int64_B_Offset;
    static readonly int Xor_Int64Int64_ReturnValue_Offset;
    
    public static long Xor_Int64Int64(long a, long b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Xor_Int64Int64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Xor_Int64Int64_A_Offset), 0, null, a);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Xor_Int64Int64_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Xor_Int64Int64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, Xor_Int64Int64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Wrap
    static readonly IntPtr Wrap_NativeFunction;
    static readonly int Wrap_ParamsSize;
    static readonly int Wrap_Value_Offset;
    static readonly int Wrap_Min_Offset;
    static readonly int Wrap_Max_Offset;
    static readonly int Wrap_ReturnValue_Offset;
    
    public static int Wrap(int value, int min, int max)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Wrap_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Wrap_Value_Offset), 0, null, value);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Wrap_Min_Offset), 0, null, min);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Wrap_Max_Offset), 0, null, max);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Wrap_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Wrap_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:WeightedMovingAverage_FVector
    static readonly IntPtr WeightedMovingAverage_FVector_NativeFunction;
    static readonly int WeightedMovingAverage_FVector_ParamsSize;
    static readonly int WeightedMovingAverage_FVector_CurrentSample_Offset;
    static readonly int WeightedMovingAverage_FVector_PreviousSample_Offset;
    static readonly int WeightedMovingAverage_FVector_Weight_Offset;
    static readonly int WeightedMovingAverage_FVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 WeightedMovingAverage_FVector(System.DoubleNumerics.Vector3 currentSample, System.DoubleNumerics.Vector3 previousSample, float weight)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[WeightedMovingAverage_FVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, WeightedMovingAverage_FVector_CurrentSample_Offset), 0, null, currentSample);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, WeightedMovingAverage_FVector_PreviousSample_Offset), 0, null, previousSample);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, WeightedMovingAverage_FVector_Weight_Offset), 0, null, weight);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, WeightedMovingAverage_FVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, WeightedMovingAverage_FVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:WeightedMovingAverage_FRotator
    static readonly IntPtr WeightedMovingAverage_FRotator_NativeFunction;
    static readonly int WeightedMovingAverage_FRotator_ParamsSize;
    static readonly int WeightedMovingAverage_FRotator_CurrentSample_Offset;
    static readonly int WeightedMovingAverage_FRotator_PreviousSample_Offset;
    static readonly int WeightedMovingAverage_FRotator_Weight_Offset;
    static readonly int WeightedMovingAverage_FRotator_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator WeightedMovingAverage_FRotator(UnrealSharp.Rotator currentSample, UnrealSharp.Rotator previousSample, float weight)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[WeightedMovingAverage_FRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, WeightedMovingAverage_FRotator_CurrentSample_Offset), 0, null, currentSample);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, WeightedMovingAverage_FRotator_PreviousSample_Offset), 0, null, previousSample);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, WeightedMovingAverage_FRotator_Weight_Offset), 0, null, weight);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, WeightedMovingAverage_FRotator_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, WeightedMovingAverage_FRotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:WeightedMovingAverage_Float
    static readonly IntPtr WeightedMovingAverage_Float_NativeFunction;
    static readonly int WeightedMovingAverage_Float_ParamsSize;
    static readonly int WeightedMovingAverage_Float_CurrentSample_Offset;
    static readonly int WeightedMovingAverage_Float_PreviousSample_Offset;
    static readonly int WeightedMovingAverage_Float_Weight_Offset;
    static readonly int WeightedMovingAverage_Float_ReturnValue_Offset;
    
    public static float WeightedMovingAverage_Float(float currentSample, float previousSample, float weight)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[WeightedMovingAverage_Float_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, WeightedMovingAverage_Float_CurrentSample_Offset), 0, null, currentSample);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, WeightedMovingAverage_Float_PreviousSample_Offset), 0, null, previousSample);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, WeightedMovingAverage_Float_Weight_Offset), 0, null, weight);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, WeightedMovingAverage_Float_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, WeightedMovingAverage_Float_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:VSizeXYSquared
    static readonly IntPtr VSizeXYSquared_NativeFunction;
    static readonly int VSizeXYSquared_ParamsSize;
    static readonly int VSizeXYSquared_A_Offset;
    static readonly int VSizeXYSquared_ReturnValue_Offset;
    
    public static double Length2DSquared(System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[VSizeXYSquared_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, VSizeXYSquared_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, VSizeXYSquared_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, VSizeXYSquared_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:VSizeXY
    static readonly IntPtr VSizeXY_NativeFunction;
    static readonly int VSizeXY_ParamsSize;
    static readonly int VSizeXY_A_Offset;
    static readonly int VSizeXY_ReturnValue_Offset;
    
    public static double Length2D(System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[VSizeXY_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, VSizeXY_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, VSizeXY_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, VSizeXY_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:VSizeSquared
    static readonly IntPtr VSizeSquared_NativeFunction;
    static readonly int VSizeSquared_ParamsSize;
    static readonly int VSizeSquared_A_Offset;
    static readonly int VSizeSquared_ReturnValue_Offset;
    
    public static double LengthSquared(System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[VSizeSquared_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, VSizeSquared_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, VSizeSquared_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, VSizeSquared_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:VSize2DSquared
    static readonly IntPtr VSize2DSquared_NativeFunction;
    static readonly int VSize2DSquared_ParamsSize;
    static readonly int VSize2DSquared_A_Offset;
    static readonly int VSize2DSquared_ReturnValue_Offset;
    
    public static double LengthSquared(System.DoubleNumerics.Vector2 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[VSize2DSquared_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, VSize2DSquared_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, VSize2DSquared_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, VSize2DSquared_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:VSize2D
    static readonly IntPtr VSize2D_NativeFunction;
    static readonly int VSize2D_ParamsSize;
    static readonly int VSize2D_A_Offset;
    static readonly int VSize2D_ReturnValue_Offset;
    
    public static double Length(System.DoubleNumerics.Vector2 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[VSize2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, VSize2D_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, VSize2D_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, VSize2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:VSize
    static readonly IntPtr VSize_NativeFunction;
    static readonly int VSize_ParamsSize;
    static readonly int VSize_A_Offset;
    static readonly int VSize_ReturnValue_Offset;
    
    public static double Length(System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[VSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, VSize_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, VSize_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, VSize_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:VLerp
    static readonly IntPtr VLerp_NativeFunction;
    static readonly int VLerp_ParamsSize;
    static readonly int VLerp_A_Offset;
    static readonly int VLerp_B_Offset;
    static readonly int VLerp_Alpha_Offset;
    static readonly int VLerp_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 LerpTo(System.DoubleNumerics.Vector3 a, System.DoubleNumerics.Vector3 b, float alpha)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[VLerp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, VLerp_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, VLerp_B_Offset), 0, null, b);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, VLerp_Alpha_Offset), 0, null, alpha);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, VLerp_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, VLerp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:VInterpTo_Constant
    static readonly IntPtr VInterpTo_Constant_NativeFunction;
    static readonly int VInterpTo_Constant_ParamsSize;
    static readonly int VInterpTo_Constant_Current_Offset;
    static readonly int VInterpTo_Constant_Target_Offset;
    static readonly int VInterpTo_Constant_DeltaTime_Offset;
    static readonly int VInterpTo_Constant_InterpSpeed_Offset;
    static readonly int VInterpTo_Constant_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 InterpToConstant(System.DoubleNumerics.Vector3 current, System.DoubleNumerics.Vector3 target, float deltaTime, float interpSpeed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[VInterpTo_Constant_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, VInterpTo_Constant_Current_Offset), 0, null, current);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, VInterpTo_Constant_Target_Offset), 0, null, target);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, VInterpTo_Constant_DeltaTime_Offset), 0, null, deltaTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, VInterpTo_Constant_InterpSpeed_Offset), 0, null, interpSpeed);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, VInterpTo_Constant_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, VInterpTo_Constant_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:VInterpTo
    static readonly IntPtr VInterpTo_NativeFunction;
    static readonly int VInterpTo_ParamsSize;
    static readonly int VInterpTo_Current_Offset;
    static readonly int VInterpTo_Target_Offset;
    static readonly int VInterpTo_DeltaTime_Offset;
    static readonly int VInterpTo_InterpSpeed_Offset;
    static readonly int VInterpTo_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 InterpTo(System.DoubleNumerics.Vector3 current, System.DoubleNumerics.Vector3 target, float deltaTime, float interpSpeed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[VInterpTo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, VInterpTo_Current_Offset), 0, null, current);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, VInterpTo_Target_Offset), 0, null, target);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, VInterpTo_DeltaTime_Offset), 0, null, deltaTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, VInterpTo_InterpSpeed_Offset), 0, null, interpSpeed);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, VInterpTo_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, VInterpTo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:VectorSpringInterp
    static readonly IntPtr VectorSpringInterp_NativeFunction;
    static readonly int VectorSpringInterp_ParamsSize;
    static readonly int VectorSpringInterp_Current_Offset;
    static readonly int VectorSpringInterp_Target_Offset;
    static readonly int VectorSpringInterp_SpringState_Offset;
    static readonly int VectorSpringInterp_Stiffness_Offset;
    static readonly int VectorSpringInterp_CriticalDampingFactor_Offset;
    static readonly int VectorSpringInterp_DeltaTime_Offset;
    static readonly int VectorSpringInterp_Mass_Offset;
    static readonly int VectorSpringInterp_TargetVelocityAmount_Offset;
    static readonly int VectorSpringInterp_bClamp_Offset;
    static readonly int VectorSpringInterp_MinValue_Offset;
    static readonly int VectorSpringInterp_MaxValue_Offset;
    static readonly int VectorSpringInterp_bInitializeFromTarget_Offset;
    static readonly int VectorSpringInterp_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 InterpSpringTo(System.DoubleNumerics.Vector3 current, System.DoubleNumerics.Vector3 target, ref UnrealSharp.Engine.VectorSpringState springState, float stiffness, float criticalDampingFactor, float deltaTime, float mass = 1.000000f, float targetVelocityAmount = 1.000000f, bool bClamp = false)
    {
        System.DoubleNumerics.Vector3 minValue = new System.DoubleNumerics.Vector3
        {
            X=-1.000000f,
            Y=-1.000000f,
            Z=-1.000000f,
        };
        return InterpSpringTo(current, target, ref springState, stiffness, criticalDampingFactor, deltaTime, mass, targetVelocityAmount, bClamp, minValue);
    }
    
    public static System.DoubleNumerics.Vector3 InterpSpringTo(System.DoubleNumerics.Vector3 current, System.DoubleNumerics.Vector3 target, ref UnrealSharp.Engine.VectorSpringState springState, float stiffness, float criticalDampingFactor, float deltaTime, float mass, float targetVelocityAmount, bool bClamp, System.DoubleNumerics.Vector3 minValue)
    {
        System.DoubleNumerics.Vector3 maxValue = new System.DoubleNumerics.Vector3
        {
            X=1.000000f,
            Y=1.000000f,
            Z=1.000000f,
        };
        return InterpSpringTo(current, target, ref springState, stiffness, criticalDampingFactor, deltaTime, mass, targetVelocityAmount, bClamp, minValue, maxValue);
    }
    
    public static System.DoubleNumerics.Vector3 InterpSpringTo(System.DoubleNumerics.Vector3 current, System.DoubleNumerics.Vector3 target, ref UnrealSharp.Engine.VectorSpringState springState, float stiffness, float criticalDampingFactor, float deltaTime, float mass, float targetVelocityAmount, bool bClamp, System.DoubleNumerics.Vector3 minValue, System.DoubleNumerics.Vector3 maxValue, bool bInitializeFromTarget = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[VectorSpringInterp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, VectorSpringInterp_Current_Offset), 0, null, current);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, VectorSpringInterp_Target_Offset), 0, null, target);
            UnrealSharp.Engine.VectorSpringStateMarshaler.ToNative(IntPtr.Add(ParamsBuffer, VectorSpringInterp_SpringState_Offset), 0, null, springState);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, VectorSpringInterp_Stiffness_Offset), 0, null, stiffness);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, VectorSpringInterp_CriticalDampingFactor_Offset), 0, null, criticalDampingFactor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, VectorSpringInterp_DeltaTime_Offset), 0, null, deltaTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, VectorSpringInterp_Mass_Offset), 0, null, mass);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, VectorSpringInterp_TargetVelocityAmount_Offset), 0, null, targetVelocityAmount);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, VectorSpringInterp_bClamp_Offset), 0, null, bClamp);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, VectorSpringInterp_MinValue_Offset), 0, null, minValue);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, VectorSpringInterp_MaxValue_Offset), 0, null, maxValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, VectorSpringInterp_bInitializeFromTarget_Offset), 0, null, bInitializeFromTarget);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, VectorSpringInterp_NativeFunction, ParamsBuffer);
            
            springState = UnrealSharp.Engine.VectorSpringStateMarshaler.FromNative(IntPtr.Add(ParamsBuffer, VectorSpringInterp_SpringState_Offset), 0, null);
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, VectorSpringInterp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_Zero
    static readonly IntPtr Vector_Zero_NativeFunction;
    static readonly int Vector_Zero_ParamsSize;
    static readonly int Vector_Zero_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Vector_Zero()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_Zero_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_Zero_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_Zero_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_Up
    static readonly IntPtr Vector_Up_NativeFunction;
    static readonly int Vector_Up_ParamsSize;
    static readonly int Vector_Up_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Vector_Up()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_Up_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_Up_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_Up_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_UnwindEuler
    static readonly IntPtr Vector_UnwindEuler_NativeFunction;
    static readonly int Vector_UnwindEuler_ParamsSize;
    static readonly int Vector_UnwindEuler_A_Offset;
    
    public static void UnwindEuler(ref System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_UnwindEuler_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_UnwindEuler_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_UnwindEuler_NativeFunction, ParamsBuffer);
            
            a = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_UnwindEuler_A_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_UnitCartesianToSpherical
    static readonly IntPtr Vector_UnitCartesianToSpherical_NativeFunction;
    static readonly int Vector_UnitCartesianToSpherical_ParamsSize;
    static readonly int Vector_UnitCartesianToSpherical_A_Offset;
    static readonly int Vector_UnitCartesianToSpherical_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 UnitCartesianToSpherical(System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_UnitCartesianToSpherical_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_UnitCartesianToSpherical_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_UnitCartesianToSpherical_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Vector_UnitCartesianToSpherical_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_ToRadians
    static readonly IntPtr Vector_ToRadians_NativeFunction;
    static readonly int Vector_ToRadians_ParamsSize;
    static readonly int Vector_ToRadians_A_Offset;
    static readonly int Vector_ToRadians_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 ToRadians(System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_ToRadians_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_ToRadians_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_ToRadians_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_ToRadians_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_ToDegrees
    static readonly IntPtr Vector_ToDegrees_NativeFunction;
    static readonly int Vector_ToDegrees_ParamsSize;
    static readonly int Vector_ToDegrees_A_Offset;
    static readonly int Vector_ToDegrees_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 ToDegrees(System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_ToDegrees_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_ToDegrees_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_ToDegrees_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_ToDegrees_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_SnappedToGrid
    static readonly IntPtr Vector_SnappedToGrid_NativeFunction;
    static readonly int Vector_SnappedToGrid_ParamsSize;
    static readonly int Vector_SnappedToGrid_InVect_Offset;
    static readonly int Vector_SnappedToGrid_InGridSize_Offset;
    static readonly int Vector_SnappedToGrid_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 SnappedToGrid(System.DoubleNumerics.Vector3 inVect, float inGridSize)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_SnappedToGrid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_SnappedToGrid_InVect_Offset), 0, null, inVect);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Vector_SnappedToGrid_InGridSize_Offset), 0, null, inGridSize);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_SnappedToGrid_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_SnappedToGrid_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_SlerpVectorToDirection
    static readonly IntPtr Vector_SlerpVectorToDirection_NativeFunction;
    static readonly int Vector_SlerpVectorToDirection_ParamsSize;
    static readonly int Vector_SlerpVectorToDirection_Vector_Offset;
    static readonly int Vector_SlerpVectorToDirection_Direction_Offset;
    static readonly int Vector_SlerpVectorToDirection_Alpha_Offset;
    static readonly int Vector_SlerpVectorToDirection_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 SlerpVectors(System.DoubleNumerics.Vector3 vector, System.DoubleNumerics.Vector3 direction, double alpha)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_SlerpVectorToDirection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_SlerpVectorToDirection_Vector_Offset), 0, null, vector);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_SlerpVectorToDirection_Direction_Offset), 0, null, direction);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Vector_SlerpVectorToDirection_Alpha_Offset), 0, null, alpha);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_SlerpVectorToDirection_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_SlerpVectorToDirection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_SlerpNormals
    static readonly IntPtr Vector_SlerpNormals_NativeFunction;
    static readonly int Vector_SlerpNormals_ParamsSize;
    static readonly int Vector_SlerpNormals_NormalA_Offset;
    static readonly int Vector_SlerpNormals_NormalB_Offset;
    static readonly int Vector_SlerpNormals_Alpha_Offset;
    static readonly int Vector_SlerpNormals_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 SlerpNormals(System.DoubleNumerics.Vector3 normalA, System.DoubleNumerics.Vector3 normalB, double alpha)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_SlerpNormals_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_SlerpNormals_NormalA_Offset), 0, null, normalA);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_SlerpNormals_NormalB_Offset), 0, null, normalB);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Vector_SlerpNormals_Alpha_Offset), 0, null, alpha);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_SlerpNormals_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_SlerpNormals_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_Set
    static readonly IntPtr Vector_Set_NativeFunction;
    static readonly int Vector_Set_ParamsSize;
    static readonly int Vector_Set_A_Offset;
    static readonly int Vector_Set_X_Offset;
    static readonly int Vector_Set_Y_Offset;
    static readonly int Vector_Set_Z_Offset;
    
    public static void Set(ref System.DoubleNumerics.Vector3 a, double x, double y, double z)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_Set_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_Set_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Vector_Set_X_Offset), 0, null, x);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Vector_Set_Y_Offset), 0, null, y);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Vector_Set_Z_Offset), 0, null, z);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_Set_NativeFunction, ParamsBuffer);
            
            a = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_Set_A_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_Right
    static readonly IntPtr Vector_Right_NativeFunction;
    static readonly int Vector_Right_ParamsSize;
    static readonly int Vector_Right_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Vector_Right()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_Right_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_Right_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_Right_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_Reciprocal
    static readonly IntPtr Vector_Reciprocal_NativeFunction;
    static readonly int Vector_Reciprocal_ParamsSize;
    static readonly int Vector_Reciprocal_A_Offset;
    static readonly int Vector_Reciprocal_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Reciprocal(System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_Reciprocal_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_Reciprocal_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_Reciprocal_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_Reciprocal_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_ProjectOnToNormal
    static readonly IntPtr Vector_ProjectOnToNormal_NativeFunction;
    static readonly int Vector_ProjectOnToNormal_ParamsSize;
    static readonly int Vector_ProjectOnToNormal_V_Offset;
    static readonly int Vector_ProjectOnToNormal_InNormal_Offset;
    static readonly int Vector_ProjectOnToNormal_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 ProjectOnToNormal(System.DoubleNumerics.Vector3 v, System.DoubleNumerics.Vector3 inNormal)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_ProjectOnToNormal_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_ProjectOnToNormal_V_Offset), 0, null, v);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_ProjectOnToNormal_InNormal_Offset), 0, null, inNormal);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_ProjectOnToNormal_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_ProjectOnToNormal_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_One
    static readonly IntPtr Vector_One_NativeFunction;
    static readonly int Vector_One_ParamsSize;
    static readonly int Vector_One_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Vector_One()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_One_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_One_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_One_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_NormalUnsafe
    static readonly IntPtr Vector_NormalUnsafe_NativeFunction;
    static readonly int Vector_NormalUnsafe_ParamsSize;
    static readonly int Vector_NormalUnsafe_A_Offset;
    static readonly int Vector_NormalUnsafe_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 NormalUnsafe(System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_NormalUnsafe_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_NormalUnsafe_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_NormalUnsafe_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_NormalUnsafe_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_Normalize
    static readonly IntPtr Vector_Normalize_NativeFunction;
    static readonly int Vector_Normalize_ParamsSize;
    static readonly int Vector_Normalize_A_Offset;
    static readonly int Vector_Normalize_Tolerance_Offset;
    
    public static void Normalize(ref System.DoubleNumerics.Vector3 a, float tolerance = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_Normalize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_Normalize_A_Offset), 0, null, a);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Vector_Normalize_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_Normalize_NativeFunction, ParamsBuffer);
            
            a = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_Normalize_A_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_Normal2D
    static readonly IntPtr Vector_Normal2D_NativeFunction;
    static readonly int Vector_Normal2D_ParamsSize;
    static readonly int Vector_Normal2D_A_Offset;
    static readonly int Vector_Normal2D_Tolerance_Offset;
    static readonly int Vector_Normal2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Normal2D(System.DoubleNumerics.Vector3 a, float tolerance = 0.000100f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_Normal2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_Normal2D_A_Offset), 0, null, a);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Vector_Normal2D_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_Normal2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_Normal2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_MirrorByPlane
    static readonly IntPtr Vector_MirrorByPlane_NativeFunction;
    static readonly int Vector_MirrorByPlane_ParamsSize;
    static readonly int Vector_MirrorByPlane_A_Offset;
    static readonly int Vector_MirrorByPlane_InPlane_Offset;
    static readonly int Vector_MirrorByPlane_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 MirrorByPlane(System.DoubleNumerics.Vector3 a, UnrealSharp.CoreUObject.Plane inPlane)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_MirrorByPlane_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_MirrorByPlane_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.CoreUObject.Plane>.ToNative(IntPtr.Add(ParamsBuffer, Vector_MirrorByPlane_InPlane_Offset), 0, null, inPlane);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_MirrorByPlane_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_MirrorByPlane_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_Left
    static readonly IntPtr Vector_Left_NativeFunction;
    static readonly int Vector_Left_ParamsSize;
    static readonly int Vector_Left_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Vector_Left()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_Left_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_Left_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_Left_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_IsZero
    static readonly IntPtr Vector_IsZero_NativeFunction;
    static readonly int Vector_IsZero_ParamsSize;
    static readonly int Vector_IsZero_A_Offset;
    static readonly int Vector_IsZero_ReturnValue_Offset;
    
    public static bool IsZero(System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_IsZero_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_IsZero_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_IsZero_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Vector_IsZero_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_IsUnit
    static readonly IntPtr Vector_IsUnit_NativeFunction;
    static readonly int Vector_IsUnit_ParamsSize;
    static readonly int Vector_IsUnit_A_Offset;
    static readonly int Vector_IsUnit_SquaredLenthTolerance_Offset;
    static readonly int Vector_IsUnit_ReturnValue_Offset;
    
    public static bool IsUnit(System.DoubleNumerics.Vector3 a, float squaredLenthTolerance = 0.000100f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_IsUnit_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_IsUnit_A_Offset), 0, null, a);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Vector_IsUnit_SquaredLenthTolerance_Offset), 0, null, squaredLenthTolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_IsUnit_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Vector_IsUnit_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_IsUniform
    static readonly IntPtr Vector_IsUniform_NativeFunction;
    static readonly int Vector_IsUniform_ParamsSize;
    static readonly int Vector_IsUniform_A_Offset;
    static readonly int Vector_IsUniform_Tolerance_Offset;
    static readonly int Vector_IsUniform_ReturnValue_Offset;
    
    public static bool IsUniform(System.DoubleNumerics.Vector3 a, float tolerance = 0.000100f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_IsUniform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_IsUniform_A_Offset), 0, null, a);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Vector_IsUniform_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_IsUniform_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Vector_IsUniform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_IsNormal
    static readonly IntPtr Vector_IsNormal_NativeFunction;
    static readonly int Vector_IsNormal_ParamsSize;
    static readonly int Vector_IsNormal_A_Offset;
    static readonly int Vector_IsNormal_ReturnValue_Offset;
    
    public static bool IsNormal(System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_IsNormal_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_IsNormal_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_IsNormal_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Vector_IsNormal_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_IsNearlyZero
    static readonly IntPtr Vector_IsNearlyZero_NativeFunction;
    static readonly int Vector_IsNearlyZero_ParamsSize;
    static readonly int Vector_IsNearlyZero_A_Offset;
    static readonly int Vector_IsNearlyZero_Tolerance_Offset;
    static readonly int Vector_IsNearlyZero_ReturnValue_Offset;
    
    public static bool IsNearlyZero(System.DoubleNumerics.Vector3 a, float tolerance = 0.000100f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_IsNearlyZero_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_IsNearlyZero_A_Offset), 0, null, a);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Vector_IsNearlyZero_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_IsNearlyZero_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Vector_IsNearlyZero_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_IsNAN
    static readonly IntPtr Vector_IsNAN_NativeFunction;
    static readonly int Vector_IsNAN_ParamsSize;
    static readonly int Vector_IsNAN_A_Offset;
    static readonly int Vector_IsNAN_ReturnValue_Offset;
    
    public static bool IsNAN(System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_IsNAN_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_IsNAN_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_IsNAN_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Vector_IsNAN_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_HeadingAngle
    static readonly IntPtr Vector_HeadingAngle_NativeFunction;
    static readonly int Vector_HeadingAngle_ParamsSize;
    static readonly int Vector_HeadingAngle_A_Offset;
    static readonly int Vector_HeadingAngle_ReturnValue_Offset;
    
    public static double HeadingAngle(System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_HeadingAngle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_HeadingAngle_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_HeadingAngle_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Vector_HeadingAngle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_GetSignVector
    static readonly IntPtr Vector_GetSignVector_NativeFunction;
    static readonly int Vector_GetSignVector_ParamsSize;
    static readonly int Vector_GetSignVector_A_Offset;
    static readonly int Vector_GetSignVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetSignVector(System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_GetSignVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_GetSignVector_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_GetSignVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_GetSignVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_GetProjection
    static readonly IntPtr Vector_GetProjection_NativeFunction;
    static readonly int Vector_GetProjection_ParamsSize;
    static readonly int Vector_GetProjection_A_Offset;
    static readonly int Vector_GetProjection_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetProjection(System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_GetProjection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_GetProjection_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_GetProjection_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_GetProjection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_GetAbsMin
    static readonly IntPtr Vector_GetAbsMin_NativeFunction;
    static readonly int Vector_GetAbsMin_ParamsSize;
    static readonly int Vector_GetAbsMin_A_Offset;
    static readonly int Vector_GetAbsMin_ReturnValue_Offset;
    
    public static double GetAbsMin(System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_GetAbsMin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_GetAbsMin_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_GetAbsMin_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Vector_GetAbsMin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_GetAbsMax
    static readonly IntPtr Vector_GetAbsMax_NativeFunction;
    static readonly int Vector_GetAbsMax_ParamsSize;
    static readonly int Vector_GetAbsMax_A_Offset;
    static readonly int Vector_GetAbsMax_ReturnValue_Offset;
    
    public static double GetAbsMax(System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_GetAbsMax_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_GetAbsMax_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_GetAbsMax_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Vector_GetAbsMax_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_GetAbs
    static readonly IntPtr Vector_GetAbs_NativeFunction;
    static readonly int Vector_GetAbs_ParamsSize;
    static readonly int Vector_GetAbs_A_Offset;
    static readonly int Vector_GetAbs_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetAbs(System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_GetAbs_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_GetAbs_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_GetAbs_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_GetAbs_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_Forward
    static readonly IntPtr Vector_Forward_NativeFunction;
    static readonly int Vector_Forward_ParamsSize;
    static readonly int Vector_Forward_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Vector_Forward()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_Forward_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_Forward_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_Forward_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_Down
    static readonly IntPtr Vector_Down_NativeFunction;
    static readonly int Vector_Down_ParamsSize;
    static readonly int Vector_Down_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Vector_Down()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_Down_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_Down_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_Down_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_DistanceSquared
    static readonly IntPtr Vector_DistanceSquared_NativeFunction;
    static readonly int Vector_DistanceSquared_ParamsSize;
    static readonly int Vector_DistanceSquared_V1_Offset;
    static readonly int Vector_DistanceSquared_V2_Offset;
    static readonly int Vector_DistanceSquared_ReturnValue_Offset;
    
    public static double DistanceSquared(System.DoubleNumerics.Vector3 v1, System.DoubleNumerics.Vector3 v2)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_DistanceSquared_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_DistanceSquared_V1_Offset), 0, null, v1);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_DistanceSquared_V2_Offset), 0, null, v2);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_DistanceSquared_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Vector_DistanceSquared_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_Distance2DSquared
    static readonly IntPtr Vector_Distance2DSquared_NativeFunction;
    static readonly int Vector_Distance2DSquared_ParamsSize;
    static readonly int Vector_Distance2DSquared_V1_Offset;
    static readonly int Vector_Distance2DSquared_V2_Offset;
    static readonly int Vector_Distance2DSquared_ReturnValue_Offset;
    
    public static double Distance2DSquared(System.DoubleNumerics.Vector3 v1, System.DoubleNumerics.Vector3 v2)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_Distance2DSquared_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_Distance2DSquared_V1_Offset), 0, null, v1);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_Distance2DSquared_V2_Offset), 0, null, v2);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_Distance2DSquared_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Vector_Distance2DSquared_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_Distance2D
    static readonly IntPtr Vector_Distance2D_NativeFunction;
    static readonly int Vector_Distance2D_ParamsSize;
    static readonly int Vector_Distance2D_V1_Offset;
    static readonly int Vector_Distance2D_V2_Offset;
    static readonly int Vector_Distance2D_ReturnValue_Offset;
    
    public static double Distance2D(System.DoubleNumerics.Vector3 v1, System.DoubleNumerics.Vector3 v2)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_Distance2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_Distance2D_V1_Offset), 0, null, v1);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_Distance2D_V2_Offset), 0, null, v2);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_Distance2D_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Vector_Distance2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_Distance
    static readonly IntPtr Vector_Distance_NativeFunction;
    static readonly int Vector_Distance_ParamsSize;
    static readonly int Vector_Distance_V1_Offset;
    static readonly int Vector_Distance_V2_Offset;
    static readonly int Vector_Distance_ReturnValue_Offset;
    
    public static double Distance(System.DoubleNumerics.Vector3 v1, System.DoubleNumerics.Vector3 v2)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_Distance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_Distance_V1_Offset), 0, null, v1);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_Distance_V2_Offset), 0, null, v2);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_Distance_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Vector_Distance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_CosineAngle2D
    static readonly IntPtr Vector_CosineAngle2D_NativeFunction;
    static readonly int Vector_CosineAngle2D_ParamsSize;
    static readonly int Vector_CosineAngle2D_A_Offset;
    static readonly int Vector_CosineAngle2D_B_Offset;
    static readonly int Vector_CosineAngle2D_ReturnValue_Offset;
    
    public static double CosineAngle2D(System.DoubleNumerics.Vector3 a, System.DoubleNumerics.Vector3 b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_CosineAngle2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_CosineAngle2D_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_CosineAngle2D_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_CosineAngle2D_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Vector_CosineAngle2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_ComponentMin
    static readonly IntPtr Vector_ComponentMin_NativeFunction;
    static readonly int Vector_ComponentMin_ParamsSize;
    static readonly int Vector_ComponentMin_A_Offset;
    static readonly int Vector_ComponentMin_B_Offset;
    static readonly int Vector_ComponentMin_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetMin(System.DoubleNumerics.Vector3 a, System.DoubleNumerics.Vector3 b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_ComponentMin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_ComponentMin_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_ComponentMin_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_ComponentMin_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_ComponentMin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_ComponentMax
    static readonly IntPtr Vector_ComponentMax_NativeFunction;
    static readonly int Vector_ComponentMax_ParamsSize;
    static readonly int Vector_ComponentMax_A_Offset;
    static readonly int Vector_ComponentMax_B_Offset;
    static readonly int Vector_ComponentMax_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetMax(System.DoubleNumerics.Vector3 a, System.DoubleNumerics.Vector3 b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_ComponentMax_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_ComponentMax_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_ComponentMax_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_ComponentMax_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_ComponentMax_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_ClampSizeMax2D
    static readonly IntPtr Vector_ClampSizeMax2D_NativeFunction;
    static readonly int Vector_ClampSizeMax2D_ParamsSize;
    static readonly int Vector_ClampSizeMax2D_A_Offset;
    static readonly int Vector_ClampSizeMax2D_Max_Offset;
    static readonly int Vector_ClampSizeMax2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 ClampedSizeMax2D(System.DoubleNumerics.Vector3 a, double max)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_ClampSizeMax2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_ClampSizeMax2D_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Vector_ClampSizeMax2D_Max_Offset), 0, null, max);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_ClampSizeMax2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_ClampSizeMax2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_ClampSizeMax
    static readonly IntPtr Vector_ClampSizeMax_NativeFunction;
    static readonly int Vector_ClampSizeMax_ParamsSize;
    static readonly int Vector_ClampSizeMax_A_Offset;
    static readonly int Vector_ClampSizeMax_Max_Offset;
    static readonly int Vector_ClampSizeMax_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 ClampedSizeMax(System.DoubleNumerics.Vector3 a, double max)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_ClampSizeMax_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_ClampSizeMax_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Vector_ClampSizeMax_Max_Offset), 0, null, max);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_ClampSizeMax_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_ClampSizeMax_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_ClampSize2D
    static readonly IntPtr Vector_ClampSize2D_NativeFunction;
    static readonly int Vector_ClampSize2D_ParamsSize;
    static readonly int Vector_ClampSize2D_A_Offset;
    static readonly int Vector_ClampSize2D_Min_Offset;
    static readonly int Vector_ClampSize2D_Max_Offset;
    static readonly int Vector_ClampSize2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 ClampedSize2D(System.DoubleNumerics.Vector3 a, double min, double max)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_ClampSize2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_ClampSize2D_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Vector_ClampSize2D_Min_Offset), 0, null, min);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Vector_ClampSize2D_Max_Offset), 0, null, max);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_ClampSize2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_ClampSize2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_BoundedToCube
    static readonly IntPtr Vector_BoundedToCube_NativeFunction;
    static readonly int Vector_BoundedToCube_ParamsSize;
    static readonly int Vector_BoundedToCube_InVect_Offset;
    static readonly int Vector_BoundedToCube_InRadius_Offset;
    static readonly int Vector_BoundedToCube_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 BoundedToCube(System.DoubleNumerics.Vector3 inVect, float inRadius)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_BoundedToCube_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_BoundedToCube_InVect_Offset), 0, null, inVect);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Vector_BoundedToCube_InRadius_Offset), 0, null, inRadius);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_BoundedToCube_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_BoundedToCube_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_BoundedToBox
    static readonly IntPtr Vector_BoundedToBox_NativeFunction;
    static readonly int Vector_BoundedToBox_ParamsSize;
    static readonly int Vector_BoundedToBox_InVect_Offset;
    static readonly int Vector_BoundedToBox_InBoxMin_Offset;
    static readonly int Vector_BoundedToBox_InBoxMax_Offset;
    static readonly int Vector_BoundedToBox_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 BoundedToBox(System.DoubleNumerics.Vector3 inVect, System.DoubleNumerics.Vector3 inBoxMin, System.DoubleNumerics.Vector3 inBoxMax)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_BoundedToBox_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_BoundedToBox_InVect_Offset), 0, null, inVect);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_BoundedToBox_InBoxMin_Offset), 0, null, inBoxMin);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_BoundedToBox_InBoxMax_Offset), 0, null, inBoxMax);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_BoundedToBox_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_BoundedToBox_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_Backward
    static readonly IntPtr Vector_Backward_NativeFunction;
    static readonly int Vector_Backward_ParamsSize;
    static readonly int Vector_Backward_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Vector_Backward()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_Backward_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_Backward_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_Backward_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_Assign
    static readonly IntPtr Vector_Assign_NativeFunction;
    static readonly int Vector_Assign_ParamsSize;
    static readonly int Vector_Assign_A_Offset;
    static readonly int Vector_Assign_InVector_Offset;
    
    public static void Assign(ref System.DoubleNumerics.Vector3 a, System.DoubleNumerics.Vector3 inVector)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_Assign_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_Assign_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_Assign_InVector_Offset), 0, null, inVector);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_Assign_NativeFunction, ParamsBuffer);
            
            a = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_Assign_A_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector_AddBounded
    static readonly IntPtr Vector_AddBounded_NativeFunction;
    static readonly int Vector_AddBounded_ParamsSize;
    static readonly int Vector_AddBounded_A_Offset;
    static readonly int Vector_AddBounded_InAddVect_Offset;
    static readonly int Vector_AddBounded_InRadius_Offset;
    
    public static void AddBounded(ref System.DoubleNumerics.Vector3 a, System.DoubleNumerics.Vector3 inAddVect, float inRadius)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector_AddBounded_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_AddBounded_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Vector_AddBounded_InAddVect_Offset), 0, null, inAddVect);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Vector_AddBounded_InRadius_Offset), 0, null, inRadius);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector_AddBounded_NativeFunction, ParamsBuffer);
            
            a = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Vector_AddBounded_A_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector2DInterpTo_Constant
    static readonly IntPtr Vector2DInterpTo_Constant_NativeFunction;
    static readonly int Vector2DInterpTo_Constant_ParamsSize;
    static readonly int Vector2DInterpTo_Constant_Current_Offset;
    static readonly int Vector2DInterpTo_Constant_Target_Offset;
    static readonly int Vector2DInterpTo_Constant_DeltaTime_Offset;
    static readonly int Vector2DInterpTo_Constant_InterpSpeed_Offset;
    static readonly int Vector2DInterpTo_Constant_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 InterpToConstant(System.DoubleNumerics.Vector2 current, System.DoubleNumerics.Vector2 target, float deltaTime, float interpSpeed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector2DInterpTo_Constant_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Vector2DInterpTo_Constant_Current_Offset), 0, null, current);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Vector2DInterpTo_Constant_Target_Offset), 0, null, target);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Vector2DInterpTo_Constant_DeltaTime_Offset), 0, null, deltaTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Vector2DInterpTo_Constant_InterpSpeed_Offset), 0, null, interpSpeed);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector2DInterpTo_Constant_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Vector2DInterpTo_Constant_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector2DInterpTo
    static readonly IntPtr Vector2DInterpTo_NativeFunction;
    static readonly int Vector2DInterpTo_ParamsSize;
    static readonly int Vector2DInterpTo_Current_Offset;
    static readonly int Vector2DInterpTo_Target_Offset;
    static readonly int Vector2DInterpTo_DeltaTime_Offset;
    static readonly int Vector2DInterpTo_InterpSpeed_Offset;
    static readonly int Vector2DInterpTo_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 InterpTo(System.DoubleNumerics.Vector2 current, System.DoubleNumerics.Vector2 target, float deltaTime, float interpSpeed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector2DInterpTo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Vector2DInterpTo_Current_Offset), 0, null, current);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Vector2DInterpTo_Target_Offset), 0, null, target);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Vector2DInterpTo_DeltaTime_Offset), 0, null, deltaTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Vector2DInterpTo_InterpSpeed_Offset), 0, null, interpSpeed);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector2DInterpTo_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Vector2DInterpTo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector2D_Zero
    static readonly IntPtr Vector2D_Zero_NativeFunction;
    static readonly int Vector2D_Zero_ParamsSize;
    static readonly int Vector2D_Zero_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 Vector2D_Zero()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector2D_Zero_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector2D_Zero_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Vector2D_Zero_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector2D_Unit45Deg
    static readonly IntPtr Vector2D_Unit45Deg_NativeFunction;
    static readonly int Vector2D_Unit45Deg_ParamsSize;
    static readonly int Vector2D_Unit45Deg_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 Vector2D_Unit45Deg()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector2D_Unit45Deg_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector2D_Unit45Deg_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Vector2D_Unit45Deg_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Vector2D_One
    static readonly IntPtr Vector2D_One_NativeFunction;
    static readonly int Vector2D_One_ParamsSize;
    static readonly int Vector2D_One_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 Vector2D_One()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Vector2D_One_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Vector2D_One_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Vector2D_One_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:UtcNow
    static readonly IntPtr UtcNow_NativeFunction;
    static readonly int UtcNow_ParamsSize;
    static readonly int UtcNow_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.DateTime UtcNow()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UtcNow_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, UtcNow_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.DateTime returnValue;
            returnValue = UnrealSharp.CoreUObject.DateTimeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, UtcNow_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:TransformRotation
    static readonly IntPtr TransformRotation_NativeFunction;
    static readonly int TransformRotation_ParamsSize;
    static readonly int TransformRotation_T_Offset;
    static readonly int TransformRotation_Rotation_Offset;
    static readonly int TransformRotation_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator TransformRotation(UnrealSharp.Transform t, UnrealSharp.Rotator rotation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TransformRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, TransformRotation_T_Offset), 0, null, t);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, TransformRotation_Rotation_Offset), 0, null, rotation);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, TransformRotation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, TransformRotation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:TransformLocation
    static readonly IntPtr TransformLocation_NativeFunction;
    static readonly int TransformLocation_ParamsSize;
    static readonly int TransformLocation_T_Offset;
    static readonly int TransformLocation_Location_Offset;
    static readonly int TransformLocation_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 TransformLocation(UnrealSharp.Transform t, System.DoubleNumerics.Vector3 location)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TransformLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, TransformLocation_T_Offset), 0, null, t);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, TransformLocation_Location_Offset), 0, null, location);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, TransformLocation_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, TransformLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:TransformDirection
    static readonly IntPtr TransformDirection_NativeFunction;
    static readonly int TransformDirection_ParamsSize;
    static readonly int TransformDirection_T_Offset;
    static readonly int TransformDirection_Direction_Offset;
    static readonly int TransformDirection_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 TransformDirection(UnrealSharp.Transform t, System.DoubleNumerics.Vector3 direction)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TransformDirection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, TransformDirection_T_Offset), 0, null, t);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, TransformDirection_Direction_Offset), 0, null, direction);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, TransformDirection_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, TransformDirection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Transform_Determinant
    static readonly IntPtr Transform_Determinant_NativeFunction;
    static readonly int Transform_Determinant_ParamsSize;
    static readonly int Transform_Determinant_Transform_Offset;
    static readonly int Transform_Determinant_ReturnValue_Offset;
    
    public static float Determinant(UnrealSharp.Transform transform)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Transform_Determinant_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, Transform_Determinant_Transform_Offset), 0, null, transform);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Transform_Determinant_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, Transform_Determinant_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:ToUnixTimestampDouble
    static readonly IntPtr ToUnixTimestampDouble_NativeFunction;
    static readonly int ToUnixTimestampDouble_ParamsSize;
    static readonly int ToUnixTimestampDouble_Time_Offset;
    static readonly int ToUnixTimestampDouble_ReturnValue_Offset;
    
    public static double ToUnixTimestampDouble(UnrealSharp.CoreUObject.DateTime time)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ToUnixTimestampDouble_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ToUnixTimestampDouble_Time_Offset), 0, null, time);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ToUnixTimestampDouble_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, ToUnixTimestampDouble_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:ToUnixTimestamp
    static readonly IntPtr ToUnixTimestamp_NativeFunction;
    static readonly int ToUnixTimestamp_ParamsSize;
    static readonly int ToUnixTimestamp_Time_Offset;
    static readonly int ToUnixTimestamp_ReturnValue_Offset;
    
    public static long ToUnixTimestamp(UnrealSharp.CoreUObject.DateTime time)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ToUnixTimestamp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ToUnixTimestamp_Time_Offset), 0, null, time);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ToUnixTimestamp_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, ToUnixTimestamp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:ToSign2D
    static readonly IntPtr ToSign2D_NativeFunction;
    static readonly int ToSign2D_ParamsSize;
    static readonly int ToSign2D_A_Offset;
    static readonly int ToSign2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 ToSign(System.DoubleNumerics.Vector2 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ToSign2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, ToSign2D_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ToSign2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, ToSign2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:ToRounded2D
    static readonly IntPtr ToRounded2D_NativeFunction;
    static readonly int ToRounded2D_ParamsSize;
    static readonly int ToRounded2D_A_Offset;
    static readonly int ToRounded2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 ToRounded(System.DoubleNumerics.Vector2 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ToRounded2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, ToRounded2D_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ToRounded2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, ToRounded2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:ToHex_LinearColor
    static readonly IntPtr ToHex_LinearColor_NativeFunction;
    static readonly int ToHex_LinearColor_ParamsSize;
    static readonly int ToHex_LinearColor_InColor_Offset;
    static readonly int ToHex_LinearColor_ReturnValue_Offset;
    
    public static string ToHex_LinearColor(UnrealSharp.CoreUObject.LinearColor inColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ToHex_LinearColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, ToHex_LinearColor_InColor_Offset), 0, null, inColor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ToHex_LinearColor_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,ToHex_LinearColor_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:ToDirectionAndLength2D
    static readonly IntPtr ToDirectionAndLength2D_NativeFunction;
    static readonly int ToDirectionAndLength2D_ParamsSize;
    static readonly int ToDirectionAndLength2D_A_Offset;
    static readonly int ToDirectionAndLength2D_OutDir_Offset;
    static readonly int ToDirectionAndLength2D_OutLength_Offset;
    
    public static void ToDirectionAndLength(System.DoubleNumerics.Vector2 a, out System.DoubleNumerics.Vector2 outDir, out double outLength)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ToDirectionAndLength2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, ToDirectionAndLength2D_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ToDirectionAndLength2D_NativeFunction, ParamsBuffer);
            
            outDir = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, ToDirectionAndLength2D_OutDir_Offset), 0, null);
            outLength = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, ToDirectionAndLength2D_OutLength_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Today
    static readonly IntPtr Today_NativeFunction;
    static readonly int Today_ParamsSize;
    static readonly int Today_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.DateTime Today()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Today_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Today_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.DateTime returnValue;
            returnValue = UnrealSharp.CoreUObject.DateTimeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, Today_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:TLerp
    static readonly IntPtr TLerp_NativeFunction;
    static readonly int TLerp_ParamsSize;
    static readonly int TLerp_A_Offset;
    static readonly int TLerp_B_Offset;
    static readonly int TLerp_Alpha_Offset;
    static readonly int TLerp_InterpMode_Offset;
    static readonly int TLerp_ReturnValue_Offset;
    
    public static UnrealSharp.Transform Lerp(UnrealSharp.Transform a, UnrealSharp.Transform b, float alpha, UnrealSharp.Engine.ELerpInterpolationMode interpMode = UnrealSharp.Engine.ELerpInterpolationMode.QuatInterp)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TLerp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, TLerp_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, TLerp_B_Offset), 0, null, b);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, TLerp_Alpha_Offset), 0, null, alpha);
            BlittableMarshaller<UnrealSharp.Engine.ELerpInterpolationMode>.ToNative(IntPtr.Add(ParamsBuffer, TLerp_InterpMode_Offset), 0, null, interpMode);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, TLerp_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, TLerp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:TInterpTo
    static readonly IntPtr TInterpTo_NativeFunction;
    static readonly int TInterpTo_ParamsSize;
    static readonly int TInterpTo_Current_Offset;
    static readonly int TInterpTo_Target_Offset;
    static readonly int TInterpTo_DeltaTime_Offset;
    static readonly int TInterpTo_InterpSpeed_Offset;
    static readonly int TInterpTo_ReturnValue_Offset;
    
    public static UnrealSharp.Transform InterpTo(UnrealSharp.Transform current, UnrealSharp.Transform target, float deltaTime, float interpSpeed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TInterpTo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, TInterpTo_Current_Offset), 0, null, current);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, TInterpTo_Target_Offset), 0, null, target);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, TInterpTo_DeltaTime_Offset), 0, null, deltaTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, TInterpTo_InterpSpeed_Offset), 0, null, interpSpeed);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, TInterpTo_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, TInterpTo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:TimespanZeroValue
    static readonly IntPtr TimespanZeroValue_NativeFunction;
    static readonly int TimespanZeroValue_ParamsSize;
    static readonly int TimespanZeroValue_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Timespan TimespanZeroValue()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TimespanZeroValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, TimespanZeroValue_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Timespan returnValue;
            returnValue = UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(ParamsBuffer, TimespanZeroValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:TimespanRatio
    static readonly IntPtr TimespanRatio_NativeFunction;
    static readonly int TimespanRatio_ParamsSize;
    static readonly int TimespanRatio_A_Offset;
    static readonly int TimespanRatio_B_Offset;
    static readonly int TimespanRatio_ReturnValue_Offset;
    
    public static float TimespanRatio(UnrealSharp.CoreUObject.Timespan a, UnrealSharp.CoreUObject.Timespan b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TimespanRatio_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, TimespanRatio_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, TimespanRatio_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, TimespanRatio_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, TimespanRatio_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:TimespanMinValue
    static readonly IntPtr TimespanMinValue_NativeFunction;
    static readonly int TimespanMinValue_ParamsSize;
    static readonly int TimespanMinValue_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Timespan TimespanMinValue()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TimespanMinValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, TimespanMinValue_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Timespan returnValue;
            returnValue = UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(ParamsBuffer, TimespanMinValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:TimespanMaxValue
    static readonly IntPtr TimespanMaxValue_NativeFunction;
    static readonly int TimespanMaxValue_ParamsSize;
    static readonly int TimespanMaxValue_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Timespan TimespanMaxValue()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TimespanMaxValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, TimespanMaxValue_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Timespan returnValue;
            returnValue = UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(ParamsBuffer, TimespanMaxValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:TimespanFromString
    static readonly IntPtr TimespanFromString_NativeFunction;
    static readonly int TimespanFromString_ParamsSize;
    static readonly int TimespanFromString_TimespanString_Offset;
    static readonly int TimespanFromString_Result_Offset;
    static readonly int TimespanFromString_ReturnValue_Offset;
    
    public static bool TimespanFromString(string timespanString, out UnrealSharp.CoreUObject.Timespan result)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TimespanFromString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TimespanString_NativePtr = IntPtr.Add(ParamsBuffer,TimespanFromString_TimespanString_Offset);
            StringMarshaller.ToNative(TimespanString_NativePtr,0,null,timespanString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, TimespanFromString_NativeFunction, ParamsBuffer);
            
            result = UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(ParamsBuffer, TimespanFromString_Result_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, TimespanFromString_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(TimespanString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Tan
    static readonly IntPtr Tan_NativeFunction;
    static readonly int Tan_ParamsSize;
    static readonly int Tan_A_Offset;
    static readonly int Tan_ReturnValue_Offset;
    
    public static double Tan(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Tan_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Tan_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Tan_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Tan_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Subtract_VectorVector
    static readonly IntPtr Subtract_VectorVector_NativeFunction;
    static readonly int Subtract_VectorVector_ParamsSize;
    static readonly int Subtract_VectorVector_A_Offset;
    static readonly int Subtract_VectorVector_B_Offset;
    static readonly int Subtract_VectorVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Subtract(System.DoubleNumerics.Vector3 a, System.DoubleNumerics.Vector3 b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Subtract_VectorVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_VectorVector_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_VectorVector_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Subtract_VectorVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Subtract_VectorVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Subtract_VectorInt
    static readonly IntPtr Subtract_VectorInt_NativeFunction;
    static readonly int Subtract_VectorInt_ParamsSize;
    static readonly int Subtract_VectorInt_A_Offset;
    static readonly int Subtract_VectorInt_B_Offset;
    static readonly int Subtract_VectorInt_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 SubtractInt(System.DoubleNumerics.Vector3 a, int b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Subtract_VectorInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_VectorInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_VectorInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Subtract_VectorInt_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Subtract_VectorInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Subtract_VectorFloat
    static readonly IntPtr Subtract_VectorFloat_NativeFunction;
    static readonly int Subtract_VectorFloat_ParamsSize;
    static readonly int Subtract_VectorFloat_A_Offset;
    static readonly int Subtract_VectorFloat_B_Offset;
    static readonly int Subtract_VectorFloat_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 SubtractFloat(System.DoubleNumerics.Vector3 a, double b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Subtract_VectorFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_VectorFloat_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_VectorFloat_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Subtract_VectorFloat_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Subtract_VectorFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Subtract_Vector2DVector2D
    static readonly IntPtr Subtract_Vector2DVector2D_NativeFunction;
    static readonly int Subtract_Vector2DVector2D_ParamsSize;
    static readonly int Subtract_Vector2DVector2D_A_Offset;
    static readonly int Subtract_Vector2DVector2D_B_Offset;
    static readonly int Subtract_Vector2DVector2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 Subtract(System.DoubleNumerics.Vector2 a, System.DoubleNumerics.Vector2 b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Subtract_Vector2DVector2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_Vector2DVector2D_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_Vector2DVector2D_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Subtract_Vector2DVector2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Subtract_Vector2DVector2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Subtract_Vector2DFloat
    static readonly IntPtr Subtract_Vector2DFloat_NativeFunction;
    static readonly int Subtract_Vector2DFloat_ParamsSize;
    static readonly int Subtract_Vector2DFloat_A_Offset;
    static readonly int Subtract_Vector2DFloat_B_Offset;
    static readonly int Subtract_Vector2DFloat_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 SubtractFloat(System.DoubleNumerics.Vector2 a, double b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Subtract_Vector2DFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_Vector2DFloat_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_Vector2DFloat_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Subtract_Vector2DFloat_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Subtract_Vector2DFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Subtract_TimespanTimespan
    static readonly IntPtr Subtract_TimespanTimespan_NativeFunction;
    static readonly int Subtract_TimespanTimespan_ParamsSize;
    static readonly int Subtract_TimespanTimespan_A_Offset;
    static readonly int Subtract_TimespanTimespan_B_Offset;
    static readonly int Subtract_TimespanTimespan_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Timespan Subtract_TimespanTimespan(UnrealSharp.CoreUObject.Timespan a, UnrealSharp.CoreUObject.Timespan b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Subtract_TimespanTimespan_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Subtract_TimespanTimespan_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Subtract_TimespanTimespan_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Subtract_TimespanTimespan_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Timespan returnValue;
            returnValue = UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(ParamsBuffer, Subtract_TimespanTimespan_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Subtract_QuatQuat
    static readonly IntPtr Subtract_QuatQuat_NativeFunction;
    static readonly int Subtract_QuatQuat_ParamsSize;
    static readonly int Subtract_QuatQuat_A_Offset;
    static readonly int Subtract_QuatQuat_B_Offset;
    static readonly int Subtract_QuatQuat_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Quaternion Subtract(System.DoubleNumerics.Quaternion a, System.DoubleNumerics.Quaternion b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Subtract_QuatQuat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_QuatQuat_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_QuatQuat_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Subtract_QuatQuat_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Quaternion returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, Subtract_QuatQuat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Subtract_LinearColorLinearColor
    static readonly IntPtr Subtract_LinearColorLinearColor_NativeFunction;
    static readonly int Subtract_LinearColorLinearColor_ParamsSize;
    static readonly int Subtract_LinearColorLinearColor_A_Offset;
    static readonly int Subtract_LinearColorLinearColor_B_Offset;
    static readonly int Subtract_LinearColorLinearColor_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor Subtract(UnrealSharp.CoreUObject.LinearColor a, UnrealSharp.CoreUObject.LinearColor b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Subtract_LinearColorLinearColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_LinearColorLinearColor_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_LinearColorLinearColor_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Subtract_LinearColorLinearColor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, Subtract_LinearColorLinearColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Subtract_IntPointIntPoint
    static readonly IntPtr Subtract_IntPointIntPoint_NativeFunction;
    static readonly int Subtract_IntPointIntPoint_ParamsSize;
    static readonly int Subtract_IntPointIntPoint_A_Offset;
    static readonly int Subtract_IntPointIntPoint_B_Offset;
    static readonly int Subtract_IntPointIntPoint_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.IntPoint Subtract(UnrealSharp.CoreUObject.IntPoint a, UnrealSharp.CoreUObject.IntPoint b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Subtract_IntPointIntPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_IntPointIntPoint_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_IntPointIntPoint_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Subtract_IntPointIntPoint_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.IntPoint returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative(IntPtr.Add(ParamsBuffer, Subtract_IntPointIntPoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Subtract_IntPointInt
    static readonly IntPtr Subtract_IntPointInt_NativeFunction;
    static readonly int Subtract_IntPointInt_ParamsSize;
    static readonly int Subtract_IntPointInt_A_Offset;
    static readonly int Subtract_IntPointInt_B_Offset;
    static readonly int Subtract_IntPointInt_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.IntPoint SubtractInt(UnrealSharp.CoreUObject.IntPoint a, int b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Subtract_IntPointInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_IntPointInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_IntPointInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Subtract_IntPointInt_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.IntPoint returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative(IntPtr.Add(ParamsBuffer, Subtract_IntPointInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Subtract_IntInt
    static readonly IntPtr Subtract_IntInt_NativeFunction;
    static readonly int Subtract_IntInt_ParamsSize;
    static readonly int Subtract_IntInt_A_Offset;
    static readonly int Subtract_IntInt_B_Offset;
    static readonly int Subtract_IntInt_ReturnValue_Offset;
    
    public static int Subtract_IntInt(int a, int b = 1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Subtract_IntInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_IntInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_IntInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Subtract_IntInt_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Subtract_IntInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Subtract_Int64Int64
    static readonly IntPtr Subtract_Int64Int64_NativeFunction;
    static readonly int Subtract_Int64Int64_ParamsSize;
    static readonly int Subtract_Int64Int64_A_Offset;
    static readonly int Subtract_Int64Int64_B_Offset;
    static readonly int Subtract_Int64Int64_ReturnValue_Offset;
    
    public static long Subtract_Int64Int64(long a, long b = 1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Subtract_Int64Int64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_Int64Int64_A_Offset), 0, null, a);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_Int64Int64_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Subtract_Int64Int64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, Subtract_Int64Int64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Subtract_DoubleDouble
    static readonly IntPtr Subtract_DoubleDouble_NativeFunction;
    static readonly int Subtract_DoubleDouble_ParamsSize;
    static readonly int Subtract_DoubleDouble_A_Offset;
    static readonly int Subtract_DoubleDouble_B_Offset;
    static readonly int Subtract_DoubleDouble_ReturnValue_Offset;
    
    public static double Subtract_DoubleDouble(double a, double b = 1.000000)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Subtract_DoubleDouble_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_DoubleDouble_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_DoubleDouble_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Subtract_DoubleDouble_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Subtract_DoubleDouble_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Subtract_DateTimeTimespan
    static readonly IntPtr Subtract_DateTimeTimespan_NativeFunction;
    static readonly int Subtract_DateTimeTimespan_ParamsSize;
    static readonly int Subtract_DateTimeTimespan_A_Offset;
    static readonly int Subtract_DateTimeTimespan_B_Offset;
    static readonly int Subtract_DateTimeTimespan_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.DateTime Subtract_DateTimeTimespan(UnrealSharp.CoreUObject.DateTime a, UnrealSharp.CoreUObject.Timespan b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Subtract_DateTimeTimespan_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Subtract_DateTimeTimespan_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Subtract_DateTimeTimespan_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Subtract_DateTimeTimespan_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.DateTime returnValue;
            returnValue = UnrealSharp.CoreUObject.DateTimeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, Subtract_DateTimeTimespan_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Subtract_DateTimeDateTime
    static readonly IntPtr Subtract_DateTimeDateTime_NativeFunction;
    static readonly int Subtract_DateTimeDateTime_ParamsSize;
    static readonly int Subtract_DateTimeDateTime_A_Offset;
    static readonly int Subtract_DateTimeDateTime_B_Offset;
    static readonly int Subtract_DateTimeDateTime_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Timespan Subtract_DateTimeDateTime(UnrealSharp.CoreUObject.DateTime a, UnrealSharp.CoreUObject.DateTime b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Subtract_DateTimeDateTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Subtract_DateTimeDateTime_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Subtract_DateTimeDateTime_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Subtract_DateTimeDateTime_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Timespan returnValue;
            returnValue = UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(ParamsBuffer, Subtract_DateTimeDateTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Subtract_ByteByte
    static readonly IntPtr Subtract_ByteByte_NativeFunction;
    static readonly int Subtract_ByteByte_ParamsSize;
    static readonly int Subtract_ByteByte_A_Offset;
    static readonly int Subtract_ByteByte_B_Offset;
    static readonly int Subtract_ByteByte_ReturnValue_Offset;
    
    public static byte Subtract_ByteByte(byte a, byte b = 1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Subtract_ByteByte_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_ByteByte_A_Offset), 0, null, a);
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, Subtract_ByteByte_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Subtract_ByteByte_NativeFunction, ParamsBuffer);
            
            byte returnValue;
            returnValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, Subtract_ByteByte_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Square
    static readonly IntPtr Square_NativeFunction;
    static readonly int Square_ParamsSize;
    static readonly int Square_A_Offset;
    static readonly int Square_ReturnValue_Offset;
    
    public static double Square(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Square_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Square_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Square_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Square_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Sqrt
    static readonly IntPtr Sqrt_NativeFunction;
    static readonly int Sqrt_ParamsSize;
    static readonly int Sqrt_A_Offset;
    static readonly int Sqrt_ReturnValue_Offset;
    
    public static double Sqrt(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Sqrt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Sqrt_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Sqrt_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Sqrt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Spherical2DToUnitCartesian
    static readonly IntPtr Spherical2DToUnitCartesian_NativeFunction;
    static readonly int Spherical2DToUnitCartesian_ParamsSize;
    static readonly int Spherical2DToUnitCartesian_A_Offset;
    static readonly int Spherical2DToUnitCartesian_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 SphericalToUnitCartesian(System.DoubleNumerics.Vector2 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Spherical2DToUnitCartesian_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Spherical2DToUnitCartesian_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Spherical2DToUnitCartesian_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Spherical2DToUnitCartesian_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Sin
    static readonly IntPtr Sin_NativeFunction;
    static readonly int Sin_ParamsSize;
    static readonly int Sin_A_Offset;
    static readonly int Sin_ReturnValue_Offset;
    
    public static double Sin(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Sin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Sin_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Sin_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Sin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:SignOfInteger64
    static readonly IntPtr SignOfInteger64_NativeFunction;
    static readonly int SignOfInteger64_ParamsSize;
    static readonly int SignOfInteger64_A_Offset;
    static readonly int SignOfInteger64_ReturnValue_Offset;
    
    public static long SignOfInteger64(long a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SignOfInteger64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, SignOfInteger64_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SignOfInteger64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, SignOfInteger64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:SignOfInteger
    static readonly IntPtr SignOfInteger_NativeFunction;
    static readonly int SignOfInteger_ParamsSize;
    static readonly int SignOfInteger_A_Offset;
    static readonly int SignOfInteger_ReturnValue_Offset;
    
    public static int SignOfInteger(int a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SignOfInteger_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SignOfInteger_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SignOfInteger_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, SignOfInteger_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:SignOfFloat
    static readonly IntPtr SignOfFloat_NativeFunction;
    static readonly int SignOfFloat_ParamsSize;
    static readonly int SignOfFloat_A_Offset;
    static readonly int SignOfFloat_ReturnValue_Offset;
    
    public static double SignOfFloat(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SignOfFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, SignOfFloat_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SignOfFloat_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, SignOfFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:SetVectorSpringStateVelocity
    static readonly IntPtr SetVectorSpringStateVelocity_NativeFunction;
    static readonly int SetVectorSpringStateVelocity_ParamsSize;
    static readonly int SetVectorSpringStateVelocity_SpringState_Offset;
    static readonly int SetVectorSpringStateVelocity_Velocity_Offset;
    
    public static void SetVectorSpringStateVelocity(ref UnrealSharp.Engine.VectorSpringState springState, System.DoubleNumerics.Vector3 velocity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVectorSpringStateVelocity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.VectorSpringStateMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetVectorSpringStateVelocity_SpringState_Offset), 0, null, springState);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetVectorSpringStateVelocity_Velocity_Offset), 0, null, velocity);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetVectorSpringStateVelocity_NativeFunction, ParamsBuffer);
            
            springState = UnrealSharp.Engine.VectorSpringStateMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetVectorSpringStateVelocity_SpringState_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:SetRandomStreamSeed
    static readonly IntPtr SetRandomStreamSeed_NativeFunction;
    static readonly int SetRandomStreamSeed_ParamsSize;
    static readonly int SetRandomStreamSeed_Stream_Offset;
    static readonly int SetRandomStreamSeed_NewSeed_Offset;
    
    public static void SetSeed(ref UnrealSharp.RandomStream stream, int newSeed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRandomStreamSeed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.RandomStream>.ToNative(IntPtr.Add(ParamsBuffer, SetRandomStreamSeed_Stream_Offset), 0, null, stream);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetRandomStreamSeed_NewSeed_Offset), 0, null, newSeed);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetRandomStreamSeed_NativeFunction, ParamsBuffer);
            
            stream = BlittableMarshaller<UnrealSharp.RandomStream>.FromNative(IntPtr.Add(ParamsBuffer, SetRandomStreamSeed_Stream_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:SetQuaternionSpringStateAngularVelocity
    static readonly IntPtr SetQuaternionSpringStateAngularVelocity_NativeFunction;
    static readonly int SetQuaternionSpringStateAngularVelocity_ParamsSize;
    static readonly int SetQuaternionSpringStateAngularVelocity_SpringState_Offset;
    static readonly int SetQuaternionSpringStateAngularVelocity_AngularVelocity_Offset;
    
    public static void SetQuaternionSpringStateAngularVelocity(ref UnrealSharp.Engine.QuaternionSpringState springState, System.DoubleNumerics.Vector3 angularVelocity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetQuaternionSpringStateAngularVelocity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.QuaternionSpringStateMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetQuaternionSpringStateAngularVelocity_SpringState_Offset), 0, null, springState);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetQuaternionSpringStateAngularVelocity_AngularVelocity_Offset), 0, null, angularVelocity);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetQuaternionSpringStateAngularVelocity_NativeFunction, ParamsBuffer);
            
            springState = UnrealSharp.Engine.QuaternionSpringStateMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetQuaternionSpringStateAngularVelocity_SpringState_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:SetFloatSpringStateVelocity
    static readonly IntPtr SetFloatSpringStateVelocity_NativeFunction;
    static readonly int SetFloatSpringStateVelocity_ParamsSize;
    static readonly int SetFloatSpringStateVelocity_SpringState_Offset;
    static readonly int SetFloatSpringStateVelocity_Velocity_Offset;
    
    public static void SetFloatSpringStateVelocity(ref UnrealSharp.Engine.FloatSpringState springState, float velocity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFloatSpringStateVelocity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.FloatSpringStateMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetFloatSpringStateVelocity_SpringState_Offset), 0, null, springState);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetFloatSpringStateVelocity_Velocity_Offset), 0, null, velocity);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetFloatSpringStateVelocity_NativeFunction, ParamsBuffer);
            
            springState = UnrealSharp.Engine.FloatSpringStateMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SetFloatSpringStateVelocity_SpringState_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Set2D
    static readonly IntPtr Set2D_NativeFunction;
    static readonly int Set2D_ParamsSize;
    static readonly int Set2D_A_Offset;
    static readonly int Set2D_X_Offset;
    static readonly int Set2D_Y_Offset;
    
    public static void Set(ref System.DoubleNumerics.Vector2 a, double x, double y)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Set2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Set2D_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Set2D_X_Offset), 0, null, x);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Set2D_Y_Offset), 0, null, y);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Set2D_NativeFunction, ParamsBuffer);
            
            a = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Set2D_A_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:SelectVector
    static readonly IntPtr SelectVector_NativeFunction;
    static readonly int SelectVector_ParamsSize;
    static readonly int SelectVector_A_Offset;
    static readonly int SelectVector_B_Offset;
    static readonly int SelectVector_bPickA_Offset;
    static readonly int SelectVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 SelectVector(System.DoubleNumerics.Vector3 a, System.DoubleNumerics.Vector3 b, bool bPickA)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SelectVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SelectVector_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SelectVector_B_Offset), 0, null, b);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SelectVector_bPickA_Offset), 0, null, bPickA);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SelectVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, SelectVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:SelectTransform
    static readonly IntPtr SelectTransform_NativeFunction;
    static readonly int SelectTransform_ParamsSize;
    static readonly int SelectTransform_A_Offset;
    static readonly int SelectTransform_B_Offset;
    static readonly int SelectTransform_bPickA_Offset;
    static readonly int SelectTransform_ReturnValue_Offset;
    
    public static UnrealSharp.Transform SelectTransform(UnrealSharp.Transform a, UnrealSharp.Transform b, bool bPickA)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SelectTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SelectTransform_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SelectTransform_B_Offset), 0, null, b);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SelectTransform_bPickA_Offset), 0, null, bPickA);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SelectTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, SelectTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:SelectString
    static readonly IntPtr SelectString_NativeFunction;
    static readonly int SelectString_ParamsSize;
    static readonly int SelectString_A_Offset;
    static readonly int SelectString_B_Offset;
    static readonly int SelectString_bPickA_Offset;
    static readonly int SelectString_ReturnValue_Offset;
    
    public static string SelectString(string a, string b, bool bPickA)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SelectString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr A_NativePtr = IntPtr.Add(ParamsBuffer,SelectString_A_Offset);
            StringMarshaller.ToNative(A_NativePtr,0,null,a);
            IntPtr B_NativePtr = IntPtr.Add(ParamsBuffer,SelectString_B_Offset);
            StringMarshaller.ToNative(B_NativePtr,0,null,b);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SelectString_bPickA_Offset), 0, null, bPickA);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SelectString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,SelectString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(A_NativePtr, 0);
            StringMarshaller.DestructInstance(B_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:SelectRotator
    static readonly IntPtr SelectRotator_NativeFunction;
    static readonly int SelectRotator_ParamsSize;
    static readonly int SelectRotator_A_Offset;
    static readonly int SelectRotator_B_Offset;
    static readonly int SelectRotator_bPickA_Offset;
    static readonly int SelectRotator_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator SelectRotator(UnrealSharp.Rotator a, UnrealSharp.Rotator b, bool bPickA)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SelectRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SelectRotator_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SelectRotator_B_Offset), 0, null, b);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SelectRotator_bPickA_Offset), 0, null, bPickA);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SelectRotator_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, SelectRotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:SelectObject
    static readonly IntPtr SelectObject_NativeFunction;
    static readonly int SelectObject_ParamsSize;
    static readonly int SelectObject_A_Offset;
    static readonly int SelectObject_B_Offset;
    static readonly int SelectObject_bSelectA_Offset;
    static readonly int SelectObject_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Object SelectObject(UnrealSharp.CoreUObject.Object a, UnrealSharp.CoreUObject.Object b, bool bSelectA)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SelectObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SelectObject_A_Offset), 0, null, a);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SelectObject_B_Offset), 0, null, b);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SelectObject_bSelectA_Offset), 0, null, bSelectA);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SelectObject_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Object returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, SelectObject_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:SelectInt
    static readonly IntPtr SelectInt_NativeFunction;
    static readonly int SelectInt_ParamsSize;
    static readonly int SelectInt_A_Offset;
    static readonly int SelectInt_B_Offset;
    static readonly int SelectInt_bPickA_Offset;
    static readonly int SelectInt_ReturnValue_Offset;
    
    public static int SelectInt(int a, int b, bool bPickA)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SelectInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SelectInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SelectInt_B_Offset), 0, null, b);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SelectInt_bPickA_Offset), 0, null, bPickA);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SelectInt_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, SelectInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:SelectFloat
    static readonly IntPtr SelectFloat_NativeFunction;
    static readonly int SelectFloat_ParamsSize;
    static readonly int SelectFloat_A_Offset;
    static readonly int SelectFloat_B_Offset;
    static readonly int SelectFloat_bPickA_Offset;
    static readonly int SelectFloat_ReturnValue_Offset;
    
    public static double SelectFloat(double a, double b, bool bPickA)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SelectFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, SelectFloat_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, SelectFloat_B_Offset), 0, null, b);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SelectFloat_bPickA_Offset), 0, null, bPickA);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SelectFloat_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, SelectFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:SelectColor
    static readonly IntPtr SelectColor_NativeFunction;
    static readonly int SelectColor_ParamsSize;
    static readonly int SelectColor_A_Offset;
    static readonly int SelectColor_B_Offset;
    static readonly int SelectColor_bPickA_Offset;
    static readonly int SelectColor_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor SelectColor(UnrealSharp.CoreUObject.LinearColor a, UnrealSharp.CoreUObject.LinearColor b, bool bPickA)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SelectColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SelectColor_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SelectColor_B_Offset), 0, null, b);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SelectColor_bPickA_Offset), 0, null, bPickA);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SelectColor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, SelectColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:SelectClass
    static readonly IntPtr SelectClass_NativeFunction;
    static readonly int SelectClass_ParamsSize;
    static readonly int SelectClass_A_Offset;
    static readonly int SelectClass_B_Offset;
    static readonly int SelectClass_bSelectA_Offset;
    static readonly int SelectClass_ReturnValue_Offset;
    
    public static SubclassOf<UnrealSharp.CoreUObject.Object> SelectClass(SubclassOf<UnrealSharp.CoreUObject.Object> a, SubclassOf<UnrealSharp.CoreUObject.Object> b, bool bSelectA)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SelectClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SelectClass_A_Offset), 0, null, a);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SelectClass_B_Offset), 0, null, b);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SelectClass_bSelectA_Offset), 0, null, bSelectA);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SelectClass_NativeFunction, ParamsBuffer);
            
            SubclassOf<UnrealSharp.CoreUObject.Object> returnValue;
            returnValue = SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, SelectClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:SeedRandomStream
    static readonly IntPtr SeedRandomStream_NativeFunction;
    static readonly int SeedRandomStream_ParamsSize;
    static readonly int SeedRandomStream_Stream_Offset;
    
    public static void GenerateNewSeed(ref UnrealSharp.RandomStream stream)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SeedRandomStream_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.RandomStream>.ToNative(IntPtr.Add(ParamsBuffer, SeedRandomStream_Stream_Offset), 0, null, stream);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SeedRandomStream_NativeFunction, ParamsBuffer);
            
            stream = BlittableMarshaller<UnrealSharp.RandomStream>.FromNative(IntPtr.Add(ParamsBuffer, SeedRandomStream_Stream_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:SafeDivide
    static readonly IntPtr SafeDivide_NativeFunction;
    static readonly int SafeDivide_ParamsSize;
    static readonly int SafeDivide_A_Offset;
    static readonly int SafeDivide_B_Offset;
    static readonly int SafeDivide_ReturnValue_Offset;
    
    public static double SafeDivide(double a, double b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SafeDivide_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, SafeDivide_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, SafeDivide_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SafeDivide_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, SafeDivide_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Round64
    static readonly IntPtr Round64_NativeFunction;
    static readonly int Round64_ParamsSize;
    static readonly int Round64_A_Offset;
    static readonly int Round64_ReturnValue_Offset;
    
    public static long Round64(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Round64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Round64_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Round64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, Round64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Round
    static readonly IntPtr Round_NativeFunction;
    static readonly int Round_ParamsSize;
    static readonly int Round_A_Offset;
    static readonly int Round_ReturnValue_Offset;
    
    public static int Round(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Round_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Round_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Round_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Round_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RotatorFromAxisAndAngle
    static readonly IntPtr RotatorFromAxisAndAngle_NativeFunction;
    static readonly int RotatorFromAxisAndAngle_ParamsSize;
    static readonly int RotatorFromAxisAndAngle_Axis_Offset;
    static readonly int RotatorFromAxisAndAngle_Angle_Offset;
    static readonly int RotatorFromAxisAndAngle_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator RotatorFromAxisAndAngle(System.DoubleNumerics.Vector3 axis, float angle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RotatorFromAxisAndAngle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, RotatorFromAxisAndAngle_Axis_Offset), 0, null, axis);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RotatorFromAxisAndAngle_Angle_Offset), 0, null, angle);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RotatorFromAxisAndAngle_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, RotatorFromAxisAndAngle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RotateAngleAxis
    static readonly IntPtr RotateAngleAxis_NativeFunction;
    static readonly int RotateAngleAxis_ParamsSize;
    static readonly int RotateAngleAxis_InVect_Offset;
    static readonly int RotateAngleAxis_AngleDeg_Offset;
    static readonly int RotateAngleAxis_Axis_Offset;
    static readonly int RotateAngleAxis_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 RotateAngleAxis(System.DoubleNumerics.Vector3 inVect, float angleDeg, System.DoubleNumerics.Vector3 axis)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RotateAngleAxis_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, RotateAngleAxis_InVect_Offset), 0, null, inVect);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RotateAngleAxis_AngleDeg_Offset), 0, null, angleDeg);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, RotateAngleAxis_Axis_Offset), 0, null, axis);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RotateAngleAxis_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, RotateAngleAxis_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RLerp
    static readonly IntPtr RLerp_NativeFunction;
    static readonly int RLerp_ParamsSize;
    static readonly int RLerp_A_Offset;
    static readonly int RLerp_B_Offset;
    static readonly int RLerp_Alpha_Offset;
    static readonly int RLerp_bShortestPath_Offset;
    static readonly int RLerp_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator Lerp(UnrealSharp.Rotator a, UnrealSharp.Rotator b, float alpha, bool bShortestPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RLerp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, RLerp_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, RLerp_B_Offset), 0, null, b);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RLerp_Alpha_Offset), 0, null, alpha);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, RLerp_bShortestPath_Offset), 0, null, bShortestPath);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RLerp_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, RLerp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RInterpTo_Constant
    static readonly IntPtr RInterpTo_Constant_NativeFunction;
    static readonly int RInterpTo_Constant_ParamsSize;
    static readonly int RInterpTo_Constant_Current_Offset;
    static readonly int RInterpTo_Constant_Target_Offset;
    static readonly int RInterpTo_Constant_DeltaTime_Offset;
    static readonly int RInterpTo_Constant_InterpSpeed_Offset;
    static readonly int RInterpTo_Constant_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator RInterpTo_Constant(UnrealSharp.Rotator current, UnrealSharp.Rotator target, float deltaTime, float interpSpeed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RInterpTo_Constant_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, RInterpTo_Constant_Current_Offset), 0, null, current);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, RInterpTo_Constant_Target_Offset), 0, null, target);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RInterpTo_Constant_DeltaTime_Offset), 0, null, deltaTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RInterpTo_Constant_InterpSpeed_Offset), 0, null, interpSpeed);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RInterpTo_Constant_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, RInterpTo_Constant_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RInterpTo
    static readonly IntPtr RInterpTo_NativeFunction;
    static readonly int RInterpTo_ParamsSize;
    static readonly int RInterpTo_Current_Offset;
    static readonly int RInterpTo_Target_Offset;
    static readonly int RInterpTo_DeltaTime_Offset;
    static readonly int RInterpTo_InterpSpeed_Offset;
    static readonly int RInterpTo_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator RInterpTo(UnrealSharp.Rotator current, UnrealSharp.Rotator target, float deltaTime, float interpSpeed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RInterpTo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, RInterpTo_Current_Offset), 0, null, current);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, RInterpTo_Target_Offset), 0, null, target);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RInterpTo_DeltaTime_Offset), 0, null, deltaTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RInterpTo_InterpSpeed_Offset), 0, null, interpSpeed);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RInterpTo_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, RInterpTo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RGBToHSV_Vector
    static readonly IntPtr RGBToHSV_Vector_NativeFunction;
    static readonly int RGBToHSV_Vector_ParamsSize;
    static readonly int RGBToHSV_Vector_RGB_Offset;
    static readonly int RGBToHSV_Vector_HSV_Offset;
    
    public static void RGBIntoHSV(UnrealSharp.CoreUObject.LinearColor rGB, out UnrealSharp.CoreUObject.LinearColor hSV)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RGBToHSV_Vector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, RGBToHSV_Vector_RGB_Offset), 0, null, rGB);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RGBToHSV_Vector_NativeFunction, ParamsBuffer);
            
            hSV = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, RGBToHSV_Vector_HSV_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RGBToHSV
    static readonly IntPtr RGBToHSV_NativeFunction;
    static readonly int RGBToHSV_ParamsSize;
    static readonly int RGBToHSV_InColor_Offset;
    static readonly int RGBToHSV_H_Offset;
    static readonly int RGBToHSV_S_Offset;
    static readonly int RGBToHSV_V_Offset;
    static readonly int RGBToHSV_A_Offset;
    
    public static void RGBIntoHSVComponents(UnrealSharp.CoreUObject.LinearColor inColor, out float h, out float s, out float v, out float a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RGBToHSV_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, RGBToHSV_InColor_Offset), 0, null, inColor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RGBToHSV_NativeFunction, ParamsBuffer);
            
            h = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, RGBToHSV_H_Offset), 0, null);
            s = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, RGBToHSV_S_Offset), 0, null);
            v = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, RGBToHSV_V_Offset), 0, null);
            a = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, RGBToHSV_A_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RGBLinearToHSV
    static readonly IntPtr RGBLinearToHSV_NativeFunction;
    static readonly int RGBLinearToHSV_ParamsSize;
    static readonly int RGBLinearToHSV_RGB_Offset;
    static readonly int RGBLinearToHSV_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor RGBToHSV(UnrealSharp.CoreUObject.LinearColor rGB)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RGBLinearToHSV_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, RGBLinearToHSV_RGB_Offset), 0, null, rGB);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RGBLinearToHSV_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, RGBLinearToHSV_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:ResetVectorSpringState
    static readonly IntPtr ResetVectorSpringState_NativeFunction;
    static readonly int ResetVectorSpringState_ParamsSize;
    static readonly int ResetVectorSpringState_SpringState_Offset;
    
    public static void ResetVectorSpringState(ref UnrealSharp.Engine.VectorSpringState springState)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ResetVectorSpringState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.VectorSpringStateMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ResetVectorSpringState_SpringState_Offset), 0, null, springState);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ResetVectorSpringState_NativeFunction, ParamsBuffer);
            
            springState = UnrealSharp.Engine.VectorSpringStateMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ResetVectorSpringState_SpringState_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:ResetRandomStream
    static readonly IntPtr ResetRandomStream_NativeFunction;
    static readonly int ResetRandomStream_ParamsSize;
    static readonly int ResetRandomStream_Stream_Offset;
    
    public static void Reset(UnrealSharp.RandomStream stream)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ResetRandomStream_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.RandomStream>.ToNative(IntPtr.Add(ParamsBuffer, ResetRandomStream_Stream_Offset), 0, null, stream);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ResetRandomStream_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:ResetQuaternionSpringState
    static readonly IntPtr ResetQuaternionSpringState_NativeFunction;
    static readonly int ResetQuaternionSpringState_ParamsSize;
    static readonly int ResetQuaternionSpringState_SpringState_Offset;
    
    public static void ResetQuaternionSpringState(ref UnrealSharp.Engine.QuaternionSpringState springState)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ResetQuaternionSpringState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.QuaternionSpringStateMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ResetQuaternionSpringState_SpringState_Offset), 0, null, springState);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ResetQuaternionSpringState_NativeFunction, ParamsBuffer);
            
            springState = UnrealSharp.Engine.QuaternionSpringStateMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ResetQuaternionSpringState_SpringState_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:ResetFloatSpringState
    static readonly IntPtr ResetFloatSpringState_NativeFunction;
    static readonly int ResetFloatSpringState_ParamsSize;
    static readonly int ResetFloatSpringState_SpringState_Offset;
    
    public static void ResetFloatSpringState(ref UnrealSharp.Engine.FloatSpringState springState)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ResetFloatSpringState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.FloatSpringStateMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ResetFloatSpringState_SpringState_Offset), 0, null, springState);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ResetFloatSpringState_NativeFunction, ParamsBuffer);
            
            springState = UnrealSharp.Engine.FloatSpringStateMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ResetFloatSpringState_SpringState_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomUnitVectorInEllipticalConeInRadiansFromStream
    static readonly IntPtr RandomUnitVectorInEllipticalConeInRadiansFromStream_NativeFunction;
    static readonly int RandomUnitVectorInEllipticalConeInRadiansFromStream_ParamsSize;
    static readonly int RandomUnitVectorInEllipticalConeInRadiansFromStream_Stream_Offset;
    static readonly int RandomUnitVectorInEllipticalConeInRadiansFromStream_ConeDir_Offset;
    static readonly int RandomUnitVectorInEllipticalConeInRadiansFromStream_MaxYawInRadians_Offset;
    static readonly int RandomUnitVectorInEllipticalConeInRadiansFromStream_MaxPitchInRadians_Offset;
    static readonly int RandomUnitVectorInEllipticalConeInRadiansFromStream_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 RandomUnitVectorInEllipticalConeInRadians(UnrealSharp.RandomStream stream, System.DoubleNumerics.Vector3 coneDir, float maxYawInRadians, float maxPitchInRadians)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomUnitVectorInEllipticalConeInRadiansFromStream_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.RandomStream>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInEllipticalConeInRadiansFromStream_Stream_Offset), 0, null, stream);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInEllipticalConeInRadiansFromStream_ConeDir_Offset), 0, null, coneDir);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInEllipticalConeInRadiansFromStream_MaxYawInRadians_Offset), 0, null, maxYawInRadians);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInEllipticalConeInRadiansFromStream_MaxPitchInRadians_Offset), 0, null, maxPitchInRadians);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomUnitVectorInEllipticalConeInRadiansFromStream_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInEllipticalConeInRadiansFromStream_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomUnitVectorInEllipticalConeInRadians
    static readonly IntPtr RandomUnitVectorInEllipticalConeInRadians_NativeFunction;
    static readonly int RandomUnitVectorInEllipticalConeInRadians_ParamsSize;
    static readonly int RandomUnitVectorInEllipticalConeInRadians_ConeDir_Offset;
    static readonly int RandomUnitVectorInEllipticalConeInRadians_MaxYawInRadians_Offset;
    static readonly int RandomUnitVectorInEllipticalConeInRadians_MaxPitchInRadians_Offset;
    static readonly int RandomUnitVectorInEllipticalConeInRadians_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 RandomUnitVectorInEllipticalConeInRadians(System.DoubleNumerics.Vector3 coneDir, float maxYawInRadians, float maxPitchInRadians)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomUnitVectorInEllipticalConeInRadians_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInEllipticalConeInRadians_ConeDir_Offset), 0, null, coneDir);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInEllipticalConeInRadians_MaxYawInRadians_Offset), 0, null, maxYawInRadians);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInEllipticalConeInRadians_MaxPitchInRadians_Offset), 0, null, maxPitchInRadians);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomUnitVectorInEllipticalConeInRadians_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInEllipticalConeInRadians_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomUnitVectorInEllipticalConeInDegreesFromStream
    static readonly IntPtr RandomUnitVectorInEllipticalConeInDegreesFromStream_NativeFunction;
    static readonly int RandomUnitVectorInEllipticalConeInDegreesFromStream_ParamsSize;
    static readonly int RandomUnitVectorInEllipticalConeInDegreesFromStream_Stream_Offset;
    static readonly int RandomUnitVectorInEllipticalConeInDegreesFromStream_ConeDir_Offset;
    static readonly int RandomUnitVectorInEllipticalConeInDegreesFromStream_MaxYawInDegrees_Offset;
    static readonly int RandomUnitVectorInEllipticalConeInDegreesFromStream_MaxPitchInDegrees_Offset;
    static readonly int RandomUnitVectorInEllipticalConeInDegreesFromStream_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 RandomUnitVectorInEllipticalConeInDegrees(UnrealSharp.RandomStream stream, System.DoubleNumerics.Vector3 coneDir, float maxYawInDegrees, float maxPitchInDegrees)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomUnitVectorInEllipticalConeInDegreesFromStream_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.RandomStream>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInEllipticalConeInDegreesFromStream_Stream_Offset), 0, null, stream);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInEllipticalConeInDegreesFromStream_ConeDir_Offset), 0, null, coneDir);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInEllipticalConeInDegreesFromStream_MaxYawInDegrees_Offset), 0, null, maxYawInDegrees);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInEllipticalConeInDegreesFromStream_MaxPitchInDegrees_Offset), 0, null, maxPitchInDegrees);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomUnitVectorInEllipticalConeInDegreesFromStream_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInEllipticalConeInDegreesFromStream_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomUnitVectorInEllipticalConeInDegrees
    static readonly IntPtr RandomUnitVectorInEllipticalConeInDegrees_NativeFunction;
    static readonly int RandomUnitVectorInEllipticalConeInDegrees_ParamsSize;
    static readonly int RandomUnitVectorInEllipticalConeInDegrees_ConeDir_Offset;
    static readonly int RandomUnitVectorInEllipticalConeInDegrees_MaxYawInDegrees_Offset;
    static readonly int RandomUnitVectorInEllipticalConeInDegrees_MaxPitchInDegrees_Offset;
    static readonly int RandomUnitVectorInEllipticalConeInDegrees_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 RandomUnitVectorInEllipticalConeInDegrees(System.DoubleNumerics.Vector3 coneDir, float maxYawInDegrees, float maxPitchInDegrees)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomUnitVectorInEllipticalConeInDegrees_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInEllipticalConeInDegrees_ConeDir_Offset), 0, null, coneDir);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInEllipticalConeInDegrees_MaxYawInDegrees_Offset), 0, null, maxYawInDegrees);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInEllipticalConeInDegrees_MaxPitchInDegrees_Offset), 0, null, maxPitchInDegrees);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomUnitVectorInEllipticalConeInDegrees_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInEllipticalConeInDegrees_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomUnitVectorInConeInRadiansFromStream
    static readonly IntPtr RandomUnitVectorInConeInRadiansFromStream_NativeFunction;
    static readonly int RandomUnitVectorInConeInRadiansFromStream_ParamsSize;
    static readonly int RandomUnitVectorInConeInRadiansFromStream_Stream_Offset;
    static readonly int RandomUnitVectorInConeInRadiansFromStream_ConeDir_Offset;
    static readonly int RandomUnitVectorInConeInRadiansFromStream_ConeHalfAngleInRadians_Offset;
    static readonly int RandomUnitVectorInConeInRadiansFromStream_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 RandomUnitVectorInConeInRadians(UnrealSharp.RandomStream stream, System.DoubleNumerics.Vector3 coneDir, float coneHalfAngleInRadians)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomUnitVectorInConeInRadiansFromStream_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.RandomStream>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInConeInRadiansFromStream_Stream_Offset), 0, null, stream);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInConeInRadiansFromStream_ConeDir_Offset), 0, null, coneDir);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInConeInRadiansFromStream_ConeHalfAngleInRadians_Offset), 0, null, coneHalfAngleInRadians);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomUnitVectorInConeInRadiansFromStream_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInConeInRadiansFromStream_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomUnitVectorInConeInRadians
    static readonly IntPtr RandomUnitVectorInConeInRadians_NativeFunction;
    static readonly int RandomUnitVectorInConeInRadians_ParamsSize;
    static readonly int RandomUnitVectorInConeInRadians_ConeDir_Offset;
    static readonly int RandomUnitVectorInConeInRadians_ConeHalfAngleInRadians_Offset;
    static readonly int RandomUnitVectorInConeInRadians_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 RandomUnitVectorInConeInRadians(System.DoubleNumerics.Vector3 coneDir, float coneHalfAngleInRadians)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomUnitVectorInConeInRadians_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInConeInRadians_ConeDir_Offset), 0, null, coneDir);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInConeInRadians_ConeHalfAngleInRadians_Offset), 0, null, coneHalfAngleInRadians);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomUnitVectorInConeInRadians_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInConeInRadians_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomUnitVectorInConeInDegreesFromStream
    static readonly IntPtr RandomUnitVectorInConeInDegreesFromStream_NativeFunction;
    static readonly int RandomUnitVectorInConeInDegreesFromStream_ParamsSize;
    static readonly int RandomUnitVectorInConeInDegreesFromStream_Stream_Offset;
    static readonly int RandomUnitVectorInConeInDegreesFromStream_ConeDir_Offset;
    static readonly int RandomUnitVectorInConeInDegreesFromStream_ConeHalfAngleInDegrees_Offset;
    static readonly int RandomUnitVectorInConeInDegreesFromStream_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 RandomUnitVectorInConeInDegrees(UnrealSharp.RandomStream stream, System.DoubleNumerics.Vector3 coneDir, float coneHalfAngleInDegrees)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomUnitVectorInConeInDegreesFromStream_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.RandomStream>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInConeInDegreesFromStream_Stream_Offset), 0, null, stream);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInConeInDegreesFromStream_ConeDir_Offset), 0, null, coneDir);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInConeInDegreesFromStream_ConeHalfAngleInDegrees_Offset), 0, null, coneHalfAngleInDegrees);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomUnitVectorInConeInDegreesFromStream_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInConeInDegreesFromStream_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomUnitVectorInConeInDegrees
    static readonly IntPtr RandomUnitVectorInConeInDegrees_NativeFunction;
    static readonly int RandomUnitVectorInConeInDegrees_ParamsSize;
    static readonly int RandomUnitVectorInConeInDegrees_ConeDir_Offset;
    static readonly int RandomUnitVectorInConeInDegrees_ConeHalfAngleInDegrees_Offset;
    static readonly int RandomUnitVectorInConeInDegrees_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 RandomUnitVectorInConeInDegrees(System.DoubleNumerics.Vector3 coneDir, float coneHalfAngleInDegrees)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomUnitVectorInConeInDegrees_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInConeInDegrees_ConeDir_Offset), 0, null, coneDir);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInConeInDegrees_ConeHalfAngleInDegrees_Offset), 0, null, coneHalfAngleInDegrees);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomUnitVectorInConeInDegrees_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorInConeInDegrees_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomUnitVectorFromStream
    static readonly IntPtr RandomUnitVectorFromStream_NativeFunction;
    static readonly int RandomUnitVectorFromStream_ParamsSize;
    static readonly int RandomUnitVectorFromStream_Stream_Offset;
    static readonly int RandomUnitVectorFromStream_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 RandomUnitVector(UnrealSharp.RandomStream stream)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomUnitVectorFromStream_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.RandomStream>.ToNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorFromStream_Stream_Offset), 0, null, stream);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomUnitVectorFromStream_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, RandomUnitVectorFromStream_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomUnitVector
    static readonly IntPtr RandomUnitVector_NativeFunction;
    static readonly int RandomUnitVector_ParamsSize;
    static readonly int RandomUnitVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 RandomUnitVector()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomUnitVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomUnitVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, RandomUnitVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomRotatorFromStream
    static readonly IntPtr RandomRotatorFromStream_NativeFunction;
    static readonly int RandomRotatorFromStream_ParamsSize;
    static readonly int RandomRotatorFromStream_Stream_Offset;
    static readonly int RandomRotatorFromStream_bRoll_Offset;
    static readonly int RandomRotatorFromStream_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator RandomRotator(UnrealSharp.RandomStream stream, bool bRoll)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomRotatorFromStream_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.RandomStream>.ToNative(IntPtr.Add(ParamsBuffer, RandomRotatorFromStream_Stream_Offset), 0, null, stream);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, RandomRotatorFromStream_bRoll_Offset), 0, null, bRoll);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomRotatorFromStream_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, RandomRotatorFromStream_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomRotator
    static readonly IntPtr RandomRotator_NativeFunction;
    static readonly int RandomRotator_ParamsSize;
    static readonly int RandomRotator_bRoll_Offset;
    static readonly int RandomRotator_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator RandomRotator(bool bRoll = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, RandomRotator_bRoll_Offset), 0, null, bRoll);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomRotator_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, RandomRotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomPointInBoundingBoxFromStream_Box
    static readonly IntPtr RandomPointInBoundingBoxFromStream_Box_NativeFunction;
    static readonly int RandomPointInBoundingBoxFromStream_Box_ParamsSize;
    static readonly int RandomPointInBoundingBoxFromStream_Box_Stream_Offset;
    static readonly int RandomPointInBoundingBoxFromStream_Box_Box_Offset;
    static readonly int RandomPointInBoundingBoxFromStream_Box_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 RandomPointInBox(UnrealSharp.RandomStream stream, UnrealSharp.CoreUObject.Box box)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomPointInBoundingBoxFromStream_Box_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.RandomStream>.ToNative(IntPtr.Add(ParamsBuffer, RandomPointInBoundingBoxFromStream_Box_Stream_Offset), 0, null, stream);
            UnrealSharp.CoreUObject.BoxMarshaler.ToNative(IntPtr.Add(ParamsBuffer, RandomPointInBoundingBoxFromStream_Box_Box_Offset), 0, null, box);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomPointInBoundingBoxFromStream_Box_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, RandomPointInBoundingBoxFromStream_Box_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomPointInBoundingBoxFromStream
    static readonly IntPtr RandomPointInBoundingBoxFromStream_NativeFunction;
    static readonly int RandomPointInBoundingBoxFromStream_ParamsSize;
    static readonly int RandomPointInBoundingBoxFromStream_Stream_Offset;
    static readonly int RandomPointInBoundingBoxFromStream_Center_Offset;
    static readonly int RandomPointInBoundingBoxFromStream_HalfSize_Offset;
    static readonly int RandomPointInBoundingBoxFromStream_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 RandomPointInBoundedBox(UnrealSharp.RandomStream stream, System.DoubleNumerics.Vector3 center, System.DoubleNumerics.Vector3 halfSize)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomPointInBoundingBoxFromStream_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.RandomStream>.ToNative(IntPtr.Add(ParamsBuffer, RandomPointInBoundingBoxFromStream_Stream_Offset), 0, null, stream);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, RandomPointInBoundingBoxFromStream_Center_Offset), 0, null, center);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, RandomPointInBoundingBoxFromStream_HalfSize_Offset), 0, null, halfSize);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomPointInBoundingBoxFromStream_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, RandomPointInBoundingBoxFromStream_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomPointInBoundingBox_Box
    static readonly IntPtr RandomPointInBoundingBox_Box_NativeFunction;
    static readonly int RandomPointInBoundingBox_Box_ParamsSize;
    static readonly int RandomPointInBoundingBox_Box_Box_Offset;
    static readonly int RandomPointInBoundingBox_Box_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 RandomPointInBoxExtents(UnrealSharp.CoreUObject.Box box)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomPointInBoundingBox_Box_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.BoxMarshaler.ToNative(IntPtr.Add(ParamsBuffer, RandomPointInBoundingBox_Box_Box_Offset), 0, null, box);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomPointInBoundingBox_Box_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, RandomPointInBoundingBox_Box_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomPointInBoundingBox
    static readonly IntPtr RandomPointInBoundingBox_NativeFunction;
    static readonly int RandomPointInBoundingBox_ParamsSize;
    static readonly int RandomPointInBoundingBox_Center_Offset;
    static readonly int RandomPointInBoundingBox_HalfSize_Offset;
    static readonly int RandomPointInBoundingBox_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 RandomPointInBoxExtents(System.DoubleNumerics.Vector3 center, System.DoubleNumerics.Vector3 halfSize)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomPointInBoundingBox_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, RandomPointInBoundingBox_Center_Offset), 0, null, center);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, RandomPointInBoundingBox_HalfSize_Offset), 0, null, halfSize);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomPointInBoundingBox_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, RandomPointInBoundingBox_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomIntegerInRangeFromStream
    static readonly IntPtr RandomIntegerInRangeFromStream_NativeFunction;
    static readonly int RandomIntegerInRangeFromStream_ParamsSize;
    static readonly int RandomIntegerInRangeFromStream_Stream_Offset;
    static readonly int RandomIntegerInRangeFromStream_Min_Offset;
    static readonly int RandomIntegerInRangeFromStream_Max_Offset;
    static readonly int RandomIntegerInRangeFromStream_ReturnValue_Offset;
    
    public static int RandomIntInRange(UnrealSharp.RandomStream stream, int min, int max)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomIntegerInRangeFromStream_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.RandomStream>.ToNative(IntPtr.Add(ParamsBuffer, RandomIntegerInRangeFromStream_Stream_Offset), 0, null, stream);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, RandomIntegerInRangeFromStream_Min_Offset), 0, null, min);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, RandomIntegerInRangeFromStream_Max_Offset), 0, null, max);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomIntegerInRangeFromStream_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, RandomIntegerInRangeFromStream_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomIntegerInRange
    static readonly IntPtr RandomIntegerInRange_NativeFunction;
    static readonly int RandomIntegerInRange_ParamsSize;
    static readonly int RandomIntegerInRange_Min_Offset;
    static readonly int RandomIntegerInRange_Max_Offset;
    static readonly int RandomIntegerInRange_ReturnValue_Offset;
    
    public static int RandomIntegerInRange(int min, int max)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomIntegerInRange_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, RandomIntegerInRange_Min_Offset), 0, null, min);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, RandomIntegerInRange_Max_Offset), 0, null, max);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomIntegerInRange_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, RandomIntegerInRange_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomIntegerFromStream
    static readonly IntPtr RandomIntegerFromStream_NativeFunction;
    static readonly int RandomIntegerFromStream_ParamsSize;
    static readonly int RandomIntegerFromStream_Stream_Offset;
    static readonly int RandomIntegerFromStream_Max_Offset;
    static readonly int RandomIntegerFromStream_ReturnValue_Offset;
    
    public static int RandomInt(UnrealSharp.RandomStream stream, int max)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomIntegerFromStream_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.RandomStream>.ToNative(IntPtr.Add(ParamsBuffer, RandomIntegerFromStream_Stream_Offset), 0, null, stream);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, RandomIntegerFromStream_Max_Offset), 0, null, max);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomIntegerFromStream_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, RandomIntegerFromStream_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomInteger64InRange
    static readonly IntPtr RandomInteger64InRange_NativeFunction;
    static readonly int RandomInteger64InRange_ParamsSize;
    static readonly int RandomInteger64InRange_Min_Offset;
    static readonly int RandomInteger64InRange_Max_Offset;
    static readonly int RandomInteger64InRange_ReturnValue_Offset;
    
    public static long RandomInteger64InRange(long min, long max)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomInteger64InRange_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, RandomInteger64InRange_Min_Offset), 0, null, min);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, RandomInteger64InRange_Max_Offset), 0, null, max);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomInteger64InRange_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, RandomInteger64InRange_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomInteger64
    static readonly IntPtr RandomInteger64_NativeFunction;
    static readonly int RandomInteger64_ParamsSize;
    static readonly int RandomInteger64_Max_Offset;
    static readonly int RandomInteger64_ReturnValue_Offset;
    
    public static long RandomInteger64(long max)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomInteger64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, RandomInteger64_Max_Offset), 0, null, max);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomInteger64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, RandomInteger64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomInteger
    static readonly IntPtr RandomInteger_NativeFunction;
    static readonly int RandomInteger_ParamsSize;
    static readonly int RandomInteger_Max_Offset;
    static readonly int RandomInteger_ReturnValue_Offset;
    
    public static int RandomInteger(int max)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomInteger_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, RandomInteger_Max_Offset), 0, null, max);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomInteger_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, RandomInteger_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomFloatInRangeFromStream
    static readonly IntPtr RandomFloatInRangeFromStream_NativeFunction;
    static readonly int RandomFloatInRangeFromStream_ParamsSize;
    static readonly int RandomFloatInRangeFromStream_Stream_Offset;
    static readonly int RandomFloatInRangeFromStream_Min_Offset;
    static readonly int RandomFloatInRangeFromStream_Max_Offset;
    static readonly int RandomFloatInRangeFromStream_ReturnValue_Offset;
    
    public static float RandomFloatInRange(UnrealSharp.RandomStream stream, float min, float max)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomFloatInRangeFromStream_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.RandomStream>.ToNative(IntPtr.Add(ParamsBuffer, RandomFloatInRangeFromStream_Stream_Offset), 0, null, stream);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RandomFloatInRangeFromStream_Min_Offset), 0, null, min);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RandomFloatInRangeFromStream_Max_Offset), 0, null, max);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomFloatInRangeFromStream_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, RandomFloatInRangeFromStream_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomFloatInRange
    static readonly IntPtr RandomFloatInRange_NativeFunction;
    static readonly int RandomFloatInRange_ParamsSize;
    static readonly int RandomFloatInRange_Min_Offset;
    static readonly int RandomFloatInRange_Max_Offset;
    static readonly int RandomFloatInRange_ReturnValue_Offset;
    
    public static double RandomFloatInRange(double min, double max)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomFloatInRange_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, RandomFloatInRange_Min_Offset), 0, null, min);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, RandomFloatInRange_Max_Offset), 0, null, max);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomFloatInRange_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, RandomFloatInRange_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomFloatFromStream
    static readonly IntPtr RandomFloatFromStream_NativeFunction;
    static readonly int RandomFloatFromStream_ParamsSize;
    static readonly int RandomFloatFromStream_Stream_Offset;
    static readonly int RandomFloatFromStream_ReturnValue_Offset;
    
    public static float RandomFloat(UnrealSharp.RandomStream stream)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomFloatFromStream_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.RandomStream>.ToNative(IntPtr.Add(ParamsBuffer, RandomFloatFromStream_Stream_Offset), 0, null, stream);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomFloatFromStream_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, RandomFloatFromStream_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomFloat
    static readonly IntPtr RandomFloat_NativeFunction;
    static readonly int RandomFloat_ParamsSize;
    static readonly int RandomFloat_ReturnValue_Offset;
    
    public static double RandomFloat()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomFloat_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, RandomFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomBoolWithWeightFromStream
    static readonly IntPtr RandomBoolWithWeightFromStream_NativeFunction;
    static readonly int RandomBoolWithWeightFromStream_ParamsSize;
    static readonly int RandomBoolWithWeightFromStream_RandomStream_Offset;
    static readonly int RandomBoolWithWeightFromStream_Weight_Offset;
    static readonly int RandomBoolWithWeightFromStream_ReturnValue_Offset;
    
    public static bool RandomBoolWithWeight(UnrealSharp.RandomStream randomStream, float weight)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomBoolWithWeightFromStream_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.RandomStream>.ToNative(IntPtr.Add(ParamsBuffer, RandomBoolWithWeightFromStream_RandomStream_Offset), 0, null, randomStream);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RandomBoolWithWeightFromStream_Weight_Offset), 0, null, weight);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomBoolWithWeightFromStream_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RandomBoolWithWeightFromStream_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomBoolWithWeight
    static readonly IntPtr RandomBoolWithWeight_NativeFunction;
    static readonly int RandomBoolWithWeight_ParamsSize;
    static readonly int RandomBoolWithWeight_Weight_Offset;
    static readonly int RandomBoolWithWeight_ReturnValue_Offset;
    
    public static bool RandomBoolWithWeight(float weight)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomBoolWithWeight_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, RandomBoolWithWeight_Weight_Offset), 0, null, weight);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomBoolWithWeight_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RandomBoolWithWeight_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomBoolFromStream
    static readonly IntPtr RandomBoolFromStream_NativeFunction;
    static readonly int RandomBoolFromStream_ParamsSize;
    static readonly int RandomBoolFromStream_Stream_Offset;
    static readonly int RandomBoolFromStream_ReturnValue_Offset;
    
    public static bool RandomBool(UnrealSharp.RandomStream stream)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomBoolFromStream_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.RandomStream>.ToNative(IntPtr.Add(ParamsBuffer, RandomBoolFromStream_Stream_Offset), 0, null, stream);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomBoolFromStream_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RandomBoolFromStream_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RandomBool
    static readonly IntPtr RandomBool_NativeFunction;
    static readonly int RandomBool_ParamsSize;
    static readonly int RandomBool_ReturnValue_Offset;
    
    public static bool RandomBool()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RandomBool_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RandomBool_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RandomBool_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:RadiansToDegrees
    static readonly IntPtr RadiansToDegrees_NativeFunction;
    static readonly int RadiansToDegrees_ParamsSize;
    static readonly int RadiansToDegrees_A_Offset;
    static readonly int RadiansToDegrees_ReturnValue_Offset;
    
    public static double RadiansToDegrees(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RadiansToDegrees_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, RadiansToDegrees_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RadiansToDegrees_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, RadiansToDegrees_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:QuaternionSpringInterp
    static readonly IntPtr QuaternionSpringInterp_NativeFunction;
    static readonly int QuaternionSpringInterp_ParamsSize;
    static readonly int QuaternionSpringInterp_Current_Offset;
    static readonly int QuaternionSpringInterp_Target_Offset;
    static readonly int QuaternionSpringInterp_SpringState_Offset;
    static readonly int QuaternionSpringInterp_Stiffness_Offset;
    static readonly int QuaternionSpringInterp_CriticalDampingFactor_Offset;
    static readonly int QuaternionSpringInterp_DeltaTime_Offset;
    static readonly int QuaternionSpringInterp_Mass_Offset;
    static readonly int QuaternionSpringInterp_TargetVelocityAmount_Offset;
    static readonly int QuaternionSpringInterp_bInitializeFromTarget_Offset;
    static readonly int QuaternionSpringInterp_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Quaternion InterpSpringTo(System.DoubleNumerics.Quaternion current, System.DoubleNumerics.Quaternion target, ref UnrealSharp.Engine.QuaternionSpringState springState, float stiffness, float criticalDampingFactor, float deltaTime, float mass = 1.000000f, float targetVelocityAmount = 1.000000f, bool bInitializeFromTarget = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[QuaternionSpringInterp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, QuaternionSpringInterp_Current_Offset), 0, null, current);
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, QuaternionSpringInterp_Target_Offset), 0, null, target);
            UnrealSharp.Engine.QuaternionSpringStateMarshaler.ToNative(IntPtr.Add(ParamsBuffer, QuaternionSpringInterp_SpringState_Offset), 0, null, springState);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, QuaternionSpringInterp_Stiffness_Offset), 0, null, stiffness);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, QuaternionSpringInterp_CriticalDampingFactor_Offset), 0, null, criticalDampingFactor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, QuaternionSpringInterp_DeltaTime_Offset), 0, null, deltaTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, QuaternionSpringInterp_Mass_Offset), 0, null, mass);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, QuaternionSpringInterp_TargetVelocityAmount_Offset), 0, null, targetVelocityAmount);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, QuaternionSpringInterp_bInitializeFromTarget_Offset), 0, null, bInitializeFromTarget);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, QuaternionSpringInterp_NativeFunction, ParamsBuffer);
            
            springState = UnrealSharp.Engine.QuaternionSpringStateMarshaler.FromNative(IntPtr.Add(ParamsBuffer, QuaternionSpringInterp_SpringState_Offset), 0, null);
            System.DoubleNumerics.Quaternion returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, QuaternionSpringInterp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_VectorUp
    static readonly IntPtr Quat_VectorUp_NativeFunction;
    static readonly int Quat_VectorUp_ParamsSize;
    static readonly int Quat_VectorUp_Q_Offset;
    static readonly int Quat_VectorUp_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 VectorUp(System.DoubleNumerics.Quaternion q)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_VectorUp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_VectorUp_Q_Offset), 0, null, q);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_VectorUp_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Quat_VectorUp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_VectorRight
    static readonly IntPtr Quat_VectorRight_NativeFunction;
    static readonly int Quat_VectorRight_ParamsSize;
    static readonly int Quat_VectorRight_Q_Offset;
    static readonly int Quat_VectorRight_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 VectorRight(System.DoubleNumerics.Quaternion q)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_VectorRight_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_VectorRight_Q_Offset), 0, null, q);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_VectorRight_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Quat_VectorRight_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_VectorForward
    static readonly IntPtr Quat_VectorForward_NativeFunction;
    static readonly int Quat_VectorForward_ParamsSize;
    static readonly int Quat_VectorForward_Q_Offset;
    static readonly int Quat_VectorForward_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 VectorForward(System.DoubleNumerics.Quaternion q)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_VectorForward_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_VectorForward_Q_Offset), 0, null, q);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_VectorForward_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Quat_VectorForward_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_UnrotateVector
    static readonly IntPtr Quat_UnrotateVector_NativeFunction;
    static readonly int Quat_UnrotateVector_ParamsSize;
    static readonly int Quat_UnrotateVector_Q_Offset;
    static readonly int Quat_UnrotateVector_V_Offset;
    static readonly int Quat_UnrotateVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 UnrotateVector(System.DoubleNumerics.Quaternion q, System.DoubleNumerics.Vector3 v)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_UnrotateVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_UnrotateVector_Q_Offset), 0, null, q);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Quat_UnrotateVector_V_Offset), 0, null, v);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_UnrotateVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Quat_UnrotateVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_Slerp
    static readonly IntPtr Quat_Slerp_NativeFunction;
    static readonly int Quat_Slerp_ParamsSize;
    static readonly int Quat_Slerp_A_Offset;
    static readonly int Quat_Slerp_B_Offset;
    static readonly int Quat_Slerp_Alpha_Offset;
    static readonly int Quat_Slerp_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Quaternion SlerpQuat(System.DoubleNumerics.Quaternion a, System.DoubleNumerics.Quaternion b, double alpha)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_Slerp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_Slerp_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_Slerp_B_Offset), 0, null, b);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Quat_Slerp_Alpha_Offset), 0, null, alpha);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_Slerp_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Quaternion returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, Quat_Slerp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_SizeSquared
    static readonly IntPtr Quat_SizeSquared_NativeFunction;
    static readonly int Quat_SizeSquared_ParamsSize;
    static readonly int Quat_SizeSquared_Q_Offset;
    static readonly int Quat_SizeSquared_ReturnValue_Offset;
    
    public static float SizeSquared(System.DoubleNumerics.Quaternion q)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_SizeSquared_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_SizeSquared_Q_Offset), 0, null, q);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_SizeSquared_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, Quat_SizeSquared_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_Size
    static readonly IntPtr Quat_Size_NativeFunction;
    static readonly int Quat_Size_ParamsSize;
    static readonly int Quat_Size_Q_Offset;
    static readonly int Quat_Size_ReturnValue_Offset;
    
    public static float Size(System.DoubleNumerics.Quaternion q)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_Size_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_Size_Q_Offset), 0, null, q);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_Size_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, Quat_Size_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_SetFromEuler
    static readonly IntPtr Quat_SetFromEuler_NativeFunction;
    static readonly int Quat_SetFromEuler_ParamsSize;
    static readonly int Quat_SetFromEuler_Q_Offset;
    static readonly int Quat_SetFromEuler_Euler_Offset;
    
    public static void SetFromEuler(ref System.DoubleNumerics.Quaternion q, System.DoubleNumerics.Vector3 euler)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_SetFromEuler_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_SetFromEuler_Q_Offset), 0, null, q);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Quat_SetFromEuler_Euler_Offset), 0, null, euler);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_SetFromEuler_NativeFunction, ParamsBuffer);
            
            q = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, Quat_SetFromEuler_Q_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_SetComponents
    static readonly IntPtr Quat_SetComponents_NativeFunction;
    static readonly int Quat_SetComponents_ParamsSize;
    static readonly int Quat_SetComponents_Q_Offset;
    static readonly int Quat_SetComponents_X_Offset;
    static readonly int Quat_SetComponents_Y_Offset;
    static readonly int Quat_SetComponents_Z_Offset;
    static readonly int Quat_SetComponents_W_Offset;
    
    public static void SetComponents(ref System.DoubleNumerics.Quaternion q, float x, float y, float z, float w)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_SetComponents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_SetComponents_Q_Offset), 0, null, q);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Quat_SetComponents_X_Offset), 0, null, x);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Quat_SetComponents_Y_Offset), 0, null, y);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Quat_SetComponents_Z_Offset), 0, null, z);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Quat_SetComponents_W_Offset), 0, null, w);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_SetComponents_NativeFunction, ParamsBuffer);
            
            q = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, Quat_SetComponents_Q_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_Rotator
    static readonly IntPtr Quat_Rotator_NativeFunction;
    static readonly int Quat_Rotator_ParamsSize;
    static readonly int Quat_Rotator_Q_Offset;
    static readonly int Quat_Rotator_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator Rotator(System.DoubleNumerics.Quaternion q)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_Rotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_Rotator_Q_Offset), 0, null, q);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_Rotator_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, Quat_Rotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_RotateVector
    static readonly IntPtr Quat_RotateVector_NativeFunction;
    static readonly int Quat_RotateVector_ParamsSize;
    static readonly int Quat_RotateVector_Q_Offset;
    static readonly int Quat_RotateVector_V_Offset;
    static readonly int Quat_RotateVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 RotateVector(System.DoubleNumerics.Quaternion q, System.DoubleNumerics.Vector3 v)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_RotateVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_RotateVector_Q_Offset), 0, null, q);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Quat_RotateVector_V_Offset), 0, null, v);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_RotateVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Quat_RotateVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_Normalized
    static readonly IntPtr Quat_Normalized_NativeFunction;
    static readonly int Quat_Normalized_ParamsSize;
    static readonly int Quat_Normalized_Q_Offset;
    static readonly int Quat_Normalized_Tolerance_Offset;
    static readonly int Quat_Normalized_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Quaternion Normalized(System.DoubleNumerics.Quaternion q, float tolerance = 0.000100f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_Normalized_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_Normalized_Q_Offset), 0, null, q);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Quat_Normalized_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_Normalized_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Quaternion returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, Quat_Normalized_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_Normalize
    static readonly IntPtr Quat_Normalize_NativeFunction;
    static readonly int Quat_Normalize_ParamsSize;
    static readonly int Quat_Normalize_Q_Offset;
    static readonly int Quat_Normalize_Tolerance_Offset;
    
    public static void Normalize(ref System.DoubleNumerics.Quaternion q, float tolerance = 0.000100f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_Normalize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_Normalize_Q_Offset), 0, null, q);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Quat_Normalize_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_Normalize_NativeFunction, ParamsBuffer);
            
            q = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, Quat_Normalize_Q_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_MakeFromEuler
    static readonly IntPtr Quat_MakeFromEuler_NativeFunction;
    static readonly int Quat_MakeFromEuler_ParamsSize;
    static readonly int Quat_MakeFromEuler_Euler_Offset;
    static readonly int Quat_MakeFromEuler_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Quaternion Quat_MakeFromEuler(System.DoubleNumerics.Vector3 euler)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_MakeFromEuler_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Quat_MakeFromEuler_Euler_Offset), 0, null, euler);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_MakeFromEuler_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Quaternion returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, Quat_MakeFromEuler_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_Log
    static readonly IntPtr Quat_Log_NativeFunction;
    static readonly int Quat_Log_ParamsSize;
    static readonly int Quat_Log_Q_Offset;
    static readonly int Quat_Log_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Quaternion Log(System.DoubleNumerics.Quaternion q)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_Log_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_Log_Q_Offset), 0, null, q);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_Log_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Quaternion returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, Quat_Log_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_IsNormalized
    static readonly IntPtr Quat_IsNormalized_NativeFunction;
    static readonly int Quat_IsNormalized_ParamsSize;
    static readonly int Quat_IsNormalized_Q_Offset;
    static readonly int Quat_IsNormalized_ReturnValue_Offset;
    
    public static bool IsNormalized(System.DoubleNumerics.Quaternion q)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_IsNormalized_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_IsNormalized_Q_Offset), 0, null, q);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_IsNormalized_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Quat_IsNormalized_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_IsNonFinite
    static readonly IntPtr Quat_IsNonFinite_NativeFunction;
    static readonly int Quat_IsNonFinite_ParamsSize;
    static readonly int Quat_IsNonFinite_Q_Offset;
    static readonly int Quat_IsNonFinite_ReturnValue_Offset;
    
    public static bool IsNonFinite(System.DoubleNumerics.Quaternion q)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_IsNonFinite_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_IsNonFinite_Q_Offset), 0, null, q);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_IsNonFinite_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Quat_IsNonFinite_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_IsIdentity
    static readonly IntPtr Quat_IsIdentity_NativeFunction;
    static readonly int Quat_IsIdentity_ParamsSize;
    static readonly int Quat_IsIdentity_Q_Offset;
    static readonly int Quat_IsIdentity_Tolerance_Offset;
    static readonly int Quat_IsIdentity_ReturnValue_Offset;
    
    public static bool IsIdentity(System.DoubleNumerics.Quaternion q, float tolerance = 0.000100f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_IsIdentity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_IsIdentity_Q_Offset), 0, null, q);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Quat_IsIdentity_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_IsIdentity_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Quat_IsIdentity_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_IsFinite
    static readonly IntPtr Quat_IsFinite_NativeFunction;
    static readonly int Quat_IsFinite_ParamsSize;
    static readonly int Quat_IsFinite_Q_Offset;
    static readonly int Quat_IsFinite_ReturnValue_Offset;
    
    public static bool IsFinite(System.DoubleNumerics.Quaternion q)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_IsFinite_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_IsFinite_Q_Offset), 0, null, q);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_IsFinite_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Quat_IsFinite_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_Inversed
    static readonly IntPtr Quat_Inversed_NativeFunction;
    static readonly int Quat_Inversed_ParamsSize;
    static readonly int Quat_Inversed_Q_Offset;
    static readonly int Quat_Inversed_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Quaternion Inversed(System.DoubleNumerics.Quaternion q)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_Inversed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_Inversed_Q_Offset), 0, null, q);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_Inversed_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Quaternion returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, Quat_Inversed_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_Identity
    static readonly IntPtr Quat_Identity_NativeFunction;
    static readonly int Quat_Identity_ParamsSize;
    static readonly int Quat_Identity_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Quaternion Quat_Identity()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_Identity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_Identity_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Quaternion returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, Quat_Identity_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_GetRotationAxis
    static readonly IntPtr Quat_GetRotationAxis_NativeFunction;
    static readonly int Quat_GetRotationAxis_ParamsSize;
    static readonly int Quat_GetRotationAxis_Q_Offset;
    static readonly int Quat_GetRotationAxis_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetRotationAxis(System.DoubleNumerics.Quaternion q)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_GetRotationAxis_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_GetRotationAxis_Q_Offset), 0, null, q);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_GetRotationAxis_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Quat_GetRotationAxis_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_GetAxisZ
    static readonly IntPtr Quat_GetAxisZ_NativeFunction;
    static readonly int Quat_GetAxisZ_ParamsSize;
    static readonly int Quat_GetAxisZ_Q_Offset;
    static readonly int Quat_GetAxisZ_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetAxisZ(System.DoubleNumerics.Quaternion q)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_GetAxisZ_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_GetAxisZ_Q_Offset), 0, null, q);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_GetAxisZ_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Quat_GetAxisZ_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_GetAxisY
    static readonly IntPtr Quat_GetAxisY_NativeFunction;
    static readonly int Quat_GetAxisY_ParamsSize;
    static readonly int Quat_GetAxisY_Q_Offset;
    static readonly int Quat_GetAxisY_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetAxisY(System.DoubleNumerics.Quaternion q)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_GetAxisY_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_GetAxisY_Q_Offset), 0, null, q);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_GetAxisY_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Quat_GetAxisY_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_GetAxisX
    static readonly IntPtr Quat_GetAxisX_NativeFunction;
    static readonly int Quat_GetAxisX_ParamsSize;
    static readonly int Quat_GetAxisX_Q_Offset;
    static readonly int Quat_GetAxisX_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetAxisX(System.DoubleNumerics.Quaternion q)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_GetAxisX_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_GetAxisX_Q_Offset), 0, null, q);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_GetAxisX_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Quat_GetAxisX_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_GetAngle
    static readonly IntPtr Quat_GetAngle_NativeFunction;
    static readonly int Quat_GetAngle_ParamsSize;
    static readonly int Quat_GetAngle_Q_Offset;
    static readonly int Quat_GetAngle_ReturnValue_Offset;
    
    public static float GetAngle(System.DoubleNumerics.Quaternion q)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_GetAngle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_GetAngle_Q_Offset), 0, null, q);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_GetAngle_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, Quat_GetAngle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_FindBetweenVectors
    static readonly IntPtr Quat_FindBetweenVectors_NativeFunction;
    static readonly int Quat_FindBetweenVectors_ParamsSize;
    static readonly int Quat_FindBetweenVectors_Start_Offset;
    static readonly int Quat_FindBetweenVectors_End_Offset;
    static readonly int Quat_FindBetweenVectors_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Quaternion FindQuatBetweenVectors(System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_FindBetweenVectors_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Quat_FindBetweenVectors_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Quat_FindBetweenVectors_End_Offset), 0, null, end);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_FindBetweenVectors_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Quaternion returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, Quat_FindBetweenVectors_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_FindBetweenNormals
    static readonly IntPtr Quat_FindBetweenNormals_NativeFunction;
    static readonly int Quat_FindBetweenNormals_ParamsSize;
    static readonly int Quat_FindBetweenNormals_StartNormal_Offset;
    static readonly int Quat_FindBetweenNormals_EndNormal_Offset;
    static readonly int Quat_FindBetweenNormals_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Quaternion FindQuatBetweenNormals(System.DoubleNumerics.Vector3 startNormal, System.DoubleNumerics.Vector3 endNormal)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_FindBetweenNormals_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Quat_FindBetweenNormals_StartNormal_Offset), 0, null, startNormal);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Quat_FindBetweenNormals_EndNormal_Offset), 0, null, endNormal);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_FindBetweenNormals_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Quaternion returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, Quat_FindBetweenNormals_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_Exp
    static readonly IntPtr Quat_Exp_NativeFunction;
    static readonly int Quat_Exp_ParamsSize;
    static readonly int Quat_Exp_Q_Offset;
    static readonly int Quat_Exp_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Quaternion Exp(System.DoubleNumerics.Quaternion q)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_Exp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_Exp_Q_Offset), 0, null, q);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_Exp_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Quaternion returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, Quat_Exp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_Euler
    static readonly IntPtr Quat_Euler_NativeFunction;
    static readonly int Quat_Euler_ParamsSize;
    static readonly int Quat_Euler_Q_Offset;
    static readonly int Quat_Euler_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Euler(System.DoubleNumerics.Quaternion q)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_Euler_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_Euler_Q_Offset), 0, null, q);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_Euler_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Quat_Euler_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_EnforceShortestArcWith
    static readonly IntPtr Quat_EnforceShortestArcWith_NativeFunction;
    static readonly int Quat_EnforceShortestArcWith_ParamsSize;
    static readonly int Quat_EnforceShortestArcWith_A_Offset;
    static readonly int Quat_EnforceShortestArcWith_B_Offset;
    
    public static void EnsureShortestArcTo(ref System.DoubleNumerics.Quaternion a, System.DoubleNumerics.Quaternion b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_EnforceShortestArcWith_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_EnforceShortestArcWith_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_EnforceShortestArcWith_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_EnforceShortestArcWith_NativeFunction, ParamsBuffer);
            
            a = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, Quat_EnforceShortestArcWith_A_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Quat_AngularDistance
    static readonly IntPtr Quat_AngularDistance_NativeFunction;
    static readonly int Quat_AngularDistance_ParamsSize;
    static readonly int Quat_AngularDistance_A_Offset;
    static readonly int Quat_AngularDistance_B_Offset;
    static readonly int Quat_AngularDistance_ReturnValue_Offset;
    
    public static float AngularDistance(System.DoubleNumerics.Quaternion a, System.DoubleNumerics.Quaternion b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Quat_AngularDistance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_AngularDistance_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Quat_AngularDistance_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Quat_AngularDistance_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, Quat_AngularDistance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:ProjectVectorOnToVector
    static readonly IntPtr ProjectVectorOnToVector_NativeFunction;
    static readonly int ProjectVectorOnToVector_ParamsSize;
    static readonly int ProjectVectorOnToVector_V_Offset;
    static readonly int ProjectVectorOnToVector_Target_Offset;
    static readonly int ProjectVectorOnToVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 ProjectOnTo(System.DoubleNumerics.Vector3 v, System.DoubleNumerics.Vector3 target)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ProjectVectorOnToVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ProjectVectorOnToVector_V_Offset), 0, null, v);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ProjectVectorOnToVector_Target_Offset), 0, null, target);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ProjectVectorOnToVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, ProjectVectorOnToVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:ProjectVectorOnToPlane
    static readonly IntPtr ProjectVectorOnToPlane_NativeFunction;
    static readonly int ProjectVectorOnToPlane_ParamsSize;
    static readonly int ProjectVectorOnToPlane_V_Offset;
    static readonly int ProjectVectorOnToPlane_PlaneNormal_Offset;
    static readonly int ProjectVectorOnToPlane_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 ProjectOnToPlane(System.DoubleNumerics.Vector3 v, System.DoubleNumerics.Vector3 planeNormal)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ProjectVectorOnToPlane_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ProjectVectorOnToPlane_V_Offset), 0, null, v);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ProjectVectorOnToPlane_PlaneNormal_Offset), 0, null, planeNormal);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ProjectVectorOnToPlane_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, ProjectVectorOnToPlane_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:ProjectPointOnToPlane
    static readonly IntPtr ProjectPointOnToPlane_NativeFunction;
    static readonly int ProjectPointOnToPlane_ParamsSize;
    static readonly int ProjectPointOnToPlane_Point_Offset;
    static readonly int ProjectPointOnToPlane_PlaneBase_Offset;
    static readonly int ProjectPointOnToPlane_PlaneNormal_Offset;
    static readonly int ProjectPointOnToPlane_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 ProjectPointOnToPlane(System.DoubleNumerics.Vector3 point, System.DoubleNumerics.Vector3 planeBase, System.DoubleNumerics.Vector3 planeNormal)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ProjectPointOnToPlane_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ProjectPointOnToPlane_Point_Offset), 0, null, point);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ProjectPointOnToPlane_PlaneBase_Offset), 0, null, planeBase);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ProjectPointOnToPlane_PlaneNormal_Offset), 0, null, planeNormal);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ProjectPointOnToPlane_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, ProjectPointOnToPlane_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:PointsAreCoplanar
    static readonly IntPtr PointsAreCoplanar_NativeFunction;
    static readonly int PointsAreCoplanar_ParamsSize;
    static readonly int PointsAreCoplanar_Points_Offset;
    static readonly int PointsAreCoplanar_Points_ElementSize;
    static readonly int PointsAreCoplanar_Tolerance_Offset;
    static readonly int PointsAreCoplanar_ReturnValue_Offset;
    
    public static bool PointsAreCoplanar(System.Collections.Generic.IList<System.DoubleNumerics.Vector3> points, float tolerance = 0.100000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PointsAreCoplanar_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Points_NativeBuffer = IntPtr.Add(ParamsBuffer, PointsAreCoplanar_Points_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Points_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, PointsAreCoplanar_Points_ElementSize);
            Points_Marshaler.ToNative(Points_NativeBuffer, 0, null, points);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PointsAreCoplanar_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, PointsAreCoplanar_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, PointsAreCoplanar_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:PerlinNoise1D
    static readonly IntPtr PerlinNoise1D_NativeFunction;
    static readonly int PerlinNoise1D_ParamsSize;
    static readonly int PerlinNoise1D_Value_Offset;
    static readonly int PerlinNoise1D_ReturnValue_Offset;
    
    public static float PerlinNoise1D(float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PerlinNoise1D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PerlinNoise1D_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, PerlinNoise1D_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, PerlinNoise1D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Percent_IntInt
    static readonly IntPtr Percent_IntInt_NativeFunction;
    static readonly int Percent_IntInt_ParamsSize;
    static readonly int Percent_IntInt_A_Offset;
    static readonly int Percent_IntInt_B_Offset;
    static readonly int Percent_IntInt_ReturnValue_Offset;
    
    public static int Percent_IntInt(int a, int b = 1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Percent_IntInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Percent_IntInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Percent_IntInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Percent_IntInt_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Percent_IntInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Percent_Int64Int64
    static readonly IntPtr Percent_Int64Int64_NativeFunction;
    static readonly int Percent_Int64Int64_ParamsSize;
    static readonly int Percent_Int64Int64_A_Offset;
    static readonly int Percent_Int64Int64_B_Offset;
    static readonly int Percent_Int64Int64_ReturnValue_Offset;
    
    public static long Percent_Int64Int64(long a, long b = 1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Percent_Int64Int64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Percent_Int64Int64_A_Offset), 0, null, a);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Percent_Int64Int64_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Percent_Int64Int64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, Percent_Int64Int64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Percent_FloatFloat
    static readonly IntPtr Percent_FloatFloat_NativeFunction;
    static readonly int Percent_FloatFloat_ParamsSize;
    static readonly int Percent_FloatFloat_A_Offset;
    static readonly int Percent_FloatFloat_B_Offset;
    static readonly int Percent_FloatFloat_ReturnValue_Offset;
    
    public static double Percent_FloatFloat(double a, double b = 1.000000)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Percent_FloatFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Percent_FloatFloat_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Percent_FloatFloat_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Percent_FloatFloat_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Percent_FloatFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Percent_ByteByte
    static readonly IntPtr Percent_ByteByte_NativeFunction;
    static readonly int Percent_ByteByte_ParamsSize;
    static readonly int Percent_ByteByte_A_Offset;
    static readonly int Percent_ByteByte_B_Offset;
    static readonly int Percent_ByteByte_ReturnValue_Offset;
    
    public static byte Percent_ByteByte(byte a, byte b = 1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Percent_ByteByte_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, Percent_ByteByte_A_Offset), 0, null, a);
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, Percent_ByteByte_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Percent_ByteByte_NativeFunction, ParamsBuffer);
            
            byte returnValue;
            returnValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, Percent_ByteByte_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Or_IntInt
    static readonly IntPtr Or_IntInt_NativeFunction;
    static readonly int Or_IntInt_ParamsSize;
    static readonly int Or_IntInt_A_Offset;
    static readonly int Or_IntInt_B_Offset;
    static readonly int Or_IntInt_ReturnValue_Offset;
    
    public static int Or_IntInt(int a, int b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Or_IntInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Or_IntInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Or_IntInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Or_IntInt_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Or_IntInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Or_Int64Int64
    static readonly IntPtr Or_Int64Int64_NativeFunction;
    static readonly int Or_Int64Int64_ParamsSize;
    static readonly int Or_Int64Int64_A_Offset;
    static readonly int Or_Int64Int64_B_Offset;
    static readonly int Or_Int64Int64_ReturnValue_Offset;
    
    public static long Or_Int64Int64(long a, long b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Or_Int64Int64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Or_Int64Int64_A_Offset), 0, null, a);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Or_Int64Int64_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Or_Int64Int64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, Or_Int64Int64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Now
    static readonly IntPtr Now_NativeFunction;
    static readonly int Now_ParamsSize;
    static readonly int Now_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.DateTime Now()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Now_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Now_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.DateTime returnValue;
            returnValue = UnrealSharp.CoreUObject.DateTimeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, Now_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NotEqualExactly_VectorVector
    static readonly IntPtr NotEqualExactly_VectorVector_NativeFunction;
    static readonly int NotEqualExactly_VectorVector_ParamsSize;
    static readonly int NotEqualExactly_VectorVector_A_Offset;
    static readonly int NotEqualExactly_VectorVector_B_Offset;
    static readonly int NotEqualExactly_VectorVector_ReturnValue_Offset;
    
    public static bool NotEqual(System.DoubleNumerics.Vector3 a, System.DoubleNumerics.Vector3 b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqualExactly_VectorVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, NotEqualExactly_VectorVector_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, NotEqualExactly_VectorVector_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqualExactly_VectorVector_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqualExactly_VectorVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NotEqualExactly_Vector2DVector2D
    static readonly IntPtr NotEqualExactly_Vector2DVector2D_NativeFunction;
    static readonly int NotEqualExactly_Vector2DVector2D_ParamsSize;
    static readonly int NotEqualExactly_Vector2DVector2D_A_Offset;
    static readonly int NotEqualExactly_Vector2DVector2D_B_Offset;
    static readonly int NotEqualExactly_Vector2DVector2D_ReturnValue_Offset;
    
    public static bool NotEqual(System.DoubleNumerics.Vector2 a, System.DoubleNumerics.Vector2 b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqualExactly_Vector2DVector2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, NotEqualExactly_Vector2DVector2D_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, NotEqualExactly_Vector2DVector2D_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqualExactly_Vector2DVector2D_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqualExactly_Vector2DVector2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NotEqual_VectorVector
    static readonly IntPtr NotEqual_VectorVector_NativeFunction;
    static readonly int NotEqual_VectorVector_ParamsSize;
    static readonly int NotEqual_VectorVector_A_Offset;
    static readonly int NotEqual_VectorVector_B_Offset;
    static readonly int NotEqual_VectorVector_ErrorTolerance_Offset;
    static readonly int NotEqual_VectorVector_ReturnValue_Offset;
    
    public static bool IsNotNearEqual(System.DoubleNumerics.Vector3 a, System.DoubleNumerics.Vector3 b, float errorTolerance = 0.000100f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_VectorVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_VectorVector_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_VectorVector_B_Offset), 0, null, b);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_VectorVector_ErrorTolerance_Offset), 0, null, errorTolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_VectorVector_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_VectorVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NotEqual_Vector2DVector2D
    static readonly IntPtr NotEqual_Vector2DVector2D_NativeFunction;
    static readonly int NotEqual_Vector2DVector2D_ParamsSize;
    static readonly int NotEqual_Vector2DVector2D_A_Offset;
    static readonly int NotEqual_Vector2DVector2D_B_Offset;
    static readonly int NotEqual_Vector2DVector2D_ErrorTolerance_Offset;
    static readonly int NotEqual_Vector2DVector2D_ReturnValue_Offset;
    
    public static bool IsNotNearEqual(System.DoubleNumerics.Vector2 a, System.DoubleNumerics.Vector2 b, float errorTolerance = 0.000100f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_Vector2DVector2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_Vector2DVector2D_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_Vector2DVector2D_B_Offset), 0, null, b);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_Vector2DVector2D_ErrorTolerance_Offset), 0, null, errorTolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_Vector2DVector2D_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_Vector2DVector2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NotEqual_TimespanTimespan
    static readonly IntPtr NotEqual_TimespanTimespan_NativeFunction;
    static readonly int NotEqual_TimespanTimespan_ParamsSize;
    static readonly int NotEqual_TimespanTimespan_A_Offset;
    static readonly int NotEqual_TimespanTimespan_B_Offset;
    static readonly int NotEqual_TimespanTimespan_ReturnValue_Offset;
    
    public static bool NotEqual_TimespanTimespan(UnrealSharp.CoreUObject.Timespan a, UnrealSharp.CoreUObject.Timespan b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_TimespanTimespan_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_TimespanTimespan_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_TimespanTimespan_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_TimespanTimespan_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_TimespanTimespan_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NotEqual_RotatorRotator
    static readonly IntPtr NotEqual_RotatorRotator_NativeFunction;
    static readonly int NotEqual_RotatorRotator_ParamsSize;
    static readonly int NotEqual_RotatorRotator_A_Offset;
    static readonly int NotEqual_RotatorRotator_B_Offset;
    static readonly int NotEqual_RotatorRotator_ErrorTolerance_Offset;
    static readonly int NotEqual_RotatorRotator_ReturnValue_Offset;
    
    public static bool IsNotNearEqual(UnrealSharp.Rotator a, UnrealSharp.Rotator b, float errorTolerance = 0.000100f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_RotatorRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_RotatorRotator_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_RotatorRotator_B_Offset), 0, null, b);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_RotatorRotator_ErrorTolerance_Offset), 0, null, errorTolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_RotatorRotator_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_RotatorRotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NotEqual_QuatQuat
    static readonly IntPtr NotEqual_QuatQuat_NativeFunction;
    static readonly int NotEqual_QuatQuat_ParamsSize;
    static readonly int NotEqual_QuatQuat_A_Offset;
    static readonly int NotEqual_QuatQuat_B_Offset;
    static readonly int NotEqual_QuatQuat_ErrorTolerance_Offset;
    static readonly int NotEqual_QuatQuat_ReturnValue_Offset;
    
    public static bool NotEqual(System.DoubleNumerics.Quaternion a, System.DoubleNumerics.Quaternion b, float errorTolerance = 0.000100f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_QuatQuat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_QuatQuat_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_QuatQuat_B_Offset), 0, null, b);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_QuatQuat_ErrorTolerance_Offset), 0, null, errorTolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_QuatQuat_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_QuatQuat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NotEqual_ObjectObject
    static readonly IntPtr NotEqual_ObjectObject_NativeFunction;
    static readonly int NotEqual_ObjectObject_ParamsSize;
    static readonly int NotEqual_ObjectObject_A_Offset;
    static readonly int NotEqual_ObjectObject_B_Offset;
    static readonly int NotEqual_ObjectObject_ReturnValue_Offset;
    
    public static bool NotEqual_ObjectObject(UnrealSharp.CoreUObject.Object a, UnrealSharp.CoreUObject.Object b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_ObjectObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_ObjectObject_A_Offset), 0, null, a);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_ObjectObject_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_ObjectObject_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_ObjectObject_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NotEqual_NameName
    static readonly IntPtr NotEqual_NameName_NativeFunction;
    static readonly int NotEqual_NameName_ParamsSize;
    static readonly int NotEqual_NameName_A_Offset;
    static readonly int NotEqual_NameName_B_Offset;
    static readonly int NotEqual_NameName_ReturnValue_Offset;
    
    public static bool NotEqual_NameName(Name a, Name b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_NameName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_NameName_A_Offset), 0, null, a);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_NameName_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_NameName_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_NameName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NotEqual_MatrixMatrix
    static readonly IntPtr NotEqual_MatrixMatrix_NativeFunction;
    static readonly int NotEqual_MatrixMatrix_ParamsSize;
    static readonly int NotEqual_MatrixMatrix_A_Offset;
    static readonly int NotEqual_MatrixMatrix_B_Offset;
    static readonly int NotEqual_MatrixMatrix_Tolerance_Offset;
    static readonly int NotEqual_MatrixMatrix_ReturnValue_Offset;
    
    public static bool NotEqual(System.DoubleNumerics.Matrix4x4 a, System.DoubleNumerics.Matrix4x4 b, float tolerance = 0.000100f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_MatrixMatrix_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_MatrixMatrix_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_MatrixMatrix_B_Offset), 0, null, b);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_MatrixMatrix_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_MatrixMatrix_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_MatrixMatrix_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NotEqual_LinearColorLinearColor
    static readonly IntPtr NotEqual_LinearColorLinearColor_NativeFunction;
    static readonly int NotEqual_LinearColorLinearColor_ParamsSize;
    static readonly int NotEqual_LinearColorLinearColor_A_Offset;
    static readonly int NotEqual_LinearColorLinearColor_B_Offset;
    static readonly int NotEqual_LinearColorLinearColor_ReturnValue_Offset;
    
    public static bool NotEqual(UnrealSharp.CoreUObject.LinearColor a, UnrealSharp.CoreUObject.LinearColor b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_LinearColorLinearColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_LinearColorLinearColor_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_LinearColorLinearColor_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_LinearColorLinearColor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_LinearColorLinearColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NotEqual_IntPointIntPoint
    static readonly IntPtr NotEqual_IntPointIntPoint_NativeFunction;
    static readonly int NotEqual_IntPointIntPoint_ParamsSize;
    static readonly int NotEqual_IntPointIntPoint_A_Offset;
    static readonly int NotEqual_IntPointIntPoint_B_Offset;
    static readonly int NotEqual_IntPointIntPoint_ReturnValue_Offset;
    
    public static bool NotEqual(UnrealSharp.CoreUObject.IntPoint a, UnrealSharp.CoreUObject.IntPoint b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_IntPointIntPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_IntPointIntPoint_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_IntPointIntPoint_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_IntPointIntPoint_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_IntPointIntPoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NotEqual_IntInt
    static readonly IntPtr NotEqual_IntInt_NativeFunction;
    static readonly int NotEqual_IntInt_ParamsSize;
    static readonly int NotEqual_IntInt_A_Offset;
    static readonly int NotEqual_IntInt_B_Offset;
    static readonly int NotEqual_IntInt_ReturnValue_Offset;
    
    public static bool NotEqual_IntInt(int a, int b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_IntInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_IntInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_IntInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_IntInt_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_IntInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NotEqual_Int64Int64
    static readonly IntPtr NotEqual_Int64Int64_NativeFunction;
    static readonly int NotEqual_Int64Int64_ParamsSize;
    static readonly int NotEqual_Int64Int64_A_Offset;
    static readonly int NotEqual_Int64Int64_B_Offset;
    static readonly int NotEqual_Int64Int64_ReturnValue_Offset;
    
    public static bool NotEqual_Int64Int64(long a, long b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_Int64Int64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_Int64Int64_A_Offset), 0, null, a);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_Int64Int64_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_Int64Int64_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_Int64Int64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NotEqual_DoubleDouble
    static readonly IntPtr NotEqual_DoubleDouble_NativeFunction;
    static readonly int NotEqual_DoubleDouble_ParamsSize;
    static readonly int NotEqual_DoubleDouble_A_Offset;
    static readonly int NotEqual_DoubleDouble_B_Offset;
    static readonly int NotEqual_DoubleDouble_ReturnValue_Offset;
    
    public static bool NotEqual_DoubleDouble(double a, double b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_DoubleDouble_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_DoubleDouble_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_DoubleDouble_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_DoubleDouble_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_DoubleDouble_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NotEqual_DateTimeDateTime
    static readonly IntPtr NotEqual_DateTimeDateTime_NativeFunction;
    static readonly int NotEqual_DateTimeDateTime_ParamsSize;
    static readonly int NotEqual_DateTimeDateTime_A_Offset;
    static readonly int NotEqual_DateTimeDateTime_B_Offset;
    static readonly int NotEqual_DateTimeDateTime_ReturnValue_Offset;
    
    public static bool NotEqual_DateTimeDateTime(UnrealSharp.CoreUObject.DateTime a, UnrealSharp.CoreUObject.DateTime b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_DateTimeDateTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_DateTimeDateTime_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_DateTimeDateTime_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_DateTimeDateTime_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_DateTimeDateTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NotEqual_ClassClass
    static readonly IntPtr NotEqual_ClassClass_NativeFunction;
    static readonly int NotEqual_ClassClass_ParamsSize;
    static readonly int NotEqual_ClassClass_A_Offset;
    static readonly int NotEqual_ClassClass_B_Offset;
    static readonly int NotEqual_ClassClass_ReturnValue_Offset;
    
    public static bool NotEqual_ClassClass(SubclassOf<UnrealSharp.CoreUObject.Object> a, SubclassOf<UnrealSharp.CoreUObject.Object> b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_ClassClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_ClassClass_A_Offset), 0, null, a);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_ClassClass_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_ClassClass_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_ClassClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NotEqual_ByteByte
    static readonly IntPtr NotEqual_ByteByte_NativeFunction;
    static readonly int NotEqual_ByteByte_ParamsSize;
    static readonly int NotEqual_ByteByte_A_Offset;
    static readonly int NotEqual_ByteByte_B_Offset;
    static readonly int NotEqual_ByteByte_ReturnValue_Offset;
    
    public static bool NotEqual_ByteByte(byte a, byte b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_ByteByte_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_ByteByte_A_Offset), 0, null, a);
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_ByteByte_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_ByteByte_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_ByteByte_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NotEqual_BoolBool
    static readonly IntPtr NotEqual_BoolBool_NativeFunction;
    static readonly int NotEqual_BoolBool_ParamsSize;
    static readonly int NotEqual_BoolBool_A_Offset;
    static readonly int NotEqual_BoolBool_B_Offset;
    static readonly int NotEqual_BoolBool_ReturnValue_Offset;
    
    public static bool NotEqual_BoolBool(bool a, bool b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_BoolBool_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_BoolBool_A_Offset), 0, null, a);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_BoolBool_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_BoolBool_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_BoolBool_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Not_PreBool
    static readonly IntPtr Not_PreBool_NativeFunction;
    static readonly int Not_PreBool_ParamsSize;
    static readonly int Not_PreBool_A_Offset;
    static readonly int Not_PreBool_ReturnValue_Offset;
    
    public static bool Not_PreBool(bool a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Not_PreBool_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, Not_PreBool_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Not_PreBool_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Not_PreBool_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Not_Int64
    static readonly IntPtr Not_Int64_NativeFunction;
    static readonly int Not_Int64_ParamsSize;
    static readonly int Not_Int64_A_Offset;
    static readonly int Not_Int64_ReturnValue_Offset;
    
    public static long Not_Int64(long a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Not_Int64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Not_Int64_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Not_Int64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, Not_Int64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Not_Int
    static readonly IntPtr Not_Int_NativeFunction;
    static readonly int Not_Int_ParamsSize;
    static readonly int Not_Int_A_Offset;
    static readonly int Not_Int_ReturnValue_Offset;
    
    public static int Not_Int(int a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Not_Int_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Not_Int_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Not_Int_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Not_Int_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NormalSafe2D
    static readonly IntPtr NormalSafe2D_NativeFunction;
    static readonly int NormalSafe2D_ParamsSize;
    static readonly int NormalSafe2D_A_Offset;
    static readonly int NormalSafe2D_Tolerance_Offset;
    static readonly int NormalSafe2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 Normal(System.DoubleNumerics.Vector2 a, float tolerance = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NormalSafe2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, NormalSafe2D_A_Offset), 0, null, a);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, NormalSafe2D_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NormalSafe2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, NormalSafe2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NormalizeToRange
    static readonly IntPtr NormalizeToRange_NativeFunction;
    static readonly int NormalizeToRange_ParamsSize;
    static readonly int NormalizeToRange_Value_Offset;
    static readonly int NormalizeToRange_RangeMin_Offset;
    static readonly int NormalizeToRange_RangeMax_Offset;
    static readonly int NormalizeToRange_ReturnValue_Offset;
    
    public static double NormalizeToRange(double value, double rangeMin, double rangeMax)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NormalizeToRange_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, NormalizeToRange_Value_Offset), 0, null, value);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, NormalizeToRange_RangeMin_Offset), 0, null, rangeMin);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, NormalizeToRange_RangeMax_Offset), 0, null, rangeMax);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NormalizeToRange_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, NormalizeToRange_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NormalizedDeltaRotator
    static readonly IntPtr NormalizedDeltaRotator_NativeFunction;
    static readonly int NormalizedDeltaRotator_ParamsSize;
    static readonly int NormalizedDeltaRotator_A_Offset;
    static readonly int NormalizedDeltaRotator_B_Offset;
    static readonly int NormalizedDeltaRotator_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator Delta(UnrealSharp.Rotator a, UnrealSharp.Rotator b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NormalizedDeltaRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, NormalizedDeltaRotator_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, NormalizedDeltaRotator_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NormalizedDeltaRotator_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, NormalizedDeltaRotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NormalizeAxis
    static readonly IntPtr NormalizeAxis_NativeFunction;
    static readonly int NormalizeAxis_ParamsSize;
    static readonly int NormalizeAxis_Angle_Offset;
    static readonly int NormalizeAxis_ReturnValue_Offset;
    
    public static float NormalizeAxis(float angle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NormalizeAxis_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, NormalizeAxis_Angle_Offset), 0, null, angle);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NormalizeAxis_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, NormalizeAxis_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Normalize2D
    static readonly IntPtr Normalize2D_NativeFunction;
    static readonly int Normalize2D_ParamsSize;
    static readonly int Normalize2D_A_Offset;
    static readonly int Normalize2D_Tolerance_Offset;
    
    public static void Normalize(ref System.DoubleNumerics.Vector2 a, float tolerance = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Normalize2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Normalize2D_A_Offset), 0, null, a);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Normalize2D_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Normalize2D_NativeFunction, ParamsBuffer);
            
            a = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Normalize2D_A_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Normal2D
    static readonly IntPtr Normal2D_NativeFunction;
    static readonly int Normal2D_ParamsSize;
    static readonly int Normal2D_A_Offset;
    static readonly int Normal2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 NormalUnsafe(System.DoubleNumerics.Vector2 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Normal2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Normal2D_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Normal2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Normal2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Normal
    static readonly IntPtr Normal_NativeFunction;
    static readonly int Normal_ParamsSize;
    static readonly int Normal_A_Offset;
    static readonly int Normal_Tolerance_Offset;
    static readonly int Normal_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Normal(System.DoubleNumerics.Vector3 a, float tolerance = 0.000100f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Normal_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Normal_A_Offset), 0, null, a);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Normal_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Normal_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Normal_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NegateVector
    static readonly IntPtr NegateVector_NativeFunction;
    static readonly int NegateVector_ParamsSize;
    static readonly int NegateVector_A_Offset;
    static readonly int NegateVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Negated(System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NegateVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, NegateVector_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NegateVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, NegateVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NegateRotator
    static readonly IntPtr NegateRotator_NativeFunction;
    static readonly int NegateRotator_ParamsSize;
    static readonly int NegateRotator_A_Offset;
    static readonly int NegateRotator_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator Inversed(UnrealSharp.Rotator a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NegateRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, NegateRotator_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NegateRotator_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, NegateRotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Negated2D
    static readonly IntPtr Negated2D_NativeFunction;
    static readonly int Negated2D_ParamsSize;
    static readonly int Negated2D_A_Offset;
    static readonly int Negated2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 Negated(System.DoubleNumerics.Vector2 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Negated2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Negated2D_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Negated2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Negated2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NearlyEqual_TransformTransform
    static readonly IntPtr NearlyEqual_TransformTransform_NativeFunction;
    static readonly int NearlyEqual_TransformTransform_ParamsSize;
    static readonly int NearlyEqual_TransformTransform_A_Offset;
    static readonly int NearlyEqual_TransformTransform_B_Offset;
    static readonly int NearlyEqual_TransformTransform_LocationTolerance_Offset;
    static readonly int NearlyEqual_TransformTransform_RotationTolerance_Offset;
    static readonly int NearlyEqual_TransformTransform_Scale3DTolerance_Offset;
    static readonly int NearlyEqual_TransformTransform_ReturnValue_Offset;
    
    public static bool IsNearEqual(UnrealSharp.Transform a, UnrealSharp.Transform b, float locationTolerance = 0.000100f, float rotationTolerance = 0.000100f, float scale3DTolerance = 0.000100f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NearlyEqual_TransformTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, NearlyEqual_TransformTransform_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, NearlyEqual_TransformTransform_B_Offset), 0, null, b);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, NearlyEqual_TransformTransform_LocationTolerance_Offset), 0, null, locationTolerance);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, NearlyEqual_TransformTransform_RotationTolerance_Offset), 0, null, rotationTolerance);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, NearlyEqual_TransformTransform_Scale3DTolerance_Offset), 0, null, scale3DTolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NearlyEqual_TransformTransform_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NearlyEqual_TransformTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:NearlyEqual_FloatFloat
    static readonly IntPtr NearlyEqual_FloatFloat_NativeFunction;
    static readonly int NearlyEqual_FloatFloat_ParamsSize;
    static readonly int NearlyEqual_FloatFloat_A_Offset;
    static readonly int NearlyEqual_FloatFloat_B_Offset;
    static readonly int NearlyEqual_FloatFloat_ErrorTolerance_Offset;
    static readonly int NearlyEqual_FloatFloat_ReturnValue_Offset;
    
    public static bool NearlyEqual_FloatFloat(double a, double b, double errorTolerance = 0.000001)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NearlyEqual_FloatFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, NearlyEqual_FloatFloat_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, NearlyEqual_FloatFloat_B_Offset), 0, null, b);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, NearlyEqual_FloatFloat_ErrorTolerance_Offset), 0, null, errorTolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NearlyEqual_FloatFloat_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NearlyEqual_FloatFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MultiplyMultiply_FloatFloat
    static readonly IntPtr MultiplyMultiply_FloatFloat_NativeFunction;
    static readonly int MultiplyMultiply_FloatFloat_ParamsSize;
    static readonly int MultiplyMultiply_FloatFloat_Base_Offset;
    static readonly int MultiplyMultiply_FloatFloat_Exp_Offset;
    static readonly int MultiplyMultiply_FloatFloat_ReturnValue_Offset;
    
    public static double MultiplyMultiply_FloatFloat(double @base, double exp)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MultiplyMultiply_FloatFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, MultiplyMultiply_FloatFloat_Base_Offset), 0, null, @base);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, MultiplyMultiply_FloatFloat_Exp_Offset), 0, null, exp);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MultiplyMultiply_FloatFloat_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, MultiplyMultiply_FloatFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MultiplyByPi
    static readonly IntPtr MultiplyByPi_NativeFunction;
    static readonly int MultiplyByPi_ParamsSize;
    static readonly int MultiplyByPi_Value_Offset;
    static readonly int MultiplyByPi_ReturnValue_Offset;
    
    public static double MultiplyByPi(double value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MultiplyByPi_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, MultiplyByPi_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MultiplyByPi_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, MultiplyByPi_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Multiply_VectorVector
    static readonly IntPtr Multiply_VectorVector_NativeFunction;
    static readonly int Multiply_VectorVector_ParamsSize;
    static readonly int Multiply_VectorVector_A_Offset;
    static readonly int Multiply_VectorVector_B_Offset;
    static readonly int Multiply_VectorVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Multiply(System.DoubleNumerics.Vector3 a, System.DoubleNumerics.Vector3 b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Multiply_VectorVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_VectorVector_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_VectorVector_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Multiply_VectorVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Multiply_VectorVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Multiply_VectorInt
    static readonly IntPtr Multiply_VectorInt_NativeFunction;
    static readonly int Multiply_VectorInt_ParamsSize;
    static readonly int Multiply_VectorInt_A_Offset;
    static readonly int Multiply_VectorInt_B_Offset;
    static readonly int Multiply_VectorInt_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 MultiplyInt(System.DoubleNumerics.Vector3 a, int b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Multiply_VectorInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_VectorInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_VectorInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Multiply_VectorInt_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Multiply_VectorInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Multiply_VectorFloat
    static readonly IntPtr Multiply_VectorFloat_NativeFunction;
    static readonly int Multiply_VectorFloat_ParamsSize;
    static readonly int Multiply_VectorFloat_A_Offset;
    static readonly int Multiply_VectorFloat_B_Offset;
    static readonly int Multiply_VectorFloat_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 MultiplyFloat(System.DoubleNumerics.Vector3 a, double b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Multiply_VectorFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_VectorFloat_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_VectorFloat_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Multiply_VectorFloat_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Multiply_VectorFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Multiply_Vector2DVector2D
    static readonly IntPtr Multiply_Vector2DVector2D_NativeFunction;
    static readonly int Multiply_Vector2DVector2D_ParamsSize;
    static readonly int Multiply_Vector2DVector2D_A_Offset;
    static readonly int Multiply_Vector2DVector2D_B_Offset;
    static readonly int Multiply_Vector2DVector2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 Multiply(System.DoubleNumerics.Vector2 a, System.DoubleNumerics.Vector2 b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Multiply_Vector2DVector2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_Vector2DVector2D_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_Vector2DVector2D_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Multiply_Vector2DVector2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Multiply_Vector2DVector2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Multiply_Vector2DFloat
    static readonly IntPtr Multiply_Vector2DFloat_NativeFunction;
    static readonly int Multiply_Vector2DFloat_ParamsSize;
    static readonly int Multiply_Vector2DFloat_A_Offset;
    static readonly int Multiply_Vector2DFloat_B_Offset;
    static readonly int Multiply_Vector2DFloat_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 MultiplyFloat(System.DoubleNumerics.Vector2 a, double b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Multiply_Vector2DFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_Vector2DFloat_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_Vector2DFloat_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Multiply_Vector2DFloat_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Multiply_Vector2DFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Multiply_TimespanFloat
    static readonly IntPtr Multiply_TimespanFloat_NativeFunction;
    static readonly int Multiply_TimespanFloat_ParamsSize;
    static readonly int Multiply_TimespanFloat_A_Offset;
    static readonly int Multiply_TimespanFloat_Scalar_Offset;
    static readonly int Multiply_TimespanFloat_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Timespan Multiply_TimespanFloat(UnrealSharp.CoreUObject.Timespan a, float scalar)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Multiply_TimespanFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Multiply_TimespanFloat_A_Offset), 0, null, a);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_TimespanFloat_Scalar_Offset), 0, null, scalar);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Multiply_TimespanFloat_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Timespan returnValue;
            returnValue = UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(ParamsBuffer, Multiply_TimespanFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Multiply_RotatorInt
    static readonly IntPtr Multiply_RotatorInt_NativeFunction;
    static readonly int Multiply_RotatorInt_ParamsSize;
    static readonly int Multiply_RotatorInt_A_Offset;
    static readonly int Multiply_RotatorInt_B_Offset;
    static readonly int Multiply_RotatorInt_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator ScaleInteger(UnrealSharp.Rotator a, int b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Multiply_RotatorInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_RotatorInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_RotatorInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Multiply_RotatorInt_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, Multiply_RotatorInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Multiply_RotatorFloat
    static readonly IntPtr Multiply_RotatorFloat_NativeFunction;
    static readonly int Multiply_RotatorFloat_ParamsSize;
    static readonly int Multiply_RotatorFloat_A_Offset;
    static readonly int Multiply_RotatorFloat_B_Offset;
    static readonly int Multiply_RotatorFloat_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator Scale(UnrealSharp.Rotator a, float b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Multiply_RotatorFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_RotatorFloat_A_Offset), 0, null, a);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_RotatorFloat_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Multiply_RotatorFloat_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, Multiply_RotatorFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Multiply_QuatQuat
    static readonly IntPtr Multiply_QuatQuat_NativeFunction;
    static readonly int Multiply_QuatQuat_ParamsSize;
    static readonly int Multiply_QuatQuat_A_Offset;
    static readonly int Multiply_QuatQuat_B_Offset;
    static readonly int Multiply_QuatQuat_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Quaternion Multiply(System.DoubleNumerics.Quaternion a, System.DoubleNumerics.Quaternion b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Multiply_QuatQuat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_QuatQuat_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_QuatQuat_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Multiply_QuatQuat_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Quaternion returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, Multiply_QuatQuat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Multiply_MatrixMatrix
    static readonly IntPtr Multiply_MatrixMatrix_NativeFunction;
    static readonly int Multiply_MatrixMatrix_ParamsSize;
    static readonly int Multiply_MatrixMatrix_A_Offset;
    static readonly int Multiply_MatrixMatrix_B_Offset;
    static readonly int Multiply_MatrixMatrix_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Matrix4x4 Multiply(System.DoubleNumerics.Matrix4x4 a, System.DoubleNumerics.Matrix4x4 b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Multiply_MatrixMatrix_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_MatrixMatrix_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_MatrixMatrix_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Multiply_MatrixMatrix_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Matrix4x4 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, Multiply_MatrixMatrix_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Multiply_MatrixFloat
    static readonly IntPtr Multiply_MatrixFloat_NativeFunction;
    static readonly int Multiply_MatrixFloat_ParamsSize;
    static readonly int Multiply_MatrixFloat_A_Offset;
    static readonly int Multiply_MatrixFloat_B_Offset;
    static readonly int Multiply_MatrixFloat_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Matrix4x4 MultiplyFloat(System.DoubleNumerics.Matrix4x4 a, double b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Multiply_MatrixFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_MatrixFloat_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_MatrixFloat_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Multiply_MatrixFloat_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Matrix4x4 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, Multiply_MatrixFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Multiply_LinearColorLinearColor
    static readonly IntPtr Multiply_LinearColorLinearColor_NativeFunction;
    static readonly int Multiply_LinearColorLinearColor_ParamsSize;
    static readonly int Multiply_LinearColorLinearColor_A_Offset;
    static readonly int Multiply_LinearColorLinearColor_B_Offset;
    static readonly int Multiply_LinearColorLinearColor_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor Multiply(UnrealSharp.CoreUObject.LinearColor a, UnrealSharp.CoreUObject.LinearColor b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Multiply_LinearColorLinearColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_LinearColorLinearColor_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_LinearColorLinearColor_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Multiply_LinearColorLinearColor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, Multiply_LinearColorLinearColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Multiply_LinearColorFloat
    static readonly IntPtr Multiply_LinearColorFloat_NativeFunction;
    static readonly int Multiply_LinearColorFloat_ParamsSize;
    static readonly int Multiply_LinearColorFloat_A_Offset;
    static readonly int Multiply_LinearColorFloat_B_Offset;
    static readonly int Multiply_LinearColorFloat_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor MultiplyFloat(UnrealSharp.CoreUObject.LinearColor a, float b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Multiply_LinearColorFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_LinearColorFloat_A_Offset), 0, null, a);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_LinearColorFloat_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Multiply_LinearColorFloat_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, Multiply_LinearColorFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Multiply_IntPointIntPoint
    static readonly IntPtr Multiply_IntPointIntPoint_NativeFunction;
    static readonly int Multiply_IntPointIntPoint_ParamsSize;
    static readonly int Multiply_IntPointIntPoint_A_Offset;
    static readonly int Multiply_IntPointIntPoint_B_Offset;
    static readonly int Multiply_IntPointIntPoint_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.IntPoint Multiply(UnrealSharp.CoreUObject.IntPoint a, UnrealSharp.CoreUObject.IntPoint b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Multiply_IntPointIntPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_IntPointIntPoint_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_IntPointIntPoint_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Multiply_IntPointIntPoint_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.IntPoint returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative(IntPtr.Add(ParamsBuffer, Multiply_IntPointIntPoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Multiply_IntPointInt
    static readonly IntPtr Multiply_IntPointInt_NativeFunction;
    static readonly int Multiply_IntPointInt_ParamsSize;
    static readonly int Multiply_IntPointInt_A_Offset;
    static readonly int Multiply_IntPointInt_B_Offset;
    static readonly int Multiply_IntPointInt_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.IntPoint MultiplyInt(UnrealSharp.CoreUObject.IntPoint a, int b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Multiply_IntPointInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_IntPointInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_IntPointInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Multiply_IntPointInt_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.IntPoint returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative(IntPtr.Add(ParamsBuffer, Multiply_IntPointInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Multiply_IntInt
    static readonly IntPtr Multiply_IntInt_NativeFunction;
    static readonly int Multiply_IntInt_ParamsSize;
    static readonly int Multiply_IntInt_A_Offset;
    static readonly int Multiply_IntInt_B_Offset;
    static readonly int Multiply_IntInt_ReturnValue_Offset;
    
    public static int Multiply_IntInt(int a, int b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Multiply_IntInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_IntInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_IntInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Multiply_IntInt_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Multiply_IntInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Multiply_IntFloat
    static readonly IntPtr Multiply_IntFloat_NativeFunction;
    static readonly int Multiply_IntFloat_ParamsSize;
    static readonly int Multiply_IntFloat_A_Offset;
    static readonly int Multiply_IntFloat_B_Offset;
    static readonly int Multiply_IntFloat_ReturnValue_Offset;
    
    public static double Multiply_IntFloat(int a, double b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Multiply_IntFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_IntFloat_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_IntFloat_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Multiply_IntFloat_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Multiply_IntFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Multiply_Int64Int64
    static readonly IntPtr Multiply_Int64Int64_NativeFunction;
    static readonly int Multiply_Int64Int64_ParamsSize;
    static readonly int Multiply_Int64Int64_A_Offset;
    static readonly int Multiply_Int64Int64_B_Offset;
    static readonly int Multiply_Int64Int64_ReturnValue_Offset;
    
    public static long Multiply_Int64Int64(long a, long b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Multiply_Int64Int64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_Int64Int64_A_Offset), 0, null, a);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_Int64Int64_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Multiply_Int64Int64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, Multiply_Int64Int64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Multiply_DoubleDouble
    static readonly IntPtr Multiply_DoubleDouble_NativeFunction;
    static readonly int Multiply_DoubleDouble_ParamsSize;
    static readonly int Multiply_DoubleDouble_A_Offset;
    static readonly int Multiply_DoubleDouble_B_Offset;
    static readonly int Multiply_DoubleDouble_ReturnValue_Offset;
    
    public static double Multiply_DoubleDouble(double a, double b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Multiply_DoubleDouble_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_DoubleDouble_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_DoubleDouble_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Multiply_DoubleDouble_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Multiply_DoubleDouble_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Multiply_ByteByte
    static readonly IntPtr Multiply_ByteByte_NativeFunction;
    static readonly int Multiply_ByteByte_ParamsSize;
    static readonly int Multiply_ByteByte_A_Offset;
    static readonly int Multiply_ByteByte_B_Offset;
    static readonly int Multiply_ByteByte_ReturnValue_Offset;
    
    public static byte Multiply_ByteByte(byte a, byte b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Multiply_ByteByte_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_ByteByte_A_Offset), 0, null, a);
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, Multiply_ByteByte_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Multiply_ByteByte_NativeFunction, ParamsBuffer);
            
            byte returnValue;
            returnValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, Multiply_ByteByte_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MirrorVectorByNormal
    static readonly IntPtr MirrorVectorByNormal_NativeFunction;
    static readonly int MirrorVectorByNormal_ParamsSize;
    static readonly int MirrorVectorByNormal_InVect_Offset;
    static readonly int MirrorVectorByNormal_InNormal_Offset;
    static readonly int MirrorVectorByNormal_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 MirrorVectorByNormal(System.DoubleNumerics.Vector3 inVect, System.DoubleNumerics.Vector3 inNormal)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MirrorVectorByNormal_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MirrorVectorByNormal_InVect_Offset), 0, null, inVect);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MirrorVectorByNormal_InNormal_Offset), 0, null, inNormal);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MirrorVectorByNormal_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, MirrorVectorByNormal_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MinOfIntArray
    static readonly IntPtr MinOfIntArray_NativeFunction;
    static readonly int MinOfIntArray_ParamsSize;
    static readonly int MinOfIntArray_IntArray_Offset;
    static readonly int MinOfIntArray_IntArray_ElementSize;
    static readonly int MinOfIntArray_IndexOfMinValue_Offset;
    static readonly int MinOfIntArray_MinValue_Offset;
    
    public static void MinOfIntArray(System.Collections.Generic.IList<int> intArray, out int indexOfMinValue, out int minValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MinOfIntArray_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr IntArray_NativeBuffer = IntPtr.Add(ParamsBuffer, MinOfIntArray_IntArray_Offset);
            UnrealArrayCopyMarshaler<int> IntArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, MinOfIntArray_IntArray_ElementSize);
            IntArray_Marshaler.ToNative(IntArray_NativeBuffer, 0, null, intArray);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MinOfIntArray_NativeFunction, ParamsBuffer);
            
            indexOfMinValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, MinOfIntArray_IndexOfMinValue_Offset), 0, null);
            minValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, MinOfIntArray_MinValue_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MinOfFloatArray
    static readonly IntPtr MinOfFloatArray_NativeFunction;
    static readonly int MinOfFloatArray_ParamsSize;
    static readonly int MinOfFloatArray_FloatArray_Offset;
    static readonly int MinOfFloatArray_FloatArray_ElementSize;
    static readonly int MinOfFloatArray_IndexOfMinValue_Offset;
    static readonly int MinOfFloatArray_MinValue_Offset;
    
    public static void MinOfFloatArray(System.Collections.Generic.IList<float> floatArray, out int indexOfMinValue, out float minValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MinOfFloatArray_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr FloatArray_NativeBuffer = IntPtr.Add(ParamsBuffer, MinOfFloatArray_FloatArray_Offset);
            UnrealArrayCopyMarshaler<float> FloatArray_Marshaler = new UnrealArrayCopyMarshaler<float>(1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, MinOfFloatArray_FloatArray_ElementSize);
            FloatArray_Marshaler.ToNative(FloatArray_NativeBuffer, 0, null, floatArray);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MinOfFloatArray_NativeFunction, ParamsBuffer);
            
            indexOfMinValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, MinOfFloatArray_IndexOfMinValue_Offset), 0, null);
            minValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, MinOfFloatArray_MinValue_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MinOfByteArray
    static readonly IntPtr MinOfByteArray_NativeFunction;
    static readonly int MinOfByteArray_ParamsSize;
    static readonly int MinOfByteArray_ByteArray_Offset;
    static readonly int MinOfByteArray_ByteArray_ElementSize;
    static readonly int MinOfByteArray_IndexOfMinValue_Offset;
    static readonly int MinOfByteArray_MinValue_Offset;
    
    public static void MinOfByteArray(System.Collections.Generic.IList<byte> byteArray, out int indexOfMinValue, out byte minValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MinOfByteArray_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ByteArray_NativeBuffer = IntPtr.Add(ParamsBuffer, MinOfByteArray_ByteArray_Offset);
            UnrealArrayCopyMarshaler<byte> ByteArray_Marshaler = new UnrealArrayCopyMarshaler<byte>(1, BlittableMarshaller<byte>.ToNative, BlittableMarshaller<byte>.FromNative, MinOfByteArray_ByteArray_ElementSize);
            ByteArray_Marshaler.ToNative(ByteArray_NativeBuffer, 0, null, byteArray);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MinOfByteArray_NativeFunction, ParamsBuffer);
            
            indexOfMinValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, MinOfByteArray_IndexOfMinValue_Offset), 0, null);
            minValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, MinOfByteArray_MinValue_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MinInt64
    static readonly IntPtr MinInt64_NativeFunction;
    static readonly int MinInt64_ParamsSize;
    static readonly int MinInt64_A_Offset;
    static readonly int MinInt64_B_Offset;
    static readonly int MinInt64_ReturnValue_Offset;
    
    public static long MinInt64(long a, long b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MinInt64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, MinInt64_A_Offset), 0, null, a);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, MinInt64_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MinInt64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, MinInt64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MinimumAreaRectangle
    static readonly IntPtr MinimumAreaRectangle_NativeFunction;
    static readonly int MinimumAreaRectangle_ParamsSize;
    static readonly int MinimumAreaRectangle_WorldContextObject_Offset;
    static readonly int MinimumAreaRectangle_InVerts_Offset;
    static readonly int MinimumAreaRectangle_InVerts_ElementSize;
    static readonly int MinimumAreaRectangle_SampleSurfaceNormal_Offset;
    static readonly int MinimumAreaRectangle_OutRectCenter_Offset;
    static readonly int MinimumAreaRectangle_OutRectRotation_Offset;
    static readonly int MinimumAreaRectangle_OutSideLengthX_Offset;
    static readonly int MinimumAreaRectangle_OutSideLengthY_Offset;
    static readonly int MinimumAreaRectangle_bDebugDraw_Offset;
    
    [Obsolete("Use 'Min Area Rectangle' instead; this deprecated version incorrectly returns the average of all input points as the rectangle center.")]
    public static void MinimumAreaRectangle(UnrealSharp.CoreUObject.Object worldContextObject, System.Collections.Generic.IList<System.DoubleNumerics.Vector3> inVerts, System.DoubleNumerics.Vector3 sampleSurfaceNormal, out System.DoubleNumerics.Vector3 outRectCenter, out UnrealSharp.Rotator outRectRotation, out float outSideLengthX, out float outSideLengthY, bool bDebugDraw = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MinimumAreaRectangle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, MinimumAreaRectangle_WorldContextObject_Offset), 0, null, worldContextObject);
            IntPtr InVerts_NativeBuffer = IntPtr.Add(ParamsBuffer, MinimumAreaRectangle_InVerts_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> InVerts_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, MinimumAreaRectangle_InVerts_ElementSize);
            InVerts_Marshaler.ToNative(InVerts_NativeBuffer, 0, null, inVerts);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MinimumAreaRectangle_SampleSurfaceNormal_Offset), 0, null, sampleSurfaceNormal);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, MinimumAreaRectangle_bDebugDraw_Offset), 0, null, bDebugDraw);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MinimumAreaRectangle_NativeFunction, ParamsBuffer);
            
            outRectCenter = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, MinimumAreaRectangle_OutRectCenter_Offset), 0, null);
            outRectRotation = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, MinimumAreaRectangle_OutRectRotation_Offset), 0, null);
            outSideLengthX = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, MinimumAreaRectangle_OutSideLengthX_Offset), 0, null);
            outSideLengthY = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, MinimumAreaRectangle_OutSideLengthY_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MinAreaRectangle
    static readonly IntPtr MinAreaRectangle_NativeFunction;
    static readonly int MinAreaRectangle_ParamsSize;
    static readonly int MinAreaRectangle_WorldContextObject_Offset;
    static readonly int MinAreaRectangle_InPoints_Offset;
    static readonly int MinAreaRectangle_InPoints_ElementSize;
    static readonly int MinAreaRectangle_SampleSurfaceNormal_Offset;
    static readonly int MinAreaRectangle_OutRectCenter_Offset;
    static readonly int MinAreaRectangle_OutRectRotation_Offset;
    static readonly int MinAreaRectangle_OutRectLengthX_Offset;
    static readonly int MinAreaRectangle_OutRectLengthY_Offset;
    static readonly int MinAreaRectangle_bDebugDraw_Offset;
    
    public static void MinAreaRectangle(UnrealSharp.CoreUObject.Object worldContextObject, System.Collections.Generic.IList<System.DoubleNumerics.Vector3> inPoints, System.DoubleNumerics.Vector3 sampleSurfaceNormal, out System.DoubleNumerics.Vector3 outRectCenter, out UnrealSharp.Rotator outRectRotation, out float outRectLengthX, out float outRectLengthY, bool bDebugDraw = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MinAreaRectangle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, MinAreaRectangle_WorldContextObject_Offset), 0, null, worldContextObject);
            IntPtr InPoints_NativeBuffer = IntPtr.Add(ParamsBuffer, MinAreaRectangle_InPoints_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> InPoints_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, MinAreaRectangle_InPoints_ElementSize);
            InPoints_Marshaler.ToNative(InPoints_NativeBuffer, 0, null, inPoints);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MinAreaRectangle_SampleSurfaceNormal_Offset), 0, null, sampleSurfaceNormal);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, MinAreaRectangle_bDebugDraw_Offset), 0, null, bDebugDraw);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MinAreaRectangle_NativeFunction, ParamsBuffer);
            
            outRectCenter = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, MinAreaRectangle_OutRectCenter_Offset), 0, null);
            outRectRotation = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, MinAreaRectangle_OutRectRotation_Offset), 0, null);
            outRectLengthX = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, MinAreaRectangle_OutRectLengthX_Offset), 0, null);
            outRectLengthY = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, MinAreaRectangle_OutRectLengthY_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Min
    static readonly IntPtr Min_NativeFunction;
    static readonly int Min_ParamsSize;
    static readonly int Min_A_Offset;
    static readonly int Min_B_Offset;
    static readonly int Min_ReturnValue_Offset;
    
    public static int Min(int a, int b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Min_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Min_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Min_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Min_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Min_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MedianOfIntArray
    static readonly IntPtr MedianOfIntArray_NativeFunction;
    static readonly int MedianOfIntArray_ParamsSize;
    static readonly int MedianOfIntArray_IntArray_Offset;
    static readonly int MedianOfIntArray_IntArray_ElementSize;
    static readonly int MedianOfIntArray_MedianValue_Offset;
    
    public static void MedianOfIntArray(System.Collections.Generic.IList<int> intArray, out float medianValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MedianOfIntArray_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr IntArray_NativeBuffer = IntPtr.Add(ParamsBuffer, MedianOfIntArray_IntArray_Offset);
            UnrealArrayCopyMarshaler<int> IntArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, MedianOfIntArray_IntArray_ElementSize);
            IntArray_Marshaler.ToNative(IntArray_NativeBuffer, 0, null, intArray);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MedianOfIntArray_NativeFunction, ParamsBuffer);
            
            medianValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, MedianOfIntArray_MedianValue_Offset), 0, null);
            
            UnrealArrayCopyMarshaler<int>.DestructInstance(IntArray_NativeBuffer, 0);
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MaxOfIntArray
    static readonly IntPtr MaxOfIntArray_NativeFunction;
    static readonly int MaxOfIntArray_ParamsSize;
    static readonly int MaxOfIntArray_IntArray_Offset;
    static readonly int MaxOfIntArray_IntArray_ElementSize;
    static readonly int MaxOfIntArray_IndexOfMaxValue_Offset;
    static readonly int MaxOfIntArray_MaxValue_Offset;
    
    public static void MaxOfIntArray(System.Collections.Generic.IList<int> intArray, out int indexOfMaxValue, out int maxValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MaxOfIntArray_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr IntArray_NativeBuffer = IntPtr.Add(ParamsBuffer, MaxOfIntArray_IntArray_Offset);
            UnrealArrayCopyMarshaler<int> IntArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, MaxOfIntArray_IntArray_ElementSize);
            IntArray_Marshaler.ToNative(IntArray_NativeBuffer, 0, null, intArray);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MaxOfIntArray_NativeFunction, ParamsBuffer);
            
            indexOfMaxValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, MaxOfIntArray_IndexOfMaxValue_Offset), 0, null);
            maxValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, MaxOfIntArray_MaxValue_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MaxOfFloatArray
    static readonly IntPtr MaxOfFloatArray_NativeFunction;
    static readonly int MaxOfFloatArray_ParamsSize;
    static readonly int MaxOfFloatArray_FloatArray_Offset;
    static readonly int MaxOfFloatArray_FloatArray_ElementSize;
    static readonly int MaxOfFloatArray_IndexOfMaxValue_Offset;
    static readonly int MaxOfFloatArray_MaxValue_Offset;
    
    public static void MaxOfFloatArray(System.Collections.Generic.IList<float> floatArray, out int indexOfMaxValue, out float maxValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MaxOfFloatArray_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr FloatArray_NativeBuffer = IntPtr.Add(ParamsBuffer, MaxOfFloatArray_FloatArray_Offset);
            UnrealArrayCopyMarshaler<float> FloatArray_Marshaler = new UnrealArrayCopyMarshaler<float>(1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, MaxOfFloatArray_FloatArray_ElementSize);
            FloatArray_Marshaler.ToNative(FloatArray_NativeBuffer, 0, null, floatArray);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MaxOfFloatArray_NativeFunction, ParamsBuffer);
            
            indexOfMaxValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, MaxOfFloatArray_IndexOfMaxValue_Offset), 0, null);
            maxValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, MaxOfFloatArray_MaxValue_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MaxOfByteArray
    static readonly IntPtr MaxOfByteArray_NativeFunction;
    static readonly int MaxOfByteArray_ParamsSize;
    static readonly int MaxOfByteArray_ByteArray_Offset;
    static readonly int MaxOfByteArray_ByteArray_ElementSize;
    static readonly int MaxOfByteArray_IndexOfMaxValue_Offset;
    static readonly int MaxOfByteArray_MaxValue_Offset;
    
    public static void MaxOfByteArray(System.Collections.Generic.IList<byte> byteArray, out int indexOfMaxValue, out byte maxValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MaxOfByteArray_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ByteArray_NativeBuffer = IntPtr.Add(ParamsBuffer, MaxOfByteArray_ByteArray_Offset);
            UnrealArrayCopyMarshaler<byte> ByteArray_Marshaler = new UnrealArrayCopyMarshaler<byte>(1, BlittableMarshaller<byte>.ToNative, BlittableMarshaller<byte>.FromNative, MaxOfByteArray_ByteArray_ElementSize);
            ByteArray_Marshaler.ToNative(ByteArray_NativeBuffer, 0, null, byteArray);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MaxOfByteArray_NativeFunction, ParamsBuffer);
            
            indexOfMaxValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, MaxOfByteArray_IndexOfMaxValue_Offset), 0, null);
            maxValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, MaxOfByteArray_MaxValue_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MaxInt64
    static readonly IntPtr MaxInt64_NativeFunction;
    static readonly int MaxInt64_ParamsSize;
    static readonly int MaxInt64_A_Offset;
    static readonly int MaxInt64_B_Offset;
    static readonly int MaxInt64_ReturnValue_Offset;
    
    public static long MaxInt64(long a, long b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MaxInt64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, MaxInt64_A_Offset), 0, null, a);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, MaxInt64_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MaxInt64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, MaxInt64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Max
    static readonly IntPtr Max_NativeFunction;
    static readonly int Max_ParamsSize;
    static readonly int Max_A_Offset;
    static readonly int Max_B_Offset;
    static readonly int Max_ReturnValue_Offset;
    
    public static int Max(int a, int b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Max_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Max_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Max_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Max_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Max_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_TransformVector4
    static readonly IntPtr Matrix_TransformVector4_NativeFunction;
    static readonly int Matrix_TransformVector4_ParamsSize;
    static readonly int Matrix_TransformVector4_M_Offset;
    static readonly int Matrix_TransformVector4_V_Offset;
    static readonly int Matrix_TransformVector4_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector4 TransformVector4(System.DoubleNumerics.Matrix4x4 m, System.DoubleNumerics.Vector4 v)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_TransformVector4_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_TransformVector4_M_Offset), 0, null, m);
            BlittableMarshaller<System.DoubleNumerics.Vector4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_TransformVector4_V_Offset), 0, null, v);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_TransformVector4_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector4 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector4>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_TransformVector4_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_TransformVector
    static readonly IntPtr Matrix_TransformVector_NativeFunction;
    static readonly int Matrix_TransformVector_ParamsSize;
    static readonly int Matrix_TransformVector_M_Offset;
    static readonly int Matrix_TransformVector_V_Offset;
    static readonly int Matrix_TransformVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector4 TransformVector(System.DoubleNumerics.Matrix4x4 m, System.DoubleNumerics.Vector3 v)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_TransformVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_TransformVector_M_Offset), 0, null, m);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_TransformVector_V_Offset), 0, null, v);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_TransformVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector4 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector4>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_TransformVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_TransformPosition
    static readonly IntPtr Matrix_TransformPosition_NativeFunction;
    static readonly int Matrix_TransformPosition_ParamsSize;
    static readonly int Matrix_TransformPosition_M_Offset;
    static readonly int Matrix_TransformPosition_V_Offset;
    static readonly int Matrix_TransformPosition_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector4 TransformPosition(System.DoubleNumerics.Matrix4x4 m, System.DoubleNumerics.Vector3 v)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_TransformPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_TransformPosition_M_Offset), 0, null, m);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_TransformPosition_V_Offset), 0, null, v);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_TransformPosition_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector4 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector4>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_TransformPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_ToQuat
    static readonly IntPtr Matrix_ToQuat_NativeFunction;
    static readonly int Matrix_ToQuat_ParamsSize;
    static readonly int Matrix_ToQuat_M_Offset;
    static readonly int Matrix_ToQuat_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Quaternion ToQuat(System.DoubleNumerics.Matrix4x4 m)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_ToQuat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_ToQuat_M_Offset), 0, null, m);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_ToQuat_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Quaternion returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_ToQuat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_SetOrigin
    static readonly IntPtr Matrix_SetOrigin_NativeFunction;
    static readonly int Matrix_SetOrigin_ParamsSize;
    static readonly int Matrix_SetOrigin_M_Offset;
    static readonly int Matrix_SetOrigin_NewOrigin_Offset;
    
    public static void SetOrigin(ref System.DoubleNumerics.Matrix4x4 m, System.DoubleNumerics.Vector3 newOrigin)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_SetOrigin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_SetOrigin_M_Offset), 0, null, m);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_SetOrigin_NewOrigin_Offset), 0, null, newOrigin);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_SetOrigin_NativeFunction, ParamsBuffer);
            
            m = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_SetOrigin_M_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_SetColumn
    static readonly IntPtr Matrix_SetColumn_NativeFunction;
    static readonly int Matrix_SetColumn_ParamsSize;
    static readonly int Matrix_SetColumn_M_Offset;
    static readonly int Matrix_SetColumn_Column_Offset;
    static readonly int Matrix_SetColumn_Value_Offset;
    
    public static void SetColumn(ref System.DoubleNumerics.Matrix4x4 m, UnrealSharp.Engine.EMatrixColumns column, System.DoubleNumerics.Vector3 value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_SetColumn_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_SetColumn_M_Offset), 0, null, m);
            BlittableMarshaller<UnrealSharp.Engine.EMatrixColumns>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_SetColumn_Column_Offset), 0, null, column);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_SetColumn_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_SetColumn_NativeFunction, ParamsBuffer);
            
            m = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_SetColumn_M_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_SetAxis
    static readonly IntPtr Matrix_SetAxis_NativeFunction;
    static readonly int Matrix_SetAxis_ParamsSize;
    static readonly int Matrix_SetAxis_M_Offset;
    static readonly int Matrix_SetAxis_Axis_Offset;
    static readonly int Matrix_SetAxis_AxisVector_Offset;
    
    public static void SetAxis(ref System.DoubleNumerics.Matrix4x4 m, UnrealSharp.CoreUObject.EAxis axis, System.DoubleNumerics.Vector3 axisVector)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_SetAxis_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_SetAxis_M_Offset), 0, null, m);
            BlittableMarshaller<UnrealSharp.CoreUObject.EAxis>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_SetAxis_Axis_Offset), 0, null, axis);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_SetAxis_AxisVector_Offset), 0, null, axisVector);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_SetAxis_NativeFunction, ParamsBuffer);
            
            m = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_SetAxis_M_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_ScaleTranslation
    static readonly IntPtr Matrix_ScaleTranslation_NativeFunction;
    static readonly int Matrix_ScaleTranslation_ParamsSize;
    static readonly int Matrix_ScaleTranslation_M_Offset;
    static readonly int Matrix_ScaleTranslation_Scale3D_Offset;
    static readonly int Matrix_ScaleTranslation_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Matrix4x4 ScaleTranslation(System.DoubleNumerics.Matrix4x4 m, System.DoubleNumerics.Vector3 scale3D)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_ScaleTranslation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_ScaleTranslation_M_Offset), 0, null, m);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_ScaleTranslation_Scale3D_Offset), 0, null, scale3D);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_ScaleTranslation_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Matrix4x4 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_ScaleTranslation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_RemoveTranslation
    static readonly IntPtr Matrix_RemoveTranslation_NativeFunction;
    static readonly int Matrix_RemoveTranslation_ParamsSize;
    static readonly int Matrix_RemoveTranslation_M_Offset;
    static readonly int Matrix_RemoveTranslation_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Matrix4x4 RemoveTranslation(System.DoubleNumerics.Matrix4x4 m)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_RemoveTranslation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_RemoveTranslation_M_Offset), 0, null, m);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_RemoveTranslation_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Matrix4x4 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_RemoveTranslation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_RemoveScaling
    static readonly IntPtr Matrix_RemoveScaling_NativeFunction;
    static readonly int Matrix_RemoveScaling_ParamsSize;
    static readonly int Matrix_RemoveScaling_M_Offset;
    static readonly int Matrix_RemoveScaling_Tolerance_Offset;
    
    public static void RemoveScaling(ref System.DoubleNumerics.Matrix4x4 m, float tolerance = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_RemoveScaling_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_RemoveScaling_M_Offset), 0, null, m);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_RemoveScaling_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_RemoveScaling_NativeFunction, ParamsBuffer);
            
            m = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_RemoveScaling_M_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_Mirror
    static readonly IntPtr Matrix_Mirror_NativeFunction;
    static readonly int Matrix_Mirror_ParamsSize;
    static readonly int Matrix_Mirror_M_Offset;
    static readonly int Matrix_Mirror_MirrorAxis_Offset;
    static readonly int Matrix_Mirror_FlipAxis_Offset;
    static readonly int Matrix_Mirror_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Matrix4x4 Mirror(System.DoubleNumerics.Matrix4x4 m, UnrealSharp.CoreUObject.EAxis mirrorAxis, UnrealSharp.CoreUObject.EAxis flipAxis)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_Mirror_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_Mirror_M_Offset), 0, null, m);
            BlittableMarshaller<UnrealSharp.CoreUObject.EAxis>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_Mirror_MirrorAxis_Offset), 0, null, mirrorAxis);
            BlittableMarshaller<UnrealSharp.CoreUObject.EAxis>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_Mirror_FlipAxis_Offset), 0, null, flipAxis);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_Mirror_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Matrix4x4 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_Mirror_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_InverseTransformVector
    static readonly IntPtr Matrix_InverseTransformVector_NativeFunction;
    static readonly int Matrix_InverseTransformVector_ParamsSize;
    static readonly int Matrix_InverseTransformVector_M_Offset;
    static readonly int Matrix_InverseTransformVector_V_Offset;
    static readonly int Matrix_InverseTransformVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 InverseTransformVector(System.DoubleNumerics.Matrix4x4 m, System.DoubleNumerics.Vector3 v)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_InverseTransformVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_InverseTransformVector_M_Offset), 0, null, m);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_InverseTransformVector_V_Offset), 0, null, v);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_InverseTransformVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_InverseTransformVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_InverseTransformPosition
    static readonly IntPtr Matrix_InverseTransformPosition_NativeFunction;
    static readonly int Matrix_InverseTransformPosition_ParamsSize;
    static readonly int Matrix_InverseTransformPosition_M_Offset;
    static readonly int Matrix_InverseTransformPosition_V_Offset;
    static readonly int Matrix_InverseTransformPosition_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 InverseTransformPosition(System.DoubleNumerics.Matrix4x4 m, System.DoubleNumerics.Vector3 v)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_InverseTransformPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_InverseTransformPosition_M_Offset), 0, null, m);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_InverseTransformPosition_V_Offset), 0, null, v);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_InverseTransformPosition_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_InverseTransformPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_Identity
    static readonly IntPtr Matrix_Identity_NativeFunction;
    static readonly int Matrix_Identity_ParamsSize;
    static readonly int Matrix_Identity_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Matrix4x4 Matrix_Identity()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_Identity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_Identity_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Matrix4x4 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_Identity_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_GetUnitAxis
    static readonly IntPtr Matrix_GetUnitAxis_NativeFunction;
    static readonly int Matrix_GetUnitAxis_ParamsSize;
    static readonly int Matrix_GetUnitAxis_M_Offset;
    static readonly int Matrix_GetUnitAxis_Axis_Offset;
    static readonly int Matrix_GetUnitAxis_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetUnitAxis(System.DoubleNumerics.Matrix4x4 m, UnrealSharp.CoreUObject.EAxis axis)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_GetUnitAxis_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetUnitAxis_M_Offset), 0, null, m);
            BlittableMarshaller<UnrealSharp.CoreUObject.EAxis>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetUnitAxis_Axis_Offset), 0, null, axis);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_GetUnitAxis_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetUnitAxis_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_GetUnitAxes
    static readonly IntPtr Matrix_GetUnitAxes_NativeFunction;
    static readonly int Matrix_GetUnitAxes_ParamsSize;
    static readonly int Matrix_GetUnitAxes_M_Offset;
    static readonly int Matrix_GetUnitAxes_X_Offset;
    static readonly int Matrix_GetUnitAxes_Y_Offset;
    static readonly int Matrix_GetUnitAxes_Z_Offset;
    
    public static void GetUnitAxes(System.DoubleNumerics.Matrix4x4 m, out System.DoubleNumerics.Vector3 x, out System.DoubleNumerics.Vector3 y, out System.DoubleNumerics.Vector3 z)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_GetUnitAxes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetUnitAxes_M_Offset), 0, null, m);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_GetUnitAxes_NativeFunction, ParamsBuffer);
            
            x = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetUnitAxes_X_Offset), 0, null);
            y = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetUnitAxes_Y_Offset), 0, null);
            z = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetUnitAxes_Z_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_GetTransposed
    static readonly IntPtr Matrix_GetTransposed_NativeFunction;
    static readonly int Matrix_GetTransposed_ParamsSize;
    static readonly int Matrix_GetTransposed_M_Offset;
    static readonly int Matrix_GetTransposed_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Matrix4x4 GetTransposed(System.DoubleNumerics.Matrix4x4 m)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_GetTransposed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetTransposed_M_Offset), 0, null, m);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_GetTransposed_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Matrix4x4 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetTransposed_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_GetTransposeAdjoint
    static readonly IntPtr Matrix_GetTransposeAdjoint_NativeFunction;
    static readonly int Matrix_GetTransposeAdjoint_ParamsSize;
    static readonly int Matrix_GetTransposeAdjoint_M_Offset;
    static readonly int Matrix_GetTransposeAdjoint_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Matrix4x4 GetTransposeAdjoint(System.DoubleNumerics.Matrix4x4 m)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_GetTransposeAdjoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetTransposeAdjoint_M_Offset), 0, null, m);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_GetTransposeAdjoint_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Matrix4x4 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetTransposeAdjoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_GetScaleVector
    static readonly IntPtr Matrix_GetScaleVector_NativeFunction;
    static readonly int Matrix_GetScaleVector_ParamsSize;
    static readonly int Matrix_GetScaleVector_M_Offset;
    static readonly int Matrix_GetScaleVector_Tolerance_Offset;
    static readonly int Matrix_GetScaleVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetScaleVector(System.DoubleNumerics.Matrix4x4 m, float tolerance = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_GetScaleVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetScaleVector_M_Offset), 0, null, m);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetScaleVector_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_GetScaleVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetScaleVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_GetScaledAxis
    static readonly IntPtr Matrix_GetScaledAxis_NativeFunction;
    static readonly int Matrix_GetScaledAxis_ParamsSize;
    static readonly int Matrix_GetScaledAxis_M_Offset;
    static readonly int Matrix_GetScaledAxis_Axis_Offset;
    static readonly int Matrix_GetScaledAxis_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetScaledAxis(System.DoubleNumerics.Matrix4x4 m, UnrealSharp.CoreUObject.EAxis axis)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_GetScaledAxis_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetScaledAxis_M_Offset), 0, null, m);
            BlittableMarshaller<UnrealSharp.CoreUObject.EAxis>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetScaledAxis_Axis_Offset), 0, null, axis);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_GetScaledAxis_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetScaledAxis_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_GetScaledAxes
    static readonly IntPtr Matrix_GetScaledAxes_NativeFunction;
    static readonly int Matrix_GetScaledAxes_ParamsSize;
    static readonly int Matrix_GetScaledAxes_M_Offset;
    static readonly int Matrix_GetScaledAxes_X_Offset;
    static readonly int Matrix_GetScaledAxes_Y_Offset;
    static readonly int Matrix_GetScaledAxes_Z_Offset;
    
    public static void GetScaledAxes(System.DoubleNumerics.Matrix4x4 m, out System.DoubleNumerics.Vector3 x, out System.DoubleNumerics.Vector3 y, out System.DoubleNumerics.Vector3 z)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_GetScaledAxes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetScaledAxes_M_Offset), 0, null, m);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_GetScaledAxes_NativeFunction, ParamsBuffer);
            
            x = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetScaledAxes_X_Offset), 0, null);
            y = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetScaledAxes_Y_Offset), 0, null);
            z = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetScaledAxes_Z_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_GetRotDeterminant
    static readonly IntPtr Matrix_GetRotDeterminant_NativeFunction;
    static readonly int Matrix_GetRotDeterminant_ParamsSize;
    static readonly int Matrix_GetRotDeterminant_M_Offset;
    static readonly int Matrix_GetRotDeterminant_ReturnValue_Offset;
    
    public static float GetRotDeterminant(System.DoubleNumerics.Matrix4x4 m)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_GetRotDeterminant_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetRotDeterminant_M_Offset), 0, null, m);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_GetRotDeterminant_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetRotDeterminant_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_GetRotator
    static readonly IntPtr Matrix_GetRotator_NativeFunction;
    static readonly int Matrix_GetRotator_ParamsSize;
    static readonly int Matrix_GetRotator_M_Offset;
    static readonly int Matrix_GetRotator_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator GetRotator(System.DoubleNumerics.Matrix4x4 m)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_GetRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetRotator_M_Offset), 0, null, m);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_GetRotator_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetRotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_GetOrigin
    static readonly IntPtr Matrix_GetOrigin_NativeFunction;
    static readonly int Matrix_GetOrigin_ParamsSize;
    static readonly int Matrix_GetOrigin_InMatrix_Offset;
    static readonly int Matrix_GetOrigin_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetOrigin(System.DoubleNumerics.Matrix4x4 inMatrix)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_GetOrigin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetOrigin_InMatrix_Offset), 0, null, inMatrix);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_GetOrigin_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetOrigin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_GetMaximumAxisScale
    static readonly IntPtr Matrix_GetMaximumAxisScale_NativeFunction;
    static readonly int Matrix_GetMaximumAxisScale_ParamsSize;
    static readonly int Matrix_GetMaximumAxisScale_M_Offset;
    static readonly int Matrix_GetMaximumAxisScale_ReturnValue_Offset;
    
    public static float GetMaximumAxisScale(System.DoubleNumerics.Matrix4x4 m)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_GetMaximumAxisScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetMaximumAxisScale_M_Offset), 0, null, m);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_GetMaximumAxisScale_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetMaximumAxisScale_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_GetMatrixWithoutScale
    static readonly IntPtr Matrix_GetMatrixWithoutScale_NativeFunction;
    static readonly int Matrix_GetMatrixWithoutScale_ParamsSize;
    static readonly int Matrix_GetMatrixWithoutScale_M_Offset;
    static readonly int Matrix_GetMatrixWithoutScale_Tolerance_Offset;
    static readonly int Matrix_GetMatrixWithoutScale_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Matrix4x4 GetMatrixWithoutScale(System.DoubleNumerics.Matrix4x4 m, float tolerance = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_GetMatrixWithoutScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetMatrixWithoutScale_M_Offset), 0, null, m);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetMatrixWithoutScale_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_GetMatrixWithoutScale_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Matrix4x4 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetMatrixWithoutScale_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_GetInverse
    static readonly IntPtr Matrix_GetInverse_NativeFunction;
    static readonly int Matrix_GetInverse_ParamsSize;
    static readonly int Matrix_GetInverse_M_Offset;
    static readonly int Matrix_GetInverse_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Matrix4x4 GetInverse(System.DoubleNumerics.Matrix4x4 m)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_GetInverse_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetInverse_M_Offset), 0, null, m);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_GetInverse_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Matrix4x4 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetInverse_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_GetFrustumTopPlane
    static readonly IntPtr Matrix_GetFrustumTopPlane_NativeFunction;
    static readonly int Matrix_GetFrustumTopPlane_ParamsSize;
    static readonly int Matrix_GetFrustumTopPlane_M_Offset;
    static readonly int Matrix_GetFrustumTopPlane_OutPlane_Offset;
    static readonly int Matrix_GetFrustumTopPlane_ReturnValue_Offset;
    
    public static bool GetFrustumTopPlane(System.DoubleNumerics.Matrix4x4 m, out UnrealSharp.CoreUObject.Plane outPlane)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_GetFrustumTopPlane_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetFrustumTopPlane_M_Offset), 0, null, m);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_GetFrustumTopPlane_NativeFunction, ParamsBuffer);
            
            outPlane = BlittableMarshaller<UnrealSharp.CoreUObject.Plane>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetFrustumTopPlane_OutPlane_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetFrustumTopPlane_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_GetFrustumRightPlane
    static readonly IntPtr Matrix_GetFrustumRightPlane_NativeFunction;
    static readonly int Matrix_GetFrustumRightPlane_ParamsSize;
    static readonly int Matrix_GetFrustumRightPlane_M_Offset;
    static readonly int Matrix_GetFrustumRightPlane_OutPlane_Offset;
    static readonly int Matrix_GetFrustumRightPlane_ReturnValue_Offset;
    
    public static bool GetFrustumRightPlane(System.DoubleNumerics.Matrix4x4 m, out UnrealSharp.CoreUObject.Plane outPlane)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_GetFrustumRightPlane_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetFrustumRightPlane_M_Offset), 0, null, m);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_GetFrustumRightPlane_NativeFunction, ParamsBuffer);
            
            outPlane = BlittableMarshaller<UnrealSharp.CoreUObject.Plane>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetFrustumRightPlane_OutPlane_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetFrustumRightPlane_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_GetFrustumNearPlane
    static readonly IntPtr Matrix_GetFrustumNearPlane_NativeFunction;
    static readonly int Matrix_GetFrustumNearPlane_ParamsSize;
    static readonly int Matrix_GetFrustumNearPlane_M_Offset;
    static readonly int Matrix_GetFrustumNearPlane_OutPlane_Offset;
    static readonly int Matrix_GetFrustumNearPlane_ReturnValue_Offset;
    
    public static bool GetFrustumNearPlane(System.DoubleNumerics.Matrix4x4 m, out UnrealSharp.CoreUObject.Plane outPlane)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_GetFrustumNearPlane_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetFrustumNearPlane_M_Offset), 0, null, m);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_GetFrustumNearPlane_NativeFunction, ParamsBuffer);
            
            outPlane = BlittableMarshaller<UnrealSharp.CoreUObject.Plane>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetFrustumNearPlane_OutPlane_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetFrustumNearPlane_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_GetFrustumLeftPlane
    static readonly IntPtr Matrix_GetFrustumLeftPlane_NativeFunction;
    static readonly int Matrix_GetFrustumLeftPlane_ParamsSize;
    static readonly int Matrix_GetFrustumLeftPlane_M_Offset;
    static readonly int Matrix_GetFrustumLeftPlane_OutPlane_Offset;
    static readonly int Matrix_GetFrustumLeftPlane_ReturnValue_Offset;
    
    public static bool GetFrustumLeftPlane(System.DoubleNumerics.Matrix4x4 m, out UnrealSharp.CoreUObject.Plane outPlane)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_GetFrustumLeftPlane_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetFrustumLeftPlane_M_Offset), 0, null, m);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_GetFrustumLeftPlane_NativeFunction, ParamsBuffer);
            
            outPlane = BlittableMarshaller<UnrealSharp.CoreUObject.Plane>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetFrustumLeftPlane_OutPlane_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetFrustumLeftPlane_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_GetFrustumFarPlane
    static readonly IntPtr Matrix_GetFrustumFarPlane_NativeFunction;
    static readonly int Matrix_GetFrustumFarPlane_ParamsSize;
    static readonly int Matrix_GetFrustumFarPlane_M_Offset;
    static readonly int Matrix_GetFrustumFarPlane_OutPlane_Offset;
    static readonly int Matrix_GetFrustumFarPlane_ReturnValue_Offset;
    
    public static bool GetFrustumFarPlane(System.DoubleNumerics.Matrix4x4 m, out UnrealSharp.CoreUObject.Plane outPlane)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_GetFrustumFarPlane_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetFrustumFarPlane_M_Offset), 0, null, m);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_GetFrustumFarPlane_NativeFunction, ParamsBuffer);
            
            outPlane = BlittableMarshaller<UnrealSharp.CoreUObject.Plane>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetFrustumFarPlane_OutPlane_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetFrustumFarPlane_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_GetFrustumBottomPlane
    static readonly IntPtr Matrix_GetFrustumBottomPlane_NativeFunction;
    static readonly int Matrix_GetFrustumBottomPlane_ParamsSize;
    static readonly int Matrix_GetFrustumBottomPlane_M_Offset;
    static readonly int Matrix_GetFrustumBottomPlane_OutPlane_Offset;
    static readonly int Matrix_GetFrustumBottomPlane_ReturnValue_Offset;
    
    public static bool GetFrustumBottomPlane(System.DoubleNumerics.Matrix4x4 m, out UnrealSharp.CoreUObject.Plane outPlane)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_GetFrustumBottomPlane_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetFrustumBottomPlane_M_Offset), 0, null, m);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_GetFrustumBottomPlane_NativeFunction, ParamsBuffer);
            
            outPlane = BlittableMarshaller<UnrealSharp.CoreUObject.Plane>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetFrustumBottomPlane_OutPlane_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetFrustumBottomPlane_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_GetDeterminant
    static readonly IntPtr Matrix_GetDeterminant_NativeFunction;
    static readonly int Matrix_GetDeterminant_ParamsSize;
    static readonly int Matrix_GetDeterminant_M_Offset;
    static readonly int Matrix_GetDeterminant_ReturnValue_Offset;
    
    public static float GetDeterminant(System.DoubleNumerics.Matrix4x4 m)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_GetDeterminant_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetDeterminant_M_Offset), 0, null, m);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_GetDeterminant_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetDeterminant_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_GetColumn
    static readonly IntPtr Matrix_GetColumn_NativeFunction;
    static readonly int Matrix_GetColumn_ParamsSize;
    static readonly int Matrix_GetColumn_M_Offset;
    static readonly int Matrix_GetColumn_Column_Offset;
    static readonly int Matrix_GetColumn_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetColumn(System.DoubleNumerics.Matrix4x4 m, UnrealSharp.Engine.EMatrixColumns column)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_GetColumn_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetColumn_M_Offset), 0, null, m);
            BlittableMarshaller<UnrealSharp.Engine.EMatrixColumns>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_GetColumn_Column_Offset), 0, null, column);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_GetColumn_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_GetColumn_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_ContainsNaN
    static readonly IntPtr Matrix_ContainsNaN_NativeFunction;
    static readonly int Matrix_ContainsNaN_ParamsSize;
    static readonly int Matrix_ContainsNaN_M_Offset;
    static readonly int Matrix_ContainsNaN_ReturnValue_Offset;
    
    public static bool ContainsNaN(System.DoubleNumerics.Matrix4x4 m)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_ContainsNaN_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_ContainsNaN_M_Offset), 0, null, m);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_ContainsNaN_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Matrix_ContainsNaN_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_ConcatenateTranslation
    static readonly IntPtr Matrix_ConcatenateTranslation_NativeFunction;
    static readonly int Matrix_ConcatenateTranslation_ParamsSize;
    static readonly int Matrix_ConcatenateTranslation_M_Offset;
    static readonly int Matrix_ConcatenateTranslation_Translation_Offset;
    static readonly int Matrix_ConcatenateTranslation_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Matrix4x4 ConcatenateTranslation(System.DoubleNumerics.Matrix4x4 m, System.DoubleNumerics.Vector3 translation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_ConcatenateTranslation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_ConcatenateTranslation_M_Offset), 0, null, m);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_ConcatenateTranslation_Translation_Offset), 0, null, translation);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_ConcatenateTranslation_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Matrix4x4 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_ConcatenateTranslation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Matrix_ApplyScale
    static readonly IntPtr Matrix_ApplyScale_NativeFunction;
    static readonly int Matrix_ApplyScale_ParamsSize;
    static readonly int Matrix_ApplyScale_M_Offset;
    static readonly int Matrix_ApplyScale_Scale_Offset;
    static readonly int Matrix_ApplyScale_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Matrix4x4 ApplyScale(System.DoubleNumerics.Matrix4x4 m, float scale)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Matrix_ApplyScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_ApplyScale_M_Offset), 0, null, m);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Matrix_ApplyScale_Scale_Offset), 0, null, scale);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Matrix_ApplyScale_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Matrix4x4 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, Matrix_ApplyScale_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MapRangeUnclamped
    static readonly IntPtr MapRangeUnclamped_NativeFunction;
    static readonly int MapRangeUnclamped_ParamsSize;
    static readonly int MapRangeUnclamped_Value_Offset;
    static readonly int MapRangeUnclamped_InRangeA_Offset;
    static readonly int MapRangeUnclamped_InRangeB_Offset;
    static readonly int MapRangeUnclamped_OutRangeA_Offset;
    static readonly int MapRangeUnclamped_OutRangeB_Offset;
    static readonly int MapRangeUnclamped_ReturnValue_Offset;
    
    public static double MapRangeUnclamped(double value, double inRangeA, double inRangeB, double outRangeA, double outRangeB)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MapRangeUnclamped_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, MapRangeUnclamped_Value_Offset), 0, null, value);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, MapRangeUnclamped_InRangeA_Offset), 0, null, inRangeA);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, MapRangeUnclamped_InRangeB_Offset), 0, null, inRangeB);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, MapRangeUnclamped_OutRangeA_Offset), 0, null, outRangeA);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, MapRangeUnclamped_OutRangeB_Offset), 0, null, outRangeB);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MapRangeUnclamped_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, MapRangeUnclamped_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MapRangeClamped
    static readonly IntPtr MapRangeClamped_NativeFunction;
    static readonly int MapRangeClamped_ParamsSize;
    static readonly int MapRangeClamped_Value_Offset;
    static readonly int MapRangeClamped_InRangeA_Offset;
    static readonly int MapRangeClamped_InRangeB_Offset;
    static readonly int MapRangeClamped_OutRangeA_Offset;
    static readonly int MapRangeClamped_OutRangeB_Offset;
    static readonly int MapRangeClamped_ReturnValue_Offset;
    
    public static double MapRangeClamped(double value, double inRangeA, double inRangeB, double outRangeA, double outRangeB)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MapRangeClamped_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, MapRangeClamped_Value_Offset), 0, null, value);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, MapRangeClamped_InRangeA_Offset), 0, null, inRangeA);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, MapRangeClamped_InRangeB_Offset), 0, null, inRangeB);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, MapRangeClamped_OutRangeA_Offset), 0, null, outRangeA);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, MapRangeClamped_OutRangeB_Offset), 0, null, outRangeB);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MapRangeClamped_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, MapRangeClamped_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MakeRotFromZY
    static readonly IntPtr MakeRotFromZY_NativeFunction;
    static readonly int MakeRotFromZY_ParamsSize;
    static readonly int MakeRotFromZY_Z_Offset;
    static readonly int MakeRotFromZY_Y_Offset;
    static readonly int MakeRotFromZY_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator MakeRotFromZY(System.DoubleNumerics.Vector3 z, System.DoubleNumerics.Vector3 y)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeRotFromZY_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakeRotFromZY_Z_Offset), 0, null, z);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakeRotFromZY_Y_Offset), 0, null, y);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeRotFromZY_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, MakeRotFromZY_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MakeRotFromZX
    static readonly IntPtr MakeRotFromZX_NativeFunction;
    static readonly int MakeRotFromZX_ParamsSize;
    static readonly int MakeRotFromZX_Z_Offset;
    static readonly int MakeRotFromZX_X_Offset;
    static readonly int MakeRotFromZX_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator MakeRotFromZX(System.DoubleNumerics.Vector3 z, System.DoubleNumerics.Vector3 x)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeRotFromZX_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakeRotFromZX_Z_Offset), 0, null, z);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakeRotFromZX_X_Offset), 0, null, x);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeRotFromZX_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, MakeRotFromZX_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MakeRotFromZ
    static readonly IntPtr MakeRotFromZ_NativeFunction;
    static readonly int MakeRotFromZ_ParamsSize;
    static readonly int MakeRotFromZ_Z_Offset;
    static readonly int MakeRotFromZ_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator MakeRotFromZ(System.DoubleNumerics.Vector3 z)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeRotFromZ_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakeRotFromZ_Z_Offset), 0, null, z);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeRotFromZ_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, MakeRotFromZ_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MakeRotFromYZ
    static readonly IntPtr MakeRotFromYZ_NativeFunction;
    static readonly int MakeRotFromYZ_ParamsSize;
    static readonly int MakeRotFromYZ_Y_Offset;
    static readonly int MakeRotFromYZ_Z_Offset;
    static readonly int MakeRotFromYZ_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator MakeRotFromYZ(System.DoubleNumerics.Vector3 y, System.DoubleNumerics.Vector3 z)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeRotFromYZ_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakeRotFromYZ_Y_Offset), 0, null, y);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakeRotFromYZ_Z_Offset), 0, null, z);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeRotFromYZ_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, MakeRotFromYZ_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MakeRotFromYX
    static readonly IntPtr MakeRotFromYX_NativeFunction;
    static readonly int MakeRotFromYX_ParamsSize;
    static readonly int MakeRotFromYX_Y_Offset;
    static readonly int MakeRotFromYX_X_Offset;
    static readonly int MakeRotFromYX_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator MakeRotFromYX(System.DoubleNumerics.Vector3 y, System.DoubleNumerics.Vector3 x)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeRotFromYX_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakeRotFromYX_Y_Offset), 0, null, y);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakeRotFromYX_X_Offset), 0, null, x);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeRotFromYX_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, MakeRotFromYX_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MakeRotFromY
    static readonly IntPtr MakeRotFromY_NativeFunction;
    static readonly int MakeRotFromY_ParamsSize;
    static readonly int MakeRotFromY_Y_Offset;
    static readonly int MakeRotFromY_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator MakeRotFromY(System.DoubleNumerics.Vector3 y)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeRotFromY_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakeRotFromY_Y_Offset), 0, null, y);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeRotFromY_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, MakeRotFromY_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MakeRotFromXZ
    static readonly IntPtr MakeRotFromXZ_NativeFunction;
    static readonly int MakeRotFromXZ_ParamsSize;
    static readonly int MakeRotFromXZ_X_Offset;
    static readonly int MakeRotFromXZ_Z_Offset;
    static readonly int MakeRotFromXZ_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator MakeRotFromXZ(System.DoubleNumerics.Vector3 x, System.DoubleNumerics.Vector3 z)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeRotFromXZ_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakeRotFromXZ_X_Offset), 0, null, x);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakeRotFromXZ_Z_Offset), 0, null, z);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeRotFromXZ_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, MakeRotFromXZ_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MakeRotFromXY
    static readonly IntPtr MakeRotFromXY_NativeFunction;
    static readonly int MakeRotFromXY_ParamsSize;
    static readonly int MakeRotFromXY_X_Offset;
    static readonly int MakeRotFromXY_Y_Offset;
    static readonly int MakeRotFromXY_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator MakeRotFromXY(System.DoubleNumerics.Vector3 x, System.DoubleNumerics.Vector3 y)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeRotFromXY_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakeRotFromXY_X_Offset), 0, null, x);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakeRotFromXY_Y_Offset), 0, null, y);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeRotFromXY_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, MakeRotFromXY_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MakeRotFromX
    static readonly IntPtr MakeRotFromX_NativeFunction;
    static readonly int MakeRotFromX_ParamsSize;
    static readonly int MakeRotFromX_X_Offset;
    static readonly int MakeRotFromX_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator MakeRotFromX(System.DoubleNumerics.Vector3 x)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeRotFromX_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakeRotFromX_X_Offset), 0, null, x);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeRotFromX_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, MakeRotFromX_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MakeRotationFromAxes
    static readonly IntPtr MakeRotationFromAxes_NativeFunction;
    static readonly int MakeRotationFromAxes_ParamsSize;
    static readonly int MakeRotationFromAxes_Forward_Offset;
    static readonly int MakeRotationFromAxes_Right_Offset;
    static readonly int MakeRotationFromAxes_Up_Offset;
    static readonly int MakeRotationFromAxes_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator MakeRotationFromAxes(System.DoubleNumerics.Vector3 forward, System.DoubleNumerics.Vector3 right, System.DoubleNumerics.Vector3 up)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeRotationFromAxes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakeRotationFromAxes_Forward_Offset), 0, null, forward);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakeRotationFromAxes_Right_Offset), 0, null, right);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakeRotationFromAxes_Up_Offset), 0, null, up);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeRotationFromAxes_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, MakeRotationFromAxes_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MakeRelativeTransform
    static readonly IntPtr MakeRelativeTransform_NativeFunction;
    static readonly int MakeRelativeTransform_ParamsSize;
    static readonly int MakeRelativeTransform_A_Offset;
    static readonly int MakeRelativeTransform_RelativeTo_Offset;
    static readonly int MakeRelativeTransform_ReturnValue_Offset;
    
    public static UnrealSharp.Transform MakeRelative(UnrealSharp.Transform a, UnrealSharp.Transform relativeTo)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeRelativeTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, MakeRelativeTransform_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, MakeRelativeTransform_RelativeTo_Offset), 0, null, relativeTo);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeRelativeTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, MakeRelativeTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MakePulsatingValue
    static readonly IntPtr MakePulsatingValue_NativeFunction;
    static readonly int MakePulsatingValue_ParamsSize;
    static readonly int MakePulsatingValue_InCurrentTime_Offset;
    static readonly int MakePulsatingValue_InPulsesPerSecond_Offset;
    static readonly int MakePulsatingValue_InPhase_Offset;
    static readonly int MakePulsatingValue_ReturnValue_Offset;
    
    public static float MakePulsatingValue(float inCurrentTime, float inPulsesPerSecond = 1.000000f, float inPhase = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakePulsatingValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, MakePulsatingValue_InCurrentTime_Offset), 0, null, inCurrentTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, MakePulsatingValue_InPulsesPerSecond_Offset), 0, null, inPulsesPerSecond);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, MakePulsatingValue_InPhase_Offset), 0, null, inPhase);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakePulsatingValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, MakePulsatingValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:MakePlaneFromPointAndNormal
    static readonly IntPtr MakePlaneFromPointAndNormal_NativeFunction;
    static readonly int MakePlaneFromPointAndNormal_ParamsSize;
    static readonly int MakePlaneFromPointAndNormal_Point_Offset;
    static readonly int MakePlaneFromPointAndNormal_Normal_Offset;
    static readonly int MakePlaneFromPointAndNormal_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Plane MakePlaneFromPointAndNormal(System.DoubleNumerics.Vector3 point, System.DoubleNumerics.Vector3 normal)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakePlaneFromPointAndNormal_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakePlaneFromPointAndNormal_Point_Offset), 0, null, point);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MakePlaneFromPointAndNormal_Normal_Offset), 0, null, normal);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakePlaneFromPointAndNormal_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Plane returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.Plane>.FromNative(IntPtr.Add(ParamsBuffer, MakePlaneFromPointAndNormal_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Loge
    static readonly IntPtr Loge_NativeFunction;
    static readonly int Loge_ParamsSize;
    static readonly int Loge_A_Offset;
    static readonly int Loge_ReturnValue_Offset;
    
    public static double Loge(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Loge_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Loge_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Loge_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Loge_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Log
    static readonly IntPtr Log_NativeFunction;
    static readonly int Log_ParamsSize;
    static readonly int Log_A_Offset;
    static readonly int Log_Base_Offset;
    static readonly int Log_ReturnValue_Offset;
    
    public static double Log(double a, double @base = 1.000000)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Log_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Log_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Log_Base_Offset), 0, null, @base);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Log_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Log_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinePlaneIntersection_OriginNormal
    static readonly IntPtr LinePlaneIntersection_OriginNormal_NativeFunction;
    static readonly int LinePlaneIntersection_OriginNormal_ParamsSize;
    static readonly int LinePlaneIntersection_OriginNormal_LineStart_Offset;
    static readonly int LinePlaneIntersection_OriginNormal_LineEnd_Offset;
    static readonly int LinePlaneIntersection_OriginNormal_PlaneOrigin_Offset;
    static readonly int LinePlaneIntersection_OriginNormal_PlaneNormal_Offset;
    static readonly int LinePlaneIntersection_OriginNormal_T_Offset;
    static readonly int LinePlaneIntersection_OriginNormal_Intersection_Offset;
    static readonly int LinePlaneIntersection_OriginNormal_ReturnValue_Offset;
    
    public static bool LinePlaneIntersection_OriginNormal(System.DoubleNumerics.Vector3 lineStart, System.DoubleNumerics.Vector3 lineEnd, System.DoubleNumerics.Vector3 planeOrigin, System.DoubleNumerics.Vector3 planeNormal, out float t, out System.DoubleNumerics.Vector3 intersection)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinePlaneIntersection_OriginNormal_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LinePlaneIntersection_OriginNormal_LineStart_Offset), 0, null, lineStart);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LinePlaneIntersection_OriginNormal_LineEnd_Offset), 0, null, lineEnd);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LinePlaneIntersection_OriginNormal_PlaneOrigin_Offset), 0, null, planeOrigin);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LinePlaneIntersection_OriginNormal_PlaneNormal_Offset), 0, null, planeNormal);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinePlaneIntersection_OriginNormal_NativeFunction, ParamsBuffer);
            
            t = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, LinePlaneIntersection_OriginNormal_T_Offset), 0, null);
            intersection = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, LinePlaneIntersection_OriginNormal_Intersection_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LinePlaneIntersection_OriginNormal_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinePlaneIntersection
    static readonly IntPtr LinePlaneIntersection_NativeFunction;
    static readonly int LinePlaneIntersection_ParamsSize;
    static readonly int LinePlaneIntersection_LineStart_Offset;
    static readonly int LinePlaneIntersection_LineEnd_Offset;
    static readonly int LinePlaneIntersection_APlane_Offset;
    static readonly int LinePlaneIntersection_T_Offset;
    static readonly int LinePlaneIntersection_Intersection_Offset;
    static readonly int LinePlaneIntersection_ReturnValue_Offset;
    
    public static bool LinePlaneIntersection(System.DoubleNumerics.Vector3 lineStart, System.DoubleNumerics.Vector3 lineEnd, UnrealSharp.CoreUObject.Plane aPlane, out float t, out System.DoubleNumerics.Vector3 intersection)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinePlaneIntersection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LinePlaneIntersection_LineStart_Offset), 0, null, lineStart);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LinePlaneIntersection_LineEnd_Offset), 0, null, lineEnd);
            BlittableMarshaller<UnrealSharp.CoreUObject.Plane>.ToNative(IntPtr.Add(ParamsBuffer, LinePlaneIntersection_APlane_Offset), 0, null, aPlane);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinePlaneIntersection_NativeFunction, ParamsBuffer);
            
            t = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, LinePlaneIntersection_T_Offset), 0, null);
            intersection = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, LinePlaneIntersection_Intersection_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LinePlaneIntersection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColorLerpUsingHSV
    static readonly IntPtr LinearColorLerpUsingHSV_NativeFunction;
    static readonly int LinearColorLerpUsingHSV_ParamsSize;
    static readonly int LinearColorLerpUsingHSV_A_Offset;
    static readonly int LinearColorLerpUsingHSV_B_Offset;
    static readonly int LinearColorLerpUsingHSV_Alpha_Offset;
    static readonly int LinearColorLerpUsingHSV_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor LerpUsingHSVTo(UnrealSharp.CoreUObject.LinearColor a, UnrealSharp.CoreUObject.LinearColor b, float alpha)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColorLerpUsingHSV_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColorLerpUsingHSV_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColorLerpUsingHSV_B_Offset), 0, null, b);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LinearColorLerpUsingHSV_Alpha_Offset), 0, null, alpha);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColorLerpUsingHSV_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, LinearColorLerpUsingHSV_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColorLerp
    static readonly IntPtr LinearColorLerp_NativeFunction;
    static readonly int LinearColorLerp_ParamsSize;
    static readonly int LinearColorLerp_A_Offset;
    static readonly int LinearColorLerp_B_Offset;
    static readonly int LinearColorLerp_Alpha_Offset;
    static readonly int LinearColorLerp_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor LerpTo(UnrealSharp.CoreUObject.LinearColor a, UnrealSharp.CoreUObject.LinearColor b, float alpha)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColorLerp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColorLerp_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColorLerp_B_Offset), 0, null, b);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LinearColorLerp_Alpha_Offset), 0, null, alpha);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColorLerp_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, LinearColorLerp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_Yellow
    static readonly IntPtr LinearColor_Yellow_NativeFunction;
    static readonly int LinearColor_Yellow_ParamsSize;
    static readonly int LinearColor_Yellow_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor LinearColor_Yellow()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_Yellow_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_Yellow_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_Yellow_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_White
    static readonly IntPtr LinearColor_White_NativeFunction;
    static readonly int LinearColor_White_ParamsSize;
    static readonly int LinearColor_White_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor LinearColor_White()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_White_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_White_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_White_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_Transparent
    static readonly IntPtr LinearColor_Transparent_NativeFunction;
    static readonly int LinearColor_Transparent_ParamsSize;
    static readonly int LinearColor_Transparent_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor LinearColor_Transparent()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_Transparent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_Transparent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_Transparent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_ToRGBE
    static readonly IntPtr LinearColor_ToRGBE_NativeFunction;
    static readonly int LinearColor_ToRGBE_ParamsSize;
    static readonly int LinearColor_ToRGBE_InLinearColor_Offset;
    static readonly int LinearColor_ToRGBE_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Color ToRGBE(UnrealSharp.CoreUObject.LinearColor inLinearColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_ToRGBE_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_ToRGBE_InLinearColor_Offset), 0, null, inLinearColor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_ToRGBE_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Color returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_ToRGBE_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_ToNewOpacity
    static readonly IntPtr LinearColor_ToNewOpacity_NativeFunction;
    static readonly int LinearColor_ToNewOpacity_ParamsSize;
    static readonly int LinearColor_ToNewOpacity_InColor_Offset;
    static readonly int LinearColor_ToNewOpacity_InOpacity_Offset;
    static readonly int LinearColor_ToNewOpacity_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor ToNewOpacity(UnrealSharp.CoreUObject.LinearColor inColor, float inOpacity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_ToNewOpacity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_ToNewOpacity_InColor_Offset), 0, null, inColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_ToNewOpacity_InOpacity_Offset), 0, null, inOpacity);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_ToNewOpacity_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_ToNewOpacity_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_SetTemperature
    static readonly IntPtr LinearColor_SetTemperature_NativeFunction;
    static readonly int LinearColor_SetTemperature_ParamsSize;
    static readonly int LinearColor_SetTemperature_InOutColor_Offset;
    static readonly int LinearColor_SetTemperature_InTemperature_Offset;
    
    public static void SetTemperature(ref UnrealSharp.CoreUObject.LinearColor inOutColor, float inTemperature)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_SetTemperature_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_SetTemperature_InOutColor_Offset), 0, null, inOutColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_SetTemperature_InTemperature_Offset), 0, null, inTemperature);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_SetTemperature_NativeFunction, ParamsBuffer);
            
            inOutColor = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_SetTemperature_InOutColor_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_SetRGBA
    static readonly IntPtr LinearColor_SetRGBA_NativeFunction;
    static readonly int LinearColor_SetRGBA_ParamsSize;
    static readonly int LinearColor_SetRGBA_InOutColor_Offset;
    static readonly int LinearColor_SetRGBA_R_Offset;
    static readonly int LinearColor_SetRGBA_G_Offset;
    static readonly int LinearColor_SetRGBA_B_Offset;
    static readonly int LinearColor_SetRGBA_A_Offset;
    
    public static void SetRGBA(ref UnrealSharp.CoreUObject.LinearColor inOutColor, float r, float g, float b, float a = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_SetRGBA_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_SetRGBA_InOutColor_Offset), 0, null, inOutColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_SetRGBA_R_Offset), 0, null, r);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_SetRGBA_G_Offset), 0, null, g);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_SetRGBA_B_Offset), 0, null, b);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_SetRGBA_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_SetRGBA_NativeFunction, ParamsBuffer);
            
            inOutColor = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_SetRGBA_InOutColor_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_SetRandomHue
    static readonly IntPtr LinearColor_SetRandomHue_NativeFunction;
    static readonly int LinearColor_SetRandomHue_ParamsSize;
    static readonly int LinearColor_SetRandomHue_InOutColor_Offset;
    
    public static void SetRandomHue(ref UnrealSharp.CoreUObject.LinearColor inOutColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_SetRandomHue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_SetRandomHue_InOutColor_Offset), 0, null, inOutColor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_SetRandomHue_NativeFunction, ParamsBuffer);
            
            inOutColor = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_SetRandomHue_InOutColor_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_SetFromSRGB
    static readonly IntPtr LinearColor_SetFromSRGB_NativeFunction;
    static readonly int LinearColor_SetFromSRGB_ParamsSize;
    static readonly int LinearColor_SetFromSRGB_InOutColor_Offset;
    static readonly int LinearColor_SetFromSRGB_InSRGB_Offset;
    
    public static void SetFromSRGB(ref UnrealSharp.CoreUObject.LinearColor inOutColor, UnrealSharp.CoreUObject.Color inSRGB)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_SetFromSRGB_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_SetFromSRGB_InOutColor_Offset), 0, null, inOutColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_SetFromSRGB_InSRGB_Offset), 0, null, inSRGB);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_SetFromSRGB_NativeFunction, ParamsBuffer);
            
            inOutColor = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_SetFromSRGB_InOutColor_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_SetFromPow22
    static readonly IntPtr LinearColor_SetFromPow22_NativeFunction;
    static readonly int LinearColor_SetFromPow22_ParamsSize;
    static readonly int LinearColor_SetFromPow22_InOutColor_Offset;
    static readonly int LinearColor_SetFromPow22_InColor_Offset;
    
    public static void SetFromPow22(ref UnrealSharp.CoreUObject.LinearColor inOutColor, UnrealSharp.CoreUObject.Color inColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_SetFromPow22_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_SetFromPow22_InOutColor_Offset), 0, null, inOutColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_SetFromPow22_InColor_Offset), 0, null, inColor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_SetFromPow22_NativeFunction, ParamsBuffer);
            
            inOutColor = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_SetFromPow22_InOutColor_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_SetFromHSV
    static readonly IntPtr LinearColor_SetFromHSV_NativeFunction;
    static readonly int LinearColor_SetFromHSV_ParamsSize;
    static readonly int LinearColor_SetFromHSV_InOutColor_Offset;
    static readonly int LinearColor_SetFromHSV_H_Offset;
    static readonly int LinearColor_SetFromHSV_S_Offset;
    static readonly int LinearColor_SetFromHSV_V_Offset;
    static readonly int LinearColor_SetFromHSV_A_Offset;
    
    public static void SetFromHSV(ref UnrealSharp.CoreUObject.LinearColor inOutColor, float h, float s, float v, float a = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_SetFromHSV_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_SetFromHSV_InOutColor_Offset), 0, null, inOutColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_SetFromHSV_H_Offset), 0, null, h);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_SetFromHSV_S_Offset), 0, null, s);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_SetFromHSV_V_Offset), 0, null, v);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_SetFromHSV_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_SetFromHSV_NativeFunction, ParamsBuffer);
            
            inOutColor = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_SetFromHSV_InOutColor_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_Set
    static readonly IntPtr LinearColor_Set_NativeFunction;
    static readonly int LinearColor_Set_ParamsSize;
    static readonly int LinearColor_Set_InOutColor_Offset;
    static readonly int LinearColor_Set_InColor_Offset;
    
    public static void Set(ref UnrealSharp.CoreUObject.LinearColor inOutColor, UnrealSharp.CoreUObject.LinearColor inColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_Set_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_Set_InOutColor_Offset), 0, null, inOutColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_Set_InColor_Offset), 0, null, inColor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_Set_NativeFunction, ParamsBuffer);
            
            inOutColor = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_Set_InOutColor_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_Red
    static readonly IntPtr LinearColor_Red_NativeFunction;
    static readonly int LinearColor_Red_ParamsSize;
    static readonly int LinearColor_Red_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor LinearColor_Red()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_Red_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_Red_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_Red_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_QuantizeRound
    static readonly IntPtr LinearColor_QuantizeRound_NativeFunction;
    static readonly int LinearColor_QuantizeRound_ParamsSize;
    static readonly int LinearColor_QuantizeRound_InColor_Offset;
    static readonly int LinearColor_QuantizeRound_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Color QuantizeRound(UnrealSharp.CoreUObject.LinearColor inColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_QuantizeRound_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_QuantizeRound_InColor_Offset), 0, null, inColor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_QuantizeRound_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Color returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_QuantizeRound_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_Quantize
    static readonly IntPtr LinearColor_Quantize_NativeFunction;
    static readonly int LinearColor_Quantize_ParamsSize;
    static readonly int LinearColor_Quantize_InColor_Offset;
    static readonly int LinearColor_Quantize_ReturnValue_Offset;
    
    [Obsolete("Use LinearColor_QuantizeRound instead for correct color conversion.")]
    public static UnrealSharp.CoreUObject.Color Quantize(UnrealSharp.CoreUObject.LinearColor inColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_Quantize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_Quantize_InColor_Offset), 0, null, inColor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_Quantize_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Color returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_Quantize_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_IsNearEqual
    static readonly IntPtr LinearColor_IsNearEqual_NativeFunction;
    static readonly int LinearColor_IsNearEqual_ParamsSize;
    static readonly int LinearColor_IsNearEqual_A_Offset;
    static readonly int LinearColor_IsNearEqual_B_Offset;
    static readonly int LinearColor_IsNearEqual_Tolerance_Offset;
    static readonly int LinearColor_IsNearEqual_ReturnValue_Offset;
    
    public static bool IsNearEqual(UnrealSharp.CoreUObject.LinearColor a, UnrealSharp.CoreUObject.LinearColor b, float tolerance = 0.000100f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_IsNearEqual_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_IsNearEqual_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_IsNearEqual_B_Offset), 0, null, b);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_IsNearEqual_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_IsNearEqual_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_IsNearEqual_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_Green
    static readonly IntPtr LinearColor_Green_NativeFunction;
    static readonly int LinearColor_Green_ParamsSize;
    static readonly int LinearColor_Green_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor LinearColor_Green()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_Green_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_Green_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_Green_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_Gray
    static readonly IntPtr LinearColor_Gray_NativeFunction;
    static readonly int LinearColor_Gray_ParamsSize;
    static readonly int LinearColor_Gray_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor LinearColor_Gray()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_Gray_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_Gray_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_Gray_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_GetMin
    static readonly IntPtr LinearColor_GetMin_NativeFunction;
    static readonly int LinearColor_GetMin_ParamsSize;
    static readonly int LinearColor_GetMin_InColor_Offset;
    static readonly int LinearColor_GetMin_ReturnValue_Offset;
    
    public static float GetMin(UnrealSharp.CoreUObject.LinearColor inColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_GetMin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_GetMin_InColor_Offset), 0, null, inColor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_GetMin_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_GetMin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_GetMax
    static readonly IntPtr LinearColor_GetMax_NativeFunction;
    static readonly int LinearColor_GetMax_ParamsSize;
    static readonly int LinearColor_GetMax_InColor_Offset;
    static readonly int LinearColor_GetMax_ReturnValue_Offset;
    
    public static float GetMax(UnrealSharp.CoreUObject.LinearColor inColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_GetMax_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_GetMax_InColor_Offset), 0, null, inColor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_GetMax_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_GetMax_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_GetLuminance
    static readonly IntPtr LinearColor_GetLuminance_NativeFunction;
    static readonly int LinearColor_GetLuminance_ParamsSize;
    static readonly int LinearColor_GetLuminance_InColor_Offset;
    static readonly int LinearColor_GetLuminance_ReturnValue_Offset;
    
    public static float GetLuminance(UnrealSharp.CoreUObject.LinearColor inColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_GetLuminance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_GetLuminance_InColor_Offset), 0, null, inColor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_GetLuminance_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_GetLuminance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_Distance
    static readonly IntPtr LinearColor_Distance_NativeFunction;
    static readonly int LinearColor_Distance_ParamsSize;
    static readonly int LinearColor_Distance_C1_Offset;
    static readonly int LinearColor_Distance_C2_Offset;
    static readonly int LinearColor_Distance_ReturnValue_Offset;
    
    public static float Distance(UnrealSharp.CoreUObject.LinearColor c1, UnrealSharp.CoreUObject.LinearColor c2)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_Distance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_Distance_C1_Offset), 0, null, c1);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_Distance_C2_Offset), 0, null, c2);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_Distance_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_Distance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_Desaturated
    static readonly IntPtr LinearColor_Desaturated_NativeFunction;
    static readonly int LinearColor_Desaturated_ParamsSize;
    static readonly int LinearColor_Desaturated_InColor_Offset;
    static readonly int LinearColor_Desaturated_InDesaturation_Offset;
    static readonly int LinearColor_Desaturated_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor Desaturated(UnrealSharp.CoreUObject.LinearColor inColor, float inDesaturation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_Desaturated_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_Desaturated_InColor_Offset), 0, null, inColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LinearColor_Desaturated_InDesaturation_Offset), 0, null, inDesaturation);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_Desaturated_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_Desaturated_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_Blue
    static readonly IntPtr LinearColor_Blue_NativeFunction;
    static readonly int LinearColor_Blue_ParamsSize;
    static readonly int LinearColor_Blue_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor LinearColor_Blue()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_Blue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_Blue_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_Blue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LinearColor_Black
    static readonly IntPtr LinearColor_Black_NativeFunction;
    static readonly int LinearColor_Black_ParamsSize;
    static readonly int LinearColor_Black_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor LinearColor_Black()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LinearColor_Black_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LinearColor_Black_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, LinearColor_Black_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LessLess_VectorRotator
    static readonly IntPtr LessLess_VectorRotator_NativeFunction;
    static readonly int LessLess_VectorRotator_ParamsSize;
    static readonly int LessLess_VectorRotator_A_Offset;
    static readonly int LessLess_VectorRotator_B_Offset;
    static readonly int LessLess_VectorRotator_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Unrotate(System.DoubleNumerics.Vector3 a, UnrealSharp.Rotator b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LessLess_VectorRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LessLess_VectorRotator_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, LessLess_VectorRotator_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LessLess_VectorRotator_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, LessLess_VectorRotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LessEqual_TimespanTimespan
    static readonly IntPtr LessEqual_TimespanTimespan_NativeFunction;
    static readonly int LessEqual_TimespanTimespan_ParamsSize;
    static readonly int LessEqual_TimespanTimespan_A_Offset;
    static readonly int LessEqual_TimespanTimespan_B_Offset;
    static readonly int LessEqual_TimespanTimespan_ReturnValue_Offset;
    
    public static bool LessEqual_TimespanTimespan(UnrealSharp.CoreUObject.Timespan a, UnrealSharp.CoreUObject.Timespan b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LessEqual_TimespanTimespan_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, LessEqual_TimespanTimespan_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, LessEqual_TimespanTimespan_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LessEqual_TimespanTimespan_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LessEqual_TimespanTimespan_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LessEqual_IntInt
    static readonly IntPtr LessEqual_IntInt_NativeFunction;
    static readonly int LessEqual_IntInt_ParamsSize;
    static readonly int LessEqual_IntInt_A_Offset;
    static readonly int LessEqual_IntInt_B_Offset;
    static readonly int LessEqual_IntInt_ReturnValue_Offset;
    
    public static bool LessEqual_IntInt(int a, int b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LessEqual_IntInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, LessEqual_IntInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, LessEqual_IntInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LessEqual_IntInt_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LessEqual_IntInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LessEqual_Int64Int64
    static readonly IntPtr LessEqual_Int64Int64_NativeFunction;
    static readonly int LessEqual_Int64Int64_ParamsSize;
    static readonly int LessEqual_Int64Int64_A_Offset;
    static readonly int LessEqual_Int64Int64_B_Offset;
    static readonly int LessEqual_Int64Int64_ReturnValue_Offset;
    
    public static bool LessEqual_Int64Int64(long a, long b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LessEqual_Int64Int64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, LessEqual_Int64Int64_A_Offset), 0, null, a);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, LessEqual_Int64Int64_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LessEqual_Int64Int64_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LessEqual_Int64Int64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LessEqual_DoubleDouble
    static readonly IntPtr LessEqual_DoubleDouble_NativeFunction;
    static readonly int LessEqual_DoubleDouble_ParamsSize;
    static readonly int LessEqual_DoubleDouble_A_Offset;
    static readonly int LessEqual_DoubleDouble_B_Offset;
    static readonly int LessEqual_DoubleDouble_ReturnValue_Offset;
    
    public static bool LessEqual_DoubleDouble(double a, double b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LessEqual_DoubleDouble_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, LessEqual_DoubleDouble_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, LessEqual_DoubleDouble_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LessEqual_DoubleDouble_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LessEqual_DoubleDouble_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LessEqual_DateTimeDateTime
    static readonly IntPtr LessEqual_DateTimeDateTime_NativeFunction;
    static readonly int LessEqual_DateTimeDateTime_ParamsSize;
    static readonly int LessEqual_DateTimeDateTime_A_Offset;
    static readonly int LessEqual_DateTimeDateTime_B_Offset;
    static readonly int LessEqual_DateTimeDateTime_ReturnValue_Offset;
    
    public static bool LessEqual_DateTimeDateTime(UnrealSharp.CoreUObject.DateTime a, UnrealSharp.CoreUObject.DateTime b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LessEqual_DateTimeDateTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, LessEqual_DateTimeDateTime_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, LessEqual_DateTimeDateTime_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LessEqual_DateTimeDateTime_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LessEqual_DateTimeDateTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:LessEqual_ByteByte
    static readonly IntPtr LessEqual_ByteByte_NativeFunction;
    static readonly int LessEqual_ByteByte_ParamsSize;
    static readonly int LessEqual_ByteByte_A_Offset;
    static readonly int LessEqual_ByteByte_B_Offset;
    static readonly int LessEqual_ByteByte_ReturnValue_Offset;
    
    public static bool LessEqual_ByteByte(byte a, byte b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LessEqual_ByteByte_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, LessEqual_ByteByte_A_Offset), 0, null, a);
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, LessEqual_ByteByte_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LessEqual_ByteByte_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LessEqual_ByteByte_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Less_TimespanTimespan
    static readonly IntPtr Less_TimespanTimespan_NativeFunction;
    static readonly int Less_TimespanTimespan_ParamsSize;
    static readonly int Less_TimespanTimespan_A_Offset;
    static readonly int Less_TimespanTimespan_B_Offset;
    static readonly int Less_TimespanTimespan_ReturnValue_Offset;
    
    public static bool Less_TimespanTimespan(UnrealSharp.CoreUObject.Timespan a, UnrealSharp.CoreUObject.Timespan b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Less_TimespanTimespan_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Less_TimespanTimespan_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Less_TimespanTimespan_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Less_TimespanTimespan_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Less_TimespanTimespan_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Less_IntInt
    static readonly IntPtr Less_IntInt_NativeFunction;
    static readonly int Less_IntInt_ParamsSize;
    static readonly int Less_IntInt_A_Offset;
    static readonly int Less_IntInt_B_Offset;
    static readonly int Less_IntInt_ReturnValue_Offset;
    
    public static bool Less_IntInt(int a, int b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Less_IntInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Less_IntInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Less_IntInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Less_IntInt_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Less_IntInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Less_Int64Int64
    static readonly IntPtr Less_Int64Int64_NativeFunction;
    static readonly int Less_Int64Int64_ParamsSize;
    static readonly int Less_Int64Int64_A_Offset;
    static readonly int Less_Int64Int64_B_Offset;
    static readonly int Less_Int64Int64_ReturnValue_Offset;
    
    public static bool Less_Int64Int64(long a, long b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Less_Int64Int64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Less_Int64Int64_A_Offset), 0, null, a);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Less_Int64Int64_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Less_Int64Int64_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Less_Int64Int64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Less_DoubleDouble
    static readonly IntPtr Less_DoubleDouble_NativeFunction;
    static readonly int Less_DoubleDouble_ParamsSize;
    static readonly int Less_DoubleDouble_A_Offset;
    static readonly int Less_DoubleDouble_B_Offset;
    static readonly int Less_DoubleDouble_ReturnValue_Offset;
    
    public static bool Less_DoubleDouble(double a, double b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Less_DoubleDouble_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Less_DoubleDouble_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Less_DoubleDouble_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Less_DoubleDouble_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Less_DoubleDouble_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Less_DateTimeDateTime
    static readonly IntPtr Less_DateTimeDateTime_NativeFunction;
    static readonly int Less_DateTimeDateTime_ParamsSize;
    static readonly int Less_DateTimeDateTime_A_Offset;
    static readonly int Less_DateTimeDateTime_B_Offset;
    static readonly int Less_DateTimeDateTime_ReturnValue_Offset;
    
    public static bool Less_DateTimeDateTime(UnrealSharp.CoreUObject.DateTime a, UnrealSharp.CoreUObject.DateTime b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Less_DateTimeDateTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Less_DateTimeDateTime_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Less_DateTimeDateTime_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Less_DateTimeDateTime_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Less_DateTimeDateTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Less_ByteByte
    static readonly IntPtr Less_ByteByte_NativeFunction;
    static readonly int Less_ByteByte_ParamsSize;
    static readonly int Less_ByteByte_A_Offset;
    static readonly int Less_ByteByte_B_Offset;
    static readonly int Less_ByteByte_ReturnValue_Offset;
    
    public static bool Less_ByteByte(byte a, byte b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Less_ByteByte_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, Less_ByteByte_A_Offset), 0, null, a);
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, Less_ByteByte_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Less_ByteByte_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Less_ByteByte_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Lerp
    static readonly IntPtr Lerp_NativeFunction;
    static readonly int Lerp_ParamsSize;
    static readonly int Lerp_A_Offset;
    static readonly int Lerp_B_Offset;
    static readonly int Lerp_Alpha_Offset;
    static readonly int Lerp_ReturnValue_Offset;
    
    public static double Lerp(double a, double b, double alpha)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Lerp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Lerp_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Lerp_B_Offset), 0, null, b);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Lerp_Alpha_Offset), 0, null, alpha);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Lerp_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Lerp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:IsZero2D
    static readonly IntPtr IsZero2D_NativeFunction;
    static readonly int IsZero2D_ParamsSize;
    static readonly int IsZero2D_A_Offset;
    static readonly int IsZero2D_ReturnValue_Offset;
    
    public static bool IsZero(System.DoubleNumerics.Vector2 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsZero2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, IsZero2D_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsZero2D_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsZero2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:IsPointInBoxWithTransform_Box
    static readonly IntPtr IsPointInBoxWithTransform_Box_NativeFunction;
    static readonly int IsPointInBoxWithTransform_Box_ParamsSize;
    static readonly int IsPointInBoxWithTransform_Box_Point_Offset;
    static readonly int IsPointInBoxWithTransform_Box_BoxWorldTransform_Offset;
    static readonly int IsPointInBoxWithTransform_Box_BoxExtent_Offset;
    static readonly int IsPointInBoxWithTransform_Box_ReturnValue_Offset;
    
    public static bool IsPointInBoxWithTransform_Box(System.DoubleNumerics.Vector3 point, UnrealSharp.Transform boxWorldTransform, UnrealSharp.CoreUObject.Box boxExtent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPointInBoxWithTransform_Box_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, IsPointInBoxWithTransform_Box_Point_Offset), 0, null, point);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, IsPointInBoxWithTransform_Box_BoxWorldTransform_Offset), 0, null, boxWorldTransform);
            UnrealSharp.CoreUObject.BoxMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsPointInBoxWithTransform_Box_BoxExtent_Offset), 0, null, boxExtent);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsPointInBoxWithTransform_Box_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPointInBoxWithTransform_Box_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:IsPointInBoxWithTransform
    static readonly IntPtr IsPointInBoxWithTransform_NativeFunction;
    static readonly int IsPointInBoxWithTransform_ParamsSize;
    static readonly int IsPointInBoxWithTransform_Point_Offset;
    static readonly int IsPointInBoxWithTransform_BoxWorldTransform_Offset;
    static readonly int IsPointInBoxWithTransform_BoxExtent_Offset;
    static readonly int IsPointInBoxWithTransform_ReturnValue_Offset;
    
    public static bool IsPointInBoxWithTransform(System.DoubleNumerics.Vector3 point, UnrealSharp.Transform boxWorldTransform, System.DoubleNumerics.Vector3 boxExtent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPointInBoxWithTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, IsPointInBoxWithTransform_Point_Offset), 0, null, point);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, IsPointInBoxWithTransform_BoxWorldTransform_Offset), 0, null, boxWorldTransform);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, IsPointInBoxWithTransform_BoxExtent_Offset), 0, null, boxExtent);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsPointInBoxWithTransform_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPointInBoxWithTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:IsPointInBox_Box
    static readonly IntPtr IsPointInBox_Box_NativeFunction;
    static readonly int IsPointInBox_Box_ParamsSize;
    static readonly int IsPointInBox_Box_Point_Offset;
    static readonly int IsPointInBox_Box_Box_Offset;
    static readonly int IsPointInBox_Box_ReturnValue_Offset;
    
    public static bool IsPointInBox_Box(System.DoubleNumerics.Vector3 point, UnrealSharp.CoreUObject.Box box)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPointInBox_Box_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, IsPointInBox_Box_Point_Offset), 0, null, point);
            UnrealSharp.CoreUObject.BoxMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsPointInBox_Box_Box_Offset), 0, null, box);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsPointInBox_Box_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPointInBox_Box_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:IsPointInBox
    static readonly IntPtr IsPointInBox_NativeFunction;
    static readonly int IsPointInBox_ParamsSize;
    static readonly int IsPointInBox_Point_Offset;
    static readonly int IsPointInBox_BoxOrigin_Offset;
    static readonly int IsPointInBox_BoxExtent_Offset;
    static readonly int IsPointInBox_ReturnValue_Offset;
    
    public static bool IsPointInBox(System.DoubleNumerics.Vector3 point, System.DoubleNumerics.Vector3 boxOrigin, System.DoubleNumerics.Vector3 boxExtent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPointInBox_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, IsPointInBox_Point_Offset), 0, null, point);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, IsPointInBox_BoxOrigin_Offset), 0, null, boxOrigin);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, IsPointInBox_BoxExtent_Offset), 0, null, boxExtent);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsPointInBox_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPointInBox_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:IsNearlyZero2D
    static readonly IntPtr IsNearlyZero2D_NativeFunction;
    static readonly int IsNearlyZero2D_ParamsSize;
    static readonly int IsNearlyZero2D_A_Offset;
    static readonly int IsNearlyZero2D_Tolerance_Offset;
    static readonly int IsNearlyZero2D_ReturnValue_Offset;
    
    public static bool IsNearlyZero(System.DoubleNumerics.Vector2 a, float tolerance = 0.000100f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsNearlyZero2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, IsNearlyZero2D_A_Offset), 0, null, a);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, IsNearlyZero2D_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsNearlyZero2D_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsNearlyZero2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:IsMorning
    static readonly IntPtr IsMorning_NativeFunction;
    static readonly int IsMorning_ParamsSize;
    static readonly int IsMorning_A_Offset;
    static readonly int IsMorning_ReturnValue_Offset;
    
    public static bool IsMorning(UnrealSharp.CoreUObject.DateTime a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsMorning_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsMorning_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsMorning_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsMorning_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:IsLeapYear
    static readonly IntPtr IsLeapYear_NativeFunction;
    static readonly int IsLeapYear_ParamsSize;
    static readonly int IsLeapYear_Year_Offset;
    static readonly int IsLeapYear_ReturnValue_Offset;
    
    public static bool IsLeapYear(int year)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsLeapYear_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, IsLeapYear_Year_Offset), 0, null, year);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsLeapYear_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsLeapYear_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:IsAfternoon
    static readonly IntPtr IsAfternoon_NativeFunction;
    static readonly int IsAfternoon_ParamsSize;
    static readonly int IsAfternoon_A_Offset;
    static readonly int IsAfternoon_ReturnValue_Offset;
    
    public static bool IsAfternoon(UnrealSharp.CoreUObject.DateTime a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsAfternoon_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsAfternoon_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsAfternoon_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsAfternoon_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:InvertTransform
    static readonly IntPtr InvertTransform_NativeFunction;
    static readonly int InvertTransform_ParamsSize;
    static readonly int InvertTransform_T_Offset;
    static readonly int InvertTransform_ReturnValue_Offset;
    
    public static UnrealSharp.Transform Inverse(UnrealSharp.Transform t)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[InvertTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, InvertTransform_T_Offset), 0, null, t);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, InvertTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, InvertTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:InverseTransformRotation
    static readonly IntPtr InverseTransformRotation_NativeFunction;
    static readonly int InverseTransformRotation_ParamsSize;
    static readonly int InverseTransformRotation_T_Offset;
    static readonly int InverseTransformRotation_Rotation_Offset;
    static readonly int InverseTransformRotation_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator InverseTransformRotation(UnrealSharp.Transform t, UnrealSharp.Rotator rotation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[InverseTransformRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, InverseTransformRotation_T_Offset), 0, null, t);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, InverseTransformRotation_Rotation_Offset), 0, null, rotation);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, InverseTransformRotation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, InverseTransformRotation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:InverseTransformLocation
    static readonly IntPtr InverseTransformLocation_NativeFunction;
    static readonly int InverseTransformLocation_ParamsSize;
    static readonly int InverseTransformLocation_T_Offset;
    static readonly int InverseTransformLocation_Location_Offset;
    static readonly int InverseTransformLocation_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 InverseTransformLocation(UnrealSharp.Transform t, System.DoubleNumerics.Vector3 location)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[InverseTransformLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, InverseTransformLocation_T_Offset), 0, null, t);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, InverseTransformLocation_Location_Offset), 0, null, location);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, InverseTransformLocation_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, InverseTransformLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:InverseTransformDirection
    static readonly IntPtr InverseTransformDirection_NativeFunction;
    static readonly int InverseTransformDirection_ParamsSize;
    static readonly int InverseTransformDirection_T_Offset;
    static readonly int InverseTransformDirection_Direction_Offset;
    static readonly int InverseTransformDirection_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 InverseTransformDirection(UnrealSharp.Transform t, System.DoubleNumerics.Vector3 direction)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[InverseTransformDirection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, InverseTransformDirection_T_Offset), 0, null, t);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, InverseTransformDirection_Direction_Offset), 0, null, direction);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, InverseTransformDirection_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, InverseTransformDirection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:IntPoint_Zero
    static readonly IntPtr IntPoint_Zero_NativeFunction;
    static readonly int IntPoint_Zero_ParamsSize;
    static readonly int IntPoint_Zero_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.IntPoint IntPoint_Zero()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IntPoint_Zero_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IntPoint_Zero_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.IntPoint returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative(IntPtr.Add(ParamsBuffer, IntPoint_Zero_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:IntPoint_Up
    static readonly IntPtr IntPoint_Up_NativeFunction;
    static readonly int IntPoint_Up_ParamsSize;
    static readonly int IntPoint_Up_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.IntPoint IntPoint_Up()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IntPoint_Up_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IntPoint_Up_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.IntPoint returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative(IntPtr.Add(ParamsBuffer, IntPoint_Up_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:IntPoint_Right
    static readonly IntPtr IntPoint_Right_NativeFunction;
    static readonly int IntPoint_Right_ParamsSize;
    static readonly int IntPoint_Right_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.IntPoint IntPoint_Right()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IntPoint_Right_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IntPoint_Right_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.IntPoint returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative(IntPtr.Add(ParamsBuffer, IntPoint_Right_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:IntPoint_One
    static readonly IntPtr IntPoint_One_NativeFunction;
    static readonly int IntPoint_One_ParamsSize;
    static readonly int IntPoint_One_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.IntPoint IntPoint_One()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IntPoint_One_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IntPoint_One_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.IntPoint returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative(IntPtr.Add(ParamsBuffer, IntPoint_One_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:IntPoint_Left
    static readonly IntPtr IntPoint_Left_NativeFunction;
    static readonly int IntPoint_Left_ParamsSize;
    static readonly int IntPoint_Left_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.IntPoint IntPoint_Left()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IntPoint_Left_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IntPoint_Left_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.IntPoint returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative(IntPtr.Add(ParamsBuffer, IntPoint_Left_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:IntPoint_Down
    static readonly IntPtr IntPoint_Down_NativeFunction;
    static readonly int IntPoint_Down_ParamsSize;
    static readonly int IntPoint_Down_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.IntPoint IntPoint_Down()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IntPoint_Down_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IntPoint_Down_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.IntPoint returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative(IntPtr.Add(ParamsBuffer, IntPoint_Down_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:InRange_IntInt
    static readonly IntPtr InRange_IntInt_NativeFunction;
    static readonly int InRange_IntInt_ParamsSize;
    static readonly int InRange_IntInt_Value_Offset;
    static readonly int InRange_IntInt_Min_Offset;
    static readonly int InRange_IntInt_Max_Offset;
    static readonly int InRange_IntInt_InclusiveMin_Offset;
    static readonly int InRange_IntInt_InclusiveMax_Offset;
    static readonly int InRange_IntInt_ReturnValue_Offset;
    
    public static bool InRange_IntInt(int value, int min, int max, bool inclusiveMin = true, bool inclusiveMax = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[InRange_IntInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, InRange_IntInt_Value_Offset), 0, null, value);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, InRange_IntInt_Min_Offset), 0, null, min);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, InRange_IntInt_Max_Offset), 0, null, max);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, InRange_IntInt_InclusiveMin_Offset), 0, null, inclusiveMin);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, InRange_IntInt_InclusiveMax_Offset), 0, null, inclusiveMax);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, InRange_IntInt_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, InRange_IntInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:InRange_Int64Int64
    static readonly IntPtr InRange_Int64Int64_NativeFunction;
    static readonly int InRange_Int64Int64_ParamsSize;
    static readonly int InRange_Int64Int64_Value_Offset;
    static readonly int InRange_Int64Int64_Min_Offset;
    static readonly int InRange_Int64Int64_Max_Offset;
    static readonly int InRange_Int64Int64_InclusiveMin_Offset;
    static readonly int InRange_Int64Int64_InclusiveMax_Offset;
    static readonly int InRange_Int64Int64_ReturnValue_Offset;
    
    public static bool InRange_Int64Int64(long value, long min, long max, bool inclusiveMin = true, bool inclusiveMax = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[InRange_Int64Int64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, InRange_Int64Int64_Value_Offset), 0, null, value);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, InRange_Int64Int64_Min_Offset), 0, null, min);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, InRange_Int64Int64_Max_Offset), 0, null, max);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, InRange_Int64Int64_InclusiveMin_Offset), 0, null, inclusiveMin);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, InRange_Int64Int64_InclusiveMax_Offset), 0, null, inclusiveMax);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, InRange_Int64Int64_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, InRange_Int64Int64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:InRange_FloatFloat
    static readonly IntPtr InRange_FloatFloat_NativeFunction;
    static readonly int InRange_FloatFloat_ParamsSize;
    static readonly int InRange_FloatFloat_Value_Offset;
    static readonly int InRange_FloatFloat_Min_Offset;
    static readonly int InRange_FloatFloat_Max_Offset;
    static readonly int InRange_FloatFloat_InclusiveMin_Offset;
    static readonly int InRange_FloatFloat_InclusiveMax_Offset;
    static readonly int InRange_FloatFloat_ReturnValue_Offset;
    
    public static bool InRange_FloatFloat(double value, double min, double max, bool inclusiveMin = true, bool inclusiveMax = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[InRange_FloatFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, InRange_FloatFloat_Value_Offset), 0, null, value);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, InRange_FloatFloat_Min_Offset), 0, null, min);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, InRange_FloatFloat_Max_Offset), 0, null, max);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, InRange_FloatFloat_InclusiveMin_Offset), 0, null, inclusiveMin);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, InRange_FloatFloat_InclusiveMax_Offset), 0, null, inclusiveMax);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, InRange_FloatFloat_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, InRange_FloatFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Hypotenuse
    static readonly IntPtr Hypotenuse_NativeFunction;
    static readonly int Hypotenuse_ParamsSize;
    static readonly int Hypotenuse_Width_Offset;
    static readonly int Hypotenuse_Height_Offset;
    static readonly int Hypotenuse_ReturnValue_Offset;
    
    public static double Hypotenuse(double width, double height)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Hypotenuse_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Hypotenuse_Width_Offset), 0, null, width);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Hypotenuse_Height_Offset), 0, null, height);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Hypotenuse_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Hypotenuse_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:HSVToRGBLinear
    static readonly IntPtr HSVToRGBLinear_NativeFunction;
    static readonly int HSVToRGBLinear_ParamsSize;
    static readonly int HSVToRGBLinear_HSV_Offset;
    static readonly int HSVToRGBLinear_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor HSVToRGB(UnrealSharp.CoreUObject.LinearColor hSV)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HSVToRGBLinear_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, HSVToRGBLinear_HSV_Offset), 0, null, hSV);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, HSVToRGBLinear_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, HSVToRGBLinear_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:HSVToRGB_Vector
    static readonly IntPtr HSVToRGB_Vector_NativeFunction;
    static readonly int HSVToRGB_Vector_ParamsSize;
    static readonly int HSVToRGB_Vector_HSV_Offset;
    static readonly int HSVToRGB_Vector_RGB_Offset;
    
    public static void HSVIntoRGB(UnrealSharp.CoreUObject.LinearColor hSV, out UnrealSharp.CoreUObject.LinearColor rGB)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HSVToRGB_Vector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, HSVToRGB_Vector_HSV_Offset), 0, null, hSV);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, HSVToRGB_Vector_NativeFunction, ParamsBuffer);
            
            rGB = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, HSVToRGB_Vector_RGB_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:HSVToRGB
    static readonly IntPtr HSVToRGB_NativeFunction;
    static readonly int HSVToRGB_ParamsSize;
    static readonly int HSVToRGB_H_Offset;
    static readonly int HSVToRGB_S_Offset;
    static readonly int HSVToRGB_V_Offset;
    static readonly int HSVToRGB_A_Offset;
    static readonly int HSVToRGB_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor HSVToRGB(float h, float s, float v, float a = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HSVToRGB_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, HSVToRGB_H_Offset), 0, null, h);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, HSVToRGB_S_Offset), 0, null, s);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, HSVToRGB_V_Offset), 0, null, v);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, HSVToRGB_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, HSVToRGB_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, HSVToRGB_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GridSnap_Float
    static readonly IntPtr GridSnap_Float_NativeFunction;
    static readonly int GridSnap_Float_ParamsSize;
    static readonly int GridSnap_Float_Location_Offset;
    static readonly int GridSnap_Float_GridSize_Offset;
    static readonly int GridSnap_Float_ReturnValue_Offset;
    
    public static double GridSnap_Float(double location, double gridSize)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GridSnap_Float_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, GridSnap_Float_Location_Offset), 0, null, location);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, GridSnap_Float_GridSize_Offset), 0, null, gridSize);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GridSnap_Float_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, GridSnap_Float_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GreaterGreater_VectorRotator
    static readonly IntPtr GreaterGreater_VectorRotator_NativeFunction;
    static readonly int GreaterGreater_VectorRotator_ParamsSize;
    static readonly int GreaterGreater_VectorRotator_A_Offset;
    static readonly int GreaterGreater_VectorRotator_B_Offset;
    static readonly int GreaterGreater_VectorRotator_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Rotate(System.DoubleNumerics.Vector3 a, UnrealSharp.Rotator b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GreaterGreater_VectorRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GreaterGreater_VectorRotator_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, GreaterGreater_VectorRotator_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GreaterGreater_VectorRotator_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GreaterGreater_VectorRotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GreaterEqual_TimespanTimespan
    static readonly IntPtr GreaterEqual_TimespanTimespan_NativeFunction;
    static readonly int GreaterEqual_TimespanTimespan_ParamsSize;
    static readonly int GreaterEqual_TimespanTimespan_A_Offset;
    static readonly int GreaterEqual_TimespanTimespan_B_Offset;
    static readonly int GreaterEqual_TimespanTimespan_ReturnValue_Offset;
    
    public static bool GreaterEqual_TimespanTimespan(UnrealSharp.CoreUObject.Timespan a, UnrealSharp.CoreUObject.Timespan b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GreaterEqual_TimespanTimespan_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GreaterEqual_TimespanTimespan_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GreaterEqual_TimespanTimespan_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GreaterEqual_TimespanTimespan_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GreaterEqual_TimespanTimespan_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GreaterEqual_IntInt
    static readonly IntPtr GreaterEqual_IntInt_NativeFunction;
    static readonly int GreaterEqual_IntInt_ParamsSize;
    static readonly int GreaterEqual_IntInt_A_Offset;
    static readonly int GreaterEqual_IntInt_B_Offset;
    static readonly int GreaterEqual_IntInt_ReturnValue_Offset;
    
    public static bool GreaterEqual_IntInt(int a, int b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GreaterEqual_IntInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GreaterEqual_IntInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GreaterEqual_IntInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GreaterEqual_IntInt_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GreaterEqual_IntInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GreaterEqual_Int64Int64
    static readonly IntPtr GreaterEqual_Int64Int64_NativeFunction;
    static readonly int GreaterEqual_Int64Int64_ParamsSize;
    static readonly int GreaterEqual_Int64Int64_A_Offset;
    static readonly int GreaterEqual_Int64Int64_B_Offset;
    static readonly int GreaterEqual_Int64Int64_ReturnValue_Offset;
    
    public static bool GreaterEqual_Int64Int64(long a, long b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GreaterEqual_Int64Int64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, GreaterEqual_Int64Int64_A_Offset), 0, null, a);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, GreaterEqual_Int64Int64_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GreaterEqual_Int64Int64_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GreaterEqual_Int64Int64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GreaterEqual_DoubleDouble
    static readonly IntPtr GreaterEqual_DoubleDouble_NativeFunction;
    static readonly int GreaterEqual_DoubleDouble_ParamsSize;
    static readonly int GreaterEqual_DoubleDouble_A_Offset;
    static readonly int GreaterEqual_DoubleDouble_B_Offset;
    static readonly int GreaterEqual_DoubleDouble_ReturnValue_Offset;
    
    public static bool GreaterEqual_DoubleDouble(double a, double b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GreaterEqual_DoubleDouble_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, GreaterEqual_DoubleDouble_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, GreaterEqual_DoubleDouble_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GreaterEqual_DoubleDouble_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GreaterEqual_DoubleDouble_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GreaterEqual_DateTimeDateTime
    static readonly IntPtr GreaterEqual_DateTimeDateTime_NativeFunction;
    static readonly int GreaterEqual_DateTimeDateTime_ParamsSize;
    static readonly int GreaterEqual_DateTimeDateTime_A_Offset;
    static readonly int GreaterEqual_DateTimeDateTime_B_Offset;
    static readonly int GreaterEqual_DateTimeDateTime_ReturnValue_Offset;
    
    public static bool GreaterEqual_DateTimeDateTime(UnrealSharp.CoreUObject.DateTime a, UnrealSharp.CoreUObject.DateTime b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GreaterEqual_DateTimeDateTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GreaterEqual_DateTimeDateTime_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GreaterEqual_DateTimeDateTime_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GreaterEqual_DateTimeDateTime_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GreaterEqual_DateTimeDateTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GreaterEqual_ByteByte
    static readonly IntPtr GreaterEqual_ByteByte_NativeFunction;
    static readonly int GreaterEqual_ByteByte_ParamsSize;
    static readonly int GreaterEqual_ByteByte_A_Offset;
    static readonly int GreaterEqual_ByteByte_B_Offset;
    static readonly int GreaterEqual_ByteByte_ReturnValue_Offset;
    
    public static bool GreaterEqual_ByteByte(byte a, byte b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GreaterEqual_ByteByte_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, GreaterEqual_ByteByte_A_Offset), 0, null, a);
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, GreaterEqual_ByteByte_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GreaterEqual_ByteByte_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GreaterEqual_ByteByte_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Greater_TimespanTimespan
    static readonly IntPtr Greater_TimespanTimespan_NativeFunction;
    static readonly int Greater_TimespanTimespan_ParamsSize;
    static readonly int Greater_TimespanTimespan_A_Offset;
    static readonly int Greater_TimespanTimespan_B_Offset;
    static readonly int Greater_TimespanTimespan_ReturnValue_Offset;
    
    public static bool Greater_TimespanTimespan(UnrealSharp.CoreUObject.Timespan a, UnrealSharp.CoreUObject.Timespan b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Greater_TimespanTimespan_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Greater_TimespanTimespan_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Greater_TimespanTimespan_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Greater_TimespanTimespan_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Greater_TimespanTimespan_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Greater_IntInt
    static readonly IntPtr Greater_IntInt_NativeFunction;
    static readonly int Greater_IntInt_ParamsSize;
    static readonly int Greater_IntInt_A_Offset;
    static readonly int Greater_IntInt_B_Offset;
    static readonly int Greater_IntInt_ReturnValue_Offset;
    
    public static bool Greater_IntInt(int a, int b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Greater_IntInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Greater_IntInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Greater_IntInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Greater_IntInt_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Greater_IntInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Greater_Int64Int64
    static readonly IntPtr Greater_Int64Int64_NativeFunction;
    static readonly int Greater_Int64Int64_ParamsSize;
    static readonly int Greater_Int64Int64_A_Offset;
    static readonly int Greater_Int64Int64_B_Offset;
    static readonly int Greater_Int64Int64_ReturnValue_Offset;
    
    public static bool Greater_Int64Int64(long a, long b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Greater_Int64Int64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Greater_Int64Int64_A_Offset), 0, null, a);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Greater_Int64Int64_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Greater_Int64Int64_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Greater_Int64Int64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Greater_DoubleDouble
    static readonly IntPtr Greater_DoubleDouble_NativeFunction;
    static readonly int Greater_DoubleDouble_ParamsSize;
    static readonly int Greater_DoubleDouble_A_Offset;
    static readonly int Greater_DoubleDouble_B_Offset;
    static readonly int Greater_DoubleDouble_ReturnValue_Offset;
    
    public static bool Greater_DoubleDouble(double a, double b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Greater_DoubleDouble_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Greater_DoubleDouble_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Greater_DoubleDouble_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Greater_DoubleDouble_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Greater_DoubleDouble_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Greater_DateTimeDateTime
    static readonly IntPtr Greater_DateTimeDateTime_NativeFunction;
    static readonly int Greater_DateTimeDateTime_ParamsSize;
    static readonly int Greater_DateTimeDateTime_A_Offset;
    static readonly int Greater_DateTimeDateTime_B_Offset;
    static readonly int Greater_DateTimeDateTime_ReturnValue_Offset;
    
    public static bool Greater_DateTimeDateTime(UnrealSharp.CoreUObject.DateTime a, UnrealSharp.CoreUObject.DateTime b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Greater_DateTimeDateTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Greater_DateTimeDateTime_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Greater_DateTimeDateTime_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Greater_DateTimeDateTime_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Greater_DateTimeDateTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Greater_ByteByte
    static readonly IntPtr Greater_ByteByte_NativeFunction;
    static readonly int Greater_ByteByte_ParamsSize;
    static readonly int Greater_ByteByte_A_Offset;
    static readonly int Greater_ByteByte_B_Offset;
    static readonly int Greater_ByteByte_ReturnValue_Offset;
    
    public static bool Greater_ByteByte(byte a, byte b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Greater_ByteByte_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, Greater_ByteByte_A_Offset), 0, null, a);
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, Greater_ByteByte_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Greater_ByteByte_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Greater_ByteByte_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetYear
    static readonly IntPtr GetYear_NativeFunction;
    static readonly int GetYear_ParamsSize;
    static readonly int GetYear_A_Offset;
    static readonly int GetYear_ReturnValue_Offset;
    
    public static int GetYear(UnrealSharp.CoreUObject.DateTime a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetYear_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetYear_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetYear_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetYear_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetYawPitchFromVector
    static readonly IntPtr GetYawPitchFromVector_NativeFunction;
    static readonly int GetYawPitchFromVector_ParamsSize;
    static readonly int GetYawPitchFromVector_InVec_Offset;
    static readonly int GetYawPitchFromVector_Yaw_Offset;
    static readonly int GetYawPitchFromVector_Pitch_Offset;
    
    public static void GetYawPitch(System.DoubleNumerics.Vector3 inVec, out float yaw, out float pitch)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetYawPitchFromVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetYawPitchFromVector_InVec_Offset), 0, null, inVec);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetYawPitchFromVector_NativeFunction, ParamsBuffer);
            
            yaw = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetYawPitchFromVector_Yaw_Offset), 0, null);
            pitch = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetYawPitchFromVector_Pitch_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetVectorArrayAverage
    static readonly IntPtr GetVectorArrayAverage_NativeFunction;
    static readonly int GetVectorArrayAverage_ParamsSize;
    static readonly int GetVectorArrayAverage_Vectors_Offset;
    static readonly int GetVectorArrayAverage_Vectors_ElementSize;
    static readonly int GetVectorArrayAverage_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetVectorArrayAverage(System.Collections.Generic.IList<System.DoubleNumerics.Vector3> vectors)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVectorArrayAverage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Vectors_NativeBuffer = IntPtr.Add(ParamsBuffer, GetVectorArrayAverage_Vectors_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Vectors_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GetVectorArrayAverage_Vectors_ElementSize);
            Vectors_Marshaler.ToNative(Vectors_NativeBuffer, 0, null, vectors);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetVectorArrayAverage_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetVectorArrayAverage_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetUpVector
    static readonly IntPtr GetUpVector_NativeFunction;
    static readonly int GetUpVector_ParamsSize;
    static readonly int GetUpVector_InRot_Offset;
    static readonly int GetUpVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetUpVector(UnrealSharp.Rotator inRot)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetUpVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, GetUpVector_InRot_Offset), 0, null, inRot);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetUpVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetUpVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetTotalSeconds
    static readonly IntPtr GetTotalSeconds_NativeFunction;
    static readonly int GetTotalSeconds_ParamsSize;
    static readonly int GetTotalSeconds_A_Offset;
    static readonly int GetTotalSeconds_ReturnValue_Offset;
    
    public static float GetTotalSeconds(UnrealSharp.CoreUObject.Timespan a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTotalSeconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetTotalSeconds_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetTotalSeconds_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetTotalSeconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetTotalMinutes
    static readonly IntPtr GetTotalMinutes_NativeFunction;
    static readonly int GetTotalMinutes_ParamsSize;
    static readonly int GetTotalMinutes_A_Offset;
    static readonly int GetTotalMinutes_ReturnValue_Offset;
    
    public static float GetTotalMinutes(UnrealSharp.CoreUObject.Timespan a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTotalMinutes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetTotalMinutes_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetTotalMinutes_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetTotalMinutes_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetTotalMilliseconds
    static readonly IntPtr GetTotalMilliseconds_NativeFunction;
    static readonly int GetTotalMilliseconds_ParamsSize;
    static readonly int GetTotalMilliseconds_A_Offset;
    static readonly int GetTotalMilliseconds_ReturnValue_Offset;
    
    public static float GetTotalMilliseconds(UnrealSharp.CoreUObject.Timespan a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTotalMilliseconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetTotalMilliseconds_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetTotalMilliseconds_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetTotalMilliseconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetTotalHours
    static readonly IntPtr GetTotalHours_NativeFunction;
    static readonly int GetTotalHours_ParamsSize;
    static readonly int GetTotalHours_A_Offset;
    static readonly int GetTotalHours_ReturnValue_Offset;
    
    public static float GetTotalHours(UnrealSharp.CoreUObject.Timespan a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTotalHours_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetTotalHours_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetTotalHours_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetTotalHours_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetTotalDays
    static readonly IntPtr GetTotalDays_NativeFunction;
    static readonly int GetTotalDays_ParamsSize;
    static readonly int GetTotalDays_A_Offset;
    static readonly int GetTotalDays_ReturnValue_Offset;
    
    public static float GetTotalDays(UnrealSharp.CoreUObject.Timespan a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTotalDays_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetTotalDays_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetTotalDays_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetTotalDays_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetTimeOfDay
    static readonly IntPtr GetTimeOfDay_NativeFunction;
    static readonly int GetTimeOfDay_ParamsSize;
    static readonly int GetTimeOfDay_A_Offset;
    static readonly int GetTimeOfDay_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Timespan GetTimeOfDay(UnrealSharp.CoreUObject.DateTime a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTimeOfDay_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetTimeOfDay_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetTimeOfDay_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Timespan returnValue;
            returnValue = UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetTimeOfDay_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetTAU
    static readonly IntPtr GetTAU_NativeFunction;
    static readonly int GetTAU_ParamsSize;
    static readonly int GetTAU_ReturnValue_Offset;
    
    public static double GetTAU()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTAU_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetTAU_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, GetTAU_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetSlopeDegreeAngles
    static readonly IntPtr GetSlopeDegreeAngles_NativeFunction;
    static readonly int GetSlopeDegreeAngles_ParamsSize;
    static readonly int GetSlopeDegreeAngles_MyRightYAxis_Offset;
    static readonly int GetSlopeDegreeAngles_FloorNormal_Offset;
    static readonly int GetSlopeDegreeAngles_UpVector_Offset;
    static readonly int GetSlopeDegreeAngles_OutSlopePitchDegreeAngle_Offset;
    static readonly int GetSlopeDegreeAngles_OutSlopeRollDegreeAngle_Offset;
    
    public static void GetSlopeDegreeAngles(System.DoubleNumerics.Vector3 myRightYAxis, System.DoubleNumerics.Vector3 floorNormal, System.DoubleNumerics.Vector3 upVector, out float outSlopePitchDegreeAngle, out float outSlopeRollDegreeAngle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSlopeDegreeAngles_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetSlopeDegreeAngles_MyRightYAxis_Offset), 0, null, myRightYAxis);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetSlopeDegreeAngles_FloorNormal_Offset), 0, null, floorNormal);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetSlopeDegreeAngles_UpVector_Offset), 0, null, upVector);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSlopeDegreeAngles_NativeFunction, ParamsBuffer);
            
            outSlopePitchDegreeAngle = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetSlopeDegreeAngles_OutSlopePitchDegreeAngle_Offset), 0, null);
            outSlopeRollDegreeAngle = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetSlopeDegreeAngles_OutSlopeRollDegreeAngle_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetSeconds
    static readonly IntPtr GetSeconds_NativeFunction;
    static readonly int GetSeconds_ParamsSize;
    static readonly int GetSeconds_A_Offset;
    static readonly int GetSeconds_ReturnValue_Offset;
    
    public static int GetSeconds(UnrealSharp.CoreUObject.Timespan a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSeconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetSeconds_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSeconds_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetSeconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetSecond
    static readonly IntPtr GetSecond_NativeFunction;
    static readonly int GetSecond_ParamsSize;
    static readonly int GetSecond_A_Offset;
    static readonly int GetSecond_ReturnValue_Offset;
    
    public static int GetSecond(UnrealSharp.CoreUObject.DateTime a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSecond_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetSecond_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSecond_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetSecond_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetRotated2D
    static readonly IntPtr GetRotated2D_NativeFunction;
    static readonly int GetRotated2D_ParamsSize;
    static readonly int GetRotated2D_A_Offset;
    static readonly int GetRotated2D_AngleDeg_Offset;
    static readonly int GetRotated2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 GetRotated(System.DoubleNumerics.Vector2 a, float angleDeg)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRotated2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, GetRotated2D_A_Offset), 0, null, a);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetRotated2D_AngleDeg_Offset), 0, null, angleDeg);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetRotated2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, GetRotated2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetRightVector
    static readonly IntPtr GetRightVector_NativeFunction;
    static readonly int GetRightVector_ParamsSize;
    static readonly int GetRightVector_InRot_Offset;
    static readonly int GetRightVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetRightVector(UnrealSharp.Rotator inRot)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRightVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, GetRightVector_InRot_Offset), 0, null, inRot);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetRightVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetRightVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetReflectionVector
    static readonly IntPtr GetReflectionVector_NativeFunction;
    static readonly int GetReflectionVector_ParamsSize;
    static readonly int GetReflectionVector_Direction_Offset;
    static readonly int GetReflectionVector_SurfaceNormal_Offset;
    static readonly int GetReflectionVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 MirrorByVector(System.DoubleNumerics.Vector3 direction, System.DoubleNumerics.Vector3 surfaceNormal)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetReflectionVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetReflectionVector_Direction_Offset), 0, null, direction);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetReflectionVector_SurfaceNormal_Offset), 0, null, surfaceNormal);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetReflectionVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetReflectionVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetPointDistanceToSegment
    static readonly IntPtr GetPointDistanceToSegment_NativeFunction;
    static readonly int GetPointDistanceToSegment_ParamsSize;
    static readonly int GetPointDistanceToSegment_Point_Offset;
    static readonly int GetPointDistanceToSegment_SegmentStart_Offset;
    static readonly int GetPointDistanceToSegment_SegmentEnd_Offset;
    static readonly int GetPointDistanceToSegment_ReturnValue_Offset;
    
    public static float GetPointDistanceToSegment(System.DoubleNumerics.Vector3 point, System.DoubleNumerics.Vector3 segmentStart, System.DoubleNumerics.Vector3 segmentEnd)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPointDistanceToSegment_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetPointDistanceToSegment_Point_Offset), 0, null, point);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetPointDistanceToSegment_SegmentStart_Offset), 0, null, segmentStart);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetPointDistanceToSegment_SegmentEnd_Offset), 0, null, segmentEnd);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPointDistanceToSegment_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetPointDistanceToSegment_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetPointDistanceToLine
    static readonly IntPtr GetPointDistanceToLine_NativeFunction;
    static readonly int GetPointDistanceToLine_ParamsSize;
    static readonly int GetPointDistanceToLine_Point_Offset;
    static readonly int GetPointDistanceToLine_LineOrigin_Offset;
    static readonly int GetPointDistanceToLine_LineDirection_Offset;
    static readonly int GetPointDistanceToLine_ReturnValue_Offset;
    
    public static float GetPointDistanceToLine(System.DoubleNumerics.Vector3 point, System.DoubleNumerics.Vector3 lineOrigin, System.DoubleNumerics.Vector3 lineDirection)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPointDistanceToLine_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetPointDistanceToLine_Point_Offset), 0, null, point);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetPointDistanceToLine_LineOrigin_Offset), 0, null, lineOrigin);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetPointDistanceToLine_LineDirection_Offset), 0, null, lineDirection);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPointDistanceToLine_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetPointDistanceToLine_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetPI
    static readonly IntPtr GetPI_NativeFunction;
    static readonly int GetPI_ParamsSize;
    static readonly int GetPI_ReturnValue_Offset;
    
    public static double GetPI()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPI_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPI_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, GetPI_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetMonth
    static readonly IntPtr GetMonth_NativeFunction;
    static readonly int GetMonth_ParamsSize;
    static readonly int GetMonth_A_Offset;
    static readonly int GetMonth_ReturnValue_Offset;
    
    public static int GetMonth(UnrealSharp.CoreUObject.DateTime a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMonth_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetMonth_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMonth_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetMonth_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetMinutes
    static readonly IntPtr GetMinutes_NativeFunction;
    static readonly int GetMinutes_ParamsSize;
    static readonly int GetMinutes_A_Offset;
    static readonly int GetMinutes_ReturnValue_Offset;
    
    public static int GetMinutes(UnrealSharp.CoreUObject.Timespan a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMinutes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetMinutes_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMinutes_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetMinutes_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetMinute
    static readonly IntPtr GetMinute_NativeFunction;
    static readonly int GetMinute_ParamsSize;
    static readonly int GetMinute_A_Offset;
    static readonly int GetMinute_ReturnValue_Offset;
    
    public static int GetMinute(UnrealSharp.CoreUObject.DateTime a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMinute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetMinute_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMinute_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetMinute_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetMinElement
    static readonly IntPtr GetMinElement_NativeFunction;
    static readonly int GetMinElement_ParamsSize;
    static readonly int GetMinElement_A_Offset;
    static readonly int GetMinElement_ReturnValue_Offset;
    
    public static double GetMinElement(System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMinElement_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetMinElement_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMinElement_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, GetMinElement_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetMin2D
    static readonly IntPtr GetMin2D_NativeFunction;
    static readonly int GetMin2D_ParamsSize;
    static readonly int GetMin2D_A_Offset;
    static readonly int GetMin2D_ReturnValue_Offset;
    
    public static double GetMin(System.DoubleNumerics.Vector2 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMin2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, GetMin2D_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMin2D_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, GetMin2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetMilliseconds
    static readonly IntPtr GetMilliseconds_NativeFunction;
    static readonly int GetMilliseconds_ParamsSize;
    static readonly int GetMilliseconds_A_Offset;
    static readonly int GetMilliseconds_ReturnValue_Offset;
    
    public static int GetMilliseconds(UnrealSharp.CoreUObject.Timespan a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMilliseconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetMilliseconds_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMilliseconds_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetMilliseconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetMillisecond
    static readonly IntPtr GetMillisecond_NativeFunction;
    static readonly int GetMillisecond_ParamsSize;
    static readonly int GetMillisecond_A_Offset;
    static readonly int GetMillisecond_ReturnValue_Offset;
    
    public static int GetMillisecond(UnrealSharp.CoreUObject.DateTime a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMillisecond_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetMillisecond_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMillisecond_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetMillisecond_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetMaxElement
    static readonly IntPtr GetMaxElement_NativeFunction;
    static readonly int GetMaxElement_ParamsSize;
    static readonly int GetMaxElement_A_Offset;
    static readonly int GetMaxElement_ReturnValue_Offset;
    
    public static double GetMaxElement(System.DoubleNumerics.Vector3 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaxElement_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetMaxElement_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMaxElement_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, GetMaxElement_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetMax2D
    static readonly IntPtr GetMax2D_NativeFunction;
    static readonly int GetMax2D_ParamsSize;
    static readonly int GetMax2D_A_Offset;
    static readonly int GetMax2D_ReturnValue_Offset;
    
    public static double GetMax(System.DoubleNumerics.Vector2 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMax2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, GetMax2D_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMax2D_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, GetMax2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetHours
    static readonly IntPtr GetHours_NativeFunction;
    static readonly int GetHours_ParamsSize;
    static readonly int GetHours_A_Offset;
    static readonly int GetHours_ReturnValue_Offset;
    
    public static int GetHours(UnrealSharp.CoreUObject.Timespan a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHours_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetHours_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetHours_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetHours_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetHour12
    static readonly IntPtr GetHour12_NativeFunction;
    static readonly int GetHour12_ParamsSize;
    static readonly int GetHour12_A_Offset;
    static readonly int GetHour12_ReturnValue_Offset;
    
    public static int GetHour12(UnrealSharp.CoreUObject.DateTime a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHour12_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetHour12_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetHour12_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetHour12_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetHour
    static readonly IntPtr GetHour_NativeFunction;
    static readonly int GetHour_ParamsSize;
    static readonly int GetHour_A_Offset;
    static readonly int GetHour_ReturnValue_Offset;
    
    public static int GetHour(UnrealSharp.CoreUObject.DateTime a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHour_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetHour_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetHour_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetHour_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetForwardVector
    static readonly IntPtr GetForwardVector_NativeFunction;
    static readonly int GetForwardVector_ParamsSize;
    static readonly int GetForwardVector_InRot_Offset;
    static readonly int GetForwardVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 GetForwardVector(UnrealSharp.Rotator inRot)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetForwardVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, GetForwardVector_InRot_Offset), 0, null, inRot);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetForwardVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetForwardVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetDuration
    static readonly IntPtr GetDuration_NativeFunction;
    static readonly int GetDuration_ParamsSize;
    static readonly int GetDuration_A_Offset;
    static readonly int GetDuration_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Timespan GetDuration(UnrealSharp.CoreUObject.Timespan a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDuration_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetDuration_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetDuration_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Timespan returnValue;
            returnValue = UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetDuration_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetDirectionUnitVector
    static readonly IntPtr GetDirectionUnitVector_NativeFunction;
    static readonly int GetDirectionUnitVector_ParamsSize;
    static readonly int GetDirectionUnitVector_From_Offset;
    static readonly int GetDirectionUnitVector_To_Offset;
    static readonly int GetDirectionUnitVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 DirectionUnitTo(System.DoubleNumerics.Vector3 from, System.DoubleNumerics.Vector3 to)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDirectionUnitVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetDirectionUnitVector_From_Offset), 0, null, from);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetDirectionUnitVector_To_Offset), 0, null, to);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetDirectionUnitVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetDirectionUnitVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetDays
    static readonly IntPtr GetDays_NativeFunction;
    static readonly int GetDays_ParamsSize;
    static readonly int GetDays_A_Offset;
    static readonly int GetDays_ReturnValue_Offset;
    
    public static int GetDays(UnrealSharp.CoreUObject.Timespan a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDays_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetDays_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetDays_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetDays_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetDayOfYear
    static readonly IntPtr GetDayOfYear_NativeFunction;
    static readonly int GetDayOfYear_ParamsSize;
    static readonly int GetDayOfYear_A_Offset;
    static readonly int GetDayOfYear_ReturnValue_Offset;
    
    public static int GetDayOfYear(UnrealSharp.CoreUObject.DateTime a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDayOfYear_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetDayOfYear_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetDayOfYear_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetDayOfYear_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetDay
    static readonly IntPtr GetDay_NativeFunction;
    static readonly int GetDay_ParamsSize;
    static readonly int GetDay_A_Offset;
    static readonly int GetDay_ReturnValue_Offset;
    
    public static int GetDay(UnrealSharp.CoreUObject.DateTime a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDay_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetDay_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetDay_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetDay_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetDate
    static readonly IntPtr GetDate_NativeFunction;
    static readonly int GetDate_ParamsSize;
    static readonly int GetDate_A_Offset;
    static readonly int GetDate_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.DateTime GetDate(UnrealSharp.CoreUObject.DateTime a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetDate_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetDate_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.DateTime returnValue;
            returnValue = UnrealSharp.CoreUObject.DateTimeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetDate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetAzimuthAndElevation
    static readonly IntPtr GetAzimuthAndElevation_NativeFunction;
    static readonly int GetAzimuthAndElevation_ParamsSize;
    static readonly int GetAzimuthAndElevation_InDirection_Offset;
    static readonly int GetAzimuthAndElevation_ReferenceFrame_Offset;
    static readonly int GetAzimuthAndElevation_Azimuth_Offset;
    static readonly int GetAzimuthAndElevation_Elevation_Offset;
    
    public static void GetAzimuthElevation(System.DoubleNumerics.Vector3 inDirection, UnrealSharp.Transform referenceFrame, out float azimuth, out float elevation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAzimuthAndElevation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetAzimuthAndElevation_InDirection_Offset), 0, null, inDirection);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, GetAzimuthAndElevation_ReferenceFrame_Offset), 0, null, referenceFrame);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAzimuthAndElevation_NativeFunction, ParamsBuffer);
            
            azimuth = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetAzimuthAndElevation_Azimuth_Offset), 0, null);
            elevation = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetAzimuthAndElevation_Elevation_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetAxes
    static readonly IntPtr GetAxes_NativeFunction;
    static readonly int GetAxes_ParamsSize;
    static readonly int GetAxes_A_Offset;
    static readonly int GetAxes_X_Offset;
    static readonly int GetAxes_Y_Offset;
    static readonly int GetAxes_Z_Offset;
    
    public static void GetAxes(UnrealSharp.Rotator a, out System.DoubleNumerics.Vector3 x, out System.DoubleNumerics.Vector3 y, out System.DoubleNumerics.Vector3 z)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAxes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, GetAxes_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAxes_NativeFunction, ParamsBuffer);
            
            x = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetAxes_X_Offset), 0, null);
            y = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetAxes_Y_Offset), 0, null);
            z = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetAxes_Z_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetAbsMax2D
    static readonly IntPtr GetAbsMax2D_NativeFunction;
    static readonly int GetAbsMax2D_ParamsSize;
    static readonly int GetAbsMax2D_A_Offset;
    static readonly int GetAbsMax2D_ReturnValue_Offset;
    
    public static double GetAbsMax(System.DoubleNumerics.Vector2 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAbsMax2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, GetAbsMax2D_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAbsMax2D_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, GetAbsMax2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:GetAbs2D
    static readonly IntPtr GetAbs2D_NativeFunction;
    static readonly int GetAbs2D_ParamsSize;
    static readonly int GetAbs2D_A_Offset;
    static readonly int GetAbs2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 GetAbs(System.DoubleNumerics.Vector2 a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAbs2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, GetAbs2D_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAbs2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, GetAbs2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FWrap
    static readonly IntPtr FWrap_NativeFunction;
    static readonly int FWrap_ParamsSize;
    static readonly int FWrap_Value_Offset;
    static readonly int FWrap_Min_Offset;
    static readonly int FWrap_Max_Offset;
    static readonly int FWrap_ReturnValue_Offset;
    
    public static double FWrap(double value, double min, double max)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FWrap_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FWrap_Value_Offset), 0, null, value);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FWrap_Min_Offset), 0, null, min);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FWrap_Max_Offset), 0, null, max);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FWrap_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, FWrap_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FTruncVector
    static readonly IntPtr FTruncVector_NativeFunction;
    static readonly int FTruncVector_ParamsSize;
    static readonly int FTruncVector_InVector_Offset;
    static readonly int FTruncVector_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.IntVector Truncated(System.DoubleNumerics.Vector3 inVector)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FTruncVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FTruncVector_InVector_Offset), 0, null, inVector);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FTruncVector_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.IntVector returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.IntVector>.FromNative(IntPtr.Add(ParamsBuffer, FTruncVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FTrunc64
    static readonly IntPtr FTrunc64_NativeFunction;
    static readonly int FTrunc64_ParamsSize;
    static readonly int FTrunc64_A_Offset;
    static readonly int FTrunc64_ReturnValue_Offset;
    
    public static long FTrunc64(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FTrunc64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FTrunc64_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FTrunc64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, FTrunc64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FTrunc
    static readonly IntPtr FTrunc_NativeFunction;
    static readonly int FTrunc_ParamsSize;
    static readonly int FTrunc_A_Offset;
    static readonly int FTrunc_ReturnValue_Offset;
    
    public static int FTrunc(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FTrunc_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FTrunc_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FTrunc_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, FTrunc_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FromUnixTimestamp
    static readonly IntPtr FromUnixTimestamp_NativeFunction;
    static readonly int FromUnixTimestamp_ParamsSize;
    static readonly int FromUnixTimestamp_UnixTime_Offset;
    static readonly int FromUnixTimestamp_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.DateTime FromUnixTimestamp(long unixTime)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FromUnixTimestamp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, FromUnixTimestamp_UnixTime_Offset), 0, null, unixTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FromUnixTimestamp_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.DateTime returnValue;
            returnValue = UnrealSharp.CoreUObject.DateTimeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FromUnixTimestamp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FromSeconds
    static readonly IntPtr FromSeconds_NativeFunction;
    static readonly int FromSeconds_ParamsSize;
    static readonly int FromSeconds_Seconds_Offset;
    static readonly int FromSeconds_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Timespan FromSeconds(float seconds)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FromSeconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FromSeconds_Seconds_Offset), 0, null, seconds);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FromSeconds_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Timespan returnValue;
            returnValue = UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FromSeconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FromMinutes
    static readonly IntPtr FromMinutes_NativeFunction;
    static readonly int FromMinutes_ParamsSize;
    static readonly int FromMinutes_Minutes_Offset;
    static readonly int FromMinutes_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Timespan FromMinutes(float minutes)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FromMinutes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FromMinutes_Minutes_Offset), 0, null, minutes);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FromMinutes_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Timespan returnValue;
            returnValue = UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FromMinutes_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FromMilliseconds
    static readonly IntPtr FromMilliseconds_NativeFunction;
    static readonly int FromMilliseconds_ParamsSize;
    static readonly int FromMilliseconds_Milliseconds_Offset;
    static readonly int FromMilliseconds_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Timespan FromMilliseconds(float milliseconds)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FromMilliseconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FromMilliseconds_Milliseconds_Offset), 0, null, milliseconds);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FromMilliseconds_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Timespan returnValue;
            returnValue = UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FromMilliseconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FromHours
    static readonly IntPtr FromHours_NativeFunction;
    static readonly int FromHours_ParamsSize;
    static readonly int FromHours_Hours_Offset;
    static readonly int FromHours_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Timespan FromHours(float hours)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FromHours_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FromHours_Hours_Offset), 0, null, hours);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FromHours_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Timespan returnValue;
            returnValue = UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FromHours_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FromDays
    static readonly IntPtr FromDays_NativeFunction;
    static readonly int FromDays_ParamsSize;
    static readonly int FromDays_Days_Offset;
    static readonly int FromDays_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Timespan FromDays(float days)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FromDays_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FromDays_Days_Offset), 0, null, days);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FromDays_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Timespan returnValue;
            returnValue = UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FromDays_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Fraction
    static readonly IntPtr Fraction_NativeFunction;
    static readonly int Fraction_ParamsSize;
    static readonly int Fraction_A_Offset;
    static readonly int Fraction_ReturnValue_Offset;
    
    public static double Fraction(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Fraction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Fraction_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Fraction_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Fraction_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FMod64
    static readonly IntPtr FMod64_NativeFunction;
    static readonly int FMod64_ParamsSize;
    static readonly int FMod64_Dividend_Offset;
    static readonly int FMod64_Divisor_Offset;
    static readonly int FMod64_Remainder_Offset;
    static readonly int FMod64_ReturnValue_Offset;
    
    public static long FMod64(double dividend, double divisor, out double remainder)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FMod64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FMod64_Dividend_Offset), 0, null, dividend);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FMod64_Divisor_Offset), 0, null, divisor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FMod64_NativeFunction, ParamsBuffer);
            
            remainder = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, FMod64_Remainder_Offset), 0, null);
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, FMod64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FMod
    static readonly IntPtr FMod_NativeFunction;
    static readonly int FMod_ParamsSize;
    static readonly int FMod_Dividend_Offset;
    static readonly int FMod_Divisor_Offset;
    static readonly int FMod_Remainder_Offset;
    static readonly int FMod_ReturnValue_Offset;
    
    public static int FMod(double dividend, double divisor, out double remainder)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FMod_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FMod_Dividend_Offset), 0, null, dividend);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FMod_Divisor_Offset), 0, null, divisor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FMod_NativeFunction, ParamsBuffer);
            
            remainder = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, FMod_Remainder_Offset), 0, null);
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, FMod_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FMin
    static readonly IntPtr FMin_NativeFunction;
    static readonly int FMin_ParamsSize;
    static readonly int FMin_A_Offset;
    static readonly int FMin_B_Offset;
    static readonly int FMin_ReturnValue_Offset;
    
    public static double FMin(double a, double b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FMin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FMin_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FMin_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FMin_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, FMin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FMax
    static readonly IntPtr FMax_NativeFunction;
    static readonly int FMax_ParamsSize;
    static readonly int FMax_A_Offset;
    static readonly int FMax_B_Offset;
    static readonly int FMax_ReturnValue_Offset;
    
    public static double FMax(double a, double b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FMax_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FMax_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FMax_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FMax_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, FMax_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FloatSpringInterp
    static readonly IntPtr FloatSpringInterp_NativeFunction;
    static readonly int FloatSpringInterp_ParamsSize;
    static readonly int FloatSpringInterp_Current_Offset;
    static readonly int FloatSpringInterp_Target_Offset;
    static readonly int FloatSpringInterp_SpringState_Offset;
    static readonly int FloatSpringInterp_Stiffness_Offset;
    static readonly int FloatSpringInterp_CriticalDampingFactor_Offset;
    static readonly int FloatSpringInterp_DeltaTime_Offset;
    static readonly int FloatSpringInterp_Mass_Offset;
    static readonly int FloatSpringInterp_TargetVelocityAmount_Offset;
    static readonly int FloatSpringInterp_bClamp_Offset;
    static readonly int FloatSpringInterp_MinValue_Offset;
    static readonly int FloatSpringInterp_MaxValue_Offset;
    static readonly int FloatSpringInterp_bInitializeFromTarget_Offset;
    static readonly int FloatSpringInterp_ReturnValue_Offset;
    
    public static float FloatSpringInterp(float current, float target, ref UnrealSharp.Engine.FloatSpringState springState, float stiffness, float criticalDampingFactor, float deltaTime, float mass = 1.000000f, float targetVelocityAmount = 1.000000f, bool bClamp = false, float minValue = -1.000000f, float maxValue = 1.000000f, bool bInitializeFromTarget = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FloatSpringInterp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FloatSpringInterp_Current_Offset), 0, null, current);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FloatSpringInterp_Target_Offset), 0, null, target);
            UnrealSharp.Engine.FloatSpringStateMarshaler.ToNative(IntPtr.Add(ParamsBuffer, FloatSpringInterp_SpringState_Offset), 0, null, springState);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FloatSpringInterp_Stiffness_Offset), 0, null, stiffness);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FloatSpringInterp_CriticalDampingFactor_Offset), 0, null, criticalDampingFactor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FloatSpringInterp_DeltaTime_Offset), 0, null, deltaTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FloatSpringInterp_Mass_Offset), 0, null, mass);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FloatSpringInterp_TargetVelocityAmount_Offset), 0, null, targetVelocityAmount);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, FloatSpringInterp_bClamp_Offset), 0, null, bClamp);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FloatSpringInterp_MinValue_Offset), 0, null, minValue);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FloatSpringInterp_MaxValue_Offset), 0, null, maxValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, FloatSpringInterp_bInitializeFromTarget_Offset), 0, null, bInitializeFromTarget);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FloatSpringInterp_NativeFunction, ParamsBuffer);
            
            springState = UnrealSharp.Engine.FloatSpringStateMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FloatSpringInterp_SpringState_Offset), 0, null);
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, FloatSpringInterp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FixedTurn
    static readonly IntPtr FixedTurn_NativeFunction;
    static readonly int FixedTurn_ParamsSize;
    static readonly int FixedTurn_InCurrent_Offset;
    static readonly int FixedTurn_InDesired_Offset;
    static readonly int FixedTurn_InDeltaRate_Offset;
    static readonly int FixedTurn_ReturnValue_Offset;
    
    public static float FixedTurn(float inCurrent, float inDesired, float inDeltaRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FixedTurn_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FixedTurn_InCurrent_Offset), 0, null, inCurrent);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FixedTurn_InDesired_Offset), 0, null, inDesired);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FixedTurn_InDeltaRate_Offset), 0, null, inDeltaRate);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FixedTurn_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, FixedTurn_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FInterpTo_Constant
    static readonly IntPtr FInterpTo_Constant_NativeFunction;
    static readonly int FInterpTo_Constant_ParamsSize;
    static readonly int FInterpTo_Constant_Current_Offset;
    static readonly int FInterpTo_Constant_Target_Offset;
    static readonly int FInterpTo_Constant_DeltaTime_Offset;
    static readonly int FInterpTo_Constant_InterpSpeed_Offset;
    static readonly int FInterpTo_Constant_ReturnValue_Offset;
    
    public static double FInterpTo_Constant(double current, double target, double deltaTime, double interpSpeed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FInterpTo_Constant_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FInterpTo_Constant_Current_Offset), 0, null, current);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FInterpTo_Constant_Target_Offset), 0, null, target);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FInterpTo_Constant_DeltaTime_Offset), 0, null, deltaTime);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FInterpTo_Constant_InterpSpeed_Offset), 0, null, interpSpeed);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FInterpTo_Constant_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, FInterpTo_Constant_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FInterpTo
    static readonly IntPtr FInterpTo_NativeFunction;
    static readonly int FInterpTo_ParamsSize;
    static readonly int FInterpTo_Current_Offset;
    static readonly int FInterpTo_Target_Offset;
    static readonly int FInterpTo_DeltaTime_Offset;
    static readonly int FInterpTo_InterpSpeed_Offset;
    static readonly int FInterpTo_ReturnValue_Offset;
    
    public static double FInterpTo(double current, double target, double deltaTime, double interpSpeed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FInterpTo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FInterpTo_Current_Offset), 0, null, current);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FInterpTo_Target_Offset), 0, null, target);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FInterpTo_DeltaTime_Offset), 0, null, deltaTime);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FInterpTo_InterpSpeed_Offset), 0, null, interpSpeed);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FInterpTo_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, FInterpTo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FInterpEaseInOut
    static readonly IntPtr FInterpEaseInOut_NativeFunction;
    static readonly int FInterpEaseInOut_ParamsSize;
    static readonly int FInterpEaseInOut_A_Offset;
    static readonly int FInterpEaseInOut_B_Offset;
    static readonly int FInterpEaseInOut_Alpha_Offset;
    static readonly int FInterpEaseInOut_Exponent_Offset;
    static readonly int FInterpEaseInOut_ReturnValue_Offset;
    
    public static double FInterpEaseInOut(double a, double b, double alpha, double exponent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FInterpEaseInOut_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FInterpEaseInOut_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FInterpEaseInOut_B_Offset), 0, null, b);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FInterpEaseInOut_Alpha_Offset), 0, null, alpha);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FInterpEaseInOut_Exponent_Offset), 0, null, exponent);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FInterpEaseInOut_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, FInterpEaseInOut_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FindRelativeLookAtRotation
    static readonly IntPtr FindRelativeLookAtRotation_NativeFunction;
    static readonly int FindRelativeLookAtRotation_ParamsSize;
    static readonly int FindRelativeLookAtRotation_StartTransform_Offset;
    static readonly int FindRelativeLookAtRotation_TargetLocation_Offset;
    static readonly int FindRelativeLookAtRotation_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator FindRelativeLookAtRotation(UnrealSharp.Transform startTransform, System.DoubleNumerics.Vector3 targetLocation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindRelativeLookAtRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, FindRelativeLookAtRotation_StartTransform_Offset), 0, null, startTransform);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindRelativeLookAtRotation_TargetLocation_Offset), 0, null, targetLocation);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindRelativeLookAtRotation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, FindRelativeLookAtRotation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FindNearestPointsOnLineSegments
    static readonly IntPtr FindNearestPointsOnLineSegments_NativeFunction;
    static readonly int FindNearestPointsOnLineSegments_ParamsSize;
    static readonly int FindNearestPointsOnLineSegments_Segment1Start_Offset;
    static readonly int FindNearestPointsOnLineSegments_Segment1End_Offset;
    static readonly int FindNearestPointsOnLineSegments_Segment2Start_Offset;
    static readonly int FindNearestPointsOnLineSegments_Segment2End_Offset;
    static readonly int FindNearestPointsOnLineSegments_Segment1Point_Offset;
    static readonly int FindNearestPointsOnLineSegments_Segment2Point_Offset;
    
    public static void FindNearestPointsOnLineSegments(System.DoubleNumerics.Vector3 segment1Start, System.DoubleNumerics.Vector3 segment1End, System.DoubleNumerics.Vector3 segment2Start, System.DoubleNumerics.Vector3 segment2End, out System.DoubleNumerics.Vector3 segment1Point, out System.DoubleNumerics.Vector3 segment2Point)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindNearestPointsOnLineSegments_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindNearestPointsOnLineSegments_Segment1Start_Offset), 0, null, segment1Start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindNearestPointsOnLineSegments_Segment1End_Offset), 0, null, segment1End);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindNearestPointsOnLineSegments_Segment2Start_Offset), 0, null, segment2Start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindNearestPointsOnLineSegments_Segment2End_Offset), 0, null, segment2End);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindNearestPointsOnLineSegments_NativeFunction, ParamsBuffer);
            
            segment1Point = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, FindNearestPointsOnLineSegments_Segment1Point_Offset), 0, null);
            segment2Point = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, FindNearestPointsOnLineSegments_Segment2Point_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FindLookAtRotation
    static readonly IntPtr FindLookAtRotation_NativeFunction;
    static readonly int FindLookAtRotation_ParamsSize;
    static readonly int FindLookAtRotation_Start_Offset;
    static readonly int FindLookAtRotation_Target_Offset;
    static readonly int FindLookAtRotation_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator FindLookAtRotation(System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 target)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindLookAtRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindLookAtRotation_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindLookAtRotation_Target_Offset), 0, null, target);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindLookAtRotation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, FindLookAtRotation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FindClosestPointOnSegment
    static readonly IntPtr FindClosestPointOnSegment_NativeFunction;
    static readonly int FindClosestPointOnSegment_ParamsSize;
    static readonly int FindClosestPointOnSegment_Point_Offset;
    static readonly int FindClosestPointOnSegment_SegmentStart_Offset;
    static readonly int FindClosestPointOnSegment_SegmentEnd_Offset;
    static readonly int FindClosestPointOnSegment_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 FindClosestPointOnSegment(System.DoubleNumerics.Vector3 point, System.DoubleNumerics.Vector3 segmentStart, System.DoubleNumerics.Vector3 segmentEnd)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindClosestPointOnSegment_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindClosestPointOnSegment_Point_Offset), 0, null, point);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindClosestPointOnSegment_SegmentStart_Offset), 0, null, segmentStart);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindClosestPointOnSegment_SegmentEnd_Offset), 0, null, segmentEnd);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindClosestPointOnSegment_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, FindClosestPointOnSegment_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FindClosestPointOnLine
    static readonly IntPtr FindClosestPointOnLine_NativeFunction;
    static readonly int FindClosestPointOnLine_ParamsSize;
    static readonly int FindClosestPointOnLine_Point_Offset;
    static readonly int FindClosestPointOnLine_LineOrigin_Offset;
    static readonly int FindClosestPointOnLine_LineDirection_Offset;
    static readonly int FindClosestPointOnLine_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 FindClosestPointOnLine(System.DoubleNumerics.Vector3 point, System.DoubleNumerics.Vector3 lineOrigin, System.DoubleNumerics.Vector3 lineDirection)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindClosestPointOnLine_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindClosestPointOnLine_Point_Offset), 0, null, point);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindClosestPointOnLine_LineOrigin_Offset), 0, null, lineOrigin);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindClosestPointOnLine_LineDirection_Offset), 0, null, lineDirection);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindClosestPointOnLine_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, FindClosestPointOnLine_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FFloor64
    static readonly IntPtr FFloor64_NativeFunction;
    static readonly int FFloor64_ParamsSize;
    static readonly int FFloor64_A_Offset;
    static readonly int FFloor64_ReturnValue_Offset;
    
    public static long FFloor64(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FFloor64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FFloor64_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FFloor64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, FFloor64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FFloor
    static readonly IntPtr FFloor_NativeFunction;
    static readonly int FFloor_ParamsSize;
    static readonly int FFloor_A_Offset;
    static readonly int FFloor_ReturnValue_Offset;
    
    public static int FFloor(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FFloor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FFloor_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FFloor_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, FFloor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FClamp
    static readonly IntPtr FClamp_NativeFunction;
    static readonly int FClamp_ParamsSize;
    static readonly int FClamp_Value_Offset;
    static readonly int FClamp_Min_Offset;
    static readonly int FClamp_Max_Offset;
    static readonly int FClamp_ReturnValue_Offset;
    
    public static double FClamp(double value, double min, double max)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FClamp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FClamp_Value_Offset), 0, null, value);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FClamp_Min_Offset), 0, null, min);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FClamp_Max_Offset), 0, null, max);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FClamp_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, FClamp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FCeil64
    static readonly IntPtr FCeil64_NativeFunction;
    static readonly int FCeil64_ParamsSize;
    static readonly int FCeil64_A_Offset;
    static readonly int FCeil64_ReturnValue_Offset;
    
    public static long FCeil64(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FCeil64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FCeil64_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FCeil64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, FCeil64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:FCeil
    static readonly IntPtr FCeil_NativeFunction;
    static readonly int FCeil_ParamsSize;
    static readonly int FCeil_A_Offset;
    static readonly int FCeil_ReturnValue_Offset;
    
    public static int FCeil(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FCeil_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, FCeil_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FCeil_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, FCeil_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Exp
    static readonly IntPtr Exp_NativeFunction;
    static readonly int Exp_ParamsSize;
    static readonly int Exp_A_Offset;
    static readonly int Exp_ReturnValue_Offset;
    
    public static double Exp(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Exp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Exp_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Exp_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Exp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:EqualExactly_VectorVector
    static readonly IntPtr EqualExactly_VectorVector_NativeFunction;
    static readonly int EqualExactly_VectorVector_ParamsSize;
    static readonly int EqualExactly_VectorVector_A_Offset;
    static readonly int EqualExactly_VectorVector_B_Offset;
    static readonly int EqualExactly_VectorVector_ReturnValue_Offset;
    
    public static bool Equals(System.DoubleNumerics.Vector3 a, System.DoubleNumerics.Vector3 b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualExactly_VectorVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, EqualExactly_VectorVector_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, EqualExactly_VectorVector_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualExactly_VectorVector_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualExactly_VectorVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:EqualExactly_Vector2DVector2D
    static readonly IntPtr EqualExactly_Vector2DVector2D_NativeFunction;
    static readonly int EqualExactly_Vector2DVector2D_ParamsSize;
    static readonly int EqualExactly_Vector2DVector2D_A_Offset;
    static readonly int EqualExactly_Vector2DVector2D_B_Offset;
    static readonly int EqualExactly_Vector2DVector2D_ReturnValue_Offset;
    
    public static bool Equals(System.DoubleNumerics.Vector2 a, System.DoubleNumerics.Vector2 b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualExactly_Vector2DVector2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, EqualExactly_Vector2DVector2D_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, EqualExactly_Vector2DVector2D_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualExactly_Vector2DVector2D_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualExactly_Vector2DVector2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:EqualEqual_VectorVector
    static readonly IntPtr EqualEqual_VectorVector_NativeFunction;
    static readonly int EqualEqual_VectorVector_ParamsSize;
    static readonly int EqualEqual_VectorVector_A_Offset;
    static readonly int EqualEqual_VectorVector_B_Offset;
    static readonly int EqualEqual_VectorVector_ErrorTolerance_Offset;
    static readonly int EqualEqual_VectorVector_ReturnValue_Offset;
    
    public static bool IsNearEqual(System.DoubleNumerics.Vector3 a, System.DoubleNumerics.Vector3 b, float errorTolerance = 0.000100f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_VectorVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_VectorVector_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_VectorVector_B_Offset), 0, null, b);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_VectorVector_ErrorTolerance_Offset), 0, null, errorTolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_VectorVector_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_VectorVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:EqualEqual_Vector2DVector2D
    static readonly IntPtr EqualEqual_Vector2DVector2D_NativeFunction;
    static readonly int EqualEqual_Vector2DVector2D_ParamsSize;
    static readonly int EqualEqual_Vector2DVector2D_A_Offset;
    static readonly int EqualEqual_Vector2DVector2D_B_Offset;
    static readonly int EqualEqual_Vector2DVector2D_ErrorTolerance_Offset;
    static readonly int EqualEqual_Vector2DVector2D_ReturnValue_Offset;
    
    public static bool IsNearEqual(System.DoubleNumerics.Vector2 a, System.DoubleNumerics.Vector2 b, float errorTolerance = 0.000100f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_Vector2DVector2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_Vector2DVector2D_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_Vector2DVector2D_B_Offset), 0, null, b);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_Vector2DVector2D_ErrorTolerance_Offset), 0, null, errorTolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_Vector2DVector2D_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_Vector2DVector2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:EqualEqual_TransformTransform
    static readonly IntPtr EqualEqual_TransformTransform_NativeFunction;
    static readonly int EqualEqual_TransformTransform_ParamsSize;
    static readonly int EqualEqual_TransformTransform_A_Offset;
    static readonly int EqualEqual_TransformTransform_B_Offset;
    static readonly int EqualEqual_TransformTransform_ReturnValue_Offset;
    
    public static bool Equals(UnrealSharp.Transform a, UnrealSharp.Transform b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_TransformTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_TransformTransform_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_TransformTransform_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_TransformTransform_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_TransformTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:EqualEqual_TimespanTimespan
    static readonly IntPtr EqualEqual_TimespanTimespan_NativeFunction;
    static readonly int EqualEqual_TimespanTimespan_ParamsSize;
    static readonly int EqualEqual_TimespanTimespan_A_Offset;
    static readonly int EqualEqual_TimespanTimespan_B_Offset;
    static readonly int EqualEqual_TimespanTimespan_ReturnValue_Offset;
    
    public static bool EqualEqual_TimespanTimespan(UnrealSharp.CoreUObject.Timespan a, UnrealSharp.CoreUObject.Timespan b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_TimespanTimespan_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_TimespanTimespan_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_TimespanTimespan_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_TimespanTimespan_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_TimespanTimespan_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:EqualEqual_RotatorRotator
    static readonly IntPtr EqualEqual_RotatorRotator_NativeFunction;
    static readonly int EqualEqual_RotatorRotator_ParamsSize;
    static readonly int EqualEqual_RotatorRotator_A_Offset;
    static readonly int EqualEqual_RotatorRotator_B_Offset;
    static readonly int EqualEqual_RotatorRotator_ErrorTolerance_Offset;
    static readonly int EqualEqual_RotatorRotator_ReturnValue_Offset;
    
    public static bool IsNearEqual(UnrealSharp.Rotator a, UnrealSharp.Rotator b, float errorTolerance = 0.000100f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_RotatorRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_RotatorRotator_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_RotatorRotator_B_Offset), 0, null, b);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_RotatorRotator_ErrorTolerance_Offset), 0, null, errorTolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_RotatorRotator_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_RotatorRotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:EqualEqual_QuatQuat
    static readonly IntPtr EqualEqual_QuatQuat_NativeFunction;
    static readonly int EqualEqual_QuatQuat_ParamsSize;
    static readonly int EqualEqual_QuatQuat_A_Offset;
    static readonly int EqualEqual_QuatQuat_B_Offset;
    static readonly int EqualEqual_QuatQuat_Tolerance_Offset;
    static readonly int EqualEqual_QuatQuat_ReturnValue_Offset;
    
    public static bool Equals(System.DoubleNumerics.Quaternion a, System.DoubleNumerics.Quaternion b, float tolerance = 0.000100f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_QuatQuat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_QuatQuat_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_QuatQuat_B_Offset), 0, null, b);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_QuatQuat_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_QuatQuat_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_QuatQuat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:EqualEqual_ObjectObject
    static readonly IntPtr EqualEqual_ObjectObject_NativeFunction;
    static readonly int EqualEqual_ObjectObject_ParamsSize;
    static readonly int EqualEqual_ObjectObject_A_Offset;
    static readonly int EqualEqual_ObjectObject_B_Offset;
    static readonly int EqualEqual_ObjectObject_ReturnValue_Offset;
    
    public static bool EqualEqual_ObjectObject(UnrealSharp.CoreUObject.Object a, UnrealSharp.CoreUObject.Object b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_ObjectObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_ObjectObject_A_Offset), 0, null, a);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_ObjectObject_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_ObjectObject_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_ObjectObject_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:EqualEqual_NameName
    static readonly IntPtr EqualEqual_NameName_NativeFunction;
    static readonly int EqualEqual_NameName_ParamsSize;
    static readonly int EqualEqual_NameName_A_Offset;
    static readonly int EqualEqual_NameName_B_Offset;
    static readonly int EqualEqual_NameName_ReturnValue_Offset;
    
    public static bool EqualEqual_NameName(Name a, Name b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_NameName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_NameName_A_Offset), 0, null, a);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_NameName_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_NameName_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_NameName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:EqualEqual_MatrixMatrix
    static readonly IntPtr EqualEqual_MatrixMatrix_NativeFunction;
    static readonly int EqualEqual_MatrixMatrix_ParamsSize;
    static readonly int EqualEqual_MatrixMatrix_A_Offset;
    static readonly int EqualEqual_MatrixMatrix_B_Offset;
    static readonly int EqualEqual_MatrixMatrix_Tolerance_Offset;
    static readonly int EqualEqual_MatrixMatrix_ReturnValue_Offset;
    
    public static bool Equals(System.DoubleNumerics.Matrix4x4 a, System.DoubleNumerics.Matrix4x4 b, float tolerance = 0.000100f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_MatrixMatrix_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_MatrixMatrix_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_MatrixMatrix_B_Offset), 0, null, b);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_MatrixMatrix_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_MatrixMatrix_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_MatrixMatrix_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:EqualEqual_LinearColorLinearColor
    static readonly IntPtr EqualEqual_LinearColorLinearColor_NativeFunction;
    static readonly int EqualEqual_LinearColorLinearColor_ParamsSize;
    static readonly int EqualEqual_LinearColorLinearColor_A_Offset;
    static readonly int EqualEqual_LinearColorLinearColor_B_Offset;
    static readonly int EqualEqual_LinearColorLinearColor_ReturnValue_Offset;
    
    public static bool Equals(UnrealSharp.CoreUObject.LinearColor a, UnrealSharp.CoreUObject.LinearColor b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_LinearColorLinearColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_LinearColorLinearColor_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_LinearColorLinearColor_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_LinearColorLinearColor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_LinearColorLinearColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:EqualEqual_IntInt
    static readonly IntPtr EqualEqual_IntInt_NativeFunction;
    static readonly int EqualEqual_IntInt_ParamsSize;
    static readonly int EqualEqual_IntInt_A_Offset;
    static readonly int EqualEqual_IntInt_B_Offset;
    static readonly int EqualEqual_IntInt_ReturnValue_Offset;
    
    public static bool EqualEqual_IntInt(int a, int b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_IntInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_IntInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_IntInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_IntInt_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_IntInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:EqualEqual_Int64Int64
    static readonly IntPtr EqualEqual_Int64Int64_NativeFunction;
    static readonly int EqualEqual_Int64Int64_ParamsSize;
    static readonly int EqualEqual_Int64Int64_A_Offset;
    static readonly int EqualEqual_Int64Int64_B_Offset;
    static readonly int EqualEqual_Int64Int64_ReturnValue_Offset;
    
    public static bool EqualEqual_Int64Int64(long a, long b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_Int64Int64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_Int64Int64_A_Offset), 0, null, a);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_Int64Int64_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_Int64Int64_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_Int64Int64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:EqualEqual_DoubleDouble
    static readonly IntPtr EqualEqual_DoubleDouble_NativeFunction;
    static readonly int EqualEqual_DoubleDouble_ParamsSize;
    static readonly int EqualEqual_DoubleDouble_A_Offset;
    static readonly int EqualEqual_DoubleDouble_B_Offset;
    static readonly int EqualEqual_DoubleDouble_ReturnValue_Offset;
    
    public static bool EqualEqual_DoubleDouble(double a, double b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_DoubleDouble_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_DoubleDouble_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_DoubleDouble_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_DoubleDouble_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_DoubleDouble_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:EqualEqual_DateTimeDateTime
    static readonly IntPtr EqualEqual_DateTimeDateTime_NativeFunction;
    static readonly int EqualEqual_DateTimeDateTime_ParamsSize;
    static readonly int EqualEqual_DateTimeDateTime_A_Offset;
    static readonly int EqualEqual_DateTimeDateTime_B_Offset;
    static readonly int EqualEqual_DateTimeDateTime_ReturnValue_Offset;
    
    public static bool EqualEqual_DateTimeDateTime(UnrealSharp.CoreUObject.DateTime a, UnrealSharp.CoreUObject.DateTime b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_DateTimeDateTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_DateTimeDateTime_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_DateTimeDateTime_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_DateTimeDateTime_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_DateTimeDateTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:EqualEqual_ClassClass
    static readonly IntPtr EqualEqual_ClassClass_NativeFunction;
    static readonly int EqualEqual_ClassClass_ParamsSize;
    static readonly int EqualEqual_ClassClass_A_Offset;
    static readonly int EqualEqual_ClassClass_B_Offset;
    static readonly int EqualEqual_ClassClass_ReturnValue_Offset;
    
    public static bool EqualEqual_ClassClass(SubclassOf<UnrealSharp.CoreUObject.Object> a, SubclassOf<UnrealSharp.CoreUObject.Object> b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_ClassClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_ClassClass_A_Offset), 0, null, a);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_ClassClass_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_ClassClass_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_ClassClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:EqualEqual_ByteByte
    static readonly IntPtr EqualEqual_ByteByte_NativeFunction;
    static readonly int EqualEqual_ByteByte_ParamsSize;
    static readonly int EqualEqual_ByteByte_A_Offset;
    static readonly int EqualEqual_ByteByte_B_Offset;
    static readonly int EqualEqual_ByteByte_ReturnValue_Offset;
    
    public static bool EqualEqual_ByteByte(byte a, byte b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_ByteByte_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_ByteByte_A_Offset), 0, null, a);
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_ByteByte_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_ByteByte_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_ByteByte_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:EqualEqual_BoolBool
    static readonly IntPtr EqualEqual_BoolBool_NativeFunction;
    static readonly int EqualEqual_BoolBool_ParamsSize;
    static readonly int EqualEqual_BoolBool_A_Offset;
    static readonly int EqualEqual_BoolBool_B_Offset;
    static readonly int EqualEqual_BoolBool_ReturnValue_Offset;
    
    public static bool EqualEqual_BoolBool(bool a, bool b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_BoolBool_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_BoolBool_A_Offset), 0, null, a);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_BoolBool_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_BoolBool_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_BoolBool_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Equal_IntPointIntPoint
    static readonly IntPtr Equal_IntPointIntPoint_NativeFunction;
    static readonly int Equal_IntPointIntPoint_ParamsSize;
    static readonly int Equal_IntPointIntPoint_A_Offset;
    static readonly int Equal_IntPointIntPoint_B_Offset;
    static readonly int Equal_IntPointIntPoint_ReturnValue_Offset;
    
    public static bool Equals(UnrealSharp.CoreUObject.IntPoint a, UnrealSharp.CoreUObject.IntPoint b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Equal_IntPointIntPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(ParamsBuffer, Equal_IntPointIntPoint_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(ParamsBuffer, Equal_IntPointIntPoint_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Equal_IntPointIntPoint_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Equal_IntPointIntPoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:DynamicWeightedMovingAverage_FVector
    static readonly IntPtr DynamicWeightedMovingAverage_FVector_NativeFunction;
    static readonly int DynamicWeightedMovingAverage_FVector_ParamsSize;
    static readonly int DynamicWeightedMovingAverage_FVector_CurrentSample_Offset;
    static readonly int DynamicWeightedMovingAverage_FVector_PreviousSample_Offset;
    static readonly int DynamicWeightedMovingAverage_FVector_MaxDistance_Offset;
    static readonly int DynamicWeightedMovingAverage_FVector_MinWeight_Offset;
    static readonly int DynamicWeightedMovingAverage_FVector_MaxWeight_Offset;
    static readonly int DynamicWeightedMovingAverage_FVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 DynamicWeightedMovingAverage_FVector(System.DoubleNumerics.Vector3 currentSample, System.DoubleNumerics.Vector3 previousSample, float maxDistance, float minWeight, float maxWeight)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DynamicWeightedMovingAverage_FVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DynamicWeightedMovingAverage_FVector_CurrentSample_Offset), 0, null, currentSample);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DynamicWeightedMovingAverage_FVector_PreviousSample_Offset), 0, null, previousSample);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DynamicWeightedMovingAverage_FVector_MaxDistance_Offset), 0, null, maxDistance);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DynamicWeightedMovingAverage_FVector_MinWeight_Offset), 0, null, minWeight);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DynamicWeightedMovingAverage_FVector_MaxWeight_Offset), 0, null, maxWeight);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DynamicWeightedMovingAverage_FVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, DynamicWeightedMovingAverage_FVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:DynamicWeightedMovingAverage_FRotator
    static readonly IntPtr DynamicWeightedMovingAverage_FRotator_NativeFunction;
    static readonly int DynamicWeightedMovingAverage_FRotator_ParamsSize;
    static readonly int DynamicWeightedMovingAverage_FRotator_CurrentSample_Offset;
    static readonly int DynamicWeightedMovingAverage_FRotator_PreviousSample_Offset;
    static readonly int DynamicWeightedMovingAverage_FRotator_MaxDistance_Offset;
    static readonly int DynamicWeightedMovingAverage_FRotator_MinWeight_Offset;
    static readonly int DynamicWeightedMovingAverage_FRotator_MaxWeight_Offset;
    static readonly int DynamicWeightedMovingAverage_FRotator_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator DynamicWeightedMovingAverage_FRotator(UnrealSharp.Rotator currentSample, UnrealSharp.Rotator previousSample, float maxDistance, float minWeight, float maxWeight)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DynamicWeightedMovingAverage_FRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, DynamicWeightedMovingAverage_FRotator_CurrentSample_Offset), 0, null, currentSample);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, DynamicWeightedMovingAverage_FRotator_PreviousSample_Offset), 0, null, previousSample);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DynamicWeightedMovingAverage_FRotator_MaxDistance_Offset), 0, null, maxDistance);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DynamicWeightedMovingAverage_FRotator_MinWeight_Offset), 0, null, minWeight);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DynamicWeightedMovingAverage_FRotator_MaxWeight_Offset), 0, null, maxWeight);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DynamicWeightedMovingAverage_FRotator_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, DynamicWeightedMovingAverage_FRotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:DynamicWeightedMovingAverage_Float
    static readonly IntPtr DynamicWeightedMovingAverage_Float_NativeFunction;
    static readonly int DynamicWeightedMovingAverage_Float_ParamsSize;
    static readonly int DynamicWeightedMovingAverage_Float_CurrentSample_Offset;
    static readonly int DynamicWeightedMovingAverage_Float_PreviousSample_Offset;
    static readonly int DynamicWeightedMovingAverage_Float_MaxDistance_Offset;
    static readonly int DynamicWeightedMovingAverage_Float_MinWeight_Offset;
    static readonly int DynamicWeightedMovingAverage_Float_MaxWeight_Offset;
    static readonly int DynamicWeightedMovingAverage_Float_ReturnValue_Offset;
    
    public static float DynamicWeightedMovingAverage_Float(float currentSample, float previousSample, float maxDistance, float minWeight, float maxWeight)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DynamicWeightedMovingAverage_Float_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DynamicWeightedMovingAverage_Float_CurrentSample_Offset), 0, null, currentSample);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DynamicWeightedMovingAverage_Float_PreviousSample_Offset), 0, null, previousSample);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DynamicWeightedMovingAverage_Float_MaxDistance_Offset), 0, null, maxDistance);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DynamicWeightedMovingAverage_Float_MinWeight_Offset), 0, null, minWeight);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DynamicWeightedMovingAverage_Float_MaxWeight_Offset), 0, null, maxWeight);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DynamicWeightedMovingAverage_Float_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, DynamicWeightedMovingAverage_Float_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:DotProduct2D
    static readonly IntPtr DotProduct2D_NativeFunction;
    static readonly int DotProduct2D_ParamsSize;
    static readonly int DotProduct2D_A_Offset;
    static readonly int DotProduct2D_B_Offset;
    static readonly int DotProduct2D_ReturnValue_Offset;
    
    public static double Dot(System.DoubleNumerics.Vector2 a, System.DoubleNumerics.Vector2 b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DotProduct2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DotProduct2D_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DotProduct2D_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DotProduct2D_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, DotProduct2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Dot_VectorVector
    static readonly IntPtr Dot_VectorVector_NativeFunction;
    static readonly int Dot_VectorVector_ParamsSize;
    static readonly int Dot_VectorVector_A_Offset;
    static readonly int Dot_VectorVector_B_Offset;
    static readonly int Dot_VectorVector_ReturnValue_Offset;
    
    public static double Dot(System.DoubleNumerics.Vector3 a, System.DoubleNumerics.Vector3 b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Dot_VectorVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Dot_VectorVector_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Dot_VectorVector_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Dot_VectorVector_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Dot_VectorVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Divide_VectorVector
    static readonly IntPtr Divide_VectorVector_NativeFunction;
    static readonly int Divide_VectorVector_ParamsSize;
    static readonly int Divide_VectorVector_A_Offset;
    static readonly int Divide_VectorVector_B_Offset;
    static readonly int Divide_VectorVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Divide(System.DoubleNumerics.Vector3 a)
    {
        System.DoubleNumerics.Vector3 b = new System.DoubleNumerics.Vector3
        {
            X=1.000000f,
            Y=1.000000f,
            Z=1.000000f,
        };
        return Divide(a, b);
    }
    
    public static System.DoubleNumerics.Vector3 Divide(System.DoubleNumerics.Vector3 a, System.DoubleNumerics.Vector3 b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Divide_VectorVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Divide_VectorVector_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Divide_VectorVector_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Divide_VectorVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Divide_VectorVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Divide_VectorInt
    static readonly IntPtr Divide_VectorInt_NativeFunction;
    static readonly int Divide_VectorInt_ParamsSize;
    static readonly int Divide_VectorInt_A_Offset;
    static readonly int Divide_VectorInt_B_Offset;
    static readonly int Divide_VectorInt_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 DivideInt(System.DoubleNumerics.Vector3 a, int b = 1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Divide_VectorInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Divide_VectorInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Divide_VectorInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Divide_VectorInt_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Divide_VectorInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Divide_VectorFloat
    static readonly IntPtr Divide_VectorFloat_NativeFunction;
    static readonly int Divide_VectorFloat_ParamsSize;
    static readonly int Divide_VectorFloat_A_Offset;
    static readonly int Divide_VectorFloat_B_Offset;
    static readonly int Divide_VectorFloat_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 DivideFloat(System.DoubleNumerics.Vector3 a, double b = 1.000000)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Divide_VectorFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Divide_VectorFloat_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Divide_VectorFloat_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Divide_VectorFloat_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Divide_VectorFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Divide_Vector2DVector2D
    static readonly IntPtr Divide_Vector2DVector2D_NativeFunction;
    static readonly int Divide_Vector2DVector2D_ParamsSize;
    static readonly int Divide_Vector2DVector2D_A_Offset;
    static readonly int Divide_Vector2DVector2D_B_Offset;
    static readonly int Divide_Vector2DVector2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 Divide(System.DoubleNumerics.Vector2 a, System.DoubleNumerics.Vector2 b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Divide_Vector2DVector2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Divide_Vector2DVector2D_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Divide_Vector2DVector2D_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Divide_Vector2DVector2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Divide_Vector2DVector2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Divide_Vector2DFloat
    static readonly IntPtr Divide_Vector2DFloat_NativeFunction;
    static readonly int Divide_Vector2DFloat_ParamsSize;
    static readonly int Divide_Vector2DFloat_A_Offset;
    static readonly int Divide_Vector2DFloat_B_Offset;
    static readonly int Divide_Vector2DFloat_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 DivideFloat(System.DoubleNumerics.Vector2 a, double b = 1.000000)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Divide_Vector2DFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Divide_Vector2DFloat_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Divide_Vector2DFloat_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Divide_Vector2DFloat_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Divide_Vector2DFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Divide_TimespanFloat
    static readonly IntPtr Divide_TimespanFloat_NativeFunction;
    static readonly int Divide_TimespanFloat_ParamsSize;
    static readonly int Divide_TimespanFloat_A_Offset;
    static readonly int Divide_TimespanFloat_Scalar_Offset;
    static readonly int Divide_TimespanFloat_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Timespan Divide_TimespanFloat(UnrealSharp.CoreUObject.Timespan a, float scalar)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Divide_TimespanFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Divide_TimespanFloat_A_Offset), 0, null, a);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Divide_TimespanFloat_Scalar_Offset), 0, null, scalar);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Divide_TimespanFloat_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Timespan returnValue;
            returnValue = UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(ParamsBuffer, Divide_TimespanFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Divide_LinearColorLinearColor
    static readonly IntPtr Divide_LinearColorLinearColor_NativeFunction;
    static readonly int Divide_LinearColorLinearColor_ParamsSize;
    static readonly int Divide_LinearColorLinearColor_A_Offset;
    static readonly int Divide_LinearColorLinearColor_B_Offset;
    static readonly int Divide_LinearColorLinearColor_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor Divide(UnrealSharp.CoreUObject.LinearColor a, UnrealSharp.CoreUObject.LinearColor b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Divide_LinearColorLinearColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, Divide_LinearColorLinearColor_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, Divide_LinearColorLinearColor_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Divide_LinearColorLinearColor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, Divide_LinearColorLinearColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Divide_IntPointIntPoint
    static readonly IntPtr Divide_IntPointIntPoint_NativeFunction;
    static readonly int Divide_IntPointIntPoint_ParamsSize;
    static readonly int Divide_IntPointIntPoint_A_Offset;
    static readonly int Divide_IntPointIntPoint_B_Offset;
    static readonly int Divide_IntPointIntPoint_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.IntPoint Divide(UnrealSharp.CoreUObject.IntPoint a, UnrealSharp.CoreUObject.IntPoint b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Divide_IntPointIntPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(ParamsBuffer, Divide_IntPointIntPoint_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(ParamsBuffer, Divide_IntPointIntPoint_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Divide_IntPointIntPoint_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.IntPoint returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative(IntPtr.Add(ParamsBuffer, Divide_IntPointIntPoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Divide_IntPointInt
    static readonly IntPtr Divide_IntPointInt_NativeFunction;
    static readonly int Divide_IntPointInt_ParamsSize;
    static readonly int Divide_IntPointInt_A_Offset;
    static readonly int Divide_IntPointInt_B_Offset;
    static readonly int Divide_IntPointInt_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.IntPoint DivideInt(UnrealSharp.CoreUObject.IntPoint a, int b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Divide_IntPointInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(ParamsBuffer, Divide_IntPointInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Divide_IntPointInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Divide_IntPointInt_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.IntPoint returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative(IntPtr.Add(ParamsBuffer, Divide_IntPointInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Divide_IntInt
    static readonly IntPtr Divide_IntInt_NativeFunction;
    static readonly int Divide_IntInt_ParamsSize;
    static readonly int Divide_IntInt_A_Offset;
    static readonly int Divide_IntInt_B_Offset;
    static readonly int Divide_IntInt_ReturnValue_Offset;
    
    public static int Divide_IntInt(int a, int b = 1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Divide_IntInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Divide_IntInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Divide_IntInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Divide_IntInt_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Divide_IntInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Divide_Int64Int64
    static readonly IntPtr Divide_Int64Int64_NativeFunction;
    static readonly int Divide_Int64Int64_ParamsSize;
    static readonly int Divide_Int64Int64_A_Offset;
    static readonly int Divide_Int64Int64_B_Offset;
    static readonly int Divide_Int64Int64_ReturnValue_Offset;
    
    public static long Divide_Int64Int64(long a, long b = 1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Divide_Int64Int64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Divide_Int64Int64_A_Offset), 0, null, a);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Divide_Int64Int64_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Divide_Int64Int64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, Divide_Int64Int64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Divide_DoubleDouble
    static readonly IntPtr Divide_DoubleDouble_NativeFunction;
    static readonly int Divide_DoubleDouble_ParamsSize;
    static readonly int Divide_DoubleDouble_A_Offset;
    static readonly int Divide_DoubleDouble_B_Offset;
    static readonly int Divide_DoubleDouble_ReturnValue_Offset;
    
    public static double Divide_DoubleDouble(double a, double b = 1.000000)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Divide_DoubleDouble_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Divide_DoubleDouble_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Divide_DoubleDouble_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Divide_DoubleDouble_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Divide_DoubleDouble_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Divide_ByteByte
    static readonly IntPtr Divide_ByteByte_NativeFunction;
    static readonly int Divide_ByteByte_ParamsSize;
    static readonly int Divide_ByteByte_A_Offset;
    static readonly int Divide_ByteByte_B_Offset;
    static readonly int Divide_ByteByte_ReturnValue_Offset;
    
    public static byte Divide_ByteByte(byte a, byte b = 1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Divide_ByteByte_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, Divide_ByteByte_A_Offset), 0, null, a);
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, Divide_ByteByte_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Divide_ByteByte_NativeFunction, ParamsBuffer);
            
            byte returnValue;
            returnValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, Divide_ByteByte_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:DistanceSquared2D
    static readonly IntPtr DistanceSquared2D_NativeFunction;
    static readonly int DistanceSquared2D_ParamsSize;
    static readonly int DistanceSquared2D_V1_Offset;
    static readonly int DistanceSquared2D_V2_Offset;
    static readonly int DistanceSquared2D_ReturnValue_Offset;
    
    public static double DistanceSquared(System.DoubleNumerics.Vector2 v1, System.DoubleNumerics.Vector2 v2)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DistanceSquared2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DistanceSquared2D_V1_Offset), 0, null, v1);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DistanceSquared2D_V2_Offset), 0, null, v2);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DistanceSquared2D_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, DistanceSquared2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Distance2D
    static readonly IntPtr Distance2D_NativeFunction;
    static readonly int Distance2D_ParamsSize;
    static readonly int Distance2D_V1_Offset;
    static readonly int Distance2D_V2_Offset;
    static readonly int Distance2D_ReturnValue_Offset;
    
    public static double Distance(System.DoubleNumerics.Vector2 v1, System.DoubleNumerics.Vector2 v2)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Distance2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Distance2D_V1_Offset), 0, null, v1);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Distance2D_V2_Offset), 0, null, v2);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Distance2D_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Distance2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:DegTan
    static readonly IntPtr DegTan_NativeFunction;
    static readonly int DegTan_ParamsSize;
    static readonly int DegTan_A_Offset;
    static readonly int DegTan_ReturnValue_Offset;
    
    public static double DegTan(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DegTan_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, DegTan_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DegTan_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, DegTan_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:DegSin
    static readonly IntPtr DegSin_NativeFunction;
    static readonly int DegSin_ParamsSize;
    static readonly int DegSin_A_Offset;
    static readonly int DegSin_ReturnValue_Offset;
    
    public static double DegSin(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DegSin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, DegSin_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DegSin_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, DegSin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:DegreesToRadians
    static readonly IntPtr DegreesToRadians_NativeFunction;
    static readonly int DegreesToRadians_ParamsSize;
    static readonly int DegreesToRadians_A_Offset;
    static readonly int DegreesToRadians_ReturnValue_Offset;
    
    public static double DegreesToRadians(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DegreesToRadians_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, DegreesToRadians_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DegreesToRadians_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, DegreesToRadians_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:DegCos
    static readonly IntPtr DegCos_NativeFunction;
    static readonly int DegCos_ParamsSize;
    static readonly int DegCos_A_Offset;
    static readonly int DegCos_ReturnValue_Offset;
    
    public static double DegCos(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DegCos_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, DegCos_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DegCos_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, DegCos_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:DegAtan2
    static readonly IntPtr DegAtan2_NativeFunction;
    static readonly int DegAtan2_ParamsSize;
    static readonly int DegAtan2_Y_Offset;
    static readonly int DegAtan2_X_Offset;
    static readonly int DegAtan2_ReturnValue_Offset;
    
    public static double DegAtan2(double y, double x)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DegAtan2_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, DegAtan2_Y_Offset), 0, null, y);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, DegAtan2_X_Offset), 0, null, x);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DegAtan2_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, DegAtan2_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:DegAtan
    static readonly IntPtr DegAtan_NativeFunction;
    static readonly int DegAtan_ParamsSize;
    static readonly int DegAtan_A_Offset;
    static readonly int DegAtan_ReturnValue_Offset;
    
    public static double DegAtan(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DegAtan_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, DegAtan_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DegAtan_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, DegAtan_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:DegAsin
    static readonly IntPtr DegAsin_NativeFunction;
    static readonly int DegAsin_ParamsSize;
    static readonly int DegAsin_A_Offset;
    static readonly int DegAsin_ReturnValue_Offset;
    
    public static double DegAsin(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DegAsin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, DegAsin_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DegAsin_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, DegAsin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:DegAcos
    static readonly IntPtr DegAcos_NativeFunction;
    static readonly int DegAcos_ParamsSize;
    static readonly int DegAcos_A_Offset;
    static readonly int DegAcos_ReturnValue_Offset;
    
    public static double DegAcos(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DegAcos_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, DegAcos_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DegAcos_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, DegAcos_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:DaysInYear
    static readonly IntPtr DaysInYear_NativeFunction;
    static readonly int DaysInYear_ParamsSize;
    static readonly int DaysInYear_Year_Offset;
    static readonly int DaysInYear_ReturnValue_Offset;
    
    public static int DaysInYear(int year)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DaysInYear_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, DaysInYear_Year_Offset), 0, null, year);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DaysInYear_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, DaysInYear_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:DaysInMonth
    static readonly IntPtr DaysInMonth_NativeFunction;
    static readonly int DaysInMonth_ParamsSize;
    static readonly int DaysInMonth_Year_Offset;
    static readonly int DaysInMonth_Month_Offset;
    static readonly int DaysInMonth_ReturnValue_Offset;
    
    public static int DaysInMonth(int year, int month)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DaysInMonth_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, DaysInMonth_Year_Offset), 0, null, year);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, DaysInMonth_Month_Offset), 0, null, month);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DaysInMonth_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, DaysInMonth_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:DateTimeMinValue
    static readonly IntPtr DateTimeMinValue_NativeFunction;
    static readonly int DateTimeMinValue_ParamsSize;
    static readonly int DateTimeMinValue_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.DateTime DateTimeMinValue()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DateTimeMinValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DateTimeMinValue_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.DateTime returnValue;
            returnValue = UnrealSharp.CoreUObject.DateTimeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, DateTimeMinValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:DateTimeMaxValue
    static readonly IntPtr DateTimeMaxValue_NativeFunction;
    static readonly int DateTimeMaxValue_ParamsSize;
    static readonly int DateTimeMaxValue_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.DateTime DateTimeMaxValue()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DateTimeMaxValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DateTimeMaxValue_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.DateTime returnValue;
            returnValue = UnrealSharp.CoreUObject.DateTimeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, DateTimeMaxValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:DateTimeFromString
    static readonly IntPtr DateTimeFromString_NativeFunction;
    static readonly int DateTimeFromString_ParamsSize;
    static readonly int DateTimeFromString_DateTimeString_Offset;
    static readonly int DateTimeFromString_Result_Offset;
    static readonly int DateTimeFromString_ReturnValue_Offset;
    
    public static bool DateTimeFromString(string dateTimeString, out UnrealSharp.CoreUObject.DateTime result)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DateTimeFromString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr DateTimeString_NativePtr = IntPtr.Add(ParamsBuffer,DateTimeFromString_DateTimeString_Offset);
            StringMarshaller.ToNative(DateTimeString_NativePtr,0,null,dateTimeString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DateTimeFromString_NativeFunction, ParamsBuffer);
            
            result = UnrealSharp.CoreUObject.DateTimeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, DateTimeFromString_Result_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DateTimeFromString_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(DateTimeString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:DateTimeFromIsoString
    static readonly IntPtr DateTimeFromIsoString_NativeFunction;
    static readonly int DateTimeFromIsoString_ParamsSize;
    static readonly int DateTimeFromIsoString_IsoString_Offset;
    static readonly int DateTimeFromIsoString_Result_Offset;
    static readonly int DateTimeFromIsoString_ReturnValue_Offset;
    
    public static bool DateTimeFromIsoString(string isoString, out UnrealSharp.CoreUObject.DateTime result)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DateTimeFromIsoString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr IsoString_NativePtr = IntPtr.Add(ParamsBuffer,DateTimeFromIsoString_IsoString_Offset);
            StringMarshaller.ToNative(IsoString_NativePtr,0,null,isoString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DateTimeFromIsoString_NativeFunction, ParamsBuffer);
            
            result = UnrealSharp.CoreUObject.DateTimeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, DateTimeFromIsoString_Result_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DateTimeFromIsoString_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(IsoString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:CrossProduct2D
    static readonly IntPtr CrossProduct2D_NativeFunction;
    static readonly int CrossProduct2D_ParamsSize;
    static readonly int CrossProduct2D_A_Offset;
    static readonly int CrossProduct2D_B_Offset;
    static readonly int CrossProduct2D_ReturnValue_Offset;
    
    public static double Cross(System.DoubleNumerics.Vector2 a, System.DoubleNumerics.Vector2 b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CrossProduct2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, CrossProduct2D_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, CrossProduct2D_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CrossProduct2D_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, CrossProduct2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Cross_VectorVector
    static readonly IntPtr Cross_VectorVector_NativeFunction;
    static readonly int Cross_VectorVector_ParamsSize;
    static readonly int Cross_VectorVector_A_Offset;
    static readonly int Cross_VectorVector_B_Offset;
    static readonly int Cross_VectorVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Cross(System.DoubleNumerics.Vector3 a, System.DoubleNumerics.Vector3 b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Cross_VectorVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Cross_VectorVector_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Cross_VectorVector_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Cross_VectorVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Cross_VectorVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:CreateVectorFromYawPitch
    static readonly IntPtr CreateVectorFromYawPitch_NativeFunction;
    static readonly int CreateVectorFromYawPitch_ParamsSize;
    static readonly int CreateVectorFromYawPitch_Yaw_Offset;
    static readonly int CreateVectorFromYawPitch_Pitch_Offset;
    static readonly int CreateVectorFromYawPitch_Length_Offset;
    static readonly int CreateVectorFromYawPitch_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 CreateVectorFromYawPitch(float yaw, float pitch, float length = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateVectorFromYawPitch_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CreateVectorFromYawPitch_Yaw_Offset), 0, null, yaw);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CreateVectorFromYawPitch_Pitch_Offset), 0, null, pitch);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CreateVectorFromYawPitch_Length_Offset), 0, null, length);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateVectorFromYawPitch_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, CreateVectorFromYawPitch_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Cos
    static readonly IntPtr Cos_NativeFunction;
    static readonly int Cos_ParamsSize;
    static readonly int Cos_A_Offset;
    static readonly int Cos_ReturnValue_Offset;
    
    public static double Cos(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Cos_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Cos_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Cos_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Cos_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_VectorToVector2D
    static readonly IntPtr Conv_VectorToVector2D_NativeFunction;
    static readonly int Conv_VectorToVector2D_ParamsSize;
    static readonly int Conv_VectorToVector2D_InVector_Offset;
    static readonly int Conv_VectorToVector2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 Vector2D(System.DoubleNumerics.Vector3 inVector)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_VectorToVector2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Conv_VectorToVector2D_InVector_Offset), 0, null, inVector);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_VectorToVector2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Conv_VectorToVector2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_VectorToTransform
    static readonly IntPtr Conv_VectorToTransform_NativeFunction;
    static readonly int Conv_VectorToTransform_ParamsSize;
    static readonly int Conv_VectorToTransform_InLocation_Offset;
    static readonly int Conv_VectorToTransform_ReturnValue_Offset;
    
    public static UnrealSharp.Transform Transform(System.DoubleNumerics.Vector3 inLocation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_VectorToTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Conv_VectorToTransform_InLocation_Offset), 0, null, inLocation);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_VectorToTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, Conv_VectorToTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_VectorToRotator
    static readonly IntPtr Conv_VectorToRotator_NativeFunction;
    static readonly int Conv_VectorToRotator_ParamsSize;
    static readonly int Conv_VectorToRotator_InVec_Offset;
    static readonly int Conv_VectorToRotator_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator Rotator(System.DoubleNumerics.Vector3 inVec)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_VectorToRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Conv_VectorToRotator_InVec_Offset), 0, null, inVec);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_VectorToRotator_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, Conv_VectorToRotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_VectorToQuaternion
    static readonly IntPtr Conv_VectorToQuaternion_NativeFunction;
    static readonly int Conv_VectorToQuaternion_ParamsSize;
    static readonly int Conv_VectorToQuaternion_InVec_Offset;
    static readonly int Conv_VectorToQuaternion_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Quaternion Quaternion(System.DoubleNumerics.Vector3 inVec)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_VectorToQuaternion_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Conv_VectorToQuaternion_InVec_Offset), 0, null, inVec);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_VectorToQuaternion_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Quaternion returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, Conv_VectorToQuaternion_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_VectorToLinearColor
    static readonly IntPtr Conv_VectorToLinearColor_NativeFunction;
    static readonly int Conv_VectorToLinearColor_ParamsSize;
    static readonly int Conv_VectorToLinearColor_InVec_Offset;
    static readonly int Conv_VectorToLinearColor_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor LinearColor(System.DoubleNumerics.Vector3 inVec)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_VectorToLinearColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Conv_VectorToLinearColor_InVec_Offset), 0, null, inVec);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_VectorToLinearColor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, Conv_VectorToLinearColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_Vector4ToVector
    static readonly IntPtr Conv_Vector4ToVector_NativeFunction;
    static readonly int Conv_Vector4ToVector_ParamsSize;
    static readonly int Conv_Vector4ToVector_InVector4_Offset;
    static readonly int Conv_Vector4ToVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Vector(System.DoubleNumerics.Vector4 inVector4)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_Vector4ToVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector4>.ToNative(IntPtr.Add(ParamsBuffer, Conv_Vector4ToVector_InVector4_Offset), 0, null, inVector4);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_Vector4ToVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Conv_Vector4ToVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_Vector4ToRotator
    static readonly IntPtr Conv_Vector4ToRotator_NativeFunction;
    static readonly int Conv_Vector4ToRotator_ParamsSize;
    static readonly int Conv_Vector4ToRotator_InVec_Offset;
    static readonly int Conv_Vector4ToRotator_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator Rotator(System.DoubleNumerics.Vector4 inVec)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_Vector4ToRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector4>.ToNative(IntPtr.Add(ParamsBuffer, Conv_Vector4ToRotator_InVec_Offset), 0, null, inVec);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_Vector4ToRotator_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, Conv_Vector4ToRotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_Vector4ToQuaternion
    static readonly IntPtr Conv_Vector4ToQuaternion_NativeFunction;
    static readonly int Conv_Vector4ToQuaternion_ParamsSize;
    static readonly int Conv_Vector4ToQuaternion_InVec_Offset;
    static readonly int Conv_Vector4ToQuaternion_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Quaternion Quaternion(System.DoubleNumerics.Vector4 inVec)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_Vector4ToQuaternion_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector4>.ToNative(IntPtr.Add(ParamsBuffer, Conv_Vector4ToQuaternion_InVec_Offset), 0, null, inVec);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_Vector4ToQuaternion_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Quaternion returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, Conv_Vector4ToQuaternion_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_Vector2DToVector
    static readonly IntPtr Conv_Vector2DToVector_NativeFunction;
    static readonly int Conv_Vector2DToVector_ParamsSize;
    static readonly int Conv_Vector2DToVector_InVector2D_Offset;
    static readonly int Conv_Vector2DToVector_Z_Offset;
    static readonly int Conv_Vector2DToVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Vector(System.DoubleNumerics.Vector2 inVector2D, float z = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_Vector2DToVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Conv_Vector2DToVector_InVector2D_Offset), 0, null, inVector2D);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Conv_Vector2DToVector_Z_Offset), 0, null, z);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_Vector2DToVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Conv_Vector2DToVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_Vector2DToIntPoint
    static readonly IntPtr Conv_Vector2DToIntPoint_NativeFunction;
    static readonly int Conv_Vector2DToIntPoint_ParamsSize;
    static readonly int Conv_Vector2DToIntPoint_InVector2D_Offset;
    static readonly int Conv_Vector2DToIntPoint_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.IntPoint IntPoint(System.DoubleNumerics.Vector2 inVector2D)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_Vector2DToIntPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Conv_Vector2DToIntPoint_InVector2D_Offset), 0, null, inVector2D);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_Vector2DToIntPoint_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.IntPoint returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative(IntPtr.Add(ParamsBuffer, Conv_Vector2DToIntPoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_TransformToMatrix
    static readonly IntPtr Conv_TransformToMatrix_NativeFunction;
    static readonly int Conv_TransformToMatrix_ParamsSize;
    static readonly int Conv_TransformToMatrix_Transform_Offset;
    static readonly int Conv_TransformToMatrix_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Matrix4x4 ToMatrix(UnrealSharp.Transform transform)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_TransformToMatrix_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, Conv_TransformToMatrix_Transform_Offset), 0, null, transform);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_TransformToMatrix_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Matrix4x4 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, Conv_TransformToMatrix_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_RotatorToVector
    static readonly IntPtr Conv_RotatorToVector_NativeFunction;
    static readonly int Conv_RotatorToVector_ParamsSize;
    static readonly int Conv_RotatorToVector_InRot_Offset;
    static readonly int Conv_RotatorToVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 ToVector(UnrealSharp.Rotator inRot)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_RotatorToVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, Conv_RotatorToVector_InRot_Offset), 0, null, inRot);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_RotatorToVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Conv_RotatorToVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_RotatorToTransform
    static readonly IntPtr Conv_RotatorToTransform_NativeFunction;
    static readonly int Conv_RotatorToTransform_ParamsSize;
    static readonly int Conv_RotatorToTransform_InRotator_Offset;
    static readonly int Conv_RotatorToTransform_ReturnValue_Offset;
    
    public static UnrealSharp.Transform Transform(UnrealSharp.Rotator inRotator)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_RotatorToTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, Conv_RotatorToTransform_InRotator_Offset), 0, null, inRotator);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_RotatorToTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, Conv_RotatorToTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_RotatorToQuaternion
    static readonly IntPtr Conv_RotatorToQuaternion_NativeFunction;
    static readonly int Conv_RotatorToQuaternion_ParamsSize;
    static readonly int Conv_RotatorToQuaternion_InRot_Offset;
    static readonly int Conv_RotatorToQuaternion_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Quaternion Quaternion(UnrealSharp.Rotator inRot)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_RotatorToQuaternion_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, Conv_RotatorToQuaternion_InRot_Offset), 0, null, inRot);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_RotatorToQuaternion_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Quaternion returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, Conv_RotatorToQuaternion_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_MatrixToTransform
    static readonly IntPtr Conv_MatrixToTransform_NativeFunction;
    static readonly int Conv_MatrixToTransform_ParamsSize;
    static readonly int Conv_MatrixToTransform_InMatrix_Offset;
    static readonly int Conv_MatrixToTransform_ReturnValue_Offset;
    
    public static UnrealSharp.Transform Transform(System.DoubleNumerics.Matrix4x4 inMatrix)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_MatrixToTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Conv_MatrixToTransform_InMatrix_Offset), 0, null, inMatrix);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_MatrixToTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, Conv_MatrixToTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_MatrixToRotator
    static readonly IntPtr Conv_MatrixToRotator_NativeFunction;
    static readonly int Conv_MatrixToRotator_ParamsSize;
    static readonly int Conv_MatrixToRotator_InMatrix_Offset;
    static readonly int Conv_MatrixToRotator_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator Rotator(System.DoubleNumerics.Matrix4x4 inMatrix)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_MatrixToRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Conv_MatrixToRotator_InMatrix_Offset), 0, null, inMatrix);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_MatrixToRotator_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, Conv_MatrixToRotator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_LinearColorToVector
    static readonly IntPtr Conv_LinearColorToVector_NativeFunction;
    static readonly int Conv_LinearColorToVector_ParamsSize;
    static readonly int Conv_LinearColorToVector_InLinearColor_Offset;
    static readonly int Conv_LinearColorToVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 ToRGBVector(UnrealSharp.CoreUObject.LinearColor inLinearColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_LinearColorToVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, Conv_LinearColorToVector_InLinearColor_Offset), 0, null, inLinearColor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_LinearColorToVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Conv_LinearColorToVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_LinearColorToColor
    static readonly IntPtr Conv_LinearColorToColor_NativeFunction;
    static readonly int Conv_LinearColorToColor_ParamsSize;
    static readonly int Conv_LinearColorToColor_InLinearColor_Offset;
    static readonly int Conv_LinearColorToColor_InUseSRGB_Offset;
    static readonly int Conv_LinearColorToColor_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Color ToColor(UnrealSharp.CoreUObject.LinearColor inLinearColor, bool inUseSRGB = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_LinearColorToColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, Conv_LinearColorToColor_InLinearColor_Offset), 0, null, inLinearColor);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, Conv_LinearColorToColor_InUseSRGB_Offset), 0, null, inUseSRGB);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_LinearColorToColor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Color returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(ParamsBuffer, Conv_LinearColorToColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_IntVectorToVector
    static readonly IntPtr Conv_IntVectorToVector_NativeFunction;
    static readonly int Conv_IntVectorToVector_ParamsSize;
    static readonly int Conv_IntVectorToVector_InIntVector_Offset;
    static readonly int Conv_IntVectorToVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Conv_IntVectorToVector(UnrealSharp.CoreUObject.IntVector inIntVector)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_IntVectorToVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.IntVector>.ToNative(IntPtr.Add(ParamsBuffer, Conv_IntVectorToVector_InIntVector_Offset), 0, null, inIntVector);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_IntVectorToVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Conv_IntVectorToVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_IntToVector
    static readonly IntPtr Conv_IntToVector_NativeFunction;
    static readonly int Conv_IntToVector_ParamsSize;
    static readonly int Conv_IntToVector_InInt_Offset;
    static readonly int Conv_IntToVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Conv_IntToVector(int inInt)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_IntToVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Conv_IntToVector_InInt_Offset), 0, null, inInt);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_IntToVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Conv_IntToVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_IntToIntVector
    static readonly IntPtr Conv_IntToIntVector_NativeFunction;
    static readonly int Conv_IntToIntVector_ParamsSize;
    static readonly int Conv_IntToIntVector_InInt_Offset;
    static readonly int Conv_IntToIntVector_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.IntVector Conv_IntToIntVector(int inInt)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_IntToIntVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Conv_IntToIntVector_InInt_Offset), 0, null, inInt);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_IntToIntVector_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.IntVector returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.IntVector>.FromNative(IntPtr.Add(ParamsBuffer, Conv_IntToIntVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_IntToInt64
    static readonly IntPtr Conv_IntToInt64_NativeFunction;
    static readonly int Conv_IntToInt64_ParamsSize;
    static readonly int Conv_IntToInt64_InInt_Offset;
    static readonly int Conv_IntToInt64_ReturnValue_Offset;
    
    public static long Conv_IntToInt64(int inInt)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_IntToInt64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Conv_IntToInt64_InInt_Offset), 0, null, inInt);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_IntToInt64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, Conv_IntToInt64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_IntToDouble
    static readonly IntPtr Conv_IntToDouble_NativeFunction;
    static readonly int Conv_IntToDouble_ParamsSize;
    static readonly int Conv_IntToDouble_InInt_Offset;
    static readonly int Conv_IntToDouble_ReturnValue_Offset;
    
    public static double Conv_IntToDouble(int inInt)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_IntToDouble_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Conv_IntToDouble_InInt_Offset), 0, null, inInt);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_IntToDouble_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Conv_IntToDouble_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_IntToByte
    static readonly IntPtr Conv_IntToByte_NativeFunction;
    static readonly int Conv_IntToByte_ParamsSize;
    static readonly int Conv_IntToByte_InInt_Offset;
    static readonly int Conv_IntToByte_ReturnValue_Offset;
    
    public static byte Conv_IntToByte(int inInt)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_IntToByte_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Conv_IntToByte_InInt_Offset), 0, null, inInt);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_IntToByte_NativeFunction, ParamsBuffer);
            
            byte returnValue;
            returnValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, Conv_IntToByte_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_IntToBool
    static readonly IntPtr Conv_IntToBool_NativeFunction;
    static readonly int Conv_IntToBool_ParamsSize;
    static readonly int Conv_IntToBool_InInt_Offset;
    static readonly int Conv_IntToBool_ReturnValue_Offset;
    
    public static bool Conv_IntToBool(int inInt)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_IntToBool_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Conv_IntToBool_InInt_Offset), 0, null, inInt);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_IntToBool_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Conv_IntToBool_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_IntPointToVector2D
    static readonly IntPtr Conv_IntPointToVector2D_NativeFunction;
    static readonly int Conv_IntPointToVector2D_ParamsSize;
    static readonly int Conv_IntPointToVector2D_InIntPoint_Offset;
    static readonly int Conv_IntPointToVector2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 Vector2D(UnrealSharp.CoreUObject.IntPoint inIntPoint)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_IntPointToVector2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(ParamsBuffer, Conv_IntPointToVector2D_InIntPoint_Offset), 0, null, inIntPoint);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_IntPointToVector2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Conv_IntPointToVector2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_Int64ToInt
    static readonly IntPtr Conv_Int64ToInt_NativeFunction;
    static readonly int Conv_Int64ToInt_ParamsSize;
    static readonly int Conv_Int64ToInt_InInt_Offset;
    static readonly int Conv_Int64ToInt_ReturnValue_Offset;
    
    public static int Conv_Int64ToInt(long inInt)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_Int64ToInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Conv_Int64ToInt_InInt_Offset), 0, null, inInt);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_Int64ToInt_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Conv_Int64ToInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_Int64ToDouble
    static readonly IntPtr Conv_Int64ToDouble_NativeFunction;
    static readonly int Conv_Int64ToDouble_ParamsSize;
    static readonly int Conv_Int64ToDouble_InInt_Offset;
    static readonly int Conv_Int64ToDouble_ReturnValue_Offset;
    
    public static double Conv_Int64ToDouble(long inInt)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_Int64ToDouble_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Conv_Int64ToDouble_InInt_Offset), 0, null, inInt);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_Int64ToDouble_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Conv_Int64ToDouble_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_Int64ToByte
    static readonly IntPtr Conv_Int64ToByte_NativeFunction;
    static readonly int Conv_Int64ToByte_ParamsSize;
    static readonly int Conv_Int64ToByte_InInt_Offset;
    static readonly int Conv_Int64ToByte_ReturnValue_Offset;
    
    public static byte Conv_Int64ToByte(long inInt)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_Int64ToByte_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Conv_Int64ToByte_InInt_Offset), 0, null, inInt);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_Int64ToByte_NativeFunction, ParamsBuffer);
            
            byte returnValue;
            returnValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, Conv_Int64ToByte_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_DoubleToVector2D
    static readonly IntPtr Conv_DoubleToVector2D_NativeFunction;
    static readonly int Conv_DoubleToVector2D_ParamsSize;
    static readonly int Conv_DoubleToVector2D_InDouble_Offset;
    static readonly int Conv_DoubleToVector2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 Conv_DoubleToVector2D(double inDouble)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_DoubleToVector2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Conv_DoubleToVector2D_InDouble_Offset), 0, null, inDouble);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_DoubleToVector2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Conv_DoubleToVector2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_DoubleToVector
    static readonly IntPtr Conv_DoubleToVector_NativeFunction;
    static readonly int Conv_DoubleToVector_ParamsSize;
    static readonly int Conv_DoubleToVector_InDouble_Offset;
    static readonly int Conv_DoubleToVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Conv_DoubleToVector(double inDouble)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_DoubleToVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Conv_DoubleToVector_InDouble_Offset), 0, null, inDouble);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_DoubleToVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Conv_DoubleToVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_DoubleToLinearColor
    static readonly IntPtr Conv_DoubleToLinearColor_NativeFunction;
    static readonly int Conv_DoubleToLinearColor_ParamsSize;
    static readonly int Conv_DoubleToLinearColor_InDouble_Offset;
    static readonly int Conv_DoubleToLinearColor_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor Conv_DoubleToLinearColor(double inDouble)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_DoubleToLinearColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Conv_DoubleToLinearColor_InDouble_Offset), 0, null, inDouble);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_DoubleToLinearColor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, Conv_DoubleToLinearColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_DoubleToInt64
    static readonly IntPtr Conv_DoubleToInt64_NativeFunction;
    static readonly int Conv_DoubleToInt64_ParamsSize;
    static readonly int Conv_DoubleToInt64_InDouble_Offset;
    static readonly int Conv_DoubleToInt64_ReturnValue_Offset;
    
    public static long Conv_DoubleToInt64(double inDouble)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_DoubleToInt64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Conv_DoubleToInt64_InDouble_Offset), 0, null, inDouble);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_DoubleToInt64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, Conv_DoubleToInt64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_ColorToLinearColor
    static readonly IntPtr Conv_ColorToLinearColor_NativeFunction;
    static readonly int Conv_ColorToLinearColor_ParamsSize;
    static readonly int Conv_ColorToLinearColor_InColor_Offset;
    static readonly int Conv_ColorToLinearColor_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor Conv_ColorToLinearColor(UnrealSharp.CoreUObject.Color inColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_ColorToLinearColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(ParamsBuffer, Conv_ColorToLinearColor_InColor_Offset), 0, null, inColor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_ColorToLinearColor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, Conv_ColorToLinearColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_ByteToInt64
    static readonly IntPtr Conv_ByteToInt64_NativeFunction;
    static readonly int Conv_ByteToInt64_ParamsSize;
    static readonly int Conv_ByteToInt64_InByte_Offset;
    static readonly int Conv_ByteToInt64_ReturnValue_Offset;
    
    public static long Conv_ByteToInt64(byte inByte)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_ByteToInt64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, Conv_ByteToInt64_InByte_Offset), 0, null, inByte);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_ByteToInt64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, Conv_ByteToInt64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_ByteToInt
    static readonly IntPtr Conv_ByteToInt_NativeFunction;
    static readonly int Conv_ByteToInt_ParamsSize;
    static readonly int Conv_ByteToInt_InByte_Offset;
    static readonly int Conv_ByteToInt_ReturnValue_Offset;
    
    public static int Conv_ByteToInt(byte inByte)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_ByteToInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, Conv_ByteToInt_InByte_Offset), 0, null, inByte);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_ByteToInt_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Conv_ByteToInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_ByteToDouble
    static readonly IntPtr Conv_ByteToDouble_NativeFunction;
    static readonly int Conv_ByteToDouble_ParamsSize;
    static readonly int Conv_ByteToDouble_InByte_Offset;
    static readonly int Conv_ByteToDouble_ReturnValue_Offset;
    
    public static double Conv_ByteToDouble(byte inByte)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_ByteToDouble_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, Conv_ByteToDouble_InByte_Offset), 0, null, inByte);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_ByteToDouble_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Conv_ByteToDouble_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_BoolToInt
    static readonly IntPtr Conv_BoolToInt_NativeFunction;
    static readonly int Conv_BoolToInt_ParamsSize;
    static readonly int Conv_BoolToInt_InBool_Offset;
    static readonly int Conv_BoolToInt_ReturnValue_Offset;
    
    public static int Conv_BoolToInt(bool inBool)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_BoolToInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, Conv_BoolToInt_InBool_Offset), 0, null, inBool);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_BoolToInt_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Conv_BoolToInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_BoolToDouble
    static readonly IntPtr Conv_BoolToDouble_NativeFunction;
    static readonly int Conv_BoolToDouble_ParamsSize;
    static readonly int Conv_BoolToDouble_InBool_Offset;
    static readonly int Conv_BoolToDouble_ReturnValue_Offset;
    
    public static double Conv_BoolToDouble(bool inBool)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_BoolToDouble_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, Conv_BoolToDouble_InBool_Offset), 0, null, inBool);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_BoolToDouble_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Conv_BoolToDouble_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Conv_BoolToByte
    static readonly IntPtr Conv_BoolToByte_NativeFunction;
    static readonly int Conv_BoolToByte_ParamsSize;
    static readonly int Conv_BoolToByte_InBool_Offset;
    static readonly int Conv_BoolToByte_ReturnValue_Offset;
    
    public static byte Conv_BoolToByte(bool inBool)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_BoolToByte_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, Conv_BoolToByte_InBool_Offset), 0, null, inBool);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_BoolToByte_NativeFunction, ParamsBuffer);
            
            byte returnValue;
            returnValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, Conv_BoolToByte_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:ComposeTransforms
    static readonly IntPtr ComposeTransforms_NativeFunction;
    static readonly int ComposeTransforms_ParamsSize;
    static readonly int ComposeTransforms_A_Offset;
    static readonly int ComposeTransforms_B_Offset;
    static readonly int ComposeTransforms_ReturnValue_Offset;
    
    public static UnrealSharp.Transform Multiply(UnrealSharp.Transform a, UnrealSharp.Transform b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ComposeTransforms_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, ComposeTransforms_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, ComposeTransforms_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ComposeTransforms_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, ComposeTransforms_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:ComposeRotators
    static readonly IntPtr ComposeRotators_NativeFunction;
    static readonly int ComposeRotators_ParamsSize;
    static readonly int ComposeRotators_A_Offset;
    static readonly int ComposeRotators_B_Offset;
    static readonly int ComposeRotators_ReturnValue_Offset;
    
    public static UnrealSharp.Rotator Combine(UnrealSharp.Rotator a, UnrealSharp.Rotator b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ComposeRotators_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, ComposeRotators_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, ComposeRotators_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ComposeRotators_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, ComposeRotators_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:ClassIsChildOf
    static readonly IntPtr ClassIsChildOf_NativeFunction;
    static readonly int ClassIsChildOf_ParamsSize;
    static readonly int ClassIsChildOf_TestClass_Offset;
    static readonly int ClassIsChildOf_ParentClass_Offset;
    static readonly int ClassIsChildOf_ReturnValue_Offset;
    
    public static bool ClassIsChildOf(SubclassOf<UnrealSharp.CoreUObject.Object> testClass, SubclassOf<UnrealSharp.CoreUObject.Object> parentClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClassIsChildOf_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ClassIsChildOf_TestClass_Offset), 0, null, testClass);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ClassIsChildOf_ParentClass_Offset), 0, null, parentClass);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ClassIsChildOf_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ClassIsChildOf_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:ClampVectorSize
    static readonly IntPtr ClampVectorSize_NativeFunction;
    static readonly int ClampVectorSize_ParamsSize;
    static readonly int ClampVectorSize_A_Offset;
    static readonly int ClampVectorSize_Min_Offset;
    static readonly int ClampVectorSize_Max_Offset;
    static readonly int ClampVectorSize_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 ClampedSize(System.DoubleNumerics.Vector3 a, double min, double max)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClampVectorSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ClampVectorSize_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, ClampVectorSize_Min_Offset), 0, null, min);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, ClampVectorSize_Max_Offset), 0, null, max);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ClampVectorSize_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, ClampVectorSize_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:ClampInt64
    static readonly IntPtr ClampInt64_NativeFunction;
    static readonly int ClampInt64_ParamsSize;
    static readonly int ClampInt64_Value_Offset;
    static readonly int ClampInt64_Min_Offset;
    static readonly int ClampInt64_Max_Offset;
    static readonly int ClampInt64_ReturnValue_Offset;
    
    public static long ClampInt64(long value, long min, long max)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClampInt64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, ClampInt64_Value_Offset), 0, null, value);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, ClampInt64_Min_Offset), 0, null, min);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, ClampInt64_Max_Offset), 0, null, max);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ClampInt64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, ClampInt64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:ClampAxis
    static readonly IntPtr ClampAxis_NativeFunction;
    static readonly int ClampAxis_ParamsSize;
    static readonly int ClampAxis_Angle_Offset;
    static readonly int ClampAxis_ReturnValue_Offset;
    
    public static float ClampAxis(float angle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClampAxis_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ClampAxis_Angle_Offset), 0, null, angle);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ClampAxis_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, ClampAxis_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:ClampAxes2D
    static readonly IntPtr ClampAxes2D_NativeFunction;
    static readonly int ClampAxes2D_ParamsSize;
    static readonly int ClampAxes2D_A_Offset;
    static readonly int ClampAxes2D_MinAxisVal_Offset;
    static readonly int ClampAxes2D_MaxAxisVal_Offset;
    static readonly int ClampAxes2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 ClampedAxes(System.DoubleNumerics.Vector2 a, double minAxisVal, double maxAxisVal)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClampAxes2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, ClampAxes2D_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, ClampAxes2D_MinAxisVal_Offset), 0, null, minAxisVal);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, ClampAxes2D_MaxAxisVal_Offset), 0, null, maxAxisVal);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ClampAxes2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, ClampAxes2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:ClampAngle
    static readonly IntPtr ClampAngle_NativeFunction;
    static readonly int ClampAngle_ParamsSize;
    static readonly int ClampAngle_AngleDegrees_Offset;
    static readonly int ClampAngle_MinAngleDegrees_Offset;
    static readonly int ClampAngle_MaxAngleDegrees_Offset;
    static readonly int ClampAngle_ReturnValue_Offset;
    
    public static double ClampAngle(double angleDegrees, double minAngleDegrees, double maxAngleDegrees)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClampAngle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, ClampAngle_AngleDegrees_Offset), 0, null, angleDegrees);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, ClampAngle_MinAngleDegrees_Offset), 0, null, minAngleDegrees);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, ClampAngle_MaxAngleDegrees_Offset), 0, null, maxAngleDegrees);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ClampAngle_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, ClampAngle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Clamp
    static readonly IntPtr Clamp_NativeFunction;
    static readonly int Clamp_ParamsSize;
    static readonly int Clamp_Value_Offset;
    static readonly int Clamp_Min_Offset;
    static readonly int Clamp_Max_Offset;
    static readonly int Clamp_ReturnValue_Offset;
    
    public static int Clamp(int value, int min, int max)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Clamp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Clamp_Value_Offset), 0, null, value);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Clamp_Min_Offset), 0, null, min);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Clamp_Max_Offset), 0, null, max);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Clamp_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Clamp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:CInterpTo
    static readonly IntPtr CInterpTo_NativeFunction;
    static readonly int CInterpTo_ParamsSize;
    static readonly int CInterpTo_Current_Offset;
    static readonly int CInterpTo_Target_Offset;
    static readonly int CInterpTo_DeltaTime_Offset;
    static readonly int CInterpTo_InterpSpeed_Offset;
    static readonly int CInterpTo_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor InterpolateTo(UnrealSharp.CoreUObject.LinearColor current, UnrealSharp.CoreUObject.LinearColor target, float deltaTime, float interpSpeed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CInterpTo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, CInterpTo_Current_Offset), 0, null, current);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, CInterpTo_Target_Offset), 0, null, target);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CInterpTo_DeltaTime_Offset), 0, null, deltaTime);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CInterpTo_InterpSpeed_Offset), 0, null, interpSpeed);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CInterpTo_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, CInterpTo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:BreakRotIntoAxes
    static readonly IntPtr BreakRotIntoAxes_NativeFunction;
    static readonly int BreakRotIntoAxes_ParamsSize;
    static readonly int BreakRotIntoAxes_InRot_Offset;
    static readonly int BreakRotIntoAxes_X_Offset;
    static readonly int BreakRotIntoAxes_Y_Offset;
    static readonly int BreakRotIntoAxes_Z_Offset;
    
    public static void BreakRotIntoAxes(UnrealSharp.Rotator inRot, out System.DoubleNumerics.Vector3 x, out System.DoubleNumerics.Vector3 y, out System.DoubleNumerics.Vector3 z)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BreakRotIntoAxes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, BreakRotIntoAxes_InRot_Offset), 0, null, inRot);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BreakRotIntoAxes_NativeFunction, ParamsBuffer);
            
            x = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, BreakRotIntoAxes_X_Offset), 0, null);
            y = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, BreakRotIntoAxes_Y_Offset), 0, null);
            z = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, BreakRotIntoAxes_Z_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:BreakColor
    static readonly IntPtr BreakColor_NativeFunction;
    static readonly int BreakColor_ParamsSize;
    static readonly int BreakColor_InColor_Offset;
    static readonly int BreakColor_R_Offset;
    static readonly int BreakColor_G_Offset;
    static readonly int BreakColor_B_Offset;
    static readonly int BreakColor_A_Offset;
    
    public static void BreakColor(UnrealSharp.CoreUObject.LinearColor inColor, out float r, out float g, out float b, out float a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BreakColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, BreakColor_InColor_Offset), 0, null, inColor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BreakColor_NativeFunction, ParamsBuffer);
            
            r = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, BreakColor_R_Offset), 0, null);
            g = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, BreakColor_G_Offset), 0, null);
            b = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, BreakColor_B_Offset), 0, null);
            a = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, BreakColor_A_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:BooleanXOR
    static readonly IntPtr BooleanXOR_NativeFunction;
    static readonly int BooleanXOR_ParamsSize;
    static readonly int BooleanXOR_A_Offset;
    static readonly int BooleanXOR_B_Offset;
    static readonly int BooleanXOR_ReturnValue_Offset;
    
    public static bool BooleanXOR(bool a, bool b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BooleanXOR_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BooleanXOR_A_Offset), 0, null, a);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BooleanXOR_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BooleanXOR_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BooleanXOR_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:BooleanOR
    static readonly IntPtr BooleanOR_NativeFunction;
    static readonly int BooleanOR_ParamsSize;
    static readonly int BooleanOR_A_Offset;
    static readonly int BooleanOR_B_Offset;
    static readonly int BooleanOR_ReturnValue_Offset;
    
    public static bool BooleanOR(bool a, bool b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BooleanOR_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BooleanOR_A_Offset), 0, null, a);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BooleanOR_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BooleanOR_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BooleanOR_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:BooleanNOR
    static readonly IntPtr BooleanNOR_NativeFunction;
    static readonly int BooleanNOR_ParamsSize;
    static readonly int BooleanNOR_A_Offset;
    static readonly int BooleanNOR_B_Offset;
    static readonly int BooleanNOR_ReturnValue_Offset;
    
    public static bool BooleanNOR(bool a, bool b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BooleanNOR_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BooleanNOR_A_Offset), 0, null, a);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BooleanNOR_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BooleanNOR_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BooleanNOR_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:BooleanNAND
    static readonly IntPtr BooleanNAND_NativeFunction;
    static readonly int BooleanNAND_ParamsSize;
    static readonly int BooleanNAND_A_Offset;
    static readonly int BooleanNAND_B_Offset;
    static readonly int BooleanNAND_ReturnValue_Offset;
    
    public static bool BooleanNAND(bool a, bool b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BooleanNAND_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BooleanNAND_A_Offset), 0, null, a);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BooleanNAND_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BooleanNAND_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BooleanNAND_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:BooleanAND
    static readonly IntPtr BooleanAND_NativeFunction;
    static readonly int BooleanAND_ParamsSize;
    static readonly int BooleanAND_A_Offset;
    static readonly int BooleanAND_B_Offset;
    static readonly int BooleanAND_ReturnValue_Offset;
    
    public static bool BooleanAND(bool a, bool b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BooleanAND_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BooleanAND_A_Offset), 0, null, a);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BooleanAND_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BooleanAND_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BooleanAND_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:BMin
    static readonly IntPtr BMin_NativeFunction;
    static readonly int BMin_ParamsSize;
    static readonly int BMin_A_Offset;
    static readonly int BMin_B_Offset;
    static readonly int BMin_ReturnValue_Offset;
    
    public static byte BMin(byte a, byte b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BMin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, BMin_A_Offset), 0, null, a);
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, BMin_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BMin_NativeFunction, ParamsBuffer);
            
            byte returnValue;
            returnValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, BMin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:BMax
    static readonly IntPtr BMax_NativeFunction;
    static readonly int BMax_ParamsSize;
    static readonly int BMax_A_Offset;
    static readonly int BMax_B_Offset;
    static readonly int BMax_ReturnValue_Offset;
    
    public static byte BMax(byte a, byte b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BMax_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, BMax_A_Offset), 0, null, a);
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, BMax_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BMax_NativeFunction, ParamsBuffer);
            
            byte returnValue;
            returnValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, BMax_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:AverageOfIntArray
    static readonly IntPtr AverageOfIntArray_NativeFunction;
    static readonly int AverageOfIntArray_ParamsSize;
    static readonly int AverageOfIntArray_IntArray_Offset;
    static readonly int AverageOfIntArray_IntArray_ElementSize;
    static readonly int AverageOfIntArray_AverageValue_Offset;
    
    public static void AverageOfIntArray(System.Collections.Generic.IList<int> intArray, out float averageValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AverageOfIntArray_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr IntArray_NativeBuffer = IntPtr.Add(ParamsBuffer, AverageOfIntArray_IntArray_Offset);
            UnrealArrayCopyMarshaler<int> IntArray_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, AverageOfIntArray_IntArray_ElementSize);
            IntArray_Marshaler.ToNative(IntArray_NativeBuffer, 0, null, intArray);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AverageOfIntArray_NativeFunction, ParamsBuffer);
            
            averageValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, AverageOfIntArray_AverageValue_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Atan2
    static readonly IntPtr Atan2_NativeFunction;
    static readonly int Atan2_ParamsSize;
    static readonly int Atan2_Y_Offset;
    static readonly int Atan2_X_Offset;
    static readonly int Atan2_ReturnValue_Offset;
    
    public static double Atan2(double y, double x)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Atan2_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Atan2_Y_Offset), 0, null, y);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Atan2_X_Offset), 0, null, x);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Atan2_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Atan2_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Atan
    static readonly IntPtr Atan_NativeFunction;
    static readonly int Atan_ParamsSize;
    static readonly int Atan_A_Offset;
    static readonly int Atan_ReturnValue_Offset;
    
    public static double Atan(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Atan_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Atan_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Atan_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Atan_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Asin
    static readonly IntPtr Asin_NativeFunction;
    static readonly int Asin_ParamsSize;
    static readonly int Asin_A_Offset;
    static readonly int Asin_ReturnValue_Offset;
    
    public static double Asin(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Asin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Asin_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Asin_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Asin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:And_IntInt
    static readonly IntPtr And_IntInt_NativeFunction;
    static readonly int And_IntInt_ParamsSize;
    static readonly int And_IntInt_A_Offset;
    static readonly int And_IntInt_B_Offset;
    static readonly int And_IntInt_ReturnValue_Offset;
    
    public static int And_IntInt(int a, int b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[And_IntInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, And_IntInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, And_IntInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, And_IntInt_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, And_IntInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:And_Int64Int64
    static readonly IntPtr And_Int64Int64_NativeFunction;
    static readonly int And_Int64Int64_ParamsSize;
    static readonly int And_Int64Int64_A_Offset;
    static readonly int And_Int64Int64_B_Offset;
    static readonly int And_Int64Int64_ReturnValue_Offset;
    
    public static long And_Int64Int64(long a, long b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[And_Int64Int64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, And_Int64Int64_A_Offset), 0, null, a);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, And_Int64Int64_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, And_Int64Int64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, And_Int64Int64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Add_VectorVector
    static readonly IntPtr Add_VectorVector_NativeFunction;
    static readonly int Add_VectorVector_ParamsSize;
    static readonly int Add_VectorVector_A_Offset;
    static readonly int Add_VectorVector_B_Offset;
    static readonly int Add_VectorVector_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 Add(System.DoubleNumerics.Vector3 a, System.DoubleNumerics.Vector3 b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Add_VectorVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Add_VectorVector_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Add_VectorVector_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Add_VectorVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Add_VectorVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Add_VectorInt
    static readonly IntPtr Add_VectorInt_NativeFunction;
    static readonly int Add_VectorInt_ParamsSize;
    static readonly int Add_VectorInt_A_Offset;
    static readonly int Add_VectorInt_B_Offset;
    static readonly int Add_VectorInt_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 AddInt(System.DoubleNumerics.Vector3 a, int b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Add_VectorInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Add_VectorInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Add_VectorInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Add_VectorInt_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Add_VectorInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Add_VectorFloat
    static readonly IntPtr Add_VectorFloat_NativeFunction;
    static readonly int Add_VectorFloat_ParamsSize;
    static readonly int Add_VectorFloat_A_Offset;
    static readonly int Add_VectorFloat_B_Offset;
    static readonly int Add_VectorFloat_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector3 AddFloat(System.DoubleNumerics.Vector3 a, double b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Add_VectorFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Add_VectorFloat_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Add_VectorFloat_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Add_VectorFloat_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Add_VectorFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Add_Vector2DVector2D
    static readonly IntPtr Add_Vector2DVector2D_NativeFunction;
    static readonly int Add_Vector2DVector2D_ParamsSize;
    static readonly int Add_Vector2DVector2D_A_Offset;
    static readonly int Add_Vector2DVector2D_B_Offset;
    static readonly int Add_Vector2DVector2D_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 Add(System.DoubleNumerics.Vector2 a, System.DoubleNumerics.Vector2 b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Add_Vector2DVector2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Add_Vector2DVector2D_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Add_Vector2DVector2D_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Add_Vector2DVector2D_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Add_Vector2DVector2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Add_Vector2DFloat
    static readonly IntPtr Add_Vector2DFloat_NativeFunction;
    static readonly int Add_Vector2DFloat_ParamsSize;
    static readonly int Add_Vector2DFloat_A_Offset;
    static readonly int Add_Vector2DFloat_B_Offset;
    static readonly int Add_Vector2DFloat_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Vector2 AddFloat(System.DoubleNumerics.Vector2 a, double b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Add_Vector2DFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Add_Vector2DFloat_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Add_Vector2DFloat_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Add_Vector2DFloat_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector2 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Add_Vector2DFloat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Add_TimespanTimespan
    static readonly IntPtr Add_TimespanTimespan_NativeFunction;
    static readonly int Add_TimespanTimespan_ParamsSize;
    static readonly int Add_TimespanTimespan_A_Offset;
    static readonly int Add_TimespanTimespan_B_Offset;
    static readonly int Add_TimespanTimespan_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Timespan Add_TimespanTimespan(UnrealSharp.CoreUObject.Timespan a, UnrealSharp.CoreUObject.Timespan b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Add_TimespanTimespan_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Add_TimespanTimespan_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Add_TimespanTimespan_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Add_TimespanTimespan_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Timespan returnValue;
            returnValue = UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(ParamsBuffer, Add_TimespanTimespan_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Add_QuatQuat
    static readonly IntPtr Add_QuatQuat_NativeFunction;
    static readonly int Add_QuatQuat_ParamsSize;
    static readonly int Add_QuatQuat_A_Offset;
    static readonly int Add_QuatQuat_B_Offset;
    static readonly int Add_QuatQuat_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Quaternion Add(System.DoubleNumerics.Quaternion a, System.DoubleNumerics.Quaternion b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Add_QuatQuat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Add_QuatQuat_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, Add_QuatQuat_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Add_QuatQuat_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Quaternion returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, Add_QuatQuat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Add_MatrixMatrix
    static readonly IntPtr Add_MatrixMatrix_NativeFunction;
    static readonly int Add_MatrixMatrix_ParamsSize;
    static readonly int Add_MatrixMatrix_A_Offset;
    static readonly int Add_MatrixMatrix_B_Offset;
    static readonly int Add_MatrixMatrix_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Matrix4x4 Add(System.DoubleNumerics.Matrix4x4 a, System.DoubleNumerics.Matrix4x4 b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Add_MatrixMatrix_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Add_MatrixMatrix_A_Offset), 0, null, a);
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Add_MatrixMatrix_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Add_MatrixMatrix_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Matrix4x4 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, Add_MatrixMatrix_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Add_LinearColorLinearColor
    static readonly IntPtr Add_LinearColorLinearColor_NativeFunction;
    static readonly int Add_LinearColorLinearColor_ParamsSize;
    static readonly int Add_LinearColorLinearColor_A_Offset;
    static readonly int Add_LinearColorLinearColor_B_Offset;
    static readonly int Add_LinearColorLinearColor_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor Add(UnrealSharp.CoreUObject.LinearColor a, UnrealSharp.CoreUObject.LinearColor b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Add_LinearColorLinearColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, Add_LinearColorLinearColor_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, Add_LinearColorLinearColor_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Add_LinearColorLinearColor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, Add_LinearColorLinearColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Add_IntPointIntPoint
    static readonly IntPtr Add_IntPointIntPoint_NativeFunction;
    static readonly int Add_IntPointIntPoint_ParamsSize;
    static readonly int Add_IntPointIntPoint_A_Offset;
    static readonly int Add_IntPointIntPoint_B_Offset;
    static readonly int Add_IntPointIntPoint_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.IntPoint Add(UnrealSharp.CoreUObject.IntPoint a, UnrealSharp.CoreUObject.IntPoint b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Add_IntPointIntPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(ParamsBuffer, Add_IntPointIntPoint_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(ParamsBuffer, Add_IntPointIntPoint_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Add_IntPointIntPoint_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.IntPoint returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative(IntPtr.Add(ParamsBuffer, Add_IntPointIntPoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Add_IntPointInt
    static readonly IntPtr Add_IntPointInt_NativeFunction;
    static readonly int Add_IntPointInt_ParamsSize;
    static readonly int Add_IntPointInt_A_Offset;
    static readonly int Add_IntPointInt_B_Offset;
    static readonly int Add_IntPointInt_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.IntPoint AddInt(UnrealSharp.CoreUObject.IntPoint a, int b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Add_IntPointInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(ParamsBuffer, Add_IntPointInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Add_IntPointInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Add_IntPointInt_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.IntPoint returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative(IntPtr.Add(ParamsBuffer, Add_IntPointInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Add_IntInt
    static readonly IntPtr Add_IntInt_NativeFunction;
    static readonly int Add_IntInt_ParamsSize;
    static readonly int Add_IntInt_A_Offset;
    static readonly int Add_IntInt_B_Offset;
    static readonly int Add_IntInt_ReturnValue_Offset;
    
    public static int Add_IntInt(int a, int b = 1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Add_IntInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Add_IntInt_A_Offset), 0, null, a);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Add_IntInt_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Add_IntInt_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Add_IntInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Add_Int64Int64
    static readonly IntPtr Add_Int64Int64_NativeFunction;
    static readonly int Add_Int64Int64_ParamsSize;
    static readonly int Add_Int64Int64_A_Offset;
    static readonly int Add_Int64Int64_B_Offset;
    static readonly int Add_Int64Int64_ReturnValue_Offset;
    
    public static long Add_Int64Int64(long a, long b = 1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Add_Int64Int64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Add_Int64Int64_A_Offset), 0, null, a);
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Add_Int64Int64_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Add_Int64Int64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, Add_Int64Int64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Add_DoubleDouble
    static readonly IntPtr Add_DoubleDouble_NativeFunction;
    static readonly int Add_DoubleDouble_ParamsSize;
    static readonly int Add_DoubleDouble_A_Offset;
    static readonly int Add_DoubleDouble_B_Offset;
    static readonly int Add_DoubleDouble_ReturnValue_Offset;
    
    public static double Add_DoubleDouble(double a, double b = 1.000000)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Add_DoubleDouble_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Add_DoubleDouble_A_Offset), 0, null, a);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Add_DoubleDouble_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Add_DoubleDouble_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Add_DoubleDouble_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Add_DateTimeTimespan
    static readonly IntPtr Add_DateTimeTimespan_NativeFunction;
    static readonly int Add_DateTimeTimespan_ParamsSize;
    static readonly int Add_DateTimeTimespan_A_Offset;
    static readonly int Add_DateTimeTimespan_B_Offset;
    static readonly int Add_DateTimeTimespan_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.DateTime Add_DateTimeTimespan(UnrealSharp.CoreUObject.DateTime a, UnrealSharp.CoreUObject.Timespan b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Add_DateTimeTimespan_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Add_DateTimeTimespan_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Add_DateTimeTimespan_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Add_DateTimeTimespan_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.DateTime returnValue;
            returnValue = UnrealSharp.CoreUObject.DateTimeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, Add_DateTimeTimespan_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Add_DateTimeDateTime
    static readonly IntPtr Add_DateTimeDateTime_NativeFunction;
    static readonly int Add_DateTimeDateTime_ParamsSize;
    static readonly int Add_DateTimeDateTime_A_Offset;
    static readonly int Add_DateTimeDateTime_B_Offset;
    static readonly int Add_DateTimeDateTime_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.DateTime Add_DateTimeDateTime(UnrealSharp.CoreUObject.DateTime a, UnrealSharp.CoreUObject.DateTime b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Add_DateTimeDateTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Add_DateTimeDateTime_A_Offset), 0, null, a);
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Add_DateTimeDateTime_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Add_DateTimeDateTime_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.DateTime returnValue;
            returnValue = UnrealSharp.CoreUObject.DateTimeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, Add_DateTimeDateTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Add_ByteByte
    static readonly IntPtr Add_ByteByte_NativeFunction;
    static readonly int Add_ByteByte_ParamsSize;
    static readonly int Add_ByteByte_A_Offset;
    static readonly int Add_ByteByte_B_Offset;
    static readonly int Add_ByteByte_ReturnValue_Offset;
    
    public static byte Add_ByteByte(byte a, byte b = 1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Add_ByteByte_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, Add_ByteByte_A_Offset), 0, null, a);
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, Add_ByteByte_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Add_ByteByte_NativeFunction, ParamsBuffer);
            
            byte returnValue;
            returnValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, Add_ByteByte_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Acos
    static readonly IntPtr Acos_NativeFunction;
    static readonly int Acos_ParamsSize;
    static readonly int Acos_A_Offset;
    static readonly int Acos_ReturnValue_Offset;
    
    public static double Acos(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Acos_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Acos_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Acos_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Acos_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Abs_Int64
    static readonly IntPtr Abs_Int64_NativeFunction;
    static readonly int Abs_Int64_ParamsSize;
    static readonly int Abs_Int64_A_Offset;
    static readonly int Abs_Int64_ReturnValue_Offset;
    
    public static long Abs_Int64(long a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Abs_Int64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Abs_Int64_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Abs_Int64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, Abs_Int64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Abs_Int
    static readonly IntPtr Abs_Int_NativeFunction;
    static readonly int Abs_Int_ParamsSize;
    static readonly int Abs_Int_A_Offset;
    static readonly int Abs_Int_ReturnValue_Offset;
    
    public static int Abs_Int(int a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Abs_Int_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Abs_Int_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Abs_Int_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Abs_Int_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetMathLibrary:Abs
    static readonly IntPtr Abs_NativeFunction;
    static readonly int Abs_ParamsSize;
    static readonly int Abs_A_Offset;
    static readonly int Abs_ReturnValue_Offset;
    
    public static double Abs(double a)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Abs_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Abs_A_Offset), 0, null, a);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Abs_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Abs_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
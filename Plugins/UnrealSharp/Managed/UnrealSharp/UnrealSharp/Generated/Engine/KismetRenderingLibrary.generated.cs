// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class RenderingLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static RenderingLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("KismetRenderingLibrary");
        
        
        SetCastInsetShadowForAllAttachments_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCastInsetShadowForAllAttachments");
        SetCastInsetShadowForAllAttachments_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCastInsetShadowForAllAttachments_NativeFunction);
        SetCastInsetShadowForAllAttachments_PrimitiveComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCastInsetShadowForAllAttachments_NativeFunction, "PrimitiveComponent");
        SetCastInsetShadowForAllAttachments_bCastInsetShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCastInsetShadowForAllAttachments_NativeFunction, "bCastInsetShadow");
        SetCastInsetShadowForAllAttachments_bLightAttachmentsAsGroup_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCastInsetShadowForAllAttachments_NativeFunction, "bLightAttachmentsAsGroup");
        ResizeRenderTarget2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResizeRenderTarget2D");
        ResizeRenderTarget2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ResizeRenderTarget2D_NativeFunction);
        ResizeRenderTarget2D_TextureRenderTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResizeRenderTarget2D_NativeFunction, "TextureRenderTarget");
        ResizeRenderTarget2D_Width_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResizeRenderTarget2D_NativeFunction, "Width");
        ResizeRenderTarget2D_Height_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResizeRenderTarget2D_NativeFunction, "Height");
        RenderTargetCreateStaticTexture2DEditorOnly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RenderTargetCreateStaticTexture2DEditorOnly");
        RenderTargetCreateStaticTexture2DEditorOnly_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RenderTargetCreateStaticTexture2DEditorOnly_NativeFunction);
        RenderTargetCreateStaticTexture2DEditorOnly_RenderTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenderTargetCreateStaticTexture2DEditorOnly_NativeFunction, "RenderTarget");
        RenderTargetCreateStaticTexture2DEditorOnly_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenderTargetCreateStaticTexture2DEditorOnly_NativeFunction, "Name");
        RenderTargetCreateStaticTexture2DEditorOnly_CompressionSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenderTargetCreateStaticTexture2DEditorOnly_NativeFunction, "CompressionSettings");
        RenderTargetCreateStaticTexture2DEditorOnly_MipSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenderTargetCreateStaticTexture2DEditorOnly_NativeFunction, "MipSettings");
        RenderTargetCreateStaticTexture2DEditorOnly_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenderTargetCreateStaticTexture2DEditorOnly_NativeFunction, "ReturnValue");
        ReleaseRenderTarget2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReleaseRenderTarget2D");
        ReleaseRenderTarget2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReleaseRenderTarget2D_NativeFunction);
        ReleaseRenderTarget2D_TextureRenderTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReleaseRenderTarget2D_NativeFunction, "TextureRenderTarget");
        RefreshPathTracingOutput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RefreshPathTracingOutput");
        ReadRenderTargetUV_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReadRenderTargetUV");
        ReadRenderTargetUV_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReadRenderTargetUV_NativeFunction);
        ReadRenderTargetUV_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetUV_NativeFunction, "WorldContextObject");
        ReadRenderTargetUV_TextureRenderTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetUV_NativeFunction, "TextureRenderTarget");
        ReadRenderTargetUV_U_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetUV_NativeFunction, "U");
        ReadRenderTargetUV_V_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetUV_NativeFunction, "V");
        ReadRenderTargetUV_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetUV_NativeFunction, "ReturnValue");
        ReadRenderTargetRawUVArea_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReadRenderTargetRawUVArea");
        ReadRenderTargetRawUVArea_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReadRenderTargetRawUVArea_NativeFunction);
        ReadRenderTargetRawUVArea_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawUVArea_NativeFunction, "WorldContextObject");
        ReadRenderTargetRawUVArea_TextureRenderTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawUVArea_NativeFunction, "TextureRenderTarget");
        ReadRenderTargetRawUVArea_Area_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawUVArea_NativeFunction, "Area");
        ReadRenderTargetRawUVArea_bNormalize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawUVArea_NativeFunction, "bNormalize");
        ReadRenderTargetRawUVArea_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawUVArea_NativeFunction, "ReturnValue");
        ReadRenderTargetRawUVArea_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ReadRenderTargetRawUVArea_NativeFunction, "ReturnValue");
        ReadRenderTargetRawUV_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReadRenderTargetRawUV");
        ReadRenderTargetRawUV_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReadRenderTargetRawUV_NativeFunction);
        ReadRenderTargetRawUV_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawUV_NativeFunction, "WorldContextObject");
        ReadRenderTargetRawUV_TextureRenderTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawUV_NativeFunction, "TextureRenderTarget");
        ReadRenderTargetRawUV_U_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawUV_NativeFunction, "U");
        ReadRenderTargetRawUV_V_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawUV_NativeFunction, "V");
        ReadRenderTargetRawUV_bNormalize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawUV_NativeFunction, "bNormalize");
        ReadRenderTargetRawUV_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawUV_NativeFunction, "ReturnValue");
        ReadRenderTargetRawPixelArea_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReadRenderTargetRawPixelArea");
        ReadRenderTargetRawPixelArea_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReadRenderTargetRawPixelArea_NativeFunction);
        ReadRenderTargetRawPixelArea_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawPixelArea_NativeFunction, "WorldContextObject");
        ReadRenderTargetRawPixelArea_TextureRenderTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawPixelArea_NativeFunction, "TextureRenderTarget");
        ReadRenderTargetRawPixelArea_MinX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawPixelArea_NativeFunction, "MinX");
        ReadRenderTargetRawPixelArea_MinY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawPixelArea_NativeFunction, "MinY");
        ReadRenderTargetRawPixelArea_MaxX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawPixelArea_NativeFunction, "MaxX");
        ReadRenderTargetRawPixelArea_MaxY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawPixelArea_NativeFunction, "MaxY");
        ReadRenderTargetRawPixelArea_bNormalize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawPixelArea_NativeFunction, "bNormalize");
        ReadRenderTargetRawPixelArea_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawPixelArea_NativeFunction, "ReturnValue");
        ReadRenderTargetRawPixelArea_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ReadRenderTargetRawPixelArea_NativeFunction, "ReturnValue");
        ReadRenderTargetRawPixel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReadRenderTargetRawPixel");
        ReadRenderTargetRawPixel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReadRenderTargetRawPixel_NativeFunction);
        ReadRenderTargetRawPixel_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawPixel_NativeFunction, "WorldContextObject");
        ReadRenderTargetRawPixel_TextureRenderTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawPixel_NativeFunction, "TextureRenderTarget");
        ReadRenderTargetRawPixel_X_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawPixel_NativeFunction, "X");
        ReadRenderTargetRawPixel_Y_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawPixel_NativeFunction, "Y");
        ReadRenderTargetRawPixel_bNormalize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawPixel_NativeFunction, "bNormalize");
        ReadRenderTargetRawPixel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRawPixel_NativeFunction, "ReturnValue");
        ReadRenderTargetRaw_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReadRenderTargetRaw");
        ReadRenderTargetRaw_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReadRenderTargetRaw_NativeFunction);
        ReadRenderTargetRaw_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRaw_NativeFunction, "WorldContextObject");
        ReadRenderTargetRaw_TextureRenderTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRaw_NativeFunction, "TextureRenderTarget");
        ReadRenderTargetRaw_OutLinearSamples_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRaw_NativeFunction, "OutLinearSamples");
        ReadRenderTargetRaw_OutLinearSamples_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ReadRenderTargetRaw_NativeFunction, "OutLinearSamples");
        ReadRenderTargetRaw_bNormalize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRaw_NativeFunction, "bNormalize");
        ReadRenderTargetRaw_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetRaw_NativeFunction, "ReturnValue");
        ReadRenderTargetPixel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReadRenderTargetPixel");
        ReadRenderTargetPixel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReadRenderTargetPixel_NativeFunction);
        ReadRenderTargetPixel_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetPixel_NativeFunction, "WorldContextObject");
        ReadRenderTargetPixel_TextureRenderTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetPixel_NativeFunction, "TextureRenderTarget");
        ReadRenderTargetPixel_X_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetPixel_NativeFunction, "X");
        ReadRenderTargetPixel_Y_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetPixel_NativeFunction, "Y");
        ReadRenderTargetPixel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTargetPixel_NativeFunction, "ReturnValue");
        ReadRenderTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReadRenderTarget");
        ReadRenderTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReadRenderTarget_NativeFunction);
        ReadRenderTarget_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTarget_NativeFunction, "WorldContextObject");
        ReadRenderTarget_TextureRenderTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTarget_NativeFunction, "TextureRenderTarget");
        ReadRenderTarget_OutSamples_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTarget_NativeFunction, "OutSamples");
        ReadRenderTarget_OutSamples_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ReadRenderTarget_NativeFunction, "OutSamples");
        ReadRenderTarget_bNormalize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTarget_NativeFunction, "bNormalize");
        ReadRenderTarget_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReadRenderTarget_NativeFunction, "ReturnValue");
        ImportFileAsTexture2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ImportFileAsTexture2D");
        ImportFileAsTexture2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ImportFileAsTexture2D_NativeFunction);
        ImportFileAsTexture2D_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportFileAsTexture2D_NativeFunction, "WorldContextObject");
        ImportFileAsTexture2D_Filename_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportFileAsTexture2D_NativeFunction, "Filename");
        ImportFileAsTexture2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportFileAsTexture2D_NativeFunction, "ReturnValue");
        ImportBufferAsTexture2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ImportBufferAsTexture2D");
        ImportBufferAsTexture2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ImportBufferAsTexture2D_NativeFunction);
        ImportBufferAsTexture2D_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportBufferAsTexture2D_NativeFunction, "WorldContextObject");
        ImportBufferAsTexture2D_Buffer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportBufferAsTexture2D_NativeFunction, "Buffer");
        ImportBufferAsTexture2D_Buffer_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ImportBufferAsTexture2D_NativeFunction, "Buffer");
        ImportBufferAsTexture2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportBufferAsTexture2D_NativeFunction, "ReturnValue");
        ExportTexture2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ExportTexture2D");
        ExportTexture2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ExportTexture2D_NativeFunction);
        ExportTexture2D_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportTexture2D_NativeFunction, "WorldContextObject");
        ExportTexture2D_Texture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportTexture2D_NativeFunction, "Texture");
        ExportTexture2D_FilePath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportTexture2D_NativeFunction, "FilePath");
        ExportTexture2D_FileName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportTexture2D_NativeFunction, "FileName");
        ExportRenderTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ExportRenderTarget");
        ExportRenderTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ExportRenderTarget_NativeFunction);
        ExportRenderTarget_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportRenderTarget_NativeFunction, "WorldContextObject");
        ExportRenderTarget_TextureRenderTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportRenderTarget_NativeFunction, "TextureRenderTarget");
        ExportRenderTarget_FilePath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportRenderTarget_NativeFunction, "FilePath");
        ExportRenderTarget_FileName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportRenderTarget_NativeFunction, "FileName");
        EndDrawCanvasToRenderTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EndDrawCanvasToRenderTarget");
        EndDrawCanvasToRenderTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EndDrawCanvasToRenderTarget_NativeFunction);
        EndDrawCanvasToRenderTarget_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EndDrawCanvasToRenderTarget_NativeFunction, "WorldContextObject");
        EndDrawCanvasToRenderTarget_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EndDrawCanvasToRenderTarget_NativeFunction, "Context");
        EnablePathTracing_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EnablePathTracing");
        EnablePathTracing_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EnablePathTracing_NativeFunction);
        EnablePathTracing_bEnablePathTracer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EnablePathTracing_NativeFunction, "bEnablePathTracer");
        DrawMaterialToRenderTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawMaterialToRenderTarget");
        DrawMaterialToRenderTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawMaterialToRenderTarget_NativeFunction);
        DrawMaterialToRenderTarget_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterialToRenderTarget_NativeFunction, "WorldContextObject");
        DrawMaterialToRenderTarget_TextureRenderTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterialToRenderTarget_NativeFunction, "TextureRenderTarget");
        DrawMaterialToRenderTarget_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawMaterialToRenderTarget_NativeFunction, "Material");
        CreateRenderTargetVolume_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateRenderTargetVolume");
        CreateRenderTargetVolume_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateRenderTargetVolume_NativeFunction);
        CreateRenderTargetVolume_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTargetVolume_NativeFunction, "WorldContextObject");
        CreateRenderTargetVolume_Width_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTargetVolume_NativeFunction, "Width");
        CreateRenderTargetVolume_Height_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTargetVolume_NativeFunction, "Height");
        CreateRenderTargetVolume_Depth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTargetVolume_NativeFunction, "Depth");
        CreateRenderTargetVolume_Format_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTargetVolume_NativeFunction, "Format");
        CreateRenderTargetVolume_ClearColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTargetVolume_NativeFunction, "ClearColor");
        CreateRenderTargetVolume_bAutoGenerateMipMaps_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTargetVolume_NativeFunction, "bAutoGenerateMipMaps");
        CreateRenderTargetVolume_bSupportUAVs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTargetVolume_NativeFunction, "bSupportUAVs");
        CreateRenderTargetVolume_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTargetVolume_NativeFunction, "ReturnValue");
        CreateRenderTarget2DArray_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateRenderTarget2DArray");
        CreateRenderTarget2DArray_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateRenderTarget2DArray_NativeFunction);
        CreateRenderTarget2DArray_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTarget2DArray_NativeFunction, "WorldContextObject");
        CreateRenderTarget2DArray_Width_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTarget2DArray_NativeFunction, "Width");
        CreateRenderTarget2DArray_Height_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTarget2DArray_NativeFunction, "Height");
        CreateRenderTarget2DArray_Slices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTarget2DArray_NativeFunction, "Slices");
        CreateRenderTarget2DArray_Format_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTarget2DArray_NativeFunction, "Format");
        CreateRenderTarget2DArray_ClearColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTarget2DArray_NativeFunction, "ClearColor");
        CreateRenderTarget2DArray_bAutoGenerateMipMaps_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTarget2DArray_NativeFunction, "bAutoGenerateMipMaps");
        CreateRenderTarget2DArray_bSupportUAVs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTarget2DArray_NativeFunction, "bSupportUAVs");
        CreateRenderTarget2DArray_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTarget2DArray_NativeFunction, "ReturnValue");
        CreateRenderTarget2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateRenderTarget2D");
        CreateRenderTarget2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateRenderTarget2D_NativeFunction);
        CreateRenderTarget2D_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTarget2D_NativeFunction, "WorldContextObject");
        CreateRenderTarget2D_Width_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTarget2D_NativeFunction, "Width");
        CreateRenderTarget2D_Height_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTarget2D_NativeFunction, "Height");
        CreateRenderTarget2D_Format_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTarget2D_NativeFunction, "Format");
        CreateRenderTarget2D_ClearColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTarget2D_NativeFunction, "ClearColor");
        CreateRenderTarget2D_bAutoGenerateMipMaps_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTarget2D_NativeFunction, "bAutoGenerateMipMaps");
        CreateRenderTarget2D_bSupportUAVs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTarget2D_NativeFunction, "bSupportUAVs");
        CreateRenderTarget2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateRenderTarget2D_NativeFunction, "ReturnValue");
        ConvertRenderTargetToTexture2DEditorOnly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertRenderTargetToTexture2DEditorOnly");
        ConvertRenderTargetToTexture2DEditorOnly_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertRenderTargetToTexture2DEditorOnly_NativeFunction);
        ConvertRenderTargetToTexture2DEditorOnly_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertRenderTargetToTexture2DEditorOnly_NativeFunction, "WorldContextObject");
        ConvertRenderTargetToTexture2DEditorOnly_RenderTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertRenderTargetToTexture2DEditorOnly_NativeFunction, "RenderTarget");
        ConvertRenderTargetToTexture2DEditorOnly_Texture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertRenderTargetToTexture2DEditorOnly_NativeFunction, "Texture");
        ClearRenderTarget2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearRenderTarget2D");
        ClearRenderTarget2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClearRenderTarget2D_NativeFunction);
        ClearRenderTarget2D_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearRenderTarget2D_NativeFunction, "WorldContextObject");
        ClearRenderTarget2D_TextureRenderTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearRenderTarget2D_NativeFunction, "TextureRenderTarget");
        ClearRenderTarget2D_ClearColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearRenderTarget2D_NativeFunction, "ClearColor");
        CalculateProjectionMatrix_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CalculateProjectionMatrix");
        CalculateProjectionMatrix_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CalculateProjectionMatrix_NativeFunction);
        CalculateProjectionMatrix_MinimalViewInfo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CalculateProjectionMatrix_NativeFunction, "MinimalViewInfo");
        CalculateProjectionMatrix_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CalculateProjectionMatrix_NativeFunction, "ReturnValue");
        BeginDrawCanvasToRenderTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BeginDrawCanvasToRenderTarget");
        BeginDrawCanvasToRenderTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BeginDrawCanvasToRenderTarget_NativeFunction);
        BeginDrawCanvasToRenderTarget_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BeginDrawCanvasToRenderTarget_NativeFunction, "WorldContextObject");
        BeginDrawCanvasToRenderTarget_TextureRenderTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BeginDrawCanvasToRenderTarget_NativeFunction, "TextureRenderTarget");
        BeginDrawCanvasToRenderTarget_Canvas_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BeginDrawCanvasToRenderTarget_NativeFunction, "Canvas");
        BeginDrawCanvasToRenderTarget_Size_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BeginDrawCanvasToRenderTarget_NativeFunction, "Size");
        BeginDrawCanvasToRenderTarget_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BeginDrawCanvasToRenderTarget_NativeFunction, "Context");
        
        
    }
    
    protected RenderingLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.KismetRenderingLibrary:SetCastInsetShadowForAllAttachments
    static readonly IntPtr SetCastInsetShadowForAllAttachments_NativeFunction;
    static readonly int SetCastInsetShadowForAllAttachments_ParamsSize;
    static readonly int SetCastInsetShadowForAllAttachments_PrimitiveComponent_Offset;
    static readonly int SetCastInsetShadowForAllAttachments_bCastInsetShadow_Offset;
    static readonly int SetCastInsetShadowForAllAttachments_bLightAttachmentsAsGroup_Offset;
    
    public static void SetCastInsetShadowForAllAttachments(UnrealSharp.Engine.PrimitiveComponent primitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCastInsetShadowForAllAttachments_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative(IntPtr.Add(ParamsBuffer, SetCastInsetShadowForAllAttachments_PrimitiveComponent_Offset), 0, null, primitiveComponent);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCastInsetShadowForAllAttachments_bCastInsetShadow_Offset), 0, null, bCastInsetShadow);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCastInsetShadowForAllAttachments_bLightAttachmentsAsGroup_Offset), 0, null, bLightAttachmentsAsGroup);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetCastInsetShadowForAllAttachments_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:ResizeRenderTarget2D
    static readonly IntPtr ResizeRenderTarget2D_NativeFunction;
    static readonly int ResizeRenderTarget2D_ParamsSize;
    static readonly int ResizeRenderTarget2D_TextureRenderTarget_Offset;
    static readonly int ResizeRenderTarget2D_Width_Offset;
    static readonly int ResizeRenderTarget2D_Height_Offset;
    
    public static void ResizeRenderTarget2D(UnrealSharp.Engine.TextureRenderTarget2D textureRenderTarget, int width = 256, int height = 256)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ResizeRenderTarget2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, ResizeRenderTarget2D_TextureRenderTarget_Offset), 0, null, textureRenderTarget);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ResizeRenderTarget2D_Width_Offset), 0, null, width);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ResizeRenderTarget2D_Height_Offset), 0, null, height);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ResizeRenderTarget2D_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:RenderTargetCreateStaticTexture2DEditorOnly
    static readonly IntPtr RenderTargetCreateStaticTexture2DEditorOnly_NativeFunction;
    static readonly int RenderTargetCreateStaticTexture2DEditorOnly_ParamsSize;
    static readonly int RenderTargetCreateStaticTexture2DEditorOnly_RenderTarget_Offset;
    static readonly int RenderTargetCreateStaticTexture2DEditorOnly_Name_Offset;
    static readonly int RenderTargetCreateStaticTexture2DEditorOnly_CompressionSettings_Offset;
    static readonly int RenderTargetCreateStaticTexture2DEditorOnly_MipSettings_Offset;
    static readonly int RenderTargetCreateStaticTexture2DEditorOnly_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.Texture2D RenderTargetCreateStaticTexture2DEditorOnly(UnrealSharp.Engine.TextureRenderTarget2D renderTarget, string name = "Texture", UnrealSharp.Engine.TextureCompressionSettings compressionSettings = UnrealSharp.Engine.TextureCompressionSettings.TC_Default, UnrealSharp.Engine.TextureMipGenSettings mipSettings = UnrealSharp.Engine.TextureMipGenSettings.TMGS_FromTextureGroup)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RenderTargetCreateStaticTexture2DEditorOnly_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, RenderTargetCreateStaticTexture2DEditorOnly_RenderTarget_Offset), 0, null, renderTarget);
            IntPtr Name_NativePtr = IntPtr.Add(ParamsBuffer,RenderTargetCreateStaticTexture2DEditorOnly_Name_Offset);
            StringMarshaller.ToNative(Name_NativePtr,0,null,name);
            BlittableMarshaller<UnrealSharp.Engine.TextureCompressionSettings>.ToNative(IntPtr.Add(ParamsBuffer, RenderTargetCreateStaticTexture2DEditorOnly_CompressionSettings_Offset), 0, null, compressionSettings);
            BlittableMarshaller<UnrealSharp.Engine.TextureMipGenSettings>.ToNative(IntPtr.Add(ParamsBuffer, RenderTargetCreateStaticTexture2DEditorOnly_MipSettings_Offset), 0, null, mipSettings);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RenderTargetCreateStaticTexture2DEditorOnly_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Texture2D returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Texture2D>.FromNative(IntPtr.Add(ParamsBuffer, RenderTargetCreateStaticTexture2DEditorOnly_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(Name_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:ReleaseRenderTarget2D
    static readonly IntPtr ReleaseRenderTarget2D_NativeFunction;
    static readonly int ReleaseRenderTarget2D_ParamsSize;
    static readonly int ReleaseRenderTarget2D_TextureRenderTarget_Offset;
    
    public static void ReleaseRenderTarget2D(UnrealSharp.Engine.TextureRenderTarget2D textureRenderTarget)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReleaseRenderTarget2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, ReleaseRenderTarget2D_TextureRenderTarget_Offset), 0, null, textureRenderTarget);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ReleaseRenderTarget2D_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:RefreshPathTracingOutput
    static readonly IntPtr RefreshPathTracingOutput_NativeFunction;
    
    public static void RefreshPathTracingOutput()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RefreshPathTracingOutput_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:ReadRenderTargetUV
    static readonly IntPtr ReadRenderTargetUV_NativeFunction;
    static readonly int ReadRenderTargetUV_ParamsSize;
    static readonly int ReadRenderTargetUV_WorldContextObject_Offset;
    static readonly int ReadRenderTargetUV_TextureRenderTarget_Offset;
    static readonly int ReadRenderTargetUV_U_Offset;
    static readonly int ReadRenderTargetUV_V_Offset;
    static readonly int ReadRenderTargetUV_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Color ReadRenderTargetUV(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.TextureRenderTarget2D textureRenderTarget, float u, float v)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReadRenderTargetUV_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetUV_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetUV_TextureRenderTarget_Offset), 0, null, textureRenderTarget);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetUV_U_Offset), 0, null, u);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetUV_V_Offset), 0, null, v);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ReadRenderTargetUV_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Color returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetUV_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:ReadRenderTargetRawUVArea
    static readonly IntPtr ReadRenderTargetRawUVArea_NativeFunction;
    static readonly int ReadRenderTargetRawUVArea_ParamsSize;
    static readonly int ReadRenderTargetRawUVArea_WorldContextObject_Offset;
    static readonly int ReadRenderTargetRawUVArea_TextureRenderTarget_Offset;
    static readonly int ReadRenderTargetRawUVArea_Area_Offset;
    static readonly int ReadRenderTargetRawUVArea_bNormalize_Offset;
    static readonly int ReadRenderTargetRawUVArea_ReturnValue_Offset;
    static readonly int ReadRenderTargetRawUVArea_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.CoreUObject.LinearColor> ReadRenderTargetRawUVArea(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.TextureRenderTarget2D textureRenderTarget, UnrealSharp.CoreUObject.Box2D area, bool bNormalize = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReadRenderTargetRawUVArea_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawUVArea_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawUVArea_TextureRenderTarget_Offset), 0, null, textureRenderTarget);
            UnrealSharp.CoreUObject.Box2DMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawUVArea_Area_Offset), 0, null, area);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawUVArea_bNormalize_Offset), 0, null, bNormalize);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ReadRenderTargetRawUVArea_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.CoreUObject.LinearColor> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, ReadRenderTargetRawUVArea_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor> (1, BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative, ReadRenderTargetRawUVArea_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:ReadRenderTargetRawUV
    static readonly IntPtr ReadRenderTargetRawUV_NativeFunction;
    static readonly int ReadRenderTargetRawUV_ParamsSize;
    static readonly int ReadRenderTargetRawUV_WorldContextObject_Offset;
    static readonly int ReadRenderTargetRawUV_TextureRenderTarget_Offset;
    static readonly int ReadRenderTargetRawUV_U_Offset;
    static readonly int ReadRenderTargetRawUV_V_Offset;
    static readonly int ReadRenderTargetRawUV_bNormalize_Offset;
    static readonly int ReadRenderTargetRawUV_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor ReadRenderTargetRawUV(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.TextureRenderTarget2D textureRenderTarget, float u, float v, bool bNormalize = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReadRenderTargetRawUV_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawUV_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawUV_TextureRenderTarget_Offset), 0, null, textureRenderTarget);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawUV_U_Offset), 0, null, u);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawUV_V_Offset), 0, null, v);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawUV_bNormalize_Offset), 0, null, bNormalize);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ReadRenderTargetRawUV_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawUV_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:ReadRenderTargetRawPixelArea
    static readonly IntPtr ReadRenderTargetRawPixelArea_NativeFunction;
    static readonly int ReadRenderTargetRawPixelArea_ParamsSize;
    static readonly int ReadRenderTargetRawPixelArea_WorldContextObject_Offset;
    static readonly int ReadRenderTargetRawPixelArea_TextureRenderTarget_Offset;
    static readonly int ReadRenderTargetRawPixelArea_MinX_Offset;
    static readonly int ReadRenderTargetRawPixelArea_MinY_Offset;
    static readonly int ReadRenderTargetRawPixelArea_MaxX_Offset;
    static readonly int ReadRenderTargetRawPixelArea_MaxY_Offset;
    static readonly int ReadRenderTargetRawPixelArea_bNormalize_Offset;
    static readonly int ReadRenderTargetRawPixelArea_ReturnValue_Offset;
    static readonly int ReadRenderTargetRawPixelArea_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.CoreUObject.LinearColor> ReadRenderTargetRawPixelArea(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.TextureRenderTarget2D textureRenderTarget, int minX, int minY, int maxX, int maxY, bool bNormalize = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReadRenderTargetRawPixelArea_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawPixelArea_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawPixelArea_TextureRenderTarget_Offset), 0, null, textureRenderTarget);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawPixelArea_MinX_Offset), 0, null, minX);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawPixelArea_MinY_Offset), 0, null, minY);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawPixelArea_MaxX_Offset), 0, null, maxX);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawPixelArea_MaxY_Offset), 0, null, maxY);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawPixelArea_bNormalize_Offset), 0, null, bNormalize);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ReadRenderTargetRawPixelArea_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.CoreUObject.LinearColor> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, ReadRenderTargetRawPixelArea_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor> (1, BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative, ReadRenderTargetRawPixelArea_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:ReadRenderTargetRawPixel
    static readonly IntPtr ReadRenderTargetRawPixel_NativeFunction;
    static readonly int ReadRenderTargetRawPixel_ParamsSize;
    static readonly int ReadRenderTargetRawPixel_WorldContextObject_Offset;
    static readonly int ReadRenderTargetRawPixel_TextureRenderTarget_Offset;
    static readonly int ReadRenderTargetRawPixel_X_Offset;
    static readonly int ReadRenderTargetRawPixel_Y_Offset;
    static readonly int ReadRenderTargetRawPixel_bNormalize_Offset;
    static readonly int ReadRenderTargetRawPixel_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor ReadRenderTargetRawPixel(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.TextureRenderTarget2D textureRenderTarget, int x, int y, bool bNormalize = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReadRenderTargetRawPixel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawPixel_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawPixel_TextureRenderTarget_Offset), 0, null, textureRenderTarget);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawPixel_X_Offset), 0, null, x);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawPixel_Y_Offset), 0, null, y);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawPixel_bNormalize_Offset), 0, null, bNormalize);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ReadRenderTargetRawPixel_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRawPixel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:ReadRenderTargetRaw
    static readonly IntPtr ReadRenderTargetRaw_NativeFunction;
    static readonly int ReadRenderTargetRaw_ParamsSize;
    static readonly int ReadRenderTargetRaw_WorldContextObject_Offset;
    static readonly int ReadRenderTargetRaw_TextureRenderTarget_Offset;
    static readonly int ReadRenderTargetRaw_OutLinearSamples_Offset;
    static readonly int ReadRenderTargetRaw_OutLinearSamples_ElementSize;
    static readonly int ReadRenderTargetRaw_bNormalize_Offset;
    static readonly int ReadRenderTargetRaw_ReturnValue_Offset;
    
    public static bool ReadRenderTargetRaw(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.TextureRenderTarget2D textureRenderTarget, out System.Collections.Generic.IList<UnrealSharp.CoreUObject.LinearColor> outLinearSamples, bool bNormalize = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReadRenderTargetRaw_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRaw_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRaw_TextureRenderTarget_Offset), 0, null, textureRenderTarget);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRaw_bNormalize_Offset), 0, null, bNormalize);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ReadRenderTargetRaw_NativeFunction, ParamsBuffer);
            
            IntPtr OutLinearSamples_NativeBuffer = IntPtr.Add(ParamsBuffer, ReadRenderTargetRaw_OutLinearSamples_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor> OutLinearSamples_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor> (1, BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative, ReadRenderTargetRaw_OutLinearSamples_ElementSize);
            outLinearSamples = OutLinearSamples_Marshaler.FromNative(OutLinearSamples_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.LinearColor>.DestructInstance(OutLinearSamples_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetRaw_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:ReadRenderTargetPixel
    static readonly IntPtr ReadRenderTargetPixel_NativeFunction;
    static readonly int ReadRenderTargetPixel_ParamsSize;
    static readonly int ReadRenderTargetPixel_WorldContextObject_Offset;
    static readonly int ReadRenderTargetPixel_TextureRenderTarget_Offset;
    static readonly int ReadRenderTargetPixel_X_Offset;
    static readonly int ReadRenderTargetPixel_Y_Offset;
    static readonly int ReadRenderTargetPixel_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Color ReadRenderTargetPixel(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.TextureRenderTarget2D textureRenderTarget, int x, int y)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReadRenderTargetPixel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetPixel_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetPixel_TextureRenderTarget_Offset), 0, null, textureRenderTarget);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetPixel_X_Offset), 0, null, x);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetPixel_Y_Offset), 0, null, y);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ReadRenderTargetPixel_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Color returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(ParamsBuffer, ReadRenderTargetPixel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:ReadRenderTarget
    static readonly IntPtr ReadRenderTarget_NativeFunction;
    static readonly int ReadRenderTarget_ParamsSize;
    static readonly int ReadRenderTarget_WorldContextObject_Offset;
    static readonly int ReadRenderTarget_TextureRenderTarget_Offset;
    static readonly int ReadRenderTarget_OutSamples_Offset;
    static readonly int ReadRenderTarget_OutSamples_ElementSize;
    static readonly int ReadRenderTarget_bNormalize_Offset;
    static readonly int ReadRenderTarget_ReturnValue_Offset;
    
    public static bool ReadRenderTarget(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.TextureRenderTarget2D textureRenderTarget, out System.Collections.Generic.IList<UnrealSharp.CoreUObject.Color> outSamples, bool bNormalize = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReadRenderTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTarget_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTarget_TextureRenderTarget_Offset), 0, null, textureRenderTarget);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ReadRenderTarget_bNormalize_Offset), 0, null, bNormalize);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ReadRenderTarget_NativeFunction, ParamsBuffer);
            
            IntPtr OutSamples_NativeBuffer = IntPtr.Add(ParamsBuffer, ReadRenderTarget_OutSamples_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Color> OutSamples_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Color> (1, BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative, ReadRenderTarget_OutSamples_ElementSize);
            outSamples = OutSamples_Marshaler.FromNative(OutSamples_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Color>.DestructInstance(OutSamples_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ReadRenderTarget_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:ImportFileAsTexture2D
    static readonly IntPtr ImportFileAsTexture2D_NativeFunction;
    static readonly int ImportFileAsTexture2D_ParamsSize;
    static readonly int ImportFileAsTexture2D_WorldContextObject_Offset;
    static readonly int ImportFileAsTexture2D_Filename_Offset;
    static readonly int ImportFileAsTexture2D_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.Texture2D ImportFileAsTexture2D(UnrealSharp.CoreUObject.Object worldContextObject, string filename)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ImportFileAsTexture2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ImportFileAsTexture2D_WorldContextObject_Offset), 0, null, worldContextObject);
            IntPtr Filename_NativePtr = IntPtr.Add(ParamsBuffer,ImportFileAsTexture2D_Filename_Offset);
            StringMarshaller.ToNative(Filename_NativePtr,0,null,filename);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ImportFileAsTexture2D_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Texture2D returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Texture2D>.FromNative(IntPtr.Add(ParamsBuffer, ImportFileAsTexture2D_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(Filename_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:ImportBufferAsTexture2D
    static readonly IntPtr ImportBufferAsTexture2D_NativeFunction;
    static readonly int ImportBufferAsTexture2D_ParamsSize;
    static readonly int ImportBufferAsTexture2D_WorldContextObject_Offset;
    static readonly int ImportBufferAsTexture2D_Buffer_Offset;
    static readonly int ImportBufferAsTexture2D_Buffer_ElementSize;
    static readonly int ImportBufferAsTexture2D_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.Texture2D ImportBufferAsTexture2D(UnrealSharp.CoreUObject.Object worldContextObject, System.Collections.Generic.IList<byte> buffer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ImportBufferAsTexture2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ImportBufferAsTexture2D_WorldContextObject_Offset), 0, null, worldContextObject);
            IntPtr Buffer_NativeBuffer = IntPtr.Add(ParamsBuffer, ImportBufferAsTexture2D_Buffer_Offset);
            UnrealArrayCopyMarshaler<byte> Buffer_Marshaler = new UnrealArrayCopyMarshaler<byte>(1, BlittableMarshaller<byte>.ToNative, BlittableMarshaller<byte>.FromNative, ImportBufferAsTexture2D_Buffer_ElementSize);
            Buffer_Marshaler.ToNative(Buffer_NativeBuffer, 0, null, buffer);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ImportBufferAsTexture2D_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Texture2D returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Texture2D>.FromNative(IntPtr.Add(ParamsBuffer, ImportBufferAsTexture2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:ExportTexture2D
    static readonly IntPtr ExportTexture2D_NativeFunction;
    static readonly int ExportTexture2D_ParamsSize;
    static readonly int ExportTexture2D_WorldContextObject_Offset;
    static readonly int ExportTexture2D_Texture_Offset;
    static readonly int ExportTexture2D_FilePath_Offset;
    static readonly int ExportTexture2D_FileName_Offset;
    
    public static void ExportTexture2D(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.Texture2D texture, string filePath, string fileName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ExportTexture2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ExportTexture2D_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.Texture2D>.ToNative(IntPtr.Add(ParamsBuffer, ExportTexture2D_Texture_Offset), 0, null, texture);
            IntPtr FilePath_NativePtr = IntPtr.Add(ParamsBuffer,ExportTexture2D_FilePath_Offset);
            StringMarshaller.ToNative(FilePath_NativePtr,0,null,filePath);
            IntPtr FileName_NativePtr = IntPtr.Add(ParamsBuffer,ExportTexture2D_FileName_Offset);
            StringMarshaller.ToNative(FileName_NativePtr,0,null,fileName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ExportTexture2D_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(FilePath_NativePtr, 0);
            StringMarshaller.DestructInstance(FileName_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:ExportRenderTarget
    static readonly IntPtr ExportRenderTarget_NativeFunction;
    static readonly int ExportRenderTarget_ParamsSize;
    static readonly int ExportRenderTarget_WorldContextObject_Offset;
    static readonly int ExportRenderTarget_TextureRenderTarget_Offset;
    static readonly int ExportRenderTarget_FilePath_Offset;
    static readonly int ExportRenderTarget_FileName_Offset;
    
    public static void ExportRenderTarget(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.TextureRenderTarget2D textureRenderTarget, string filePath, string fileName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ExportRenderTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ExportRenderTarget_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, ExportRenderTarget_TextureRenderTarget_Offset), 0, null, textureRenderTarget);
            IntPtr FilePath_NativePtr = IntPtr.Add(ParamsBuffer,ExportRenderTarget_FilePath_Offset);
            StringMarshaller.ToNative(FilePath_NativePtr,0,null,filePath);
            IntPtr FileName_NativePtr = IntPtr.Add(ParamsBuffer,ExportRenderTarget_FileName_Offset);
            StringMarshaller.ToNative(FileName_NativePtr,0,null,fileName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ExportRenderTarget_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(FilePath_NativePtr, 0);
            StringMarshaller.DestructInstance(FileName_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:EndDrawCanvasToRenderTarget
    static readonly IntPtr EndDrawCanvasToRenderTarget_NativeFunction;
    static readonly int EndDrawCanvasToRenderTarget_ParamsSize;
    static readonly int EndDrawCanvasToRenderTarget_WorldContextObject_Offset;
    static readonly int EndDrawCanvasToRenderTarget_Context_Offset;
    
    public static void EndDrawCanvasToRenderTarget(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.DrawToRenderTargetContext context)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EndDrawCanvasToRenderTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, EndDrawCanvasToRenderTarget_WorldContextObject_Offset), 0, null, worldContextObject);
            UnrealSharp.Engine.DrawToRenderTargetContextMarshaler.ToNative(IntPtr.Add(ParamsBuffer, EndDrawCanvasToRenderTarget_Context_Offset), 0, null, context);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EndDrawCanvasToRenderTarget_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:EnablePathTracing
    static readonly IntPtr EnablePathTracing_NativeFunction;
    static readonly int EnablePathTracing_ParamsSize;
    static readonly int EnablePathTracing_bEnablePathTracer_Offset;
    
    public static void EnablePathTracing(bool bEnablePathTracer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EnablePathTracing_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, EnablePathTracing_bEnablePathTracer_Offset), 0, null, bEnablePathTracer);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EnablePathTracing_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:DrawMaterialToRenderTarget
    static readonly IntPtr DrawMaterialToRenderTarget_NativeFunction;
    static readonly int DrawMaterialToRenderTarget_ParamsSize;
    static readonly int DrawMaterialToRenderTarget_WorldContextObject_Offset;
    static readonly int DrawMaterialToRenderTarget_TextureRenderTarget_Offset;
    static readonly int DrawMaterialToRenderTarget_Material_Offset;
    
    public static void DrawMaterialToRenderTarget(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.TextureRenderTarget2D textureRenderTarget, UnrealSharp.Engine.MaterialInterface material)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawMaterialToRenderTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterialToRenderTarget_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterialToRenderTarget_TextureRenderTarget_Offset), 0, null, textureRenderTarget);
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, DrawMaterialToRenderTarget_Material_Offset), 0, null, material);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawMaterialToRenderTarget_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:CreateRenderTargetVolume
    static readonly IntPtr CreateRenderTargetVolume_NativeFunction;
    static readonly int CreateRenderTargetVolume_ParamsSize;
    static readonly int CreateRenderTargetVolume_WorldContextObject_Offset;
    static readonly int CreateRenderTargetVolume_Width_Offset;
    static readonly int CreateRenderTargetVolume_Height_Offset;
    static readonly int CreateRenderTargetVolume_Depth_Offset;
    static readonly int CreateRenderTargetVolume_Format_Offset;
    static readonly int CreateRenderTargetVolume_ClearColor_Offset;
    static readonly int CreateRenderTargetVolume_bAutoGenerateMipMaps_Offset;
    static readonly int CreateRenderTargetVolume_bSupportUAVs_Offset;
    static readonly int CreateRenderTargetVolume_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.TextureRenderTargetVolume CreateRenderTargetVolume(UnrealSharp.CoreUObject.Object worldContextObject, int width = 16, int height = 16, int depth = 16, UnrealSharp.Engine.ETextureRenderTargetFormat format = UnrealSharp.Engine.ETextureRenderTargetFormat.RTF_RGBA16f)
    {
        UnrealSharp.CoreUObject.LinearColor clearColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return CreateRenderTargetVolume(worldContextObject, width, height, depth, format, clearColor);
    }
    
    public static UnrealSharp.Engine.TextureRenderTargetVolume CreateRenderTargetVolume(UnrealSharp.CoreUObject.Object worldContextObject, int width, int height, int depth, UnrealSharp.Engine.ETextureRenderTargetFormat format, UnrealSharp.CoreUObject.LinearColor clearColor, bool bAutoGenerateMipMaps = false, bool bSupportUAVs = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateRenderTargetVolume_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTargetVolume_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTargetVolume_Width_Offset), 0, null, width);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTargetVolume_Height_Offset), 0, null, height);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTargetVolume_Depth_Offset), 0, null, depth);
            BlittableMarshaller<UnrealSharp.Engine.ETextureRenderTargetFormat>.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTargetVolume_Format_Offset), 0, null, format);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTargetVolume_ClearColor_Offset), 0, null, clearColor);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTargetVolume_bAutoGenerateMipMaps_Offset), 0, null, bAutoGenerateMipMaps);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTargetVolume_bSupportUAVs_Offset), 0, null, bSupportUAVs);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateRenderTargetVolume_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.TextureRenderTargetVolume returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.TextureRenderTargetVolume>.FromNative(IntPtr.Add(ParamsBuffer, CreateRenderTargetVolume_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:CreateRenderTarget2DArray
    static readonly IntPtr CreateRenderTarget2DArray_NativeFunction;
    static readonly int CreateRenderTarget2DArray_ParamsSize;
    static readonly int CreateRenderTarget2DArray_WorldContextObject_Offset;
    static readonly int CreateRenderTarget2DArray_Width_Offset;
    static readonly int CreateRenderTarget2DArray_Height_Offset;
    static readonly int CreateRenderTarget2DArray_Slices_Offset;
    static readonly int CreateRenderTarget2DArray_Format_Offset;
    static readonly int CreateRenderTarget2DArray_ClearColor_Offset;
    static readonly int CreateRenderTarget2DArray_bAutoGenerateMipMaps_Offset;
    static readonly int CreateRenderTarget2DArray_bSupportUAVs_Offset;
    static readonly int CreateRenderTarget2DArray_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.TextureRenderTarget2DArray CreateRenderTarget2DArray(UnrealSharp.CoreUObject.Object worldContextObject, int width = 256, int height = 256, int slices = 1, UnrealSharp.Engine.ETextureRenderTargetFormat format = UnrealSharp.Engine.ETextureRenderTargetFormat.RTF_RGBA16f)
    {
        UnrealSharp.CoreUObject.LinearColor clearColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return CreateRenderTarget2DArray(worldContextObject, width, height, slices, format, clearColor);
    }
    
    public static UnrealSharp.Engine.TextureRenderTarget2DArray CreateRenderTarget2DArray(UnrealSharp.CoreUObject.Object worldContextObject, int width, int height, int slices, UnrealSharp.Engine.ETextureRenderTargetFormat format, UnrealSharp.CoreUObject.LinearColor clearColor, bool bAutoGenerateMipMaps = false, bool bSupportUAVs = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateRenderTarget2DArray_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTarget2DArray_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTarget2DArray_Width_Offset), 0, null, width);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTarget2DArray_Height_Offset), 0, null, height);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTarget2DArray_Slices_Offset), 0, null, slices);
            BlittableMarshaller<UnrealSharp.Engine.ETextureRenderTargetFormat>.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTarget2DArray_Format_Offset), 0, null, format);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTarget2DArray_ClearColor_Offset), 0, null, clearColor);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTarget2DArray_bAutoGenerateMipMaps_Offset), 0, null, bAutoGenerateMipMaps);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTarget2DArray_bSupportUAVs_Offset), 0, null, bSupportUAVs);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateRenderTarget2DArray_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.TextureRenderTarget2DArray returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2DArray>.FromNative(IntPtr.Add(ParamsBuffer, CreateRenderTarget2DArray_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:CreateRenderTarget2D
    static readonly IntPtr CreateRenderTarget2D_NativeFunction;
    static readonly int CreateRenderTarget2D_ParamsSize;
    static readonly int CreateRenderTarget2D_WorldContextObject_Offset;
    static readonly int CreateRenderTarget2D_Width_Offset;
    static readonly int CreateRenderTarget2D_Height_Offset;
    static readonly int CreateRenderTarget2D_Format_Offset;
    static readonly int CreateRenderTarget2D_ClearColor_Offset;
    static readonly int CreateRenderTarget2D_bAutoGenerateMipMaps_Offset;
    static readonly int CreateRenderTarget2D_bSupportUAVs_Offset;
    static readonly int CreateRenderTarget2D_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.TextureRenderTarget2D CreateRenderTarget2D(UnrealSharp.CoreUObject.Object worldContextObject, int width = 256, int height = 256, UnrealSharp.Engine.ETextureRenderTargetFormat format = UnrealSharp.Engine.ETextureRenderTargetFormat.RTF_RGBA16f)
    {
        UnrealSharp.CoreUObject.LinearColor clearColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return CreateRenderTarget2D(worldContextObject, width, height, format, clearColor);
    }
    
    public static UnrealSharp.Engine.TextureRenderTarget2D CreateRenderTarget2D(UnrealSharp.CoreUObject.Object worldContextObject, int width, int height, UnrealSharp.Engine.ETextureRenderTargetFormat format, UnrealSharp.CoreUObject.LinearColor clearColor, bool bAutoGenerateMipMaps = false, bool bSupportUAVs = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateRenderTarget2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTarget2D_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTarget2D_Width_Offset), 0, null, width);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTarget2D_Height_Offset), 0, null, height);
            BlittableMarshaller<UnrealSharp.Engine.ETextureRenderTargetFormat>.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTarget2D_Format_Offset), 0, null, format);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTarget2D_ClearColor_Offset), 0, null, clearColor);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTarget2D_bAutoGenerateMipMaps_Offset), 0, null, bAutoGenerateMipMaps);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CreateRenderTarget2D_bSupportUAVs_Offset), 0, null, bSupportUAVs);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateRenderTarget2D_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.TextureRenderTarget2D returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.FromNative(IntPtr.Add(ParamsBuffer, CreateRenderTarget2D_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:ConvertRenderTargetToTexture2DEditorOnly
    static readonly IntPtr ConvertRenderTargetToTexture2DEditorOnly_NativeFunction;
    static readonly int ConvertRenderTargetToTexture2DEditorOnly_ParamsSize;
    static readonly int ConvertRenderTargetToTexture2DEditorOnly_WorldContextObject_Offset;
    static readonly int ConvertRenderTargetToTexture2DEditorOnly_RenderTarget_Offset;
    static readonly int ConvertRenderTargetToTexture2DEditorOnly_Texture_Offset;
    
    public static void ConvertRenderTargetToTexture2DEditorOnly(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.TextureRenderTarget2D renderTarget, UnrealSharp.Engine.Texture2D texture)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertRenderTargetToTexture2DEditorOnly_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ConvertRenderTargetToTexture2DEditorOnly_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, ConvertRenderTargetToTexture2DEditorOnly_RenderTarget_Offset), 0, null, renderTarget);
            ObjectMarshaller<UnrealSharp.Engine.Texture2D>.ToNative(IntPtr.Add(ParamsBuffer, ConvertRenderTargetToTexture2DEditorOnly_Texture_Offset), 0, null, texture);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConvertRenderTargetToTexture2DEditorOnly_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:ClearRenderTarget2D
    static readonly IntPtr ClearRenderTarget2D_NativeFunction;
    static readonly int ClearRenderTarget2D_ParamsSize;
    static readonly int ClearRenderTarget2D_WorldContextObject_Offset;
    static readonly int ClearRenderTarget2D_TextureRenderTarget_Offset;
    static readonly int ClearRenderTarget2D_ClearColor_Offset;
    
    public static void ClearRenderTarget2D(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.TextureRenderTarget2D textureRenderTarget)
    {
        UnrealSharp.CoreUObject.LinearColor clearColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        ClearRenderTarget2D(worldContextObject, textureRenderTarget, clearColor);
    }
    
    public static void ClearRenderTarget2D(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.TextureRenderTarget2D textureRenderTarget, UnrealSharp.CoreUObject.LinearColor clearColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClearRenderTarget2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ClearRenderTarget2D_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, ClearRenderTarget2D_TextureRenderTarget_Offset), 0, null, textureRenderTarget);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, ClearRenderTarget2D_ClearColor_Offset), 0, null, clearColor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ClearRenderTarget2D_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:CalculateProjectionMatrix
    static readonly IntPtr CalculateProjectionMatrix_NativeFunction;
    static readonly int CalculateProjectionMatrix_ParamsSize;
    static readonly int CalculateProjectionMatrix_MinimalViewInfo_Offset;
    static readonly int CalculateProjectionMatrix_ReturnValue_Offset;
    
    public static System.DoubleNumerics.Matrix4x4 CalculateProjectionMatrix(UnrealSharp.Engine.MinimalViewInfo minimalViewInfo)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CalculateProjectionMatrix_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.MinimalViewInfoMarshaler.ToNative(IntPtr.Add(ParamsBuffer, CalculateProjectionMatrix_MinimalViewInfo_Offset), 0, null, minimalViewInfo);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CalculateProjectionMatrix_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Matrix4x4 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(ParamsBuffer, CalculateProjectionMatrix_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetRenderingLibrary:BeginDrawCanvasToRenderTarget
    static readonly IntPtr BeginDrawCanvasToRenderTarget_NativeFunction;
    static readonly int BeginDrawCanvasToRenderTarget_ParamsSize;
    static readonly int BeginDrawCanvasToRenderTarget_WorldContextObject_Offset;
    static readonly int BeginDrawCanvasToRenderTarget_TextureRenderTarget_Offset;
    static readonly int BeginDrawCanvasToRenderTarget_Canvas_Offset;
    static readonly int BeginDrawCanvasToRenderTarget_Size_Offset;
    static readonly int BeginDrawCanvasToRenderTarget_Context_Offset;
    
    public static void BeginDrawCanvasToRenderTarget(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.TextureRenderTarget2D textureRenderTarget, out UnrealSharp.Engine.Canvas canvas, out System.DoubleNumerics.Vector2 size, out UnrealSharp.Engine.DrawToRenderTargetContext context)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BeginDrawCanvasToRenderTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, BeginDrawCanvasToRenderTarget_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, BeginDrawCanvasToRenderTarget_TextureRenderTarget_Offset), 0, null, textureRenderTarget);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BeginDrawCanvasToRenderTarget_NativeFunction, ParamsBuffer);
            
            canvas = ObjectMarshaller<UnrealSharp.Engine.Canvas>.FromNative(IntPtr.Add(ParamsBuffer, BeginDrawCanvasToRenderTarget_Canvas_Offset), 0, null);
            size = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, BeginDrawCanvasToRenderTarget_Size_Offset), 0, null);
            context = UnrealSharp.Engine.DrawToRenderTargetContextMarshaler.FromNative(IntPtr.Add(ParamsBuffer, BeginDrawCanvasToRenderTarget_Context_Offset), 0, null);
            
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class StringLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static StringLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("KismetStringLibrary");
        
        
        TrimTrailing_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TrimTrailing");
        TrimTrailing_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TrimTrailing_NativeFunction);
        TrimTrailing_SourceString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TrimTrailing_NativeFunction, "SourceString");
        TrimTrailing_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TrimTrailing_NativeFunction, "ReturnValue");
        Trim_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Trim");
        Trim_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Trim_NativeFunction);
        Trim_SourceString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Trim_NativeFunction, "SourceString");
        Trim_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Trim_NativeFunction, "ReturnValue");
        ToUpper_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ToUpper");
        ToUpper_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ToUpper_NativeFunction);
        ToUpper_SourceString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ToUpper_NativeFunction, "SourceString");
        ToUpper_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ToUpper_NativeFunction, "ReturnValue");
        ToLower_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ToLower");
        ToLower_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ToLower_NativeFunction);
        ToLower_SourceString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ToLower_NativeFunction, "SourceString");
        ToLower_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ToLower_NativeFunction, "ReturnValue");
        TimeSecondsToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TimeSecondsToString");
        TimeSecondsToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TimeSecondsToString_NativeFunction);
        TimeSecondsToString_InSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TimeSecondsToString_NativeFunction, "InSeconds");
        TimeSecondsToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TimeSecondsToString_NativeFunction, "ReturnValue");
        StartsWith_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartsWith");
        StartsWith_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StartsWith_NativeFunction);
        StartsWith_SourceString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartsWith_NativeFunction, "SourceString");
        StartsWith_InPrefix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartsWith_NativeFunction, "InPrefix");
        StartsWith_SearchCase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartsWith_NativeFunction, "SearchCase");
        StartsWith_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartsWith_NativeFunction, "ReturnValue");
        Split_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Split");
        Split_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Split_NativeFunction);
        Split_SourceString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Split_NativeFunction, "SourceString");
        Split_InStr_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Split_NativeFunction, "InStr");
        Split_LeftS_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Split_NativeFunction, "LeftS");
        Split_RightS_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Split_NativeFunction, "RightS");
        Split_SearchCase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Split_NativeFunction, "SearchCase");
        Split_SearchDir_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Split_NativeFunction, "SearchDir");
        Split_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Split_NativeFunction, "ReturnValue");
        RightPad_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RightPad");
        RightPad_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RightPad_NativeFunction);
        RightPad_SourceString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RightPad_NativeFunction, "SourceString");
        RightPad_ChCount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RightPad_NativeFunction, "ChCount");
        RightPad_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RightPad_NativeFunction, "ReturnValue");
        RightChop_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RightChop");
        RightChop_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RightChop_NativeFunction);
        RightChop_SourceString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RightChop_NativeFunction, "SourceString");
        RightChop_Count_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RightChop_NativeFunction, "Count");
        RightChop_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RightChop_NativeFunction, "ReturnValue");
        Right_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Right");
        Right_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Right_NativeFunction);
        Right_SourceString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Right_NativeFunction, "SourceString");
        Right_Count_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Right_NativeFunction, "Count");
        Right_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Right_NativeFunction, "ReturnValue");
        Reverse_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Reverse");
        Reverse_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Reverse_NativeFunction);
        Reverse_SourceString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Reverse_NativeFunction, "SourceString");
        Reverse_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Reverse_NativeFunction, "ReturnValue");
        ReplaceInline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReplaceInline");
        ReplaceInline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReplaceInline_NativeFunction);
        ReplaceInline_SourceString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceInline_NativeFunction, "SourceString");
        ReplaceInline_SearchText_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceInline_NativeFunction, "SearchText");
        ReplaceInline_ReplacementText_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceInline_NativeFunction, "ReplacementText");
        ReplaceInline_SearchCase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceInline_NativeFunction, "SearchCase");
        ReplaceInline_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceInline_NativeFunction, "ReturnValue");
        Replace_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Replace");
        Replace_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Replace_NativeFunction);
        Replace_SourceString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Replace_NativeFunction, "SourceString");
        Replace_From_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Replace_NativeFunction, "From");
        Replace_To_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Replace_NativeFunction, "To");
        Replace_SearchCase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Replace_NativeFunction, "SearchCase");
        Replace_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Replace_NativeFunction, "ReturnValue");
        NotEqual_StrStr_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_StrStr");
        NotEqual_StrStr_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_StrStr_NativeFunction);
        NotEqual_StrStr_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_StrStr_NativeFunction, "A");
        NotEqual_StrStr_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_StrStr_NativeFunction, "B");
        NotEqual_StrStr_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_StrStr_NativeFunction, "ReturnValue");
        NotEqual_StriStri_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_StriStri");
        NotEqual_StriStri_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_StriStri_NativeFunction);
        NotEqual_StriStri_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_StriStri_NativeFunction, "A");
        NotEqual_StriStri_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_StriStri_NativeFunction, "B");
        NotEqual_StriStri_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_StriStri_NativeFunction, "ReturnValue");
        Mid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Mid");
        Mid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Mid_NativeFunction);
        Mid_SourceString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Mid_NativeFunction, "SourceString");
        Mid_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Mid_NativeFunction, "Start");
        Mid_Count_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Mid_NativeFunction, "Count");
        Mid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Mid_NativeFunction, "ReturnValue");
        MatchesWildcard_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MatchesWildcard");
        MatchesWildcard_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MatchesWildcard_NativeFunction);
        MatchesWildcard_SourceString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MatchesWildcard_NativeFunction, "SourceString");
        MatchesWildcard_Wildcard_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MatchesWildcard_NativeFunction, "Wildcard");
        MatchesWildcard_SearchCase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MatchesWildcard_NativeFunction, "SearchCase");
        MatchesWildcard_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MatchesWildcard_NativeFunction, "ReturnValue");
        Len_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Len");
        Len_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Len_NativeFunction);
        Len_S_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Len_NativeFunction, "S");
        Len_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Len_NativeFunction, "ReturnValue");
        LeftPad_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LeftPad");
        LeftPad_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LeftPad_NativeFunction);
        LeftPad_SourceString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LeftPad_NativeFunction, "SourceString");
        LeftPad_ChCount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LeftPad_NativeFunction, "ChCount");
        LeftPad_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LeftPad_NativeFunction, "ReturnValue");
        LeftChop_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LeftChop");
        LeftChop_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LeftChop_NativeFunction);
        LeftChop_SourceString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LeftChop_NativeFunction, "SourceString");
        LeftChop_Count_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LeftChop_NativeFunction, "Count");
        LeftChop_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LeftChop_NativeFunction, "ReturnValue");
        Left_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Left");
        Left_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Left_NativeFunction);
        Left_SourceString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Left_NativeFunction, "SourceString");
        Left_Count_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Left_NativeFunction, "Count");
        Left_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Left_NativeFunction, "ReturnValue");
        IsNumeric_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsNumeric");
        IsNumeric_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsNumeric_NativeFunction);
        IsNumeric_SourceString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsNumeric_NativeFunction, "SourceString");
        IsNumeric_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsNumeric_NativeFunction, "ReturnValue");
        IsEmpty_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsEmpty");
        IsEmpty_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsEmpty_NativeFunction);
        IsEmpty_InString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsEmpty_NativeFunction, "InString");
        IsEmpty_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsEmpty_NativeFunction, "ReturnValue");
        GetSubstring_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSubstring");
        GetSubstring_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSubstring_NativeFunction);
        GetSubstring_SourceString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSubstring_NativeFunction, "SourceString");
        GetSubstring_StartIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSubstring_NativeFunction, "StartIndex");
        GetSubstring_Length_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSubstring_NativeFunction, "Length");
        GetSubstring_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSubstring_NativeFunction, "ReturnValue");
        GetCharacterAsNumber_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCharacterAsNumber");
        GetCharacterAsNumber_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCharacterAsNumber_NativeFunction);
        GetCharacterAsNumber_SourceString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCharacterAsNumber_NativeFunction, "SourceString");
        GetCharacterAsNumber_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCharacterAsNumber_NativeFunction, "Index");
        GetCharacterAsNumber_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCharacterAsNumber_NativeFunction, "ReturnValue");
        FindSubstring_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindSubstring");
        FindSubstring_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindSubstring_NativeFunction);
        FindSubstring_SearchIn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindSubstring_NativeFunction, "SearchIn");
        FindSubstring_Substring_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindSubstring_NativeFunction, "Substring");
        FindSubstring_bUseCase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindSubstring_NativeFunction, "bUseCase");
        FindSubstring_bSearchFromEnd_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindSubstring_NativeFunction, "bSearchFromEnd");
        FindSubstring_StartPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindSubstring_NativeFunction, "StartPosition");
        FindSubstring_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindSubstring_NativeFunction, "ReturnValue");
        EqualEqual_StrStr_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_StrStr");
        EqualEqual_StrStr_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_StrStr_NativeFunction);
        EqualEqual_StrStr_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_StrStr_NativeFunction, "A");
        EqualEqual_StrStr_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_StrStr_NativeFunction, "B");
        EqualEqual_StrStr_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_StrStr_NativeFunction, "ReturnValue");
        EqualEqual_StriStri_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_StriStri");
        EqualEqual_StriStri_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_StriStri_NativeFunction);
        EqualEqual_StriStri_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_StriStri_NativeFunction, "A");
        EqualEqual_StriStri_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_StriStri_NativeFunction, "B");
        EqualEqual_StriStri_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_StriStri_NativeFunction, "ReturnValue");
        EndsWith_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EndsWith");
        EndsWith_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EndsWith_NativeFunction);
        EndsWith_SourceString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EndsWith_NativeFunction, "SourceString");
        EndsWith_InSuffix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EndsWith_NativeFunction, "InSuffix");
        EndsWith_SearchCase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EndsWith_NativeFunction, "SearchCase");
        EndsWith_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EndsWith_NativeFunction, "ReturnValue");
        Conv_VectorToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_VectorToString");
        Conv_VectorToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_VectorToString_NativeFunction);
        Conv_VectorToString_InVec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_VectorToString_NativeFunction, "InVec");
        Conv_VectorToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_VectorToString_NativeFunction, "ReturnValue");
        Conv_Vector3fToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_Vector3fToString");
        Conv_Vector3fToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_Vector3fToString_NativeFunction);
        Conv_Vector3fToString_InVec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Vector3fToString_NativeFunction, "InVec");
        Conv_Vector3fToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Vector3fToString_NativeFunction, "ReturnValue");
        Conv_Vector2dToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_Vector2dToString");
        Conv_Vector2dToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_Vector2dToString_NativeFunction);
        Conv_Vector2dToString_InVec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Vector2dToString_NativeFunction, "InVec");
        Conv_Vector2dToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Vector2dToString_NativeFunction, "ReturnValue");
        Conv_TransformToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_TransformToString");
        Conv_TransformToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_TransformToString_NativeFunction);
        Conv_TransformToString_InTrans_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_TransformToString_NativeFunction, "InTrans");
        Conv_TransformToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_TransformToString_NativeFunction, "ReturnValue");
        Conv_StringToVector3f_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_StringToVector3f");
        Conv_StringToVector3f_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_StringToVector3f_NativeFunction);
        Conv_StringToVector3f_InString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToVector3f_NativeFunction, "InString");
        Conv_StringToVector3f_OutConvertedVector_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToVector3f_NativeFunction, "OutConvertedVector");
        Conv_StringToVector3f_OutIsValid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToVector3f_NativeFunction, "OutIsValid");
        Conv_StringToVector2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_StringToVector2D");
        Conv_StringToVector2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_StringToVector2D_NativeFunction);
        Conv_StringToVector2D_InString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToVector2D_NativeFunction, "InString");
        Conv_StringToVector2D_OutConvertedVector2D_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToVector2D_NativeFunction, "OutConvertedVector2D");
        Conv_StringToVector2D_OutIsValid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToVector2D_NativeFunction, "OutIsValid");
        Conv_StringToVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_StringToVector");
        Conv_StringToVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_StringToVector_NativeFunction);
        Conv_StringToVector_InString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToVector_NativeFunction, "InString");
        Conv_StringToVector_OutConvertedVector_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToVector_NativeFunction, "OutConvertedVector");
        Conv_StringToVector_OutIsValid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToVector_NativeFunction, "OutIsValid");
        Conv_StringToRotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_StringToRotator");
        Conv_StringToRotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_StringToRotator_NativeFunction);
        Conv_StringToRotator_InString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToRotator_NativeFunction, "InString");
        Conv_StringToRotator_OutConvertedRotator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToRotator_NativeFunction, "OutConvertedRotator");
        Conv_StringToRotator_OutIsValid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToRotator_NativeFunction, "OutIsValid");
        Conv_StringToName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_StringToName");
        Conv_StringToName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_StringToName_NativeFunction);
        Conv_StringToName_InString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToName_NativeFunction, "InString");
        Conv_StringToName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToName_NativeFunction, "ReturnValue");
        Conv_StringToInt64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_StringToInt64");
        Conv_StringToInt64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_StringToInt64_NativeFunction);
        Conv_StringToInt64_InString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToInt64_NativeFunction, "InString");
        Conv_StringToInt64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToInt64_NativeFunction, "ReturnValue");
        Conv_StringToInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_StringToInt");
        Conv_StringToInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_StringToInt_NativeFunction);
        Conv_StringToInt_InString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToInt_NativeFunction, "InString");
        Conv_StringToInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToInt_NativeFunction, "ReturnValue");
        Conv_StringToDouble_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_StringToDouble");
        Conv_StringToDouble_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_StringToDouble_NativeFunction);
        Conv_StringToDouble_InString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToDouble_NativeFunction, "InString");
        Conv_StringToDouble_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToDouble_NativeFunction, "ReturnValue");
        Conv_StringToColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_StringToColor");
        Conv_StringToColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_StringToColor_NativeFunction);
        Conv_StringToColor_InString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToColor_NativeFunction, "InString");
        Conv_StringToColor_OutConvertedColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToColor_NativeFunction, "OutConvertedColor");
        Conv_StringToColor_OutIsValid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_StringToColor_NativeFunction, "OutIsValid");
        Conv_RotatorToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_RotatorToString");
        Conv_RotatorToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_RotatorToString_NativeFunction);
        Conv_RotatorToString_InRot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_RotatorToString_NativeFunction, "InRot");
        Conv_RotatorToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_RotatorToString_NativeFunction, "ReturnValue");
        Conv_PlatformUserIdToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_PlatformUserIdToString");
        Conv_PlatformUserIdToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_PlatformUserIdToString_NativeFunction);
        Conv_PlatformUserIdToString_InPlatformUserId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_PlatformUserIdToString_NativeFunction, "InPlatformUserId");
        Conv_PlatformUserIdToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_PlatformUserIdToString_NativeFunction, "ReturnValue");
        Conv_ObjectToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_ObjectToString");
        Conv_ObjectToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_ObjectToString_NativeFunction);
        Conv_ObjectToString_InObj_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_ObjectToString_NativeFunction, "InObj");
        Conv_ObjectToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_ObjectToString_NativeFunction, "ReturnValue");
        Conv_NameToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_NameToString");
        Conv_NameToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_NameToString_NativeFunction);
        Conv_NameToString_InName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_NameToString_NativeFunction, "InName");
        Conv_NameToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_NameToString_NativeFunction, "ReturnValue");
        Conv_MatrixToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_MatrixToString");
        Conv_MatrixToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_MatrixToString_NativeFunction);
        Conv_MatrixToString_InMatrix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_MatrixToString_NativeFunction, "InMatrix");
        Conv_MatrixToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_MatrixToString_NativeFunction, "ReturnValue");
        Conv_IntVectorToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_IntVectorToString");
        Conv_IntVectorToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_IntVectorToString_NativeFunction);
        Conv_IntVectorToString_InIntVec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntVectorToString_NativeFunction, "InIntVec");
        Conv_IntVectorToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntVectorToString_NativeFunction, "ReturnValue");
        Conv_IntToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_IntToString");
        Conv_IntToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_IntToString_NativeFunction);
        Conv_IntToString_InInt_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntToString_NativeFunction, "InInt");
        Conv_IntToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntToString_NativeFunction, "ReturnValue");
        Conv_IntPointToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_IntPointToString");
        Conv_IntPointToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_IntPointToString_NativeFunction);
        Conv_IntPointToString_InIntPoint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntPointToString_NativeFunction, "InIntPoint");
        Conv_IntPointToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_IntPointToString_NativeFunction, "ReturnValue");
        Conv_Int64ToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_Int64ToString");
        Conv_Int64ToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_Int64ToString_NativeFunction);
        Conv_Int64ToString_InInt_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Int64ToString_NativeFunction, "InInt");
        Conv_Int64ToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_Int64ToString_NativeFunction, "ReturnValue");
        Conv_InputDeviceIdToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_InputDeviceIdToString");
        Conv_InputDeviceIdToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_InputDeviceIdToString_NativeFunction);
        Conv_InputDeviceIdToString_InDeviceId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_InputDeviceIdToString_NativeFunction, "InDeviceId");
        Conv_InputDeviceIdToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_InputDeviceIdToString_NativeFunction, "ReturnValue");
        Conv_DoubleToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_DoubleToString");
        Conv_DoubleToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_DoubleToString_NativeFunction);
        Conv_DoubleToString_InDouble_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_DoubleToString_NativeFunction, "InDouble");
        Conv_DoubleToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_DoubleToString_NativeFunction, "ReturnValue");
        Conv_ColorToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_ColorToString");
        Conv_ColorToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_ColorToString_NativeFunction);
        Conv_ColorToString_InColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_ColorToString_NativeFunction, "InColor");
        Conv_ColorToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_ColorToString_NativeFunction, "ReturnValue");
        Conv_ByteToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_ByteToString");
        Conv_ByteToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_ByteToString_NativeFunction);
        Conv_ByteToString_InByte_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_ByteToString_NativeFunction, "InByte");
        Conv_ByteToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_ByteToString_NativeFunction, "ReturnValue");
        Conv_BoolToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_BoolToString");
        Conv_BoolToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_BoolToString_NativeFunction);
        Conv_BoolToString_InBool_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_BoolToString_NativeFunction, "InBool");
        Conv_BoolToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_BoolToString_NativeFunction, "ReturnValue");
        Contains_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Contains");
        Contains_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Contains_NativeFunction);
        Contains_SearchIn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Contains_NativeFunction, "SearchIn");
        Contains_Substring_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Contains_NativeFunction, "Substring");
        Contains_bUseCase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Contains_NativeFunction, "bUseCase");
        Contains_bSearchFromEnd_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Contains_NativeFunction, "bSearchFromEnd");
        Contains_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Contains_NativeFunction, "ReturnValue");
        Concat_StrStr_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Concat_StrStr");
        Concat_StrStr_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Concat_StrStr_NativeFunction);
        Concat_StrStr_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Concat_StrStr_NativeFunction, "A");
        Concat_StrStr_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Concat_StrStr_NativeFunction, "B");
        Concat_StrStr_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Concat_StrStr_NativeFunction, "ReturnValue");
        BuildString_Vector2d_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BuildString_Vector2d");
        BuildString_Vector2d_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BuildString_Vector2d_NativeFunction);
        BuildString_Vector2d_AppendTo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Vector2d_NativeFunction, "AppendTo");
        BuildString_Vector2d_Prefix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Vector2d_NativeFunction, "Prefix");
        BuildString_Vector2d_InVector2d_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Vector2d_NativeFunction, "InVector2d");
        BuildString_Vector2d_Suffix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Vector2d_NativeFunction, "Suffix");
        BuildString_Vector2d_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Vector2d_NativeFunction, "ReturnValue");
        BuildString_Vector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BuildString_Vector");
        BuildString_Vector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BuildString_Vector_NativeFunction);
        BuildString_Vector_AppendTo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Vector_NativeFunction, "AppendTo");
        BuildString_Vector_Prefix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Vector_NativeFunction, "Prefix");
        BuildString_Vector_InVector_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Vector_NativeFunction, "InVector");
        BuildString_Vector_Suffix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Vector_NativeFunction, "Suffix");
        BuildString_Vector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Vector_NativeFunction, "ReturnValue");
        BuildString_Rotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BuildString_Rotator");
        BuildString_Rotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BuildString_Rotator_NativeFunction);
        BuildString_Rotator_AppendTo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Rotator_NativeFunction, "AppendTo");
        BuildString_Rotator_Prefix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Rotator_NativeFunction, "Prefix");
        BuildString_Rotator_InRot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Rotator_NativeFunction, "InRot");
        BuildString_Rotator_Suffix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Rotator_NativeFunction, "Suffix");
        BuildString_Rotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Rotator_NativeFunction, "ReturnValue");
        BuildString_Object_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BuildString_Object");
        BuildString_Object_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BuildString_Object_NativeFunction);
        BuildString_Object_AppendTo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Object_NativeFunction, "AppendTo");
        BuildString_Object_Prefix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Object_NativeFunction, "Prefix");
        BuildString_Object_InObj_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Object_NativeFunction, "InObj");
        BuildString_Object_Suffix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Object_NativeFunction, "Suffix");
        BuildString_Object_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Object_NativeFunction, "ReturnValue");
        BuildString_Name_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BuildString_Name");
        BuildString_Name_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BuildString_Name_NativeFunction);
        BuildString_Name_AppendTo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Name_NativeFunction, "AppendTo");
        BuildString_Name_Prefix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Name_NativeFunction, "Prefix");
        BuildString_Name_InName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Name_NativeFunction, "InName");
        BuildString_Name_Suffix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Name_NativeFunction, "Suffix");
        BuildString_Name_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Name_NativeFunction, "ReturnValue");
        BuildString_IntVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BuildString_IntVector");
        BuildString_IntVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BuildString_IntVector_NativeFunction);
        BuildString_IntVector_AppendTo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_IntVector_NativeFunction, "AppendTo");
        BuildString_IntVector_Prefix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_IntVector_NativeFunction, "Prefix");
        BuildString_IntVector_InIntVector_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_IntVector_NativeFunction, "InIntVector");
        BuildString_IntVector_Suffix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_IntVector_NativeFunction, "Suffix");
        BuildString_IntVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_IntVector_NativeFunction, "ReturnValue");
        BuildString_Int_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BuildString_Int");
        BuildString_Int_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BuildString_Int_NativeFunction);
        BuildString_Int_AppendTo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Int_NativeFunction, "AppendTo");
        BuildString_Int_Prefix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Int_NativeFunction, "Prefix");
        BuildString_Int_InInt_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Int_NativeFunction, "InInt");
        BuildString_Int_Suffix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Int_NativeFunction, "Suffix");
        BuildString_Int_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Int_NativeFunction, "ReturnValue");
        BuildString_Double_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BuildString_Double");
        BuildString_Double_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BuildString_Double_NativeFunction);
        BuildString_Double_AppendTo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Double_NativeFunction, "AppendTo");
        BuildString_Double_Prefix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Double_NativeFunction, "Prefix");
        BuildString_Double_InDouble_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Double_NativeFunction, "InDouble");
        BuildString_Double_Suffix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Double_NativeFunction, "Suffix");
        BuildString_Double_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Double_NativeFunction, "ReturnValue");
        BuildString_Color_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BuildString_Color");
        BuildString_Color_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BuildString_Color_NativeFunction);
        BuildString_Color_AppendTo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Color_NativeFunction, "AppendTo");
        BuildString_Color_Prefix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Color_NativeFunction, "Prefix");
        BuildString_Color_InColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Color_NativeFunction, "InColor");
        BuildString_Color_Suffix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Color_NativeFunction, "Suffix");
        BuildString_Color_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Color_NativeFunction, "ReturnValue");
        BuildString_Bool_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BuildString_Bool");
        BuildString_Bool_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BuildString_Bool_NativeFunction);
        BuildString_Bool_AppendTo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Bool_NativeFunction, "AppendTo");
        BuildString_Bool_Prefix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Bool_NativeFunction, "Prefix");
        BuildString_Bool_InBool_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Bool_NativeFunction, "InBool");
        BuildString_Bool_Suffix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Bool_NativeFunction, "Suffix");
        BuildString_Bool_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BuildString_Bool_NativeFunction, "ReturnValue");
        
        
    }
    
    protected StringLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.KismetStringLibrary:TrimTrailing
    static readonly IntPtr TrimTrailing_NativeFunction;
    static readonly int TrimTrailing_ParamsSize;
    static readonly int TrimTrailing_SourceString_Offset;
    static readonly int TrimTrailing_ReturnValue_Offset;
    
    public static string TrimTrailing(string sourceString)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TrimTrailing_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceString_NativePtr = IntPtr.Add(ParamsBuffer,TrimTrailing_SourceString_Offset);
            StringMarshaller.ToNative(SourceString_NativePtr,0,null,sourceString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, TrimTrailing_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,TrimTrailing_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(SourceString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Trim
    static readonly IntPtr Trim_NativeFunction;
    static readonly int Trim_ParamsSize;
    static readonly int Trim_SourceString_Offset;
    static readonly int Trim_ReturnValue_Offset;
    
    public static string Trim(string sourceString)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Trim_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceString_NativePtr = IntPtr.Add(ParamsBuffer,Trim_SourceString_Offset);
            StringMarshaller.ToNative(SourceString_NativePtr,0,null,sourceString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Trim_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Trim_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(SourceString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:ToUpper
    static readonly IntPtr ToUpper_NativeFunction;
    static readonly int ToUpper_ParamsSize;
    static readonly int ToUpper_SourceString_Offset;
    static readonly int ToUpper_ReturnValue_Offset;
    
    public static string ToUpper(string sourceString)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ToUpper_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceString_NativePtr = IntPtr.Add(ParamsBuffer,ToUpper_SourceString_Offset);
            StringMarshaller.ToNative(SourceString_NativePtr,0,null,sourceString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ToUpper_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,ToUpper_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(SourceString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:ToLower
    static readonly IntPtr ToLower_NativeFunction;
    static readonly int ToLower_ParamsSize;
    static readonly int ToLower_SourceString_Offset;
    static readonly int ToLower_ReturnValue_Offset;
    
    public static string ToLower(string sourceString)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ToLower_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceString_NativePtr = IntPtr.Add(ParamsBuffer,ToLower_SourceString_Offset);
            StringMarshaller.ToNative(SourceString_NativePtr,0,null,sourceString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ToLower_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,ToLower_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(SourceString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:TimeSecondsToString
    static readonly IntPtr TimeSecondsToString_NativeFunction;
    static readonly int TimeSecondsToString_ParamsSize;
    static readonly int TimeSecondsToString_InSeconds_Offset;
    static readonly int TimeSecondsToString_ReturnValue_Offset;
    
    public static string TimeSecondsToString(float inSeconds)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TimeSecondsToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, TimeSecondsToString_InSeconds_Offset), 0, null, inSeconds);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, TimeSecondsToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,TimeSecondsToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:StartsWith
    static readonly IntPtr StartsWith_NativeFunction;
    static readonly int StartsWith_ParamsSize;
    static readonly int StartsWith_SourceString_Offset;
    static readonly int StartsWith_InPrefix_Offset;
    static readonly int StartsWith_SearchCase_Offset;
    static readonly int StartsWith_ReturnValue_Offset;
    
    public static bool StartsWith(string sourceString, string inPrefix, UnrealSharp.CoreUObject.ESearchCase searchCase = UnrealSharp.CoreUObject.ESearchCase.IgnoreCase)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StartsWith_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceString_NativePtr = IntPtr.Add(ParamsBuffer,StartsWith_SourceString_Offset);
            StringMarshaller.ToNative(SourceString_NativePtr,0,null,sourceString);
            IntPtr InPrefix_NativePtr = IntPtr.Add(ParamsBuffer,StartsWith_InPrefix_Offset);
            StringMarshaller.ToNative(InPrefix_NativePtr,0,null,inPrefix);
            BlittableMarshaller<UnrealSharp.CoreUObject.ESearchCase>.ToNative(IntPtr.Add(ParamsBuffer, StartsWith_SearchCase_Offset), 0, null, searchCase);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, StartsWith_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, StartsWith_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SourceString_NativePtr, 0);
            StringMarshaller.DestructInstance(InPrefix_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Split
    static readonly IntPtr Split_NativeFunction;
    static readonly int Split_ParamsSize;
    static readonly int Split_SourceString_Offset;
    static readonly int Split_InStr_Offset;
    static readonly int Split_LeftS_Offset;
    static readonly int Split_RightS_Offset;
    static readonly int Split_SearchCase_Offset;
    static readonly int Split_SearchDir_Offset;
    static readonly int Split_ReturnValue_Offset;
    
    public static bool Split(string sourceString, string inStr, out string leftS, out string rightS, UnrealSharp.CoreUObject.ESearchCase searchCase = UnrealSharp.CoreUObject.ESearchCase.IgnoreCase, UnrealSharp.CoreUObject.ESearchDir searchDir = UnrealSharp.CoreUObject.ESearchDir.FromStart)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Split_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceString_NativePtr = IntPtr.Add(ParamsBuffer,Split_SourceString_Offset);
            StringMarshaller.ToNative(SourceString_NativePtr,0,null,sourceString);
            IntPtr InStr_NativePtr = IntPtr.Add(ParamsBuffer,Split_InStr_Offset);
            StringMarshaller.ToNative(InStr_NativePtr,0,null,inStr);
            BlittableMarshaller<UnrealSharp.CoreUObject.ESearchCase>.ToNative(IntPtr.Add(ParamsBuffer, Split_SearchCase_Offset), 0, null, searchCase);
            BlittableMarshaller<UnrealSharp.CoreUObject.ESearchDir>.ToNative(IntPtr.Add(ParamsBuffer, Split_SearchDir_Offset), 0, null, searchDir);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Split_NativeFunction, ParamsBuffer);
            
            IntPtr LeftS_NativePtr = IntPtr.Add(ParamsBuffer,Split_LeftS_Offset);
            leftS = StringMarshaller.FromNative(LeftS_NativePtr,0,null);
            StringMarshaller.DestructInstance(LeftS_NativePtr, 0);
            IntPtr RightS_NativePtr = IntPtr.Add(ParamsBuffer,Split_RightS_Offset);
            rightS = StringMarshaller.FromNative(RightS_NativePtr,0,null);
            StringMarshaller.DestructInstance(RightS_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Split_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SourceString_NativePtr, 0);
            StringMarshaller.DestructInstance(InStr_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:RightPad
    static readonly IntPtr RightPad_NativeFunction;
    static readonly int RightPad_ParamsSize;
    static readonly int RightPad_SourceString_Offset;
    static readonly int RightPad_ChCount_Offset;
    static readonly int RightPad_ReturnValue_Offset;
    
    public static string RightPad(string sourceString, int chCount)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RightPad_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceString_NativePtr = IntPtr.Add(ParamsBuffer,RightPad_SourceString_Offset);
            StringMarshaller.ToNative(SourceString_NativePtr,0,null,sourceString);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, RightPad_ChCount_Offset), 0, null, chCount);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RightPad_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,RightPad_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(SourceString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:RightChop
    static readonly IntPtr RightChop_NativeFunction;
    static readonly int RightChop_ParamsSize;
    static readonly int RightChop_SourceString_Offset;
    static readonly int RightChop_Count_Offset;
    static readonly int RightChop_ReturnValue_Offset;
    
    public static string RightChop(string sourceString, int count)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RightChop_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceString_NativePtr = IntPtr.Add(ParamsBuffer,RightChop_SourceString_Offset);
            StringMarshaller.ToNative(SourceString_NativePtr,0,null,sourceString);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, RightChop_Count_Offset), 0, null, count);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RightChop_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,RightChop_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(SourceString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Right
    static readonly IntPtr Right_NativeFunction;
    static readonly int Right_ParamsSize;
    static readonly int Right_SourceString_Offset;
    static readonly int Right_Count_Offset;
    static readonly int Right_ReturnValue_Offset;
    
    public static string Right(string sourceString, int count)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Right_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceString_NativePtr = IntPtr.Add(ParamsBuffer,Right_SourceString_Offset);
            StringMarshaller.ToNative(SourceString_NativePtr,0,null,sourceString);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Right_Count_Offset), 0, null, count);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Right_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Right_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(SourceString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Reverse
    static readonly IntPtr Reverse_NativeFunction;
    static readonly int Reverse_ParamsSize;
    static readonly int Reverse_SourceString_Offset;
    static readonly int Reverse_ReturnValue_Offset;
    
    public static string Reverse(string sourceString)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Reverse_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceString_NativePtr = IntPtr.Add(ParamsBuffer,Reverse_SourceString_Offset);
            StringMarshaller.ToNative(SourceString_NativePtr,0,null,sourceString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Reverse_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Reverse_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(SourceString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:ReplaceInline
    static readonly IntPtr ReplaceInline_NativeFunction;
    static readonly int ReplaceInline_ParamsSize;
    static readonly int ReplaceInline_SourceString_Offset;
    static readonly int ReplaceInline_SearchText_Offset;
    static readonly int ReplaceInline_ReplacementText_Offset;
    static readonly int ReplaceInline_SearchCase_Offset;
    static readonly int ReplaceInline_ReturnValue_Offset;
    
    public static int ReplaceInline(ref string sourceString, string searchText, string replacementText, UnrealSharp.CoreUObject.ESearchCase searchCase = UnrealSharp.CoreUObject.ESearchCase.IgnoreCase)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReplaceInline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceString_NativePtr = IntPtr.Add(ParamsBuffer,ReplaceInline_SourceString_Offset);
            StringMarshaller.ToNative(SourceString_NativePtr,0,null,sourceString);
            IntPtr SearchText_NativePtr = IntPtr.Add(ParamsBuffer,ReplaceInline_SearchText_Offset);
            StringMarshaller.ToNative(SearchText_NativePtr,0,null,searchText);
            IntPtr ReplacementText_NativePtr = IntPtr.Add(ParamsBuffer,ReplaceInline_ReplacementText_Offset);
            StringMarshaller.ToNative(ReplacementText_NativePtr,0,null,replacementText);
            BlittableMarshaller<UnrealSharp.CoreUObject.ESearchCase>.ToNative(IntPtr.Add(ParamsBuffer, ReplaceInline_SearchCase_Offset), 0, null, searchCase);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ReplaceInline_NativeFunction, ParamsBuffer);
            
            sourceString = StringMarshaller.FromNative(SourceString_NativePtr,0,null);
            StringMarshaller.DestructInstance(SourceString_NativePtr, 0);
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, ReplaceInline_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SearchText_NativePtr, 0);
            StringMarshaller.DestructInstance(ReplacementText_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Replace
    static readonly IntPtr Replace_NativeFunction;
    static readonly int Replace_ParamsSize;
    static readonly int Replace_SourceString_Offset;
    static readonly int Replace_From_Offset;
    static readonly int Replace_To_Offset;
    static readonly int Replace_SearchCase_Offset;
    static readonly int Replace_ReturnValue_Offset;
    
    public static string Replace(string sourceString, string from, string to, UnrealSharp.CoreUObject.ESearchCase searchCase = UnrealSharp.CoreUObject.ESearchCase.IgnoreCase)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Replace_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceString_NativePtr = IntPtr.Add(ParamsBuffer,Replace_SourceString_Offset);
            StringMarshaller.ToNative(SourceString_NativePtr,0,null,sourceString);
            IntPtr From_NativePtr = IntPtr.Add(ParamsBuffer,Replace_From_Offset);
            StringMarshaller.ToNative(From_NativePtr,0,null,from);
            IntPtr To_NativePtr = IntPtr.Add(ParamsBuffer,Replace_To_Offset);
            StringMarshaller.ToNative(To_NativePtr,0,null,to);
            BlittableMarshaller<UnrealSharp.CoreUObject.ESearchCase>.ToNative(IntPtr.Add(ParamsBuffer, Replace_SearchCase_Offset), 0, null, searchCase);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Replace_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Replace_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(SourceString_NativePtr, 0);
            StringMarshaller.DestructInstance(From_NativePtr, 0);
            StringMarshaller.DestructInstance(To_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:NotEqual_StrStr
    static readonly IntPtr NotEqual_StrStr_NativeFunction;
    static readonly int NotEqual_StrStr_ParamsSize;
    static readonly int NotEqual_StrStr_A_Offset;
    static readonly int NotEqual_StrStr_B_Offset;
    static readonly int NotEqual_StrStr_ReturnValue_Offset;
    
    public static bool NotEqual_StrStr(string a, string b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_StrStr_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr A_NativePtr = IntPtr.Add(ParamsBuffer,NotEqual_StrStr_A_Offset);
            StringMarshaller.ToNative(A_NativePtr,0,null,a);
            IntPtr B_NativePtr = IntPtr.Add(ParamsBuffer,NotEqual_StrStr_B_Offset);
            StringMarshaller.ToNative(B_NativePtr,0,null,b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_StrStr_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_StrStr_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(A_NativePtr, 0);
            StringMarshaller.DestructInstance(B_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:NotEqual_StriStri
    static readonly IntPtr NotEqual_StriStri_NativeFunction;
    static readonly int NotEqual_StriStri_ParamsSize;
    static readonly int NotEqual_StriStri_A_Offset;
    static readonly int NotEqual_StriStri_B_Offset;
    static readonly int NotEqual_StriStri_ReturnValue_Offset;
    
    public static bool NotEqual_StriStri(string a, string b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_StriStri_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr A_NativePtr = IntPtr.Add(ParamsBuffer,NotEqual_StriStri_A_Offset);
            StringMarshaller.ToNative(A_NativePtr,0,null,a);
            IntPtr B_NativePtr = IntPtr.Add(ParamsBuffer,NotEqual_StriStri_B_Offset);
            StringMarshaller.ToNative(B_NativePtr,0,null,b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_StriStri_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_StriStri_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(A_NativePtr, 0);
            StringMarshaller.DestructInstance(B_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Mid
    static readonly IntPtr Mid_NativeFunction;
    static readonly int Mid_ParamsSize;
    static readonly int Mid_SourceString_Offset;
    static readonly int Mid_Start_Offset;
    static readonly int Mid_Count_Offset;
    static readonly int Mid_ReturnValue_Offset;
    
    public static string Mid(string sourceString, int start, int count)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Mid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceString_NativePtr = IntPtr.Add(ParamsBuffer,Mid_SourceString_Offset);
            StringMarshaller.ToNative(SourceString_NativePtr,0,null,sourceString);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Mid_Start_Offset), 0, null, start);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Mid_Count_Offset), 0, null, count);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Mid_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Mid_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(SourceString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:MatchesWildcard
    static readonly IntPtr MatchesWildcard_NativeFunction;
    static readonly int MatchesWildcard_ParamsSize;
    static readonly int MatchesWildcard_SourceString_Offset;
    static readonly int MatchesWildcard_Wildcard_Offset;
    static readonly int MatchesWildcard_SearchCase_Offset;
    static readonly int MatchesWildcard_ReturnValue_Offset;
    
    public static bool MatchesWildcard(string sourceString, string wildcard, UnrealSharp.CoreUObject.ESearchCase searchCase = UnrealSharp.CoreUObject.ESearchCase.IgnoreCase)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MatchesWildcard_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceString_NativePtr = IntPtr.Add(ParamsBuffer,MatchesWildcard_SourceString_Offset);
            StringMarshaller.ToNative(SourceString_NativePtr,0,null,sourceString);
            IntPtr Wildcard_NativePtr = IntPtr.Add(ParamsBuffer,MatchesWildcard_Wildcard_Offset);
            StringMarshaller.ToNative(Wildcard_NativePtr,0,null,wildcard);
            BlittableMarshaller<UnrealSharp.CoreUObject.ESearchCase>.ToNative(IntPtr.Add(ParamsBuffer, MatchesWildcard_SearchCase_Offset), 0, null, searchCase);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MatchesWildcard_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, MatchesWildcard_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SourceString_NativePtr, 0);
            StringMarshaller.DestructInstance(Wildcard_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Len
    static readonly IntPtr Len_NativeFunction;
    static readonly int Len_ParamsSize;
    static readonly int Len_S_Offset;
    static readonly int Len_ReturnValue_Offset;
    
    public static int Len(string s)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Len_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr S_NativePtr = IntPtr.Add(ParamsBuffer,Len_S_Offset);
            StringMarshaller.ToNative(S_NativePtr,0,null,s);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Len_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Len_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(S_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:LeftPad
    static readonly IntPtr LeftPad_NativeFunction;
    static readonly int LeftPad_ParamsSize;
    static readonly int LeftPad_SourceString_Offset;
    static readonly int LeftPad_ChCount_Offset;
    static readonly int LeftPad_ReturnValue_Offset;
    
    public static string LeftPad(string sourceString, int chCount)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LeftPad_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceString_NativePtr = IntPtr.Add(ParamsBuffer,LeftPad_SourceString_Offset);
            StringMarshaller.ToNative(SourceString_NativePtr,0,null,sourceString);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, LeftPad_ChCount_Offset), 0, null, chCount);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LeftPad_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,LeftPad_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(SourceString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:LeftChop
    static readonly IntPtr LeftChop_NativeFunction;
    static readonly int LeftChop_ParamsSize;
    static readonly int LeftChop_SourceString_Offset;
    static readonly int LeftChop_Count_Offset;
    static readonly int LeftChop_ReturnValue_Offset;
    
    public static string LeftChop(string sourceString, int count)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LeftChop_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceString_NativePtr = IntPtr.Add(ParamsBuffer,LeftChop_SourceString_Offset);
            StringMarshaller.ToNative(SourceString_NativePtr,0,null,sourceString);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, LeftChop_Count_Offset), 0, null, count);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LeftChop_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,LeftChop_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(SourceString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Left
    static readonly IntPtr Left_NativeFunction;
    static readonly int Left_ParamsSize;
    static readonly int Left_SourceString_Offset;
    static readonly int Left_Count_Offset;
    static readonly int Left_ReturnValue_Offset;
    
    public static string Left(string sourceString, int count)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Left_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceString_NativePtr = IntPtr.Add(ParamsBuffer,Left_SourceString_Offset);
            StringMarshaller.ToNative(SourceString_NativePtr,0,null,sourceString);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Left_Count_Offset), 0, null, count);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Left_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Left_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(SourceString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:IsNumeric
    static readonly IntPtr IsNumeric_NativeFunction;
    static readonly int IsNumeric_ParamsSize;
    static readonly int IsNumeric_SourceString_Offset;
    static readonly int IsNumeric_ReturnValue_Offset;
    
    public static bool IsNumeric(string sourceString)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsNumeric_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceString_NativePtr = IntPtr.Add(ParamsBuffer,IsNumeric_SourceString_Offset);
            StringMarshaller.ToNative(SourceString_NativePtr,0,null,sourceString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsNumeric_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsNumeric_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SourceString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:IsEmpty
    static readonly IntPtr IsEmpty_NativeFunction;
    static readonly int IsEmpty_ParamsSize;
    static readonly int IsEmpty_InString_Offset;
    static readonly int IsEmpty_ReturnValue_Offset;
    
    public static bool IsEmpty(string inString)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsEmpty_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InString_NativePtr = IntPtr.Add(ParamsBuffer,IsEmpty_InString_Offset);
            StringMarshaller.ToNative(InString_NativePtr,0,null,inString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsEmpty_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsEmpty_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:GetSubstring
    static readonly IntPtr GetSubstring_NativeFunction;
    static readonly int GetSubstring_ParamsSize;
    static readonly int GetSubstring_SourceString_Offset;
    static readonly int GetSubstring_StartIndex_Offset;
    static readonly int GetSubstring_Length_Offset;
    static readonly int GetSubstring_ReturnValue_Offset;
    
    public static string GetSubstring(string sourceString, int startIndex = 0, int length = 1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSubstring_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceString_NativePtr = IntPtr.Add(ParamsBuffer,GetSubstring_SourceString_Offset);
            StringMarshaller.ToNative(SourceString_NativePtr,0,null,sourceString);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetSubstring_StartIndex_Offset), 0, null, startIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetSubstring_Length_Offset), 0, null, length);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSubstring_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetSubstring_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(SourceString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:GetCharacterAsNumber
    static readonly IntPtr GetCharacterAsNumber_NativeFunction;
    static readonly int GetCharacterAsNumber_ParamsSize;
    static readonly int GetCharacterAsNumber_SourceString_Offset;
    static readonly int GetCharacterAsNumber_Index_Offset;
    static readonly int GetCharacterAsNumber_ReturnValue_Offset;
    
    public static int GetCharacterAsNumber(string sourceString, int index = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCharacterAsNumber_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceString_NativePtr = IntPtr.Add(ParamsBuffer,GetCharacterAsNumber_SourceString_Offset);
            StringMarshaller.ToNative(SourceString_NativePtr,0,null,sourceString);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetCharacterAsNumber_Index_Offset), 0, null, index);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetCharacterAsNumber_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetCharacterAsNumber_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SourceString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:FindSubstring
    static readonly IntPtr FindSubstring_NativeFunction;
    static readonly int FindSubstring_ParamsSize;
    static readonly int FindSubstring_SearchIn_Offset;
    static readonly int FindSubstring_Substring_Offset;
    static readonly int FindSubstring_bUseCase_Offset;
    static readonly int FindSubstring_bSearchFromEnd_Offset;
    static readonly int FindSubstring_StartPosition_Offset;
    static readonly int FindSubstring_ReturnValue_Offset;
    
    public static int FindSubstring(string searchIn, string substring, bool bUseCase = false, bool bSearchFromEnd = false, int startPosition = -1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindSubstring_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SearchIn_NativePtr = IntPtr.Add(ParamsBuffer,FindSubstring_SearchIn_Offset);
            StringMarshaller.ToNative(SearchIn_NativePtr,0,null,searchIn);
            IntPtr Substring_NativePtr = IntPtr.Add(ParamsBuffer,FindSubstring_Substring_Offset);
            StringMarshaller.ToNative(Substring_NativePtr,0,null,substring);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, FindSubstring_bUseCase_Offset), 0, null, bUseCase);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, FindSubstring_bSearchFromEnd_Offset), 0, null, bSearchFromEnd);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, FindSubstring_StartPosition_Offset), 0, null, startPosition);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FindSubstring_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, FindSubstring_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SearchIn_NativePtr, 0);
            StringMarshaller.DestructInstance(Substring_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:EqualEqual_StrStr
    static readonly IntPtr EqualEqual_StrStr_NativeFunction;
    static readonly int EqualEqual_StrStr_ParamsSize;
    static readonly int EqualEqual_StrStr_A_Offset;
    static readonly int EqualEqual_StrStr_B_Offset;
    static readonly int EqualEqual_StrStr_ReturnValue_Offset;
    
    public static bool EqualEqual_StrStr(string a, string b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_StrStr_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr A_NativePtr = IntPtr.Add(ParamsBuffer,EqualEqual_StrStr_A_Offset);
            StringMarshaller.ToNative(A_NativePtr,0,null,a);
            IntPtr B_NativePtr = IntPtr.Add(ParamsBuffer,EqualEqual_StrStr_B_Offset);
            StringMarshaller.ToNative(B_NativePtr,0,null,b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_StrStr_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_StrStr_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(A_NativePtr, 0);
            StringMarshaller.DestructInstance(B_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:EqualEqual_StriStri
    static readonly IntPtr EqualEqual_StriStri_NativeFunction;
    static readonly int EqualEqual_StriStri_ParamsSize;
    static readonly int EqualEqual_StriStri_A_Offset;
    static readonly int EqualEqual_StriStri_B_Offset;
    static readonly int EqualEqual_StriStri_ReturnValue_Offset;
    
    public static bool EqualEqual_StriStri(string a, string b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_StriStri_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr A_NativePtr = IntPtr.Add(ParamsBuffer,EqualEqual_StriStri_A_Offset);
            StringMarshaller.ToNative(A_NativePtr,0,null,a);
            IntPtr B_NativePtr = IntPtr.Add(ParamsBuffer,EqualEqual_StriStri_B_Offset);
            StringMarshaller.ToNative(B_NativePtr,0,null,b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_StriStri_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_StriStri_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(A_NativePtr, 0);
            StringMarshaller.DestructInstance(B_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:EndsWith
    static readonly IntPtr EndsWith_NativeFunction;
    static readonly int EndsWith_ParamsSize;
    static readonly int EndsWith_SourceString_Offset;
    static readonly int EndsWith_InSuffix_Offset;
    static readonly int EndsWith_SearchCase_Offset;
    static readonly int EndsWith_ReturnValue_Offset;
    
    public static bool EndsWith(string sourceString, string inSuffix, UnrealSharp.CoreUObject.ESearchCase searchCase = UnrealSharp.CoreUObject.ESearchCase.IgnoreCase)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EndsWith_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SourceString_NativePtr = IntPtr.Add(ParamsBuffer,EndsWith_SourceString_Offset);
            StringMarshaller.ToNative(SourceString_NativePtr,0,null,sourceString);
            IntPtr InSuffix_NativePtr = IntPtr.Add(ParamsBuffer,EndsWith_InSuffix_Offset);
            StringMarshaller.ToNative(InSuffix_NativePtr,0,null,inSuffix);
            BlittableMarshaller<UnrealSharp.CoreUObject.ESearchCase>.ToNative(IntPtr.Add(ParamsBuffer, EndsWith_SearchCase_Offset), 0, null, searchCase);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EndsWith_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EndsWith_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SourceString_NativePtr, 0);
            StringMarshaller.DestructInstance(InSuffix_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_VectorToString
    static readonly IntPtr Conv_VectorToString_NativeFunction;
    static readonly int Conv_VectorToString_ParamsSize;
    static readonly int Conv_VectorToString_InVec_Offset;
    static readonly int Conv_VectorToString_ReturnValue_Offset;
    
    public static string Conv_VectorToString(System.DoubleNumerics.Vector3 inVec)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_VectorToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, Conv_VectorToString_InVec_Offset), 0, null, inVec);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_VectorToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_VectorToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_Vector3fToString
    static readonly IntPtr Conv_Vector3fToString_NativeFunction;
    static readonly int Conv_Vector3fToString_ParamsSize;
    static readonly int Conv_Vector3fToString_InVec_Offset;
    static readonly int Conv_Vector3fToString_ReturnValue_Offset;
    
    public static string Conv_Vector3fToString(UnrealSharp.CoreUObject.Vector3f inVec)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_Vector3fToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.Vector3fMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Conv_Vector3fToString_InVec_Offset), 0, null, inVec);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_Vector3fToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_Vector3fToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_Vector2dToString
    static readonly IntPtr Conv_Vector2dToString_NativeFunction;
    static readonly int Conv_Vector2dToString_ParamsSize;
    static readonly int Conv_Vector2dToString_InVec_Offset;
    static readonly int Conv_Vector2dToString_ReturnValue_Offset;
    
    public static string Conv_Vector2dToString(System.DoubleNumerics.Vector2 inVec)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_Vector2dToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, Conv_Vector2dToString_InVec_Offset), 0, null, inVec);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_Vector2dToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_Vector2dToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_TransformToString
    static readonly IntPtr Conv_TransformToString_NativeFunction;
    static readonly int Conv_TransformToString_ParamsSize;
    static readonly int Conv_TransformToString_InTrans_Offset;
    static readonly int Conv_TransformToString_ReturnValue_Offset;
    
    public static string Conv_TransformToString(UnrealSharp.Transform inTrans)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_TransformToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, Conv_TransformToString_InTrans_Offset), 0, null, inTrans);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_TransformToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_TransformToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_StringToVector3f
    static readonly IntPtr Conv_StringToVector3f_NativeFunction;
    static readonly int Conv_StringToVector3f_ParamsSize;
    static readonly int Conv_StringToVector3f_InString_Offset;
    static readonly int Conv_StringToVector3f_OutConvertedVector_Offset;
    static readonly int Conv_StringToVector3f_OutIsValid_Offset;
    
    public static void Conv_StringToVector3f(string inString, out UnrealSharp.CoreUObject.Vector3f outConvertedVector, out bool outIsValid)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_StringToVector3f_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InString_NativePtr = IntPtr.Add(ParamsBuffer,Conv_StringToVector3f_InString_Offset);
            StringMarshaller.ToNative(InString_NativePtr,0,null,inString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_StringToVector3f_NativeFunction, ParamsBuffer);
            
            outConvertedVector = UnrealSharp.CoreUObject.Vector3fMarshaler.FromNative(IntPtr.Add(ParamsBuffer, Conv_StringToVector3f_OutConvertedVector_Offset), 0, null);
            outIsValid = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Conv_StringToVector3f_OutIsValid_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InString_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_StringToVector2D
    static readonly IntPtr Conv_StringToVector2D_NativeFunction;
    static readonly int Conv_StringToVector2D_ParamsSize;
    static readonly int Conv_StringToVector2D_InString_Offset;
    static readonly int Conv_StringToVector2D_OutConvertedVector2D_Offset;
    static readonly int Conv_StringToVector2D_OutIsValid_Offset;
    
    public static void Conv_StringToVector2D(string inString, out System.DoubleNumerics.Vector2 outConvertedVector2D, out bool outIsValid)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_StringToVector2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InString_NativePtr = IntPtr.Add(ParamsBuffer,Conv_StringToVector2D_InString_Offset);
            StringMarshaller.ToNative(InString_NativePtr,0,null,inString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_StringToVector2D_NativeFunction, ParamsBuffer);
            
            outConvertedVector2D = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, Conv_StringToVector2D_OutConvertedVector2D_Offset), 0, null);
            outIsValid = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Conv_StringToVector2D_OutIsValid_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InString_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_StringToVector
    static readonly IntPtr Conv_StringToVector_NativeFunction;
    static readonly int Conv_StringToVector_ParamsSize;
    static readonly int Conv_StringToVector_InString_Offset;
    static readonly int Conv_StringToVector_OutConvertedVector_Offset;
    static readonly int Conv_StringToVector_OutIsValid_Offset;
    
    public static void Conv_StringToVector(string inString, out System.DoubleNumerics.Vector3 outConvertedVector, out bool outIsValid)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_StringToVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InString_NativePtr = IntPtr.Add(ParamsBuffer,Conv_StringToVector_InString_Offset);
            StringMarshaller.ToNative(InString_NativePtr,0,null,inString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_StringToVector_NativeFunction, ParamsBuffer);
            
            outConvertedVector = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, Conv_StringToVector_OutConvertedVector_Offset), 0, null);
            outIsValid = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Conv_StringToVector_OutIsValid_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InString_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_StringToRotator
    static readonly IntPtr Conv_StringToRotator_NativeFunction;
    static readonly int Conv_StringToRotator_ParamsSize;
    static readonly int Conv_StringToRotator_InString_Offset;
    static readonly int Conv_StringToRotator_OutConvertedRotator_Offset;
    static readonly int Conv_StringToRotator_OutIsValid_Offset;
    
    public static void Conv_StringToRotator(string inString, out UnrealSharp.Rotator outConvertedRotator, out bool outIsValid)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_StringToRotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InString_NativePtr = IntPtr.Add(ParamsBuffer,Conv_StringToRotator_InString_Offset);
            StringMarshaller.ToNative(InString_NativePtr,0,null,inString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_StringToRotator_NativeFunction, ParamsBuffer);
            
            outConvertedRotator = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, Conv_StringToRotator_OutConvertedRotator_Offset), 0, null);
            outIsValid = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Conv_StringToRotator_OutIsValid_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InString_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_StringToName
    static readonly IntPtr Conv_StringToName_NativeFunction;
    static readonly int Conv_StringToName_ParamsSize;
    static readonly int Conv_StringToName_InString_Offset;
    static readonly int Conv_StringToName_ReturnValue_Offset;
    
    public static Name Conv_StringToName(string inString)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_StringToName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InString_NativePtr = IntPtr.Add(ParamsBuffer,Conv_StringToName_InString_Offset);
            StringMarshaller.ToNative(InString_NativePtr,0,null,inString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_StringToName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, Conv_StringToName_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_StringToInt64
    static readonly IntPtr Conv_StringToInt64_NativeFunction;
    static readonly int Conv_StringToInt64_ParamsSize;
    static readonly int Conv_StringToInt64_InString_Offset;
    static readonly int Conv_StringToInt64_ReturnValue_Offset;
    
    public static long Conv_StringToInt64(string inString)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_StringToInt64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InString_NativePtr = IntPtr.Add(ParamsBuffer,Conv_StringToInt64_InString_Offset);
            StringMarshaller.ToNative(InString_NativePtr,0,null,inString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_StringToInt64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, Conv_StringToInt64_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_StringToInt
    static readonly IntPtr Conv_StringToInt_NativeFunction;
    static readonly int Conv_StringToInt_ParamsSize;
    static readonly int Conv_StringToInt_InString_Offset;
    static readonly int Conv_StringToInt_ReturnValue_Offset;
    
    public static int Conv_StringToInt(string inString)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_StringToInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InString_NativePtr = IntPtr.Add(ParamsBuffer,Conv_StringToInt_InString_Offset);
            StringMarshaller.ToNative(InString_NativePtr,0,null,inString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_StringToInt_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, Conv_StringToInt_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_StringToDouble
    static readonly IntPtr Conv_StringToDouble_NativeFunction;
    static readonly int Conv_StringToDouble_ParamsSize;
    static readonly int Conv_StringToDouble_InString_Offset;
    static readonly int Conv_StringToDouble_ReturnValue_Offset;
    
    public static double Conv_StringToDouble(string inString)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_StringToDouble_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InString_NativePtr = IntPtr.Add(ParamsBuffer,Conv_StringToDouble_InString_Offset);
            StringMarshaller.ToNative(InString_NativePtr,0,null,inString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_StringToDouble_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, Conv_StringToDouble_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InString_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_StringToColor
    static readonly IntPtr Conv_StringToColor_NativeFunction;
    static readonly int Conv_StringToColor_ParamsSize;
    static readonly int Conv_StringToColor_InString_Offset;
    static readonly int Conv_StringToColor_OutConvertedColor_Offset;
    static readonly int Conv_StringToColor_OutIsValid_Offset;
    
    public static void Conv_StringToColor(string inString, out UnrealSharp.CoreUObject.LinearColor outConvertedColor, out bool outIsValid)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_StringToColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InString_NativePtr = IntPtr.Add(ParamsBuffer,Conv_StringToColor_InString_Offset);
            StringMarshaller.ToNative(InString_NativePtr,0,null,inString);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_StringToColor_NativeFunction, ParamsBuffer);
            
            outConvertedColor = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, Conv_StringToColor_OutConvertedColor_Offset), 0, null);
            outIsValid = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Conv_StringToColor_OutIsValid_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InString_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_RotatorToString
    static readonly IntPtr Conv_RotatorToString_NativeFunction;
    static readonly int Conv_RotatorToString_ParamsSize;
    static readonly int Conv_RotatorToString_InRot_Offset;
    static readonly int Conv_RotatorToString_ReturnValue_Offset;
    
    public static string Conv_RotatorToString(UnrealSharp.Rotator inRot)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_RotatorToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, Conv_RotatorToString_InRot_Offset), 0, null, inRot);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_RotatorToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_RotatorToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_PlatformUserIdToString
    static readonly IntPtr Conv_PlatformUserIdToString_NativeFunction;
    static readonly int Conv_PlatformUserIdToString_ParamsSize;
    static readonly int Conv_PlatformUserIdToString_InPlatformUserId_Offset;
    static readonly int Conv_PlatformUserIdToString_ReturnValue_Offset;
    
    public static string Conv_PlatformUserIdToString(UnrealSharp.CoreUObject.PlatformUserId inPlatformUserId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_PlatformUserIdToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.PlatformUserIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Conv_PlatformUserIdToString_InPlatformUserId_Offset), 0, null, inPlatformUserId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_PlatformUserIdToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_PlatformUserIdToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_ObjectToString
    static readonly IntPtr Conv_ObjectToString_NativeFunction;
    static readonly int Conv_ObjectToString_ParamsSize;
    static readonly int Conv_ObjectToString_InObj_Offset;
    static readonly int Conv_ObjectToString_ReturnValue_Offset;
    
    public static string Conv_ObjectToString(UnrealSharp.CoreUObject.Object inObj)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_ObjectToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, Conv_ObjectToString_InObj_Offset), 0, null, inObj);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_ObjectToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_ObjectToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_NameToString
    static readonly IntPtr Conv_NameToString_NativeFunction;
    static readonly int Conv_NameToString_ParamsSize;
    static readonly int Conv_NameToString_InName_Offset;
    static readonly int Conv_NameToString_ReturnValue_Offset;
    
    public static string Conv_NameToString(Name inName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_NameToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, Conv_NameToString_InName_Offset), 0, null, inName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_NameToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_NameToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_MatrixToString
    static readonly IntPtr Conv_MatrixToString_NativeFunction;
    static readonly int Conv_MatrixToString_ParamsSize;
    static readonly int Conv_MatrixToString_InMatrix_Offset;
    static readonly int Conv_MatrixToString_ReturnValue_Offset;
    
    public static string Conv_MatrixToString(System.DoubleNumerics.Matrix4x4 inMatrix)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_MatrixToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, Conv_MatrixToString_InMatrix_Offset), 0, null, inMatrix);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_MatrixToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_MatrixToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_IntVectorToString
    static readonly IntPtr Conv_IntVectorToString_NativeFunction;
    static readonly int Conv_IntVectorToString_ParamsSize;
    static readonly int Conv_IntVectorToString_InIntVec_Offset;
    static readonly int Conv_IntVectorToString_ReturnValue_Offset;
    
    public static string Conv_IntVectorToString(UnrealSharp.CoreUObject.IntVector inIntVec)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_IntVectorToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.IntVector>.ToNative(IntPtr.Add(ParamsBuffer, Conv_IntVectorToString_InIntVec_Offset), 0, null, inIntVec);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_IntVectorToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_IntVectorToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_IntToString
    static readonly IntPtr Conv_IntToString_NativeFunction;
    static readonly int Conv_IntToString_ParamsSize;
    static readonly int Conv_IntToString_InInt_Offset;
    static readonly int Conv_IntToString_ReturnValue_Offset;
    
    public static string Conv_IntToString(int inInt)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_IntToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Conv_IntToString_InInt_Offset), 0, null, inInt);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_IntToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_IntToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_IntPointToString
    static readonly IntPtr Conv_IntPointToString_NativeFunction;
    static readonly int Conv_IntPointToString_ParamsSize;
    static readonly int Conv_IntPointToString_InIntPoint_Offset;
    static readonly int Conv_IntPointToString_ReturnValue_Offset;
    
    public static string Conv_IntPointToString(UnrealSharp.CoreUObject.IntPoint inIntPoint)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_IntPointToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(ParamsBuffer, Conv_IntPointToString_InIntPoint_Offset), 0, null, inIntPoint);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_IntPointToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_IntPointToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_Int64ToString
    static readonly IntPtr Conv_Int64ToString_NativeFunction;
    static readonly int Conv_Int64ToString_ParamsSize;
    static readonly int Conv_Int64ToString_InInt_Offset;
    static readonly int Conv_Int64ToString_ReturnValue_Offset;
    
    public static string Conv_Int64ToString(long inInt)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_Int64ToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, Conv_Int64ToString_InInt_Offset), 0, null, inInt);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_Int64ToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_Int64ToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_InputDeviceIdToString
    static readonly IntPtr Conv_InputDeviceIdToString_NativeFunction;
    static readonly int Conv_InputDeviceIdToString_ParamsSize;
    static readonly int Conv_InputDeviceIdToString_InDeviceId_Offset;
    static readonly int Conv_InputDeviceIdToString_ReturnValue_Offset;
    
    public static string Conv_InputDeviceIdToString(UnrealSharp.CoreUObject.InputDeviceId inDeviceId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_InputDeviceIdToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.InputDeviceIdMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Conv_InputDeviceIdToString_InDeviceId_Offset), 0, null, inDeviceId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_InputDeviceIdToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_InputDeviceIdToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_DoubleToString
    static readonly IntPtr Conv_DoubleToString_NativeFunction;
    static readonly int Conv_DoubleToString_ParamsSize;
    static readonly int Conv_DoubleToString_InDouble_Offset;
    static readonly int Conv_DoubleToString_ReturnValue_Offset;
    
    public static string Conv_DoubleToString(double inDouble)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_DoubleToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, Conv_DoubleToString_InDouble_Offset), 0, null, inDouble);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_DoubleToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_DoubleToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_ColorToString
    static readonly IntPtr Conv_ColorToString_NativeFunction;
    static readonly int Conv_ColorToString_ParamsSize;
    static readonly int Conv_ColorToString_InColor_Offset;
    static readonly int Conv_ColorToString_ReturnValue_Offset;
    
    public static string Conv_ColorToString(UnrealSharp.CoreUObject.LinearColor inColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_ColorToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, Conv_ColorToString_InColor_Offset), 0, null, inColor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_ColorToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_ColorToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_ByteToString
    static readonly IntPtr Conv_ByteToString_NativeFunction;
    static readonly int Conv_ByteToString_ParamsSize;
    static readonly int Conv_ByteToString_InByte_Offset;
    static readonly int Conv_ByteToString_ReturnValue_Offset;
    
    public static string Conv_ByteToString(byte inByte)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_ByteToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, Conv_ByteToString_InByte_Offset), 0, null, inByte);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_ByteToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_ByteToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Conv_BoolToString
    static readonly IntPtr Conv_BoolToString_NativeFunction;
    static readonly int Conv_BoolToString_ParamsSize;
    static readonly int Conv_BoolToString_InBool_Offset;
    static readonly int Conv_BoolToString_ReturnValue_Offset;
    
    public static string Conv_BoolToString(bool inBool)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_BoolToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, Conv_BoolToString_InBool_Offset), 0, null, inBool);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_BoolToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_BoolToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Contains
    static readonly IntPtr Contains_NativeFunction;
    static readonly int Contains_ParamsSize;
    static readonly int Contains_SearchIn_Offset;
    static readonly int Contains_Substring_Offset;
    static readonly int Contains_bUseCase_Offset;
    static readonly int Contains_bSearchFromEnd_Offset;
    static readonly int Contains_ReturnValue_Offset;
    
    public static bool Contains(string searchIn, string substring, bool bUseCase = false, bool bSearchFromEnd = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Contains_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SearchIn_NativePtr = IntPtr.Add(ParamsBuffer,Contains_SearchIn_Offset);
            StringMarshaller.ToNative(SearchIn_NativePtr,0,null,searchIn);
            IntPtr Substring_NativePtr = IntPtr.Add(ParamsBuffer,Contains_Substring_Offset);
            StringMarshaller.ToNative(Substring_NativePtr,0,null,substring);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, Contains_bUseCase_Offset), 0, null, bUseCase);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, Contains_bSearchFromEnd_Offset), 0, null, bSearchFromEnd);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Contains_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Contains_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SearchIn_NativePtr, 0);
            StringMarshaller.DestructInstance(Substring_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:Concat_StrStr
    static readonly IntPtr Concat_StrStr_NativeFunction;
    static readonly int Concat_StrStr_ParamsSize;
    static readonly int Concat_StrStr_A_Offset;
    static readonly int Concat_StrStr_B_Offset;
    static readonly int Concat_StrStr_ReturnValue_Offset;
    
    public static string Concat_StrStr(string a, string b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Concat_StrStr_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr A_NativePtr = IntPtr.Add(ParamsBuffer,Concat_StrStr_A_Offset);
            StringMarshaller.ToNative(A_NativePtr,0,null,a);
            IntPtr B_NativePtr = IntPtr.Add(ParamsBuffer,Concat_StrStr_B_Offset);
            StringMarshaller.ToNative(B_NativePtr,0,null,b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Concat_StrStr_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Concat_StrStr_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(A_NativePtr, 0);
            StringMarshaller.DestructInstance(B_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:BuildString_Vector2d
    static readonly IntPtr BuildString_Vector2d_NativeFunction;
    static readonly int BuildString_Vector2d_ParamsSize;
    static readonly int BuildString_Vector2d_AppendTo_Offset;
    static readonly int BuildString_Vector2d_Prefix_Offset;
    static readonly int BuildString_Vector2d_InVector2d_Offset;
    static readonly int BuildString_Vector2d_Suffix_Offset;
    static readonly int BuildString_Vector2d_ReturnValue_Offset;
    
    public static string BuildString_Vector2d(string appendTo, string prefix, System.DoubleNumerics.Vector2 inVector2d, string suffix)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BuildString_Vector2d_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AppendTo_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Vector2d_AppendTo_Offset);
            StringMarshaller.ToNative(AppendTo_NativePtr,0,null,appendTo);
            IntPtr Prefix_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Vector2d_Prefix_Offset);
            StringMarshaller.ToNative(Prefix_NativePtr,0,null,prefix);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, BuildString_Vector2d_InVector2d_Offset), 0, null, inVector2d);
            IntPtr Suffix_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Vector2d_Suffix_Offset);
            StringMarshaller.ToNative(Suffix_NativePtr,0,null,suffix);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BuildString_Vector2d_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Vector2d_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(AppendTo_NativePtr, 0);
            StringMarshaller.DestructInstance(Prefix_NativePtr, 0);
            StringMarshaller.DestructInstance(Suffix_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:BuildString_Vector
    static readonly IntPtr BuildString_Vector_NativeFunction;
    static readonly int BuildString_Vector_ParamsSize;
    static readonly int BuildString_Vector_AppendTo_Offset;
    static readonly int BuildString_Vector_Prefix_Offset;
    static readonly int BuildString_Vector_InVector_Offset;
    static readonly int BuildString_Vector_Suffix_Offset;
    static readonly int BuildString_Vector_ReturnValue_Offset;
    
    public static string BuildString_Vector(string appendTo, string prefix, System.DoubleNumerics.Vector3 inVector, string suffix)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BuildString_Vector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AppendTo_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Vector_AppendTo_Offset);
            StringMarshaller.ToNative(AppendTo_NativePtr,0,null,appendTo);
            IntPtr Prefix_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Vector_Prefix_Offset);
            StringMarshaller.ToNative(Prefix_NativePtr,0,null,prefix);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BuildString_Vector_InVector_Offset), 0, null, inVector);
            IntPtr Suffix_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Vector_Suffix_Offset);
            StringMarshaller.ToNative(Suffix_NativePtr,0,null,suffix);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BuildString_Vector_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Vector_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(AppendTo_NativePtr, 0);
            StringMarshaller.DestructInstance(Prefix_NativePtr, 0);
            StringMarshaller.DestructInstance(Suffix_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:BuildString_Rotator
    static readonly IntPtr BuildString_Rotator_NativeFunction;
    static readonly int BuildString_Rotator_ParamsSize;
    static readonly int BuildString_Rotator_AppendTo_Offset;
    static readonly int BuildString_Rotator_Prefix_Offset;
    static readonly int BuildString_Rotator_InRot_Offset;
    static readonly int BuildString_Rotator_Suffix_Offset;
    static readonly int BuildString_Rotator_ReturnValue_Offset;
    
    public static string BuildString_Rotator(string appendTo, string prefix, UnrealSharp.Rotator inRot, string suffix)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BuildString_Rotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AppendTo_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Rotator_AppendTo_Offset);
            StringMarshaller.ToNative(AppendTo_NativePtr,0,null,appendTo);
            IntPtr Prefix_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Rotator_Prefix_Offset);
            StringMarshaller.ToNative(Prefix_NativePtr,0,null,prefix);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, BuildString_Rotator_InRot_Offset), 0, null, inRot);
            IntPtr Suffix_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Rotator_Suffix_Offset);
            StringMarshaller.ToNative(Suffix_NativePtr,0,null,suffix);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BuildString_Rotator_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Rotator_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(AppendTo_NativePtr, 0);
            StringMarshaller.DestructInstance(Prefix_NativePtr, 0);
            StringMarshaller.DestructInstance(Suffix_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:BuildString_Object
    static readonly IntPtr BuildString_Object_NativeFunction;
    static readonly int BuildString_Object_ParamsSize;
    static readonly int BuildString_Object_AppendTo_Offset;
    static readonly int BuildString_Object_Prefix_Offset;
    static readonly int BuildString_Object_InObj_Offset;
    static readonly int BuildString_Object_Suffix_Offset;
    static readonly int BuildString_Object_ReturnValue_Offset;
    
    public static string BuildString_Object(string appendTo, string prefix, UnrealSharp.CoreUObject.Object inObj, string suffix)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BuildString_Object_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AppendTo_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Object_AppendTo_Offset);
            StringMarshaller.ToNative(AppendTo_NativePtr,0,null,appendTo);
            IntPtr Prefix_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Object_Prefix_Offset);
            StringMarshaller.ToNative(Prefix_NativePtr,0,null,prefix);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, BuildString_Object_InObj_Offset), 0, null, inObj);
            IntPtr Suffix_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Object_Suffix_Offset);
            StringMarshaller.ToNative(Suffix_NativePtr,0,null,suffix);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BuildString_Object_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Object_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(AppendTo_NativePtr, 0);
            StringMarshaller.DestructInstance(Prefix_NativePtr, 0);
            StringMarshaller.DestructInstance(Suffix_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:BuildString_Name
    static readonly IntPtr BuildString_Name_NativeFunction;
    static readonly int BuildString_Name_ParamsSize;
    static readonly int BuildString_Name_AppendTo_Offset;
    static readonly int BuildString_Name_Prefix_Offset;
    static readonly int BuildString_Name_InName_Offset;
    static readonly int BuildString_Name_Suffix_Offset;
    static readonly int BuildString_Name_ReturnValue_Offset;
    
    public static string BuildString_Name(string appendTo, string prefix, Name inName, string suffix)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BuildString_Name_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AppendTo_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Name_AppendTo_Offset);
            StringMarshaller.ToNative(AppendTo_NativePtr,0,null,appendTo);
            IntPtr Prefix_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Name_Prefix_Offset);
            StringMarshaller.ToNative(Prefix_NativePtr,0,null,prefix);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, BuildString_Name_InName_Offset), 0, null, inName);
            IntPtr Suffix_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Name_Suffix_Offset);
            StringMarshaller.ToNative(Suffix_NativePtr,0,null,suffix);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BuildString_Name_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Name_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(AppendTo_NativePtr, 0);
            StringMarshaller.DestructInstance(Prefix_NativePtr, 0);
            StringMarshaller.DestructInstance(Suffix_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:BuildString_IntVector
    static readonly IntPtr BuildString_IntVector_NativeFunction;
    static readonly int BuildString_IntVector_ParamsSize;
    static readonly int BuildString_IntVector_AppendTo_Offset;
    static readonly int BuildString_IntVector_Prefix_Offset;
    static readonly int BuildString_IntVector_InIntVector_Offset;
    static readonly int BuildString_IntVector_Suffix_Offset;
    static readonly int BuildString_IntVector_ReturnValue_Offset;
    
    public static string BuildString_IntVector(string appendTo, string prefix, UnrealSharp.CoreUObject.IntVector inIntVector, string suffix)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BuildString_IntVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AppendTo_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_IntVector_AppendTo_Offset);
            StringMarshaller.ToNative(AppendTo_NativePtr,0,null,appendTo);
            IntPtr Prefix_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_IntVector_Prefix_Offset);
            StringMarshaller.ToNative(Prefix_NativePtr,0,null,prefix);
            BlittableMarshaller<UnrealSharp.CoreUObject.IntVector>.ToNative(IntPtr.Add(ParamsBuffer, BuildString_IntVector_InIntVector_Offset), 0, null, inIntVector);
            IntPtr Suffix_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_IntVector_Suffix_Offset);
            StringMarshaller.ToNative(Suffix_NativePtr,0,null,suffix);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BuildString_IntVector_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_IntVector_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(AppendTo_NativePtr, 0);
            StringMarshaller.DestructInstance(Prefix_NativePtr, 0);
            StringMarshaller.DestructInstance(Suffix_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:BuildString_Int
    static readonly IntPtr BuildString_Int_NativeFunction;
    static readonly int BuildString_Int_ParamsSize;
    static readonly int BuildString_Int_AppendTo_Offset;
    static readonly int BuildString_Int_Prefix_Offset;
    static readonly int BuildString_Int_InInt_Offset;
    static readonly int BuildString_Int_Suffix_Offset;
    static readonly int BuildString_Int_ReturnValue_Offset;
    
    public static string BuildString_Int(string appendTo, string prefix, int inInt, string suffix)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BuildString_Int_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AppendTo_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Int_AppendTo_Offset);
            StringMarshaller.ToNative(AppendTo_NativePtr,0,null,appendTo);
            IntPtr Prefix_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Int_Prefix_Offset);
            StringMarshaller.ToNative(Prefix_NativePtr,0,null,prefix);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, BuildString_Int_InInt_Offset), 0, null, inInt);
            IntPtr Suffix_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Int_Suffix_Offset);
            StringMarshaller.ToNative(Suffix_NativePtr,0,null,suffix);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BuildString_Int_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Int_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(AppendTo_NativePtr, 0);
            StringMarshaller.DestructInstance(Prefix_NativePtr, 0);
            StringMarshaller.DestructInstance(Suffix_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:BuildString_Double
    static readonly IntPtr BuildString_Double_NativeFunction;
    static readonly int BuildString_Double_ParamsSize;
    static readonly int BuildString_Double_AppendTo_Offset;
    static readonly int BuildString_Double_Prefix_Offset;
    static readonly int BuildString_Double_InDouble_Offset;
    static readonly int BuildString_Double_Suffix_Offset;
    static readonly int BuildString_Double_ReturnValue_Offset;
    
    public static string BuildString_Double(string appendTo, string prefix, double inDouble, string suffix)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BuildString_Double_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AppendTo_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Double_AppendTo_Offset);
            StringMarshaller.ToNative(AppendTo_NativePtr,0,null,appendTo);
            IntPtr Prefix_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Double_Prefix_Offset);
            StringMarshaller.ToNative(Prefix_NativePtr,0,null,prefix);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, BuildString_Double_InDouble_Offset), 0, null, inDouble);
            IntPtr Suffix_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Double_Suffix_Offset);
            StringMarshaller.ToNative(Suffix_NativePtr,0,null,suffix);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BuildString_Double_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Double_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(AppendTo_NativePtr, 0);
            StringMarshaller.DestructInstance(Prefix_NativePtr, 0);
            StringMarshaller.DestructInstance(Suffix_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:BuildString_Color
    static readonly IntPtr BuildString_Color_NativeFunction;
    static readonly int BuildString_Color_ParamsSize;
    static readonly int BuildString_Color_AppendTo_Offset;
    static readonly int BuildString_Color_Prefix_Offset;
    static readonly int BuildString_Color_InColor_Offset;
    static readonly int BuildString_Color_Suffix_Offset;
    static readonly int BuildString_Color_ReturnValue_Offset;
    
    public static string BuildString_Color(string appendTo, string prefix, UnrealSharp.CoreUObject.LinearColor inColor, string suffix)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BuildString_Color_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AppendTo_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Color_AppendTo_Offset);
            StringMarshaller.ToNative(AppendTo_NativePtr,0,null,appendTo);
            IntPtr Prefix_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Color_Prefix_Offset);
            StringMarshaller.ToNative(Prefix_NativePtr,0,null,prefix);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, BuildString_Color_InColor_Offset), 0, null, inColor);
            IntPtr Suffix_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Color_Suffix_Offset);
            StringMarshaller.ToNative(Suffix_NativePtr,0,null,suffix);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BuildString_Color_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Color_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(AppendTo_NativePtr, 0);
            StringMarshaller.DestructInstance(Prefix_NativePtr, 0);
            StringMarshaller.DestructInstance(Suffix_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringLibrary:BuildString_Bool
    static readonly IntPtr BuildString_Bool_NativeFunction;
    static readonly int BuildString_Bool_ParamsSize;
    static readonly int BuildString_Bool_AppendTo_Offset;
    static readonly int BuildString_Bool_Prefix_Offset;
    static readonly int BuildString_Bool_InBool_Offset;
    static readonly int BuildString_Bool_Suffix_Offset;
    static readonly int BuildString_Bool_ReturnValue_Offset;
    
    public static string BuildString_Bool(string appendTo, string prefix, bool inBool, string suffix)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BuildString_Bool_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AppendTo_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Bool_AppendTo_Offset);
            StringMarshaller.ToNative(AppendTo_NativePtr,0,null,appendTo);
            IntPtr Prefix_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Bool_Prefix_Offset);
            StringMarshaller.ToNative(Prefix_NativePtr,0,null,prefix);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BuildString_Bool_InBool_Offset), 0, null, inBool);
            IntPtr Suffix_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Bool_Suffix_Offset);
            StringMarshaller.ToNative(Suffix_NativePtr,0,null,suffix);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BuildString_Bool_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,BuildString_Bool_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(AppendTo_NativePtr, 0);
            StringMarshaller.DestructInstance(Prefix_NativePtr, 0);
            StringMarshaller.DestructInstance(Suffix_NativePtr, 0);
            return returnValue;
        }
    }
    
    
}
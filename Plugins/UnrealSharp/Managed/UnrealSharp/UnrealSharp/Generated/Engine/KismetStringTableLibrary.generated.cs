// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class StringTableLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static StringTableLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("KismetStringTableLibrary");
        
        
        IsRegisteredTableId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsRegisteredTableId");
        IsRegisteredTableId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsRegisteredTableId_NativeFunction);
        IsRegisteredTableId_TableId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsRegisteredTableId_NativeFunction, "TableId");
        IsRegisteredTableId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsRegisteredTableId_NativeFunction, "ReturnValue");
        IsRegisteredTableEntry_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsRegisteredTableEntry");
        IsRegisteredTableEntry_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsRegisteredTableEntry_NativeFunction);
        IsRegisteredTableEntry_TableId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsRegisteredTableEntry_NativeFunction, "TableId");
        IsRegisteredTableEntry_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsRegisteredTableEntry_NativeFunction, "Key");
        IsRegisteredTableEntry_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsRegisteredTableEntry_NativeFunction, "ReturnValue");
        GetTableNamespace_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTableNamespace");
        GetTableNamespace_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTableNamespace_NativeFunction);
        GetTableNamespace_TableId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTableNamespace_NativeFunction, "TableId");
        GetTableNamespace_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTableNamespace_NativeFunction, "ReturnValue");
        GetTableEntrySourceString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTableEntrySourceString");
        GetTableEntrySourceString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTableEntrySourceString_NativeFunction);
        GetTableEntrySourceString_TableId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTableEntrySourceString_NativeFunction, "TableId");
        GetTableEntrySourceString_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTableEntrySourceString_NativeFunction, "Key");
        GetTableEntrySourceString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTableEntrySourceString_NativeFunction, "ReturnValue");
        GetTableEntryMetaData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTableEntryMetaData");
        GetTableEntryMetaData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTableEntryMetaData_NativeFunction);
        GetTableEntryMetaData_TableId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTableEntryMetaData_NativeFunction, "TableId");
        GetTableEntryMetaData_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTableEntryMetaData_NativeFunction, "Key");
        GetTableEntryMetaData_MetaDataId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTableEntryMetaData_NativeFunction, "MetaDataId");
        GetTableEntryMetaData_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTableEntryMetaData_NativeFunction, "ReturnValue");
        GetRegisteredStringTables_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRegisteredStringTables");
        GetRegisteredStringTables_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRegisteredStringTables_NativeFunction);
        GetRegisteredStringTables_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRegisteredStringTables_NativeFunction, "ReturnValue");
        GetRegisteredStringTables_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetRegisteredStringTables_NativeFunction, "ReturnValue");
        GetMetaDataIdsFromStringTableEntry_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMetaDataIdsFromStringTableEntry");
        GetMetaDataIdsFromStringTableEntry_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMetaDataIdsFromStringTableEntry_NativeFunction);
        GetMetaDataIdsFromStringTableEntry_TableId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMetaDataIdsFromStringTableEntry_NativeFunction, "TableId");
        GetMetaDataIdsFromStringTableEntry_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMetaDataIdsFromStringTableEntry_NativeFunction, "Key");
        GetMetaDataIdsFromStringTableEntry_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMetaDataIdsFromStringTableEntry_NativeFunction, "ReturnValue");
        GetMetaDataIdsFromStringTableEntry_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetMetaDataIdsFromStringTableEntry_NativeFunction, "ReturnValue");
        
        
    }
    
    protected StringTableLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.KismetStringTableLibrary:IsRegisteredTableId
    static readonly IntPtr IsRegisteredTableId_NativeFunction;
    static readonly int IsRegisteredTableId_ParamsSize;
    static readonly int IsRegisteredTableId_TableId_Offset;
    static readonly int IsRegisteredTableId_ReturnValue_Offset;
    
    public static bool IsRegisteredTableId(Name tableId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsRegisteredTableId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, IsRegisteredTableId_TableId_Offset), 0, null, tableId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsRegisteredTableId_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsRegisteredTableId_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringTableLibrary:IsRegisteredTableEntry
    static readonly IntPtr IsRegisteredTableEntry_NativeFunction;
    static readonly int IsRegisteredTableEntry_ParamsSize;
    static readonly int IsRegisteredTableEntry_TableId_Offset;
    static readonly int IsRegisteredTableEntry_Key_Offset;
    static readonly int IsRegisteredTableEntry_ReturnValue_Offset;
    
    public static bool IsRegisteredTableEntry(Name tableId, string key)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsRegisteredTableEntry_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, IsRegisteredTableEntry_TableId_Offset), 0, null, tableId);
            IntPtr Key_NativePtr = IntPtr.Add(ParamsBuffer,IsRegisteredTableEntry_Key_Offset);
            StringMarshaller.ToNative(Key_NativePtr,0,null,key);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsRegisteredTableEntry_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsRegisteredTableEntry_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(Key_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringTableLibrary:GetTableNamespace
    static readonly IntPtr GetTableNamespace_NativeFunction;
    static readonly int GetTableNamespace_ParamsSize;
    static readonly int GetTableNamespace_TableId_Offset;
    static readonly int GetTableNamespace_ReturnValue_Offset;
    
    public static string GetTableNamespace(Name tableId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTableNamespace_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetTableNamespace_TableId_Offset), 0, null, tableId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetTableNamespace_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetTableNamespace_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringTableLibrary:GetTableEntrySourceString
    static readonly IntPtr GetTableEntrySourceString_NativeFunction;
    static readonly int GetTableEntrySourceString_ParamsSize;
    static readonly int GetTableEntrySourceString_TableId_Offset;
    static readonly int GetTableEntrySourceString_Key_Offset;
    static readonly int GetTableEntrySourceString_ReturnValue_Offset;
    
    public static string GetTableEntrySourceString(Name tableId, string key)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTableEntrySourceString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetTableEntrySourceString_TableId_Offset), 0, null, tableId);
            IntPtr Key_NativePtr = IntPtr.Add(ParamsBuffer,GetTableEntrySourceString_Key_Offset);
            StringMarshaller.ToNative(Key_NativePtr,0,null,key);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetTableEntrySourceString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetTableEntrySourceString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(Key_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringTableLibrary:GetTableEntryMetaData
    static readonly IntPtr GetTableEntryMetaData_NativeFunction;
    static readonly int GetTableEntryMetaData_ParamsSize;
    static readonly int GetTableEntryMetaData_TableId_Offset;
    static readonly int GetTableEntryMetaData_Key_Offset;
    static readonly int GetTableEntryMetaData_MetaDataId_Offset;
    static readonly int GetTableEntryMetaData_ReturnValue_Offset;
    
    public static string GetTableEntryMetaData(Name tableId, string key, Name metaDataId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTableEntryMetaData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetTableEntryMetaData_TableId_Offset), 0, null, tableId);
            IntPtr Key_NativePtr = IntPtr.Add(ParamsBuffer,GetTableEntryMetaData_Key_Offset);
            StringMarshaller.ToNative(Key_NativePtr,0,null,key);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetTableEntryMetaData_MetaDataId_Offset), 0, null, metaDataId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetTableEntryMetaData_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetTableEntryMetaData_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(Key_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringTableLibrary:GetRegisteredStringTables
    static readonly IntPtr GetRegisteredStringTables_NativeFunction;
    static readonly int GetRegisteredStringTables_ParamsSize;
    static readonly int GetRegisteredStringTables_ReturnValue_Offset;
    static readonly int GetRegisteredStringTables_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<Name> GetRegisteredStringTables()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRegisteredStringTables_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetRegisteredStringTables_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<Name> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetRegisteredStringTables_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<Name> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetRegisteredStringTables_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetStringTableLibrary:GetMetaDataIdsFromStringTableEntry
    static readonly IntPtr GetMetaDataIdsFromStringTableEntry_NativeFunction;
    static readonly int GetMetaDataIdsFromStringTableEntry_ParamsSize;
    static readonly int GetMetaDataIdsFromStringTableEntry_TableId_Offset;
    static readonly int GetMetaDataIdsFromStringTableEntry_Key_Offset;
    static readonly int GetMetaDataIdsFromStringTableEntry_ReturnValue_Offset;
    static readonly int GetMetaDataIdsFromStringTableEntry_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<Name> GetMetaDataIdsFromStringTableEntry(Name tableId, string key)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMetaDataIdsFromStringTableEntry_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetMetaDataIdsFromStringTableEntry_TableId_Offset), 0, null, tableId);
            IntPtr Key_NativePtr = IntPtr.Add(ParamsBuffer,GetMetaDataIdsFromStringTableEntry_Key_Offset);
            StringMarshaller.ToNative(Key_NativePtr,0,null,key);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMetaDataIdsFromStringTableEntry_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<Name> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetMetaDataIdsFromStringTableEntry_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<Name> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetMetaDataIdsFromStringTableEntry_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            StringMarshaller.DestructInstance(Key_NativePtr, 0);
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class SystemLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static SystemLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("KismetSystemLibrary");
        
        
        UnregisterForRemoteNotifications_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UnregisterForRemoteNotifications");
        UnloadPrimaryAssetList_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UnloadPrimaryAssetList");
        UnloadPrimaryAssetList_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UnloadPrimaryAssetList_NativeFunction);
        UnloadPrimaryAssetList_PrimaryAssetIdList_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnloadPrimaryAssetList_NativeFunction, "PrimaryAssetIdList");
        UnloadPrimaryAssetList_PrimaryAssetIdList_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(UnloadPrimaryAssetList_NativeFunction, "PrimaryAssetIdList");
        UnloadPrimaryAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UnloadPrimaryAsset");
        UnloadPrimaryAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UnloadPrimaryAsset_NativeFunction);
        UnloadPrimaryAsset_PrimaryAssetId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UnloadPrimaryAsset_NativeFunction, "PrimaryAssetId");
        TransactObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TransactObject");
        TransactObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TransactObject_NativeFunction);
        TransactObject_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TransactObject_NativeFunction, "Object");
        StackTrace_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StackTrace");
        SphereTraceSingleForObjects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SphereTraceSingleForObjects");
        SphereTraceSingleForObjects_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SphereTraceSingleForObjects_NativeFunction);
        SphereTraceSingleForObjects_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleForObjects_NativeFunction, "WorldContextObject");
        SphereTraceSingleForObjects_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleForObjects_NativeFunction, "Start");
        SphereTraceSingleForObjects_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleForObjects_NativeFunction, "End");
        SphereTraceSingleForObjects_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleForObjects_NativeFunction, "Radius");
        SphereTraceSingleForObjects_ObjectTypes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleForObjects_NativeFunction, "ObjectTypes");
        SphereTraceSingleForObjects_ObjectTypes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SphereTraceSingleForObjects_NativeFunction, "ObjectTypes");
        SphereTraceSingleForObjects_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleForObjects_NativeFunction, "bTraceComplex");
        SphereTraceSingleForObjects_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleForObjects_NativeFunction, "ActorsToIgnore");
        SphereTraceSingleForObjects_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SphereTraceSingleForObjects_NativeFunction, "ActorsToIgnore");
        SphereTraceSingleForObjects_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleForObjects_NativeFunction, "DrawDebugType");
        SphereTraceSingleForObjects_OutHit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleForObjects_NativeFunction, "OutHit");
        SphereTraceSingleForObjects_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleForObjects_NativeFunction, "bIgnoreSelf");
        SphereTraceSingleForObjects_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleForObjects_NativeFunction, "TraceColor");
        SphereTraceSingleForObjects_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleForObjects_NativeFunction, "TraceHitColor");
        SphereTraceSingleForObjects_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleForObjects_NativeFunction, "DrawTime");
        SphereTraceSingleForObjects_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleForObjects_NativeFunction, "ReturnValue");
        SphereTraceSingleByProfile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SphereTraceSingleByProfile");
        SphereTraceSingleByProfile_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SphereTraceSingleByProfile_NativeFunction);
        SphereTraceSingleByProfile_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleByProfile_NativeFunction, "WorldContextObject");
        SphereTraceSingleByProfile_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleByProfile_NativeFunction, "Start");
        SphereTraceSingleByProfile_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleByProfile_NativeFunction, "End");
        SphereTraceSingleByProfile_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleByProfile_NativeFunction, "Radius");
        SphereTraceSingleByProfile_ProfileName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleByProfile_NativeFunction, "ProfileName");
        SphereTraceSingleByProfile_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleByProfile_NativeFunction, "bTraceComplex");
        SphereTraceSingleByProfile_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleByProfile_NativeFunction, "ActorsToIgnore");
        SphereTraceSingleByProfile_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SphereTraceSingleByProfile_NativeFunction, "ActorsToIgnore");
        SphereTraceSingleByProfile_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleByProfile_NativeFunction, "DrawDebugType");
        SphereTraceSingleByProfile_OutHit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleByProfile_NativeFunction, "OutHit");
        SphereTraceSingleByProfile_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleByProfile_NativeFunction, "bIgnoreSelf");
        SphereTraceSingleByProfile_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleByProfile_NativeFunction, "TraceColor");
        SphereTraceSingleByProfile_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleByProfile_NativeFunction, "TraceHitColor");
        SphereTraceSingleByProfile_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleByProfile_NativeFunction, "DrawTime");
        SphereTraceSingleByProfile_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingleByProfile_NativeFunction, "ReturnValue");
        SphereTraceSingle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SphereTraceSingle");
        SphereTraceSingle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SphereTraceSingle_NativeFunction);
        SphereTraceSingle_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingle_NativeFunction, "WorldContextObject");
        SphereTraceSingle_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingle_NativeFunction, "Start");
        SphereTraceSingle_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingle_NativeFunction, "End");
        SphereTraceSingle_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingle_NativeFunction, "Radius");
        SphereTraceSingle_TraceChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingle_NativeFunction, "TraceChannel");
        SphereTraceSingle_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingle_NativeFunction, "bTraceComplex");
        SphereTraceSingle_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingle_NativeFunction, "ActorsToIgnore");
        SphereTraceSingle_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SphereTraceSingle_NativeFunction, "ActorsToIgnore");
        SphereTraceSingle_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingle_NativeFunction, "DrawDebugType");
        SphereTraceSingle_OutHit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingle_NativeFunction, "OutHit");
        SphereTraceSingle_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingle_NativeFunction, "bIgnoreSelf");
        SphereTraceSingle_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingle_NativeFunction, "TraceColor");
        SphereTraceSingle_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingle_NativeFunction, "TraceHitColor");
        SphereTraceSingle_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingle_NativeFunction, "DrawTime");
        SphereTraceSingle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceSingle_NativeFunction, "ReturnValue");
        SphereTraceMultiForObjects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SphereTraceMultiForObjects");
        SphereTraceMultiForObjects_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SphereTraceMultiForObjects_NativeFunction);
        SphereTraceMultiForObjects_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiForObjects_NativeFunction, "WorldContextObject");
        SphereTraceMultiForObjects_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiForObjects_NativeFunction, "Start");
        SphereTraceMultiForObjects_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiForObjects_NativeFunction, "End");
        SphereTraceMultiForObjects_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiForObjects_NativeFunction, "Radius");
        SphereTraceMultiForObjects_ObjectTypes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiForObjects_NativeFunction, "ObjectTypes");
        SphereTraceMultiForObjects_ObjectTypes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SphereTraceMultiForObjects_NativeFunction, "ObjectTypes");
        SphereTraceMultiForObjects_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiForObjects_NativeFunction, "bTraceComplex");
        SphereTraceMultiForObjects_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiForObjects_NativeFunction, "ActorsToIgnore");
        SphereTraceMultiForObjects_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SphereTraceMultiForObjects_NativeFunction, "ActorsToIgnore");
        SphereTraceMultiForObjects_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiForObjects_NativeFunction, "DrawDebugType");
        SphereTraceMultiForObjects_OutHits_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiForObjects_NativeFunction, "OutHits");
        SphereTraceMultiForObjects_OutHits_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SphereTraceMultiForObjects_NativeFunction, "OutHits");
        SphereTraceMultiForObjects_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiForObjects_NativeFunction, "bIgnoreSelf");
        SphereTraceMultiForObjects_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiForObjects_NativeFunction, "TraceColor");
        SphereTraceMultiForObjects_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiForObjects_NativeFunction, "TraceHitColor");
        SphereTraceMultiForObjects_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiForObjects_NativeFunction, "DrawTime");
        SphereTraceMultiForObjects_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiForObjects_NativeFunction, "ReturnValue");
        SphereTraceMultiByProfile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SphereTraceMultiByProfile");
        SphereTraceMultiByProfile_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SphereTraceMultiByProfile_NativeFunction);
        SphereTraceMultiByProfile_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiByProfile_NativeFunction, "WorldContextObject");
        SphereTraceMultiByProfile_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiByProfile_NativeFunction, "Start");
        SphereTraceMultiByProfile_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiByProfile_NativeFunction, "End");
        SphereTraceMultiByProfile_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiByProfile_NativeFunction, "Radius");
        SphereTraceMultiByProfile_ProfileName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiByProfile_NativeFunction, "ProfileName");
        SphereTraceMultiByProfile_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiByProfile_NativeFunction, "bTraceComplex");
        SphereTraceMultiByProfile_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiByProfile_NativeFunction, "ActorsToIgnore");
        SphereTraceMultiByProfile_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SphereTraceMultiByProfile_NativeFunction, "ActorsToIgnore");
        SphereTraceMultiByProfile_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiByProfile_NativeFunction, "DrawDebugType");
        SphereTraceMultiByProfile_OutHits_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiByProfile_NativeFunction, "OutHits");
        SphereTraceMultiByProfile_OutHits_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SphereTraceMultiByProfile_NativeFunction, "OutHits");
        SphereTraceMultiByProfile_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiByProfile_NativeFunction, "bIgnoreSelf");
        SphereTraceMultiByProfile_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiByProfile_NativeFunction, "TraceColor");
        SphereTraceMultiByProfile_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiByProfile_NativeFunction, "TraceHitColor");
        SphereTraceMultiByProfile_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiByProfile_NativeFunction, "DrawTime");
        SphereTraceMultiByProfile_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMultiByProfile_NativeFunction, "ReturnValue");
        SphereTraceMulti_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SphereTraceMulti");
        SphereTraceMulti_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SphereTraceMulti_NativeFunction);
        SphereTraceMulti_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMulti_NativeFunction, "WorldContextObject");
        SphereTraceMulti_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMulti_NativeFunction, "Start");
        SphereTraceMulti_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMulti_NativeFunction, "End");
        SphereTraceMulti_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMulti_NativeFunction, "Radius");
        SphereTraceMulti_TraceChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMulti_NativeFunction, "TraceChannel");
        SphereTraceMulti_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMulti_NativeFunction, "bTraceComplex");
        SphereTraceMulti_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMulti_NativeFunction, "ActorsToIgnore");
        SphereTraceMulti_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SphereTraceMulti_NativeFunction, "ActorsToIgnore");
        SphereTraceMulti_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMulti_NativeFunction, "DrawDebugType");
        SphereTraceMulti_OutHits_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMulti_NativeFunction, "OutHits");
        SphereTraceMulti_OutHits_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SphereTraceMulti_NativeFunction, "OutHits");
        SphereTraceMulti_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMulti_NativeFunction, "bIgnoreSelf");
        SphereTraceMulti_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMulti_NativeFunction, "TraceColor");
        SphereTraceMulti_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMulti_NativeFunction, "TraceHitColor");
        SphereTraceMulti_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMulti_NativeFunction, "DrawTime");
        SphereTraceMulti_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereTraceMulti_NativeFunction, "ReturnValue");
        SphereOverlapComponents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SphereOverlapComponents");
        SphereOverlapComponents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SphereOverlapComponents_NativeFunction);
        SphereOverlapComponents_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereOverlapComponents_NativeFunction, "WorldContextObject");
        SphereOverlapComponents_SpherePos_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereOverlapComponents_NativeFunction, "SpherePos");
        SphereOverlapComponents_SphereRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereOverlapComponents_NativeFunction, "SphereRadius");
        SphereOverlapComponents_ObjectTypes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereOverlapComponents_NativeFunction, "ObjectTypes");
        SphereOverlapComponents_ObjectTypes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SphereOverlapComponents_NativeFunction, "ObjectTypes");
        SphereOverlapComponents_ComponentClassFilter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereOverlapComponents_NativeFunction, "ComponentClassFilter");
        SphereOverlapComponents_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereOverlapComponents_NativeFunction, "ActorsToIgnore");
        SphereOverlapComponents_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SphereOverlapComponents_NativeFunction, "ActorsToIgnore");
        SphereOverlapComponents_OutComponents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereOverlapComponents_NativeFunction, "OutComponents");
        SphereOverlapComponents_OutComponents_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SphereOverlapComponents_NativeFunction, "OutComponents");
        SphereOverlapComponents_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereOverlapComponents_NativeFunction, "ReturnValue");
        SphereOverlapActors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SphereOverlapActors");
        SphereOverlapActors_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SphereOverlapActors_NativeFunction);
        SphereOverlapActors_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereOverlapActors_NativeFunction, "WorldContextObject");
        SphereOverlapActors_SpherePos_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereOverlapActors_NativeFunction, "SpherePos");
        SphereOverlapActors_SphereRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereOverlapActors_NativeFunction, "SphereRadius");
        SphereOverlapActors_ObjectTypes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereOverlapActors_NativeFunction, "ObjectTypes");
        SphereOverlapActors_ObjectTypes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SphereOverlapActors_NativeFunction, "ObjectTypes");
        SphereOverlapActors_ActorClassFilter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereOverlapActors_NativeFunction, "ActorClassFilter");
        SphereOverlapActors_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereOverlapActors_NativeFunction, "ActorsToIgnore");
        SphereOverlapActors_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SphereOverlapActors_NativeFunction, "ActorsToIgnore");
        SphereOverlapActors_OutActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereOverlapActors_NativeFunction, "OutActors");
        SphereOverlapActors_OutActors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SphereOverlapActors_NativeFunction, "OutActors");
        SphereOverlapActors_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SphereOverlapActors_NativeFunction, "ReturnValue");
        SnapshotObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SnapshotObject");
        SnapshotObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SnapshotObject_NativeFunction);
        SnapshotObject_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SnapshotObject_NativeFunction, "Object");
        ShowPlatformSpecificLeaderboardScreen_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ShowPlatformSpecificLeaderboardScreen");
        ShowPlatformSpecificLeaderboardScreen_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ShowPlatformSpecificLeaderboardScreen_NativeFunction);
        ShowPlatformSpecificLeaderboardScreen_CategoryName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ShowPlatformSpecificLeaderboardScreen_NativeFunction, "CategoryName");
        ShowPlatformSpecificAchievementsScreen_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ShowPlatformSpecificAchievementsScreen");
        ShowPlatformSpecificAchievementsScreen_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ShowPlatformSpecificAchievementsScreen_NativeFunction);
        ShowPlatformSpecificAchievementsScreen_SpecificPlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ShowPlatformSpecificAchievementsScreen_NativeFunction, "SpecificPlayer");
        ShowInterstitialAd_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ShowInterstitialAd");
        ShowAdBanner_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ShowAdBanner");
        ShowAdBanner_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ShowAdBanner_NativeFunction);
        ShowAdBanner_AdIdIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ShowAdBanner_NativeFunction, "AdIdIndex");
        ShowAdBanner_bShowOnBottomOfScreen_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ShowAdBanner_NativeFunction, "bShowOnBottomOfScreen");
        SetVolumeButtonsHandledBySystem_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVolumeButtonsHandledBySystem");
        SetVolumeButtonsHandledBySystem_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVolumeButtonsHandledBySystem_NativeFunction);
        SetVolumeButtonsHandledBySystem_bEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVolumeButtonsHandledBySystem_NativeFunction, "bEnabled");
        SetUserActivity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetUserActivity");
        SetUserActivity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetUserActivity_NativeFunction);
        SetUserActivity_UserActivity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUserActivity_NativeFunction, "UserActivity");
        SetSuppressViewportTransitionMessage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSuppressViewportTransitionMessage");
        SetSuppressViewportTransitionMessage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSuppressViewportTransitionMessage_NativeFunction);
        SetSuppressViewportTransitionMessage_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSuppressViewportTransitionMessage_NativeFunction, "WorldContextObject");
        SetSuppressViewportTransitionMessage_bState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSuppressViewportTransitionMessage_NativeFunction, "bState");
        SetGamepadsBlockDeviceFeedback_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGamepadsBlockDeviceFeedback");
        SetGamepadsBlockDeviceFeedback_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGamepadsBlockDeviceFeedback_NativeFunction);
        SetGamepadsBlockDeviceFeedback_bBlock_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGamepadsBlockDeviceFeedback_NativeFunction, "bBlock");
        ResetGamepadAssignmentToController_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetGamepadAssignmentToController");
        ResetGamepadAssignmentToController_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ResetGamepadAssignmentToController_NativeFunction);
        ResetGamepadAssignmentToController_ControllerId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResetGamepadAssignmentToController_NativeFunction, "ControllerId");
        ResetGamepadAssignments_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetGamepadAssignments");
        RegisterForRemoteNotifications_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RegisterForRemoteNotifications");
        QuitGame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "QuitGame");
        QuitGame_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(QuitGame_NativeFunction);
        QuitGame_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(QuitGame_NativeFunction, "WorldContextObject");
        QuitGame_SpecificPlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(QuitGame_NativeFunction, "SpecificPlayer");
        QuitGame_QuitPreference_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(QuitGame_NativeFunction, "QuitPreference");
        QuitGame_bIgnorePlatformRestrictions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(QuitGame_NativeFunction, "bIgnorePlatformRestrictions");
        QuitEditor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "QuitEditor");
        PrintString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PrintString");
        PrintString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PrintString_NativeFunction);
        PrintString_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PrintString_NativeFunction, "WorldContextObject");
        PrintString_InString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PrintString_NativeFunction, "InString");
        PrintString_bPrintToScreen_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PrintString_NativeFunction, "bPrintToScreen");
        PrintString_bPrintToLog_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PrintString_NativeFunction, "bPrintToLog");
        PrintString_TextColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PrintString_NativeFunction, "TextColor");
        PrintString_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PrintString_NativeFunction, "Duration");
        PrintString_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PrintString_NativeFunction, "Key");
        ParseParamValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ParseParamValue");
        ParseParamValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ParseParamValue_NativeFunction);
        ParseParamValue_InString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ParseParamValue_NativeFunction, "InString");
        ParseParamValue_InParam_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ParseParamValue_NativeFunction, "InParam");
        ParseParamValue_OutValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ParseParamValue_NativeFunction, "OutValue");
        ParseParamValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ParseParamValue_NativeFunction, "ReturnValue");
        ParseParam_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ParseParam");
        ParseParam_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ParseParam_NativeFunction);
        ParseParam_InString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ParseParam_NativeFunction, "InString");
        ParseParam_InParam_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ParseParam_NativeFunction, "InParam");
        ParseParam_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ParseParam_NativeFunction, "ReturnValue");
        NotEqual_SoftObjectReference_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_SoftObjectReference");
        NotEqual_SoftObjectReference_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_SoftObjectReference_NativeFunction);
        NotEqual_SoftObjectReference_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_SoftObjectReference_NativeFunction, "A");
        NotEqual_SoftObjectReference_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_SoftObjectReference_NativeFunction, "B");
        NotEqual_SoftObjectReference_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_SoftObjectReference_NativeFunction, "ReturnValue");
        NotEqual_PrimaryAssetType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_PrimaryAssetType");
        NotEqual_PrimaryAssetType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_PrimaryAssetType_NativeFunction);
        NotEqual_PrimaryAssetType_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_PrimaryAssetType_NativeFunction, "A");
        NotEqual_PrimaryAssetType_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_PrimaryAssetType_NativeFunction, "B");
        NotEqual_PrimaryAssetType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_PrimaryAssetType_NativeFunction, "ReturnValue");
        NotEqual_PrimaryAssetId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NotEqual_PrimaryAssetId");
        NotEqual_PrimaryAssetId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NotEqual_PrimaryAssetId_NativeFunction);
        NotEqual_PrimaryAssetId_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_PrimaryAssetId_NativeFunction, "A");
        NotEqual_PrimaryAssetId_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_PrimaryAssetId_NativeFunction, "B");
        NotEqual_PrimaryAssetId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NotEqual_PrimaryAssetId_NativeFunction, "ReturnValue");
        NormalizeFilename_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NormalizeFilename");
        NormalizeFilename_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NormalizeFilename_NativeFunction);
        NormalizeFilename_InFilename_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NormalizeFilename_NativeFunction, "InFilename");
        NormalizeFilename_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NormalizeFilename_NativeFunction, "ReturnValue");
        MakeLiteralString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeLiteralString");
        MakeLiteralString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeLiteralString_NativeFunction);
        MakeLiteralString_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeLiteralString_NativeFunction, "Value");
        MakeLiteralString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeLiteralString_NativeFunction, "ReturnValue");
        MakeLiteralName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeLiteralName");
        MakeLiteralName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeLiteralName_NativeFunction);
        MakeLiteralName_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeLiteralName_NativeFunction, "Value");
        MakeLiteralName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeLiteralName_NativeFunction, "ReturnValue");
        MakeLiteralInt64_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeLiteralInt64");
        MakeLiteralInt64_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeLiteralInt64_NativeFunction);
        MakeLiteralInt64_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeLiteralInt64_NativeFunction, "Value");
        MakeLiteralInt64_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeLiteralInt64_NativeFunction, "ReturnValue");
        MakeLiteralInt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeLiteralInt");
        MakeLiteralInt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeLiteralInt_NativeFunction);
        MakeLiteralInt_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeLiteralInt_NativeFunction, "Value");
        MakeLiteralInt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeLiteralInt_NativeFunction, "ReturnValue");
        MakeLiteralDouble_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeLiteralDouble");
        MakeLiteralDouble_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeLiteralDouble_NativeFunction);
        MakeLiteralDouble_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeLiteralDouble_NativeFunction, "Value");
        MakeLiteralDouble_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeLiteralDouble_NativeFunction, "ReturnValue");
        MakeLiteralByte_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeLiteralByte");
        MakeLiteralByte_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeLiteralByte_NativeFunction);
        MakeLiteralByte_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeLiteralByte_NativeFunction, "Value");
        MakeLiteralByte_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeLiteralByte_NativeFunction, "ReturnValue");
        MakeLiteralBool_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeLiteralBool");
        MakeLiteralBool_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeLiteralBool_NativeFunction);
        MakeLiteralBool_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeLiteralBool_NativeFunction, "Value");
        MakeLiteralBool_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeLiteralBool_NativeFunction, "ReturnValue");
        LogString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LogString");
        LogString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LogString_NativeFunction);
        LogString_InString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogString_NativeFunction, "InString");
        LogString_bPrintToLog_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogString_NativeFunction, "bPrintToLog");
        LoadInterstitialAd_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LoadInterstitialAd");
        LoadInterstitialAd_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LoadInterstitialAd_NativeFunction);
        LoadInterstitialAd_AdIdIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LoadInterstitialAd_NativeFunction, "AdIdIndex");
        LoadAsset_Blocking_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LoadAsset_Blocking");
        LoadAsset_Blocking_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LoadAsset_Blocking_NativeFunction);
        LoadAsset_Blocking_Asset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LoadAsset_Blocking_NativeFunction, "Asset");
        LoadAsset_Blocking_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LoadAsset_Blocking_NativeFunction, "ReturnValue");
        LineTraceSingleForObjects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LineTraceSingleForObjects");
        LineTraceSingleForObjects_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LineTraceSingleForObjects_NativeFunction);
        LineTraceSingleForObjects_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleForObjects_NativeFunction, "WorldContextObject");
        LineTraceSingleForObjects_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleForObjects_NativeFunction, "Start");
        LineTraceSingleForObjects_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleForObjects_NativeFunction, "End");
        LineTraceSingleForObjects_ObjectTypes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleForObjects_NativeFunction, "ObjectTypes");
        LineTraceSingleForObjects_ObjectTypes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(LineTraceSingleForObjects_NativeFunction, "ObjectTypes");
        LineTraceSingleForObjects_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleForObjects_NativeFunction, "bTraceComplex");
        LineTraceSingleForObjects_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleForObjects_NativeFunction, "ActorsToIgnore");
        LineTraceSingleForObjects_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(LineTraceSingleForObjects_NativeFunction, "ActorsToIgnore");
        LineTraceSingleForObjects_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleForObjects_NativeFunction, "DrawDebugType");
        LineTraceSingleForObjects_OutHit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleForObjects_NativeFunction, "OutHit");
        LineTraceSingleForObjects_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleForObjects_NativeFunction, "bIgnoreSelf");
        LineTraceSingleForObjects_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleForObjects_NativeFunction, "TraceColor");
        LineTraceSingleForObjects_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleForObjects_NativeFunction, "TraceHitColor");
        LineTraceSingleForObjects_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleForObjects_NativeFunction, "DrawTime");
        LineTraceSingleForObjects_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleForObjects_NativeFunction, "ReturnValue");
        LineTraceSingleByProfile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LineTraceSingleByProfile");
        LineTraceSingleByProfile_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LineTraceSingleByProfile_NativeFunction);
        LineTraceSingleByProfile_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleByProfile_NativeFunction, "WorldContextObject");
        LineTraceSingleByProfile_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleByProfile_NativeFunction, "Start");
        LineTraceSingleByProfile_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleByProfile_NativeFunction, "End");
        LineTraceSingleByProfile_ProfileName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleByProfile_NativeFunction, "ProfileName");
        LineTraceSingleByProfile_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleByProfile_NativeFunction, "bTraceComplex");
        LineTraceSingleByProfile_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleByProfile_NativeFunction, "ActorsToIgnore");
        LineTraceSingleByProfile_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(LineTraceSingleByProfile_NativeFunction, "ActorsToIgnore");
        LineTraceSingleByProfile_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleByProfile_NativeFunction, "DrawDebugType");
        LineTraceSingleByProfile_OutHit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleByProfile_NativeFunction, "OutHit");
        LineTraceSingleByProfile_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleByProfile_NativeFunction, "bIgnoreSelf");
        LineTraceSingleByProfile_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleByProfile_NativeFunction, "TraceColor");
        LineTraceSingleByProfile_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleByProfile_NativeFunction, "TraceHitColor");
        LineTraceSingleByProfile_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleByProfile_NativeFunction, "DrawTime");
        LineTraceSingleByProfile_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingleByProfile_NativeFunction, "ReturnValue");
        LineTraceSingle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LineTraceSingle");
        LineTraceSingle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LineTraceSingle_NativeFunction);
        LineTraceSingle_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingle_NativeFunction, "WorldContextObject");
        LineTraceSingle_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingle_NativeFunction, "Start");
        LineTraceSingle_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingle_NativeFunction, "End");
        LineTraceSingle_TraceChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingle_NativeFunction, "TraceChannel");
        LineTraceSingle_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingle_NativeFunction, "bTraceComplex");
        LineTraceSingle_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingle_NativeFunction, "ActorsToIgnore");
        LineTraceSingle_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(LineTraceSingle_NativeFunction, "ActorsToIgnore");
        LineTraceSingle_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingle_NativeFunction, "DrawDebugType");
        LineTraceSingle_OutHit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingle_NativeFunction, "OutHit");
        LineTraceSingle_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingle_NativeFunction, "bIgnoreSelf");
        LineTraceSingle_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingle_NativeFunction, "TraceColor");
        LineTraceSingle_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingle_NativeFunction, "TraceHitColor");
        LineTraceSingle_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingle_NativeFunction, "DrawTime");
        LineTraceSingle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceSingle_NativeFunction, "ReturnValue");
        LineTraceMultiForObjects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LineTraceMultiForObjects");
        LineTraceMultiForObjects_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LineTraceMultiForObjects_NativeFunction);
        LineTraceMultiForObjects_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiForObjects_NativeFunction, "WorldContextObject");
        LineTraceMultiForObjects_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiForObjects_NativeFunction, "Start");
        LineTraceMultiForObjects_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiForObjects_NativeFunction, "End");
        LineTraceMultiForObjects_ObjectTypes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiForObjects_NativeFunction, "ObjectTypes");
        LineTraceMultiForObjects_ObjectTypes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(LineTraceMultiForObjects_NativeFunction, "ObjectTypes");
        LineTraceMultiForObjects_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiForObjects_NativeFunction, "bTraceComplex");
        LineTraceMultiForObjects_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiForObjects_NativeFunction, "ActorsToIgnore");
        LineTraceMultiForObjects_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(LineTraceMultiForObjects_NativeFunction, "ActorsToIgnore");
        LineTraceMultiForObjects_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiForObjects_NativeFunction, "DrawDebugType");
        LineTraceMultiForObjects_OutHits_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiForObjects_NativeFunction, "OutHits");
        LineTraceMultiForObjects_OutHits_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(LineTraceMultiForObjects_NativeFunction, "OutHits");
        LineTraceMultiForObjects_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiForObjects_NativeFunction, "bIgnoreSelf");
        LineTraceMultiForObjects_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiForObjects_NativeFunction, "TraceColor");
        LineTraceMultiForObjects_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiForObjects_NativeFunction, "TraceHitColor");
        LineTraceMultiForObjects_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiForObjects_NativeFunction, "DrawTime");
        LineTraceMultiForObjects_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiForObjects_NativeFunction, "ReturnValue");
        LineTraceMultiByProfile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LineTraceMultiByProfile");
        LineTraceMultiByProfile_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LineTraceMultiByProfile_NativeFunction);
        LineTraceMultiByProfile_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiByProfile_NativeFunction, "WorldContextObject");
        LineTraceMultiByProfile_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiByProfile_NativeFunction, "Start");
        LineTraceMultiByProfile_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiByProfile_NativeFunction, "End");
        LineTraceMultiByProfile_ProfileName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiByProfile_NativeFunction, "ProfileName");
        LineTraceMultiByProfile_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiByProfile_NativeFunction, "bTraceComplex");
        LineTraceMultiByProfile_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiByProfile_NativeFunction, "ActorsToIgnore");
        LineTraceMultiByProfile_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(LineTraceMultiByProfile_NativeFunction, "ActorsToIgnore");
        LineTraceMultiByProfile_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiByProfile_NativeFunction, "DrawDebugType");
        LineTraceMultiByProfile_OutHits_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiByProfile_NativeFunction, "OutHits");
        LineTraceMultiByProfile_OutHits_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(LineTraceMultiByProfile_NativeFunction, "OutHits");
        LineTraceMultiByProfile_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiByProfile_NativeFunction, "bIgnoreSelf");
        LineTraceMultiByProfile_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiByProfile_NativeFunction, "TraceColor");
        LineTraceMultiByProfile_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiByProfile_NativeFunction, "TraceHitColor");
        LineTraceMultiByProfile_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiByProfile_NativeFunction, "DrawTime");
        LineTraceMultiByProfile_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMultiByProfile_NativeFunction, "ReturnValue");
        LineTraceMulti_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LineTraceMulti");
        LineTraceMulti_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LineTraceMulti_NativeFunction);
        LineTraceMulti_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMulti_NativeFunction, "WorldContextObject");
        LineTraceMulti_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMulti_NativeFunction, "Start");
        LineTraceMulti_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMulti_NativeFunction, "End");
        LineTraceMulti_TraceChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMulti_NativeFunction, "TraceChannel");
        LineTraceMulti_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMulti_NativeFunction, "bTraceComplex");
        LineTraceMulti_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMulti_NativeFunction, "ActorsToIgnore");
        LineTraceMulti_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(LineTraceMulti_NativeFunction, "ActorsToIgnore");
        LineTraceMulti_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMulti_NativeFunction, "DrawDebugType");
        LineTraceMulti_OutHits_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMulti_NativeFunction, "OutHits");
        LineTraceMulti_OutHits_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(LineTraceMulti_NativeFunction, "OutHits");
        LineTraceMulti_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMulti_NativeFunction, "bIgnoreSelf");
        LineTraceMulti_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMulti_NativeFunction, "TraceColor");
        LineTraceMulti_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMulti_NativeFunction, "TraceHitColor");
        LineTraceMulti_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMulti_NativeFunction, "DrawTime");
        LineTraceMulti_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LineTraceMulti_NativeFunction, "ReturnValue");
        LaunchURL_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LaunchURL");
        LaunchURL_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LaunchURL_NativeFunction);
        LaunchURL_URL_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LaunchURL_NativeFunction, "URL");
        K2_UnPauseTimerHandle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_UnPauseTimerHandle");
        K2_UnPauseTimerHandle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_UnPauseTimerHandle_NativeFunction);
        K2_UnPauseTimerHandle_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_UnPauseTimerHandle_NativeFunction, "WorldContextObject");
        K2_UnPauseTimerHandle_Handle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_UnPauseTimerHandle_NativeFunction, "Handle");
        K2_UnPauseTimer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_UnPauseTimer");
        K2_UnPauseTimer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_UnPauseTimer_NativeFunction);
        K2_UnPauseTimer_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_UnPauseTimer_NativeFunction, "Object");
        K2_UnPauseTimer_FunctionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_UnPauseTimer_NativeFunction, "FunctionName");
        K2_TimerExistsHandle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_TimerExistsHandle");
        K2_TimerExistsHandle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_TimerExistsHandle_NativeFunction);
        K2_TimerExistsHandle_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_TimerExistsHandle_NativeFunction, "WorldContextObject");
        K2_TimerExistsHandle_Handle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_TimerExistsHandle_NativeFunction, "Handle");
        K2_TimerExistsHandle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_TimerExistsHandle_NativeFunction, "ReturnValue");
        K2_TimerExists_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_TimerExists");
        K2_TimerExists_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_TimerExists_NativeFunction);
        K2_TimerExists_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_TimerExists_NativeFunction, "Object");
        K2_TimerExists_FunctionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_TimerExists_NativeFunction, "FunctionName");
        K2_TimerExists_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_TimerExists_NativeFunction, "ReturnValue");
        K2_SetTimerForNextTick_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_SetTimerForNextTick");
        K2_SetTimerForNextTick_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_SetTimerForNextTick_NativeFunction);
        K2_SetTimerForNextTick_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetTimerForNextTick_NativeFunction, "Object");
        K2_SetTimerForNextTick_FunctionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetTimerForNextTick_NativeFunction, "FunctionName");
        K2_SetTimerForNextTick_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetTimerForNextTick_NativeFunction, "ReturnValue");
        K2_SetTimer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_SetTimer");
        K2_SetTimer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_SetTimer_NativeFunction);
        K2_SetTimer_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetTimer_NativeFunction, "Object");
        K2_SetTimer_FunctionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetTimer_NativeFunction, "FunctionName");
        K2_SetTimer_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetTimer_NativeFunction, "Time");
        K2_SetTimer_bLooping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetTimer_NativeFunction, "bLooping");
        K2_SetTimer_InitialStartDelay_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetTimer_NativeFunction, "InitialStartDelay");
        K2_SetTimer_InitialStartDelayVariance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetTimer_NativeFunction, "InitialStartDelayVariance");
        K2_SetTimer_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetTimer_NativeFunction, "ReturnValue");
        K2_PauseTimerHandle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_PauseTimerHandle");
        K2_PauseTimerHandle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_PauseTimerHandle_NativeFunction);
        K2_PauseTimerHandle_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_PauseTimerHandle_NativeFunction, "WorldContextObject");
        K2_PauseTimerHandle_Handle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_PauseTimerHandle_NativeFunction, "Handle");
        K2_PauseTimer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_PauseTimer");
        K2_PauseTimer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_PauseTimer_NativeFunction);
        K2_PauseTimer_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_PauseTimer_NativeFunction, "Object");
        K2_PauseTimer_FunctionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_PauseTimer_NativeFunction, "FunctionName");
        K2_IsValidTimerHandle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_IsValidTimerHandle");
        K2_IsValidTimerHandle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_IsValidTimerHandle_NativeFunction);
        K2_IsValidTimerHandle_Handle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_IsValidTimerHandle_NativeFunction, "Handle");
        K2_IsValidTimerHandle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_IsValidTimerHandle_NativeFunction, "ReturnValue");
        K2_IsTimerPausedHandle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_IsTimerPausedHandle");
        K2_IsTimerPausedHandle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_IsTimerPausedHandle_NativeFunction);
        K2_IsTimerPausedHandle_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_IsTimerPausedHandle_NativeFunction, "WorldContextObject");
        K2_IsTimerPausedHandle_Handle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_IsTimerPausedHandle_NativeFunction, "Handle");
        K2_IsTimerPausedHandle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_IsTimerPausedHandle_NativeFunction, "ReturnValue");
        K2_IsTimerPaused_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_IsTimerPaused");
        K2_IsTimerPaused_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_IsTimerPaused_NativeFunction);
        K2_IsTimerPaused_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_IsTimerPaused_NativeFunction, "Object");
        K2_IsTimerPaused_FunctionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_IsTimerPaused_NativeFunction, "FunctionName");
        K2_IsTimerPaused_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_IsTimerPaused_NativeFunction, "ReturnValue");
        K2_IsTimerActiveHandle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_IsTimerActiveHandle");
        K2_IsTimerActiveHandle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_IsTimerActiveHandle_NativeFunction);
        K2_IsTimerActiveHandle_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_IsTimerActiveHandle_NativeFunction, "WorldContextObject");
        K2_IsTimerActiveHandle_Handle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_IsTimerActiveHandle_NativeFunction, "Handle");
        K2_IsTimerActiveHandle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_IsTimerActiveHandle_NativeFunction, "ReturnValue");
        K2_IsTimerActive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_IsTimerActive");
        K2_IsTimerActive_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_IsTimerActive_NativeFunction);
        K2_IsTimerActive_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_IsTimerActive_NativeFunction, "Object");
        K2_IsTimerActive_FunctionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_IsTimerActive_NativeFunction, "FunctionName");
        K2_IsTimerActive_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_IsTimerActive_NativeFunction, "ReturnValue");
        K2_InvalidateTimerHandle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_InvalidateTimerHandle");
        K2_InvalidateTimerHandle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_InvalidateTimerHandle_NativeFunction);
        K2_InvalidateTimerHandle_Handle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_InvalidateTimerHandle_NativeFunction, "Handle");
        K2_InvalidateTimerHandle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_InvalidateTimerHandle_NativeFunction, "ReturnValue");
        K2_GetTimerRemainingTimeHandle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_GetTimerRemainingTimeHandle");
        K2_GetTimerRemainingTimeHandle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_GetTimerRemainingTimeHandle_NativeFunction);
        K2_GetTimerRemainingTimeHandle_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetTimerRemainingTimeHandle_NativeFunction, "WorldContextObject");
        K2_GetTimerRemainingTimeHandle_Handle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetTimerRemainingTimeHandle_NativeFunction, "Handle");
        K2_GetTimerRemainingTimeHandle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetTimerRemainingTimeHandle_NativeFunction, "ReturnValue");
        K2_GetTimerRemainingTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_GetTimerRemainingTime");
        K2_GetTimerRemainingTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_GetTimerRemainingTime_NativeFunction);
        K2_GetTimerRemainingTime_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetTimerRemainingTime_NativeFunction, "Object");
        K2_GetTimerRemainingTime_FunctionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetTimerRemainingTime_NativeFunction, "FunctionName");
        K2_GetTimerRemainingTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetTimerRemainingTime_NativeFunction, "ReturnValue");
        K2_GetTimerElapsedTimeHandle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_GetTimerElapsedTimeHandle");
        K2_GetTimerElapsedTimeHandle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_GetTimerElapsedTimeHandle_NativeFunction);
        K2_GetTimerElapsedTimeHandle_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetTimerElapsedTimeHandle_NativeFunction, "WorldContextObject");
        K2_GetTimerElapsedTimeHandle_Handle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetTimerElapsedTimeHandle_NativeFunction, "Handle");
        K2_GetTimerElapsedTimeHandle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetTimerElapsedTimeHandle_NativeFunction, "ReturnValue");
        K2_GetTimerElapsedTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_GetTimerElapsedTime");
        K2_GetTimerElapsedTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_GetTimerElapsedTime_NativeFunction);
        K2_GetTimerElapsedTime_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetTimerElapsedTime_NativeFunction, "Object");
        K2_GetTimerElapsedTime_FunctionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetTimerElapsedTime_NativeFunction, "FunctionName");
        K2_GetTimerElapsedTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetTimerElapsedTime_NativeFunction, "ReturnValue");
        K2_ClearTimerHandle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_ClearTimerHandle");
        K2_ClearTimerHandle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_ClearTimerHandle_NativeFunction);
        K2_ClearTimerHandle_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_ClearTimerHandle_NativeFunction, "WorldContextObject");
        K2_ClearTimerHandle_Handle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_ClearTimerHandle_NativeFunction, "Handle");
        K2_ClearTimer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_ClearTimer");
        K2_ClearTimer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_ClearTimer_NativeFunction);
        K2_ClearTimer_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_ClearTimer_NativeFunction, "Object");
        K2_ClearTimer_FunctionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_ClearTimer_NativeFunction, "FunctionName");
        K2_ClearAndInvalidateTimerHandle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_ClearAndInvalidateTimerHandle");
        K2_ClearAndInvalidateTimerHandle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_ClearAndInvalidateTimerHandle_NativeFunction);
        K2_ClearAndInvalidateTimerHandle_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_ClearAndInvalidateTimerHandle_NativeFunction, "WorldContextObject");
        K2_ClearAndInvalidateTimerHandle_Handle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_ClearAndInvalidateTimerHandle_NativeFunction, "Handle");
        IsValidSoftObjectReference_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValidSoftObjectReference");
        IsValidSoftObjectReference_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValidSoftObjectReference_NativeFunction);
        IsValidSoftObjectReference_SoftObjectReference_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidSoftObjectReference_NativeFunction, "SoftObjectReference");
        IsValidSoftObjectReference_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidSoftObjectReference_NativeFunction, "ReturnValue");
        IsValidPrimaryAssetType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValidPrimaryAssetType");
        IsValidPrimaryAssetType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValidPrimaryAssetType_NativeFunction);
        IsValidPrimaryAssetType_PrimaryAssetType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidPrimaryAssetType_NativeFunction, "PrimaryAssetType");
        IsValidPrimaryAssetType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidPrimaryAssetType_NativeFunction, "ReturnValue");
        IsValidPrimaryAssetId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValidPrimaryAssetId");
        IsValidPrimaryAssetId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValidPrimaryAssetId_NativeFunction);
        IsValidPrimaryAssetId_PrimaryAssetId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidPrimaryAssetId_NativeFunction, "PrimaryAssetId");
        IsValidPrimaryAssetId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidPrimaryAssetId_NativeFunction, "ReturnValue");
        IsValidClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValidClass");
        IsValidClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValidClass_NativeFunction);
        IsValidClass_Class_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidClass_NativeFunction, "Class");
        IsValidClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValidClass_NativeFunction, "ReturnValue");
        IsValid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsValid");
        IsValid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsValid_NativeFunction);
        IsValid_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValid_NativeFunction, "Object");
        IsValid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsValid_NativeFunction, "ReturnValue");
        IsUnattended_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsUnattended");
        IsUnattended_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsUnattended_NativeFunction);
        IsUnattended_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsUnattended_NativeFunction, "ReturnValue");
        IsStandalone_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsStandalone");
        IsStandalone_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsStandalone_NativeFunction);
        IsStandalone_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsStandalone_NativeFunction, "WorldContextObject");
        IsStandalone_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsStandalone_NativeFunction, "ReturnValue");
        IsSplitScreen_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsSplitScreen");
        IsSplitScreen_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsSplitScreen_NativeFunction);
        IsSplitScreen_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSplitScreen_NativeFunction, "WorldContextObject");
        IsSplitScreen_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSplitScreen_NativeFunction, "ReturnValue");
        IsServer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsServer");
        IsServer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsServer_NativeFunction);
        IsServer_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsServer_NativeFunction, "WorldContextObject");
        IsServer_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsServer_NativeFunction, "ReturnValue");
        IsScreensaverEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsScreensaverEnabled");
        IsScreensaverEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsScreensaverEnabled_NativeFunction);
        IsScreensaverEnabled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsScreensaverEnabled_NativeFunction, "ReturnValue");
        IsPackagedForDistribution_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPackagedForDistribution");
        IsPackagedForDistribution_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPackagedForDistribution_NativeFunction);
        IsPackagedForDistribution_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPackagedForDistribution_NativeFunction, "ReturnValue");
        IsLoggedIn_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsLoggedIn");
        IsLoggedIn_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsLoggedIn_NativeFunction);
        IsLoggedIn_SpecificPlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLoggedIn_NativeFunction, "SpecificPlayer");
        IsLoggedIn_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLoggedIn_NativeFunction, "ReturnValue");
        IsInterstitialAdRequested_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsInterstitialAdRequested");
        IsInterstitialAdRequested_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsInterstitialAdRequested_NativeFunction);
        IsInterstitialAdRequested_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsInterstitialAdRequested_NativeFunction, "ReturnValue");
        IsInterstitialAdAvailable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsInterstitialAdAvailable");
        IsInterstitialAdAvailable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsInterstitialAdAvailable_NativeFunction);
        IsInterstitialAdAvailable_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsInterstitialAdAvailable_NativeFunction, "ReturnValue");
        IsDedicatedServer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsDedicatedServer");
        IsDedicatedServer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsDedicatedServer_NativeFunction);
        IsDedicatedServer_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsDedicatedServer_NativeFunction, "WorldContextObject");
        IsDedicatedServer_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsDedicatedServer_NativeFunction, "ReturnValue");
        IsControllerAssignedToGamepad_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsControllerAssignedToGamepad");
        IsControllerAssignedToGamepad_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsControllerAssignedToGamepad_NativeFunction);
        IsControllerAssignedToGamepad_ControllerId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsControllerAssignedToGamepad_NativeFunction, "ControllerId");
        IsControllerAssignedToGamepad_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsControllerAssignedToGamepad_NativeFunction, "ReturnValue");
        HideAdBanner_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HideAdBanner");
        HasMultipleLocalPlayers_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasMultipleLocalPlayers");
        HasMultipleLocalPlayers_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasMultipleLocalPlayers_NativeFunction);
        HasMultipleLocalPlayers_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasMultipleLocalPlayers_NativeFunction, "WorldContextObject");
        HasMultipleLocalPlayers_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasMultipleLocalPlayers_NativeFunction, "ReturnValue");
        GetVolumeButtonsHandledBySystem_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVolumeButtonsHandledBySystem");
        GetVolumeButtonsHandledBySystem_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVolumeButtonsHandledBySystem_NativeFunction);
        GetVolumeButtonsHandledBySystem_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVolumeButtonsHandledBySystem_NativeFunction, "ReturnValue");
        GetUniqueDeviceId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetUniqueDeviceId");
        GetUniqueDeviceId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetUniqueDeviceId_NativeFunction);
        GetUniqueDeviceId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUniqueDeviceId_NativeFunction, "ReturnValue");
        GetSystemPath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSystemPath");
        GetSystemPath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSystemPath_NativeFunction);
        GetSystemPath_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSystemPath_NativeFunction, "Object");
        GetSystemPath_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSystemPath_NativeFunction, "ReturnValue");
        GetSupportedFullscreenResolutions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSupportedFullscreenResolutions");
        GetSupportedFullscreenResolutions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSupportedFullscreenResolutions_NativeFunction);
        GetSupportedFullscreenResolutions_Resolutions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSupportedFullscreenResolutions_NativeFunction, "Resolutions");
        GetSupportedFullscreenResolutions_Resolutions_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSupportedFullscreenResolutions_NativeFunction, "Resolutions");
        GetSupportedFullscreenResolutions_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSupportedFullscreenResolutions_NativeFunction, "ReturnValue");
        GetStructTopLevelAssetPath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStructTopLevelAssetPath");
        GetStructTopLevelAssetPath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStructTopLevelAssetPath_NativeFunction);
        GetStructTopLevelAssetPath_Struct_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStructTopLevelAssetPath_NativeFunction, "Struct");
        GetStructTopLevelAssetPath_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStructTopLevelAssetPath_NativeFunction, "ReturnValue");
        GetSoftObjectReferenceFromPrimaryAssetId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSoftObjectReferenceFromPrimaryAssetId");
        GetSoftObjectReferenceFromPrimaryAssetId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSoftObjectReferenceFromPrimaryAssetId_NativeFunction);
        GetSoftObjectReferenceFromPrimaryAssetId_PrimaryAssetId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSoftObjectReferenceFromPrimaryAssetId_NativeFunction, "PrimaryAssetId");
        GetSoftObjectReferenceFromPrimaryAssetId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSoftObjectReferenceFromPrimaryAssetId_NativeFunction, "ReturnValue");
        GetSoftObjectPath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSoftObjectPath");
        GetSoftObjectPath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSoftObjectPath_NativeFunction);
        GetSoftObjectPath_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSoftObjectPath_NativeFunction, "Object");
        GetSoftObjectPath_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSoftObjectPath_NativeFunction, "ReturnValue");
        GetSoftClassPath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSoftClassPath");
        GetSoftClassPath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSoftClassPath_NativeFunction);
        GetSoftClassPath_Class_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSoftClassPath_NativeFunction, "Class");
        GetSoftClassPath_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSoftClassPath_NativeFunction, "ReturnValue");
        GetRenderingMaterialQualityLevel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRenderingMaterialQualityLevel");
        GetRenderingMaterialQualityLevel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRenderingMaterialQualityLevel_NativeFunction);
        GetRenderingMaterialQualityLevel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRenderingMaterialQualityLevel_NativeFunction, "ReturnValue");
        GetRenderingDetailMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRenderingDetailMode");
        GetRenderingDetailMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRenderingDetailMode_NativeFunction);
        GetRenderingDetailMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRenderingDetailMode_NativeFunction, "ReturnValue");
        GetProjectSavedDirectory_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetProjectSavedDirectory");
        GetProjectSavedDirectory_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetProjectSavedDirectory_NativeFunction);
        GetProjectSavedDirectory_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetProjectSavedDirectory_NativeFunction, "ReturnValue");
        GetProjectDirectory_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetProjectDirectory");
        GetProjectDirectory_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetProjectDirectory_NativeFunction);
        GetProjectDirectory_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetProjectDirectory_NativeFunction, "ReturnValue");
        GetProjectContentDirectory_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetProjectContentDirectory");
        GetProjectContentDirectory_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetProjectContentDirectory_NativeFunction);
        GetProjectContentDirectory_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetProjectContentDirectory_NativeFunction, "ReturnValue");
        GetPrimaryAssetsWithBundleState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPrimaryAssetsWithBundleState");
        GetPrimaryAssetsWithBundleState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPrimaryAssetsWithBundleState_NativeFunction);
        GetPrimaryAssetsWithBundleState_RequiredBundles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPrimaryAssetsWithBundleState_NativeFunction, "RequiredBundles");
        GetPrimaryAssetsWithBundleState_RequiredBundles_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetPrimaryAssetsWithBundleState_NativeFunction, "RequiredBundles");
        GetPrimaryAssetsWithBundleState_ExcludedBundles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPrimaryAssetsWithBundleState_NativeFunction, "ExcludedBundles");
        GetPrimaryAssetsWithBundleState_ExcludedBundles_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetPrimaryAssetsWithBundleState_NativeFunction, "ExcludedBundles");
        GetPrimaryAssetsWithBundleState_ValidTypes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPrimaryAssetsWithBundleState_NativeFunction, "ValidTypes");
        GetPrimaryAssetsWithBundleState_ValidTypes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetPrimaryAssetsWithBundleState_NativeFunction, "ValidTypes");
        GetPrimaryAssetsWithBundleState_bForceCurrentState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPrimaryAssetsWithBundleState_NativeFunction, "bForceCurrentState");
        GetPrimaryAssetsWithBundleState_OutPrimaryAssetIdList_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPrimaryAssetsWithBundleState_NativeFunction, "OutPrimaryAssetIdList");
        GetPrimaryAssetsWithBundleState_OutPrimaryAssetIdList_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetPrimaryAssetsWithBundleState_NativeFunction, "OutPrimaryAssetIdList");
        GetPrimaryAssetIdList_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPrimaryAssetIdList");
        GetPrimaryAssetIdList_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPrimaryAssetIdList_NativeFunction);
        GetPrimaryAssetIdList_PrimaryAssetType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPrimaryAssetIdList_NativeFunction, "PrimaryAssetType");
        GetPrimaryAssetIdList_OutPrimaryAssetIdList_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPrimaryAssetIdList_NativeFunction, "OutPrimaryAssetIdList");
        GetPrimaryAssetIdList_OutPrimaryAssetIdList_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetPrimaryAssetIdList_NativeFunction, "OutPrimaryAssetIdList");
        GetPrimaryAssetIdFromSoftObjectReference_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPrimaryAssetIdFromSoftObjectReference");
        GetPrimaryAssetIdFromSoftObjectReference_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPrimaryAssetIdFromSoftObjectReference_NativeFunction);
        GetPrimaryAssetIdFromSoftObjectReference_SoftObjectReference_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPrimaryAssetIdFromSoftObjectReference_NativeFunction, "SoftObjectReference");
        GetPrimaryAssetIdFromSoftObjectReference_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPrimaryAssetIdFromSoftObjectReference_NativeFunction, "ReturnValue");
        GetPrimaryAssetIdFromObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPrimaryAssetIdFromObject");
        GetPrimaryAssetIdFromObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPrimaryAssetIdFromObject_NativeFunction);
        GetPrimaryAssetIdFromObject_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPrimaryAssetIdFromObject_NativeFunction, "Object");
        GetPrimaryAssetIdFromObject_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPrimaryAssetIdFromObject_NativeFunction, "ReturnValue");
        GetPrimaryAssetIdFromClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPrimaryAssetIdFromClass");
        GetPrimaryAssetIdFromClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPrimaryAssetIdFromClass_NativeFunction);
        GetPrimaryAssetIdFromClass_Class_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPrimaryAssetIdFromClass_NativeFunction, "Class");
        GetPrimaryAssetIdFromClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPrimaryAssetIdFromClass_NativeFunction, "ReturnValue");
        GetPlatformUserName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlatformUserName");
        GetPlatformUserName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlatformUserName_NativeFunction);
        GetPlatformUserName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlatformUserName_NativeFunction, "ReturnValue");
        GetPlatformUserDir_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlatformUserDir");
        GetPlatformUserDir_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlatformUserDir_NativeFunction);
        GetPlatformUserDir_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlatformUserDir_NativeFunction, "ReturnValue");
        GetPlatformTime_Seconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlatformTime_Seconds");
        GetPlatformTime_Seconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlatformTime_Seconds_NativeFunction);
        GetPlatformTime_Seconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlatformTime_Seconds_NativeFunction, "ReturnValue");
        GetPathName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPathName");
        GetPathName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPathName_NativeFunction);
        GetPathName_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPathName_NativeFunction, "Object");
        GetPathName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPathName_NativeFunction, "ReturnValue");
        GetOuterObject_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOuterObject");
        GetOuterObject_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOuterObject_NativeFunction);
        GetOuterObject_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOuterObject_NativeFunction, "Object");
        GetOuterObject_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOuterObject_NativeFunction, "ReturnValue");
        GetObjectName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetObjectName");
        GetObjectName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetObjectName_NativeFunction);
        GetObjectName_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetObjectName_NativeFunction, "Object");
        GetObjectName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetObjectName_NativeFunction, "ReturnValue");
        GetObjectFromPrimaryAssetId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetObjectFromPrimaryAssetId");
        GetObjectFromPrimaryAssetId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetObjectFromPrimaryAssetId_NativeFunction);
        GetObjectFromPrimaryAssetId_PrimaryAssetId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetObjectFromPrimaryAssetId_NativeFunction, "PrimaryAssetId");
        GetObjectFromPrimaryAssetId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetObjectFromPrimaryAssetId_NativeFunction, "ReturnValue");
        GetMinYResolutionForUI_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMinYResolutionForUI");
        GetMinYResolutionForUI_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMinYResolutionForUI_NativeFunction);
        GetMinYResolutionForUI_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMinYResolutionForUI_NativeFunction, "ReturnValue");
        GetMinYResolutionFor3DView_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMinYResolutionFor3DView");
        GetMinYResolutionFor3DView_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMinYResolutionFor3DView_NativeFunction);
        GetMinYResolutionFor3DView_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMinYResolutionFor3DView_NativeFunction, "ReturnValue");
        GetLocalCurrencySymbol_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalCurrencySymbol");
        GetLocalCurrencySymbol_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalCurrencySymbol_NativeFunction);
        GetLocalCurrencySymbol_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalCurrencySymbol_NativeFunction, "ReturnValue");
        GetLocalCurrencyCode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalCurrencyCode");
        GetLocalCurrencyCode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalCurrencyCode_NativeFunction);
        GetLocalCurrencyCode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalCurrencyCode_NativeFunction, "ReturnValue");
        GetGameTimeInSeconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGameTimeInSeconds");
        GetGameTimeInSeconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGameTimeInSeconds_NativeFunction);
        GetGameTimeInSeconds_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGameTimeInSeconds_NativeFunction, "WorldContextObject");
        GetGameTimeInSeconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGameTimeInSeconds_NativeFunction, "ReturnValue");
        GetGamepadControllerName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGamepadControllerName");
        GetGamepadControllerName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGamepadControllerName_NativeFunction);
        GetGamepadControllerName_ControllerId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGamepadControllerName_NativeFunction, "ControllerId");
        GetGamepadControllerName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGamepadControllerName_NativeFunction, "ReturnValue");
        GetGamepadButtonGlyph_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGamepadButtonGlyph");
        GetGamepadButtonGlyph_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGamepadButtonGlyph_NativeFunction);
        GetGamepadButtonGlyph_ButtonKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGamepadButtonGlyph_NativeFunction, "ButtonKey");
        GetGamepadButtonGlyph_ControllerIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGamepadButtonGlyph_NativeFunction, "ControllerIndex");
        GetGamepadButtonGlyph_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGamepadButtonGlyph_NativeFunction, "ReturnValue");
        GetGameName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGameName");
        GetGameName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGameName_NativeFunction);
        GetGameName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGameName_NativeFunction, "ReturnValue");
        GetGameBundleId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGameBundleId");
        GetGameBundleId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGameBundleId_NativeFunction);
        GetGameBundleId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGameBundleId_NativeFunction, "ReturnValue");
        GetFrameCount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFrameCount");
        GetFrameCount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFrameCount_NativeFunction);
        GetFrameCount_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFrameCount_NativeFunction, "ReturnValue");
        GetEnumTopLevelAssetPath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEnumTopLevelAssetPath");
        GetEnumTopLevelAssetPath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEnumTopLevelAssetPath_NativeFunction);
        GetEnumTopLevelAssetPath_Enum_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEnumTopLevelAssetPath_NativeFunction, "Enum");
        GetEnumTopLevelAssetPath_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEnumTopLevelAssetPath_NativeFunction, "ReturnValue");
        GetEngineVersion_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEngineVersion");
        GetEngineVersion_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEngineVersion_NativeFunction);
        GetEngineVersion_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEngineVersion_NativeFunction, "ReturnValue");
        GetDisplayName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDisplayName");
        GetDisplayName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDisplayName_NativeFunction);
        GetDisplayName_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDisplayName_NativeFunction, "Object");
        GetDisplayName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDisplayName_NativeFunction, "ReturnValue");
        GetDeviceId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDeviceId");
        GetDeviceId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDeviceId_NativeFunction);
        GetDeviceId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDeviceId_NativeFunction, "ReturnValue");
        GetDefaultLocale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDefaultLocale");
        GetDefaultLocale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDefaultLocale_NativeFunction);
        GetDefaultLocale_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultLocale_NativeFunction, "ReturnValue");
        GetDefaultLanguage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDefaultLanguage");
        GetDefaultLanguage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDefaultLanguage_NativeFunction);
        GetDefaultLanguage_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultLanguage_NativeFunction, "ReturnValue");
        GetCurrentBundleState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentBundleState");
        GetCurrentBundleState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentBundleState_NativeFunction);
        GetCurrentBundleState_PrimaryAssetId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentBundleState_NativeFunction, "PrimaryAssetId");
        GetCurrentBundleState_bForceCurrentState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentBundleState_NativeFunction, "bForceCurrentState");
        GetCurrentBundleState_OutBundles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentBundleState_NativeFunction, "OutBundles");
        GetCurrentBundleState_OutBundles_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetCurrentBundleState_NativeFunction, "OutBundles");
        GetCurrentBundleState_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentBundleState_NativeFunction, "ReturnValue");
        GetConvenientWindowedResolutions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetConvenientWindowedResolutions");
        GetConvenientWindowedResolutions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetConvenientWindowedResolutions_NativeFunction);
        GetConvenientWindowedResolutions_Resolutions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConvenientWindowedResolutions_NativeFunction, "Resolutions");
        GetConvenientWindowedResolutions_Resolutions_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetConvenientWindowedResolutions_NativeFunction, "Resolutions");
        GetConvenientWindowedResolutions_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConvenientWindowedResolutions_NativeFunction, "ReturnValue");
        GetConsoleVariableStringValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetConsoleVariableStringValue");
        GetConsoleVariableStringValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetConsoleVariableStringValue_NativeFunction);
        GetConsoleVariableStringValue_VariableName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConsoleVariableStringValue_NativeFunction, "VariableName");
        GetConsoleVariableStringValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConsoleVariableStringValue_NativeFunction, "ReturnValue");
        GetConsoleVariableIntValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetConsoleVariableIntValue");
        GetConsoleVariableIntValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetConsoleVariableIntValue_NativeFunction);
        GetConsoleVariableIntValue_VariableName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConsoleVariableIntValue_NativeFunction, "VariableName");
        GetConsoleVariableIntValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConsoleVariableIntValue_NativeFunction, "ReturnValue");
        GetConsoleVariableFloatValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetConsoleVariableFloatValue");
        GetConsoleVariableFloatValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetConsoleVariableFloatValue_NativeFunction);
        GetConsoleVariableFloatValue_VariableName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConsoleVariableFloatValue_NativeFunction, "VariableName");
        GetConsoleVariableFloatValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConsoleVariableFloatValue_NativeFunction, "ReturnValue");
        GetConsoleVariableBoolValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetConsoleVariableBoolValue");
        GetConsoleVariableBoolValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetConsoleVariableBoolValue_NativeFunction);
        GetConsoleVariableBoolValue_VariableName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConsoleVariableBoolValue_NativeFunction, "VariableName");
        GetConsoleVariableBoolValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConsoleVariableBoolValue_NativeFunction, "ReturnValue");
        GetComponentBounds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetComponentBounds");
        GetComponentBounds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetComponentBounds_NativeFunction);
        GetComponentBounds_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetComponentBounds_NativeFunction, "Component");
        GetComponentBounds_Origin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetComponentBounds_NativeFunction, "Origin");
        GetComponentBounds_BoxExtent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetComponentBounds_NativeFunction, "BoxExtent");
        GetComponentBounds_SphereRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetComponentBounds_NativeFunction, "SphereRadius");
        GetCommandLine_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCommandLine");
        GetCommandLine_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCommandLine_NativeFunction);
        GetCommandLine_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCommandLine_NativeFunction, "ReturnValue");
        GetClassTopLevelAssetPath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetClassTopLevelAssetPath");
        GetClassTopLevelAssetPath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetClassTopLevelAssetPath_NativeFunction);
        GetClassTopLevelAssetPath_Class_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClassTopLevelAssetPath_NativeFunction, "Class");
        GetClassTopLevelAssetPath_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClassTopLevelAssetPath_NativeFunction, "ReturnValue");
        GetClassFromPrimaryAssetId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetClassFromPrimaryAssetId");
        GetClassFromPrimaryAssetId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetClassFromPrimaryAssetId_NativeFunction);
        GetClassFromPrimaryAssetId_PrimaryAssetId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClassFromPrimaryAssetId_NativeFunction, "PrimaryAssetId");
        GetClassFromPrimaryAssetId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClassFromPrimaryAssetId_NativeFunction, "ReturnValue");
        GetClassDisplayName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetClassDisplayName");
        GetClassDisplayName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetClassDisplayName_NativeFunction);
        GetClassDisplayName_Class_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClassDisplayName_NativeFunction, "Class");
        GetClassDisplayName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClassDisplayName_NativeFunction, "ReturnValue");
        GetBuildVersion_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBuildVersion");
        GetBuildVersion_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBuildVersion_NativeFunction);
        GetBuildVersion_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBuildVersion_NativeFunction, "ReturnValue");
        GetBuildConfiguration_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBuildConfiguration");
        GetBuildConfiguration_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBuildConfiguration_NativeFunction);
        GetBuildConfiguration_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBuildConfiguration_NativeFunction, "ReturnValue");
        GetAdIDCount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAdIDCount");
        GetAdIDCount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAdIDCount_NativeFunction);
        GetAdIDCount_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAdIDCount_NativeFunction, "ReturnValue");
        GetActorListFromComponentList_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActorListFromComponentList");
        GetActorListFromComponentList_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActorListFromComponentList_NativeFunction);
        GetActorListFromComponentList_ComponentList_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorListFromComponentList_NativeFunction, "ComponentList");
        GetActorListFromComponentList_ComponentList_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetActorListFromComponentList_NativeFunction, "ComponentList");
        GetActorListFromComponentList_ActorClassFilter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorListFromComponentList_NativeFunction, "ActorClassFilter");
        GetActorListFromComponentList_OutActorList_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorListFromComponentList_NativeFunction, "OutActorList");
        GetActorListFromComponentList_OutActorList_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetActorListFromComponentList_NativeFunction, "OutActorList");
        GetActorBounds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetActorBounds");
        GetActorBounds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetActorBounds_NativeFunction);
        GetActorBounds_Actor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorBounds_NativeFunction, "Actor");
        GetActorBounds_Origin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorBounds_NativeFunction, "Origin");
        GetActorBounds_BoxExtent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetActorBounds_NativeFunction, "BoxExtent");
        ForceCloseAdBanner_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ForceCloseAdBanner");
        FlushPersistentDebugLines_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FlushPersistentDebugLines");
        FlushPersistentDebugLines_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FlushPersistentDebugLines_NativeFunction);
        FlushPersistentDebugLines_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FlushPersistentDebugLines_NativeFunction, "WorldContextObject");
        FlushDebugStrings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FlushDebugStrings");
        FlushDebugStrings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FlushDebugStrings_NativeFunction);
        FlushDebugStrings_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FlushDebugStrings_NativeFunction, "WorldContextObject");
        ExecuteConsoleCommand_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ExecuteConsoleCommand");
        ExecuteConsoleCommand_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ExecuteConsoleCommand_NativeFunction);
        ExecuteConsoleCommand_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExecuteConsoleCommand_NativeFunction, "WorldContextObject");
        ExecuteConsoleCommand_Command_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExecuteConsoleCommand_NativeFunction, "Command");
        ExecuteConsoleCommand_SpecificPlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExecuteConsoleCommand_NativeFunction, "SpecificPlayer");
        EqualEqual_SoftObjectReference_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_SoftObjectReference");
        EqualEqual_SoftObjectReference_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_SoftObjectReference_NativeFunction);
        EqualEqual_SoftObjectReference_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_SoftObjectReference_NativeFunction, "A");
        EqualEqual_SoftObjectReference_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_SoftObjectReference_NativeFunction, "B");
        EqualEqual_SoftObjectReference_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_SoftObjectReference_NativeFunction, "ReturnValue");
        EqualEqual_PrimaryAssetType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_PrimaryAssetType");
        EqualEqual_PrimaryAssetType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_PrimaryAssetType_NativeFunction);
        EqualEqual_PrimaryAssetType_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_PrimaryAssetType_NativeFunction, "A");
        EqualEqual_PrimaryAssetType_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_PrimaryAssetType_NativeFunction, "B");
        EqualEqual_PrimaryAssetType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_PrimaryAssetType_NativeFunction, "ReturnValue");
        EqualEqual_PrimaryAssetId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EqualEqual_PrimaryAssetId");
        EqualEqual_PrimaryAssetId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EqualEqual_PrimaryAssetId_NativeFunction);
        EqualEqual_PrimaryAssetId_A_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_PrimaryAssetId_NativeFunction, "A");
        EqualEqual_PrimaryAssetId_B_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_PrimaryAssetId_NativeFunction, "B");
        EqualEqual_PrimaryAssetId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EqualEqual_PrimaryAssetId_NativeFunction, "ReturnValue");
        EndTransaction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EndTransaction");
        EndTransaction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EndTransaction_NativeFunction);
        EndTransaction_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EndTransaction_NativeFunction, "ReturnValue");
        DrawDebugString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawDebugString");
        DrawDebugString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawDebugString_NativeFunction);
        DrawDebugString_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugString_NativeFunction, "WorldContextObject");
        DrawDebugString_TextLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugString_NativeFunction, "TextLocation");
        DrawDebugString_Text_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugString_NativeFunction, "Text");
        DrawDebugString_TestBaseActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugString_NativeFunction, "TestBaseActor");
        DrawDebugString_TextColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugString_NativeFunction, "TextColor");
        DrawDebugString_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugString_NativeFunction, "Duration");
        DrawDebugSphere_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawDebugSphere");
        DrawDebugSphere_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawDebugSphere_NativeFunction);
        DrawDebugSphere_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugSphere_NativeFunction, "WorldContextObject");
        DrawDebugSphere_Center_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugSphere_NativeFunction, "Center");
        DrawDebugSphere_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugSphere_NativeFunction, "Radius");
        DrawDebugSphere_Segments_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugSphere_NativeFunction, "Segments");
        DrawDebugSphere_LineColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugSphere_NativeFunction, "LineColor");
        DrawDebugSphere_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugSphere_NativeFunction, "Duration");
        DrawDebugSphere_Thickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugSphere_NativeFunction, "Thickness");
        DrawDebugPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawDebugPoint");
        DrawDebugPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawDebugPoint_NativeFunction);
        DrawDebugPoint_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugPoint_NativeFunction, "WorldContextObject");
        DrawDebugPoint_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugPoint_NativeFunction, "Position");
        DrawDebugPoint_Size_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugPoint_NativeFunction, "Size");
        DrawDebugPoint_PointColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugPoint_NativeFunction, "PointColor");
        DrawDebugPoint_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugPoint_NativeFunction, "Duration");
        DrawDebugPlane_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawDebugPlane");
        DrawDebugPlane_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawDebugPlane_NativeFunction);
        DrawDebugPlane_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugPlane_NativeFunction, "WorldContextObject");
        DrawDebugPlane_PlaneCoordinates_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugPlane_NativeFunction, "PlaneCoordinates");
        DrawDebugPlane_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugPlane_NativeFunction, "Location");
        DrawDebugPlane_Size_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugPlane_NativeFunction, "Size");
        DrawDebugPlane_PlaneColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugPlane_NativeFunction, "PlaneColor");
        DrawDebugPlane_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugPlane_NativeFunction, "Duration");
        DrawDebugLine_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawDebugLine");
        DrawDebugLine_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawDebugLine_NativeFunction);
        DrawDebugLine_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugLine_NativeFunction, "WorldContextObject");
        DrawDebugLine_LineStart_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugLine_NativeFunction, "LineStart");
        DrawDebugLine_LineEnd_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugLine_NativeFunction, "LineEnd");
        DrawDebugLine_LineColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugLine_NativeFunction, "LineColor");
        DrawDebugLine_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugLine_NativeFunction, "Duration");
        DrawDebugLine_Thickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugLine_NativeFunction, "Thickness");
        DrawDebugFrustum_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawDebugFrustum");
        DrawDebugFrustum_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawDebugFrustum_NativeFunction);
        DrawDebugFrustum_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugFrustum_NativeFunction, "WorldContextObject");
        DrawDebugFrustum_FrustumTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugFrustum_NativeFunction, "FrustumTransform");
        DrawDebugFrustum_FrustumColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugFrustum_NativeFunction, "FrustumColor");
        DrawDebugFrustum_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugFrustum_NativeFunction, "Duration");
        DrawDebugFrustum_Thickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugFrustum_NativeFunction, "Thickness");
        DrawDebugFloatHistoryTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawDebugFloatHistoryTransform");
        DrawDebugFloatHistoryTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawDebugFloatHistoryTransform_NativeFunction);
        DrawDebugFloatHistoryTransform_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugFloatHistoryTransform_NativeFunction, "WorldContextObject");
        DrawDebugFloatHistoryTransform_FloatHistory_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugFloatHistoryTransform_NativeFunction, "FloatHistory");
        DrawDebugFloatHistoryTransform_DrawTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugFloatHistoryTransform_NativeFunction, "DrawTransform");
        DrawDebugFloatHistoryTransform_DrawSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugFloatHistoryTransform_NativeFunction, "DrawSize");
        DrawDebugFloatHistoryTransform_DrawColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugFloatHistoryTransform_NativeFunction, "DrawColor");
        DrawDebugFloatHistoryTransform_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugFloatHistoryTransform_NativeFunction, "Duration");
        DrawDebugFloatHistoryLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawDebugFloatHistoryLocation");
        DrawDebugFloatHistoryLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawDebugFloatHistoryLocation_NativeFunction);
        DrawDebugFloatHistoryLocation_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugFloatHistoryLocation_NativeFunction, "WorldContextObject");
        DrawDebugFloatHistoryLocation_FloatHistory_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugFloatHistoryLocation_NativeFunction, "FloatHistory");
        DrawDebugFloatHistoryLocation_DrawLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugFloatHistoryLocation_NativeFunction, "DrawLocation");
        DrawDebugFloatHistoryLocation_DrawSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugFloatHistoryLocation_NativeFunction, "DrawSize");
        DrawDebugFloatHistoryLocation_DrawColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugFloatHistoryLocation_NativeFunction, "DrawColor");
        DrawDebugFloatHistoryLocation_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugFloatHistoryLocation_NativeFunction, "Duration");
        DrawDebugCylinder_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawDebugCylinder");
        DrawDebugCylinder_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawDebugCylinder_NativeFunction);
        DrawDebugCylinder_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCylinder_NativeFunction, "WorldContextObject");
        DrawDebugCylinder_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCylinder_NativeFunction, "Start");
        DrawDebugCylinder_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCylinder_NativeFunction, "End");
        DrawDebugCylinder_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCylinder_NativeFunction, "Radius");
        DrawDebugCylinder_Segments_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCylinder_NativeFunction, "Segments");
        DrawDebugCylinder_LineColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCylinder_NativeFunction, "LineColor");
        DrawDebugCylinder_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCylinder_NativeFunction, "Duration");
        DrawDebugCylinder_Thickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCylinder_NativeFunction, "Thickness");
        DrawDebugCoordinateSystem_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawDebugCoordinateSystem");
        DrawDebugCoordinateSystem_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawDebugCoordinateSystem_NativeFunction);
        DrawDebugCoordinateSystem_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCoordinateSystem_NativeFunction, "WorldContextObject");
        DrawDebugCoordinateSystem_AxisLoc_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCoordinateSystem_NativeFunction, "AxisLoc");
        DrawDebugCoordinateSystem_AxisRot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCoordinateSystem_NativeFunction, "AxisRot");
        DrawDebugCoordinateSystem_Scale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCoordinateSystem_NativeFunction, "Scale");
        DrawDebugCoordinateSystem_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCoordinateSystem_NativeFunction, "Duration");
        DrawDebugCoordinateSystem_Thickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCoordinateSystem_NativeFunction, "Thickness");
        DrawDebugConeInDegrees_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawDebugConeInDegrees");
        DrawDebugConeInDegrees_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawDebugConeInDegrees_NativeFunction);
        DrawDebugConeInDegrees_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugConeInDegrees_NativeFunction, "WorldContextObject");
        DrawDebugConeInDegrees_Origin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugConeInDegrees_NativeFunction, "Origin");
        DrawDebugConeInDegrees_Direction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugConeInDegrees_NativeFunction, "Direction");
        DrawDebugConeInDegrees_Length_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugConeInDegrees_NativeFunction, "Length");
        DrawDebugConeInDegrees_AngleWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugConeInDegrees_NativeFunction, "AngleWidth");
        DrawDebugConeInDegrees_AngleHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugConeInDegrees_NativeFunction, "AngleHeight");
        DrawDebugConeInDegrees_NumSides_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugConeInDegrees_NativeFunction, "NumSides");
        DrawDebugConeInDegrees_LineColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugConeInDegrees_NativeFunction, "LineColor");
        DrawDebugConeInDegrees_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugConeInDegrees_NativeFunction, "Duration");
        DrawDebugConeInDegrees_Thickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugConeInDegrees_NativeFunction, "Thickness");
        DrawDebugCone_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawDebugCone");
        DrawDebugCone_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawDebugCone_NativeFunction);
        DrawDebugCone_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCone_NativeFunction, "WorldContextObject");
        DrawDebugCone_Origin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCone_NativeFunction, "Origin");
        DrawDebugCone_Direction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCone_NativeFunction, "Direction");
        DrawDebugCone_Length_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCone_NativeFunction, "Length");
        DrawDebugCone_AngleWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCone_NativeFunction, "AngleWidth");
        DrawDebugCone_AngleHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCone_NativeFunction, "AngleHeight");
        DrawDebugCone_NumSides_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCone_NativeFunction, "NumSides");
        DrawDebugCone_LineColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCone_NativeFunction, "LineColor");
        DrawDebugCone_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCone_NativeFunction, "Duration");
        DrawDebugCone_Thickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCone_NativeFunction, "Thickness");
        DrawDebugCircle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawDebugCircle");
        DrawDebugCircle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawDebugCircle_NativeFunction);
        DrawDebugCircle_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCircle_NativeFunction, "WorldContextObject");
        DrawDebugCircle_Center_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCircle_NativeFunction, "Center");
        DrawDebugCircle_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCircle_NativeFunction, "Radius");
        DrawDebugCircle_NumSegments_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCircle_NativeFunction, "NumSegments");
        DrawDebugCircle_LineColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCircle_NativeFunction, "LineColor");
        DrawDebugCircle_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCircle_NativeFunction, "Duration");
        DrawDebugCircle_Thickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCircle_NativeFunction, "Thickness");
        DrawDebugCircle_YAxis_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCircle_NativeFunction, "YAxis");
        DrawDebugCircle_ZAxis_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCircle_NativeFunction, "ZAxis");
        DrawDebugCircle_bDrawAxis_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCircle_NativeFunction, "bDrawAxis");
        DrawDebugCapsule_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawDebugCapsule");
        DrawDebugCapsule_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawDebugCapsule_NativeFunction);
        DrawDebugCapsule_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCapsule_NativeFunction, "WorldContextObject");
        DrawDebugCapsule_Center_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCapsule_NativeFunction, "Center");
        DrawDebugCapsule_HalfHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCapsule_NativeFunction, "HalfHeight");
        DrawDebugCapsule_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCapsule_NativeFunction, "Radius");
        DrawDebugCapsule_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCapsule_NativeFunction, "Rotation");
        DrawDebugCapsule_LineColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCapsule_NativeFunction, "LineColor");
        DrawDebugCapsule_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCapsule_NativeFunction, "Duration");
        DrawDebugCapsule_Thickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCapsule_NativeFunction, "Thickness");
        DrawDebugCamera_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawDebugCamera");
        DrawDebugCamera_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawDebugCamera_NativeFunction);
        DrawDebugCamera_CameraActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCamera_NativeFunction, "CameraActor");
        DrawDebugCamera_CameraColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCamera_NativeFunction, "CameraColor");
        DrawDebugCamera_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugCamera_NativeFunction, "Duration");
        DrawDebugBox_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawDebugBox");
        DrawDebugBox_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawDebugBox_NativeFunction);
        DrawDebugBox_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugBox_NativeFunction, "WorldContextObject");
        DrawDebugBox_Center_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugBox_NativeFunction, "Center");
        DrawDebugBox_Extent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugBox_NativeFunction, "Extent");
        DrawDebugBox_LineColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugBox_NativeFunction, "LineColor");
        DrawDebugBox_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugBox_NativeFunction, "Rotation");
        DrawDebugBox_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugBox_NativeFunction, "Duration");
        DrawDebugBox_Thickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugBox_NativeFunction, "Thickness");
        DrawDebugArrow_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DrawDebugArrow");
        DrawDebugArrow_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DrawDebugArrow_NativeFunction);
        DrawDebugArrow_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugArrow_NativeFunction, "WorldContextObject");
        DrawDebugArrow_LineStart_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugArrow_NativeFunction, "LineStart");
        DrawDebugArrow_LineEnd_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugArrow_NativeFunction, "LineEnd");
        DrawDebugArrow_ArrowSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugArrow_NativeFunction, "ArrowSize");
        DrawDebugArrow_LineColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugArrow_NativeFunction, "LineColor");
        DrawDebugArrow_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugArrow_NativeFunction, "Duration");
        DrawDebugArrow_Thickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DrawDebugArrow_NativeFunction, "Thickness");
        DoesImplementInterface_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DoesImplementInterface");
        DoesImplementInterface_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DoesImplementInterface_NativeFunction);
        DoesImplementInterface_TestObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesImplementInterface_NativeFunction, "TestObject");
        DoesImplementInterface_Interface_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesImplementInterface_NativeFunction, "Interface");
        DoesImplementInterface_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesImplementInterface_NativeFunction, "ReturnValue");
        CreateCopyForUndoBuffer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateCopyForUndoBuffer");
        CreateCopyForUndoBuffer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateCopyForUndoBuffer_NativeFunction);
        CreateCopyForUndoBuffer_ObjectToModify_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateCopyForUndoBuffer_NativeFunction, "ObjectToModify");
        ConvertToRelativePath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertToRelativePath");
        ConvertToRelativePath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertToRelativePath_NativeFunction);
        ConvertToRelativePath_Filename_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToRelativePath_NativeFunction, "Filename");
        ConvertToRelativePath_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToRelativePath_NativeFunction, "ReturnValue");
        ConvertToAbsolutePath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertToAbsolutePath");
        ConvertToAbsolutePath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertToAbsolutePath_NativeFunction);
        ConvertToAbsolutePath_Filename_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToAbsolutePath_NativeFunction, "Filename");
        ConvertToAbsolutePath_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToAbsolutePath_NativeFunction, "ReturnValue");
        Conv_SoftObjRefToSoftObjPath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_SoftObjRefToSoftObjPath");
        Conv_SoftObjRefToSoftObjPath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_SoftObjRefToSoftObjPath_NativeFunction);
        Conv_SoftObjRefToSoftObjPath_SoftObjectReference_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_SoftObjRefToSoftObjPath_NativeFunction, "SoftObjectReference");
        Conv_SoftObjRefToSoftObjPath_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_SoftObjRefToSoftObjPath_NativeFunction, "ReturnValue");
        Conv_SoftObjPathToSoftObjRef_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_SoftObjPathToSoftObjRef");
        Conv_SoftObjPathToSoftObjRef_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_SoftObjPathToSoftObjRef_NativeFunction);
        Conv_SoftObjPathToSoftObjRef_SoftObjectPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_SoftObjPathToSoftObjRef_NativeFunction, "SoftObjectPath");
        Conv_SoftObjPathToSoftObjRef_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_SoftObjPathToSoftObjRef_NativeFunction, "ReturnValue");
        Conv_SoftObjectReferenceToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_SoftObjectReferenceToString");
        Conv_SoftObjectReferenceToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_SoftObjectReferenceToString_NativeFunction);
        Conv_SoftObjectReferenceToString_SoftObjectReference_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_SoftObjectReferenceToString_NativeFunction, "SoftObjectReference");
        Conv_SoftObjectReferenceToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_SoftObjectReferenceToString_NativeFunction, "ReturnValue");
        Conv_PrimaryAssetTypeToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_PrimaryAssetTypeToString");
        Conv_PrimaryAssetTypeToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_PrimaryAssetTypeToString_NativeFunction);
        Conv_PrimaryAssetTypeToString_PrimaryAssetType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_PrimaryAssetTypeToString_NativeFunction, "PrimaryAssetType");
        Conv_PrimaryAssetTypeToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_PrimaryAssetTypeToString_NativeFunction, "ReturnValue");
        Conv_PrimaryAssetIdToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_PrimaryAssetIdToString");
        Conv_PrimaryAssetIdToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_PrimaryAssetIdToString_NativeFunction);
        Conv_PrimaryAssetIdToString_PrimaryAssetId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_PrimaryAssetIdToString_NativeFunction, "PrimaryAssetId");
        Conv_PrimaryAssetIdToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_PrimaryAssetIdToString_NativeFunction, "ReturnValue");
        Conv_ObjectToClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_ObjectToClass");
        Conv_ObjectToClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_ObjectToClass_NativeFunction);
        Conv_ObjectToClass_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_ObjectToClass_NativeFunction, "Object");
        Conv_ObjectToClass_Class_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_ObjectToClass_NativeFunction, "Class");
        Conv_ObjectToClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_ObjectToClass_NativeFunction, "ReturnValue");
        Conv_ComponentReferenceToSoftComponentReference_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Conv_ComponentReferenceToSoftComponentReference");
        Conv_ComponentReferenceToSoftComponentReference_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Conv_ComponentReferenceToSoftComponentReference_NativeFunction);
        Conv_ComponentReferenceToSoftComponentReference_ComponentReference_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_ComponentReferenceToSoftComponentReference_NativeFunction, "ComponentReference");
        Conv_ComponentReferenceToSoftComponentReference_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Conv_ComponentReferenceToSoftComponentReference_NativeFunction, "ReturnValue");
        ControlScreensaver_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ControlScreensaver");
        ControlScreensaver_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ControlScreensaver_NativeFunction);
        ControlScreensaver_bAllowScreenSaver_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ControlScreensaver_NativeFunction, "bAllowScreenSaver");
        ComponentOverlapComponents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ComponentOverlapComponents");
        ComponentOverlapComponents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ComponentOverlapComponents_NativeFunction);
        ComponentOverlapComponents_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComponentOverlapComponents_NativeFunction, "Component");
        ComponentOverlapComponents_ComponentTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComponentOverlapComponents_NativeFunction, "ComponentTransform");
        ComponentOverlapComponents_ObjectTypes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComponentOverlapComponents_NativeFunction, "ObjectTypes");
        ComponentOverlapComponents_ObjectTypes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ComponentOverlapComponents_NativeFunction, "ObjectTypes");
        ComponentOverlapComponents_ComponentClassFilter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComponentOverlapComponents_NativeFunction, "ComponentClassFilter");
        ComponentOverlapComponents_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComponentOverlapComponents_NativeFunction, "ActorsToIgnore");
        ComponentOverlapComponents_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ComponentOverlapComponents_NativeFunction, "ActorsToIgnore");
        ComponentOverlapComponents_OutComponents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComponentOverlapComponents_NativeFunction, "OutComponents");
        ComponentOverlapComponents_OutComponents_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ComponentOverlapComponents_NativeFunction, "OutComponents");
        ComponentOverlapComponents_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComponentOverlapComponents_NativeFunction, "ReturnValue");
        ComponentOverlapActors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ComponentOverlapActors");
        ComponentOverlapActors_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ComponentOverlapActors_NativeFunction);
        ComponentOverlapActors_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComponentOverlapActors_NativeFunction, "Component");
        ComponentOverlapActors_ComponentTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComponentOverlapActors_NativeFunction, "ComponentTransform");
        ComponentOverlapActors_ObjectTypes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComponentOverlapActors_NativeFunction, "ObjectTypes");
        ComponentOverlapActors_ObjectTypes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ComponentOverlapActors_NativeFunction, "ObjectTypes");
        ComponentOverlapActors_ActorClassFilter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComponentOverlapActors_NativeFunction, "ActorClassFilter");
        ComponentOverlapActors_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComponentOverlapActors_NativeFunction, "ActorsToIgnore");
        ComponentOverlapActors_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ComponentOverlapActors_NativeFunction, "ActorsToIgnore");
        ComponentOverlapActors_OutActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComponentOverlapActors_NativeFunction, "OutActors");
        ComponentOverlapActors_OutActors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ComponentOverlapActors_NativeFunction, "OutActors");
        ComponentOverlapActors_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComponentOverlapActors_NativeFunction, "ReturnValue");
        CollectGarbage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CollectGarbage");
        CapsuleTraceSingleForObjects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CapsuleTraceSingleForObjects");
        CapsuleTraceSingleForObjects_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CapsuleTraceSingleForObjects_NativeFunction);
        CapsuleTraceSingleForObjects_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleForObjects_NativeFunction, "WorldContextObject");
        CapsuleTraceSingleForObjects_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleForObjects_NativeFunction, "Start");
        CapsuleTraceSingleForObjects_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleForObjects_NativeFunction, "End");
        CapsuleTraceSingleForObjects_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleForObjects_NativeFunction, "Radius");
        CapsuleTraceSingleForObjects_HalfHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleForObjects_NativeFunction, "HalfHeight");
        CapsuleTraceSingleForObjects_ObjectTypes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleForObjects_NativeFunction, "ObjectTypes");
        CapsuleTraceSingleForObjects_ObjectTypes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CapsuleTraceSingleForObjects_NativeFunction, "ObjectTypes");
        CapsuleTraceSingleForObjects_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleForObjects_NativeFunction, "bTraceComplex");
        CapsuleTraceSingleForObjects_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleForObjects_NativeFunction, "ActorsToIgnore");
        CapsuleTraceSingleForObjects_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CapsuleTraceSingleForObjects_NativeFunction, "ActorsToIgnore");
        CapsuleTraceSingleForObjects_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleForObjects_NativeFunction, "DrawDebugType");
        CapsuleTraceSingleForObjects_OutHit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleForObjects_NativeFunction, "OutHit");
        CapsuleTraceSingleForObjects_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleForObjects_NativeFunction, "bIgnoreSelf");
        CapsuleTraceSingleForObjects_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleForObjects_NativeFunction, "TraceColor");
        CapsuleTraceSingleForObjects_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleForObjects_NativeFunction, "TraceHitColor");
        CapsuleTraceSingleForObjects_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleForObjects_NativeFunction, "DrawTime");
        CapsuleTraceSingleForObjects_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleForObjects_NativeFunction, "ReturnValue");
        CapsuleTraceSingleByProfile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CapsuleTraceSingleByProfile");
        CapsuleTraceSingleByProfile_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CapsuleTraceSingleByProfile_NativeFunction);
        CapsuleTraceSingleByProfile_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleByProfile_NativeFunction, "WorldContextObject");
        CapsuleTraceSingleByProfile_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleByProfile_NativeFunction, "Start");
        CapsuleTraceSingleByProfile_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleByProfile_NativeFunction, "End");
        CapsuleTraceSingleByProfile_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleByProfile_NativeFunction, "Radius");
        CapsuleTraceSingleByProfile_HalfHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleByProfile_NativeFunction, "HalfHeight");
        CapsuleTraceSingleByProfile_ProfileName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleByProfile_NativeFunction, "ProfileName");
        CapsuleTraceSingleByProfile_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleByProfile_NativeFunction, "bTraceComplex");
        CapsuleTraceSingleByProfile_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleByProfile_NativeFunction, "ActorsToIgnore");
        CapsuleTraceSingleByProfile_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CapsuleTraceSingleByProfile_NativeFunction, "ActorsToIgnore");
        CapsuleTraceSingleByProfile_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleByProfile_NativeFunction, "DrawDebugType");
        CapsuleTraceSingleByProfile_OutHit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleByProfile_NativeFunction, "OutHit");
        CapsuleTraceSingleByProfile_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleByProfile_NativeFunction, "bIgnoreSelf");
        CapsuleTraceSingleByProfile_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleByProfile_NativeFunction, "TraceColor");
        CapsuleTraceSingleByProfile_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleByProfile_NativeFunction, "TraceHitColor");
        CapsuleTraceSingleByProfile_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleByProfile_NativeFunction, "DrawTime");
        CapsuleTraceSingleByProfile_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingleByProfile_NativeFunction, "ReturnValue");
        CapsuleTraceSingle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CapsuleTraceSingle");
        CapsuleTraceSingle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CapsuleTraceSingle_NativeFunction);
        CapsuleTraceSingle_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingle_NativeFunction, "WorldContextObject");
        CapsuleTraceSingle_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingle_NativeFunction, "Start");
        CapsuleTraceSingle_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingle_NativeFunction, "End");
        CapsuleTraceSingle_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingle_NativeFunction, "Radius");
        CapsuleTraceSingle_HalfHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingle_NativeFunction, "HalfHeight");
        CapsuleTraceSingle_TraceChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingle_NativeFunction, "TraceChannel");
        CapsuleTraceSingle_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingle_NativeFunction, "bTraceComplex");
        CapsuleTraceSingle_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingle_NativeFunction, "ActorsToIgnore");
        CapsuleTraceSingle_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CapsuleTraceSingle_NativeFunction, "ActorsToIgnore");
        CapsuleTraceSingle_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingle_NativeFunction, "DrawDebugType");
        CapsuleTraceSingle_OutHit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingle_NativeFunction, "OutHit");
        CapsuleTraceSingle_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingle_NativeFunction, "bIgnoreSelf");
        CapsuleTraceSingle_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingle_NativeFunction, "TraceColor");
        CapsuleTraceSingle_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingle_NativeFunction, "TraceHitColor");
        CapsuleTraceSingle_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingle_NativeFunction, "DrawTime");
        CapsuleTraceSingle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceSingle_NativeFunction, "ReturnValue");
        CapsuleTraceMultiForObjects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CapsuleTraceMultiForObjects");
        CapsuleTraceMultiForObjects_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CapsuleTraceMultiForObjects_NativeFunction);
        CapsuleTraceMultiForObjects_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiForObjects_NativeFunction, "WorldContextObject");
        CapsuleTraceMultiForObjects_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiForObjects_NativeFunction, "Start");
        CapsuleTraceMultiForObjects_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiForObjects_NativeFunction, "End");
        CapsuleTraceMultiForObjects_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiForObjects_NativeFunction, "Radius");
        CapsuleTraceMultiForObjects_HalfHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiForObjects_NativeFunction, "HalfHeight");
        CapsuleTraceMultiForObjects_ObjectTypes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiForObjects_NativeFunction, "ObjectTypes");
        CapsuleTraceMultiForObjects_ObjectTypes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CapsuleTraceMultiForObjects_NativeFunction, "ObjectTypes");
        CapsuleTraceMultiForObjects_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiForObjects_NativeFunction, "bTraceComplex");
        CapsuleTraceMultiForObjects_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiForObjects_NativeFunction, "ActorsToIgnore");
        CapsuleTraceMultiForObjects_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CapsuleTraceMultiForObjects_NativeFunction, "ActorsToIgnore");
        CapsuleTraceMultiForObjects_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiForObjects_NativeFunction, "DrawDebugType");
        CapsuleTraceMultiForObjects_OutHits_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiForObjects_NativeFunction, "OutHits");
        CapsuleTraceMultiForObjects_OutHits_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CapsuleTraceMultiForObjects_NativeFunction, "OutHits");
        CapsuleTraceMultiForObjects_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiForObjects_NativeFunction, "bIgnoreSelf");
        CapsuleTraceMultiForObjects_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiForObjects_NativeFunction, "TraceColor");
        CapsuleTraceMultiForObjects_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiForObjects_NativeFunction, "TraceHitColor");
        CapsuleTraceMultiForObjects_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiForObjects_NativeFunction, "DrawTime");
        CapsuleTraceMultiForObjects_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiForObjects_NativeFunction, "ReturnValue");
        CapsuleTraceMultiByProfile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CapsuleTraceMultiByProfile");
        CapsuleTraceMultiByProfile_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CapsuleTraceMultiByProfile_NativeFunction);
        CapsuleTraceMultiByProfile_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiByProfile_NativeFunction, "WorldContextObject");
        CapsuleTraceMultiByProfile_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiByProfile_NativeFunction, "Start");
        CapsuleTraceMultiByProfile_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiByProfile_NativeFunction, "End");
        CapsuleTraceMultiByProfile_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiByProfile_NativeFunction, "Radius");
        CapsuleTraceMultiByProfile_HalfHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiByProfile_NativeFunction, "HalfHeight");
        CapsuleTraceMultiByProfile_ProfileName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiByProfile_NativeFunction, "ProfileName");
        CapsuleTraceMultiByProfile_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiByProfile_NativeFunction, "bTraceComplex");
        CapsuleTraceMultiByProfile_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiByProfile_NativeFunction, "ActorsToIgnore");
        CapsuleTraceMultiByProfile_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CapsuleTraceMultiByProfile_NativeFunction, "ActorsToIgnore");
        CapsuleTraceMultiByProfile_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiByProfile_NativeFunction, "DrawDebugType");
        CapsuleTraceMultiByProfile_OutHits_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiByProfile_NativeFunction, "OutHits");
        CapsuleTraceMultiByProfile_OutHits_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CapsuleTraceMultiByProfile_NativeFunction, "OutHits");
        CapsuleTraceMultiByProfile_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiByProfile_NativeFunction, "bIgnoreSelf");
        CapsuleTraceMultiByProfile_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiByProfile_NativeFunction, "TraceColor");
        CapsuleTraceMultiByProfile_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiByProfile_NativeFunction, "TraceHitColor");
        CapsuleTraceMultiByProfile_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiByProfile_NativeFunction, "DrawTime");
        CapsuleTraceMultiByProfile_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMultiByProfile_NativeFunction, "ReturnValue");
        CapsuleTraceMulti_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CapsuleTraceMulti");
        CapsuleTraceMulti_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CapsuleTraceMulti_NativeFunction);
        CapsuleTraceMulti_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMulti_NativeFunction, "WorldContextObject");
        CapsuleTraceMulti_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMulti_NativeFunction, "Start");
        CapsuleTraceMulti_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMulti_NativeFunction, "End");
        CapsuleTraceMulti_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMulti_NativeFunction, "Radius");
        CapsuleTraceMulti_HalfHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMulti_NativeFunction, "HalfHeight");
        CapsuleTraceMulti_TraceChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMulti_NativeFunction, "TraceChannel");
        CapsuleTraceMulti_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMulti_NativeFunction, "bTraceComplex");
        CapsuleTraceMulti_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMulti_NativeFunction, "ActorsToIgnore");
        CapsuleTraceMulti_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CapsuleTraceMulti_NativeFunction, "ActorsToIgnore");
        CapsuleTraceMulti_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMulti_NativeFunction, "DrawDebugType");
        CapsuleTraceMulti_OutHits_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMulti_NativeFunction, "OutHits");
        CapsuleTraceMulti_OutHits_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CapsuleTraceMulti_NativeFunction, "OutHits");
        CapsuleTraceMulti_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMulti_NativeFunction, "bIgnoreSelf");
        CapsuleTraceMulti_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMulti_NativeFunction, "TraceColor");
        CapsuleTraceMulti_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMulti_NativeFunction, "TraceHitColor");
        CapsuleTraceMulti_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMulti_NativeFunction, "DrawTime");
        CapsuleTraceMulti_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleTraceMulti_NativeFunction, "ReturnValue");
        CapsuleOverlapComponents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CapsuleOverlapComponents");
        CapsuleOverlapComponents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CapsuleOverlapComponents_NativeFunction);
        CapsuleOverlapComponents_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleOverlapComponents_NativeFunction, "WorldContextObject");
        CapsuleOverlapComponents_CapsulePos_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleOverlapComponents_NativeFunction, "CapsulePos");
        CapsuleOverlapComponents_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleOverlapComponents_NativeFunction, "Radius");
        CapsuleOverlapComponents_HalfHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleOverlapComponents_NativeFunction, "HalfHeight");
        CapsuleOverlapComponents_ObjectTypes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleOverlapComponents_NativeFunction, "ObjectTypes");
        CapsuleOverlapComponents_ObjectTypes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CapsuleOverlapComponents_NativeFunction, "ObjectTypes");
        CapsuleOverlapComponents_ComponentClassFilter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleOverlapComponents_NativeFunction, "ComponentClassFilter");
        CapsuleOverlapComponents_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleOverlapComponents_NativeFunction, "ActorsToIgnore");
        CapsuleOverlapComponents_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CapsuleOverlapComponents_NativeFunction, "ActorsToIgnore");
        CapsuleOverlapComponents_OutComponents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleOverlapComponents_NativeFunction, "OutComponents");
        CapsuleOverlapComponents_OutComponents_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CapsuleOverlapComponents_NativeFunction, "OutComponents");
        CapsuleOverlapComponents_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleOverlapComponents_NativeFunction, "ReturnValue");
        CapsuleOverlapActors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CapsuleOverlapActors");
        CapsuleOverlapActors_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CapsuleOverlapActors_NativeFunction);
        CapsuleOverlapActors_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleOverlapActors_NativeFunction, "WorldContextObject");
        CapsuleOverlapActors_CapsulePos_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleOverlapActors_NativeFunction, "CapsulePos");
        CapsuleOverlapActors_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleOverlapActors_NativeFunction, "Radius");
        CapsuleOverlapActors_HalfHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleOverlapActors_NativeFunction, "HalfHeight");
        CapsuleOverlapActors_ObjectTypes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleOverlapActors_NativeFunction, "ObjectTypes");
        CapsuleOverlapActors_ObjectTypes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CapsuleOverlapActors_NativeFunction, "ObjectTypes");
        CapsuleOverlapActors_ActorClassFilter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleOverlapActors_NativeFunction, "ActorClassFilter");
        CapsuleOverlapActors_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleOverlapActors_NativeFunction, "ActorsToIgnore");
        CapsuleOverlapActors_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CapsuleOverlapActors_NativeFunction, "ActorsToIgnore");
        CapsuleOverlapActors_OutActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleOverlapActors_NativeFunction, "OutActors");
        CapsuleOverlapActors_OutActors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CapsuleOverlapActors_NativeFunction, "OutActors");
        CapsuleOverlapActors_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CapsuleOverlapActors_NativeFunction, "ReturnValue");
        CanLaunchURL_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CanLaunchURL");
        CanLaunchURL_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CanLaunchURL_NativeFunction);
        CanLaunchURL_URL_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanLaunchURL_NativeFunction, "URL");
        CanLaunchURL_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanLaunchURL_NativeFunction, "ReturnValue");
        CancelTransaction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CancelTransaction");
        CancelTransaction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CancelTransaction_NativeFunction);
        CancelTransaction_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CancelTransaction_NativeFunction, "Index");
        BoxTraceSingleForObjects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BoxTraceSingleForObjects");
        BoxTraceSingleForObjects_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BoxTraceSingleForObjects_NativeFunction);
        BoxTraceSingleForObjects_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleForObjects_NativeFunction, "WorldContextObject");
        BoxTraceSingleForObjects_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleForObjects_NativeFunction, "Start");
        BoxTraceSingleForObjects_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleForObjects_NativeFunction, "End");
        BoxTraceSingleForObjects_HalfSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleForObjects_NativeFunction, "HalfSize");
        BoxTraceSingleForObjects_Orientation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleForObjects_NativeFunction, "Orientation");
        BoxTraceSingleForObjects_ObjectTypes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleForObjects_NativeFunction, "ObjectTypes");
        BoxTraceSingleForObjects_ObjectTypes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BoxTraceSingleForObjects_NativeFunction, "ObjectTypes");
        BoxTraceSingleForObjects_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleForObjects_NativeFunction, "bTraceComplex");
        BoxTraceSingleForObjects_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleForObjects_NativeFunction, "ActorsToIgnore");
        BoxTraceSingleForObjects_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BoxTraceSingleForObjects_NativeFunction, "ActorsToIgnore");
        BoxTraceSingleForObjects_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleForObjects_NativeFunction, "DrawDebugType");
        BoxTraceSingleForObjects_OutHit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleForObjects_NativeFunction, "OutHit");
        BoxTraceSingleForObjects_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleForObjects_NativeFunction, "bIgnoreSelf");
        BoxTraceSingleForObjects_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleForObjects_NativeFunction, "TraceColor");
        BoxTraceSingleForObjects_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleForObjects_NativeFunction, "TraceHitColor");
        BoxTraceSingleForObjects_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleForObjects_NativeFunction, "DrawTime");
        BoxTraceSingleForObjects_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleForObjects_NativeFunction, "ReturnValue");
        BoxTraceSingleByProfile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BoxTraceSingleByProfile");
        BoxTraceSingleByProfile_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BoxTraceSingleByProfile_NativeFunction);
        BoxTraceSingleByProfile_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleByProfile_NativeFunction, "WorldContextObject");
        BoxTraceSingleByProfile_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleByProfile_NativeFunction, "Start");
        BoxTraceSingleByProfile_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleByProfile_NativeFunction, "End");
        BoxTraceSingleByProfile_HalfSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleByProfile_NativeFunction, "HalfSize");
        BoxTraceSingleByProfile_Orientation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleByProfile_NativeFunction, "Orientation");
        BoxTraceSingleByProfile_ProfileName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleByProfile_NativeFunction, "ProfileName");
        BoxTraceSingleByProfile_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleByProfile_NativeFunction, "bTraceComplex");
        BoxTraceSingleByProfile_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleByProfile_NativeFunction, "ActorsToIgnore");
        BoxTraceSingleByProfile_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BoxTraceSingleByProfile_NativeFunction, "ActorsToIgnore");
        BoxTraceSingleByProfile_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleByProfile_NativeFunction, "DrawDebugType");
        BoxTraceSingleByProfile_OutHit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleByProfile_NativeFunction, "OutHit");
        BoxTraceSingleByProfile_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleByProfile_NativeFunction, "bIgnoreSelf");
        BoxTraceSingleByProfile_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleByProfile_NativeFunction, "TraceColor");
        BoxTraceSingleByProfile_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleByProfile_NativeFunction, "TraceHitColor");
        BoxTraceSingleByProfile_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleByProfile_NativeFunction, "DrawTime");
        BoxTraceSingleByProfile_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingleByProfile_NativeFunction, "ReturnValue");
        BoxTraceSingle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BoxTraceSingle");
        BoxTraceSingle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BoxTraceSingle_NativeFunction);
        BoxTraceSingle_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingle_NativeFunction, "WorldContextObject");
        BoxTraceSingle_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingle_NativeFunction, "Start");
        BoxTraceSingle_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingle_NativeFunction, "End");
        BoxTraceSingle_HalfSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingle_NativeFunction, "HalfSize");
        BoxTraceSingle_Orientation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingle_NativeFunction, "Orientation");
        BoxTraceSingle_TraceChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingle_NativeFunction, "TraceChannel");
        BoxTraceSingle_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingle_NativeFunction, "bTraceComplex");
        BoxTraceSingle_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingle_NativeFunction, "ActorsToIgnore");
        BoxTraceSingle_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BoxTraceSingle_NativeFunction, "ActorsToIgnore");
        BoxTraceSingle_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingle_NativeFunction, "DrawDebugType");
        BoxTraceSingle_OutHit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingle_NativeFunction, "OutHit");
        BoxTraceSingle_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingle_NativeFunction, "bIgnoreSelf");
        BoxTraceSingle_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingle_NativeFunction, "TraceColor");
        BoxTraceSingle_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingle_NativeFunction, "TraceHitColor");
        BoxTraceSingle_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingle_NativeFunction, "DrawTime");
        BoxTraceSingle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceSingle_NativeFunction, "ReturnValue");
        BoxTraceMultiForObjects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BoxTraceMultiForObjects");
        BoxTraceMultiForObjects_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BoxTraceMultiForObjects_NativeFunction);
        BoxTraceMultiForObjects_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiForObjects_NativeFunction, "WorldContextObject");
        BoxTraceMultiForObjects_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiForObjects_NativeFunction, "Start");
        BoxTraceMultiForObjects_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiForObjects_NativeFunction, "End");
        BoxTraceMultiForObjects_HalfSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiForObjects_NativeFunction, "HalfSize");
        BoxTraceMultiForObjects_Orientation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiForObjects_NativeFunction, "Orientation");
        BoxTraceMultiForObjects_ObjectTypes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiForObjects_NativeFunction, "ObjectTypes");
        BoxTraceMultiForObjects_ObjectTypes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BoxTraceMultiForObjects_NativeFunction, "ObjectTypes");
        BoxTraceMultiForObjects_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiForObjects_NativeFunction, "bTraceComplex");
        BoxTraceMultiForObjects_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiForObjects_NativeFunction, "ActorsToIgnore");
        BoxTraceMultiForObjects_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BoxTraceMultiForObjects_NativeFunction, "ActorsToIgnore");
        BoxTraceMultiForObjects_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiForObjects_NativeFunction, "DrawDebugType");
        BoxTraceMultiForObjects_OutHits_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiForObjects_NativeFunction, "OutHits");
        BoxTraceMultiForObjects_OutHits_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BoxTraceMultiForObjects_NativeFunction, "OutHits");
        BoxTraceMultiForObjects_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiForObjects_NativeFunction, "bIgnoreSelf");
        BoxTraceMultiForObjects_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiForObjects_NativeFunction, "TraceColor");
        BoxTraceMultiForObjects_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiForObjects_NativeFunction, "TraceHitColor");
        BoxTraceMultiForObjects_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiForObjects_NativeFunction, "DrawTime");
        BoxTraceMultiForObjects_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiForObjects_NativeFunction, "ReturnValue");
        BoxTraceMultiByProfile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BoxTraceMultiByProfile");
        BoxTraceMultiByProfile_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BoxTraceMultiByProfile_NativeFunction);
        BoxTraceMultiByProfile_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiByProfile_NativeFunction, "WorldContextObject");
        BoxTraceMultiByProfile_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiByProfile_NativeFunction, "Start");
        BoxTraceMultiByProfile_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiByProfile_NativeFunction, "End");
        BoxTraceMultiByProfile_HalfSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiByProfile_NativeFunction, "HalfSize");
        BoxTraceMultiByProfile_Orientation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiByProfile_NativeFunction, "Orientation");
        BoxTraceMultiByProfile_ProfileName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiByProfile_NativeFunction, "ProfileName");
        BoxTraceMultiByProfile_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiByProfile_NativeFunction, "bTraceComplex");
        BoxTraceMultiByProfile_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiByProfile_NativeFunction, "ActorsToIgnore");
        BoxTraceMultiByProfile_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BoxTraceMultiByProfile_NativeFunction, "ActorsToIgnore");
        BoxTraceMultiByProfile_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiByProfile_NativeFunction, "DrawDebugType");
        BoxTraceMultiByProfile_OutHits_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiByProfile_NativeFunction, "OutHits");
        BoxTraceMultiByProfile_OutHits_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BoxTraceMultiByProfile_NativeFunction, "OutHits");
        BoxTraceMultiByProfile_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiByProfile_NativeFunction, "bIgnoreSelf");
        BoxTraceMultiByProfile_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiByProfile_NativeFunction, "TraceColor");
        BoxTraceMultiByProfile_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiByProfile_NativeFunction, "TraceHitColor");
        BoxTraceMultiByProfile_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiByProfile_NativeFunction, "DrawTime");
        BoxTraceMultiByProfile_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMultiByProfile_NativeFunction, "ReturnValue");
        BoxTraceMulti_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BoxTraceMulti");
        BoxTraceMulti_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BoxTraceMulti_NativeFunction);
        BoxTraceMulti_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMulti_NativeFunction, "WorldContextObject");
        BoxTraceMulti_Start_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMulti_NativeFunction, "Start");
        BoxTraceMulti_End_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMulti_NativeFunction, "End");
        BoxTraceMulti_HalfSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMulti_NativeFunction, "HalfSize");
        BoxTraceMulti_Orientation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMulti_NativeFunction, "Orientation");
        BoxTraceMulti_TraceChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMulti_NativeFunction, "TraceChannel");
        BoxTraceMulti_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMulti_NativeFunction, "bTraceComplex");
        BoxTraceMulti_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMulti_NativeFunction, "ActorsToIgnore");
        BoxTraceMulti_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BoxTraceMulti_NativeFunction, "ActorsToIgnore");
        BoxTraceMulti_DrawDebugType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMulti_NativeFunction, "DrawDebugType");
        BoxTraceMulti_OutHits_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMulti_NativeFunction, "OutHits");
        BoxTraceMulti_OutHits_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BoxTraceMulti_NativeFunction, "OutHits");
        BoxTraceMulti_bIgnoreSelf_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMulti_NativeFunction, "bIgnoreSelf");
        BoxTraceMulti_TraceColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMulti_NativeFunction, "TraceColor");
        BoxTraceMulti_TraceHitColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMulti_NativeFunction, "TraceHitColor");
        BoxTraceMulti_DrawTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMulti_NativeFunction, "DrawTime");
        BoxTraceMulti_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxTraceMulti_NativeFunction, "ReturnValue");
        BoxOverlapComponents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BoxOverlapComponents");
        BoxOverlapComponents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BoxOverlapComponents_NativeFunction);
        BoxOverlapComponents_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxOverlapComponents_NativeFunction, "WorldContextObject");
        BoxOverlapComponents_BoxPos_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxOverlapComponents_NativeFunction, "BoxPos");
        BoxOverlapComponents_Extent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxOverlapComponents_NativeFunction, "Extent");
        BoxOverlapComponents_ObjectTypes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxOverlapComponents_NativeFunction, "ObjectTypes");
        BoxOverlapComponents_ObjectTypes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BoxOverlapComponents_NativeFunction, "ObjectTypes");
        BoxOverlapComponents_ComponentClassFilter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxOverlapComponents_NativeFunction, "ComponentClassFilter");
        BoxOverlapComponents_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxOverlapComponents_NativeFunction, "ActorsToIgnore");
        BoxOverlapComponents_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BoxOverlapComponents_NativeFunction, "ActorsToIgnore");
        BoxOverlapComponents_OutComponents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxOverlapComponents_NativeFunction, "OutComponents");
        BoxOverlapComponents_OutComponents_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BoxOverlapComponents_NativeFunction, "OutComponents");
        BoxOverlapComponents_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxOverlapComponents_NativeFunction, "ReturnValue");
        BoxOverlapActors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BoxOverlapActors");
        BoxOverlapActors_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BoxOverlapActors_NativeFunction);
        BoxOverlapActors_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxOverlapActors_NativeFunction, "WorldContextObject");
        BoxOverlapActors_BoxPos_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxOverlapActors_NativeFunction, "BoxPos");
        BoxOverlapActors_BoxExtent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxOverlapActors_NativeFunction, "BoxExtent");
        BoxOverlapActors_ObjectTypes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxOverlapActors_NativeFunction, "ObjectTypes");
        BoxOverlapActors_ObjectTypes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BoxOverlapActors_NativeFunction, "ObjectTypes");
        BoxOverlapActors_ActorClassFilter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxOverlapActors_NativeFunction, "ActorClassFilter");
        BoxOverlapActors_ActorsToIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxOverlapActors_NativeFunction, "ActorsToIgnore");
        BoxOverlapActors_ActorsToIgnore_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BoxOverlapActors_NativeFunction, "ActorsToIgnore");
        BoxOverlapActors_OutActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxOverlapActors_NativeFunction, "OutActors");
        BoxOverlapActors_OutActors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BoxOverlapActors_NativeFunction, "OutActors");
        BoxOverlapActors_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BoxOverlapActors_NativeFunction, "ReturnValue");
        AddFloatHistorySample_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddFloatHistorySample");
        AddFloatHistorySample_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddFloatHistorySample_NativeFunction);
        AddFloatHistorySample_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddFloatHistorySample_NativeFunction, "Value");
        AddFloatHistorySample_FloatHistory_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddFloatHistorySample_NativeFunction, "FloatHistory");
        AddFloatHistorySample_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddFloatHistorySample_NativeFunction, "ReturnValue");
        
        
    }
    
    protected SystemLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.KismetSystemLibrary:UnregisterForRemoteNotifications
    static readonly IntPtr UnregisterForRemoteNotifications_NativeFunction;
    
    public static void UnregisterForRemoteNotifications()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, UnregisterForRemoteNotifications_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:UnloadPrimaryAssetList
    static readonly IntPtr UnloadPrimaryAssetList_NativeFunction;
    static readonly int UnloadPrimaryAssetList_ParamsSize;
    static readonly int UnloadPrimaryAssetList_PrimaryAssetIdList_Offset;
    static readonly int UnloadPrimaryAssetList_PrimaryAssetIdList_ElementSize;
    
    public static void UnloadPrimaryAssetList(System.Collections.Generic.IList<UnrealSharp.CoreUObject.PrimaryAssetId> primaryAssetIdList)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UnloadPrimaryAssetList_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr PrimaryAssetIdList_NativeBuffer = IntPtr.Add(ParamsBuffer, UnloadPrimaryAssetList_PrimaryAssetIdList_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.PrimaryAssetId> PrimaryAssetIdList_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.PrimaryAssetId>(1, BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetId>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetId>.FromNative, UnloadPrimaryAssetList_PrimaryAssetIdList_ElementSize);
            PrimaryAssetIdList_Marshaler.ToNative(PrimaryAssetIdList_NativeBuffer, 0, null, primaryAssetIdList);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, UnloadPrimaryAssetList_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:UnloadPrimaryAsset
    static readonly IntPtr UnloadPrimaryAsset_NativeFunction;
    static readonly int UnloadPrimaryAsset_ParamsSize;
    static readonly int UnloadPrimaryAsset_PrimaryAssetId_Offset;
    
    public static void Unload(UnrealSharp.CoreUObject.PrimaryAssetId primaryAssetId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UnloadPrimaryAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetId>.ToNative(IntPtr.Add(ParamsBuffer, UnloadPrimaryAsset_PrimaryAssetId_Offset), 0, null, primaryAssetId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, UnloadPrimaryAsset_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:TransactObject
    static readonly IntPtr TransactObject_NativeFunction;
    static readonly int TransactObject_ParamsSize;
    static readonly int TransactObject_Object_Offset;
    
    public static void TransactObject(UnrealSharp.CoreUObject.Object @object)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TransactObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, TransactObject_Object_Offset), 0, null, @object);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, TransactObject_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:StackTrace
    static readonly IntPtr StackTrace_NativeFunction;
    
    public static void StackTrace()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, StackTrace_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:SphereTraceSingleForObjects
    static readonly IntPtr SphereTraceSingleForObjects_NativeFunction;
    static readonly int SphereTraceSingleForObjects_ParamsSize;
    static readonly int SphereTraceSingleForObjects_WorldContextObject_Offset;
    static readonly int SphereTraceSingleForObjects_Start_Offset;
    static readonly int SphereTraceSingleForObjects_End_Offset;
    static readonly int SphereTraceSingleForObjects_Radius_Offset;
    static readonly int SphereTraceSingleForObjects_ObjectTypes_Offset;
    static readonly int SphereTraceSingleForObjects_ObjectTypes_ElementSize;
    static readonly int SphereTraceSingleForObjects_bTraceComplex_Offset;
    static readonly int SphereTraceSingleForObjects_ActorsToIgnore_Offset;
    static readonly int SphereTraceSingleForObjects_ActorsToIgnore_ElementSize;
    static readonly int SphereTraceSingleForObjects_DrawDebugType_Offset;
    static readonly int SphereTraceSingleForObjects_OutHit_Offset;
    static readonly int SphereTraceSingleForObjects_bIgnoreSelf_Offset;
    static readonly int SphereTraceSingleForObjects_TraceColor_Offset;
    static readonly int SphereTraceSingleForObjects_TraceHitColor_Offset;
    static readonly int SphereTraceSingleForObjects_DrawTime_Offset;
    static readonly int SphereTraceSingleForObjects_ReturnValue_Offset;
    
    public static bool SphereTraceSingleForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return SphereTraceSingleForObjects(worldContextObject, start, end, radius, objectTypes, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor);
    }
    
    public static bool SphereTraceSingleForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return SphereTraceSingleForObjects(worldContextObject, start, end, radius, objectTypes, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool SphereTraceSingleForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SphereTraceSingleForObjects_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleForObjects_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleForObjects_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleForObjects_End_Offset), 0, null, end);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleForObjects_Radius_Offset), 0, null, radius);
            IntPtr ObjectTypes_NativeBuffer = IntPtr.Add(ParamsBuffer, SphereTraceSingleForObjects_ObjectTypes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery> ObjectTypes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery>(1, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.ToNative, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.FromNative, SphereTraceSingleForObjects_ObjectTypes_ElementSize);
            ObjectTypes_Marshaler.ToNative(ObjectTypes_NativeBuffer, 0, null, objectTypes);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleForObjects_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, SphereTraceSingleForObjects_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, SphereTraceSingleForObjects_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleForObjects_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleForObjects_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleForObjects_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleForObjects_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleForObjects_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SphereTraceSingleForObjects_NativeFunction, ParamsBuffer);
            
            outHit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleForObjects_OutHit_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleForObjects_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:SphereTraceSingleByProfile
    static readonly IntPtr SphereTraceSingleByProfile_NativeFunction;
    static readonly int SphereTraceSingleByProfile_ParamsSize;
    static readonly int SphereTraceSingleByProfile_WorldContextObject_Offset;
    static readonly int SphereTraceSingleByProfile_Start_Offset;
    static readonly int SphereTraceSingleByProfile_End_Offset;
    static readonly int SphereTraceSingleByProfile_Radius_Offset;
    static readonly int SphereTraceSingleByProfile_ProfileName_Offset;
    static readonly int SphereTraceSingleByProfile_bTraceComplex_Offset;
    static readonly int SphereTraceSingleByProfile_ActorsToIgnore_Offset;
    static readonly int SphereTraceSingleByProfile_ActorsToIgnore_ElementSize;
    static readonly int SphereTraceSingleByProfile_DrawDebugType_Offset;
    static readonly int SphereTraceSingleByProfile_OutHit_Offset;
    static readonly int SphereTraceSingleByProfile_bIgnoreSelf_Offset;
    static readonly int SphereTraceSingleByProfile_TraceColor_Offset;
    static readonly int SphereTraceSingleByProfile_TraceHitColor_Offset;
    static readonly int SphereTraceSingleByProfile_DrawTime_Offset;
    static readonly int SphereTraceSingleByProfile_ReturnValue_Offset;
    
    public static bool SphereTraceSingleByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return SphereTraceSingleByProfile(worldContextObject, start, end, radius, profileName, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor);
    }
    
    public static bool SphereTraceSingleByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return SphereTraceSingleByProfile(worldContextObject, start, end, radius, profileName, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool SphereTraceSingleByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SphereTraceSingleByProfile_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleByProfile_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleByProfile_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleByProfile_End_Offset), 0, null, end);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleByProfile_Radius_Offset), 0, null, radius);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleByProfile_ProfileName_Offset), 0, null, profileName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleByProfile_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, SphereTraceSingleByProfile_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, SphereTraceSingleByProfile_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleByProfile_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleByProfile_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleByProfile_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleByProfile_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleByProfile_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SphereTraceSingleByProfile_NativeFunction, ParamsBuffer);
            
            outHit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleByProfile_OutHit_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SphereTraceSingleByProfile_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:SphereTraceSingle
    static readonly IntPtr SphereTraceSingle_NativeFunction;
    static readonly int SphereTraceSingle_ParamsSize;
    static readonly int SphereTraceSingle_WorldContextObject_Offset;
    static readonly int SphereTraceSingle_Start_Offset;
    static readonly int SphereTraceSingle_End_Offset;
    static readonly int SphereTraceSingle_Radius_Offset;
    static readonly int SphereTraceSingle_TraceChannel_Offset;
    static readonly int SphereTraceSingle_bTraceComplex_Offset;
    static readonly int SphereTraceSingle_ActorsToIgnore_Offset;
    static readonly int SphereTraceSingle_ActorsToIgnore_ElementSize;
    static readonly int SphereTraceSingle_DrawDebugType_Offset;
    static readonly int SphereTraceSingle_OutHit_Offset;
    static readonly int SphereTraceSingle_bIgnoreSelf_Offset;
    static readonly int SphereTraceSingle_TraceColor_Offset;
    static readonly int SphereTraceSingle_TraceHitColor_Offset;
    static readonly int SphereTraceSingle_DrawTime_Offset;
    static readonly int SphereTraceSingle_ReturnValue_Offset;
    
    public static bool SphereTraceSingle(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return SphereTraceSingle(worldContextObject, start, end, radius, traceChannel, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor);
    }
    
    public static bool SphereTraceSingle(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return SphereTraceSingle(worldContextObject, start, end, radius, traceChannel, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool SphereTraceSingle(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SphereTraceSingle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingle_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingle_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingle_End_Offset), 0, null, end);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingle_Radius_Offset), 0, null, radius);
            BlittableMarshaller<UnrealSharp.Engine.ETraceTypeQuery>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingle_TraceChannel_Offset), 0, null, traceChannel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingle_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, SphereTraceSingle_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, SphereTraceSingle_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingle_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingle_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingle_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingle_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceSingle_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SphereTraceSingle_NativeFunction, ParamsBuffer);
            
            outHit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, SphereTraceSingle_OutHit_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SphereTraceSingle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:SphereTraceMultiForObjects
    static readonly IntPtr SphereTraceMultiForObjects_NativeFunction;
    static readonly int SphereTraceMultiForObjects_ParamsSize;
    static readonly int SphereTraceMultiForObjects_WorldContextObject_Offset;
    static readonly int SphereTraceMultiForObjects_Start_Offset;
    static readonly int SphereTraceMultiForObjects_End_Offset;
    static readonly int SphereTraceMultiForObjects_Radius_Offset;
    static readonly int SphereTraceMultiForObjects_ObjectTypes_Offset;
    static readonly int SphereTraceMultiForObjects_ObjectTypes_ElementSize;
    static readonly int SphereTraceMultiForObjects_bTraceComplex_Offset;
    static readonly int SphereTraceMultiForObjects_ActorsToIgnore_Offset;
    static readonly int SphereTraceMultiForObjects_ActorsToIgnore_ElementSize;
    static readonly int SphereTraceMultiForObjects_DrawDebugType_Offset;
    static readonly int SphereTraceMultiForObjects_OutHits_Offset;
    static readonly int SphereTraceMultiForObjects_OutHits_ElementSize;
    static readonly int SphereTraceMultiForObjects_bIgnoreSelf_Offset;
    static readonly int SphereTraceMultiForObjects_TraceColor_Offset;
    static readonly int SphereTraceMultiForObjects_TraceHitColor_Offset;
    static readonly int SphereTraceMultiForObjects_DrawTime_Offset;
    static readonly int SphereTraceMultiForObjects_ReturnValue_Offset;
    
    public static bool SphereTraceMultiForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return SphereTraceMultiForObjects(worldContextObject, start, end, radius, objectTypes, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor);
    }
    
    public static bool SphereTraceMultiForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return SphereTraceMultiForObjects(worldContextObject, start, end, radius, objectTypes, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool SphereTraceMultiForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SphereTraceMultiForObjects_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiForObjects_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiForObjects_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiForObjects_End_Offset), 0, null, end);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiForObjects_Radius_Offset), 0, null, radius);
            IntPtr ObjectTypes_NativeBuffer = IntPtr.Add(ParamsBuffer, SphereTraceMultiForObjects_ObjectTypes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery> ObjectTypes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery>(1, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.ToNative, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.FromNative, SphereTraceMultiForObjects_ObjectTypes_ElementSize);
            ObjectTypes_Marshaler.ToNative(ObjectTypes_NativeBuffer, 0, null, objectTypes);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiForObjects_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, SphereTraceMultiForObjects_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, SphereTraceMultiForObjects_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiForObjects_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiForObjects_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiForObjects_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiForObjects_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiForObjects_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SphereTraceMultiForObjects_NativeFunction, ParamsBuffer);
            
            IntPtr OutHits_NativeBuffer = IntPtr.Add(ParamsBuffer, SphereTraceMultiForObjects_OutHits_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> OutHits_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> (1, UnrealSharp.Engine.HitResultMarshaler.ToNative, UnrealSharp.Engine.HitResultMarshaler.FromNative, SphereTraceMultiForObjects_OutHits_ElementSize);
            outHits = OutHits_Marshaler.FromNative(OutHits_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult>.DestructInstance(OutHits_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiForObjects_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:SphereTraceMultiByProfile
    static readonly IntPtr SphereTraceMultiByProfile_NativeFunction;
    static readonly int SphereTraceMultiByProfile_ParamsSize;
    static readonly int SphereTraceMultiByProfile_WorldContextObject_Offset;
    static readonly int SphereTraceMultiByProfile_Start_Offset;
    static readonly int SphereTraceMultiByProfile_End_Offset;
    static readonly int SphereTraceMultiByProfile_Radius_Offset;
    static readonly int SphereTraceMultiByProfile_ProfileName_Offset;
    static readonly int SphereTraceMultiByProfile_bTraceComplex_Offset;
    static readonly int SphereTraceMultiByProfile_ActorsToIgnore_Offset;
    static readonly int SphereTraceMultiByProfile_ActorsToIgnore_ElementSize;
    static readonly int SphereTraceMultiByProfile_DrawDebugType_Offset;
    static readonly int SphereTraceMultiByProfile_OutHits_Offset;
    static readonly int SphereTraceMultiByProfile_OutHits_ElementSize;
    static readonly int SphereTraceMultiByProfile_bIgnoreSelf_Offset;
    static readonly int SphereTraceMultiByProfile_TraceColor_Offset;
    static readonly int SphereTraceMultiByProfile_TraceHitColor_Offset;
    static readonly int SphereTraceMultiByProfile_DrawTime_Offset;
    static readonly int SphereTraceMultiByProfile_ReturnValue_Offset;
    
    public static bool SphereTraceMultiByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return SphereTraceMultiByProfile(worldContextObject, start, end, radius, profileName, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor);
    }
    
    public static bool SphereTraceMultiByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return SphereTraceMultiByProfile(worldContextObject, start, end, radius, profileName, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool SphereTraceMultiByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SphereTraceMultiByProfile_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiByProfile_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiByProfile_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiByProfile_End_Offset), 0, null, end);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiByProfile_Radius_Offset), 0, null, radius);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiByProfile_ProfileName_Offset), 0, null, profileName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiByProfile_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, SphereTraceMultiByProfile_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, SphereTraceMultiByProfile_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiByProfile_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiByProfile_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiByProfile_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiByProfile_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiByProfile_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SphereTraceMultiByProfile_NativeFunction, ParamsBuffer);
            
            IntPtr OutHits_NativeBuffer = IntPtr.Add(ParamsBuffer, SphereTraceMultiByProfile_OutHits_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> OutHits_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> (1, UnrealSharp.Engine.HitResultMarshaler.ToNative, UnrealSharp.Engine.HitResultMarshaler.FromNative, SphereTraceMultiByProfile_OutHits_ElementSize);
            outHits = OutHits_Marshaler.FromNative(OutHits_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult>.DestructInstance(OutHits_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SphereTraceMultiByProfile_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:SphereTraceMulti
    static readonly IntPtr SphereTraceMulti_NativeFunction;
    static readonly int SphereTraceMulti_ParamsSize;
    static readonly int SphereTraceMulti_WorldContextObject_Offset;
    static readonly int SphereTraceMulti_Start_Offset;
    static readonly int SphereTraceMulti_End_Offset;
    static readonly int SphereTraceMulti_Radius_Offset;
    static readonly int SphereTraceMulti_TraceChannel_Offset;
    static readonly int SphereTraceMulti_bTraceComplex_Offset;
    static readonly int SphereTraceMulti_ActorsToIgnore_Offset;
    static readonly int SphereTraceMulti_ActorsToIgnore_ElementSize;
    static readonly int SphereTraceMulti_DrawDebugType_Offset;
    static readonly int SphereTraceMulti_OutHits_Offset;
    static readonly int SphereTraceMulti_OutHits_ElementSize;
    static readonly int SphereTraceMulti_bIgnoreSelf_Offset;
    static readonly int SphereTraceMulti_TraceColor_Offset;
    static readonly int SphereTraceMulti_TraceHitColor_Offset;
    static readonly int SphereTraceMulti_DrawTime_Offset;
    static readonly int SphereTraceMulti_ReturnValue_Offset;
    
    public static bool SphereTraceMulti(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return SphereTraceMulti(worldContextObject, start, end, radius, traceChannel, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor);
    }
    
    public static bool SphereTraceMulti(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return SphereTraceMulti(worldContextObject, start, end, radius, traceChannel, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool SphereTraceMulti(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SphereTraceMulti_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMulti_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMulti_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMulti_End_Offset), 0, null, end);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMulti_Radius_Offset), 0, null, radius);
            BlittableMarshaller<UnrealSharp.Engine.ETraceTypeQuery>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMulti_TraceChannel_Offset), 0, null, traceChannel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMulti_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, SphereTraceMulti_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, SphereTraceMulti_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMulti_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMulti_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMulti_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMulti_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SphereTraceMulti_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SphereTraceMulti_NativeFunction, ParamsBuffer);
            
            IntPtr OutHits_NativeBuffer = IntPtr.Add(ParamsBuffer, SphereTraceMulti_OutHits_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> OutHits_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> (1, UnrealSharp.Engine.HitResultMarshaler.ToNative, UnrealSharp.Engine.HitResultMarshaler.FromNative, SphereTraceMulti_OutHits_ElementSize);
            outHits = OutHits_Marshaler.FromNative(OutHits_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult>.DestructInstance(OutHits_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SphereTraceMulti_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:SphereOverlapComponents
    static readonly IntPtr SphereOverlapComponents_NativeFunction;
    static readonly int SphereOverlapComponents_ParamsSize;
    static readonly int SphereOverlapComponents_WorldContextObject_Offset;
    static readonly int SphereOverlapComponents_SpherePos_Offset;
    static readonly int SphereOverlapComponents_SphereRadius_Offset;
    static readonly int SphereOverlapComponents_ObjectTypes_Offset;
    static readonly int SphereOverlapComponents_ObjectTypes_ElementSize;
    static readonly int SphereOverlapComponents_ComponentClassFilter_Offset;
    static readonly int SphereOverlapComponents_ActorsToIgnore_Offset;
    static readonly int SphereOverlapComponents_ActorsToIgnore_ElementSize;
    static readonly int SphereOverlapComponents_OutComponents_Offset;
    static readonly int SphereOverlapComponents_OutComponents_ElementSize;
    static readonly int SphereOverlapComponents_ReturnValue_Offset;
    
    public static bool SphereOverlapComponents(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 spherePos, float sphereRadius, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, SubclassOf<UnrealSharp.CoreUObject.Object> componentClassFilter, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, out System.Collections.Generic.IList<UnrealSharp.Engine.PrimitiveComponent> outComponents)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SphereOverlapComponents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SphereOverlapComponents_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SphereOverlapComponents_SpherePos_Offset), 0, null, spherePos);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SphereOverlapComponents_SphereRadius_Offset), 0, null, sphereRadius);
            IntPtr ObjectTypes_NativeBuffer = IntPtr.Add(ParamsBuffer, SphereOverlapComponents_ObjectTypes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery> ObjectTypes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery>(1, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.ToNative, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.FromNative, SphereOverlapComponents_ObjectTypes_ElementSize);
            ObjectTypes_Marshaler.ToNative(ObjectTypes_NativeBuffer, 0, null, objectTypes);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SphereOverlapComponents_ComponentClassFilter_Offset), 0, null, componentClassFilter);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, SphereOverlapComponents_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, SphereOverlapComponents_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SphereOverlapComponents_NativeFunction, ParamsBuffer);
            
            IntPtr OutComponents_NativeBuffer = IntPtr.Add(ParamsBuffer, SphereOverlapComponents_OutComponents_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent> OutComponents_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent> (1, ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative, ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.FromNative, SphereOverlapComponents_OutComponents_ElementSize);
            outComponents = OutComponents_Marshaler.FromNative(OutComponents_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent>.DestructInstance(OutComponents_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SphereOverlapComponents_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:SphereOverlapActors
    static readonly IntPtr SphereOverlapActors_NativeFunction;
    static readonly int SphereOverlapActors_ParamsSize;
    static readonly int SphereOverlapActors_WorldContextObject_Offset;
    static readonly int SphereOverlapActors_SpherePos_Offset;
    static readonly int SphereOverlapActors_SphereRadius_Offset;
    static readonly int SphereOverlapActors_ObjectTypes_Offset;
    static readonly int SphereOverlapActors_ObjectTypes_ElementSize;
    static readonly int SphereOverlapActors_ActorClassFilter_Offset;
    static readonly int SphereOverlapActors_ActorsToIgnore_Offset;
    static readonly int SphereOverlapActors_ActorsToIgnore_ElementSize;
    static readonly int SphereOverlapActors_OutActors_Offset;
    static readonly int SphereOverlapActors_OutActors_ElementSize;
    static readonly int SphereOverlapActors_ReturnValue_Offset;
    
    public static bool SphereOverlapActors(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 spherePos, float sphereRadius, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, SubclassOf<UnrealSharp.CoreUObject.Object> actorClassFilter, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, out System.Collections.Generic.IList<UnrealSharp.Engine.Actor> outActors)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SphereOverlapActors_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SphereOverlapActors_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SphereOverlapActors_SpherePos_Offset), 0, null, spherePos);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SphereOverlapActors_SphereRadius_Offset), 0, null, sphereRadius);
            IntPtr ObjectTypes_NativeBuffer = IntPtr.Add(ParamsBuffer, SphereOverlapActors_ObjectTypes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery> ObjectTypes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery>(1, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.ToNative, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.FromNative, SphereOverlapActors_ObjectTypes_ElementSize);
            ObjectTypes_Marshaler.ToNative(ObjectTypes_NativeBuffer, 0, null, objectTypes);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SphereOverlapActors_ActorClassFilter_Offset), 0, null, actorClassFilter);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, SphereOverlapActors_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, SphereOverlapActors_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SphereOverlapActors_NativeFunction, ParamsBuffer);
            
            IntPtr OutActors_NativeBuffer = IntPtr.Add(ParamsBuffer, SphereOverlapActors_OutActors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> OutActors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, SphereOverlapActors_OutActors_ElementSize);
            outActors = OutActors_Marshaler.FromNative(OutActors_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(OutActors_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SphereOverlapActors_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:SnapshotObject
    static readonly IntPtr SnapshotObject_NativeFunction;
    static readonly int SnapshotObject_ParamsSize;
    static readonly int SnapshotObject_Object_Offset;
    
    public static void SnapshotObject(UnrealSharp.CoreUObject.Object @object)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SnapshotObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SnapshotObject_Object_Offset), 0, null, @object);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SnapshotObject_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:ShowPlatformSpecificLeaderboardScreen
    static readonly IntPtr ShowPlatformSpecificLeaderboardScreen_NativeFunction;
    static readonly int ShowPlatformSpecificLeaderboardScreen_ParamsSize;
    static readonly int ShowPlatformSpecificLeaderboardScreen_CategoryName_Offset;
    
    public static void ShowPlatformSpecificLeaderboardScreen(string categoryName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ShowPlatformSpecificLeaderboardScreen_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr CategoryName_NativePtr = IntPtr.Add(ParamsBuffer,ShowPlatformSpecificLeaderboardScreen_CategoryName_Offset);
            StringMarshaller.ToNative(CategoryName_NativePtr,0,null,categoryName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ShowPlatformSpecificLeaderboardScreen_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(CategoryName_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:ShowPlatformSpecificAchievementsScreen
    static readonly IntPtr ShowPlatformSpecificAchievementsScreen_NativeFunction;
    static readonly int ShowPlatformSpecificAchievementsScreen_ParamsSize;
    static readonly int ShowPlatformSpecificAchievementsScreen_SpecificPlayer_Offset;
    
    public static void ShowPlatformSpecificAchievementsScreen(UnrealSharp.Engine.PlayerController specificPlayer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ShowPlatformSpecificAchievementsScreen_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, ShowPlatformSpecificAchievementsScreen_SpecificPlayer_Offset), 0, null, specificPlayer);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ShowPlatformSpecificAchievementsScreen_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:ShowInterstitialAd
    static readonly IntPtr ShowInterstitialAd_NativeFunction;
    
    public static void ShowInterstitialAd()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ShowInterstitialAd_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:ShowAdBanner
    static readonly IntPtr ShowAdBanner_NativeFunction;
    static readonly int ShowAdBanner_ParamsSize;
    static readonly int ShowAdBanner_AdIdIndex_Offset;
    static readonly int ShowAdBanner_bShowOnBottomOfScreen_Offset;
    
    public static void ShowAdBanner(int adIdIndex, bool bShowOnBottomOfScreen)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ShowAdBanner_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ShowAdBanner_AdIdIndex_Offset), 0, null, adIdIndex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ShowAdBanner_bShowOnBottomOfScreen_Offset), 0, null, bShowOnBottomOfScreen);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ShowAdBanner_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:SetVolumeButtonsHandledBySystem
    static readonly IntPtr SetVolumeButtonsHandledBySystem_NativeFunction;
    static readonly int SetVolumeButtonsHandledBySystem_ParamsSize;
    static readonly int SetVolumeButtonsHandledBySystem_bEnabled_Offset;
    
    public static void SetVolumeButtonsHandledBySystem(bool bEnabled)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVolumeButtonsHandledBySystem_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetVolumeButtonsHandledBySystem_bEnabled_Offset), 0, null, bEnabled);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetVolumeButtonsHandledBySystem_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:SetUserActivity
    static readonly IntPtr SetUserActivity_NativeFunction;
    static readonly int SetUserActivity_ParamsSize;
    static readonly int SetUserActivity_UserActivity_Offset;
    
    public static void SetUserActivity(UnrealSharp.Engine.UserActivity userActivity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetUserActivity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.UserActivityMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetUserActivity_UserActivity_Offset), 0, null, userActivity);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetUserActivity_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:SetSuppressViewportTransitionMessage
    static readonly IntPtr SetSuppressViewportTransitionMessage_NativeFunction;
    static readonly int SetSuppressViewportTransitionMessage_ParamsSize;
    static readonly int SetSuppressViewportTransitionMessage_WorldContextObject_Offset;
    static readonly int SetSuppressViewportTransitionMessage_bState_Offset;
    
    public static void SetSuppressViewportTransitionMessage(UnrealSharp.CoreUObject.Object worldContextObject, bool bState)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSuppressViewportTransitionMessage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetSuppressViewportTransitionMessage_WorldContextObject_Offset), 0, null, worldContextObject);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetSuppressViewportTransitionMessage_bState_Offset), 0, null, bState);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetSuppressViewportTransitionMessage_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:SetGamepadsBlockDeviceFeedback
    static readonly IntPtr SetGamepadsBlockDeviceFeedback_NativeFunction;
    static readonly int SetGamepadsBlockDeviceFeedback_ParamsSize;
    static readonly int SetGamepadsBlockDeviceFeedback_bBlock_Offset;
    
    public static void SetGamepadsBlockDeviceFeedback(bool bBlock)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGamepadsBlockDeviceFeedback_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetGamepadsBlockDeviceFeedback_bBlock_Offset), 0, null, bBlock);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetGamepadsBlockDeviceFeedback_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:ResetGamepadAssignmentToController
    static readonly IntPtr ResetGamepadAssignmentToController_NativeFunction;
    static readonly int ResetGamepadAssignmentToController_ParamsSize;
    static readonly int ResetGamepadAssignmentToController_ControllerId_Offset;
    
    public static void ResetGamepadAssignmentToController(int controllerId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ResetGamepadAssignmentToController_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ResetGamepadAssignmentToController_ControllerId_Offset), 0, null, controllerId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ResetGamepadAssignmentToController_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:ResetGamepadAssignments
    static readonly IntPtr ResetGamepadAssignments_NativeFunction;
    
    public static void ResetGamepadAssignments()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ResetGamepadAssignments_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:RegisterForRemoteNotifications
    static readonly IntPtr RegisterForRemoteNotifications_NativeFunction;
    
    public static void RegisterForRemoteNotifications()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RegisterForRemoteNotifications_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:QuitGame
    static readonly IntPtr QuitGame_NativeFunction;
    static readonly int QuitGame_ParamsSize;
    static readonly int QuitGame_WorldContextObject_Offset;
    static readonly int QuitGame_SpecificPlayer_Offset;
    static readonly int QuitGame_QuitPreference_Offset;
    static readonly int QuitGame_bIgnorePlatformRestrictions_Offset;
    
    public static void QuitGame(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.PlayerController specificPlayer, UnrealSharp.Engine.EQuitPreference quitPreference, bool bIgnorePlatformRestrictions)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[QuitGame_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, QuitGame_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, QuitGame_SpecificPlayer_Offset), 0, null, specificPlayer);
            BlittableMarshaller<UnrealSharp.Engine.EQuitPreference>.ToNative(IntPtr.Add(ParamsBuffer, QuitGame_QuitPreference_Offset), 0, null, quitPreference);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, QuitGame_bIgnorePlatformRestrictions_Offset), 0, null, bIgnorePlatformRestrictions);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, QuitGame_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:QuitEditor
    static readonly IntPtr QuitEditor_NativeFunction;
    
    public static void QuitEditor()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, QuitEditor_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:PrintString
    static readonly IntPtr PrintString_NativeFunction;
    static readonly int PrintString_ParamsSize;
    static readonly int PrintString_WorldContextObject_Offset;
    static readonly int PrintString_InString_Offset;
    static readonly int PrintString_bPrintToScreen_Offset;
    static readonly int PrintString_bPrintToLog_Offset;
    static readonly int PrintString_TextColor_Offset;
    static readonly int PrintString_Duration_Offset;
    static readonly int PrintString_Key_Offset;
    
    public static void PrintString(UnrealSharp.CoreUObject.Object worldContextObject, string inString = "Hello", bool bPrintToScreen = true, bool bPrintToLog = true)
    {
        UnrealSharp.CoreUObject.LinearColor textColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=0.660000f,
            B=1.000000f,
            A=1.000000f,
        };
        PrintString(worldContextObject, inString, bPrintToScreen, bPrintToLog, textColor);
    }
    
    public static void PrintString(UnrealSharp.CoreUObject.Object worldContextObject, string inString, bool bPrintToScreen, bool bPrintToLog, UnrealSharp.CoreUObject.LinearColor textColor, float duration = 2.000000f, Name key = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PrintString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, PrintString_WorldContextObject_Offset), 0, null, worldContextObject);
            IntPtr InString_NativePtr = IntPtr.Add(ParamsBuffer,PrintString_InString_Offset);
            StringMarshaller.ToNative(InString_NativePtr,0,null,inString);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, PrintString_bPrintToScreen_Offset), 0, null, bPrintToScreen);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, PrintString_bPrintToLog_Offset), 0, null, bPrintToLog);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, PrintString_TextColor_Offset), 0, null, textColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PrintString_Duration_Offset), 0, null, duration);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, PrintString_Key_Offset), 0, null, key);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, PrintString_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(InString_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:ParseParamValue
    static readonly IntPtr ParseParamValue_NativeFunction;
    static readonly int ParseParamValue_ParamsSize;
    static readonly int ParseParamValue_InString_Offset;
    static readonly int ParseParamValue_InParam_Offset;
    static readonly int ParseParamValue_OutValue_Offset;
    static readonly int ParseParamValue_ReturnValue_Offset;
    
    public static bool ParseParamValue(string inString, string inParam, out string outValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ParseParamValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InString_NativePtr = IntPtr.Add(ParamsBuffer,ParseParamValue_InString_Offset);
            StringMarshaller.ToNative(InString_NativePtr,0,null,inString);
            IntPtr InParam_NativePtr = IntPtr.Add(ParamsBuffer,ParseParamValue_InParam_Offset);
            StringMarshaller.ToNative(InParam_NativePtr,0,null,inParam);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ParseParamValue_NativeFunction, ParamsBuffer);
            
            IntPtr OutValue_NativePtr = IntPtr.Add(ParamsBuffer,ParseParamValue_OutValue_Offset);
            outValue = StringMarshaller.FromNative(OutValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutValue_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ParseParamValue_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InString_NativePtr, 0);
            StringMarshaller.DestructInstance(InParam_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:ParseParam
    static readonly IntPtr ParseParam_NativeFunction;
    static readonly int ParseParam_ParamsSize;
    static readonly int ParseParam_InString_Offset;
    static readonly int ParseParam_InParam_Offset;
    static readonly int ParseParam_ReturnValue_Offset;
    
    public static bool ParseParam(string inString, string inParam)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ParseParam_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InString_NativePtr = IntPtr.Add(ParamsBuffer,ParseParam_InString_Offset);
            StringMarshaller.ToNative(InString_NativePtr,0,null,inString);
            IntPtr InParam_NativePtr = IntPtr.Add(ParamsBuffer,ParseParam_InParam_Offset);
            StringMarshaller.ToNative(InParam_NativePtr,0,null,inParam);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ParseParam_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ParseParam_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InString_NativePtr, 0);
            StringMarshaller.DestructInstance(InParam_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:NotEqual_SoftObjectReference
    static readonly IntPtr NotEqual_SoftObjectReference_NativeFunction;
    static readonly int NotEqual_SoftObjectReference_ParamsSize;
    static readonly int NotEqual_SoftObjectReference_A_Offset;
    static readonly int NotEqual_SoftObjectReference_B_Offset;
    static readonly int NotEqual_SoftObjectReference_ReturnValue_Offset;
    
    public static bool NotEqual_SoftObjectReference(SoftObject<UnrealSharp.CoreUObject.Object> a, SoftObject<UnrealSharp.CoreUObject.Object> b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_SoftObjectReference_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<SoftObject<UnrealSharp.CoreUObject.Object>>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_SoftObjectReference_A_Offset), 0, null, a);
            BlittableMarshaller<SoftObject<UnrealSharp.CoreUObject.Object>>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_SoftObjectReference_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_SoftObjectReference_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_SoftObjectReference_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:NotEqual_PrimaryAssetType
    static readonly IntPtr NotEqual_PrimaryAssetType_NativeFunction;
    static readonly int NotEqual_PrimaryAssetType_ParamsSize;
    static readonly int NotEqual_PrimaryAssetType_A_Offset;
    static readonly int NotEqual_PrimaryAssetType_B_Offset;
    static readonly int NotEqual_PrimaryAssetType_ReturnValue_Offset;
    
    public static bool NotEqual_PrimaryAssetType(UnrealSharp.CoreUObject.PrimaryAssetType a, UnrealSharp.CoreUObject.PrimaryAssetType b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_PrimaryAssetType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetType>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_PrimaryAssetType_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetType>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_PrimaryAssetType_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_PrimaryAssetType_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_PrimaryAssetType_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:NotEqual_PrimaryAssetId
    static readonly IntPtr NotEqual_PrimaryAssetId_NativeFunction;
    static readonly int NotEqual_PrimaryAssetId_ParamsSize;
    static readonly int NotEqual_PrimaryAssetId_A_Offset;
    static readonly int NotEqual_PrimaryAssetId_B_Offset;
    static readonly int NotEqual_PrimaryAssetId_ReturnValue_Offset;
    
    public static bool NotEqual_PrimaryAssetId(UnrealSharp.CoreUObject.PrimaryAssetId a, UnrealSharp.CoreUObject.PrimaryAssetId b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NotEqual_PrimaryAssetId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetId>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_PrimaryAssetId_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetId>.ToNative(IntPtr.Add(ParamsBuffer, NotEqual_PrimaryAssetId_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NotEqual_PrimaryAssetId_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, NotEqual_PrimaryAssetId_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:NormalizeFilename
    static readonly IntPtr NormalizeFilename_NativeFunction;
    static readonly int NormalizeFilename_ParamsSize;
    static readonly int NormalizeFilename_InFilename_Offset;
    static readonly int NormalizeFilename_ReturnValue_Offset;
    
    public static string NormalizeFilename(string inFilename)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NormalizeFilename_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InFilename_NativePtr = IntPtr.Add(ParamsBuffer,NormalizeFilename_InFilename_Offset);
            StringMarshaller.ToNative(InFilename_NativePtr,0,null,inFilename);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, NormalizeFilename_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,NormalizeFilename_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(InFilename_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:MakeLiteralString
    static readonly IntPtr MakeLiteralString_NativeFunction;
    static readonly int MakeLiteralString_ParamsSize;
    static readonly int MakeLiteralString_Value_Offset;
    static readonly int MakeLiteralString_ReturnValue_Offset;
    
    public static string MakeLiteralString(string value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeLiteralString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Value_NativePtr = IntPtr.Add(ParamsBuffer,MakeLiteralString_Value_Offset);
            StringMarshaller.ToNative(Value_NativePtr,0,null,value);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeLiteralString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,MakeLiteralString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(Value_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:MakeLiteralName
    static readonly IntPtr MakeLiteralName_NativeFunction;
    static readonly int MakeLiteralName_ParamsSize;
    static readonly int MakeLiteralName_Value_Offset;
    static readonly int MakeLiteralName_ReturnValue_Offset;
    
    public static Name MakeLiteralName(Name value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeLiteralName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, MakeLiteralName_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeLiteralName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, MakeLiteralName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:MakeLiteralInt64
    static readonly IntPtr MakeLiteralInt64_NativeFunction;
    static readonly int MakeLiteralInt64_ParamsSize;
    static readonly int MakeLiteralInt64_Value_Offset;
    static readonly int MakeLiteralInt64_ReturnValue_Offset;
    
    public static long MakeLiteralInt64(long value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeLiteralInt64_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<long>.ToNative(IntPtr.Add(ParamsBuffer, MakeLiteralInt64_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeLiteralInt64_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, MakeLiteralInt64_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:MakeLiteralInt
    static readonly IntPtr MakeLiteralInt_NativeFunction;
    static readonly int MakeLiteralInt_ParamsSize;
    static readonly int MakeLiteralInt_Value_Offset;
    static readonly int MakeLiteralInt_ReturnValue_Offset;
    
    public static int MakeLiteralInt(int value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeLiteralInt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, MakeLiteralInt_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeLiteralInt_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, MakeLiteralInt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:MakeLiteralDouble
    static readonly IntPtr MakeLiteralDouble_NativeFunction;
    static readonly int MakeLiteralDouble_ParamsSize;
    static readonly int MakeLiteralDouble_Value_Offset;
    static readonly int MakeLiteralDouble_ReturnValue_Offset;
    
    public static double MakeLiteralDouble(double value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeLiteralDouble_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, MakeLiteralDouble_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeLiteralDouble_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, MakeLiteralDouble_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:MakeLiteralByte
    static readonly IntPtr MakeLiteralByte_NativeFunction;
    static readonly int MakeLiteralByte_ParamsSize;
    static readonly int MakeLiteralByte_Value_Offset;
    static readonly int MakeLiteralByte_ReturnValue_Offset;
    
    public static byte MakeLiteralByte(byte value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeLiteralByte_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, MakeLiteralByte_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeLiteralByte_NativeFunction, ParamsBuffer);
            
            byte returnValue;
            returnValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, MakeLiteralByte_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:MakeLiteralBool
    static readonly IntPtr MakeLiteralBool_NativeFunction;
    static readonly int MakeLiteralBool_ParamsSize;
    static readonly int MakeLiteralBool_Value_Offset;
    static readonly int MakeLiteralBool_ReturnValue_Offset;
    
    public static bool MakeLiteralBool(bool value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeLiteralBool_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, MakeLiteralBool_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeLiteralBool_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, MakeLiteralBool_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:LogString
    static readonly IntPtr LogString_NativeFunction;
    static readonly int LogString_ParamsSize;
    static readonly int LogString_InString_Offset;
    static readonly int LogString_bPrintToLog_Offset;
    
    public static void LogString(string inString = "Hello", bool bPrintToLog = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LogString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InString_NativePtr = IntPtr.Add(ParamsBuffer,LogString_InString_Offset);
            StringMarshaller.ToNative(InString_NativePtr,0,null,inString);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LogString_bPrintToLog_Offset), 0, null, bPrintToLog);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LogString_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(InString_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:LoadInterstitialAd
    static readonly IntPtr LoadInterstitialAd_NativeFunction;
    static readonly int LoadInterstitialAd_ParamsSize;
    static readonly int LoadInterstitialAd_AdIdIndex_Offset;
    
    public static void LoadInterstitialAd(int adIdIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LoadInterstitialAd_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, LoadInterstitialAd_AdIdIndex_Offset), 0, null, adIdIndex);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LoadInterstitialAd_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:LoadAsset_Blocking
    static readonly IntPtr LoadAsset_Blocking_NativeFunction;
    static readonly int LoadAsset_Blocking_ParamsSize;
    static readonly int LoadAsset_Blocking_Asset_Offset;
    static readonly int LoadAsset_Blocking_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Object LoadAsset_Blocking(SoftObject<UnrealSharp.CoreUObject.Object> asset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LoadAsset_Blocking_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<SoftObject<UnrealSharp.CoreUObject.Object>>.ToNative(IntPtr.Add(ParamsBuffer, LoadAsset_Blocking_Asset_Offset), 0, null, asset);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LoadAsset_Blocking_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Object returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, LoadAsset_Blocking_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:LineTraceSingleForObjects
    static readonly IntPtr LineTraceSingleForObjects_NativeFunction;
    static readonly int LineTraceSingleForObjects_ParamsSize;
    static readonly int LineTraceSingleForObjects_WorldContextObject_Offset;
    static readonly int LineTraceSingleForObjects_Start_Offset;
    static readonly int LineTraceSingleForObjects_End_Offset;
    static readonly int LineTraceSingleForObjects_ObjectTypes_Offset;
    static readonly int LineTraceSingleForObjects_ObjectTypes_ElementSize;
    static readonly int LineTraceSingleForObjects_bTraceComplex_Offset;
    static readonly int LineTraceSingleForObjects_ActorsToIgnore_Offset;
    static readonly int LineTraceSingleForObjects_ActorsToIgnore_ElementSize;
    static readonly int LineTraceSingleForObjects_DrawDebugType_Offset;
    static readonly int LineTraceSingleForObjects_OutHit_Offset;
    static readonly int LineTraceSingleForObjects_bIgnoreSelf_Offset;
    static readonly int LineTraceSingleForObjects_TraceColor_Offset;
    static readonly int LineTraceSingleForObjects_TraceHitColor_Offset;
    static readonly int LineTraceSingleForObjects_DrawTime_Offset;
    static readonly int LineTraceSingleForObjects_ReturnValue_Offset;
    
    public static bool LineTraceSingleForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return LineTraceSingleForObjects(worldContextObject, start, end, objectTypes, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor);
    }
    
    public static bool LineTraceSingleForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return LineTraceSingleForObjects(worldContextObject, start, end, objectTypes, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool LineTraceSingleForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LineTraceSingleForObjects_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingleForObjects_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingleForObjects_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingleForObjects_End_Offset), 0, null, end);
            IntPtr ObjectTypes_NativeBuffer = IntPtr.Add(ParamsBuffer, LineTraceSingleForObjects_ObjectTypes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery> ObjectTypes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery>(1, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.ToNative, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.FromNative, LineTraceSingleForObjects_ObjectTypes_ElementSize);
            ObjectTypes_Marshaler.ToNative(ObjectTypes_NativeBuffer, 0, null, objectTypes);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingleForObjects_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, LineTraceSingleForObjects_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, LineTraceSingleForObjects_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingleForObjects_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingleForObjects_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingleForObjects_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingleForObjects_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingleForObjects_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LineTraceSingleForObjects_NativeFunction, ParamsBuffer);
            
            outHit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, LineTraceSingleForObjects_OutHit_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LineTraceSingleForObjects_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:LineTraceSingleByProfile
    static readonly IntPtr LineTraceSingleByProfile_NativeFunction;
    static readonly int LineTraceSingleByProfile_ParamsSize;
    static readonly int LineTraceSingleByProfile_WorldContextObject_Offset;
    static readonly int LineTraceSingleByProfile_Start_Offset;
    static readonly int LineTraceSingleByProfile_End_Offset;
    static readonly int LineTraceSingleByProfile_ProfileName_Offset;
    static readonly int LineTraceSingleByProfile_bTraceComplex_Offset;
    static readonly int LineTraceSingleByProfile_ActorsToIgnore_Offset;
    static readonly int LineTraceSingleByProfile_ActorsToIgnore_ElementSize;
    static readonly int LineTraceSingleByProfile_DrawDebugType_Offset;
    static readonly int LineTraceSingleByProfile_OutHit_Offset;
    static readonly int LineTraceSingleByProfile_bIgnoreSelf_Offset;
    static readonly int LineTraceSingleByProfile_TraceColor_Offset;
    static readonly int LineTraceSingleByProfile_TraceHitColor_Offset;
    static readonly int LineTraceSingleByProfile_DrawTime_Offset;
    static readonly int LineTraceSingleByProfile_ReturnValue_Offset;
    
    public static bool LineTraceSingleByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return LineTraceSingleByProfile(worldContextObject, start, end, profileName, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor);
    }
    
    public static bool LineTraceSingleByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return LineTraceSingleByProfile(worldContextObject, start, end, profileName, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool LineTraceSingleByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LineTraceSingleByProfile_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingleByProfile_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingleByProfile_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingleByProfile_End_Offset), 0, null, end);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingleByProfile_ProfileName_Offset), 0, null, profileName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingleByProfile_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, LineTraceSingleByProfile_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, LineTraceSingleByProfile_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingleByProfile_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingleByProfile_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingleByProfile_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingleByProfile_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingleByProfile_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LineTraceSingleByProfile_NativeFunction, ParamsBuffer);
            
            outHit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, LineTraceSingleByProfile_OutHit_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LineTraceSingleByProfile_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:LineTraceSingle
    static readonly IntPtr LineTraceSingle_NativeFunction;
    static readonly int LineTraceSingle_ParamsSize;
    static readonly int LineTraceSingle_WorldContextObject_Offset;
    static readonly int LineTraceSingle_Start_Offset;
    static readonly int LineTraceSingle_End_Offset;
    static readonly int LineTraceSingle_TraceChannel_Offset;
    static readonly int LineTraceSingle_bTraceComplex_Offset;
    static readonly int LineTraceSingle_ActorsToIgnore_Offset;
    static readonly int LineTraceSingle_ActorsToIgnore_ElementSize;
    static readonly int LineTraceSingle_DrawDebugType_Offset;
    static readonly int LineTraceSingle_OutHit_Offset;
    static readonly int LineTraceSingle_bIgnoreSelf_Offset;
    static readonly int LineTraceSingle_TraceColor_Offset;
    static readonly int LineTraceSingle_TraceHitColor_Offset;
    static readonly int LineTraceSingle_DrawTime_Offset;
    static readonly int LineTraceSingle_ReturnValue_Offset;
    
    public static bool LineTraceSingle(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return LineTraceSingle(worldContextObject, start, end, traceChannel, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor);
    }
    
    public static bool LineTraceSingle(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return LineTraceSingle(worldContextObject, start, end, traceChannel, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool LineTraceSingle(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LineTraceSingle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingle_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingle_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingle_End_Offset), 0, null, end);
            BlittableMarshaller<UnrealSharp.Engine.ETraceTypeQuery>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingle_TraceChannel_Offset), 0, null, traceChannel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingle_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, LineTraceSingle_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, LineTraceSingle_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingle_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingle_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingle_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingle_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceSingle_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LineTraceSingle_NativeFunction, ParamsBuffer);
            
            outHit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, LineTraceSingle_OutHit_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LineTraceSingle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:LineTraceMultiForObjects
    static readonly IntPtr LineTraceMultiForObjects_NativeFunction;
    static readonly int LineTraceMultiForObjects_ParamsSize;
    static readonly int LineTraceMultiForObjects_WorldContextObject_Offset;
    static readonly int LineTraceMultiForObjects_Start_Offset;
    static readonly int LineTraceMultiForObjects_End_Offset;
    static readonly int LineTraceMultiForObjects_ObjectTypes_Offset;
    static readonly int LineTraceMultiForObjects_ObjectTypes_ElementSize;
    static readonly int LineTraceMultiForObjects_bTraceComplex_Offset;
    static readonly int LineTraceMultiForObjects_ActorsToIgnore_Offset;
    static readonly int LineTraceMultiForObjects_ActorsToIgnore_ElementSize;
    static readonly int LineTraceMultiForObjects_DrawDebugType_Offset;
    static readonly int LineTraceMultiForObjects_OutHits_Offset;
    static readonly int LineTraceMultiForObjects_OutHits_ElementSize;
    static readonly int LineTraceMultiForObjects_bIgnoreSelf_Offset;
    static readonly int LineTraceMultiForObjects_TraceColor_Offset;
    static readonly int LineTraceMultiForObjects_TraceHitColor_Offset;
    static readonly int LineTraceMultiForObjects_DrawTime_Offset;
    static readonly int LineTraceMultiForObjects_ReturnValue_Offset;
    
    public static bool LineTraceMultiForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return LineTraceMultiForObjects(worldContextObject, start, end, objectTypes, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor);
    }
    
    public static bool LineTraceMultiForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return LineTraceMultiForObjects(worldContextObject, start, end, objectTypes, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool LineTraceMultiForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LineTraceMultiForObjects_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMultiForObjects_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMultiForObjects_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMultiForObjects_End_Offset), 0, null, end);
            IntPtr ObjectTypes_NativeBuffer = IntPtr.Add(ParamsBuffer, LineTraceMultiForObjects_ObjectTypes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery> ObjectTypes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery>(1, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.ToNative, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.FromNative, LineTraceMultiForObjects_ObjectTypes_ElementSize);
            ObjectTypes_Marshaler.ToNative(ObjectTypes_NativeBuffer, 0, null, objectTypes);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMultiForObjects_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, LineTraceMultiForObjects_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, LineTraceMultiForObjects_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMultiForObjects_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMultiForObjects_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMultiForObjects_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMultiForObjects_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMultiForObjects_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LineTraceMultiForObjects_NativeFunction, ParamsBuffer);
            
            IntPtr OutHits_NativeBuffer = IntPtr.Add(ParamsBuffer, LineTraceMultiForObjects_OutHits_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> OutHits_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> (1, UnrealSharp.Engine.HitResultMarshaler.ToNative, UnrealSharp.Engine.HitResultMarshaler.FromNative, LineTraceMultiForObjects_OutHits_ElementSize);
            outHits = OutHits_Marshaler.FromNative(OutHits_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult>.DestructInstance(OutHits_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LineTraceMultiForObjects_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:LineTraceMultiByProfile
    static readonly IntPtr LineTraceMultiByProfile_NativeFunction;
    static readonly int LineTraceMultiByProfile_ParamsSize;
    static readonly int LineTraceMultiByProfile_WorldContextObject_Offset;
    static readonly int LineTraceMultiByProfile_Start_Offset;
    static readonly int LineTraceMultiByProfile_End_Offset;
    static readonly int LineTraceMultiByProfile_ProfileName_Offset;
    static readonly int LineTraceMultiByProfile_bTraceComplex_Offset;
    static readonly int LineTraceMultiByProfile_ActorsToIgnore_Offset;
    static readonly int LineTraceMultiByProfile_ActorsToIgnore_ElementSize;
    static readonly int LineTraceMultiByProfile_DrawDebugType_Offset;
    static readonly int LineTraceMultiByProfile_OutHits_Offset;
    static readonly int LineTraceMultiByProfile_OutHits_ElementSize;
    static readonly int LineTraceMultiByProfile_bIgnoreSelf_Offset;
    static readonly int LineTraceMultiByProfile_TraceColor_Offset;
    static readonly int LineTraceMultiByProfile_TraceHitColor_Offset;
    static readonly int LineTraceMultiByProfile_DrawTime_Offset;
    static readonly int LineTraceMultiByProfile_ReturnValue_Offset;
    
    public static bool LineTraceMultiByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return LineTraceMultiByProfile(worldContextObject, start, end, profileName, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor);
    }
    
    public static bool LineTraceMultiByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return LineTraceMultiByProfile(worldContextObject, start, end, profileName, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool LineTraceMultiByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LineTraceMultiByProfile_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMultiByProfile_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMultiByProfile_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMultiByProfile_End_Offset), 0, null, end);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMultiByProfile_ProfileName_Offset), 0, null, profileName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMultiByProfile_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, LineTraceMultiByProfile_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, LineTraceMultiByProfile_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMultiByProfile_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMultiByProfile_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMultiByProfile_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMultiByProfile_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMultiByProfile_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LineTraceMultiByProfile_NativeFunction, ParamsBuffer);
            
            IntPtr OutHits_NativeBuffer = IntPtr.Add(ParamsBuffer, LineTraceMultiByProfile_OutHits_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> OutHits_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> (1, UnrealSharp.Engine.HitResultMarshaler.ToNative, UnrealSharp.Engine.HitResultMarshaler.FromNative, LineTraceMultiByProfile_OutHits_ElementSize);
            outHits = OutHits_Marshaler.FromNative(OutHits_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult>.DestructInstance(OutHits_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LineTraceMultiByProfile_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:LineTraceMulti
    static readonly IntPtr LineTraceMulti_NativeFunction;
    static readonly int LineTraceMulti_ParamsSize;
    static readonly int LineTraceMulti_WorldContextObject_Offset;
    static readonly int LineTraceMulti_Start_Offset;
    static readonly int LineTraceMulti_End_Offset;
    static readonly int LineTraceMulti_TraceChannel_Offset;
    static readonly int LineTraceMulti_bTraceComplex_Offset;
    static readonly int LineTraceMulti_ActorsToIgnore_Offset;
    static readonly int LineTraceMulti_ActorsToIgnore_ElementSize;
    static readonly int LineTraceMulti_DrawDebugType_Offset;
    static readonly int LineTraceMulti_OutHits_Offset;
    static readonly int LineTraceMulti_OutHits_ElementSize;
    static readonly int LineTraceMulti_bIgnoreSelf_Offset;
    static readonly int LineTraceMulti_TraceColor_Offset;
    static readonly int LineTraceMulti_TraceHitColor_Offset;
    static readonly int LineTraceMulti_DrawTime_Offset;
    static readonly int LineTraceMulti_ReturnValue_Offset;
    
    public static bool LineTraceMulti(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return LineTraceMulti(worldContextObject, start, end, traceChannel, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor);
    }
    
    public static bool LineTraceMulti(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return LineTraceMulti(worldContextObject, start, end, traceChannel, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool LineTraceMulti(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LineTraceMulti_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMulti_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMulti_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMulti_End_Offset), 0, null, end);
            BlittableMarshaller<UnrealSharp.Engine.ETraceTypeQuery>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMulti_TraceChannel_Offset), 0, null, traceChannel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMulti_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, LineTraceMulti_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, LineTraceMulti_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMulti_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMulti_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMulti_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMulti_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LineTraceMulti_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LineTraceMulti_NativeFunction, ParamsBuffer);
            
            IntPtr OutHits_NativeBuffer = IntPtr.Add(ParamsBuffer, LineTraceMulti_OutHits_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> OutHits_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> (1, UnrealSharp.Engine.HitResultMarshaler.ToNative, UnrealSharp.Engine.HitResultMarshaler.FromNative, LineTraceMulti_OutHits_ElementSize);
            outHits = OutHits_Marshaler.FromNative(OutHits_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult>.DestructInstance(OutHits_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LineTraceMulti_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:LaunchURL
    static readonly IntPtr LaunchURL_NativeFunction;
    static readonly int LaunchURL_ParamsSize;
    static readonly int LaunchURL_URL_Offset;
    
    public static void LaunchURL(string uRL)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LaunchURL_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr URL_NativePtr = IntPtr.Add(ParamsBuffer,LaunchURL_URL_Offset);
            StringMarshaller.ToNative(URL_NativePtr,0,null,uRL);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LaunchURL_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(URL_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:K2_UnPauseTimerHandle
    static readonly IntPtr K2_UnPauseTimerHandle_NativeFunction;
    static readonly int K2_UnPauseTimerHandle_ParamsSize;
    static readonly int K2_UnPauseTimerHandle_WorldContextObject_Offset;
    static readonly int K2_UnPauseTimerHandle_Handle_Offset;
    
    public static void UnPauseTimerHandle(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.TimerHandle handle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_UnPauseTimerHandle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, K2_UnPauseTimerHandle_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<UnrealSharp.TimerHandle>.ToNative(IntPtr.Add(ParamsBuffer, K2_UnPauseTimerHandle_Handle_Offset), 0, null, handle);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, K2_UnPauseTimerHandle_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:K2_UnPauseTimer
    static readonly IntPtr K2_UnPauseTimer_NativeFunction;
    static readonly int K2_UnPauseTimer_ParamsSize;
    static readonly int K2_UnPauseTimer_Object_Offset;
    static readonly int K2_UnPauseTimer_FunctionName_Offset;
    
    public static void UnPauseTimer(UnrealSharp.CoreUObject.Object @object, string functionName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_UnPauseTimer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, K2_UnPauseTimer_Object_Offset), 0, null, @object);
            IntPtr FunctionName_NativePtr = IntPtr.Add(ParamsBuffer,K2_UnPauseTimer_FunctionName_Offset);
            StringMarshaller.ToNative(FunctionName_NativePtr,0,null,functionName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, K2_UnPauseTimer_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(FunctionName_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:K2_TimerExistsHandle
    static readonly IntPtr K2_TimerExistsHandle_NativeFunction;
    static readonly int K2_TimerExistsHandle_ParamsSize;
    static readonly int K2_TimerExistsHandle_WorldContextObject_Offset;
    static readonly int K2_TimerExistsHandle_Handle_Offset;
    static readonly int K2_TimerExistsHandle_ReturnValue_Offset;
    
    public static bool TimerExistsHandle(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.TimerHandle handle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_TimerExistsHandle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, K2_TimerExistsHandle_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<UnrealSharp.TimerHandle>.ToNative(IntPtr.Add(ParamsBuffer, K2_TimerExistsHandle_Handle_Offset), 0, null, handle);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, K2_TimerExistsHandle_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_TimerExistsHandle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:K2_TimerExists
    static readonly IntPtr K2_TimerExists_NativeFunction;
    static readonly int K2_TimerExists_ParamsSize;
    static readonly int K2_TimerExists_Object_Offset;
    static readonly int K2_TimerExists_FunctionName_Offset;
    static readonly int K2_TimerExists_ReturnValue_Offset;
    
    public static bool TimerExists(UnrealSharp.CoreUObject.Object @object, string functionName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_TimerExists_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, K2_TimerExists_Object_Offset), 0, null, @object);
            IntPtr FunctionName_NativePtr = IntPtr.Add(ParamsBuffer,K2_TimerExists_FunctionName_Offset);
            StringMarshaller.ToNative(FunctionName_NativePtr,0,null,functionName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, K2_TimerExists_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_TimerExists_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(FunctionName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:K2_SetTimerForNextTick
    static readonly IntPtr K2_SetTimerForNextTick_NativeFunction;
    static readonly int K2_SetTimerForNextTick_ParamsSize;
    static readonly int K2_SetTimerForNextTick_Object_Offset;
    static readonly int K2_SetTimerForNextTick_FunctionName_Offset;
    static readonly int K2_SetTimerForNextTick_ReturnValue_Offset;
    
    public static UnrealSharp.TimerHandle SetTimerForNextTick(UnrealSharp.CoreUObject.Object @object, string functionName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_SetTimerForNextTick_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetTimerForNextTick_Object_Offset), 0, null, @object);
            IntPtr FunctionName_NativePtr = IntPtr.Add(ParamsBuffer,K2_SetTimerForNextTick_FunctionName_Offset);
            StringMarshaller.ToNative(FunctionName_NativePtr,0,null,functionName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, K2_SetTimerForNextTick_NativeFunction, ParamsBuffer);
            
            UnrealSharp.TimerHandle returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.TimerHandle>.FromNative(IntPtr.Add(ParamsBuffer, K2_SetTimerForNextTick_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(FunctionName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:K2_SetTimer
    static readonly IntPtr K2_SetTimer_NativeFunction;
    static readonly int K2_SetTimer_ParamsSize;
    static readonly int K2_SetTimer_Object_Offset;
    static readonly int K2_SetTimer_FunctionName_Offset;
    static readonly int K2_SetTimer_Time_Offset;
    static readonly int K2_SetTimer_bLooping_Offset;
    static readonly int K2_SetTimer_InitialStartDelay_Offset;
    static readonly int K2_SetTimer_InitialStartDelayVariance_Offset;
    static readonly int K2_SetTimer_ReturnValue_Offset;
    
    public static UnrealSharp.TimerHandle SetTimer(UnrealSharp.CoreUObject.Object @object, string functionName, float time, bool bLooping, float initialStartDelay = 0.000000f, float initialStartDelayVariance = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_SetTimer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetTimer_Object_Offset), 0, null, @object);
            IntPtr FunctionName_NativePtr = IntPtr.Add(ParamsBuffer,K2_SetTimer_FunctionName_Offset);
            StringMarshaller.ToNative(FunctionName_NativePtr,0,null,functionName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetTimer_Time_Offset), 0, null, time);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetTimer_bLooping_Offset), 0, null, bLooping);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetTimer_InitialStartDelay_Offset), 0, null, initialStartDelay);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetTimer_InitialStartDelayVariance_Offset), 0, null, initialStartDelayVariance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, K2_SetTimer_NativeFunction, ParamsBuffer);
            
            UnrealSharp.TimerHandle returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.TimerHandle>.FromNative(IntPtr.Add(ParamsBuffer, K2_SetTimer_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(FunctionName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:K2_PauseTimerHandle
    static readonly IntPtr K2_PauseTimerHandle_NativeFunction;
    static readonly int K2_PauseTimerHandle_ParamsSize;
    static readonly int K2_PauseTimerHandle_WorldContextObject_Offset;
    static readonly int K2_PauseTimerHandle_Handle_Offset;
    
    public static void PauseTimerHandle(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.TimerHandle handle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_PauseTimerHandle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, K2_PauseTimerHandle_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<UnrealSharp.TimerHandle>.ToNative(IntPtr.Add(ParamsBuffer, K2_PauseTimerHandle_Handle_Offset), 0, null, handle);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, K2_PauseTimerHandle_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:K2_PauseTimer
    static readonly IntPtr K2_PauseTimer_NativeFunction;
    static readonly int K2_PauseTimer_ParamsSize;
    static readonly int K2_PauseTimer_Object_Offset;
    static readonly int K2_PauseTimer_FunctionName_Offset;
    
    public static void PauseTimer(UnrealSharp.CoreUObject.Object @object, string functionName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_PauseTimer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, K2_PauseTimer_Object_Offset), 0, null, @object);
            IntPtr FunctionName_NativePtr = IntPtr.Add(ParamsBuffer,K2_PauseTimer_FunctionName_Offset);
            StringMarshaller.ToNative(FunctionName_NativePtr,0,null,functionName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, K2_PauseTimer_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(FunctionName_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:K2_IsValidTimerHandle
    static readonly IntPtr K2_IsValidTimerHandle_NativeFunction;
    static readonly int K2_IsValidTimerHandle_ParamsSize;
    static readonly int K2_IsValidTimerHandle_Handle_Offset;
    static readonly int K2_IsValidTimerHandle_ReturnValue_Offset;
    
    public static bool IsValidTimerHandle(UnrealSharp.TimerHandle handle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_IsValidTimerHandle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.TimerHandle>.ToNative(IntPtr.Add(ParamsBuffer, K2_IsValidTimerHandle_Handle_Offset), 0, null, handle);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, K2_IsValidTimerHandle_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_IsValidTimerHandle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:K2_IsTimerPausedHandle
    static readonly IntPtr K2_IsTimerPausedHandle_NativeFunction;
    static readonly int K2_IsTimerPausedHandle_ParamsSize;
    static readonly int K2_IsTimerPausedHandle_WorldContextObject_Offset;
    static readonly int K2_IsTimerPausedHandle_Handle_Offset;
    static readonly int K2_IsTimerPausedHandle_ReturnValue_Offset;
    
    public static bool IsTimerPausedHandle(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.TimerHandle handle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_IsTimerPausedHandle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, K2_IsTimerPausedHandle_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<UnrealSharp.TimerHandle>.ToNative(IntPtr.Add(ParamsBuffer, K2_IsTimerPausedHandle_Handle_Offset), 0, null, handle);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, K2_IsTimerPausedHandle_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_IsTimerPausedHandle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:K2_IsTimerPaused
    static readonly IntPtr K2_IsTimerPaused_NativeFunction;
    static readonly int K2_IsTimerPaused_ParamsSize;
    static readonly int K2_IsTimerPaused_Object_Offset;
    static readonly int K2_IsTimerPaused_FunctionName_Offset;
    static readonly int K2_IsTimerPaused_ReturnValue_Offset;
    
    public static bool IsTimerPaused(UnrealSharp.CoreUObject.Object @object, string functionName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_IsTimerPaused_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, K2_IsTimerPaused_Object_Offset), 0, null, @object);
            IntPtr FunctionName_NativePtr = IntPtr.Add(ParamsBuffer,K2_IsTimerPaused_FunctionName_Offset);
            StringMarshaller.ToNative(FunctionName_NativePtr,0,null,functionName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, K2_IsTimerPaused_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_IsTimerPaused_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(FunctionName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:K2_IsTimerActiveHandle
    static readonly IntPtr K2_IsTimerActiveHandle_NativeFunction;
    static readonly int K2_IsTimerActiveHandle_ParamsSize;
    static readonly int K2_IsTimerActiveHandle_WorldContextObject_Offset;
    static readonly int K2_IsTimerActiveHandle_Handle_Offset;
    static readonly int K2_IsTimerActiveHandle_ReturnValue_Offset;
    
    public static bool IsTimerActiveHandle(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.TimerHandle handle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_IsTimerActiveHandle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, K2_IsTimerActiveHandle_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<UnrealSharp.TimerHandle>.ToNative(IntPtr.Add(ParamsBuffer, K2_IsTimerActiveHandle_Handle_Offset), 0, null, handle);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, K2_IsTimerActiveHandle_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_IsTimerActiveHandle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:K2_IsTimerActive
    static readonly IntPtr K2_IsTimerActive_NativeFunction;
    static readonly int K2_IsTimerActive_ParamsSize;
    static readonly int K2_IsTimerActive_Object_Offset;
    static readonly int K2_IsTimerActive_FunctionName_Offset;
    static readonly int K2_IsTimerActive_ReturnValue_Offset;
    
    public static bool IsTimerActive(UnrealSharp.CoreUObject.Object @object, string functionName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_IsTimerActive_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, K2_IsTimerActive_Object_Offset), 0, null, @object);
            IntPtr FunctionName_NativePtr = IntPtr.Add(ParamsBuffer,K2_IsTimerActive_FunctionName_Offset);
            StringMarshaller.ToNative(FunctionName_NativePtr,0,null,functionName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, K2_IsTimerActive_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_IsTimerActive_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(FunctionName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:K2_InvalidateTimerHandle
    static readonly IntPtr K2_InvalidateTimerHandle_NativeFunction;
    static readonly int K2_InvalidateTimerHandle_ParamsSize;
    static readonly int K2_InvalidateTimerHandle_Handle_Offset;
    static readonly int K2_InvalidateTimerHandle_ReturnValue_Offset;
    
    public static UnrealSharp.TimerHandle InvalidateTimerHandle(ref UnrealSharp.TimerHandle handle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_InvalidateTimerHandle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.TimerHandle>.ToNative(IntPtr.Add(ParamsBuffer, K2_InvalidateTimerHandle_Handle_Offset), 0, null, handle);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, K2_InvalidateTimerHandle_NativeFunction, ParamsBuffer);
            
            handle = BlittableMarshaller<UnrealSharp.TimerHandle>.FromNative(IntPtr.Add(ParamsBuffer, K2_InvalidateTimerHandle_Handle_Offset), 0, null);
            UnrealSharp.TimerHandle returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.TimerHandle>.FromNative(IntPtr.Add(ParamsBuffer, K2_InvalidateTimerHandle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:K2_GetTimerRemainingTimeHandle
    static readonly IntPtr K2_GetTimerRemainingTimeHandle_NativeFunction;
    static readonly int K2_GetTimerRemainingTimeHandle_ParamsSize;
    static readonly int K2_GetTimerRemainingTimeHandle_WorldContextObject_Offset;
    static readonly int K2_GetTimerRemainingTimeHandle_Handle_Offset;
    static readonly int K2_GetTimerRemainingTimeHandle_ReturnValue_Offset;
    
    public static float GetTimerRemainingTimeHandle(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.TimerHandle handle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_GetTimerRemainingTimeHandle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, K2_GetTimerRemainingTimeHandle_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<UnrealSharp.TimerHandle>.ToNative(IntPtr.Add(ParamsBuffer, K2_GetTimerRemainingTimeHandle_Handle_Offset), 0, null, handle);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, K2_GetTimerRemainingTimeHandle_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, K2_GetTimerRemainingTimeHandle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:K2_GetTimerRemainingTime
    static readonly IntPtr K2_GetTimerRemainingTime_NativeFunction;
    static readonly int K2_GetTimerRemainingTime_ParamsSize;
    static readonly int K2_GetTimerRemainingTime_Object_Offset;
    static readonly int K2_GetTimerRemainingTime_FunctionName_Offset;
    static readonly int K2_GetTimerRemainingTime_ReturnValue_Offset;
    
    public static float GetTimerRemainingTime(UnrealSharp.CoreUObject.Object @object, string functionName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_GetTimerRemainingTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, K2_GetTimerRemainingTime_Object_Offset), 0, null, @object);
            IntPtr FunctionName_NativePtr = IntPtr.Add(ParamsBuffer,K2_GetTimerRemainingTime_FunctionName_Offset);
            StringMarshaller.ToNative(FunctionName_NativePtr,0,null,functionName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, K2_GetTimerRemainingTime_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, K2_GetTimerRemainingTime_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(FunctionName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:K2_GetTimerElapsedTimeHandle
    static readonly IntPtr K2_GetTimerElapsedTimeHandle_NativeFunction;
    static readonly int K2_GetTimerElapsedTimeHandle_ParamsSize;
    static readonly int K2_GetTimerElapsedTimeHandle_WorldContextObject_Offset;
    static readonly int K2_GetTimerElapsedTimeHandle_Handle_Offset;
    static readonly int K2_GetTimerElapsedTimeHandle_ReturnValue_Offset;
    
    public static float GetTimerElapsedTimeHandle(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.TimerHandle handle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_GetTimerElapsedTimeHandle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, K2_GetTimerElapsedTimeHandle_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<UnrealSharp.TimerHandle>.ToNative(IntPtr.Add(ParamsBuffer, K2_GetTimerElapsedTimeHandle_Handle_Offset), 0, null, handle);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, K2_GetTimerElapsedTimeHandle_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, K2_GetTimerElapsedTimeHandle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:K2_GetTimerElapsedTime
    static readonly IntPtr K2_GetTimerElapsedTime_NativeFunction;
    static readonly int K2_GetTimerElapsedTime_ParamsSize;
    static readonly int K2_GetTimerElapsedTime_Object_Offset;
    static readonly int K2_GetTimerElapsedTime_FunctionName_Offset;
    static readonly int K2_GetTimerElapsedTime_ReturnValue_Offset;
    
    public static float GetTimerElapsedTime(UnrealSharp.CoreUObject.Object @object, string functionName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_GetTimerElapsedTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, K2_GetTimerElapsedTime_Object_Offset), 0, null, @object);
            IntPtr FunctionName_NativePtr = IntPtr.Add(ParamsBuffer,K2_GetTimerElapsedTime_FunctionName_Offset);
            StringMarshaller.ToNative(FunctionName_NativePtr,0,null,functionName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, K2_GetTimerElapsedTime_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, K2_GetTimerElapsedTime_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(FunctionName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:K2_ClearTimerHandle
    static readonly IntPtr K2_ClearTimerHandle_NativeFunction;
    static readonly int K2_ClearTimerHandle_ParamsSize;
    static readonly int K2_ClearTimerHandle_WorldContextObject_Offset;
    static readonly int K2_ClearTimerHandle_Handle_Offset;
    
    [Obsolete("Use Clear and Invalidate Timer by Handle. Note: you no longer need to reset your handle yourself after switching to the new function.")]
    public static void ClearTimerHandle(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.TimerHandle handle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_ClearTimerHandle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, K2_ClearTimerHandle_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<UnrealSharp.TimerHandle>.ToNative(IntPtr.Add(ParamsBuffer, K2_ClearTimerHandle_Handle_Offset), 0, null, handle);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, K2_ClearTimerHandle_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:K2_ClearTimer
    static readonly IntPtr K2_ClearTimer_NativeFunction;
    static readonly int K2_ClearTimer_ParamsSize;
    static readonly int K2_ClearTimer_Object_Offset;
    static readonly int K2_ClearTimer_FunctionName_Offset;
    
    public static void ClearTimer(UnrealSharp.CoreUObject.Object @object, string functionName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_ClearTimer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, K2_ClearTimer_Object_Offset), 0, null, @object);
            IntPtr FunctionName_NativePtr = IntPtr.Add(ParamsBuffer,K2_ClearTimer_FunctionName_Offset);
            StringMarshaller.ToNative(FunctionName_NativePtr,0,null,functionName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, K2_ClearTimer_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(FunctionName_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:K2_ClearAndInvalidateTimerHandle
    static readonly IntPtr K2_ClearAndInvalidateTimerHandle_NativeFunction;
    static readonly int K2_ClearAndInvalidateTimerHandle_ParamsSize;
    static readonly int K2_ClearAndInvalidateTimerHandle_WorldContextObject_Offset;
    static readonly int K2_ClearAndInvalidateTimerHandle_Handle_Offset;
    
    public static void ClearAndInvalidateTimerHandle(UnrealSharp.CoreUObject.Object worldContextObject, ref UnrealSharp.TimerHandle handle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_ClearAndInvalidateTimerHandle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, K2_ClearAndInvalidateTimerHandle_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<UnrealSharp.TimerHandle>.ToNative(IntPtr.Add(ParamsBuffer, K2_ClearAndInvalidateTimerHandle_Handle_Offset), 0, null, handle);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, K2_ClearAndInvalidateTimerHandle_NativeFunction, ParamsBuffer);
            
            handle = BlittableMarshaller<UnrealSharp.TimerHandle>.FromNative(IntPtr.Add(ParamsBuffer, K2_ClearAndInvalidateTimerHandle_Handle_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:IsValidSoftObjectReference
    static readonly IntPtr IsValidSoftObjectReference_NativeFunction;
    static readonly int IsValidSoftObjectReference_ParamsSize;
    static readonly int IsValidSoftObjectReference_SoftObjectReference_Offset;
    static readonly int IsValidSoftObjectReference_ReturnValue_Offset;
    
    public static bool IsValidSoftObjectReference(SoftObject<UnrealSharp.CoreUObject.Object> softObjectReference)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValidSoftObjectReference_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<SoftObject<UnrealSharp.CoreUObject.Object>>.ToNative(IntPtr.Add(ParamsBuffer, IsValidSoftObjectReference_SoftObjectReference_Offset), 0, null, softObjectReference);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsValidSoftObjectReference_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValidSoftObjectReference_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:IsValidPrimaryAssetType
    static readonly IntPtr IsValidPrimaryAssetType_NativeFunction;
    static readonly int IsValidPrimaryAssetType_ParamsSize;
    static readonly int IsValidPrimaryAssetType_PrimaryAssetType_Offset;
    static readonly int IsValidPrimaryAssetType_ReturnValue_Offset;
    
    public static bool IsValid(UnrealSharp.CoreUObject.PrimaryAssetType primaryAssetType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValidPrimaryAssetType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetType>.ToNative(IntPtr.Add(ParamsBuffer, IsValidPrimaryAssetType_PrimaryAssetType_Offset), 0, null, primaryAssetType);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsValidPrimaryAssetType_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValidPrimaryAssetType_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:IsValidPrimaryAssetId
    static readonly IntPtr IsValidPrimaryAssetId_NativeFunction;
    static readonly int IsValidPrimaryAssetId_ParamsSize;
    static readonly int IsValidPrimaryAssetId_PrimaryAssetId_Offset;
    static readonly int IsValidPrimaryAssetId_ReturnValue_Offset;
    
    public static bool IsValid(UnrealSharp.CoreUObject.PrimaryAssetId primaryAssetId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValidPrimaryAssetId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetId>.ToNative(IntPtr.Add(ParamsBuffer, IsValidPrimaryAssetId_PrimaryAssetId_Offset), 0, null, primaryAssetId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsValidPrimaryAssetId_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValidPrimaryAssetId_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:IsValidClass
    static readonly IntPtr IsValidClass_NativeFunction;
    static readonly int IsValidClass_ParamsSize;
    static readonly int IsValidClass_Class_Offset;
    static readonly int IsValidClass_ReturnValue_Offset;
    
    public static bool IsValidClass(SubclassOf<UnrealSharp.CoreUObject.Object> @class)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValidClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, IsValidClass_Class_Offset), 0, null, @class);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsValidClass_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValidClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:IsValid
    static readonly IntPtr IsValid_NativeFunction;
    static readonly int IsValid_ParamsSize;
    static readonly int IsValid_Object_Offset;
    static readonly int IsValid_ReturnValue_Offset;
    
    public static bool IsValid(UnrealSharp.CoreUObject.Object @object)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsValid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, IsValid_Object_Offset), 0, null, @object);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsValid_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsValid_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:IsUnattended
    static readonly IntPtr IsUnattended_NativeFunction;
    static readonly int IsUnattended_ParamsSize;
    static readonly int IsUnattended_ReturnValue_Offset;
    
    public static bool IsUnattended()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsUnattended_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsUnattended_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsUnattended_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:IsStandalone
    static readonly IntPtr IsStandalone_NativeFunction;
    static readonly int IsStandalone_ParamsSize;
    static readonly int IsStandalone_WorldContextObject_Offset;
    static readonly int IsStandalone_ReturnValue_Offset;
    
    public static bool IsStandalone(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsStandalone_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, IsStandalone_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsStandalone_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsStandalone_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:IsSplitScreen
    static readonly IntPtr IsSplitScreen_NativeFunction;
    static readonly int IsSplitScreen_ParamsSize;
    static readonly int IsSplitScreen_WorldContextObject_Offset;
    static readonly int IsSplitScreen_ReturnValue_Offset;
    
    [Obsolete("Use HasMultipleLocalPlayers instead")]
    public static bool IsSplitScreen(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsSplitScreen_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, IsSplitScreen_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsSplitScreen_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsSplitScreen_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:IsServer
    static readonly IntPtr IsServer_NativeFunction;
    static readonly int IsServer_ParamsSize;
    static readonly int IsServer_WorldContextObject_Offset;
    static readonly int IsServer_ReturnValue_Offset;
    
    public static bool IsServer(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsServer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, IsServer_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsServer_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsServer_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:IsScreensaverEnabled
    static readonly IntPtr IsScreensaverEnabled_NativeFunction;
    static readonly int IsScreensaverEnabled_ParamsSize;
    static readonly int IsScreensaverEnabled_ReturnValue_Offset;
    
    public static bool IsScreensaverEnabled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsScreensaverEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsScreensaverEnabled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsScreensaverEnabled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:IsPackagedForDistribution
    static readonly IntPtr IsPackagedForDistribution_NativeFunction;
    static readonly int IsPackagedForDistribution_ParamsSize;
    static readonly int IsPackagedForDistribution_ReturnValue_Offset;
    
    public static bool IsPackagedForDistribution()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPackagedForDistribution_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsPackagedForDistribution_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPackagedForDistribution_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:IsLoggedIn
    static readonly IntPtr IsLoggedIn_NativeFunction;
    static readonly int IsLoggedIn_ParamsSize;
    static readonly int IsLoggedIn_SpecificPlayer_Offset;
    static readonly int IsLoggedIn_ReturnValue_Offset;
    
    public static bool IsLoggedIn(UnrealSharp.Engine.PlayerController specificPlayer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsLoggedIn_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, IsLoggedIn_SpecificPlayer_Offset), 0, null, specificPlayer);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsLoggedIn_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsLoggedIn_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:IsInterstitialAdRequested
    static readonly IntPtr IsInterstitialAdRequested_NativeFunction;
    static readonly int IsInterstitialAdRequested_ParamsSize;
    static readonly int IsInterstitialAdRequested_ReturnValue_Offset;
    
    public static bool IsInterstitialAdRequested()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsInterstitialAdRequested_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsInterstitialAdRequested_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsInterstitialAdRequested_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:IsInterstitialAdAvailable
    static readonly IntPtr IsInterstitialAdAvailable_NativeFunction;
    static readonly int IsInterstitialAdAvailable_ParamsSize;
    static readonly int IsInterstitialAdAvailable_ReturnValue_Offset;
    
    public static bool IsInterstitialAdAvailable()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsInterstitialAdAvailable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsInterstitialAdAvailable_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsInterstitialAdAvailable_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:IsDedicatedServer
    static readonly IntPtr IsDedicatedServer_NativeFunction;
    static readonly int IsDedicatedServer_ParamsSize;
    static readonly int IsDedicatedServer_WorldContextObject_Offset;
    static readonly int IsDedicatedServer_ReturnValue_Offset;
    
    public static bool IsDedicatedServer(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsDedicatedServer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, IsDedicatedServer_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsDedicatedServer_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsDedicatedServer_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:IsControllerAssignedToGamepad
    static readonly IntPtr IsControllerAssignedToGamepad_NativeFunction;
    static readonly int IsControllerAssignedToGamepad_ParamsSize;
    static readonly int IsControllerAssignedToGamepad_ControllerId_Offset;
    static readonly int IsControllerAssignedToGamepad_ReturnValue_Offset;
    
    public static bool IsControllerAssignedToGamepad(int controllerId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsControllerAssignedToGamepad_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, IsControllerAssignedToGamepad_ControllerId_Offset), 0, null, controllerId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsControllerAssignedToGamepad_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsControllerAssignedToGamepad_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:HideAdBanner
    static readonly IntPtr HideAdBanner_NativeFunction;
    
    public static void HideAdBanner()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, HideAdBanner_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:HasMultipleLocalPlayers
    static readonly IntPtr HasMultipleLocalPlayers_NativeFunction;
    static readonly int HasMultipleLocalPlayers_ParamsSize;
    static readonly int HasMultipleLocalPlayers_WorldContextObject_Offset;
    static readonly int HasMultipleLocalPlayers_ReturnValue_Offset;
    
    public static bool HasMultipleLocalPlayers(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasMultipleLocalPlayers_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, HasMultipleLocalPlayers_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, HasMultipleLocalPlayers_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasMultipleLocalPlayers_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetVolumeButtonsHandledBySystem
    static readonly IntPtr GetVolumeButtonsHandledBySystem_NativeFunction;
    static readonly int GetVolumeButtonsHandledBySystem_ParamsSize;
    static readonly int GetVolumeButtonsHandledBySystem_ReturnValue_Offset;
    
    public static bool GetVolumeButtonsHandledBySystem()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVolumeButtonsHandledBySystem_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetVolumeButtonsHandledBySystem_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetVolumeButtonsHandledBySystem_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetUniqueDeviceId
    static readonly IntPtr GetUniqueDeviceId_NativeFunction;
    static readonly int GetUniqueDeviceId_ParamsSize;
    static readonly int GetUniqueDeviceId_ReturnValue_Offset;
    
    [Obsolete("Use GetDeviceId instead")]
    public static string GetUniqueDeviceId()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetUniqueDeviceId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetUniqueDeviceId_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetUniqueDeviceId_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetSystemPath
    static readonly IntPtr GetSystemPath_NativeFunction;
    static readonly int GetSystemPath_ParamsSize;
    static readonly int GetSystemPath_Object_Offset;
    static readonly int GetSystemPath_ReturnValue_Offset;
    
    public static string GetSystemPath(UnrealSharp.CoreUObject.Object @object)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSystemPath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetSystemPath_Object_Offset), 0, null, @object);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSystemPath_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetSystemPath_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetSupportedFullscreenResolutions
    static readonly IntPtr GetSupportedFullscreenResolutions_NativeFunction;
    static readonly int GetSupportedFullscreenResolutions_ParamsSize;
    static readonly int GetSupportedFullscreenResolutions_Resolutions_Offset;
    static readonly int GetSupportedFullscreenResolutions_Resolutions_ElementSize;
    static readonly int GetSupportedFullscreenResolutions_ReturnValue_Offset;
    
    public static bool GetSupportedFullscreenResolutions(out System.Collections.Generic.IList<UnrealSharp.CoreUObject.IntPoint> resolutions)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSupportedFullscreenResolutions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSupportedFullscreenResolutions_NativeFunction, ParamsBuffer);
            
            IntPtr Resolutions_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSupportedFullscreenResolutions_Resolutions_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.IntPoint> Resolutions_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.IntPoint> (1, BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative, GetSupportedFullscreenResolutions_Resolutions_ElementSize);
            resolutions = Resolutions_Marshaler.FromNative(Resolutions_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.IntPoint>.DestructInstance(Resolutions_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetSupportedFullscreenResolutions_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetStructTopLevelAssetPath
    static readonly IntPtr GetStructTopLevelAssetPath_NativeFunction;
    static readonly int GetStructTopLevelAssetPath_ParamsSize;
    static readonly int GetStructTopLevelAssetPath_Struct_Offset;
    static readonly int GetStructTopLevelAssetPath_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.TopLevelAssetPath GetStructPathName(UnrealSharp.CoreUObject.ScriptStruct @struct)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStructTopLevelAssetPath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.ScriptStruct>.ToNative(IntPtr.Add(ParamsBuffer, GetStructTopLevelAssetPath_Struct_Offset), 0, null, @struct);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetStructTopLevelAssetPath_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.TopLevelAssetPath returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.TopLevelAssetPath>.FromNative(IntPtr.Add(ParamsBuffer, GetStructTopLevelAssetPath_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetSoftObjectReferenceFromPrimaryAssetId
    static readonly IntPtr GetSoftObjectReferenceFromPrimaryAssetId_NativeFunction;
    static readonly int GetSoftObjectReferenceFromPrimaryAssetId_ParamsSize;
    static readonly int GetSoftObjectReferenceFromPrimaryAssetId_PrimaryAssetId_Offset;
    static readonly int GetSoftObjectReferenceFromPrimaryAssetId_ReturnValue_Offset;
    
    public static SoftObject<UnrealSharp.CoreUObject.Object> GetSoftObjectReference(UnrealSharp.CoreUObject.PrimaryAssetId primaryAssetId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSoftObjectReferenceFromPrimaryAssetId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetId>.ToNative(IntPtr.Add(ParamsBuffer, GetSoftObjectReferenceFromPrimaryAssetId_PrimaryAssetId_Offset), 0, null, primaryAssetId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSoftObjectReferenceFromPrimaryAssetId_NativeFunction, ParamsBuffer);
            
            SoftObject<UnrealSharp.CoreUObject.Object> returnValue;
            returnValue = BlittableMarshaller<SoftObject<UnrealSharp.CoreUObject.Object>>.FromNative(IntPtr.Add(ParamsBuffer, GetSoftObjectReferenceFromPrimaryAssetId_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetSoftObjectPath
    static readonly IntPtr GetSoftObjectPath_NativeFunction;
    static readonly int GetSoftObjectPath_ParamsSize;
    static readonly int GetSoftObjectPath_Object_Offset;
    static readonly int GetSoftObjectPath_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.SoftObjectPath GetSoftObjectPath(UnrealSharp.CoreUObject.Object @object)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSoftObjectPath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetSoftObjectPath_Object_Offset), 0, null, @object);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSoftObjectPath_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.SoftObjectPath returnValue;
            returnValue = UnrealSharp.CoreUObject.SoftObjectPathMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetSoftObjectPath_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetSoftClassPath
    static readonly IntPtr GetSoftClassPath_NativeFunction;
    static readonly int GetSoftClassPath_ParamsSize;
    static readonly int GetSoftClassPath_Class_Offset;
    static readonly int GetSoftClassPath_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.SoftClassPath GetSoftClassPath(SubclassOf<UnrealSharp.CoreUObject.Object> @class)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSoftClassPath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetSoftClassPath_Class_Offset), 0, null, @class);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSoftClassPath_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.SoftClassPath returnValue;
            returnValue = UnrealSharp.CoreUObject.SoftClassPathMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetSoftClassPath_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetRenderingMaterialQualityLevel
    static readonly IntPtr GetRenderingMaterialQualityLevel_NativeFunction;
    static readonly int GetRenderingMaterialQualityLevel_ParamsSize;
    static readonly int GetRenderingMaterialQualityLevel_ReturnValue_Offset;
    
    public static int GetRenderingMaterialQualityLevel()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRenderingMaterialQualityLevel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetRenderingMaterialQualityLevel_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetRenderingMaterialQualityLevel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetRenderingDetailMode
    static readonly IntPtr GetRenderingDetailMode_NativeFunction;
    static readonly int GetRenderingDetailMode_ParamsSize;
    static readonly int GetRenderingDetailMode_ReturnValue_Offset;
    
    public static int GetRenderingDetailMode()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRenderingDetailMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetRenderingDetailMode_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetRenderingDetailMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetProjectSavedDirectory
    static readonly IntPtr GetProjectSavedDirectory_NativeFunction;
    static readonly int GetProjectSavedDirectory_ParamsSize;
    static readonly int GetProjectSavedDirectory_ReturnValue_Offset;
    
    public static string GetProjectSavedDirectory()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetProjectSavedDirectory_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetProjectSavedDirectory_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetProjectSavedDirectory_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetProjectDirectory
    static readonly IntPtr GetProjectDirectory_NativeFunction;
    static readonly int GetProjectDirectory_ParamsSize;
    static readonly int GetProjectDirectory_ReturnValue_Offset;
    
    public static string GetProjectDirectory()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetProjectDirectory_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetProjectDirectory_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetProjectDirectory_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetProjectContentDirectory
    static readonly IntPtr GetProjectContentDirectory_NativeFunction;
    static readonly int GetProjectContentDirectory_ParamsSize;
    static readonly int GetProjectContentDirectory_ReturnValue_Offset;
    
    public static string GetProjectContentDirectory()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetProjectContentDirectory_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetProjectContentDirectory_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetProjectContentDirectory_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetPrimaryAssetsWithBundleState
    static readonly IntPtr GetPrimaryAssetsWithBundleState_NativeFunction;
    static readonly int GetPrimaryAssetsWithBundleState_ParamsSize;
    static readonly int GetPrimaryAssetsWithBundleState_RequiredBundles_Offset;
    static readonly int GetPrimaryAssetsWithBundleState_RequiredBundles_ElementSize;
    static readonly int GetPrimaryAssetsWithBundleState_ExcludedBundles_Offset;
    static readonly int GetPrimaryAssetsWithBundleState_ExcludedBundles_ElementSize;
    static readonly int GetPrimaryAssetsWithBundleState_ValidTypes_Offset;
    static readonly int GetPrimaryAssetsWithBundleState_ValidTypes_ElementSize;
    static readonly int GetPrimaryAssetsWithBundleState_bForceCurrentState_Offset;
    static readonly int GetPrimaryAssetsWithBundleState_OutPrimaryAssetIdList_Offset;
    static readonly int GetPrimaryAssetsWithBundleState_OutPrimaryAssetIdList_ElementSize;
    
    public static void GetPrimaryAssetsWithBundleState(System.Collections.Generic.IList<Name> requiredBundles, System.Collections.Generic.IList<Name> excludedBundles, System.Collections.Generic.IList<UnrealSharp.CoreUObject.PrimaryAssetType> validTypes, bool bForceCurrentState, out System.Collections.Generic.IList<UnrealSharp.CoreUObject.PrimaryAssetId> outPrimaryAssetIdList)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPrimaryAssetsWithBundleState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr RequiredBundles_NativeBuffer = IntPtr.Add(ParamsBuffer, GetPrimaryAssetsWithBundleState_RequiredBundles_Offset);
            UnrealArrayCopyMarshaler<Name> RequiredBundles_Marshaler = new UnrealArrayCopyMarshaler<Name>(1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetPrimaryAssetsWithBundleState_RequiredBundles_ElementSize);
            RequiredBundles_Marshaler.ToNative(RequiredBundles_NativeBuffer, 0, null, requiredBundles);
            IntPtr ExcludedBundles_NativeBuffer = IntPtr.Add(ParamsBuffer, GetPrimaryAssetsWithBundleState_ExcludedBundles_Offset);
            UnrealArrayCopyMarshaler<Name> ExcludedBundles_Marshaler = new UnrealArrayCopyMarshaler<Name>(1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetPrimaryAssetsWithBundleState_ExcludedBundles_ElementSize);
            ExcludedBundles_Marshaler.ToNative(ExcludedBundles_NativeBuffer, 0, null, excludedBundles);
            IntPtr ValidTypes_NativeBuffer = IntPtr.Add(ParamsBuffer, GetPrimaryAssetsWithBundleState_ValidTypes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.PrimaryAssetType> ValidTypes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.PrimaryAssetType>(1, BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetType>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetType>.FromNative, GetPrimaryAssetsWithBundleState_ValidTypes_ElementSize);
            ValidTypes_Marshaler.ToNative(ValidTypes_NativeBuffer, 0, null, validTypes);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetPrimaryAssetsWithBundleState_bForceCurrentState_Offset), 0, null, bForceCurrentState);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPrimaryAssetsWithBundleState_NativeFunction, ParamsBuffer);
            
            IntPtr OutPrimaryAssetIdList_NativeBuffer = IntPtr.Add(ParamsBuffer, GetPrimaryAssetsWithBundleState_OutPrimaryAssetIdList_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.PrimaryAssetId> OutPrimaryAssetIdList_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.PrimaryAssetId> (1, BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetId>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetId>.FromNative, GetPrimaryAssetsWithBundleState_OutPrimaryAssetIdList_ElementSize);
            outPrimaryAssetIdList = OutPrimaryAssetIdList_Marshaler.FromNative(OutPrimaryAssetIdList_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.PrimaryAssetId>.DestructInstance(OutPrimaryAssetIdList_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetPrimaryAssetIdList
    static readonly IntPtr GetPrimaryAssetIdList_NativeFunction;
    static readonly int GetPrimaryAssetIdList_ParamsSize;
    static readonly int GetPrimaryAssetIdList_PrimaryAssetType_Offset;
    static readonly int GetPrimaryAssetIdList_OutPrimaryAssetIdList_Offset;
    static readonly int GetPrimaryAssetIdList_OutPrimaryAssetIdList_ElementSize;
    
    public static void GetPrimaryAssetIdList(UnrealSharp.CoreUObject.PrimaryAssetType primaryAssetType, out System.Collections.Generic.IList<UnrealSharp.CoreUObject.PrimaryAssetId> outPrimaryAssetIdList)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPrimaryAssetIdList_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetType>.ToNative(IntPtr.Add(ParamsBuffer, GetPrimaryAssetIdList_PrimaryAssetType_Offset), 0, null, primaryAssetType);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPrimaryAssetIdList_NativeFunction, ParamsBuffer);
            
            IntPtr OutPrimaryAssetIdList_NativeBuffer = IntPtr.Add(ParamsBuffer, GetPrimaryAssetIdList_OutPrimaryAssetIdList_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.PrimaryAssetId> OutPrimaryAssetIdList_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.PrimaryAssetId> (1, BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetId>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetId>.FromNative, GetPrimaryAssetIdList_OutPrimaryAssetIdList_ElementSize);
            outPrimaryAssetIdList = OutPrimaryAssetIdList_Marshaler.FromNative(OutPrimaryAssetIdList_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.PrimaryAssetId>.DestructInstance(OutPrimaryAssetIdList_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetPrimaryAssetIdFromSoftObjectReference
    static readonly IntPtr GetPrimaryAssetIdFromSoftObjectReference_NativeFunction;
    static readonly int GetPrimaryAssetIdFromSoftObjectReference_ParamsSize;
    static readonly int GetPrimaryAssetIdFromSoftObjectReference_SoftObjectReference_Offset;
    static readonly int GetPrimaryAssetIdFromSoftObjectReference_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.PrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(SoftObject<UnrealSharp.CoreUObject.Object> softObjectReference)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPrimaryAssetIdFromSoftObjectReference_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<SoftObject<UnrealSharp.CoreUObject.Object>>.ToNative(IntPtr.Add(ParamsBuffer, GetPrimaryAssetIdFromSoftObjectReference_SoftObjectReference_Offset), 0, null, softObjectReference);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPrimaryAssetIdFromSoftObjectReference_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.PrimaryAssetId returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetId>.FromNative(IntPtr.Add(ParamsBuffer, GetPrimaryAssetIdFromSoftObjectReference_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetPrimaryAssetIdFromObject
    static readonly IntPtr GetPrimaryAssetIdFromObject_NativeFunction;
    static readonly int GetPrimaryAssetIdFromObject_ParamsSize;
    static readonly int GetPrimaryAssetIdFromObject_Object_Offset;
    static readonly int GetPrimaryAssetIdFromObject_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.PrimaryAssetId GetPrimaryAssetIdFromObject(UnrealSharp.CoreUObject.Object @object)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPrimaryAssetIdFromObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetPrimaryAssetIdFromObject_Object_Offset), 0, null, @object);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPrimaryAssetIdFromObject_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.PrimaryAssetId returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetId>.FromNative(IntPtr.Add(ParamsBuffer, GetPrimaryAssetIdFromObject_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetPrimaryAssetIdFromClass
    static readonly IntPtr GetPrimaryAssetIdFromClass_NativeFunction;
    static readonly int GetPrimaryAssetIdFromClass_ParamsSize;
    static readonly int GetPrimaryAssetIdFromClass_Class_Offset;
    static readonly int GetPrimaryAssetIdFromClass_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.PrimaryAssetId GetPrimaryAssetIdFromClass(SubclassOf<UnrealSharp.CoreUObject.Object> @class)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPrimaryAssetIdFromClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetPrimaryAssetIdFromClass_Class_Offset), 0, null, @class);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPrimaryAssetIdFromClass_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.PrimaryAssetId returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetId>.FromNative(IntPtr.Add(ParamsBuffer, GetPrimaryAssetIdFromClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetPlatformUserName
    static readonly IntPtr GetPlatformUserName_NativeFunction;
    static readonly int GetPlatformUserName_ParamsSize;
    static readonly int GetPlatformUserName_ReturnValue_Offset;
    
    public static string GetPlatformUserName()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlatformUserName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlatformUserName_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetPlatformUserName_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetPlatformUserDir
    static readonly IntPtr GetPlatformUserDir_NativeFunction;
    static readonly int GetPlatformUserDir_ParamsSize;
    static readonly int GetPlatformUserDir_ReturnValue_Offset;
    
    public static string GetPlatformUserDir()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlatformUserDir_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlatformUserDir_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetPlatformUserDir_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetPlatformTime_Seconds
    static readonly IntPtr GetPlatformTime_Seconds_NativeFunction;
    static readonly int GetPlatformTime_Seconds_ParamsSize;
    static readonly int GetPlatformTime_Seconds_ReturnValue_Offset;
    
    public static double GetPlatformTime_Seconds()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlatformTime_Seconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlatformTime_Seconds_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, GetPlatformTime_Seconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetPathName
    static readonly IntPtr GetPathName_NativeFunction;
    static readonly int GetPathName_ParamsSize;
    static readonly int GetPathName_Object_Offset;
    static readonly int GetPathName_ReturnValue_Offset;
    
    public static string GetPathName(UnrealSharp.CoreUObject.Object @object)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPathName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetPathName_Object_Offset), 0, null, @object);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPathName_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetPathName_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetOuterObject
    static readonly IntPtr GetOuterObject_NativeFunction;
    static readonly int GetOuterObject_ParamsSize;
    static readonly int GetOuterObject_Object_Offset;
    static readonly int GetOuterObject_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Object GetOuterObject(UnrealSharp.CoreUObject.Object @object)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOuterObject_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetOuterObject_Object_Offset), 0, null, @object);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetOuterObject_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Object returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetOuterObject_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetObjectName
    static readonly IntPtr GetObjectName_NativeFunction;
    static readonly int GetObjectName_ParamsSize;
    static readonly int GetObjectName_Object_Offset;
    static readonly int GetObjectName_ReturnValue_Offset;
    
    public static string GetObjectName(UnrealSharp.CoreUObject.Object @object)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetObjectName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetObjectName_Object_Offset), 0, null, @object);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetObjectName_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetObjectName_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetObjectFromPrimaryAssetId
    static readonly IntPtr GetObjectFromPrimaryAssetId_NativeFunction;
    static readonly int GetObjectFromPrimaryAssetId_ParamsSize;
    static readonly int GetObjectFromPrimaryAssetId_PrimaryAssetId_Offset;
    static readonly int GetObjectFromPrimaryAssetId_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.Object GetObject(UnrealSharp.CoreUObject.PrimaryAssetId primaryAssetId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetObjectFromPrimaryAssetId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetId>.ToNative(IntPtr.Add(ParamsBuffer, GetObjectFromPrimaryAssetId_PrimaryAssetId_Offset), 0, null, primaryAssetId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetObjectFromPrimaryAssetId_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Object returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetObjectFromPrimaryAssetId_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetMinYResolutionForUI
    static readonly IntPtr GetMinYResolutionForUI_NativeFunction;
    static readonly int GetMinYResolutionForUI_ParamsSize;
    static readonly int GetMinYResolutionForUI_ReturnValue_Offset;
    
    public static int GetMinYResolutionForUI()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMinYResolutionForUI_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMinYResolutionForUI_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetMinYResolutionForUI_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetMinYResolutionFor3DView
    static readonly IntPtr GetMinYResolutionFor3DView_NativeFunction;
    static readonly int GetMinYResolutionFor3DView_ParamsSize;
    static readonly int GetMinYResolutionFor3DView_ReturnValue_Offset;
    
    public static int GetMinYResolutionFor3DView()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMinYResolutionFor3DView_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMinYResolutionFor3DView_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetMinYResolutionFor3DView_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetLocalCurrencySymbol
    static readonly IntPtr GetLocalCurrencySymbol_NativeFunction;
    static readonly int GetLocalCurrencySymbol_ParamsSize;
    static readonly int GetLocalCurrencySymbol_ReturnValue_Offset;
    
    public static string GetLocalCurrencySymbol()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalCurrencySymbol_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalCurrencySymbol_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetLocalCurrencySymbol_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetLocalCurrencyCode
    static readonly IntPtr GetLocalCurrencyCode_NativeFunction;
    static readonly int GetLocalCurrencyCode_ParamsSize;
    static readonly int GetLocalCurrencyCode_ReturnValue_Offset;
    
    public static string GetLocalCurrencyCode()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalCurrencyCode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocalCurrencyCode_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetLocalCurrencyCode_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetGameTimeInSeconds
    static readonly IntPtr GetGameTimeInSeconds_NativeFunction;
    static readonly int GetGameTimeInSeconds_ParamsSize;
    static readonly int GetGameTimeInSeconds_WorldContextObject_Offset;
    static readonly int GetGameTimeInSeconds_ReturnValue_Offset;
    
    public static double GetGameTimeInSeconds(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGameTimeInSeconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetGameTimeInSeconds_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetGameTimeInSeconds_NativeFunction, ParamsBuffer);
            
            double returnValue;
            returnValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, GetGameTimeInSeconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetGamepadControllerName
    static readonly IntPtr GetGamepadControllerName_NativeFunction;
    static readonly int GetGamepadControllerName_ParamsSize;
    static readonly int GetGamepadControllerName_ControllerId_Offset;
    static readonly int GetGamepadControllerName_ReturnValue_Offset;
    
    public static string GetGamepadControllerName(int controllerId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGamepadControllerName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetGamepadControllerName_ControllerId_Offset), 0, null, controllerId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetGamepadControllerName_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetGamepadControllerName_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetGamepadButtonGlyph
    static readonly IntPtr GetGamepadButtonGlyph_NativeFunction;
    static readonly int GetGamepadButtonGlyph_ParamsSize;
    static readonly int GetGamepadButtonGlyph_ButtonKey_Offset;
    static readonly int GetGamepadButtonGlyph_ControllerIndex_Offset;
    static readonly int GetGamepadButtonGlyph_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.Texture2D GetGamepadButtonGlyph(string buttonKey, int controllerIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGamepadButtonGlyph_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ButtonKey_NativePtr = IntPtr.Add(ParamsBuffer,GetGamepadButtonGlyph_ButtonKey_Offset);
            StringMarshaller.ToNative(ButtonKey_NativePtr,0,null,buttonKey);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetGamepadButtonGlyph_ControllerIndex_Offset), 0, null, controllerIndex);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetGamepadButtonGlyph_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Texture2D returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Texture2D>.FromNative(IntPtr.Add(ParamsBuffer, GetGamepadButtonGlyph_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ButtonKey_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetGameName
    static readonly IntPtr GetGameName_NativeFunction;
    static readonly int GetGameName_ParamsSize;
    static readonly int GetGameName_ReturnValue_Offset;
    
    public static string GetGameName()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGameName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetGameName_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetGameName_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetGameBundleId
    static readonly IntPtr GetGameBundleId_NativeFunction;
    static readonly int GetGameBundleId_ParamsSize;
    static readonly int GetGameBundleId_ReturnValue_Offset;
    
    public static string GetGameBundleId()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGameBundleId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetGameBundleId_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetGameBundleId_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetFrameCount
    static readonly IntPtr GetFrameCount_NativeFunction;
    static readonly int GetFrameCount_ParamsSize;
    static readonly int GetFrameCount_ReturnValue_Offset;
    
    public static long GetFrameCount()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFrameCount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetFrameCount_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, GetFrameCount_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetEnumTopLevelAssetPath
    static readonly IntPtr GetEnumTopLevelAssetPath_NativeFunction;
    static readonly int GetEnumTopLevelAssetPath_ParamsSize;
    static readonly int GetEnumTopLevelAssetPath_Enum_Offset;
    static readonly int GetEnumTopLevelAssetPath_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.TopLevelAssetPath GetEnumPathName(UnrealSharp.CoreUObject.Enum @enum)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEnumTopLevelAssetPath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Enum>.ToNative(IntPtr.Add(ParamsBuffer, GetEnumTopLevelAssetPath_Enum_Offset), 0, null, @enum);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetEnumTopLevelAssetPath_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.TopLevelAssetPath returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.TopLevelAssetPath>.FromNative(IntPtr.Add(ParamsBuffer, GetEnumTopLevelAssetPath_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetEngineVersion
    static readonly IntPtr GetEngineVersion_NativeFunction;
    static readonly int GetEngineVersion_ParamsSize;
    static readonly int GetEngineVersion_ReturnValue_Offset;
    
    public static string GetEngineVersion()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEngineVersion_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetEngineVersion_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetEngineVersion_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetDisplayName
    static readonly IntPtr GetDisplayName_NativeFunction;
    static readonly int GetDisplayName_ParamsSize;
    static readonly int GetDisplayName_Object_Offset;
    static readonly int GetDisplayName_ReturnValue_Offset;
    
    public static string GetDisplayName(UnrealSharp.CoreUObject.Object @object)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDisplayName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetDisplayName_Object_Offset), 0, null, @object);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetDisplayName_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetDisplayName_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetDeviceId
    static readonly IntPtr GetDeviceId_NativeFunction;
    static readonly int GetDeviceId_ParamsSize;
    static readonly int GetDeviceId_ReturnValue_Offset;
    
    public static string GetDeviceId()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDeviceId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetDeviceId_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetDeviceId_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetDefaultLocale
    static readonly IntPtr GetDefaultLocale_NativeFunction;
    static readonly int GetDefaultLocale_ParamsSize;
    static readonly int GetDefaultLocale_ReturnValue_Offset;
    
    public static string GetDefaultLocale()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDefaultLocale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetDefaultLocale_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetDefaultLocale_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetDefaultLanguage
    static readonly IntPtr GetDefaultLanguage_NativeFunction;
    static readonly int GetDefaultLanguage_ParamsSize;
    static readonly int GetDefaultLanguage_ReturnValue_Offset;
    
    public static string GetDefaultLanguage()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDefaultLanguage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetDefaultLanguage_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetDefaultLanguage_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetCurrentBundleState
    static readonly IntPtr GetCurrentBundleState_NativeFunction;
    static readonly int GetCurrentBundleState_ParamsSize;
    static readonly int GetCurrentBundleState_PrimaryAssetId_Offset;
    static readonly int GetCurrentBundleState_bForceCurrentState_Offset;
    static readonly int GetCurrentBundleState_OutBundles_Offset;
    static readonly int GetCurrentBundleState_OutBundles_ElementSize;
    static readonly int GetCurrentBundleState_ReturnValue_Offset;
    
    public static bool GetCurrentBundleState(UnrealSharp.CoreUObject.PrimaryAssetId primaryAssetId, bool bForceCurrentState, out System.Collections.Generic.IList<Name> outBundles)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentBundleState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetId>.ToNative(IntPtr.Add(ParamsBuffer, GetCurrentBundleState_PrimaryAssetId_Offset), 0, null, primaryAssetId);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetCurrentBundleState_bForceCurrentState_Offset), 0, null, bForceCurrentState);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetCurrentBundleState_NativeFunction, ParamsBuffer);
            
            IntPtr OutBundles_NativeBuffer = IntPtr.Add(ParamsBuffer, GetCurrentBundleState_OutBundles_Offset);
            UnrealArrayCopyMarshaler<Name> OutBundles_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetCurrentBundleState_OutBundles_ElementSize);
            outBundles = OutBundles_Marshaler.FromNative(OutBundles_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(OutBundles_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentBundleState_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetConvenientWindowedResolutions
    static readonly IntPtr GetConvenientWindowedResolutions_NativeFunction;
    static readonly int GetConvenientWindowedResolutions_ParamsSize;
    static readonly int GetConvenientWindowedResolutions_Resolutions_Offset;
    static readonly int GetConvenientWindowedResolutions_Resolutions_ElementSize;
    static readonly int GetConvenientWindowedResolutions_ReturnValue_Offset;
    
    public static bool GetConvenientWindowedResolutions(out System.Collections.Generic.IList<UnrealSharp.CoreUObject.IntPoint> resolutions)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetConvenientWindowedResolutions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetConvenientWindowedResolutions_NativeFunction, ParamsBuffer);
            
            IntPtr Resolutions_NativeBuffer = IntPtr.Add(ParamsBuffer, GetConvenientWindowedResolutions_Resolutions_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.IntPoint> Resolutions_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.IntPoint> (1, BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative, GetConvenientWindowedResolutions_Resolutions_ElementSize);
            resolutions = Resolutions_Marshaler.FromNative(Resolutions_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.IntPoint>.DestructInstance(Resolutions_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetConvenientWindowedResolutions_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetConsoleVariableStringValue
    static readonly IntPtr GetConsoleVariableStringValue_NativeFunction;
    static readonly int GetConsoleVariableStringValue_ParamsSize;
    static readonly int GetConsoleVariableStringValue_VariableName_Offset;
    static readonly int GetConsoleVariableStringValue_ReturnValue_Offset;
    
    public static string GetConsoleVariableStringValue(string variableName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetConsoleVariableStringValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr VariableName_NativePtr = IntPtr.Add(ParamsBuffer,GetConsoleVariableStringValue_VariableName_Offset);
            StringMarshaller.ToNative(VariableName_NativePtr,0,null,variableName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetConsoleVariableStringValue_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetConsoleVariableStringValue_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(VariableName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetConsoleVariableIntValue
    static readonly IntPtr GetConsoleVariableIntValue_NativeFunction;
    static readonly int GetConsoleVariableIntValue_ParamsSize;
    static readonly int GetConsoleVariableIntValue_VariableName_Offset;
    static readonly int GetConsoleVariableIntValue_ReturnValue_Offset;
    
    public static int GetConsoleVariableIntValue(string variableName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetConsoleVariableIntValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr VariableName_NativePtr = IntPtr.Add(ParamsBuffer,GetConsoleVariableIntValue_VariableName_Offset);
            StringMarshaller.ToNative(VariableName_NativePtr,0,null,variableName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetConsoleVariableIntValue_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetConsoleVariableIntValue_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(VariableName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetConsoleVariableFloatValue
    static readonly IntPtr GetConsoleVariableFloatValue_NativeFunction;
    static readonly int GetConsoleVariableFloatValue_ParamsSize;
    static readonly int GetConsoleVariableFloatValue_VariableName_Offset;
    static readonly int GetConsoleVariableFloatValue_ReturnValue_Offset;
    
    public static float GetConsoleVariableFloatValue(string variableName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetConsoleVariableFloatValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr VariableName_NativePtr = IntPtr.Add(ParamsBuffer,GetConsoleVariableFloatValue_VariableName_Offset);
            StringMarshaller.ToNative(VariableName_NativePtr,0,null,variableName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetConsoleVariableFloatValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetConsoleVariableFloatValue_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(VariableName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetConsoleVariableBoolValue
    static readonly IntPtr GetConsoleVariableBoolValue_NativeFunction;
    static readonly int GetConsoleVariableBoolValue_ParamsSize;
    static readonly int GetConsoleVariableBoolValue_VariableName_Offset;
    static readonly int GetConsoleVariableBoolValue_ReturnValue_Offset;
    
    public static bool GetConsoleVariableBoolValue(string variableName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetConsoleVariableBoolValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr VariableName_NativePtr = IntPtr.Add(ParamsBuffer,GetConsoleVariableBoolValue_VariableName_Offset);
            StringMarshaller.ToNative(VariableName_NativePtr,0,null,variableName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetConsoleVariableBoolValue_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetConsoleVariableBoolValue_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(VariableName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetComponentBounds
    static readonly IntPtr GetComponentBounds_NativeFunction;
    static readonly int GetComponentBounds_ParamsSize;
    static readonly int GetComponentBounds_Component_Offset;
    static readonly int GetComponentBounds_Origin_Offset;
    static readonly int GetComponentBounds_BoxExtent_Offset;
    static readonly int GetComponentBounds_SphereRadius_Offset;
    
    public static void GetComponentBounds(UnrealSharp.Engine.SceneComponent component, out System.DoubleNumerics.Vector3 origin, out System.DoubleNumerics.Vector3 boxExtent, out float sphereRadius)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetComponentBounds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.ToNative(IntPtr.Add(ParamsBuffer, GetComponentBounds_Component_Offset), 0, null, component);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetComponentBounds_NativeFunction, ParamsBuffer);
            
            origin = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetComponentBounds_Origin_Offset), 0, null);
            boxExtent = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetComponentBounds_BoxExtent_Offset), 0, null);
            sphereRadius = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetComponentBounds_SphereRadius_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetCommandLine
    static readonly IntPtr GetCommandLine_NativeFunction;
    static readonly int GetCommandLine_ParamsSize;
    static readonly int GetCommandLine_ReturnValue_Offset;
    
    public static string GetCommandLine()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCommandLine_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetCommandLine_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetCommandLine_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetClassTopLevelAssetPath
    static readonly IntPtr GetClassTopLevelAssetPath_NativeFunction;
    static readonly int GetClassTopLevelAssetPath_ParamsSize;
    static readonly int GetClassTopLevelAssetPath_Class_Offset;
    static readonly int GetClassTopLevelAssetPath_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.TopLevelAssetPath GetClassPathName(SubclassOf<UnrealSharp.CoreUObject.Object> @class)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetClassTopLevelAssetPath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetClassTopLevelAssetPath_Class_Offset), 0, null, @class);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetClassTopLevelAssetPath_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.TopLevelAssetPath returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.TopLevelAssetPath>.FromNative(IntPtr.Add(ParamsBuffer, GetClassTopLevelAssetPath_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetClassFromPrimaryAssetId
    static readonly IntPtr GetClassFromPrimaryAssetId_NativeFunction;
    static readonly int GetClassFromPrimaryAssetId_ParamsSize;
    static readonly int GetClassFromPrimaryAssetId_PrimaryAssetId_Offset;
    static readonly int GetClassFromPrimaryAssetId_ReturnValue_Offset;
    
    public static SubclassOf<UnrealSharp.CoreUObject.Object> GetClass(UnrealSharp.CoreUObject.PrimaryAssetId primaryAssetId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetClassFromPrimaryAssetId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetId>.ToNative(IntPtr.Add(ParamsBuffer, GetClassFromPrimaryAssetId_PrimaryAssetId_Offset), 0, null, primaryAssetId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetClassFromPrimaryAssetId_NativeFunction, ParamsBuffer);
            
            SubclassOf<UnrealSharp.CoreUObject.Object> returnValue;
            returnValue = SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetClassFromPrimaryAssetId_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetClassDisplayName
    static readonly IntPtr GetClassDisplayName_NativeFunction;
    static readonly int GetClassDisplayName_ParamsSize;
    static readonly int GetClassDisplayName_Class_Offset;
    static readonly int GetClassDisplayName_ReturnValue_Offset;
    
    public static string GetClassDisplayName(SubclassOf<UnrealSharp.CoreUObject.Object> @class)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetClassDisplayName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetClassDisplayName_Class_Offset), 0, null, @class);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetClassDisplayName_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetClassDisplayName_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetBuildVersion
    static readonly IntPtr GetBuildVersion_NativeFunction;
    static readonly int GetBuildVersion_ParamsSize;
    static readonly int GetBuildVersion_ReturnValue_Offset;
    
    public static string GetBuildVersion()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBuildVersion_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetBuildVersion_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetBuildVersion_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetBuildConfiguration
    static readonly IntPtr GetBuildConfiguration_NativeFunction;
    static readonly int GetBuildConfiguration_ParamsSize;
    static readonly int GetBuildConfiguration_ReturnValue_Offset;
    
    public static string GetBuildConfiguration()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBuildConfiguration_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetBuildConfiguration_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetBuildConfiguration_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetAdIDCount
    static readonly IntPtr GetAdIDCount_NativeFunction;
    static readonly int GetAdIDCount_ParamsSize;
    static readonly int GetAdIDCount_ReturnValue_Offset;
    
    public static int GetAdIDCount()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAdIDCount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetAdIDCount_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetAdIDCount_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetActorListFromComponentList
    static readonly IntPtr GetActorListFromComponentList_NativeFunction;
    static readonly int GetActorListFromComponentList_ParamsSize;
    static readonly int GetActorListFromComponentList_ComponentList_Offset;
    static readonly int GetActorListFromComponentList_ComponentList_ElementSize;
    static readonly int GetActorListFromComponentList_ActorClassFilter_Offset;
    static readonly int GetActorListFromComponentList_OutActorList_Offset;
    static readonly int GetActorListFromComponentList_OutActorList_ElementSize;
    
    public static void GetActorListFromComponentList(System.Collections.Generic.IList<UnrealSharp.Engine.PrimitiveComponent> componentList, SubclassOf<UnrealSharp.CoreUObject.Object> actorClassFilter, out System.Collections.Generic.IList<UnrealSharp.Engine.Actor> outActorList)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActorListFromComponentList_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ComponentList_NativeBuffer = IntPtr.Add(ParamsBuffer, GetActorListFromComponentList_ComponentList_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent> ComponentList_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent>(1, ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative, ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.FromNative, GetActorListFromComponentList_ComponentList_ElementSize);
            ComponentList_Marshaler.ToNative(ComponentList_NativeBuffer, 0, null, componentList);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetActorListFromComponentList_ActorClassFilter_Offset), 0, null, actorClassFilter);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetActorListFromComponentList_NativeFunction, ParamsBuffer);
            
            IntPtr OutActorList_NativeBuffer = IntPtr.Add(ParamsBuffer, GetActorListFromComponentList_OutActorList_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> OutActorList_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, GetActorListFromComponentList_OutActorList_ElementSize);
            outActorList = OutActorList_Marshaler.FromNative(OutActorList_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(OutActorList_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:GetActorBounds
    static readonly IntPtr GetActorBounds_NativeFunction;
    static readonly int GetActorBounds_ParamsSize;
    static readonly int GetActorBounds_Actor_Offset;
    static readonly int GetActorBounds_Origin_Offset;
    static readonly int GetActorBounds_BoxExtent_Offset;
    
    [Obsolete("This function is obsolete")]
    public static void GetActorBounds(UnrealSharp.Engine.Actor actor, out System.DoubleNumerics.Vector3 origin, out System.DoubleNumerics.Vector3 boxExtent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetActorBounds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, GetActorBounds_Actor_Offset), 0, null, actor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetActorBounds_NativeFunction, ParamsBuffer);
            
            origin = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetActorBounds_Origin_Offset), 0, null);
            boxExtent = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetActorBounds_BoxExtent_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:ForceCloseAdBanner
    static readonly IntPtr ForceCloseAdBanner_NativeFunction;
    
    public static void ForceCloseAdBanner()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ForceCloseAdBanner_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:FlushPersistentDebugLines
    static readonly IntPtr FlushPersistentDebugLines_NativeFunction;
    static readonly int FlushPersistentDebugLines_ParamsSize;
    static readonly int FlushPersistentDebugLines_WorldContextObject_Offset;
    
    public static void FlushPersistentDebugLines(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FlushPersistentDebugLines_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, FlushPersistentDebugLines_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FlushPersistentDebugLines_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:FlushDebugStrings
    static readonly IntPtr FlushDebugStrings_NativeFunction;
    static readonly int FlushDebugStrings_ParamsSize;
    static readonly int FlushDebugStrings_WorldContextObject_Offset;
    
    public static void FlushDebugStrings(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FlushDebugStrings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, FlushDebugStrings_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FlushDebugStrings_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:ExecuteConsoleCommand
    static readonly IntPtr ExecuteConsoleCommand_NativeFunction;
    static readonly int ExecuteConsoleCommand_ParamsSize;
    static readonly int ExecuteConsoleCommand_WorldContextObject_Offset;
    static readonly int ExecuteConsoleCommand_Command_Offset;
    static readonly int ExecuteConsoleCommand_SpecificPlayer_Offset;
    
    public static void ExecuteConsoleCommand(UnrealSharp.CoreUObject.Object worldContextObject, string command, UnrealSharp.Engine.PlayerController specificPlayer = default(UnrealSharp.Engine.PlayerController))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ExecuteConsoleCommand_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ExecuteConsoleCommand_WorldContextObject_Offset), 0, null, worldContextObject);
            IntPtr Command_NativePtr = IntPtr.Add(ParamsBuffer,ExecuteConsoleCommand_Command_Offset);
            StringMarshaller.ToNative(Command_NativePtr,0,null,command);
            ObjectMarshaller<UnrealSharp.Engine.PlayerController>.ToNative(IntPtr.Add(ParamsBuffer, ExecuteConsoleCommand_SpecificPlayer_Offset), 0, null, specificPlayer);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ExecuteConsoleCommand_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Command_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:EqualEqual_SoftObjectReference
    static readonly IntPtr EqualEqual_SoftObjectReference_NativeFunction;
    static readonly int EqualEqual_SoftObjectReference_ParamsSize;
    static readonly int EqualEqual_SoftObjectReference_A_Offset;
    static readonly int EqualEqual_SoftObjectReference_B_Offset;
    static readonly int EqualEqual_SoftObjectReference_ReturnValue_Offset;
    
    public static bool EqualEqual_SoftObjectReference(SoftObject<UnrealSharp.CoreUObject.Object> a, SoftObject<UnrealSharp.CoreUObject.Object> b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_SoftObjectReference_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<SoftObject<UnrealSharp.CoreUObject.Object>>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_SoftObjectReference_A_Offset), 0, null, a);
            BlittableMarshaller<SoftObject<UnrealSharp.CoreUObject.Object>>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_SoftObjectReference_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_SoftObjectReference_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_SoftObjectReference_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:EqualEqual_PrimaryAssetType
    static readonly IntPtr EqualEqual_PrimaryAssetType_NativeFunction;
    static readonly int EqualEqual_PrimaryAssetType_ParamsSize;
    static readonly int EqualEqual_PrimaryAssetType_A_Offset;
    static readonly int EqualEqual_PrimaryAssetType_B_Offset;
    static readonly int EqualEqual_PrimaryAssetType_ReturnValue_Offset;
    
    public static bool EqualEqual_PrimaryAssetType(UnrealSharp.CoreUObject.PrimaryAssetType a, UnrealSharp.CoreUObject.PrimaryAssetType b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_PrimaryAssetType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetType>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_PrimaryAssetType_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetType>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_PrimaryAssetType_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_PrimaryAssetType_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_PrimaryAssetType_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:EqualEqual_PrimaryAssetId
    static readonly IntPtr EqualEqual_PrimaryAssetId_NativeFunction;
    static readonly int EqualEqual_PrimaryAssetId_ParamsSize;
    static readonly int EqualEqual_PrimaryAssetId_A_Offset;
    static readonly int EqualEqual_PrimaryAssetId_B_Offset;
    static readonly int EqualEqual_PrimaryAssetId_ReturnValue_Offset;
    
    public static bool EqualEqual_PrimaryAssetId(UnrealSharp.CoreUObject.PrimaryAssetId a, UnrealSharp.CoreUObject.PrimaryAssetId b)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EqualEqual_PrimaryAssetId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetId>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_PrimaryAssetId_A_Offset), 0, null, a);
            BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetId>.ToNative(IntPtr.Add(ParamsBuffer, EqualEqual_PrimaryAssetId_B_Offset), 0, null, b);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EqualEqual_PrimaryAssetId_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, EqualEqual_PrimaryAssetId_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:EndTransaction
    static readonly IntPtr EndTransaction_NativeFunction;
    static readonly int EndTransaction_ParamsSize;
    static readonly int EndTransaction_ReturnValue_Offset;
    
    public static int EndTransaction()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EndTransaction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EndTransaction_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, EndTransaction_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:DrawDebugString
    static readonly IntPtr DrawDebugString_NativeFunction;
    static readonly int DrawDebugString_ParamsSize;
    static readonly int DrawDebugString_WorldContextObject_Offset;
    static readonly int DrawDebugString_TextLocation_Offset;
    static readonly int DrawDebugString_Text_Offset;
    static readonly int DrawDebugString_TestBaseActor_Offset;
    static readonly int DrawDebugString_TextColor_Offset;
    static readonly int DrawDebugString_Duration_Offset;
    
    public static void DrawDebugString(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 textLocation, string text, UnrealSharp.Engine.Actor testBaseActor = default(UnrealSharp.Engine.Actor))
    {
        UnrealSharp.CoreUObject.LinearColor textColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawDebugString(worldContextObject, textLocation, text, testBaseActor, textColor);
    }
    
    public static void DrawDebugString(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 textLocation, string text, UnrealSharp.Engine.Actor testBaseActor, UnrealSharp.CoreUObject.LinearColor textColor, float duration = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawDebugString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugString_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugString_TextLocation_Offset), 0, null, textLocation);
            IntPtr Text_NativePtr = IntPtr.Add(ParamsBuffer,DrawDebugString_Text_Offset);
            StringMarshaller.ToNative(Text_NativePtr,0,null,text);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugString_TestBaseActor_Offset), 0, null, testBaseActor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugString_TextColor_Offset), 0, null, textColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugString_Duration_Offset), 0, null, duration);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawDebugString_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Text_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:DrawDebugSphere
    static readonly IntPtr DrawDebugSphere_NativeFunction;
    static readonly int DrawDebugSphere_ParamsSize;
    static readonly int DrawDebugSphere_WorldContextObject_Offset;
    static readonly int DrawDebugSphere_Center_Offset;
    static readonly int DrawDebugSphere_Radius_Offset;
    static readonly int DrawDebugSphere_Segments_Offset;
    static readonly int DrawDebugSphere_LineColor_Offset;
    static readonly int DrawDebugSphere_Duration_Offset;
    static readonly int DrawDebugSphere_Thickness_Offset;
    
    public static void DrawDebugSphere(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 center, float radius = 100.000000f, int segments = 12)
    {
        UnrealSharp.CoreUObject.LinearColor lineColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawDebugSphere(worldContextObject, center, radius, segments, lineColor);
    }
    
    public static void DrawDebugSphere(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 center, float radius, int segments, UnrealSharp.CoreUObject.LinearColor lineColor, float duration = 0.000000f, float thickness = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawDebugSphere_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugSphere_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugSphere_Center_Offset), 0, null, center);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugSphere_Radius_Offset), 0, null, radius);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugSphere_Segments_Offset), 0, null, segments);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugSphere_LineColor_Offset), 0, null, lineColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugSphere_Duration_Offset), 0, null, duration);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugSphere_Thickness_Offset), 0, null, thickness);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawDebugSphere_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:DrawDebugPoint
    static readonly IntPtr DrawDebugPoint_NativeFunction;
    static readonly int DrawDebugPoint_ParamsSize;
    static readonly int DrawDebugPoint_WorldContextObject_Offset;
    static readonly int DrawDebugPoint_Position_Offset;
    static readonly int DrawDebugPoint_Size_Offset;
    static readonly int DrawDebugPoint_PointColor_Offset;
    static readonly int DrawDebugPoint_Duration_Offset;
    
    public static void DrawDebugPoint(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 position, float size, UnrealSharp.CoreUObject.LinearColor pointColor, float duration = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawDebugPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugPoint_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugPoint_Position_Offset), 0, null, position);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugPoint_Size_Offset), 0, null, size);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugPoint_PointColor_Offset), 0, null, pointColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugPoint_Duration_Offset), 0, null, duration);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawDebugPoint_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:DrawDebugPlane
    static readonly IntPtr DrawDebugPlane_NativeFunction;
    static readonly int DrawDebugPlane_ParamsSize;
    static readonly int DrawDebugPlane_WorldContextObject_Offset;
    static readonly int DrawDebugPlane_PlaneCoordinates_Offset;
    static readonly int DrawDebugPlane_Location_Offset;
    static readonly int DrawDebugPlane_Size_Offset;
    static readonly int DrawDebugPlane_PlaneColor_Offset;
    static readonly int DrawDebugPlane_Duration_Offset;
    
    public static void DrawDebugPlane(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.CoreUObject.Plane planeCoordinates, System.DoubleNumerics.Vector3 location, float size)
    {
        UnrealSharp.CoreUObject.LinearColor planeColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawDebugPlane(worldContextObject, planeCoordinates, location, size, planeColor);
    }
    
    public static void DrawDebugPlane(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.CoreUObject.Plane planeCoordinates, System.DoubleNumerics.Vector3 location, float size, UnrealSharp.CoreUObject.LinearColor planeColor, float duration = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawDebugPlane_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugPlane_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<UnrealSharp.CoreUObject.Plane>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugPlane_PlaneCoordinates_Offset), 0, null, planeCoordinates);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugPlane_Location_Offset), 0, null, location);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugPlane_Size_Offset), 0, null, size);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugPlane_PlaneColor_Offset), 0, null, planeColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugPlane_Duration_Offset), 0, null, duration);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawDebugPlane_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:DrawDebugLine
    static readonly IntPtr DrawDebugLine_NativeFunction;
    static readonly int DrawDebugLine_ParamsSize;
    static readonly int DrawDebugLine_WorldContextObject_Offset;
    static readonly int DrawDebugLine_LineStart_Offset;
    static readonly int DrawDebugLine_LineEnd_Offset;
    static readonly int DrawDebugLine_LineColor_Offset;
    static readonly int DrawDebugLine_Duration_Offset;
    static readonly int DrawDebugLine_Thickness_Offset;
    
    public static void DrawDebugLine(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 lineStart, System.DoubleNumerics.Vector3 lineEnd, UnrealSharp.CoreUObject.LinearColor lineColor, float duration = 0.000000f, float thickness = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawDebugLine_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugLine_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugLine_LineStart_Offset), 0, null, lineStart);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugLine_LineEnd_Offset), 0, null, lineEnd);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugLine_LineColor_Offset), 0, null, lineColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugLine_Duration_Offset), 0, null, duration);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugLine_Thickness_Offset), 0, null, thickness);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawDebugLine_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:DrawDebugFrustum
    static readonly IntPtr DrawDebugFrustum_NativeFunction;
    static readonly int DrawDebugFrustum_ParamsSize;
    static readonly int DrawDebugFrustum_WorldContextObject_Offset;
    static readonly int DrawDebugFrustum_FrustumTransform_Offset;
    static readonly int DrawDebugFrustum_FrustumColor_Offset;
    static readonly int DrawDebugFrustum_Duration_Offset;
    static readonly int DrawDebugFrustum_Thickness_Offset;
    
    public static void DrawDebugFrustum(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Transform frustumTransform)
    {
        UnrealSharp.CoreUObject.LinearColor frustumColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawDebugFrustum(worldContextObject, frustumTransform, frustumColor);
    }
    
    public static void DrawDebugFrustum(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Transform frustumTransform, UnrealSharp.CoreUObject.LinearColor frustumColor, float duration = 0.000000f, float thickness = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawDebugFrustum_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugFrustum_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugFrustum_FrustumTransform_Offset), 0, null, frustumTransform);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugFrustum_FrustumColor_Offset), 0, null, frustumColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugFrustum_Duration_Offset), 0, null, duration);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugFrustum_Thickness_Offset), 0, null, thickness);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawDebugFrustum_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:DrawDebugFloatHistoryTransform
    static readonly IntPtr DrawDebugFloatHistoryTransform_NativeFunction;
    static readonly int DrawDebugFloatHistoryTransform_ParamsSize;
    static readonly int DrawDebugFloatHistoryTransform_WorldContextObject_Offset;
    static readonly int DrawDebugFloatHistoryTransform_FloatHistory_Offset;
    static readonly int DrawDebugFloatHistoryTransform_DrawTransform_Offset;
    static readonly int DrawDebugFloatHistoryTransform_DrawSize_Offset;
    static readonly int DrawDebugFloatHistoryTransform_DrawColor_Offset;
    static readonly int DrawDebugFloatHistoryTransform_Duration_Offset;
    
    public static void DrawDebugFloatHistoryTransform(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.DebugFloatHistory floatHistory, UnrealSharp.Transform drawTransform, System.DoubleNumerics.Vector2 drawSize)
    {
        UnrealSharp.CoreUObject.LinearColor drawColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawDebugFloatHistoryTransform(worldContextObject, floatHistory, drawTransform, drawSize, drawColor);
    }
    
    public static void DrawDebugFloatHistoryTransform(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.DebugFloatHistory floatHistory, UnrealSharp.Transform drawTransform, System.DoubleNumerics.Vector2 drawSize, UnrealSharp.CoreUObject.LinearColor drawColor, float duration = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawDebugFloatHistoryTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugFloatHistoryTransform_WorldContextObject_Offset), 0, null, worldContextObject);
            UnrealSharp.Engine.DebugFloatHistoryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugFloatHistoryTransform_FloatHistory_Offset), 0, null, floatHistory);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugFloatHistoryTransform_DrawTransform_Offset), 0, null, drawTransform);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugFloatHistoryTransform_DrawSize_Offset), 0, null, drawSize);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugFloatHistoryTransform_DrawColor_Offset), 0, null, drawColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugFloatHistoryTransform_Duration_Offset), 0, null, duration);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawDebugFloatHistoryTransform_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:DrawDebugFloatHistoryLocation
    static readonly IntPtr DrawDebugFloatHistoryLocation_NativeFunction;
    static readonly int DrawDebugFloatHistoryLocation_ParamsSize;
    static readonly int DrawDebugFloatHistoryLocation_WorldContextObject_Offset;
    static readonly int DrawDebugFloatHistoryLocation_FloatHistory_Offset;
    static readonly int DrawDebugFloatHistoryLocation_DrawLocation_Offset;
    static readonly int DrawDebugFloatHistoryLocation_DrawSize_Offset;
    static readonly int DrawDebugFloatHistoryLocation_DrawColor_Offset;
    static readonly int DrawDebugFloatHistoryLocation_Duration_Offset;
    
    public static void DrawDebugFloatHistoryLocation(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.DebugFloatHistory floatHistory, System.DoubleNumerics.Vector3 drawLocation, System.DoubleNumerics.Vector2 drawSize)
    {
        UnrealSharp.CoreUObject.LinearColor drawColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawDebugFloatHistoryLocation(worldContextObject, floatHistory, drawLocation, drawSize, drawColor);
    }
    
    public static void DrawDebugFloatHistoryLocation(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.DebugFloatHistory floatHistory, System.DoubleNumerics.Vector3 drawLocation, System.DoubleNumerics.Vector2 drawSize, UnrealSharp.CoreUObject.LinearColor drawColor, float duration = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawDebugFloatHistoryLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugFloatHistoryLocation_WorldContextObject_Offset), 0, null, worldContextObject);
            UnrealSharp.Engine.DebugFloatHistoryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugFloatHistoryLocation_FloatHistory_Offset), 0, null, floatHistory);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugFloatHistoryLocation_DrawLocation_Offset), 0, null, drawLocation);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugFloatHistoryLocation_DrawSize_Offset), 0, null, drawSize);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugFloatHistoryLocation_DrawColor_Offset), 0, null, drawColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugFloatHistoryLocation_Duration_Offset), 0, null, duration);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawDebugFloatHistoryLocation_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:DrawDebugCylinder
    static readonly IntPtr DrawDebugCylinder_NativeFunction;
    static readonly int DrawDebugCylinder_ParamsSize;
    static readonly int DrawDebugCylinder_WorldContextObject_Offset;
    static readonly int DrawDebugCylinder_Start_Offset;
    static readonly int DrawDebugCylinder_End_Offset;
    static readonly int DrawDebugCylinder_Radius_Offset;
    static readonly int DrawDebugCylinder_Segments_Offset;
    static readonly int DrawDebugCylinder_LineColor_Offset;
    static readonly int DrawDebugCylinder_Duration_Offset;
    static readonly int DrawDebugCylinder_Thickness_Offset;
    
    public static void DrawDebugCylinder(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius = 100.000000f, int segments = 12)
    {
        UnrealSharp.CoreUObject.LinearColor lineColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawDebugCylinder(worldContextObject, start, end, radius, segments, lineColor);
    }
    
    public static void DrawDebugCylinder(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, int segments, UnrealSharp.CoreUObject.LinearColor lineColor, float duration = 0.000000f, float thickness = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawDebugCylinder_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCylinder_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCylinder_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCylinder_End_Offset), 0, null, end);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCylinder_Radius_Offset), 0, null, radius);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCylinder_Segments_Offset), 0, null, segments);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCylinder_LineColor_Offset), 0, null, lineColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCylinder_Duration_Offset), 0, null, duration);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCylinder_Thickness_Offset), 0, null, thickness);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawDebugCylinder_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:DrawDebugCoordinateSystem
    static readonly IntPtr DrawDebugCoordinateSystem_NativeFunction;
    static readonly int DrawDebugCoordinateSystem_ParamsSize;
    static readonly int DrawDebugCoordinateSystem_WorldContextObject_Offset;
    static readonly int DrawDebugCoordinateSystem_AxisLoc_Offset;
    static readonly int DrawDebugCoordinateSystem_AxisRot_Offset;
    static readonly int DrawDebugCoordinateSystem_Scale_Offset;
    static readonly int DrawDebugCoordinateSystem_Duration_Offset;
    static readonly int DrawDebugCoordinateSystem_Thickness_Offset;
    
    public static void DrawDebugCoordinateSystem(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 axisLoc, UnrealSharp.Rotator axisRot, float scale = 1.000000f, float duration = 0.000000f, float thickness = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawDebugCoordinateSystem_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCoordinateSystem_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCoordinateSystem_AxisLoc_Offset), 0, null, axisLoc);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCoordinateSystem_AxisRot_Offset), 0, null, axisRot);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCoordinateSystem_Scale_Offset), 0, null, scale);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCoordinateSystem_Duration_Offset), 0, null, duration);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCoordinateSystem_Thickness_Offset), 0, null, thickness);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawDebugCoordinateSystem_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:DrawDebugConeInDegrees
    static readonly IntPtr DrawDebugConeInDegrees_NativeFunction;
    static readonly int DrawDebugConeInDegrees_ParamsSize;
    static readonly int DrawDebugConeInDegrees_WorldContextObject_Offset;
    static readonly int DrawDebugConeInDegrees_Origin_Offset;
    static readonly int DrawDebugConeInDegrees_Direction_Offset;
    static readonly int DrawDebugConeInDegrees_Length_Offset;
    static readonly int DrawDebugConeInDegrees_AngleWidth_Offset;
    static readonly int DrawDebugConeInDegrees_AngleHeight_Offset;
    static readonly int DrawDebugConeInDegrees_NumSides_Offset;
    static readonly int DrawDebugConeInDegrees_LineColor_Offset;
    static readonly int DrawDebugConeInDegrees_Duration_Offset;
    static readonly int DrawDebugConeInDegrees_Thickness_Offset;
    
    public static void DrawDebugConeInDegrees(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 origin, System.DoubleNumerics.Vector3 direction, float length = 100.000000f, float angleWidth = 45.000000f, float angleHeight = 45.000000f, int numSides = 12)
    {
        UnrealSharp.CoreUObject.LinearColor lineColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawDebugConeInDegrees(worldContextObject, origin, direction, length, angleWidth, angleHeight, numSides, lineColor);
    }
    
    public static void DrawDebugConeInDegrees(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 origin, System.DoubleNumerics.Vector3 direction, float length, float angleWidth, float angleHeight, int numSides, UnrealSharp.CoreUObject.LinearColor lineColor, float duration = 0.000000f, float thickness = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawDebugConeInDegrees_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugConeInDegrees_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugConeInDegrees_Origin_Offset), 0, null, origin);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugConeInDegrees_Direction_Offset), 0, null, direction);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugConeInDegrees_Length_Offset), 0, null, length);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugConeInDegrees_AngleWidth_Offset), 0, null, angleWidth);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugConeInDegrees_AngleHeight_Offset), 0, null, angleHeight);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugConeInDegrees_NumSides_Offset), 0, null, numSides);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugConeInDegrees_LineColor_Offset), 0, null, lineColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugConeInDegrees_Duration_Offset), 0, null, duration);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugConeInDegrees_Thickness_Offset), 0, null, thickness);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawDebugConeInDegrees_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:DrawDebugCone
    static readonly IntPtr DrawDebugCone_NativeFunction;
    static readonly int DrawDebugCone_ParamsSize;
    static readonly int DrawDebugCone_WorldContextObject_Offset;
    static readonly int DrawDebugCone_Origin_Offset;
    static readonly int DrawDebugCone_Direction_Offset;
    static readonly int DrawDebugCone_Length_Offset;
    static readonly int DrawDebugCone_AngleWidth_Offset;
    static readonly int DrawDebugCone_AngleHeight_Offset;
    static readonly int DrawDebugCone_NumSides_Offset;
    static readonly int DrawDebugCone_LineColor_Offset;
    static readonly int DrawDebugCone_Duration_Offset;
    static readonly int DrawDebugCone_Thickness_Offset;
    
    [Obsolete("DrawDebugCone has been changed to use degrees for angles instead of radians. Place a new DrawDebugCone node and pass your angles as degrees.")]
    public static void DrawDebugCone(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 origin, System.DoubleNumerics.Vector3 direction, float length, float angleWidth, float angleHeight, int numSides, UnrealSharp.CoreUObject.LinearColor lineColor, float duration = 0.000000f, float thickness = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawDebugCone_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCone_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCone_Origin_Offset), 0, null, origin);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCone_Direction_Offset), 0, null, direction);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCone_Length_Offset), 0, null, length);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCone_AngleWidth_Offset), 0, null, angleWidth);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCone_AngleHeight_Offset), 0, null, angleHeight);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCone_NumSides_Offset), 0, null, numSides);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCone_LineColor_Offset), 0, null, lineColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCone_Duration_Offset), 0, null, duration);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCone_Thickness_Offset), 0, null, thickness);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawDebugCone_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:DrawDebugCircle
    static readonly IntPtr DrawDebugCircle_NativeFunction;
    static readonly int DrawDebugCircle_ParamsSize;
    static readonly int DrawDebugCircle_WorldContextObject_Offset;
    static readonly int DrawDebugCircle_Center_Offset;
    static readonly int DrawDebugCircle_Radius_Offset;
    static readonly int DrawDebugCircle_NumSegments_Offset;
    static readonly int DrawDebugCircle_LineColor_Offset;
    static readonly int DrawDebugCircle_Duration_Offset;
    static readonly int DrawDebugCircle_Thickness_Offset;
    static readonly int DrawDebugCircle_YAxis_Offset;
    static readonly int DrawDebugCircle_ZAxis_Offset;
    static readonly int DrawDebugCircle_bDrawAxis_Offset;
    
    public static void DrawDebugCircle(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 center, float radius, int numSegments = 12)
    {
        UnrealSharp.CoreUObject.LinearColor lineColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawDebugCircle(worldContextObject, center, radius, numSegments, lineColor);
    }
    
    public static void DrawDebugCircle(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 center, float radius, int numSegments, UnrealSharp.CoreUObject.LinearColor lineColor, float duration = 0.000000f, float thickness = 0.000000f)
    {
        System.DoubleNumerics.Vector3 yAxis = new System.DoubleNumerics.Vector3
        {
            X=0.000000f,
            Y=1.000000f,
            Z=0.000000f,
        };
        DrawDebugCircle(worldContextObject, center, radius, numSegments, lineColor, duration, thickness, yAxis);
    }
    
    public static void DrawDebugCircle(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 center, float radius, int numSegments, UnrealSharp.CoreUObject.LinearColor lineColor, float duration, float thickness, System.DoubleNumerics.Vector3 yAxis)
    {
        System.DoubleNumerics.Vector3 zAxis = new System.DoubleNumerics.Vector3
        {
            X=0.000000f,
            Y=0.000000f,
            Z=1.000000f,
        };
        DrawDebugCircle(worldContextObject, center, radius, numSegments, lineColor, duration, thickness, yAxis, zAxis);
    }
    
    public static void DrawDebugCircle(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 center, float radius, int numSegments, UnrealSharp.CoreUObject.LinearColor lineColor, float duration, float thickness, System.DoubleNumerics.Vector3 yAxis, System.DoubleNumerics.Vector3 zAxis, bool bDrawAxis = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawDebugCircle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCircle_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCircle_Center_Offset), 0, null, center);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCircle_Radius_Offset), 0, null, radius);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCircle_NumSegments_Offset), 0, null, numSegments);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCircle_LineColor_Offset), 0, null, lineColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCircle_Duration_Offset), 0, null, duration);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCircle_Thickness_Offset), 0, null, thickness);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCircle_YAxis_Offset), 0, null, yAxis);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCircle_ZAxis_Offset), 0, null, zAxis);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCircle_bDrawAxis_Offset), 0, null, bDrawAxis);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawDebugCircle_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:DrawDebugCapsule
    static readonly IntPtr DrawDebugCapsule_NativeFunction;
    static readonly int DrawDebugCapsule_ParamsSize;
    static readonly int DrawDebugCapsule_WorldContextObject_Offset;
    static readonly int DrawDebugCapsule_Center_Offset;
    static readonly int DrawDebugCapsule_HalfHeight_Offset;
    static readonly int DrawDebugCapsule_Radius_Offset;
    static readonly int DrawDebugCapsule_Rotation_Offset;
    static readonly int DrawDebugCapsule_LineColor_Offset;
    static readonly int DrawDebugCapsule_Duration_Offset;
    static readonly int DrawDebugCapsule_Thickness_Offset;
    
    public static void DrawDebugCapsule(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 center, float halfHeight, float radius, UnrealSharp.Rotator rotation)
    {
        UnrealSharp.CoreUObject.LinearColor lineColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawDebugCapsule(worldContextObject, center, halfHeight, radius, rotation, lineColor);
    }
    
    public static void DrawDebugCapsule(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 center, float halfHeight, float radius, UnrealSharp.Rotator rotation, UnrealSharp.CoreUObject.LinearColor lineColor, float duration = 0.000000f, float thickness = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawDebugCapsule_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCapsule_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCapsule_Center_Offset), 0, null, center);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCapsule_HalfHeight_Offset), 0, null, halfHeight);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCapsule_Radius_Offset), 0, null, radius);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCapsule_Rotation_Offset), 0, null, rotation);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCapsule_LineColor_Offset), 0, null, lineColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCapsule_Duration_Offset), 0, null, duration);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCapsule_Thickness_Offset), 0, null, thickness);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawDebugCapsule_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:DrawDebugCamera
    static readonly IntPtr DrawDebugCamera_NativeFunction;
    static readonly int DrawDebugCamera_ParamsSize;
    static readonly int DrawDebugCamera_CameraActor_Offset;
    static readonly int DrawDebugCamera_CameraColor_Offset;
    static readonly int DrawDebugCamera_Duration_Offset;
    
    public static void DrawDebugCamera(UnrealSharp.Engine.CameraActor cameraActor)
    {
        UnrealSharp.CoreUObject.LinearColor cameraColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=1.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        DrawDebugCamera(cameraActor, cameraColor);
    }
    
    public static void DrawDebugCamera(UnrealSharp.Engine.CameraActor cameraActor, UnrealSharp.CoreUObject.LinearColor cameraColor, float duration = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawDebugCamera_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.CameraActor>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCamera_CameraActor_Offset), 0, null, cameraActor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCamera_CameraColor_Offset), 0, null, cameraColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugCamera_Duration_Offset), 0, null, duration);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawDebugCamera_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:DrawDebugBox
    static readonly IntPtr DrawDebugBox_NativeFunction;
    static readonly int DrawDebugBox_ParamsSize;
    static readonly int DrawDebugBox_WorldContextObject_Offset;
    static readonly int DrawDebugBox_Center_Offset;
    static readonly int DrawDebugBox_Extent_Offset;
    static readonly int DrawDebugBox_LineColor_Offset;
    static readonly int DrawDebugBox_Rotation_Offset;
    static readonly int DrawDebugBox_Duration_Offset;
    static readonly int DrawDebugBox_Thickness_Offset;
    
    public static void DrawDebugBox(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 center, System.DoubleNumerics.Vector3 extent, UnrealSharp.CoreUObject.LinearColor lineColor, UnrealSharp.Rotator rotation, float duration = 0.000000f, float thickness = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawDebugBox_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugBox_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugBox_Center_Offset), 0, null, center);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugBox_Extent_Offset), 0, null, extent);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugBox_LineColor_Offset), 0, null, lineColor);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugBox_Rotation_Offset), 0, null, rotation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugBox_Duration_Offset), 0, null, duration);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugBox_Thickness_Offset), 0, null, thickness);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawDebugBox_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:DrawDebugArrow
    static readonly IntPtr DrawDebugArrow_NativeFunction;
    static readonly int DrawDebugArrow_ParamsSize;
    static readonly int DrawDebugArrow_WorldContextObject_Offset;
    static readonly int DrawDebugArrow_LineStart_Offset;
    static readonly int DrawDebugArrow_LineEnd_Offset;
    static readonly int DrawDebugArrow_ArrowSize_Offset;
    static readonly int DrawDebugArrow_LineColor_Offset;
    static readonly int DrawDebugArrow_Duration_Offset;
    static readonly int DrawDebugArrow_Thickness_Offset;
    
    public static void DrawDebugArrow(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 lineStart, System.DoubleNumerics.Vector3 lineEnd, float arrowSize, UnrealSharp.CoreUObject.LinearColor lineColor, float duration = 0.000000f, float thickness = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DrawDebugArrow_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugArrow_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugArrow_LineStart_Offset), 0, null, lineStart);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugArrow_LineEnd_Offset), 0, null, lineEnd);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugArrow_ArrowSize_Offset), 0, null, arrowSize);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugArrow_LineColor_Offset), 0, null, lineColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugArrow_Duration_Offset), 0, null, duration);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DrawDebugArrow_Thickness_Offset), 0, null, thickness);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DrawDebugArrow_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:DoesImplementInterface
    static readonly IntPtr DoesImplementInterface_NativeFunction;
    static readonly int DoesImplementInterface_ParamsSize;
    static readonly int DoesImplementInterface_TestObject_Offset;
    static readonly int DoesImplementInterface_Interface_Offset;
    static readonly int DoesImplementInterface_ReturnValue_Offset;
    
    public static bool DoesImplementInterface(UnrealSharp.CoreUObject.Object testObject, SubclassOf<UnrealSharp.CoreUObject.IInterface> @interface)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DoesImplementInterface_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DoesImplementInterface_TestObject_Offset), 0, null, testObject);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.IInterface>.ToNative(IntPtr.Add(ParamsBuffer, DoesImplementInterface_Interface_Offset), 0, null, @interface);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DoesImplementInterface_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DoesImplementInterface_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:CreateCopyForUndoBuffer
    static readonly IntPtr CreateCopyForUndoBuffer_NativeFunction;
    static readonly int CreateCopyForUndoBuffer_ParamsSize;
    static readonly int CreateCopyForUndoBuffer_ObjectToModify_Offset;
    
    public static void CreateCopyForUndoBuffer(UnrealSharp.CoreUObject.Object objectToModify)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateCopyForUndoBuffer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CreateCopyForUndoBuffer_ObjectToModify_Offset), 0, null, objectToModify);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateCopyForUndoBuffer_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:ConvertToRelativePath
    static readonly IntPtr ConvertToRelativePath_NativeFunction;
    static readonly int ConvertToRelativePath_ParamsSize;
    static readonly int ConvertToRelativePath_Filename_Offset;
    static readonly int ConvertToRelativePath_ReturnValue_Offset;
    
    public static string ConvertToRelativePath(string filename)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertToRelativePath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Filename_NativePtr = IntPtr.Add(ParamsBuffer,ConvertToRelativePath_Filename_Offset);
            StringMarshaller.ToNative(Filename_NativePtr,0,null,filename);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConvertToRelativePath_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,ConvertToRelativePath_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(Filename_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:ConvertToAbsolutePath
    static readonly IntPtr ConvertToAbsolutePath_NativeFunction;
    static readonly int ConvertToAbsolutePath_ParamsSize;
    static readonly int ConvertToAbsolutePath_Filename_Offset;
    static readonly int ConvertToAbsolutePath_ReturnValue_Offset;
    
    public static string ConvertToAbsolutePath(string filename)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertToAbsolutePath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Filename_NativePtr = IntPtr.Add(ParamsBuffer,ConvertToAbsolutePath_Filename_Offset);
            StringMarshaller.ToNative(Filename_NativePtr,0,null,filename);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConvertToAbsolutePath_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,ConvertToAbsolutePath_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(Filename_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:Conv_SoftObjRefToSoftObjPath
    static readonly IntPtr Conv_SoftObjRefToSoftObjPath_NativeFunction;
    static readonly int Conv_SoftObjRefToSoftObjPath_ParamsSize;
    static readonly int Conv_SoftObjRefToSoftObjPath_SoftObjectReference_Offset;
    static readonly int Conv_SoftObjRefToSoftObjPath_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.SoftObjectPath Conv_SoftObjRefToSoftObjPath(SoftObject<UnrealSharp.CoreUObject.Object> softObjectReference)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_SoftObjRefToSoftObjPath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<SoftObject<UnrealSharp.CoreUObject.Object>>.ToNative(IntPtr.Add(ParamsBuffer, Conv_SoftObjRefToSoftObjPath_SoftObjectReference_Offset), 0, null, softObjectReference);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_SoftObjRefToSoftObjPath_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.SoftObjectPath returnValue;
            returnValue = UnrealSharp.CoreUObject.SoftObjectPathMarshaler.FromNative(IntPtr.Add(ParamsBuffer, Conv_SoftObjRefToSoftObjPath_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:Conv_SoftObjPathToSoftObjRef
    static readonly IntPtr Conv_SoftObjPathToSoftObjRef_NativeFunction;
    static readonly int Conv_SoftObjPathToSoftObjRef_ParamsSize;
    static readonly int Conv_SoftObjPathToSoftObjRef_SoftObjectPath_Offset;
    static readonly int Conv_SoftObjPathToSoftObjRef_ReturnValue_Offset;
    
    public static SoftObject<UnrealSharp.CoreUObject.Object> Conv_SoftObjPathToSoftObjRef(UnrealSharp.CoreUObject.SoftObjectPath softObjectPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_SoftObjPathToSoftObjRef_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.SoftObjectPathMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Conv_SoftObjPathToSoftObjRef_SoftObjectPath_Offset), 0, null, softObjectPath);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_SoftObjPathToSoftObjRef_NativeFunction, ParamsBuffer);
            
            SoftObject<UnrealSharp.CoreUObject.Object> returnValue;
            returnValue = BlittableMarshaller<SoftObject<UnrealSharp.CoreUObject.Object>>.FromNative(IntPtr.Add(ParamsBuffer, Conv_SoftObjPathToSoftObjRef_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:Conv_SoftObjectReferenceToString
    static readonly IntPtr Conv_SoftObjectReferenceToString_NativeFunction;
    static readonly int Conv_SoftObjectReferenceToString_ParamsSize;
    static readonly int Conv_SoftObjectReferenceToString_SoftObjectReference_Offset;
    static readonly int Conv_SoftObjectReferenceToString_ReturnValue_Offset;
    
    public static string Conv_SoftObjectReferenceToString(SoftObject<UnrealSharp.CoreUObject.Object> softObjectReference)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_SoftObjectReferenceToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<SoftObject<UnrealSharp.CoreUObject.Object>>.ToNative(IntPtr.Add(ParamsBuffer, Conv_SoftObjectReferenceToString_SoftObjectReference_Offset), 0, null, softObjectReference);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_SoftObjectReferenceToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_SoftObjectReferenceToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:Conv_PrimaryAssetTypeToString
    static readonly IntPtr Conv_PrimaryAssetTypeToString_NativeFunction;
    static readonly int Conv_PrimaryAssetTypeToString_ParamsSize;
    static readonly int Conv_PrimaryAssetTypeToString_PrimaryAssetType_Offset;
    static readonly int Conv_PrimaryAssetTypeToString_ReturnValue_Offset;
    
    public static string ToString(UnrealSharp.CoreUObject.PrimaryAssetType primaryAssetType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_PrimaryAssetTypeToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetType>.ToNative(IntPtr.Add(ParamsBuffer, Conv_PrimaryAssetTypeToString_PrimaryAssetType_Offset), 0, null, primaryAssetType);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_PrimaryAssetTypeToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_PrimaryAssetTypeToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:Conv_PrimaryAssetIdToString
    static readonly IntPtr Conv_PrimaryAssetIdToString_NativeFunction;
    static readonly int Conv_PrimaryAssetIdToString_ParamsSize;
    static readonly int Conv_PrimaryAssetIdToString_PrimaryAssetId_Offset;
    static readonly int Conv_PrimaryAssetIdToString_ReturnValue_Offset;
    
    public static string ToString(UnrealSharp.CoreUObject.PrimaryAssetId primaryAssetId)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_PrimaryAssetIdToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.PrimaryAssetId>.ToNative(IntPtr.Add(ParamsBuffer, Conv_PrimaryAssetIdToString_PrimaryAssetId_Offset), 0, null, primaryAssetId);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_PrimaryAssetIdToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,Conv_PrimaryAssetIdToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:Conv_ObjectToClass
    static readonly IntPtr Conv_ObjectToClass_NativeFunction;
    static readonly int Conv_ObjectToClass_ParamsSize;
    static readonly int Conv_ObjectToClass_Object_Offset;
    static readonly int Conv_ObjectToClass_Class_Offset;
    static readonly int Conv_ObjectToClass_ReturnValue_Offset;
    
    public static SubclassOf<UnrealSharp.CoreUObject.Object> Conv_ObjectToClass(UnrealSharp.CoreUObject.Object @object, SubclassOf<UnrealSharp.CoreUObject.Object> @class)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_ObjectToClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, Conv_ObjectToClass_Object_Offset), 0, null, @object);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, Conv_ObjectToClass_Class_Offset), 0, null, @class);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_ObjectToClass_NativeFunction, ParamsBuffer);
            
            SubclassOf<UnrealSharp.CoreUObject.Object> returnValue;
            returnValue = SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, Conv_ObjectToClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:Conv_ComponentReferenceToSoftComponentReference
    static readonly IntPtr Conv_ComponentReferenceToSoftComponentReference_NativeFunction;
    static readonly int Conv_ComponentReferenceToSoftComponentReference_ParamsSize;
    static readonly int Conv_ComponentReferenceToSoftComponentReference_ComponentReference_Offset;
    static readonly int Conv_ComponentReferenceToSoftComponentReference_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.SoftComponentReference Conv_ComponentReferenceToSoftComponentReference(UnrealSharp.Engine.ComponentReference componentReference)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Conv_ComponentReferenceToSoftComponentReference_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.ComponentReferenceMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Conv_ComponentReferenceToSoftComponentReference_ComponentReference_Offset), 0, null, componentReference);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Conv_ComponentReferenceToSoftComponentReference_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.SoftComponentReference returnValue;
            returnValue = UnrealSharp.Engine.SoftComponentReferenceMarshaler.FromNative(IntPtr.Add(ParamsBuffer, Conv_ComponentReferenceToSoftComponentReference_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:ControlScreensaver
    static readonly IntPtr ControlScreensaver_NativeFunction;
    static readonly int ControlScreensaver_ParamsSize;
    static readonly int ControlScreensaver_bAllowScreenSaver_Offset;
    
    public static void ControlScreensaver(bool bAllowScreenSaver)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ControlScreensaver_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ControlScreensaver_bAllowScreenSaver_Offset), 0, null, bAllowScreenSaver);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ControlScreensaver_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:ComponentOverlapComponents
    static readonly IntPtr ComponentOverlapComponents_NativeFunction;
    static readonly int ComponentOverlapComponents_ParamsSize;
    static readonly int ComponentOverlapComponents_Component_Offset;
    static readonly int ComponentOverlapComponents_ComponentTransform_Offset;
    static readonly int ComponentOverlapComponents_ObjectTypes_Offset;
    static readonly int ComponentOverlapComponents_ObjectTypes_ElementSize;
    static readonly int ComponentOverlapComponents_ComponentClassFilter_Offset;
    static readonly int ComponentOverlapComponents_ActorsToIgnore_Offset;
    static readonly int ComponentOverlapComponents_ActorsToIgnore_ElementSize;
    static readonly int ComponentOverlapComponents_OutComponents_Offset;
    static readonly int ComponentOverlapComponents_OutComponents_ElementSize;
    static readonly int ComponentOverlapComponents_ReturnValue_Offset;
    
    public static bool ComponentOverlapComponents(UnrealSharp.Engine.PrimitiveComponent component, UnrealSharp.Transform componentTransform, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, SubclassOf<UnrealSharp.CoreUObject.Object> componentClassFilter, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, out System.Collections.Generic.IList<UnrealSharp.Engine.PrimitiveComponent> outComponents)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ComponentOverlapComponents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative(IntPtr.Add(ParamsBuffer, ComponentOverlapComponents_Component_Offset), 0, null, component);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, ComponentOverlapComponents_ComponentTransform_Offset), 0, null, componentTransform);
            IntPtr ObjectTypes_NativeBuffer = IntPtr.Add(ParamsBuffer, ComponentOverlapComponents_ObjectTypes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery> ObjectTypes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery>(1, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.ToNative, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.FromNative, ComponentOverlapComponents_ObjectTypes_ElementSize);
            ObjectTypes_Marshaler.ToNative(ObjectTypes_NativeBuffer, 0, null, objectTypes);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ComponentOverlapComponents_ComponentClassFilter_Offset), 0, null, componentClassFilter);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, ComponentOverlapComponents_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, ComponentOverlapComponents_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ComponentOverlapComponents_NativeFunction, ParamsBuffer);
            
            IntPtr OutComponents_NativeBuffer = IntPtr.Add(ParamsBuffer, ComponentOverlapComponents_OutComponents_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent> OutComponents_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent> (1, ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative, ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.FromNative, ComponentOverlapComponents_OutComponents_ElementSize);
            outComponents = OutComponents_Marshaler.FromNative(OutComponents_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent>.DestructInstance(OutComponents_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ComponentOverlapComponents_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:ComponentOverlapActors
    static readonly IntPtr ComponentOverlapActors_NativeFunction;
    static readonly int ComponentOverlapActors_ParamsSize;
    static readonly int ComponentOverlapActors_Component_Offset;
    static readonly int ComponentOverlapActors_ComponentTransform_Offset;
    static readonly int ComponentOverlapActors_ObjectTypes_Offset;
    static readonly int ComponentOverlapActors_ObjectTypes_ElementSize;
    static readonly int ComponentOverlapActors_ActorClassFilter_Offset;
    static readonly int ComponentOverlapActors_ActorsToIgnore_Offset;
    static readonly int ComponentOverlapActors_ActorsToIgnore_ElementSize;
    static readonly int ComponentOverlapActors_OutActors_Offset;
    static readonly int ComponentOverlapActors_OutActors_ElementSize;
    static readonly int ComponentOverlapActors_ReturnValue_Offset;
    
    public static bool ComponentOverlapActors(UnrealSharp.Engine.PrimitiveComponent component, UnrealSharp.Transform componentTransform, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, SubclassOf<UnrealSharp.CoreUObject.Object> actorClassFilter, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, out System.Collections.Generic.IList<UnrealSharp.Engine.Actor> outActors)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ComponentOverlapActors_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative(IntPtr.Add(ParamsBuffer, ComponentOverlapActors_Component_Offset), 0, null, component);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, ComponentOverlapActors_ComponentTransform_Offset), 0, null, componentTransform);
            IntPtr ObjectTypes_NativeBuffer = IntPtr.Add(ParamsBuffer, ComponentOverlapActors_ObjectTypes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery> ObjectTypes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery>(1, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.ToNative, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.FromNative, ComponentOverlapActors_ObjectTypes_ElementSize);
            ObjectTypes_Marshaler.ToNative(ObjectTypes_NativeBuffer, 0, null, objectTypes);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ComponentOverlapActors_ActorClassFilter_Offset), 0, null, actorClassFilter);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, ComponentOverlapActors_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, ComponentOverlapActors_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ComponentOverlapActors_NativeFunction, ParamsBuffer);
            
            IntPtr OutActors_NativeBuffer = IntPtr.Add(ParamsBuffer, ComponentOverlapActors_OutActors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> OutActors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, ComponentOverlapActors_OutActors_ElementSize);
            outActors = OutActors_Marshaler.FromNative(OutActors_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(OutActors_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ComponentOverlapActors_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:CollectGarbage
    static readonly IntPtr CollectGarbage_NativeFunction;
    
    public static void CollectGarbage()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CollectGarbage_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:CapsuleTraceSingleForObjects
    static readonly IntPtr CapsuleTraceSingleForObjects_NativeFunction;
    static readonly int CapsuleTraceSingleForObjects_ParamsSize;
    static readonly int CapsuleTraceSingleForObjects_WorldContextObject_Offset;
    static readonly int CapsuleTraceSingleForObjects_Start_Offset;
    static readonly int CapsuleTraceSingleForObjects_End_Offset;
    static readonly int CapsuleTraceSingleForObjects_Radius_Offset;
    static readonly int CapsuleTraceSingleForObjects_HalfHeight_Offset;
    static readonly int CapsuleTraceSingleForObjects_ObjectTypes_Offset;
    static readonly int CapsuleTraceSingleForObjects_ObjectTypes_ElementSize;
    static readonly int CapsuleTraceSingleForObjects_bTraceComplex_Offset;
    static readonly int CapsuleTraceSingleForObjects_ActorsToIgnore_Offset;
    static readonly int CapsuleTraceSingleForObjects_ActorsToIgnore_ElementSize;
    static readonly int CapsuleTraceSingleForObjects_DrawDebugType_Offset;
    static readonly int CapsuleTraceSingleForObjects_OutHit_Offset;
    static readonly int CapsuleTraceSingleForObjects_bIgnoreSelf_Offset;
    static readonly int CapsuleTraceSingleForObjects_TraceColor_Offset;
    static readonly int CapsuleTraceSingleForObjects_TraceHitColor_Offset;
    static readonly int CapsuleTraceSingleForObjects_DrawTime_Offset;
    static readonly int CapsuleTraceSingleForObjects_ReturnValue_Offset;
    
    public static bool CapsuleTraceSingleForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, float halfHeight, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return CapsuleTraceSingleForObjects(worldContextObject, start, end, radius, halfHeight, objectTypes, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor);
    }
    
    public static bool CapsuleTraceSingleForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, float halfHeight, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return CapsuleTraceSingleForObjects(worldContextObject, start, end, radius, halfHeight, objectTypes, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool CapsuleTraceSingleForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, float halfHeight, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CapsuleTraceSingleForObjects_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleForObjects_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleForObjects_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleForObjects_End_Offset), 0, null, end);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleForObjects_Radius_Offset), 0, null, radius);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleForObjects_HalfHeight_Offset), 0, null, halfHeight);
            IntPtr ObjectTypes_NativeBuffer = IntPtr.Add(ParamsBuffer, CapsuleTraceSingleForObjects_ObjectTypes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery> ObjectTypes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery>(1, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.ToNative, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.FromNative, CapsuleTraceSingleForObjects_ObjectTypes_ElementSize);
            ObjectTypes_Marshaler.ToNative(ObjectTypes_NativeBuffer, 0, null, objectTypes);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleForObjects_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, CapsuleTraceSingleForObjects_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, CapsuleTraceSingleForObjects_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleForObjects_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleForObjects_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleForObjects_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleForObjects_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleForObjects_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CapsuleTraceSingleForObjects_NativeFunction, ParamsBuffer);
            
            outHit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleForObjects_OutHit_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleForObjects_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:CapsuleTraceSingleByProfile
    static readonly IntPtr CapsuleTraceSingleByProfile_NativeFunction;
    static readonly int CapsuleTraceSingleByProfile_ParamsSize;
    static readonly int CapsuleTraceSingleByProfile_WorldContextObject_Offset;
    static readonly int CapsuleTraceSingleByProfile_Start_Offset;
    static readonly int CapsuleTraceSingleByProfile_End_Offset;
    static readonly int CapsuleTraceSingleByProfile_Radius_Offset;
    static readonly int CapsuleTraceSingleByProfile_HalfHeight_Offset;
    static readonly int CapsuleTraceSingleByProfile_ProfileName_Offset;
    static readonly int CapsuleTraceSingleByProfile_bTraceComplex_Offset;
    static readonly int CapsuleTraceSingleByProfile_ActorsToIgnore_Offset;
    static readonly int CapsuleTraceSingleByProfile_ActorsToIgnore_ElementSize;
    static readonly int CapsuleTraceSingleByProfile_DrawDebugType_Offset;
    static readonly int CapsuleTraceSingleByProfile_OutHit_Offset;
    static readonly int CapsuleTraceSingleByProfile_bIgnoreSelf_Offset;
    static readonly int CapsuleTraceSingleByProfile_TraceColor_Offset;
    static readonly int CapsuleTraceSingleByProfile_TraceHitColor_Offset;
    static readonly int CapsuleTraceSingleByProfile_DrawTime_Offset;
    static readonly int CapsuleTraceSingleByProfile_ReturnValue_Offset;
    
    public static bool CapsuleTraceSingleByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, float halfHeight, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return CapsuleTraceSingleByProfile(worldContextObject, start, end, radius, halfHeight, profileName, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor);
    }
    
    public static bool CapsuleTraceSingleByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, float halfHeight, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return CapsuleTraceSingleByProfile(worldContextObject, start, end, radius, halfHeight, profileName, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool CapsuleTraceSingleByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, float halfHeight, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CapsuleTraceSingleByProfile_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleByProfile_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleByProfile_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleByProfile_End_Offset), 0, null, end);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleByProfile_Radius_Offset), 0, null, radius);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleByProfile_HalfHeight_Offset), 0, null, halfHeight);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleByProfile_ProfileName_Offset), 0, null, profileName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleByProfile_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, CapsuleTraceSingleByProfile_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, CapsuleTraceSingleByProfile_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleByProfile_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleByProfile_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleByProfile_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleByProfile_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleByProfile_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CapsuleTraceSingleByProfile_NativeFunction, ParamsBuffer);
            
            outHit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleByProfile_OutHit_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingleByProfile_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:CapsuleTraceSingle
    static readonly IntPtr CapsuleTraceSingle_NativeFunction;
    static readonly int CapsuleTraceSingle_ParamsSize;
    static readonly int CapsuleTraceSingle_WorldContextObject_Offset;
    static readonly int CapsuleTraceSingle_Start_Offset;
    static readonly int CapsuleTraceSingle_End_Offset;
    static readonly int CapsuleTraceSingle_Radius_Offset;
    static readonly int CapsuleTraceSingle_HalfHeight_Offset;
    static readonly int CapsuleTraceSingle_TraceChannel_Offset;
    static readonly int CapsuleTraceSingle_bTraceComplex_Offset;
    static readonly int CapsuleTraceSingle_ActorsToIgnore_Offset;
    static readonly int CapsuleTraceSingle_ActorsToIgnore_ElementSize;
    static readonly int CapsuleTraceSingle_DrawDebugType_Offset;
    static readonly int CapsuleTraceSingle_OutHit_Offset;
    static readonly int CapsuleTraceSingle_bIgnoreSelf_Offset;
    static readonly int CapsuleTraceSingle_TraceColor_Offset;
    static readonly int CapsuleTraceSingle_TraceHitColor_Offset;
    static readonly int CapsuleTraceSingle_DrawTime_Offset;
    static readonly int CapsuleTraceSingle_ReturnValue_Offset;
    
    public static bool CapsuleTraceSingle(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, float halfHeight, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return CapsuleTraceSingle(worldContextObject, start, end, radius, halfHeight, traceChannel, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor);
    }
    
    public static bool CapsuleTraceSingle(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, float halfHeight, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return CapsuleTraceSingle(worldContextObject, start, end, radius, halfHeight, traceChannel, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool CapsuleTraceSingle(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, float halfHeight, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CapsuleTraceSingle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingle_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingle_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingle_End_Offset), 0, null, end);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingle_Radius_Offset), 0, null, radius);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingle_HalfHeight_Offset), 0, null, halfHeight);
            BlittableMarshaller<UnrealSharp.Engine.ETraceTypeQuery>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingle_TraceChannel_Offset), 0, null, traceChannel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingle_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, CapsuleTraceSingle_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, CapsuleTraceSingle_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingle_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingle_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingle_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingle_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingle_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CapsuleTraceSingle_NativeFunction, ParamsBuffer);
            
            outHit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingle_OutHit_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CapsuleTraceSingle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:CapsuleTraceMultiForObjects
    static readonly IntPtr CapsuleTraceMultiForObjects_NativeFunction;
    static readonly int CapsuleTraceMultiForObjects_ParamsSize;
    static readonly int CapsuleTraceMultiForObjects_WorldContextObject_Offset;
    static readonly int CapsuleTraceMultiForObjects_Start_Offset;
    static readonly int CapsuleTraceMultiForObjects_End_Offset;
    static readonly int CapsuleTraceMultiForObjects_Radius_Offset;
    static readonly int CapsuleTraceMultiForObjects_HalfHeight_Offset;
    static readonly int CapsuleTraceMultiForObjects_ObjectTypes_Offset;
    static readonly int CapsuleTraceMultiForObjects_ObjectTypes_ElementSize;
    static readonly int CapsuleTraceMultiForObjects_bTraceComplex_Offset;
    static readonly int CapsuleTraceMultiForObjects_ActorsToIgnore_Offset;
    static readonly int CapsuleTraceMultiForObjects_ActorsToIgnore_ElementSize;
    static readonly int CapsuleTraceMultiForObjects_DrawDebugType_Offset;
    static readonly int CapsuleTraceMultiForObjects_OutHits_Offset;
    static readonly int CapsuleTraceMultiForObjects_OutHits_ElementSize;
    static readonly int CapsuleTraceMultiForObjects_bIgnoreSelf_Offset;
    static readonly int CapsuleTraceMultiForObjects_TraceColor_Offset;
    static readonly int CapsuleTraceMultiForObjects_TraceHitColor_Offset;
    static readonly int CapsuleTraceMultiForObjects_DrawTime_Offset;
    static readonly int CapsuleTraceMultiForObjects_ReturnValue_Offset;
    
    public static bool CapsuleTraceMultiForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, float halfHeight, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return CapsuleTraceMultiForObjects(worldContextObject, start, end, radius, halfHeight, objectTypes, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor);
    }
    
    public static bool CapsuleTraceMultiForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, float halfHeight, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return CapsuleTraceMultiForObjects(worldContextObject, start, end, radius, halfHeight, objectTypes, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool CapsuleTraceMultiForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, float halfHeight, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CapsuleTraceMultiForObjects_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiForObjects_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiForObjects_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiForObjects_End_Offset), 0, null, end);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiForObjects_Radius_Offset), 0, null, radius);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiForObjects_HalfHeight_Offset), 0, null, halfHeight);
            IntPtr ObjectTypes_NativeBuffer = IntPtr.Add(ParamsBuffer, CapsuleTraceMultiForObjects_ObjectTypes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery> ObjectTypes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery>(1, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.ToNative, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.FromNative, CapsuleTraceMultiForObjects_ObjectTypes_ElementSize);
            ObjectTypes_Marshaler.ToNative(ObjectTypes_NativeBuffer, 0, null, objectTypes);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiForObjects_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, CapsuleTraceMultiForObjects_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, CapsuleTraceMultiForObjects_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiForObjects_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiForObjects_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiForObjects_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiForObjects_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiForObjects_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CapsuleTraceMultiForObjects_NativeFunction, ParamsBuffer);
            
            IntPtr OutHits_NativeBuffer = IntPtr.Add(ParamsBuffer, CapsuleTraceMultiForObjects_OutHits_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> OutHits_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> (1, UnrealSharp.Engine.HitResultMarshaler.ToNative, UnrealSharp.Engine.HitResultMarshaler.FromNative, CapsuleTraceMultiForObjects_OutHits_ElementSize);
            outHits = OutHits_Marshaler.FromNative(OutHits_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult>.DestructInstance(OutHits_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiForObjects_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:CapsuleTraceMultiByProfile
    static readonly IntPtr CapsuleTraceMultiByProfile_NativeFunction;
    static readonly int CapsuleTraceMultiByProfile_ParamsSize;
    static readonly int CapsuleTraceMultiByProfile_WorldContextObject_Offset;
    static readonly int CapsuleTraceMultiByProfile_Start_Offset;
    static readonly int CapsuleTraceMultiByProfile_End_Offset;
    static readonly int CapsuleTraceMultiByProfile_Radius_Offset;
    static readonly int CapsuleTraceMultiByProfile_HalfHeight_Offset;
    static readonly int CapsuleTraceMultiByProfile_ProfileName_Offset;
    static readonly int CapsuleTraceMultiByProfile_bTraceComplex_Offset;
    static readonly int CapsuleTraceMultiByProfile_ActorsToIgnore_Offset;
    static readonly int CapsuleTraceMultiByProfile_ActorsToIgnore_ElementSize;
    static readonly int CapsuleTraceMultiByProfile_DrawDebugType_Offset;
    static readonly int CapsuleTraceMultiByProfile_OutHits_Offset;
    static readonly int CapsuleTraceMultiByProfile_OutHits_ElementSize;
    static readonly int CapsuleTraceMultiByProfile_bIgnoreSelf_Offset;
    static readonly int CapsuleTraceMultiByProfile_TraceColor_Offset;
    static readonly int CapsuleTraceMultiByProfile_TraceHitColor_Offset;
    static readonly int CapsuleTraceMultiByProfile_DrawTime_Offset;
    static readonly int CapsuleTraceMultiByProfile_ReturnValue_Offset;
    
    public static bool CapsuleTraceMultiByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, float halfHeight, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return CapsuleTraceMultiByProfile(worldContextObject, start, end, radius, halfHeight, profileName, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor);
    }
    
    public static bool CapsuleTraceMultiByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, float halfHeight, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return CapsuleTraceMultiByProfile(worldContextObject, start, end, radius, halfHeight, profileName, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool CapsuleTraceMultiByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, float halfHeight, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CapsuleTraceMultiByProfile_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiByProfile_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiByProfile_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiByProfile_End_Offset), 0, null, end);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiByProfile_Radius_Offset), 0, null, radius);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiByProfile_HalfHeight_Offset), 0, null, halfHeight);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiByProfile_ProfileName_Offset), 0, null, profileName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiByProfile_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, CapsuleTraceMultiByProfile_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, CapsuleTraceMultiByProfile_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiByProfile_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiByProfile_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiByProfile_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiByProfile_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiByProfile_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CapsuleTraceMultiByProfile_NativeFunction, ParamsBuffer);
            
            IntPtr OutHits_NativeBuffer = IntPtr.Add(ParamsBuffer, CapsuleTraceMultiByProfile_OutHits_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> OutHits_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> (1, UnrealSharp.Engine.HitResultMarshaler.ToNative, UnrealSharp.Engine.HitResultMarshaler.FromNative, CapsuleTraceMultiByProfile_OutHits_ElementSize);
            outHits = OutHits_Marshaler.FromNative(OutHits_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult>.DestructInstance(OutHits_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMultiByProfile_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:CapsuleTraceMulti
    static readonly IntPtr CapsuleTraceMulti_NativeFunction;
    static readonly int CapsuleTraceMulti_ParamsSize;
    static readonly int CapsuleTraceMulti_WorldContextObject_Offset;
    static readonly int CapsuleTraceMulti_Start_Offset;
    static readonly int CapsuleTraceMulti_End_Offset;
    static readonly int CapsuleTraceMulti_Radius_Offset;
    static readonly int CapsuleTraceMulti_HalfHeight_Offset;
    static readonly int CapsuleTraceMulti_TraceChannel_Offset;
    static readonly int CapsuleTraceMulti_bTraceComplex_Offset;
    static readonly int CapsuleTraceMulti_ActorsToIgnore_Offset;
    static readonly int CapsuleTraceMulti_ActorsToIgnore_ElementSize;
    static readonly int CapsuleTraceMulti_DrawDebugType_Offset;
    static readonly int CapsuleTraceMulti_OutHits_Offset;
    static readonly int CapsuleTraceMulti_OutHits_ElementSize;
    static readonly int CapsuleTraceMulti_bIgnoreSelf_Offset;
    static readonly int CapsuleTraceMulti_TraceColor_Offset;
    static readonly int CapsuleTraceMulti_TraceHitColor_Offset;
    static readonly int CapsuleTraceMulti_DrawTime_Offset;
    static readonly int CapsuleTraceMulti_ReturnValue_Offset;
    
    public static bool CapsuleTraceMulti(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, float halfHeight, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return CapsuleTraceMulti(worldContextObject, start, end, radius, halfHeight, traceChannel, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor);
    }
    
    public static bool CapsuleTraceMulti(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, float halfHeight, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return CapsuleTraceMulti(worldContextObject, start, end, radius, halfHeight, traceChannel, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool CapsuleTraceMulti(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, float radius, float halfHeight, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CapsuleTraceMulti_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMulti_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMulti_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMulti_End_Offset), 0, null, end);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMulti_Radius_Offset), 0, null, radius);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMulti_HalfHeight_Offset), 0, null, halfHeight);
            BlittableMarshaller<UnrealSharp.Engine.ETraceTypeQuery>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMulti_TraceChannel_Offset), 0, null, traceChannel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMulti_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, CapsuleTraceMulti_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, CapsuleTraceMulti_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMulti_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMulti_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMulti_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMulti_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMulti_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CapsuleTraceMulti_NativeFunction, ParamsBuffer);
            
            IntPtr OutHits_NativeBuffer = IntPtr.Add(ParamsBuffer, CapsuleTraceMulti_OutHits_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> OutHits_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> (1, UnrealSharp.Engine.HitResultMarshaler.ToNative, UnrealSharp.Engine.HitResultMarshaler.FromNative, CapsuleTraceMulti_OutHits_ElementSize);
            outHits = OutHits_Marshaler.FromNative(OutHits_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult>.DestructInstance(OutHits_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CapsuleTraceMulti_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:CapsuleOverlapComponents
    static readonly IntPtr CapsuleOverlapComponents_NativeFunction;
    static readonly int CapsuleOverlapComponents_ParamsSize;
    static readonly int CapsuleOverlapComponents_WorldContextObject_Offset;
    static readonly int CapsuleOverlapComponents_CapsulePos_Offset;
    static readonly int CapsuleOverlapComponents_Radius_Offset;
    static readonly int CapsuleOverlapComponents_HalfHeight_Offset;
    static readonly int CapsuleOverlapComponents_ObjectTypes_Offset;
    static readonly int CapsuleOverlapComponents_ObjectTypes_ElementSize;
    static readonly int CapsuleOverlapComponents_ComponentClassFilter_Offset;
    static readonly int CapsuleOverlapComponents_ActorsToIgnore_Offset;
    static readonly int CapsuleOverlapComponents_ActorsToIgnore_ElementSize;
    static readonly int CapsuleOverlapComponents_OutComponents_Offset;
    static readonly int CapsuleOverlapComponents_OutComponents_ElementSize;
    static readonly int CapsuleOverlapComponents_ReturnValue_Offset;
    
    public static bool CapsuleOverlapComponents(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 capsulePos, float radius, float halfHeight, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, SubclassOf<UnrealSharp.CoreUObject.Object> componentClassFilter, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, out System.Collections.Generic.IList<UnrealSharp.Engine.PrimitiveComponent> outComponents)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CapsuleOverlapComponents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleOverlapComponents_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleOverlapComponents_CapsulePos_Offset), 0, null, capsulePos);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleOverlapComponents_Radius_Offset), 0, null, radius);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleOverlapComponents_HalfHeight_Offset), 0, null, halfHeight);
            IntPtr ObjectTypes_NativeBuffer = IntPtr.Add(ParamsBuffer, CapsuleOverlapComponents_ObjectTypes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery> ObjectTypes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery>(1, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.ToNative, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.FromNative, CapsuleOverlapComponents_ObjectTypes_ElementSize);
            ObjectTypes_Marshaler.ToNative(ObjectTypes_NativeBuffer, 0, null, objectTypes);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleOverlapComponents_ComponentClassFilter_Offset), 0, null, componentClassFilter);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, CapsuleOverlapComponents_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, CapsuleOverlapComponents_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CapsuleOverlapComponents_NativeFunction, ParamsBuffer);
            
            IntPtr OutComponents_NativeBuffer = IntPtr.Add(ParamsBuffer, CapsuleOverlapComponents_OutComponents_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent> OutComponents_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent> (1, ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative, ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.FromNative, CapsuleOverlapComponents_OutComponents_ElementSize);
            outComponents = OutComponents_Marshaler.FromNative(OutComponents_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent>.DestructInstance(OutComponents_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CapsuleOverlapComponents_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:CapsuleOverlapActors
    static readonly IntPtr CapsuleOverlapActors_NativeFunction;
    static readonly int CapsuleOverlapActors_ParamsSize;
    static readonly int CapsuleOverlapActors_WorldContextObject_Offset;
    static readonly int CapsuleOverlapActors_CapsulePos_Offset;
    static readonly int CapsuleOverlapActors_Radius_Offset;
    static readonly int CapsuleOverlapActors_HalfHeight_Offset;
    static readonly int CapsuleOverlapActors_ObjectTypes_Offset;
    static readonly int CapsuleOverlapActors_ObjectTypes_ElementSize;
    static readonly int CapsuleOverlapActors_ActorClassFilter_Offset;
    static readonly int CapsuleOverlapActors_ActorsToIgnore_Offset;
    static readonly int CapsuleOverlapActors_ActorsToIgnore_ElementSize;
    static readonly int CapsuleOverlapActors_OutActors_Offset;
    static readonly int CapsuleOverlapActors_OutActors_ElementSize;
    static readonly int CapsuleOverlapActors_ReturnValue_Offset;
    
    public static bool CapsuleOverlapActors(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 capsulePos, float radius, float halfHeight, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, SubclassOf<UnrealSharp.CoreUObject.Object> actorClassFilter, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, out System.Collections.Generic.IList<UnrealSharp.Engine.Actor> outActors)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CapsuleOverlapActors_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleOverlapActors_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleOverlapActors_CapsulePos_Offset), 0, null, capsulePos);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleOverlapActors_Radius_Offset), 0, null, radius);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleOverlapActors_HalfHeight_Offset), 0, null, halfHeight);
            IntPtr ObjectTypes_NativeBuffer = IntPtr.Add(ParamsBuffer, CapsuleOverlapActors_ObjectTypes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery> ObjectTypes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery>(1, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.ToNative, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.FromNative, CapsuleOverlapActors_ObjectTypes_ElementSize);
            ObjectTypes_Marshaler.ToNative(ObjectTypes_NativeBuffer, 0, null, objectTypes);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CapsuleOverlapActors_ActorClassFilter_Offset), 0, null, actorClassFilter);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, CapsuleOverlapActors_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, CapsuleOverlapActors_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CapsuleOverlapActors_NativeFunction, ParamsBuffer);
            
            IntPtr OutActors_NativeBuffer = IntPtr.Add(ParamsBuffer, CapsuleOverlapActors_OutActors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> OutActors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, CapsuleOverlapActors_OutActors_ElementSize);
            outActors = OutActors_Marshaler.FromNative(OutActors_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(OutActors_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CapsuleOverlapActors_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:CanLaunchURL
    static readonly IntPtr CanLaunchURL_NativeFunction;
    static readonly int CanLaunchURL_ParamsSize;
    static readonly int CanLaunchURL_URL_Offset;
    static readonly int CanLaunchURL_ReturnValue_Offset;
    
    public static bool CanLaunchURL(string uRL)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CanLaunchURL_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr URL_NativePtr = IntPtr.Add(ParamsBuffer,CanLaunchURL_URL_Offset);
            StringMarshaller.ToNative(URL_NativePtr,0,null,uRL);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CanLaunchURL_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CanLaunchURL_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(URL_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:CancelTransaction
    static readonly IntPtr CancelTransaction_NativeFunction;
    static readonly int CancelTransaction_ParamsSize;
    static readonly int CancelTransaction_Index_Offset;
    
    public static void CancelTransaction(int index)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CancelTransaction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CancelTransaction_Index_Offset), 0, null, index);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CancelTransaction_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:BoxTraceSingleForObjects
    static readonly IntPtr BoxTraceSingleForObjects_NativeFunction;
    static readonly int BoxTraceSingleForObjects_ParamsSize;
    static readonly int BoxTraceSingleForObjects_WorldContextObject_Offset;
    static readonly int BoxTraceSingleForObjects_Start_Offset;
    static readonly int BoxTraceSingleForObjects_End_Offset;
    static readonly int BoxTraceSingleForObjects_HalfSize_Offset;
    static readonly int BoxTraceSingleForObjects_Orientation_Offset;
    static readonly int BoxTraceSingleForObjects_ObjectTypes_Offset;
    static readonly int BoxTraceSingleForObjects_ObjectTypes_ElementSize;
    static readonly int BoxTraceSingleForObjects_bTraceComplex_Offset;
    static readonly int BoxTraceSingleForObjects_ActorsToIgnore_Offset;
    static readonly int BoxTraceSingleForObjects_ActorsToIgnore_ElementSize;
    static readonly int BoxTraceSingleForObjects_DrawDebugType_Offset;
    static readonly int BoxTraceSingleForObjects_OutHit_Offset;
    static readonly int BoxTraceSingleForObjects_bIgnoreSelf_Offset;
    static readonly int BoxTraceSingleForObjects_TraceColor_Offset;
    static readonly int BoxTraceSingleForObjects_TraceHitColor_Offset;
    static readonly int BoxTraceSingleForObjects_DrawTime_Offset;
    static readonly int BoxTraceSingleForObjects_ReturnValue_Offset;
    
    public static bool BoxTraceSingleForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.DoubleNumerics.Vector3 halfSize, UnrealSharp.Rotator orientation, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return BoxTraceSingleForObjects(worldContextObject, start, end, halfSize, orientation, objectTypes, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor);
    }
    
    public static bool BoxTraceSingleForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.DoubleNumerics.Vector3 halfSize, UnrealSharp.Rotator orientation, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return BoxTraceSingleForObjects(worldContextObject, start, end, halfSize, orientation, objectTypes, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool BoxTraceSingleForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.DoubleNumerics.Vector3 halfSize, UnrealSharp.Rotator orientation, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BoxTraceSingleForObjects_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleForObjects_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleForObjects_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleForObjects_End_Offset), 0, null, end);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleForObjects_HalfSize_Offset), 0, null, halfSize);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleForObjects_Orientation_Offset), 0, null, orientation);
            IntPtr ObjectTypes_NativeBuffer = IntPtr.Add(ParamsBuffer, BoxTraceSingleForObjects_ObjectTypes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery> ObjectTypes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery>(1, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.ToNative, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.FromNative, BoxTraceSingleForObjects_ObjectTypes_ElementSize);
            ObjectTypes_Marshaler.ToNative(ObjectTypes_NativeBuffer, 0, null, objectTypes);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleForObjects_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, BoxTraceSingleForObjects_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, BoxTraceSingleForObjects_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleForObjects_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleForObjects_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleForObjects_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleForObjects_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleForObjects_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BoxTraceSingleForObjects_NativeFunction, ParamsBuffer);
            
            outHit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleForObjects_OutHit_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleForObjects_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:BoxTraceSingleByProfile
    static readonly IntPtr BoxTraceSingleByProfile_NativeFunction;
    static readonly int BoxTraceSingleByProfile_ParamsSize;
    static readonly int BoxTraceSingleByProfile_WorldContextObject_Offset;
    static readonly int BoxTraceSingleByProfile_Start_Offset;
    static readonly int BoxTraceSingleByProfile_End_Offset;
    static readonly int BoxTraceSingleByProfile_HalfSize_Offset;
    static readonly int BoxTraceSingleByProfile_Orientation_Offset;
    static readonly int BoxTraceSingleByProfile_ProfileName_Offset;
    static readonly int BoxTraceSingleByProfile_bTraceComplex_Offset;
    static readonly int BoxTraceSingleByProfile_ActorsToIgnore_Offset;
    static readonly int BoxTraceSingleByProfile_ActorsToIgnore_ElementSize;
    static readonly int BoxTraceSingleByProfile_DrawDebugType_Offset;
    static readonly int BoxTraceSingleByProfile_OutHit_Offset;
    static readonly int BoxTraceSingleByProfile_bIgnoreSelf_Offset;
    static readonly int BoxTraceSingleByProfile_TraceColor_Offset;
    static readonly int BoxTraceSingleByProfile_TraceHitColor_Offset;
    static readonly int BoxTraceSingleByProfile_DrawTime_Offset;
    static readonly int BoxTraceSingleByProfile_ReturnValue_Offset;
    
    public static bool BoxTraceSingleByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.DoubleNumerics.Vector3 halfSize, UnrealSharp.Rotator orientation, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return BoxTraceSingleByProfile(worldContextObject, start, end, halfSize, orientation, profileName, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor);
    }
    
    public static bool BoxTraceSingleByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.DoubleNumerics.Vector3 halfSize, UnrealSharp.Rotator orientation, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return BoxTraceSingleByProfile(worldContextObject, start, end, halfSize, orientation, profileName, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool BoxTraceSingleByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.DoubleNumerics.Vector3 halfSize, UnrealSharp.Rotator orientation, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BoxTraceSingleByProfile_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleByProfile_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleByProfile_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleByProfile_End_Offset), 0, null, end);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleByProfile_HalfSize_Offset), 0, null, halfSize);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleByProfile_Orientation_Offset), 0, null, orientation);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleByProfile_ProfileName_Offset), 0, null, profileName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleByProfile_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, BoxTraceSingleByProfile_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, BoxTraceSingleByProfile_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleByProfile_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleByProfile_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleByProfile_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleByProfile_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleByProfile_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BoxTraceSingleByProfile_NativeFunction, ParamsBuffer);
            
            outHit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleByProfile_OutHit_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BoxTraceSingleByProfile_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:BoxTraceSingle
    static readonly IntPtr BoxTraceSingle_NativeFunction;
    static readonly int BoxTraceSingle_ParamsSize;
    static readonly int BoxTraceSingle_WorldContextObject_Offset;
    static readonly int BoxTraceSingle_Start_Offset;
    static readonly int BoxTraceSingle_End_Offset;
    static readonly int BoxTraceSingle_HalfSize_Offset;
    static readonly int BoxTraceSingle_Orientation_Offset;
    static readonly int BoxTraceSingle_TraceChannel_Offset;
    static readonly int BoxTraceSingle_bTraceComplex_Offset;
    static readonly int BoxTraceSingle_ActorsToIgnore_Offset;
    static readonly int BoxTraceSingle_ActorsToIgnore_ElementSize;
    static readonly int BoxTraceSingle_DrawDebugType_Offset;
    static readonly int BoxTraceSingle_OutHit_Offset;
    static readonly int BoxTraceSingle_bIgnoreSelf_Offset;
    static readonly int BoxTraceSingle_TraceColor_Offset;
    static readonly int BoxTraceSingle_TraceHitColor_Offset;
    static readonly int BoxTraceSingle_DrawTime_Offset;
    static readonly int BoxTraceSingle_ReturnValue_Offset;
    
    public static bool BoxTraceSingle(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.DoubleNumerics.Vector3 halfSize, UnrealSharp.Rotator orientation, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return BoxTraceSingle(worldContextObject, start, end, halfSize, orientation, traceChannel, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor);
    }
    
    public static bool BoxTraceSingle(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.DoubleNumerics.Vector3 halfSize, UnrealSharp.Rotator orientation, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return BoxTraceSingle(worldContextObject, start, end, halfSize, orientation, traceChannel, bTraceComplex, actorsToIgnore, drawDebugType, out outHit, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool BoxTraceSingle(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.DoubleNumerics.Vector3 halfSize, UnrealSharp.Rotator orientation, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out UnrealSharp.Engine.HitResult outHit, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BoxTraceSingle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingle_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingle_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingle_End_Offset), 0, null, end);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingle_HalfSize_Offset), 0, null, halfSize);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingle_Orientation_Offset), 0, null, orientation);
            BlittableMarshaller<UnrealSharp.Engine.ETraceTypeQuery>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingle_TraceChannel_Offset), 0, null, traceChannel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingle_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, BoxTraceSingle_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, BoxTraceSingle_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingle_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingle_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingle_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingle_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceSingle_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BoxTraceSingle_NativeFunction, ParamsBuffer);
            
            outHit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, BoxTraceSingle_OutHit_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BoxTraceSingle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:BoxTraceMultiForObjects
    static readonly IntPtr BoxTraceMultiForObjects_NativeFunction;
    static readonly int BoxTraceMultiForObjects_ParamsSize;
    static readonly int BoxTraceMultiForObjects_WorldContextObject_Offset;
    static readonly int BoxTraceMultiForObjects_Start_Offset;
    static readonly int BoxTraceMultiForObjects_End_Offset;
    static readonly int BoxTraceMultiForObjects_HalfSize_Offset;
    static readonly int BoxTraceMultiForObjects_Orientation_Offset;
    static readonly int BoxTraceMultiForObjects_ObjectTypes_Offset;
    static readonly int BoxTraceMultiForObjects_ObjectTypes_ElementSize;
    static readonly int BoxTraceMultiForObjects_bTraceComplex_Offset;
    static readonly int BoxTraceMultiForObjects_ActorsToIgnore_Offset;
    static readonly int BoxTraceMultiForObjects_ActorsToIgnore_ElementSize;
    static readonly int BoxTraceMultiForObjects_DrawDebugType_Offset;
    static readonly int BoxTraceMultiForObjects_OutHits_Offset;
    static readonly int BoxTraceMultiForObjects_OutHits_ElementSize;
    static readonly int BoxTraceMultiForObjects_bIgnoreSelf_Offset;
    static readonly int BoxTraceMultiForObjects_TraceColor_Offset;
    static readonly int BoxTraceMultiForObjects_TraceHitColor_Offset;
    static readonly int BoxTraceMultiForObjects_DrawTime_Offset;
    static readonly int BoxTraceMultiForObjects_ReturnValue_Offset;
    
    public static bool BoxTraceMultiForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.DoubleNumerics.Vector3 halfSize, UnrealSharp.Rotator orientation, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return BoxTraceMultiForObjects(worldContextObject, start, end, halfSize, orientation, objectTypes, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor);
    }
    
    public static bool BoxTraceMultiForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.DoubleNumerics.Vector3 halfSize, UnrealSharp.Rotator orientation, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return BoxTraceMultiForObjects(worldContextObject, start, end, halfSize, orientation, objectTypes, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool BoxTraceMultiForObjects(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.DoubleNumerics.Vector3 halfSize, UnrealSharp.Rotator orientation, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BoxTraceMultiForObjects_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiForObjects_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiForObjects_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiForObjects_End_Offset), 0, null, end);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiForObjects_HalfSize_Offset), 0, null, halfSize);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiForObjects_Orientation_Offset), 0, null, orientation);
            IntPtr ObjectTypes_NativeBuffer = IntPtr.Add(ParamsBuffer, BoxTraceMultiForObjects_ObjectTypes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery> ObjectTypes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery>(1, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.ToNative, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.FromNative, BoxTraceMultiForObjects_ObjectTypes_ElementSize);
            ObjectTypes_Marshaler.ToNative(ObjectTypes_NativeBuffer, 0, null, objectTypes);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiForObjects_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, BoxTraceMultiForObjects_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, BoxTraceMultiForObjects_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiForObjects_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiForObjects_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiForObjects_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiForObjects_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiForObjects_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BoxTraceMultiForObjects_NativeFunction, ParamsBuffer);
            
            IntPtr OutHits_NativeBuffer = IntPtr.Add(ParamsBuffer, BoxTraceMultiForObjects_OutHits_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> OutHits_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> (1, UnrealSharp.Engine.HitResultMarshaler.ToNative, UnrealSharp.Engine.HitResultMarshaler.FromNative, BoxTraceMultiForObjects_OutHits_ElementSize);
            outHits = OutHits_Marshaler.FromNative(OutHits_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult>.DestructInstance(OutHits_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiForObjects_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:BoxTraceMultiByProfile
    static readonly IntPtr BoxTraceMultiByProfile_NativeFunction;
    static readonly int BoxTraceMultiByProfile_ParamsSize;
    static readonly int BoxTraceMultiByProfile_WorldContextObject_Offset;
    static readonly int BoxTraceMultiByProfile_Start_Offset;
    static readonly int BoxTraceMultiByProfile_End_Offset;
    static readonly int BoxTraceMultiByProfile_HalfSize_Offset;
    static readonly int BoxTraceMultiByProfile_Orientation_Offset;
    static readonly int BoxTraceMultiByProfile_ProfileName_Offset;
    static readonly int BoxTraceMultiByProfile_bTraceComplex_Offset;
    static readonly int BoxTraceMultiByProfile_ActorsToIgnore_Offset;
    static readonly int BoxTraceMultiByProfile_ActorsToIgnore_ElementSize;
    static readonly int BoxTraceMultiByProfile_DrawDebugType_Offset;
    static readonly int BoxTraceMultiByProfile_OutHits_Offset;
    static readonly int BoxTraceMultiByProfile_OutHits_ElementSize;
    static readonly int BoxTraceMultiByProfile_bIgnoreSelf_Offset;
    static readonly int BoxTraceMultiByProfile_TraceColor_Offset;
    static readonly int BoxTraceMultiByProfile_TraceHitColor_Offset;
    static readonly int BoxTraceMultiByProfile_DrawTime_Offset;
    static readonly int BoxTraceMultiByProfile_ReturnValue_Offset;
    
    public static bool BoxTraceMultiByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.DoubleNumerics.Vector3 halfSize, UnrealSharp.Rotator orientation, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return BoxTraceMultiByProfile(worldContextObject, start, end, halfSize, orientation, profileName, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor);
    }
    
    public static bool BoxTraceMultiByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.DoubleNumerics.Vector3 halfSize, UnrealSharp.Rotator orientation, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return BoxTraceMultiByProfile(worldContextObject, start, end, halfSize, orientation, profileName, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool BoxTraceMultiByProfile(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.DoubleNumerics.Vector3 halfSize, UnrealSharp.Rotator orientation, Name profileName, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BoxTraceMultiByProfile_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiByProfile_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiByProfile_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiByProfile_End_Offset), 0, null, end);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiByProfile_HalfSize_Offset), 0, null, halfSize);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiByProfile_Orientation_Offset), 0, null, orientation);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiByProfile_ProfileName_Offset), 0, null, profileName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiByProfile_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, BoxTraceMultiByProfile_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, BoxTraceMultiByProfile_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiByProfile_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiByProfile_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiByProfile_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiByProfile_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiByProfile_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BoxTraceMultiByProfile_NativeFunction, ParamsBuffer);
            
            IntPtr OutHits_NativeBuffer = IntPtr.Add(ParamsBuffer, BoxTraceMultiByProfile_OutHits_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> OutHits_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> (1, UnrealSharp.Engine.HitResultMarshaler.ToNative, UnrealSharp.Engine.HitResultMarshaler.FromNative, BoxTraceMultiByProfile_OutHits_ElementSize);
            outHits = OutHits_Marshaler.FromNative(OutHits_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult>.DestructInstance(OutHits_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BoxTraceMultiByProfile_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:BoxTraceMulti
    static readonly IntPtr BoxTraceMulti_NativeFunction;
    static readonly int BoxTraceMulti_ParamsSize;
    static readonly int BoxTraceMulti_WorldContextObject_Offset;
    static readonly int BoxTraceMulti_Start_Offset;
    static readonly int BoxTraceMulti_End_Offset;
    static readonly int BoxTraceMulti_HalfSize_Offset;
    static readonly int BoxTraceMulti_Orientation_Offset;
    static readonly int BoxTraceMulti_TraceChannel_Offset;
    static readonly int BoxTraceMulti_bTraceComplex_Offset;
    static readonly int BoxTraceMulti_ActorsToIgnore_Offset;
    static readonly int BoxTraceMulti_ActorsToIgnore_ElementSize;
    static readonly int BoxTraceMulti_DrawDebugType_Offset;
    static readonly int BoxTraceMulti_OutHits_Offset;
    static readonly int BoxTraceMulti_OutHits_ElementSize;
    static readonly int BoxTraceMulti_bIgnoreSelf_Offset;
    static readonly int BoxTraceMulti_TraceColor_Offset;
    static readonly int BoxTraceMulti_TraceHitColor_Offset;
    static readonly int BoxTraceMulti_DrawTime_Offset;
    static readonly int BoxTraceMulti_ReturnValue_Offset;
    
    public static bool BoxTraceMulti(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.DoubleNumerics.Vector3 halfSize, UnrealSharp.Rotator orientation, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf)
    {
        UnrealSharp.CoreUObject.LinearColor traceColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=1.000000f,
            G=0.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return BoxTraceMulti(worldContextObject, start, end, halfSize, orientation, traceChannel, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor);
    }
    
    public static bool BoxTraceMulti(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.DoubleNumerics.Vector3 halfSize, UnrealSharp.Rotator orientation, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor)
    {
        UnrealSharp.CoreUObject.LinearColor traceHitColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=1.000000f,
            B=0.000000f,
            A=1.000000f,
        };
        return BoxTraceMulti(worldContextObject, start, end, halfSize, orientation, traceChannel, bTraceComplex, actorsToIgnore, drawDebugType, out outHits, bIgnoreSelf, traceColor, traceHitColor);
    }
    
    public static bool BoxTraceMulti(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 start, System.DoubleNumerics.Vector3 end, System.DoubleNumerics.Vector3 halfSize, UnrealSharp.Rotator orientation, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, UnrealSharp.Engine.EDrawDebugTrace drawDebugType, out System.Collections.Generic.IList<UnrealSharp.Engine.HitResult> outHits, bool bIgnoreSelf, UnrealSharp.CoreUObject.LinearColor traceColor, UnrealSharp.CoreUObject.LinearColor traceHitColor, float drawTime = 5.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BoxTraceMulti_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMulti_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMulti_Start_Offset), 0, null, start);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMulti_End_Offset), 0, null, end);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMulti_HalfSize_Offset), 0, null, halfSize);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMulti_Orientation_Offset), 0, null, orientation);
            BlittableMarshaller<UnrealSharp.Engine.ETraceTypeQuery>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMulti_TraceChannel_Offset), 0, null, traceChannel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMulti_bTraceComplex_Offset), 0, null, bTraceComplex);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, BoxTraceMulti_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, BoxTraceMulti_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            BlittableMarshaller<UnrealSharp.Engine.EDrawDebugTrace>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMulti_DrawDebugType_Offset), 0, null, drawDebugType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMulti_bIgnoreSelf_Offset), 0, null, bIgnoreSelf);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMulti_TraceColor_Offset), 0, null, traceColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMulti_TraceHitColor_Offset), 0, null, traceHitColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, BoxTraceMulti_DrawTime_Offset), 0, null, drawTime);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BoxTraceMulti_NativeFunction, ParamsBuffer);
            
            IntPtr OutHits_NativeBuffer = IntPtr.Add(ParamsBuffer, BoxTraceMulti_OutHits_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> OutHits_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult> (1, UnrealSharp.Engine.HitResultMarshaler.ToNative, UnrealSharp.Engine.HitResultMarshaler.FromNative, BoxTraceMulti_OutHits_ElementSize);
            outHits = OutHits_Marshaler.FromNative(OutHits_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.HitResult>.DestructInstance(OutHits_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BoxTraceMulti_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:BoxOverlapComponents
    static readonly IntPtr BoxOverlapComponents_NativeFunction;
    static readonly int BoxOverlapComponents_ParamsSize;
    static readonly int BoxOverlapComponents_WorldContextObject_Offset;
    static readonly int BoxOverlapComponents_BoxPos_Offset;
    static readonly int BoxOverlapComponents_Extent_Offset;
    static readonly int BoxOverlapComponents_ObjectTypes_Offset;
    static readonly int BoxOverlapComponents_ObjectTypes_ElementSize;
    static readonly int BoxOverlapComponents_ComponentClassFilter_Offset;
    static readonly int BoxOverlapComponents_ActorsToIgnore_Offset;
    static readonly int BoxOverlapComponents_ActorsToIgnore_ElementSize;
    static readonly int BoxOverlapComponents_OutComponents_Offset;
    static readonly int BoxOverlapComponents_OutComponents_ElementSize;
    static readonly int BoxOverlapComponents_ReturnValue_Offset;
    
    public static bool BoxOverlapComponents(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 boxPos, System.DoubleNumerics.Vector3 extent, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, SubclassOf<UnrealSharp.CoreUObject.Object> componentClassFilter, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, out System.Collections.Generic.IList<UnrealSharp.Engine.PrimitiveComponent> outComponents)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BoxOverlapComponents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, BoxOverlapComponents_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxOverlapComponents_BoxPos_Offset), 0, null, boxPos);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxOverlapComponents_Extent_Offset), 0, null, extent);
            IntPtr ObjectTypes_NativeBuffer = IntPtr.Add(ParamsBuffer, BoxOverlapComponents_ObjectTypes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery> ObjectTypes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery>(1, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.ToNative, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.FromNative, BoxOverlapComponents_ObjectTypes_ElementSize);
            ObjectTypes_Marshaler.ToNative(ObjectTypes_NativeBuffer, 0, null, objectTypes);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, BoxOverlapComponents_ComponentClassFilter_Offset), 0, null, componentClassFilter);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, BoxOverlapComponents_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, BoxOverlapComponents_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BoxOverlapComponents_NativeFunction, ParamsBuffer);
            
            IntPtr OutComponents_NativeBuffer = IntPtr.Add(ParamsBuffer, BoxOverlapComponents_OutComponents_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent> OutComponents_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent> (1, ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative, ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.FromNative, BoxOverlapComponents_OutComponents_ElementSize);
            outComponents = OutComponents_Marshaler.FromNative(OutComponents_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent>.DestructInstance(OutComponents_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BoxOverlapComponents_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:BoxOverlapActors
    static readonly IntPtr BoxOverlapActors_NativeFunction;
    static readonly int BoxOverlapActors_ParamsSize;
    static readonly int BoxOverlapActors_WorldContextObject_Offset;
    static readonly int BoxOverlapActors_BoxPos_Offset;
    static readonly int BoxOverlapActors_BoxExtent_Offset;
    static readonly int BoxOverlapActors_ObjectTypes_Offset;
    static readonly int BoxOverlapActors_ObjectTypes_ElementSize;
    static readonly int BoxOverlapActors_ActorClassFilter_Offset;
    static readonly int BoxOverlapActors_ActorsToIgnore_Offset;
    static readonly int BoxOverlapActors_ActorsToIgnore_ElementSize;
    static readonly int BoxOverlapActors_OutActors_Offset;
    static readonly int BoxOverlapActors_OutActors_ElementSize;
    static readonly int BoxOverlapActors_ReturnValue_Offset;
    
    public static bool BoxOverlapActors(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 boxPos, System.DoubleNumerics.Vector3 boxExtent, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, SubclassOf<UnrealSharp.CoreUObject.Object> actorClassFilter, System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actorsToIgnore, out System.Collections.Generic.IList<UnrealSharp.Engine.Actor> outActors)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BoxOverlapActors_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, BoxOverlapActors_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxOverlapActors_BoxPos_Offset), 0, null, boxPos);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, BoxOverlapActors_BoxExtent_Offset), 0, null, boxExtent);
            IntPtr ObjectTypes_NativeBuffer = IntPtr.Add(ParamsBuffer, BoxOverlapActors_ObjectTypes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery> ObjectTypes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery>(1, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.ToNative, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.FromNative, BoxOverlapActors_ObjectTypes_ElementSize);
            ObjectTypes_Marshaler.ToNative(ObjectTypes_NativeBuffer, 0, null, objectTypes);
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, BoxOverlapActors_ActorClassFilter_Offset), 0, null, actorClassFilter);
            IntPtr ActorsToIgnore_NativeBuffer = IntPtr.Add(ParamsBuffer, BoxOverlapActors_ActorsToIgnore_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ActorsToIgnore_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, BoxOverlapActors_ActorsToIgnore_ElementSize);
            ActorsToIgnore_Marshaler.ToNative(ActorsToIgnore_NativeBuffer, 0, null, actorsToIgnore);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, BoxOverlapActors_NativeFunction, ParamsBuffer);
            
            IntPtr OutActors_NativeBuffer = IntPtr.Add(ParamsBuffer, BoxOverlapActors_OutActors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> OutActors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, BoxOverlapActors_OutActors_ElementSize);
            outActors = OutActors_Marshaler.FromNative(OutActors_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(OutActors_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BoxOverlapActors_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.KismetSystemLibrary:AddFloatHistorySample
    static readonly IntPtr AddFloatHistorySample_NativeFunction;
    static readonly int AddFloatHistorySample_ParamsSize;
    static readonly int AddFloatHistorySample_Value_Offset;
    static readonly int AddFloatHistorySample_FloatHistory_Offset;
    static readonly int AddFloatHistorySample_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.DebugFloatHistory AddFloatHistorySample(float value, UnrealSharp.Engine.DebugFloatHistory floatHistory)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddFloatHistorySample_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddFloatHistorySample_Value_Offset), 0, null, value);
            UnrealSharp.Engine.DebugFloatHistoryMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AddFloatHistorySample_FloatHistory_Offset), 0, null, floatHistory);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddFloatHistorySample_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.DebugFloatHistory returnValue;
            returnValue = UnrealSharp.Engine.DebugFloatHistoryMarshaler.FromNative(IntPtr.Add(ParamsBuffer, AddFloatHistorySample_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
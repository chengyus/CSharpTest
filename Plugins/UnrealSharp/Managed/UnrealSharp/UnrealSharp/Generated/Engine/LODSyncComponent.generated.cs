// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class LODSyncComponent : UnrealSharp.Engine.ActorComponent
{
    
    static LODSyncComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("LODSyncComponent");
        
        NumLODs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NumLODs");
        ForcedLOD_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ForcedLOD");
        MinLOD_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinLOD");
        ComponentsToSync_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ComponentsToSync");
        ComponentsToSync_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "ComponentsToSync");
        
        GetLODSyncDebugText_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLODSyncDebugText");
        GetLODSyncDebugText_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLODSyncDebugText_NativeFunction);
        GetLODSyncDebugText_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLODSyncDebugText_NativeFunction, "ReturnValue");
        
        
    }
    
    protected LODSyncComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // IntProperty /Script/Engine.LODSyncComponent:NumLODs
    static readonly int NumLODs_Offset;
    
    public int NumLODs
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, NumLODs_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, NumLODs_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.LODSyncComponent:ForcedLOD
    static readonly int ForcedLOD_Offset;
    
    public int ForcedLOD
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, ForcedLOD_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, ForcedLOD_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.LODSyncComponent:MinLOD
    static readonly int MinLOD_Offset;
    
    public int MinLOD
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, MinLOD_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, MinLOD_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/Engine.LODSyncComponent:ComponentsToSync
    static readonly int ComponentsToSync_Offset;
    static readonly IntPtr ComponentsToSync_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.ComponentSync> ComponentsToSync_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.ComponentSync> ComponentsToSync
    {
        get
        {
            if(ComponentsToSync_Wrapper == null)
            {
                ComponentsToSync_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.ComponentSync>(1, ComponentsToSync_NativeProperty, UnrealSharp.Engine.ComponentSyncMarshaler.ToNative, UnrealSharp.Engine.ComponentSyncMarshaler.FromNative);
            }
            
            return ComponentsToSync_Wrapper.FromNative(IntPtr.Add(NativeObject,ComponentsToSync_Offset),0,this);
        }
    }
    
    // Function /Script/Engine.LODSyncComponent:GetLODSyncDebugText
    static readonly IntPtr GetLODSyncDebugText_NativeFunction;
    static readonly int GetLODSyncDebugText_ParamsSize;
    static readonly int GetLODSyncDebugText_ReturnValue_Offset;
    
    public string GetLODSyncDebugText()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLODSyncDebugText_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLODSyncDebugText_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetLODSyncDebugText_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    
}
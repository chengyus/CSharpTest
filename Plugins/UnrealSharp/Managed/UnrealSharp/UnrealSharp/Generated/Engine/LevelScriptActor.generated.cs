// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class LevelScriptActor : UnrealSharp.Engine.Actor
{
    
    static LevelScriptActor()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("LevelScriptActor");
        
        
        SetCinematicMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCinematicMode");
        SetCinematicMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCinematicMode_NativeFunction);
        SetCinematicMode_bCinematicMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCinematicMode_NativeFunction, "bCinematicMode");
        SetCinematicMode_bHidePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCinematicMode_NativeFunction, "bHidePlayer");
        SetCinematicMode_bAffectsHUD_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCinematicMode_NativeFunction, "bAffectsHUD");
        SetCinematicMode_bAffectsMovement_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCinematicMode_NativeFunction, "bAffectsMovement");
        SetCinematicMode_bAffectsTurning_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCinematicMode_NativeFunction, "bAffectsTurning");
        RemoteEvent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoteEvent");
        RemoteEvent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoteEvent_NativeFunction);
        RemoteEvent_EventName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoteEvent_NativeFunction, "EventName");
        RemoteEvent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoteEvent_NativeFunction, "ReturnValue");
        
        IntPtr WorldOriginLocationChanged_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "WorldOriginLocationChanged");
        WorldOriginLocationChanged_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(WorldOriginLocationChanged_NativeFunction);
        WorldOriginLocationChanged_OldOriginLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WorldOriginLocationChanged_NativeFunction, "OldOriginLocation");
        WorldOriginLocationChanged_NewOriginLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WorldOriginLocationChanged_NativeFunction, "NewOriginLocation");
        
        
    }
    
    protected LevelScriptActor(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.LevelScriptActor:SetCinematicMode
    static readonly IntPtr SetCinematicMode_NativeFunction;
    static readonly int SetCinematicMode_ParamsSize;
    static readonly int SetCinematicMode_bCinematicMode_Offset;
    static readonly int SetCinematicMode_bHidePlayer_Offset;
    static readonly int SetCinematicMode_bAffectsHUD_Offset;
    static readonly int SetCinematicMode_bAffectsMovement_Offset;
    static readonly int SetCinematicMode_bAffectsTurning_Offset;
    
    public void SetCinematicMode(bool bCinematicMode, bool bHidePlayer = true, bool bAffectsHUD = true, bool bAffectsMovement = false, bool bAffectsTurning = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCinematicMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCinematicMode_bCinematicMode_Offset), 0, null, bCinematicMode);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCinematicMode_bHidePlayer_Offset), 0, null, bHidePlayer);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCinematicMode_bAffectsHUD_Offset), 0, null, bAffectsHUD);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCinematicMode_bAffectsMovement_Offset), 0, null, bAffectsMovement);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCinematicMode_bAffectsTurning_Offset), 0, null, bAffectsTurning);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCinematicMode_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LevelScriptActor:RemoteEvent
    static readonly IntPtr RemoteEvent_NativeFunction;
    static readonly int RemoteEvent_ParamsSize;
    static readonly int RemoteEvent_EventName_Offset;
    static readonly int RemoteEvent_ReturnValue_Offset;
    
    public bool RemoteEvent(Name eventName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoteEvent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RemoteEvent_EventName_Offset), 0, null, eventName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoteEvent_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RemoteEvent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.LevelScriptActor:WorldOriginLocationChanged
    IntPtr WorldOriginLocationChanged_NativeFunction;
    static readonly int WorldOriginLocationChanged_ParamsSize;
    static readonly int WorldOriginLocationChanged_OldOriginLocation_Offset;
    static readonly int WorldOriginLocationChanged_NewOriginLocation_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void WorldOriginLocationChanged(UnrealSharp.CoreUObject.IntVector oldOriginLocation, UnrealSharp.CoreUObject.IntVector newOriginLocation)
    {
        unsafe
        {
            if (WorldOriginLocationChanged_NativeFunction == IntPtr.Zero)
            {
                WorldOriginLocationChanged_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "WorldOriginLocationChanged");
            }
            byte* ParamsBufferAllocation = stackalloc byte[WorldOriginLocationChanged_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.IntVector>.ToNative(IntPtr.Add(ParamsBuffer, WorldOriginLocationChanged_OldOriginLocation_Offset), 0, null, oldOriginLocation);
            BlittableMarshaller<UnrealSharp.CoreUObject.IntVector>.ToNative(IntPtr.Add(ParamsBuffer, WorldOriginLocationChanged_NewOriginLocation_Offset), 0, null, newOriginLocation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, WorldOriginLocationChanged_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void WorldOriginLocationChanged_Implementation(UnrealSharp.CoreUObject.IntVector oldOriginLocation, UnrealSharp.CoreUObject.IntVector newOriginLocation)
    {
    }
    void Invoke_WorldOriginLocationChanged(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.CoreUObject.IntVector oldOriginLocation = BlittableMarshaller<UnrealSharp.CoreUObject.IntVector>.FromNative(IntPtr.Add(buffer, WorldOriginLocationChanged_OldOriginLocation_Offset), 0, null);
            UnrealSharp.CoreUObject.IntVector newOriginLocation = BlittableMarshaller<UnrealSharp.CoreUObject.IntVector>.FromNative(IntPtr.Add(buffer, WorldOriginLocationChanged_NewOriginLocation_Offset), 0, null);
            WorldOriginLocationChanged_Implementation(oldOriginLocation, newOriginLocation);
        }
    }
    
    // Function /Script/Engine.LevelScriptActor:LevelReset
    IntPtr LevelReset_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void LevelReset()
    {
        unsafe
        {
            if (LevelReset_NativeFunction == IntPtr.Zero)
            {
                LevelReset_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "LevelReset");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, LevelReset_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void LevelReset_Implementation()
    {
    }
    void Invoke_LevelReset(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            LevelReset_Implementation();
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
abstract public partial class LevelStreaming : UnrealSharp.CoreUObject.Object
{
    
    static LevelStreaming()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("LevelStreaming");
        
        WorldAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WorldAsset");
        StreamingPriority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StreamingPriority");
        LevelTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LevelTransform");
        LevelLODIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LevelLODIndex");
        bShouldBeVisible_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bShouldBeVisible");
        bShouldBeVisible_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bShouldBeVisible");
        bShouldBeLoaded_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bShouldBeLoaded");
        bShouldBeLoaded_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bShouldBeLoaded");
        bShouldBlockOnLoad_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bShouldBlockOnLoad");
        bShouldBlockOnLoad_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bShouldBlockOnLoad");
        bShouldBlockOnUnload_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bShouldBlockOnUnload");
        bShouldBlockOnUnload_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bShouldBlockOnUnload");
        bDisableDistanceStreaming_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bDisableDistanceStreaming");
        bDisableDistanceStreaming_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bDisableDistanceStreaming");
        
        SetIsRequestingUnloadAndRemoval_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIsRequestingUnloadAndRemoval");
        SetIsRequestingUnloadAndRemoval_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIsRequestingUnloadAndRemoval_NativeFunction);
        SetIsRequestingUnloadAndRemoval_bInIsRequestingUnloadAndRemoval_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIsRequestingUnloadAndRemoval_NativeFunction, "bInIsRequestingUnloadAndRemoval");
        IsStreamingStatePending_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsStreamingStatePending");
        IsStreamingStatePending_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsStreamingStatePending_NativeFunction);
        IsStreamingStatePending_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsStreamingStatePending_NativeFunction, "ReturnValue");
        IsLevelVisible_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsLevelVisible");
        IsLevelVisible_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsLevelVisible_NativeFunction);
        IsLevelVisible_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLevelVisible_NativeFunction, "ReturnValue");
        IsLevelLoaded_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsLevelLoaded");
        IsLevelLoaded_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsLevelLoaded_NativeFunction);
        IsLevelLoaded_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLevelLoaded_NativeFunction, "ReturnValue");
        GetWorldAssetPackageFName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWorldAssetPackageFName");
        GetWorldAssetPackageFName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWorldAssetPackageFName_NativeFunction);
        GetWorldAssetPackageFName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldAssetPackageFName_NativeFunction, "ReturnValue");
        GetLoadedLevel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLoadedLevel");
        GetLoadedLevel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLoadedLevel_NativeFunction);
        GetLoadedLevel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLoadedLevel_NativeFunction, "ReturnValue");
        GetIsRequestingUnloadAndRemoval_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetIsRequestingUnloadAndRemoval");
        GetIsRequestingUnloadAndRemoval_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetIsRequestingUnloadAndRemoval_NativeFunction);
        GetIsRequestingUnloadAndRemoval_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetIsRequestingUnloadAndRemoval_NativeFunction, "ReturnValue");
        CreateInstance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateInstance");
        CreateInstance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateInstance_NativeFunction);
        CreateInstance_UniqueInstanceName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateInstance_NativeFunction, "UniqueInstanceName");
        CreateInstance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateInstance_NativeFunction, "ReturnValue");
        
        
    }
    
    protected LevelStreaming(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // SoftObjectProperty /Script/Engine.LevelStreaming:WorldAsset
    static readonly int WorldAsset_Offset;
    
    public SoftObject<UnrealSharp.Engine.World> WorldAsset
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<SoftObject<UnrealSharp.Engine.World>>.FromNative(IntPtr.Add(NativeObject, WorldAsset_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Engine.LevelStreaming:StreamingPriority
    static readonly int StreamingPriority_Offset;
    
    public int StreamingPriority
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, StreamingPriority_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, StreamingPriority_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.LevelStreaming:LevelTransform
    static readonly int LevelTransform_Offset;
    
    public UnrealSharp.Transform LevelTransform
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(NativeObject, LevelTransform_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(NativeObject, LevelTransform_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.LevelStreaming:LevelLODIndex
    static readonly int LevelLODIndex_Offset;
    
    public int LevelLODIndex
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, LevelLODIndex_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, LevelLODIndex_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.LevelStreaming:bShouldBeVisible
    static readonly int bShouldBeVisible_Offset;
    static readonly IntPtr bShouldBeVisible_NativeProperty;
    
    public bool bShouldBeVisible
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bShouldBeVisible_NativeProperty, bShouldBeVisible_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bShouldBeVisible_NativeProperty, bShouldBeVisible_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.LevelStreaming:bShouldBeLoaded
    static readonly int bShouldBeLoaded_Offset;
    static readonly IntPtr bShouldBeLoaded_NativeProperty;
    
    public bool bShouldBeLoaded
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bShouldBeLoaded_NativeProperty, bShouldBeLoaded_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bShouldBeLoaded_NativeProperty, bShouldBeLoaded_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.LevelStreaming:bShouldBlockOnLoad
    static readonly int bShouldBlockOnLoad_Offset;
    static readonly IntPtr bShouldBlockOnLoad_NativeProperty;
    
    public bool bShouldBlockOnLoad
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bShouldBlockOnLoad_NativeProperty, bShouldBlockOnLoad_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bShouldBlockOnLoad_NativeProperty, bShouldBlockOnLoad_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.LevelStreaming:bShouldBlockOnUnload
    static readonly int bShouldBlockOnUnload_Offset;
    static readonly IntPtr bShouldBlockOnUnload_NativeProperty;
    
    public bool bShouldBlockOnUnload
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bShouldBlockOnUnload_NativeProperty, bShouldBlockOnUnload_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bShouldBlockOnUnload_NativeProperty, bShouldBlockOnUnload_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.LevelStreaming:bDisableDistanceStreaming
    static readonly int bDisableDistanceStreaming_Offset;
    static readonly IntPtr bDisableDistanceStreaming_NativeProperty;
    
    public bool bDisableDistanceStreaming
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bDisableDistanceStreaming_NativeProperty, bDisableDistanceStreaming_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bDisableDistanceStreaming_NativeProperty, bDisableDistanceStreaming_Offset, value);
        }
    }
    
    // Function /Script/Engine.LevelStreaming:SetIsRequestingUnloadAndRemoval
    static readonly IntPtr SetIsRequestingUnloadAndRemoval_NativeFunction;
    static readonly int SetIsRequestingUnloadAndRemoval_ParamsSize;
    static readonly int SetIsRequestingUnloadAndRemoval_bInIsRequestingUnloadAndRemoval_Offset;
    
    public void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIsRequestingUnloadAndRemoval_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetIsRequestingUnloadAndRemoval_bInIsRequestingUnloadAndRemoval_Offset), 0, null, bInIsRequestingUnloadAndRemoval);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIsRequestingUnloadAndRemoval_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LevelStreaming:IsStreamingStatePending
    static readonly IntPtr IsStreamingStatePending_NativeFunction;
    static readonly int IsStreamingStatePending_ParamsSize;
    static readonly int IsStreamingStatePending_ReturnValue_Offset;
    
    public bool IsStreamingStatePending()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsStreamingStatePending_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsStreamingStatePending_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsStreamingStatePending_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.LevelStreaming:IsLevelVisible
    static readonly IntPtr IsLevelVisible_NativeFunction;
    static readonly int IsLevelVisible_ParamsSize;
    static readonly int IsLevelVisible_ReturnValue_Offset;
    
    public bool IsLevelVisible()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsLevelVisible_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsLevelVisible_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsLevelVisible_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.LevelStreaming:IsLevelLoaded
    static readonly IntPtr IsLevelLoaded_NativeFunction;
    static readonly int IsLevelLoaded_ParamsSize;
    static readonly int IsLevelLoaded_ReturnValue_Offset;
    
    public bool IsLevelLoaded()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsLevelLoaded_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsLevelLoaded_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsLevelLoaded_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.LevelStreaming:GetWorldAssetPackageFName
    static readonly IntPtr GetWorldAssetPackageFName_NativeFunction;
    static readonly int GetWorldAssetPackageFName_ParamsSize;
    static readonly int GetWorldAssetPackageFName_ReturnValue_Offset;
    
    public Name GetWorldAssetPackageFName()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWorldAssetPackageFName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetWorldAssetPackageFName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetWorldAssetPackageFName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.LevelStreaming:GetLoadedLevel
    static readonly IntPtr GetLoadedLevel_NativeFunction;
    static readonly int GetLoadedLevel_ParamsSize;
    static readonly int GetLoadedLevel_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Level GetLoadedLevel()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLoadedLevel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLoadedLevel_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Level returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Level>.FromNative(IntPtr.Add(ParamsBuffer, GetLoadedLevel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.LevelStreaming:GetIsRequestingUnloadAndRemoval
    static readonly IntPtr GetIsRequestingUnloadAndRemoval_NativeFunction;
    static readonly int GetIsRequestingUnloadAndRemoval_ParamsSize;
    static readonly int GetIsRequestingUnloadAndRemoval_ReturnValue_Offset;
    
    public bool GetIsRequestingUnloadAndRemoval()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetIsRequestingUnloadAndRemoval_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetIsRequestingUnloadAndRemoval_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetIsRequestingUnloadAndRemoval_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.LevelStreaming:CreateInstance
    static readonly IntPtr CreateInstance_NativeFunction;
    static readonly int CreateInstance_ParamsSize;
    static readonly int CreateInstance_UniqueInstanceName_Offset;
    static readonly int CreateInstance_ReturnValue_Offset;
    
    public UnrealSharp.Engine.LevelStreaming CreateInstance(string uniqueInstanceName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateInstance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr UniqueInstanceName_NativePtr = IntPtr.Add(ParamsBuffer,CreateInstance_UniqueInstanceName_Offset);
            StringMarshaller.ToNative(UniqueInstanceName_NativePtr,0,null,uniqueInstanceName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreateInstance_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.LevelStreaming returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.LevelStreaming>.FromNative(IntPtr.Add(ParamsBuffer, CreateInstance_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(UniqueInstanceName_NativePtr, 0);
            return returnValue;
        }
    }
    
    
}
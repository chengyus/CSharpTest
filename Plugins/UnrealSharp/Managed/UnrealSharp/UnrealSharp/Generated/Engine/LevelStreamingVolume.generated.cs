// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class LevelStreamingVolume : UnrealSharp.Engine.Volume
{
    
    static LevelStreamingVolume()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("LevelStreamingVolume");
        
        StreamingLevelNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StreamingLevelNames");
        StreamingLevelNames_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "StreamingLevelNames");
        bEditorPreVisOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEditorPreVisOnly");
        bEditorPreVisOnly_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEditorPreVisOnly");
        bDisabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bDisabled");
        bDisabled_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bDisabled");
        StreamingUsage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StreamingUsage");
        
        
        
    }
    
    protected LevelStreamingVolume(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ArrayProperty /Script/Engine.LevelStreamingVolume:StreamingLevelNames
    static readonly int StreamingLevelNames_Offset;
    static readonly IntPtr StreamingLevelNames_NativeProperty;
    UnrealArrayReadOnlyMarshaler<Name> StreamingLevelNames_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<Name> StreamingLevelNames
    {
        get
        {
            if(StreamingLevelNames_Wrapper == null)
            {
                StreamingLevelNames_Wrapper = new UnrealArrayReadOnlyMarshaler<Name>(1, StreamingLevelNames_NativeProperty, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative);
            }
            
            return StreamingLevelNames_Wrapper.FromNative(IntPtr.Add(NativeObject,StreamingLevelNames_Offset),0,this);
        }
    }
    
    // BoolProperty /Script/Engine.LevelStreamingVolume:bEditorPreVisOnly
    static readonly int bEditorPreVisOnly_Offset;
    static readonly IntPtr bEditorPreVisOnly_NativeProperty;
    
    public bool bEditorPreVisOnly
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEditorPreVisOnly_NativeProperty, bEditorPreVisOnly_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bEditorPreVisOnly_NativeProperty, bEditorPreVisOnly_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.LevelStreamingVolume:bDisabled
    static readonly int bDisabled_Offset;
    static readonly IntPtr bDisabled_NativeProperty;
    
    public bool bDisabled
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bDisabled_NativeProperty, bDisabled_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bDisabled_NativeProperty, bDisabled_Offset, value);
        }
    }
    
    // ByteProperty /Script/Engine.LevelStreamingVolume:StreamingUsage
    static readonly int StreamingUsage_Offset;
    
    public UnrealSharp.Engine.EStreamingVolumeUsage StreamingUsage
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EStreamingVolumeUsage>.FromNative(IntPtr.Add(NativeObject, StreamingUsage_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EStreamingVolumeUsage>.ToNative(IntPtr.Add(NativeObject, StreamingUsage_Offset), 0, this, value);
        }
    }
    
    
}
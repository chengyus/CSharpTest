// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
abstract public partial class LightComponent : UnrealSharp.Engine.LightComponentBase
{
    
    static LightComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("LightComponent");
        
        Temperature_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Temperature");
        bUseTemperature_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseTemperature");
        bUseTemperature_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseTemperature");
        SpecularScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SpecularScale");
        ShadowResolutionScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShadowResolutionScale");
        ShadowBias_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShadowBias");
        ShadowSlopeBias_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShadowSlopeBias");
        ShadowSharpen_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShadowSharpen");
        ContactShadowLength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ContactShadowLength");
        ContactShadowLengthInWS_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ContactShadowLengthInWS");
        ContactShadowLengthInWS_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "ContactShadowLengthInWS");
        ContactShadowCastingIntensity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ContactShadowCastingIntensity");
        ContactShadowNonCastingIntensity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ContactShadowNonCastingIntensity");
        CastTranslucentShadows_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CastTranslucentShadows");
        CastTranslucentShadows_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "CastTranslucentShadows");
        bCastShadowsFromCinematicObjectsOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastShadowsFromCinematicObjectsOnly");
        bCastShadowsFromCinematicObjectsOnly_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastShadowsFromCinematicObjectsOnly");
        bForceCachedShadowsForMovablePrimitives_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bForceCachedShadowsForMovablePrimitives");
        bForceCachedShadowsForMovablePrimitives_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bForceCachedShadowsForMovablePrimitives");
        LightingChannels_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LightingChannels");
        LightFunctionMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LightFunctionMaterial");
        LightFunctionScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LightFunctionScale");
        IESTexture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "IESTexture");
        bUseIESBrightness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseIESBrightness");
        bUseIESBrightness_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseIESBrightness");
        IESBrightnessScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "IESBrightnessScale");
        LightFunctionFadeDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LightFunctionFadeDistance");
        DisabledBrightness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DisabledBrightness");
        bEnableLightShaftBloom_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableLightShaftBloom");
        bEnableLightShaftBloom_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableLightShaftBloom");
        BloomScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BloomScale");
        BloomThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BloomThreshold");
        BloomMaxBrightness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BloomMaxBrightness");
        BloomTint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BloomTint");
        bUseRayTracedDistanceFieldShadows_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseRayTracedDistanceFieldShadows");
        RayStartOffsetDepthScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RayStartOffsetDepthScale");
        
        SetVolumetricScatteringIntensity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVolumetricScatteringIntensity");
        SetVolumetricScatteringIntensity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVolumetricScatteringIntensity_NativeFunction);
        SetVolumetricScatteringIntensity_NewIntensity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVolumetricScatteringIntensity_NativeFunction, "NewIntensity");
        SetUseTemperature_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetUseTemperature");
        SetUseTemperature_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetUseTemperature_NativeFunction);
        SetUseTemperature_bNewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUseTemperature_NativeFunction, "bNewValue");
        SetUseIESBrightness_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetUseIESBrightness");
        SetUseIESBrightness_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetUseIESBrightness_NativeFunction);
        SetUseIESBrightness_bNewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUseIESBrightness_NativeFunction, "bNewValue");
        SetTransmission_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTransmission");
        SetTransmission_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTransmission_NativeFunction);
        SetTransmission_bNewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTransmission_NativeFunction, "bNewValue");
        SetTemperature_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTemperature");
        SetTemperature_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTemperature_NativeFunction);
        SetTemperature_NewTemperature_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTemperature_NativeFunction, "NewTemperature");
        SetSpecularScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSpecularScale");
        SetSpecularScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSpecularScale_NativeFunction);
        SetSpecularScale_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSpecularScale_NativeFunction, "NewValue");
        SetShadowSlopeBias_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetShadowSlopeBias");
        SetShadowSlopeBias_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetShadowSlopeBias_NativeFunction);
        SetShadowSlopeBias_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetShadowSlopeBias_NativeFunction, "NewValue");
        SetShadowBias_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetShadowBias");
        SetShadowBias_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetShadowBias_NativeFunction);
        SetShadowBias_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetShadowBias_NativeFunction, "NewValue");
        SetLightingChannels_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLightingChannels");
        SetLightingChannels_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLightingChannels_NativeFunction);
        SetLightingChannels_bChannel0_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLightingChannels_NativeFunction, "bChannel0");
        SetLightingChannels_bChannel1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLightingChannels_NativeFunction, "bChannel1");
        SetLightingChannels_bChannel2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLightingChannels_NativeFunction, "bChannel2");
        SetLightFunctionScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLightFunctionScale");
        SetLightFunctionScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLightFunctionScale_NativeFunction);
        SetLightFunctionScale_NewLightFunctionScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLightFunctionScale_NativeFunction, "NewLightFunctionScale");
        SetLightFunctionMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLightFunctionMaterial");
        SetLightFunctionMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLightFunctionMaterial_NativeFunction);
        SetLightFunctionMaterial_NewLightFunctionMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLightFunctionMaterial_NativeFunction, "NewLightFunctionMaterial");
        SetLightFunctionFadeDistance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLightFunctionFadeDistance");
        SetLightFunctionFadeDistance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLightFunctionFadeDistance_NativeFunction);
        SetLightFunctionFadeDistance_NewLightFunctionFadeDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLightFunctionFadeDistance_NativeFunction, "NewLightFunctionFadeDistance");
        SetLightFunctionDisabledBrightness_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLightFunctionDisabledBrightness");
        SetLightFunctionDisabledBrightness_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLightFunctionDisabledBrightness_NativeFunction);
        SetLightFunctionDisabledBrightness_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLightFunctionDisabledBrightness_NativeFunction, "NewValue");
        SetLightColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLightColor");
        SetLightColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLightColor_NativeFunction);
        SetLightColor_NewLightColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLightColor_NativeFunction, "NewLightColor");
        SetLightColor_bSRGB_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLightColor_NativeFunction, "bSRGB");
        SetIntensity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIntensity");
        SetIntensity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIntensity_NativeFunction);
        SetIntensity_NewIntensity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIntensity_NativeFunction, "NewIntensity");
        SetIndirectLightingIntensity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIndirectLightingIntensity");
        SetIndirectLightingIntensity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIndirectLightingIntensity_NativeFunction);
        SetIndirectLightingIntensity_NewIntensity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIndirectLightingIntensity_NativeFunction, "NewIntensity");
        SetIESTexture_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIESTexture");
        SetIESTexture_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIESTexture_NativeFunction);
        SetIESTexture_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIESTexture_NativeFunction, "NewValue");
        SetIESBrightnessScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIESBrightnessScale");
        SetIESBrightnessScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIESBrightnessScale_NativeFunction);
        SetIESBrightnessScale_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIESBrightnessScale_NativeFunction, "NewValue");
        SetForceCachedShadowsForMovablePrimitives_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetForceCachedShadowsForMovablePrimitives");
        SetForceCachedShadowsForMovablePrimitives_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetForceCachedShadowsForMovablePrimitives_NativeFunction);
        SetForceCachedShadowsForMovablePrimitives_bNewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetForceCachedShadowsForMovablePrimitives_NativeFunction, "bNewValue");
        SetEnableLightShaftBloom_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetEnableLightShaftBloom");
        SetEnableLightShaftBloom_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetEnableLightShaftBloom_NativeFunction);
        SetEnableLightShaftBloom_bNewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEnableLightShaftBloom_NativeFunction, "bNewValue");
        SetBloomTint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBloomTint");
        SetBloomTint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBloomTint_NativeFunction);
        SetBloomTint_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBloomTint_NativeFunction, "NewValue");
        SetBloomThreshold_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBloomThreshold");
        SetBloomThreshold_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBloomThreshold_NativeFunction);
        SetBloomThreshold_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBloomThreshold_NativeFunction, "NewValue");
        SetBloomScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBloomScale");
        SetBloomScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBloomScale_NativeFunction);
        SetBloomScale_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBloomScale_NativeFunction, "NewValue");
        SetBloomMaxBrightness_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBloomMaxBrightness");
        SetBloomMaxBrightness_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBloomMaxBrightness_NativeFunction);
        SetBloomMaxBrightness_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBloomMaxBrightness_NativeFunction, "NewValue");
        SetAffectTranslucentLighting_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAffectTranslucentLighting");
        SetAffectTranslucentLighting_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAffectTranslucentLighting_NativeFunction);
        SetAffectTranslucentLighting_bNewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAffectTranslucentLighting_NativeFunction, "bNewValue");
        
        
    }
    
    protected LightComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Engine.LightComponent:Temperature
    static readonly int Temperature_Offset;
    
    public float Temperature
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Temperature_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.LightComponent:bUseTemperature
    static readonly int bUseTemperature_Offset;
    static readonly IntPtr bUseTemperature_NativeProperty;
    
    public bool bUseTemperature
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseTemperature_NativeProperty, bUseTemperature_Offset);
        }
    }
    
    // FloatProperty /Script/Engine.LightComponent:SpecularScale
    static readonly int SpecularScale_Offset;
    
    public float SpecularScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SpecularScale_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.LightComponent:ShadowResolutionScale
    static readonly int ShadowResolutionScale_Offset;
    
    public float ShadowResolutionScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ShadowResolutionScale_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.LightComponent:ShadowBias
    static readonly int ShadowBias_Offset;
    
    public float ShadowBias
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ShadowBias_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.LightComponent:ShadowSlopeBias
    static readonly int ShadowSlopeBias_Offset;
    
    public float ShadowSlopeBias
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ShadowSlopeBias_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.LightComponent:ShadowSharpen
    static readonly int ShadowSharpen_Offset;
    
    public float ShadowSharpen
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ShadowSharpen_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.LightComponent:ContactShadowLength
    static readonly int ContactShadowLength_Offset;
    
    public float ContactShadowLength
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ContactShadowLength_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ContactShadowLength_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.LightComponent:ContactShadowLengthInWS
    static readonly int ContactShadowLengthInWS_Offset;
    static readonly IntPtr ContactShadowLengthInWS_NativeProperty;
    
    public bool ContactShadowLengthInWS
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, ContactShadowLengthInWS_NativeProperty, ContactShadowLengthInWS_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, ContactShadowLengthInWS_NativeProperty, ContactShadowLengthInWS_Offset, value);
        }
    }
    
    // FloatProperty /Script/Engine.LightComponent:ContactShadowCastingIntensity
    static readonly int ContactShadowCastingIntensity_Offset;
    
    public float ContactShadowCastingIntensity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ContactShadowCastingIntensity_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ContactShadowCastingIntensity_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.LightComponent:ContactShadowNonCastingIntensity
    static readonly int ContactShadowNonCastingIntensity_Offset;
    
    public float ContactShadowNonCastingIntensity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ContactShadowNonCastingIntensity_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ContactShadowNonCastingIntensity_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.LightComponent:CastTranslucentShadows
    static readonly int CastTranslucentShadows_Offset;
    static readonly IntPtr CastTranslucentShadows_NativeProperty;
    
    public bool CastTranslucentShadows
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, CastTranslucentShadows_NativeProperty, CastTranslucentShadows_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.LightComponent:bCastShadowsFromCinematicObjectsOnly
    static readonly int bCastShadowsFromCinematicObjectsOnly_Offset;
    static readonly IntPtr bCastShadowsFromCinematicObjectsOnly_NativeProperty;
    
    public bool bCastShadowsFromCinematicObjectsOnly
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastShadowsFromCinematicObjectsOnly_NativeProperty, bCastShadowsFromCinematicObjectsOnly_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.LightComponent:bForceCachedShadowsForMovablePrimitives
    static readonly int bForceCachedShadowsForMovablePrimitives_Offset;
    static readonly IntPtr bForceCachedShadowsForMovablePrimitives_NativeProperty;
    
    public bool bForceCachedShadowsForMovablePrimitives
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bForceCachedShadowsForMovablePrimitives_NativeProperty, bForceCachedShadowsForMovablePrimitives_Offset);
        }
    }
    
    // StructProperty /Script/Engine.LightComponent:LightingChannels
    static readonly int LightingChannels_Offset;
    
    public UnrealSharp.Engine.LightingChannels LightingChannels
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.LightingChannelsMarshaler.FromNative(IntPtr.Add(NativeObject, LightingChannels_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/Engine.LightComponent:LightFunctionMaterial
    static readonly int LightFunctionMaterial_Offset;
    
    public UnrealSharp.Engine.MaterialInterface LightFunctionMaterial
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.FromNative(IntPtr.Add(NativeObject, LightFunctionMaterial_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.LightComponent:LightFunctionScale
    static readonly int LightFunctionScale_Offset;
    
    public System.DoubleNumerics.Vector3 LightFunctionScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, LightFunctionScale_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/Engine.LightComponent:IESTexture
    static readonly int IESTexture_Offset;
    
    public UnrealSharp.Engine.TextureLightProfile IESTexture
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.TextureLightProfile>.FromNative(IntPtr.Add(NativeObject, IESTexture_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.LightComponent:bUseIESBrightness
    static readonly int bUseIESBrightness_Offset;
    static readonly IntPtr bUseIESBrightness_NativeProperty;
    
    public bool bUseIESBrightness
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseIESBrightness_NativeProperty, bUseIESBrightness_Offset);
        }
    }
    
    // FloatProperty /Script/Engine.LightComponent:IESBrightnessScale
    static readonly int IESBrightnessScale_Offset;
    
    public float IESBrightnessScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, IESBrightnessScale_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.LightComponent:LightFunctionFadeDistance
    static readonly int LightFunctionFadeDistance_Offset;
    
    public float LightFunctionFadeDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LightFunctionFadeDistance_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.LightComponent:DisabledBrightness
    static readonly int DisabledBrightness_Offset;
    
    public float DisabledBrightness
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, DisabledBrightness_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.LightComponent:bEnableLightShaftBloom
    static readonly int bEnableLightShaftBloom_Offset;
    static readonly IntPtr bEnableLightShaftBloom_NativeProperty;
    
    public bool bEnableLightShaftBloom
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableLightShaftBloom_NativeProperty, bEnableLightShaftBloom_Offset);
        }
    }
    
    // FloatProperty /Script/Engine.LightComponent:BloomScale
    static readonly int BloomScale_Offset;
    
    public float BloomScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, BloomScale_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.LightComponent:BloomThreshold
    static readonly int BloomThreshold_Offset;
    
    public float BloomThreshold
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, BloomThreshold_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.LightComponent:BloomMaxBrightness
    static readonly int BloomMaxBrightness_Offset;
    
    public float BloomMaxBrightness
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, BloomMaxBrightness_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.LightComponent:BloomTint
    static readonly int BloomTint_Offset;
    
    public UnrealSharp.CoreUObject.Color BloomTint
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(NativeObject, BloomTint_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.LightComponent:bUseRayTracedDistanceFieldShadows
    static readonly int bUseRayTracedDistanceFieldShadows_Offset;
    
    public bool bUseRayTracedDistanceFieldShadows
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseRayTracedDistanceFieldShadows_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.LightComponent:RayStartOffsetDepthScale
    static readonly int RayStartOffsetDepthScale_Offset;
    
    public float RayStartOffsetDepthScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, RayStartOffsetDepthScale_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.LightComponent:SetVolumetricScatteringIntensity
    static readonly IntPtr SetVolumetricScatteringIntensity_NativeFunction;
    static readonly int SetVolumetricScatteringIntensity_ParamsSize;
    static readonly int SetVolumetricScatteringIntensity_NewIntensity_Offset;
    
    public void SetVolumetricScatteringIntensity(float newIntensity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVolumetricScatteringIntensity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetVolumetricScatteringIntensity_NewIntensity_Offset), 0, null, newIntensity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVolumetricScatteringIntensity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetUseTemperature
    static readonly IntPtr SetUseTemperature_NativeFunction;
    static readonly int SetUseTemperature_ParamsSize;
    static readonly int SetUseTemperature_bNewValue_Offset;
    
    public void SetUseTemperature(bool bNewValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetUseTemperature_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetUseTemperature_bNewValue_Offset), 0, null, bNewValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetUseTemperature_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetUseIESBrightness
    static readonly IntPtr SetUseIESBrightness_NativeFunction;
    static readonly int SetUseIESBrightness_ParamsSize;
    static readonly int SetUseIESBrightness_bNewValue_Offset;
    
    public void SetUseIESBrightness(bool bNewValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetUseIESBrightness_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetUseIESBrightness_bNewValue_Offset), 0, null, bNewValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetUseIESBrightness_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetTransmission
    static readonly IntPtr SetTransmission_NativeFunction;
    static readonly int SetTransmission_ParamsSize;
    static readonly int SetTransmission_bNewValue_Offset;
    
    public void SetTransmission(bool bNewValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTransmission_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetTransmission_bNewValue_Offset), 0, null, bNewValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTransmission_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetTemperature
    static readonly IntPtr SetTemperature_NativeFunction;
    static readonly int SetTemperature_ParamsSize;
    static readonly int SetTemperature_NewTemperature_Offset;
    
    public void SetTemperature(float newTemperature)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTemperature_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetTemperature_NewTemperature_Offset), 0, null, newTemperature);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTemperature_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetSpecularScale
    static readonly IntPtr SetSpecularScale_NativeFunction;
    static readonly int SetSpecularScale_ParamsSize;
    static readonly int SetSpecularScale_NewValue_Offset;
    
    public void SetSpecularScale(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSpecularScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSpecularScale_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSpecularScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetShadowSlopeBias
    static readonly IntPtr SetShadowSlopeBias_NativeFunction;
    static readonly int SetShadowSlopeBias_ParamsSize;
    static readonly int SetShadowSlopeBias_NewValue_Offset;
    
    public void SetShadowSlopeBias(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetShadowSlopeBias_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetShadowSlopeBias_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetShadowSlopeBias_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetShadowBias
    static readonly IntPtr SetShadowBias_NativeFunction;
    static readonly int SetShadowBias_ParamsSize;
    static readonly int SetShadowBias_NewValue_Offset;
    
    public void SetShadowBias(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetShadowBias_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetShadowBias_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetShadowBias_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetLightingChannels
    static readonly IntPtr SetLightingChannels_NativeFunction;
    static readonly int SetLightingChannels_ParamsSize;
    static readonly int SetLightingChannels_bChannel0_Offset;
    static readonly int SetLightingChannels_bChannel1_Offset;
    static readonly int SetLightingChannels_bChannel2_Offset;
    
    public void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLightingChannels_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLightingChannels_bChannel0_Offset), 0, null, bChannel0);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLightingChannels_bChannel1_Offset), 0, null, bChannel1);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLightingChannels_bChannel2_Offset), 0, null, bChannel2);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLightingChannels_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetLightFunctionScale
    static readonly IntPtr SetLightFunctionScale_NativeFunction;
    static readonly int SetLightFunctionScale_ParamsSize;
    static readonly int SetLightFunctionScale_NewLightFunctionScale_Offset;
    
    public void SetLightFunctionScale(System.DoubleNumerics.Vector3 newLightFunctionScale)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLightFunctionScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetLightFunctionScale_NewLightFunctionScale_Offset), 0, null, newLightFunctionScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLightFunctionScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetLightFunctionMaterial
    static readonly IntPtr SetLightFunctionMaterial_NativeFunction;
    static readonly int SetLightFunctionMaterial_ParamsSize;
    static readonly int SetLightFunctionMaterial_NewLightFunctionMaterial_Offset;
    
    public void SetLightFunctionMaterial(UnrealSharp.Engine.MaterialInterface newLightFunctionMaterial)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLightFunctionMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SetLightFunctionMaterial_NewLightFunctionMaterial_Offset), 0, null, newLightFunctionMaterial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLightFunctionMaterial_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetLightFunctionFadeDistance
    static readonly IntPtr SetLightFunctionFadeDistance_NativeFunction;
    static readonly int SetLightFunctionFadeDistance_ParamsSize;
    static readonly int SetLightFunctionFadeDistance_NewLightFunctionFadeDistance_Offset;
    
    public void SetLightFunctionFadeDistance(float newLightFunctionFadeDistance)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLightFunctionFadeDistance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLightFunctionFadeDistance_NewLightFunctionFadeDistance_Offset), 0, null, newLightFunctionFadeDistance);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLightFunctionFadeDistance_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetLightFunctionDisabledBrightness
    static readonly IntPtr SetLightFunctionDisabledBrightness_NativeFunction;
    static readonly int SetLightFunctionDisabledBrightness_ParamsSize;
    static readonly int SetLightFunctionDisabledBrightness_NewValue_Offset;
    
    public void SetLightFunctionDisabledBrightness(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLightFunctionDisabledBrightness_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLightFunctionDisabledBrightness_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLightFunctionDisabledBrightness_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetLightColor
    static readonly IntPtr SetLightColor_NativeFunction;
    static readonly int SetLightColor_ParamsSize;
    static readonly int SetLightColor_NewLightColor_Offset;
    static readonly int SetLightColor_bSRGB_Offset;
    
    public void SetLightColor(UnrealSharp.CoreUObject.LinearColor newLightColor, bool bSRGB = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLightColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetLightColor_NewLightColor_Offset), 0, null, newLightColor);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLightColor_bSRGB_Offset), 0, null, bSRGB);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLightColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetIntensity
    static readonly IntPtr SetIntensity_NativeFunction;
    static readonly int SetIntensity_ParamsSize;
    static readonly int SetIntensity_NewIntensity_Offset;
    
    public void SetIntensity(float newIntensity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIntensity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetIntensity_NewIntensity_Offset), 0, null, newIntensity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIntensity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetIndirectLightingIntensity
    static readonly IntPtr SetIndirectLightingIntensity_NativeFunction;
    static readonly int SetIndirectLightingIntensity_ParamsSize;
    static readonly int SetIndirectLightingIntensity_NewIntensity_Offset;
    
    public void SetIndirectLightingIntensity(float newIntensity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIndirectLightingIntensity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetIndirectLightingIntensity_NewIntensity_Offset), 0, null, newIntensity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIndirectLightingIntensity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetIESTexture
    static readonly IntPtr SetIESTexture_NativeFunction;
    static readonly int SetIESTexture_ParamsSize;
    static readonly int SetIESTexture_NewValue_Offset;
    
    public void SetIESTexture(UnrealSharp.Engine.TextureLightProfile newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIESTexture_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.TextureLightProfile>.ToNative(IntPtr.Add(ParamsBuffer, SetIESTexture_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIESTexture_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetIESBrightnessScale
    static readonly IntPtr SetIESBrightnessScale_NativeFunction;
    static readonly int SetIESBrightnessScale_ParamsSize;
    static readonly int SetIESBrightnessScale_NewValue_Offset;
    
    public void SetIESBrightnessScale(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIESBrightnessScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetIESBrightnessScale_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIESBrightnessScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetForceCachedShadowsForMovablePrimitives
    static readonly IntPtr SetForceCachedShadowsForMovablePrimitives_NativeFunction;
    static readonly int SetForceCachedShadowsForMovablePrimitives_ParamsSize;
    static readonly int SetForceCachedShadowsForMovablePrimitives_bNewValue_Offset;
    
    public void SetForceCachedShadowsForMovablePrimitives(bool bNewValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetForceCachedShadowsForMovablePrimitives_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetForceCachedShadowsForMovablePrimitives_bNewValue_Offset), 0, null, bNewValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetForceCachedShadowsForMovablePrimitives_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetEnableLightShaftBloom
    static readonly IntPtr SetEnableLightShaftBloom_NativeFunction;
    static readonly int SetEnableLightShaftBloom_ParamsSize;
    static readonly int SetEnableLightShaftBloom_bNewValue_Offset;
    
    public void SetEnableLightShaftBloom(bool bNewValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetEnableLightShaftBloom_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetEnableLightShaftBloom_bNewValue_Offset), 0, null, bNewValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetEnableLightShaftBloom_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetBloomTint
    static readonly IntPtr SetBloomTint_NativeFunction;
    static readonly int SetBloomTint_ParamsSize;
    static readonly int SetBloomTint_NewValue_Offset;
    
    public void SetBloomTint(UnrealSharp.CoreUObject.Color newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBloomTint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(ParamsBuffer, SetBloomTint_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBloomTint_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetBloomThreshold
    static readonly IntPtr SetBloomThreshold_NativeFunction;
    static readonly int SetBloomThreshold_ParamsSize;
    static readonly int SetBloomThreshold_NewValue_Offset;
    
    public void SetBloomThreshold(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBloomThreshold_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetBloomThreshold_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBloomThreshold_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetBloomScale
    static readonly IntPtr SetBloomScale_NativeFunction;
    static readonly int SetBloomScale_ParamsSize;
    static readonly int SetBloomScale_NewValue_Offset;
    
    public void SetBloomScale(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBloomScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetBloomScale_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBloomScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetBloomMaxBrightness
    static readonly IntPtr SetBloomMaxBrightness_NativeFunction;
    static readonly int SetBloomMaxBrightness_ParamsSize;
    static readonly int SetBloomMaxBrightness_NewValue_Offset;
    
    public void SetBloomMaxBrightness(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBloomMaxBrightness_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetBloomMaxBrightness_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBloomMaxBrightness_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponent:SetAffectTranslucentLighting
    static readonly IntPtr SetAffectTranslucentLighting_NativeFunction;
    static readonly int SetAffectTranslucentLighting_ParamsSize;
    static readonly int SetAffectTranslucentLighting_bNewValue_Offset;
    
    public void SetAffectTranslucentLighting(bool bNewValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAffectTranslucentLighting_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAffectTranslucentLighting_bNewValue_Offset), 0, null, bNewValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAffectTranslucentLighting_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
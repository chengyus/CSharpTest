// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
abstract public partial class LightComponentBase : UnrealSharp.Engine.SceneComponent
{
    
    static LightComponentBase()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("LightComponentBase");
        
        Intensity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Intensity");
        LightColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LightColor");
        bAffectsWorld_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAffectsWorld");
        bAffectsWorld_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAffectsWorld");
        CastShadows_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CastShadows");
        CastShadows_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "CastShadows");
        CastStaticShadows_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CastStaticShadows");
        CastStaticShadows_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "CastStaticShadows");
        CastDynamicShadows_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CastDynamicShadows");
        CastDynamicShadows_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "CastDynamicShadows");
        bAffectTranslucentLighting_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAffectTranslucentLighting");
        bAffectTranslucentLighting_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAffectTranslucentLighting");
        bTransmission_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bTransmission");
        bTransmission_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bTransmission");
        bCastVolumetricShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastVolumetricShadow");
        bCastVolumetricShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastVolumetricShadow");
        bCastDeepShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastDeepShadow");
        bCastDeepShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastDeepShadow");
        CastRaytracedShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CastRaytracedShadow");
        bAffectReflection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAffectReflection");
        bAffectReflection_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAffectReflection");
        bAffectGlobalIllumination_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAffectGlobalIllumination");
        bAffectGlobalIllumination_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAffectGlobalIllumination");
        DeepShadowLayerDistribution_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DeepShadowLayerDistribution");
        IndirectLightingIntensity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "IndirectLightingIntensity");
        VolumetricScatteringIntensity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VolumetricScatteringIntensity");
        SamplesPerPixel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SamplesPerPixel");
        
        SetSamplesPerPixel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSamplesPerPixel");
        SetSamplesPerPixel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSamplesPerPixel_NativeFunction);
        SetSamplesPerPixel_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSamplesPerPixel_NativeFunction, "NewValue");
        SetCastVolumetricShadow_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCastVolumetricShadow");
        SetCastVolumetricShadow_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCastVolumetricShadow_NativeFunction);
        SetCastVolumetricShadow_bNewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCastVolumetricShadow_NativeFunction, "bNewValue");
        SetCastShadows_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCastShadows");
        SetCastShadows_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCastShadows_NativeFunction);
        SetCastShadows_bNewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCastShadows_NativeFunction, "bNewValue");
        SetCastRaytracedShadows_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCastRaytracedShadows");
        SetCastRaytracedShadows_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCastRaytracedShadows_NativeFunction);
        SetCastRaytracedShadows_bNewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCastRaytracedShadows_NativeFunction, "bNewValue");
        SetCastRaytracedShadow_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCastRaytracedShadow");
        SetCastRaytracedShadow_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCastRaytracedShadow_NativeFunction);
        SetCastRaytracedShadow_bNewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCastRaytracedShadow_NativeFunction, "bNewValue");
        SetCastDeepShadow_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCastDeepShadow");
        SetCastDeepShadow_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCastDeepShadow_NativeFunction);
        SetCastDeepShadow_bNewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCastDeepShadow_NativeFunction, "bNewValue");
        SetAffectReflection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAffectReflection");
        SetAffectReflection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAffectReflection_NativeFunction);
        SetAffectReflection_bNewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAffectReflection_NativeFunction, "bNewValue");
        SetAffectGlobalIllumination_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAffectGlobalIllumination");
        SetAffectGlobalIllumination_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAffectGlobalIllumination_NativeFunction);
        SetAffectGlobalIllumination_bNewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAffectGlobalIllumination_NativeFunction, "bNewValue");
        GetLightColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLightColor");
        GetLightColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLightColor_NativeFunction);
        GetLightColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLightColor_NativeFunction, "ReturnValue");
        
        
    }
    
    protected LightComponentBase(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Engine.LightComponentBase:Intensity
    static readonly int Intensity_Offset;
    
    public float Intensity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Intensity_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.LightComponentBase:LightColor
    static readonly int LightColor_Offset;
    
    public UnrealSharp.CoreUObject.Color LightColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(NativeObject, LightColor_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.LightComponentBase:bAffectsWorld
    static readonly int bAffectsWorld_Offset;
    static readonly IntPtr bAffectsWorld_NativeProperty;
    
    public bool bAffectsWorld
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAffectsWorld_NativeProperty, bAffectsWorld_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.LightComponentBase:CastShadows
    static readonly int CastShadows_Offset;
    static readonly IntPtr CastShadows_NativeProperty;
    
    public bool CastShadows
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, CastShadows_NativeProperty, CastShadows_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.LightComponentBase:CastStaticShadows
    static readonly int CastStaticShadows_Offset;
    static readonly IntPtr CastStaticShadows_NativeProperty;
    
    public bool CastStaticShadows
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, CastStaticShadows_NativeProperty, CastStaticShadows_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.LightComponentBase:CastDynamicShadows
    static readonly int CastDynamicShadows_Offset;
    static readonly IntPtr CastDynamicShadows_NativeProperty;
    
    public bool CastDynamicShadows
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, CastDynamicShadows_NativeProperty, CastDynamicShadows_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.LightComponentBase:bAffectTranslucentLighting
    static readonly int bAffectTranslucentLighting_Offset;
    static readonly IntPtr bAffectTranslucentLighting_NativeProperty;
    
    public bool bAffectTranslucentLighting
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAffectTranslucentLighting_NativeProperty, bAffectTranslucentLighting_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.LightComponentBase:bTransmission
    static readonly int bTransmission_Offset;
    static readonly IntPtr bTransmission_NativeProperty;
    
    public bool bTransmission
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bTransmission_NativeProperty, bTransmission_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.LightComponentBase:bCastVolumetricShadow
    static readonly int bCastVolumetricShadow_Offset;
    static readonly IntPtr bCastVolumetricShadow_NativeProperty;
    
    public bool bCastVolumetricShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastVolumetricShadow_NativeProperty, bCastVolumetricShadow_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.LightComponentBase:bCastDeepShadow
    static readonly int bCastDeepShadow_Offset;
    static readonly IntPtr bCastDeepShadow_NativeProperty;
    
    public bool bCastDeepShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastDeepShadow_NativeProperty, bCastDeepShadow_Offset);
        }
    }
    
    // ByteProperty /Script/Engine.LightComponentBase:CastRaytracedShadow
    static readonly int CastRaytracedShadow_Offset;
    
    public UnrealSharp.Engine.ECastRayTracedShadow CastRaytracedShadow
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ECastRayTracedShadow>.FromNative(IntPtr.Add(NativeObject, CastRaytracedShadow_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.LightComponentBase:bAffectReflection
    static readonly int bAffectReflection_Offset;
    static readonly IntPtr bAffectReflection_NativeProperty;
    
    public bool bAffectReflection
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAffectReflection_NativeProperty, bAffectReflection_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.LightComponentBase:bAffectGlobalIllumination
    static readonly int bAffectGlobalIllumination_Offset;
    static readonly IntPtr bAffectGlobalIllumination_NativeProperty;
    
    public bool bAffectGlobalIllumination
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAffectGlobalIllumination_NativeProperty, bAffectGlobalIllumination_Offset);
        }
    }
    
    // FloatProperty /Script/Engine.LightComponentBase:DeepShadowLayerDistribution
    static readonly int DeepShadowLayerDistribution_Offset;
    
    public float DeepShadowLayerDistribution
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, DeepShadowLayerDistribution_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.LightComponentBase:IndirectLightingIntensity
    static readonly int IndirectLightingIntensity_Offset;
    
    public float IndirectLightingIntensity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, IndirectLightingIntensity_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.LightComponentBase:VolumetricScatteringIntensity
    static readonly int VolumetricScatteringIntensity_Offset;
    
    public float VolumetricScatteringIntensity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, VolumetricScatteringIntensity_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Engine.LightComponentBase:SamplesPerPixel
    static readonly int SamplesPerPixel_Offset;
    
    public int SamplesPerPixel
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, SamplesPerPixel_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.LightComponentBase:SetSamplesPerPixel
    static readonly IntPtr SetSamplesPerPixel_NativeFunction;
    static readonly int SetSamplesPerPixel_ParamsSize;
    static readonly int SetSamplesPerPixel_NewValue_Offset;
    
    public void SetSamplesPerPixel(int newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSamplesPerPixel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetSamplesPerPixel_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSamplesPerPixel_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponentBase:SetCastVolumetricShadow
    static readonly IntPtr SetCastVolumetricShadow_NativeFunction;
    static readonly int SetCastVolumetricShadow_ParamsSize;
    static readonly int SetCastVolumetricShadow_bNewValue_Offset;
    
    public void SetCastVolumetricShadow(bool bNewValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCastVolumetricShadow_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCastVolumetricShadow_bNewValue_Offset), 0, null, bNewValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCastVolumetricShadow_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponentBase:SetCastShadows
    static readonly IntPtr SetCastShadows_NativeFunction;
    static readonly int SetCastShadows_ParamsSize;
    static readonly int SetCastShadows_bNewValue_Offset;
    
    public void SetCastShadows(bool bNewValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCastShadows_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCastShadows_bNewValue_Offset), 0, null, bNewValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCastShadows_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponentBase:SetCastRaytracedShadows
    static readonly IntPtr SetCastRaytracedShadows_NativeFunction;
    static readonly int SetCastRaytracedShadows_ParamsSize;
    static readonly int SetCastRaytracedShadows_bNewValue_Offset;
    
    public void SetCastRaytracedShadows(UnrealSharp.Engine.ECastRayTracedShadow bNewValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCastRaytracedShadows_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ECastRayTracedShadow>.ToNative(IntPtr.Add(ParamsBuffer, SetCastRaytracedShadows_bNewValue_Offset), 0, null, bNewValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCastRaytracedShadows_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponentBase:SetCastRaytracedShadow
    static readonly IntPtr SetCastRaytracedShadow_NativeFunction;
    static readonly int SetCastRaytracedShadow_ParamsSize;
    static readonly int SetCastRaytracedShadow_bNewValue_Offset;
    
    [Obsolete("ULightComponentBase::SetCastRaytracedShadow is deprecated. Use ULightComponentBase::SetCastRaytracedShadows instead.")]
    public void SetCastRaytracedShadow(bool bNewValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCastRaytracedShadow_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCastRaytracedShadow_bNewValue_Offset), 0, null, bNewValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCastRaytracedShadow_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponentBase:SetCastDeepShadow
    static readonly IntPtr SetCastDeepShadow_NativeFunction;
    static readonly int SetCastDeepShadow_ParamsSize;
    static readonly int SetCastDeepShadow_bNewValue_Offset;
    
    public void SetCastDeepShadow(bool bNewValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCastDeepShadow_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCastDeepShadow_bNewValue_Offset), 0, null, bNewValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCastDeepShadow_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponentBase:SetAffectReflection
    static readonly IntPtr SetAffectReflection_NativeFunction;
    static readonly int SetAffectReflection_ParamsSize;
    static readonly int SetAffectReflection_bNewValue_Offset;
    
    public void SetAffectReflection(bool bNewValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAffectReflection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAffectReflection_bNewValue_Offset), 0, null, bNewValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAffectReflection_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponentBase:SetAffectGlobalIllumination
    static readonly IntPtr SetAffectGlobalIllumination_NativeFunction;
    static readonly int SetAffectGlobalIllumination_ParamsSize;
    static readonly int SetAffectGlobalIllumination_bNewValue_Offset;
    
    public void SetAffectGlobalIllumination(bool bNewValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAffectGlobalIllumination_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAffectGlobalIllumination_bNewValue_Offset), 0, null, bNewValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAffectGlobalIllumination_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LightComponentBase:GetLightColor
    static readonly IntPtr GetLightColor_NativeFunction;
    static readonly int GetLightColor_ParamsSize;
    static readonly int GetLightColor_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor GetLightColor()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLightColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLightColor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, GetLightColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
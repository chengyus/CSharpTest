// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class LightWeightInstanceBlueprintFunctionLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static LightWeightInstanceBlueprintFunctionLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("LightWeightInstanceBlueprintFunctionLibrary");
        
        
        CreateNewLightWeightInstance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateNewLightWeightInstance");
        CreateNewLightWeightInstance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateNewLightWeightInstance_NativeFunction);
        CreateNewLightWeightInstance_ActorClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateNewLightWeightInstance_NativeFunction, "ActorClass");
        CreateNewLightWeightInstance_Transform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateNewLightWeightInstance_NativeFunction, "Transform");
        CreateNewLightWeightInstance_Layer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateNewLightWeightInstance_NativeFunction, "Layer");
        CreateNewLightWeightInstance_World_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateNewLightWeightInstance_NativeFunction, "World");
        CreateNewLightWeightInstance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateNewLightWeightInstance_NativeFunction, "ReturnValue");
        ConvertActorToLightWeightInstance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertActorToLightWeightInstance");
        ConvertActorToLightWeightInstance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertActorToLightWeightInstance_NativeFunction);
        ConvertActorToLightWeightInstance_Actor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertActorToLightWeightInstance_NativeFunction, "Actor");
        ConvertActorToLightWeightInstance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertActorToLightWeightInstance_NativeFunction, "ReturnValue");
        
        
    }
    
    protected LightWeightInstanceBlueprintFunctionLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.LightWeightInstanceBlueprintFunctionLibrary:CreateNewLightWeightInstance
    static readonly IntPtr CreateNewLightWeightInstance_NativeFunction;
    static readonly int CreateNewLightWeightInstance_ParamsSize;
    static readonly int CreateNewLightWeightInstance_ActorClass_Offset;
    static readonly int CreateNewLightWeightInstance_Transform_Offset;
    static readonly int CreateNewLightWeightInstance_Layer_Offset;
    static readonly int CreateNewLightWeightInstance_World_Offset;
    static readonly int CreateNewLightWeightInstance_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.ActorInstanceHandle CreateNewLightWeightInstance(SubclassOf<UnrealSharp.CoreUObject.Object> actorClass, UnrealSharp.Transform transform, UnrealSharp.Engine.DataLayerInstance layer, UnrealSharp.Engine.World world)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateNewLightWeightInstance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CreateNewLightWeightInstance_ActorClass_Offset), 0, null, actorClass);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, CreateNewLightWeightInstance_Transform_Offset), 0, null, transform);
            ObjectMarshaller<UnrealSharp.Engine.DataLayerInstance>.ToNative(IntPtr.Add(ParamsBuffer, CreateNewLightWeightInstance_Layer_Offset), 0, null, layer);
            ObjectMarshaller<UnrealSharp.Engine.World>.ToNative(IntPtr.Add(ParamsBuffer, CreateNewLightWeightInstance_World_Offset), 0, null, world);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateNewLightWeightInstance_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.ActorInstanceHandle returnValue;
            returnValue = UnrealSharp.Engine.ActorInstanceHandleMarshaler.FromNative(IntPtr.Add(ParamsBuffer, CreateNewLightWeightInstance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.LightWeightInstanceBlueprintFunctionLibrary:ConvertActorToLightWeightInstance
    static readonly IntPtr ConvertActorToLightWeightInstance_NativeFunction;
    static readonly int ConvertActorToLightWeightInstance_ParamsSize;
    static readonly int ConvertActorToLightWeightInstance_Actor_Offset;
    static readonly int ConvertActorToLightWeightInstance_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.ActorInstanceHandle ConvertActorToLightWeightInstance(UnrealSharp.Engine.Actor actor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertActorToLightWeightInstance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ConvertActorToLightWeightInstance_Actor_Offset), 0, null, actor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConvertActorToLightWeightInstance_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.ActorInstanceHandle returnValue;
            returnValue = UnrealSharp.Engine.ActorInstanceHandleMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ConvertActorToLightWeightInstance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
abstract public partial class LocalLightComponent : UnrealSharp.Engine.LightComponent
{
    
    static readonly IntPtr NativeClassPtr;
    static LocalLightComponent()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("LocalLightComponent");
        
        IntensityUnits_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "IntensityUnits");
        InverseExposureBlend_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InverseExposureBlend");
        AttenuationRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AttenuationRadius");
        
        SetIntensityUnits_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIntensityUnits");
        SetIntensityUnits_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIntensityUnits_NativeFunction);
        SetIntensityUnits_NewIntensityUnits_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIntensityUnits_NativeFunction, "NewIntensityUnits");
        SetAttenuationRadius_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAttenuationRadius");
        SetAttenuationRadius_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAttenuationRadius_NativeFunction);
        SetAttenuationRadius_NewRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAttenuationRadius_NativeFunction, "NewRadius");
        GetUnitsConversionFactor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetUnitsConversionFactor");
        GetUnitsConversionFactor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetUnitsConversionFactor_NativeFunction);
        GetUnitsConversionFactor_SrcUnits_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUnitsConversionFactor_NativeFunction, "SrcUnits");
        GetUnitsConversionFactor_TargetUnits_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUnitsConversionFactor_NativeFunction, "TargetUnits");
        GetUnitsConversionFactor_CosHalfConeAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUnitsConversionFactor_NativeFunction, "CosHalfConeAngle");
        GetUnitsConversionFactor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUnitsConversionFactor_NativeFunction, "ReturnValue");
        
        
    }
    
    protected LocalLightComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // EnumProperty /Script/Engine.LocalLightComponent:IntensityUnits
    static readonly int IntensityUnits_Offset;
    
    public UnrealSharp.Engine.ELightUnits IntensityUnits
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ELightUnits>.FromNative(IntPtr.Add(NativeObject, IntensityUnits_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.LocalLightComponent:InverseExposureBlend
    static readonly int InverseExposureBlend_Offset;
    
    public float InverseExposureBlend
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, InverseExposureBlend_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.LocalLightComponent:AttenuationRadius
    static readonly int AttenuationRadius_Offset;
    
    public float AttenuationRadius
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AttenuationRadius_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.LocalLightComponent:SetIntensityUnits
    static readonly IntPtr SetIntensityUnits_NativeFunction;
    static readonly int SetIntensityUnits_ParamsSize;
    static readonly int SetIntensityUnits_NewIntensityUnits_Offset;
    
    public void SetIntensityUnits(UnrealSharp.Engine.ELightUnits newIntensityUnits)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIntensityUnits_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ELightUnits>.ToNative(IntPtr.Add(ParamsBuffer, SetIntensityUnits_NewIntensityUnits_Offset), 0, null, newIntensityUnits);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIntensityUnits_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LocalLightComponent:SetAttenuationRadius
    static readonly IntPtr SetAttenuationRadius_NativeFunction;
    static readonly int SetAttenuationRadius_ParamsSize;
    static readonly int SetAttenuationRadius_NewRadius_Offset;
    
    public void SetAttenuationRadius(float newRadius)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAttenuationRadius_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAttenuationRadius_NewRadius_Offset), 0, null, newRadius);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAttenuationRadius_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.LocalLightComponent:GetUnitsConversionFactor
    static readonly IntPtr GetUnitsConversionFactor_NativeFunction;
    static readonly int GetUnitsConversionFactor_ParamsSize;
    static readonly int GetUnitsConversionFactor_SrcUnits_Offset;
    static readonly int GetUnitsConversionFactor_TargetUnits_Offset;
    static readonly int GetUnitsConversionFactor_CosHalfConeAngle_Offset;
    static readonly int GetUnitsConversionFactor_ReturnValue_Offset;
    
    public static float GetUnitsConversionFactor(UnrealSharp.Engine.ELightUnits srcUnits, UnrealSharp.Engine.ELightUnits targetUnits, float cosHalfConeAngle = -1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetUnitsConversionFactor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ELightUnits>.ToNative(IntPtr.Add(ParamsBuffer, GetUnitsConversionFactor_SrcUnits_Offset), 0, null, srcUnits);
            BlittableMarshaller<UnrealSharp.Engine.ELightUnits>.ToNative(IntPtr.Add(ParamsBuffer, GetUnitsConversionFactor_TargetUnits_Offset), 0, null, targetUnits);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetUnitsConversionFactor_CosHalfConeAngle_Offset), 0, null, cosHalfConeAngle);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetUnitsConversionFactor_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetUnitsConversionFactor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
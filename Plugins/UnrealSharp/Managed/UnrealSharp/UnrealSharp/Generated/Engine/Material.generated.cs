// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class Material : UnrealSharp.Engine.MaterialInterface
{
    
    static Material()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("Material");
        
        MaterialDomain_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaterialDomain");
        BlendMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BlendMode");
        DecalBlendMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DecalBlendMode");
        MaterialDecalResponse_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaterialDecalResponse");
        DisplacementScaling_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DisplacementScaling");
        bUseEmissiveForDynamicAreaLighting_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseEmissiveForDynamicAreaLighting");
        bUseEmissiveForDynamicAreaLighting_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseEmissiveForDynamicAreaLighting");
        bUsedWithSkeletalMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithSkeletalMesh");
        bUsedWithSkeletalMesh_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithSkeletalMesh");
        bUsedWithEditorCompositing_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithEditorCompositing");
        bUsedWithEditorCompositing_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithEditorCompositing");
        bUsedWithParticleSprites_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithParticleSprites");
        bUsedWithParticleSprites_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithParticleSprites");
        bUsedWithBeamTrails_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithBeamTrails");
        bUsedWithBeamTrails_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithBeamTrails");
        bUsedWithMeshParticles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithMeshParticles");
        bUsedWithMeshParticles_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithMeshParticles");
        bUsedWithNiagaraSprites_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithNiagaraSprites");
        bUsedWithNiagaraSprites_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithNiagaraSprites");
        bUsedWithNiagaraRibbons_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithNiagaraRibbons");
        bUsedWithNiagaraRibbons_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithNiagaraRibbons");
        bUsedWithNiagaraMeshParticles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithNiagaraMeshParticles");
        bUsedWithNiagaraMeshParticles_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithNiagaraMeshParticles");
        bUsedWithGeometryCache_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithGeometryCache");
        bUsedWithGeometryCache_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithGeometryCache");
        bUsedWithStaticLighting_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithStaticLighting");
        bUsedWithStaticLighting_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithStaticLighting");
        bUsedWithMorphTargets_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithMorphTargets");
        bUsedWithMorphTargets_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithMorphTargets");
        bUsedWithSplineMeshes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithSplineMeshes");
        bUsedWithSplineMeshes_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithSplineMeshes");
        bUsedWithInstancedStaticMeshes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithInstancedStaticMeshes");
        bUsedWithInstancedStaticMeshes_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithInstancedStaticMeshes");
        bUsedWithGeometryCollections_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithGeometryCollections");
        bUsedWithGeometryCollections_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithGeometryCollections");
        bUsedWithClothing_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithClothing");
        bUsedWithClothing_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithClothing");
        bUsedWithWater_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithWater");
        bUsedWithWater_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithWater");
        bUsedWithHairStrands_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithHairStrands");
        bUsedWithHairStrands_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithHairStrands");
        bUsedWithLidarPointCloud_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithLidarPointCloud");
        bUsedWithLidarPointCloud_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithLidarPointCloud");
        bUsedWithVirtualHeightfieldMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithVirtualHeightfieldMesh");
        bUsedWithVirtualHeightfieldMesh_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithVirtualHeightfieldMesh");
        bUsedWithNanite_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithNanite");
        bUsedWithNanite_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithNanite");
        bUsedWithVolumetricCloud_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithVolumetricCloud");
        bUsedWithVolumetricCloud_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithVolumetricCloud");
        bUsedWithHeterogeneousVolumes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsedWithHeterogeneousVolumes");
        bUsedWithHeterogeneousVolumes_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsedWithHeterogeneousVolumes");
        bAutomaticallySetUsageInEditor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAutomaticallySetUsageInEditor");
        bAutomaticallySetUsageInEditor_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAutomaticallySetUsageInEditor");
        bFullyRough_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bFullyRough");
        bFullyRough_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bFullyRough");
        FloatPrecisionMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FloatPrecisionMode");
        bUseLightmapDirectionality_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseLightmapDirectionality");
        bUseLightmapDirectionality_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseLightmapDirectionality");
        bMobileEnableHighQualityBRDF_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bMobileEnableHighQualityBRDF");
        bMobileEnableHighQualityBRDF_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bMobileEnableHighQualityBRDF");
        bUseAlphaToCoverage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseAlphaToCoverage");
        bUseAlphaToCoverage_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseAlphaToCoverage");
        bForwardRenderUsePreintegratedGFForSimpleIBL_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bForwardRenderUsePreintegratedGFForSimpleIBL");
        bForwardRenderUsePreintegratedGFForSimpleIBL_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bForwardRenderUsePreintegratedGFForSimpleIBL");
        bUseHQForwardReflections_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseHQForwardReflections");
        bUseHQForwardReflections_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseHQForwardReflections");
        bForwardBlendsSkyLightCubemaps_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bForwardBlendsSkyLightCubemaps");
        bForwardBlendsSkyLightCubemaps_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bForwardBlendsSkyLightCubemaps");
        bUsePlanarForwardReflections_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsePlanarForwardReflections");
        bUsePlanarForwardReflections_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsePlanarForwardReflections");
        bNormalCurvatureToRoughness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bNormalCurvatureToRoughness");
        bNormalCurvatureToRoughness_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bNormalCurvatureToRoughness");
        BlendableLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BlendableLocation");
        BlendableOutputAlpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BlendableOutputAlpha");
        BlendableOutputAlpha_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "BlendableOutputAlpha");
        BlendablePriority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BlendablePriority");
        bIsBlendable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsBlendable");
        bIsBlendable_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIsBlendable");
        MaxWorldPositionOffsetDisplacement_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxWorldPositionOffsetDisplacement");
        bAlwaysEvaluateWorldPositionOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAlwaysEvaluateWorldPositionOffset");
        
        
        
    }
    
    protected Material(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ByteProperty /Script/Engine.Material:MaterialDomain
    static readonly int MaterialDomain_Offset;
    
    public UnrealSharp.Engine.EMaterialDomain MaterialDomain
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EMaterialDomain>.FromNative(IntPtr.Add(NativeObject, MaterialDomain_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/Engine.Material:BlendMode
    static readonly int BlendMode_Offset;
    
    public UnrealSharp.Engine.EBlendMode BlendMode
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EBlendMode>.FromNative(IntPtr.Add(NativeObject, BlendMode_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/Engine.Material:DecalBlendMode
    static readonly int DecalBlendMode_Offset;
    
    public UnrealSharp.Engine.EDecalBlendMode DecalBlendMode
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EDecalBlendMode>.FromNative(IntPtr.Add(NativeObject, DecalBlendMode_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EDecalBlendMode>.ToNative(IntPtr.Add(NativeObject, DecalBlendMode_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/Engine.Material:MaterialDecalResponse
    static readonly int MaterialDecalResponse_Offset;
    
    public UnrealSharp.Engine.EMaterialDecalResponse MaterialDecalResponse
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EMaterialDecalResponse>.FromNative(IntPtr.Add(NativeObject, MaterialDecalResponse_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.Material:DisplacementScaling
    static readonly int DisplacementScaling_Offset;
    
    public UnrealSharp.Engine.DisplacementScaling DisplacementScaling
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.DisplacementScaling>.FromNative(IntPtr.Add(NativeObject, DisplacementScaling_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.DisplacementScaling>.ToNative(IntPtr.Add(NativeObject, DisplacementScaling_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUseEmissiveForDynamicAreaLighting
    static readonly int bUseEmissiveForDynamicAreaLighting_Offset;
    static readonly IntPtr bUseEmissiveForDynamicAreaLighting_NativeProperty;
    
    public bool bUseEmissiveForDynamicAreaLighting
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseEmissiveForDynamicAreaLighting_NativeProperty, bUseEmissiveForDynamicAreaLighting_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bUseEmissiveForDynamicAreaLighting_NativeProperty, bUseEmissiveForDynamicAreaLighting_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithSkeletalMesh
    static readonly int bUsedWithSkeletalMesh_Offset;
    static readonly IntPtr bUsedWithSkeletalMesh_NativeProperty;
    
    public bool bUsedWithSkeletalMesh
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithSkeletalMesh_NativeProperty, bUsedWithSkeletalMesh_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithEditorCompositing
    static readonly int bUsedWithEditorCompositing_Offset;
    static readonly IntPtr bUsedWithEditorCompositing_NativeProperty;
    
    public bool bUsedWithEditorCompositing
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithEditorCompositing_NativeProperty, bUsedWithEditorCompositing_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithParticleSprites
    static readonly int bUsedWithParticleSprites_Offset;
    static readonly IntPtr bUsedWithParticleSprites_NativeProperty;
    
    public bool bUsedWithParticleSprites
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithParticleSprites_NativeProperty, bUsedWithParticleSprites_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithBeamTrails
    static readonly int bUsedWithBeamTrails_Offset;
    static readonly IntPtr bUsedWithBeamTrails_NativeProperty;
    
    public bool bUsedWithBeamTrails
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithBeamTrails_NativeProperty, bUsedWithBeamTrails_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithMeshParticles
    static readonly int bUsedWithMeshParticles_Offset;
    static readonly IntPtr bUsedWithMeshParticles_NativeProperty;
    
    public bool bUsedWithMeshParticles
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithMeshParticles_NativeProperty, bUsedWithMeshParticles_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithNiagaraSprites
    static readonly int bUsedWithNiagaraSprites_Offset;
    static readonly IntPtr bUsedWithNiagaraSprites_NativeProperty;
    
    public bool bUsedWithNiagaraSprites
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithNiagaraSprites_NativeProperty, bUsedWithNiagaraSprites_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithNiagaraRibbons
    static readonly int bUsedWithNiagaraRibbons_Offset;
    static readonly IntPtr bUsedWithNiagaraRibbons_NativeProperty;
    
    public bool bUsedWithNiagaraRibbons
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithNiagaraRibbons_NativeProperty, bUsedWithNiagaraRibbons_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithNiagaraMeshParticles
    static readonly int bUsedWithNiagaraMeshParticles_Offset;
    static readonly IntPtr bUsedWithNiagaraMeshParticles_NativeProperty;
    
    public bool bUsedWithNiagaraMeshParticles
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithNiagaraMeshParticles_NativeProperty, bUsedWithNiagaraMeshParticles_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithGeometryCache
    static readonly int bUsedWithGeometryCache_Offset;
    static readonly IntPtr bUsedWithGeometryCache_NativeProperty;
    
    public bool bUsedWithGeometryCache
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithGeometryCache_NativeProperty, bUsedWithGeometryCache_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithStaticLighting
    static readonly int bUsedWithStaticLighting_Offset;
    static readonly IntPtr bUsedWithStaticLighting_NativeProperty;
    
    public bool bUsedWithStaticLighting
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithStaticLighting_NativeProperty, bUsedWithStaticLighting_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithMorphTargets
    static readonly int bUsedWithMorphTargets_Offset;
    static readonly IntPtr bUsedWithMorphTargets_NativeProperty;
    
    public bool bUsedWithMorphTargets
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithMorphTargets_NativeProperty, bUsedWithMorphTargets_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithSplineMeshes
    static readonly int bUsedWithSplineMeshes_Offset;
    static readonly IntPtr bUsedWithSplineMeshes_NativeProperty;
    
    public bool bUsedWithSplineMeshes
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithSplineMeshes_NativeProperty, bUsedWithSplineMeshes_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithInstancedStaticMeshes
    static readonly int bUsedWithInstancedStaticMeshes_Offset;
    static readonly IntPtr bUsedWithInstancedStaticMeshes_NativeProperty;
    
    public bool bUsedWithInstancedStaticMeshes
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithInstancedStaticMeshes_NativeProperty, bUsedWithInstancedStaticMeshes_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithGeometryCollections
    static readonly int bUsedWithGeometryCollections_Offset;
    static readonly IntPtr bUsedWithGeometryCollections_NativeProperty;
    
    public bool bUsedWithGeometryCollections
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithGeometryCollections_NativeProperty, bUsedWithGeometryCollections_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithClothing
    static readonly int bUsedWithClothing_Offset;
    static readonly IntPtr bUsedWithClothing_NativeProperty;
    
    public bool bUsedWithClothing
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithClothing_NativeProperty, bUsedWithClothing_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithWater
    static readonly int bUsedWithWater_Offset;
    static readonly IntPtr bUsedWithWater_NativeProperty;
    
    public bool bUsedWithWater
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithWater_NativeProperty, bUsedWithWater_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithHairStrands
    static readonly int bUsedWithHairStrands_Offset;
    static readonly IntPtr bUsedWithHairStrands_NativeProperty;
    
    public bool bUsedWithHairStrands
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithHairStrands_NativeProperty, bUsedWithHairStrands_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithLidarPointCloud
    static readonly int bUsedWithLidarPointCloud_Offset;
    static readonly IntPtr bUsedWithLidarPointCloud_NativeProperty;
    
    public bool bUsedWithLidarPointCloud
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithLidarPointCloud_NativeProperty, bUsedWithLidarPointCloud_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithVirtualHeightfieldMesh
    static readonly int bUsedWithVirtualHeightfieldMesh_Offset;
    static readonly IntPtr bUsedWithVirtualHeightfieldMesh_NativeProperty;
    
    public bool bUsedWithVirtualHeightfieldMesh
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithVirtualHeightfieldMesh_NativeProperty, bUsedWithVirtualHeightfieldMesh_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithNanite
    static readonly int bUsedWithNanite_Offset;
    static readonly IntPtr bUsedWithNanite_NativeProperty;
    
    public bool bUsedWithNanite
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithNanite_NativeProperty, bUsedWithNanite_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithVolumetricCloud
    static readonly int bUsedWithVolumetricCloud_Offset;
    static readonly IntPtr bUsedWithVolumetricCloud_NativeProperty;
    
    public bool bUsedWithVolumetricCloud
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithVolumetricCloud_NativeProperty, bUsedWithVolumetricCloud_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsedWithHeterogeneousVolumes
    static readonly int bUsedWithHeterogeneousVolumes_Offset;
    static readonly IntPtr bUsedWithHeterogeneousVolumes_NativeProperty;
    
    public bool bUsedWithHeterogeneousVolumes
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsedWithHeterogeneousVolumes_NativeProperty, bUsedWithHeterogeneousVolumes_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bAutomaticallySetUsageInEditor
    static readonly int bAutomaticallySetUsageInEditor_Offset;
    static readonly IntPtr bAutomaticallySetUsageInEditor_NativeProperty;
    
    public bool bAutomaticallySetUsageInEditor
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAutomaticallySetUsageInEditor_NativeProperty, bAutomaticallySetUsageInEditor_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bFullyRough
    static readonly int bFullyRough_Offset;
    static readonly IntPtr bFullyRough_NativeProperty;
    
    public bool bFullyRough
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bFullyRough_NativeProperty, bFullyRough_Offset);
        }
    }
    
    // ByteProperty /Script/Engine.Material:FloatPrecisionMode
    static readonly int FloatPrecisionMode_Offset;
    
    public UnrealSharp.Engine.EMaterialFloatPrecisionMode FloatPrecisionMode
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EMaterialFloatPrecisionMode>.FromNative(IntPtr.Add(NativeObject, FloatPrecisionMode_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUseLightmapDirectionality
    static readonly int bUseLightmapDirectionality_Offset;
    static readonly IntPtr bUseLightmapDirectionality_NativeProperty;
    
    public bool bUseLightmapDirectionality
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseLightmapDirectionality_NativeProperty, bUseLightmapDirectionality_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bMobileEnableHighQualityBRDF
    static readonly int bMobileEnableHighQualityBRDF_Offset;
    static readonly IntPtr bMobileEnableHighQualityBRDF_NativeProperty;
    
    public bool bMobileEnableHighQualityBRDF
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bMobileEnableHighQualityBRDF_NativeProperty, bMobileEnableHighQualityBRDF_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUseAlphaToCoverage
    static readonly int bUseAlphaToCoverage_Offset;
    static readonly IntPtr bUseAlphaToCoverage_NativeProperty;
    
    public bool bUseAlphaToCoverage
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseAlphaToCoverage_NativeProperty, bUseAlphaToCoverage_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bForwardRenderUsePreintegratedGFForSimpleIBL
    static readonly int bForwardRenderUsePreintegratedGFForSimpleIBL_Offset;
    static readonly IntPtr bForwardRenderUsePreintegratedGFForSimpleIBL_NativeProperty;
    
    public bool bForwardRenderUsePreintegratedGFForSimpleIBL
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bForwardRenderUsePreintegratedGFForSimpleIBL_NativeProperty, bForwardRenderUsePreintegratedGFForSimpleIBL_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUseHQForwardReflections
    static readonly int bUseHQForwardReflections_Offset;
    static readonly IntPtr bUseHQForwardReflections_NativeProperty;
    
    public bool bUseHQForwardReflections
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseHQForwardReflections_NativeProperty, bUseHQForwardReflections_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bForwardBlendsSkyLightCubemaps
    static readonly int bForwardBlendsSkyLightCubemaps_Offset;
    static readonly IntPtr bForwardBlendsSkyLightCubemaps_NativeProperty;
    
    public bool bForwardBlendsSkyLightCubemaps
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bForwardBlendsSkyLightCubemaps_NativeProperty, bForwardBlendsSkyLightCubemaps_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bUsePlanarForwardReflections
    static readonly int bUsePlanarForwardReflections_Offset;
    static readonly IntPtr bUsePlanarForwardReflections_NativeProperty;
    
    public bool bUsePlanarForwardReflections
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsePlanarForwardReflections_NativeProperty, bUsePlanarForwardReflections_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bNormalCurvatureToRoughness
    static readonly int bNormalCurvatureToRoughness_Offset;
    static readonly IntPtr bNormalCurvatureToRoughness_NativeProperty;
    
    public bool bNormalCurvatureToRoughness
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bNormalCurvatureToRoughness_NativeProperty, bNormalCurvatureToRoughness_Offset);
        }
    }
    
    // ByteProperty /Script/Engine.Material:BlendableLocation
    static readonly int BlendableLocation_Offset;
    
    public UnrealSharp.Engine.EBlendableLocation BlendableLocation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EBlendableLocation>.FromNative(IntPtr.Add(NativeObject, BlendableLocation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EBlendableLocation>.ToNative(IntPtr.Add(NativeObject, BlendableLocation_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.Material:BlendableOutputAlpha
    static readonly int BlendableOutputAlpha_Offset;
    static readonly IntPtr BlendableOutputAlpha_NativeProperty;
    
    public bool BlendableOutputAlpha
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, BlendableOutputAlpha_NativeProperty, BlendableOutputAlpha_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, BlendableOutputAlpha_NativeProperty, BlendableOutputAlpha_Offset, value);
        }
    }
    
    // IntProperty /Script/Engine.Material:BlendablePriority
    static readonly int BlendablePriority_Offset;
    
    public int BlendablePriority
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, BlendablePriority_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, BlendablePriority_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bIsBlendable
    static readonly int bIsBlendable_Offset;
    static readonly IntPtr bIsBlendable_NativeProperty;
    
    public bool bIsBlendable
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIsBlendable_NativeProperty, bIsBlendable_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bIsBlendable_NativeProperty, bIsBlendable_Offset, value);
        }
    }
    
    // FloatProperty /Script/Engine.Material:MaxWorldPositionOffsetDisplacement
    static readonly int MaxWorldPositionOffsetDisplacement_Offset;
    
    public float MaxWorldPositionOffsetDisplacement
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxWorldPositionOffsetDisplacement_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxWorldPositionOffsetDisplacement_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.Material:bAlwaysEvaluateWorldPositionOffset
    static readonly int bAlwaysEvaluateWorldPositionOffset_Offset;
    
    public bool bAlwaysEvaluateWorldPositionOffset
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAlwaysEvaluateWorldPositionOffset_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAlwaysEvaluateWorldPositionOffset_Offset), 0, this, value);
        }
    }
    
    
}
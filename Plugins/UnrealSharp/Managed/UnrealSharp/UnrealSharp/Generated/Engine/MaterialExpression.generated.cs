// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
abstract public partial class MaterialExpression : UnrealSharp.CoreUObject.Object
{
    
    static MaterialExpression()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MaterialExpression");
        
        MaterialExpressionEditorX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaterialExpressionEditorX");
        MaterialExpressionEditorY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaterialExpressionEditorY");
        
        
        
    }
    
    protected MaterialExpression(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // IntProperty /Script/Engine.MaterialExpression:MaterialExpressionEditorX
    static readonly int MaterialExpressionEditorX_Offset;
    
    public int MaterialExpressionEditorX
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, MaterialExpressionEditorX_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, MaterialExpressionEditorX_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.MaterialExpression:MaterialExpressionEditorY
    static readonly int MaterialExpressionEditorY_Offset;
    
    public int MaterialExpressionEditorY
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, MaterialExpressionEditorY_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, MaterialExpressionEditorY_Offset), 0, this, value);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class MaterialExpressionFunctionInput : UnrealSharp.Engine.MaterialExpression
{
    
    static MaterialExpressionFunctionInput()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MaterialExpressionFunctionInput");
        
        InputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InputName");
        InputType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InputType");
        PreviewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PreviewValue");
        bUsePreviewValueAsDefault_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsePreviewValueAsDefault");
        bUsePreviewValueAsDefault_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsePreviewValueAsDefault");
        SortPriority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SortPriority");
        
        
        
    }
    
    protected MaterialExpressionFunctionInput(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // NameProperty /Script/Engine.MaterialExpressionFunctionInput:InputName
    static readonly int InputName_Offset;
    
    public Name InputName
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, InputName_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, InputName_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/Engine.MaterialExpressionFunctionInput:InputType
    static readonly int InputType_Offset;
    
    public UnrealSharp.Engine.EFunctionInputType InputType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EFunctionInputType>.FromNative(IntPtr.Add(NativeObject, InputType_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EFunctionInputType>.ToNative(IntPtr.Add(NativeObject, InputType_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.MaterialExpressionFunctionInput:PreviewValue
    static readonly int PreviewValue_Offset;
    
    public UnrealSharp.CoreUObject.Vector4f PreviewValue
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.CoreUObject.Vector4fMarshaler.FromNative(IntPtr.Add(NativeObject, PreviewValue_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.CoreUObject.Vector4fMarshaler.ToNative(IntPtr.Add(NativeObject, PreviewValue_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.MaterialExpressionFunctionInput:bUsePreviewValueAsDefault
    static readonly int bUsePreviewValueAsDefault_Offset;
    static readonly IntPtr bUsePreviewValueAsDefault_NativeProperty;
    
    public bool bUsePreviewValueAsDefault
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsePreviewValueAsDefault_NativeProperty, bUsePreviewValueAsDefault_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bUsePreviewValueAsDefault_NativeProperty, bUsePreviewValueAsDefault_Offset, value);
        }
    }
    
    // IntProperty /Script/Engine.MaterialExpressionFunctionInput:SortPriority
    static readonly int SortPriority_Offset;
    
    public int SortPriority
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, SortPriority_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, SortPriority_Offset), 0, this, value);
        }
    }
    
    
}
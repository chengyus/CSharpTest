// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class MaterialExpressionTextureCoordinate : UnrealSharp.Engine.MaterialExpression
{
    
    static MaterialExpressionTextureCoordinate()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MaterialExpressionTextureCoordinate");
        
        CoordinateIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CoordinateIndex");
        UTiling_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "UTiling");
        VTiling_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VTiling");
        
        
        
    }
    
    protected MaterialExpressionTextureCoordinate(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // IntProperty /Script/Engine.MaterialExpressionTextureCoordinate:CoordinateIndex
    static readonly int CoordinateIndex_Offset;
    
    public int CoordinateIndex
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, CoordinateIndex_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, CoordinateIndex_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.MaterialExpressionTextureCoordinate:UTiling
    static readonly int UTiling_Offset;
    
    public float UTiling
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, UTiling_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, UTiling_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.MaterialExpressionTextureCoordinate:VTiling
    static readonly int VTiling_Offset;
    
    public float VTiling
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, VTiling_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, VTiling_Offset), 0, this, value);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
abstract public partial class MaterialInstance : UnrealSharp.Engine.MaterialInterface
{
    
    static MaterialInstance()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MaterialInstance");
        
        PhysMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PhysMaterial");
        Parent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Parent");
        bOverrideSubsurfaceProfile_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOverrideSubsurfaceProfile");
        bOverrideSubsurfaceProfile_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bOverrideSubsurfaceProfile");
        ScalarParameterValues_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ScalarParameterValues");
        ScalarParameterValues_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "ScalarParameterValues");
        VectorParameterValues_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VectorParameterValues");
        VectorParameterValues_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "VectorParameterValues");
        DoubleVectorParameterValues_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DoubleVectorParameterValues");
        DoubleVectorParameterValues_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "DoubleVectorParameterValues");
        TextureParameterValues_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TextureParameterValues");
        TextureParameterValues_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "TextureParameterValues");
        RuntimeVirtualTextureParameterValues_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RuntimeVirtualTextureParameterValues");
        RuntimeVirtualTextureParameterValues_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "RuntimeVirtualTextureParameterValues");
        SparseVolumeTextureParameterValues_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SparseVolumeTextureParameterValues");
        SparseVolumeTextureParameterValues_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "SparseVolumeTextureParameterValues");
        FontParameterValues_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FontParameterValues");
        FontParameterValues_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "FontParameterValues");
        
        
        
    }
    
    protected MaterialInstance(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Engine.MaterialInstance:PhysMaterial
    static readonly int PhysMaterial_Offset;
    
    public UnrealSharp.PhysicsCore.PhysicalMaterial PhysMaterial
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.PhysicsCore.PhysicalMaterial>.FromNative(IntPtr.Add(NativeObject, PhysMaterial_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.PhysicsCore.PhysicalMaterial>.ToNative(IntPtr.Add(NativeObject, PhysMaterial_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/Engine.MaterialInstance:Parent
    static readonly int Parent_Offset;
    
    public UnrealSharp.Engine.MaterialInterface Parent
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.FromNative(IntPtr.Add(NativeObject, Parent_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.MaterialInstance:bOverrideSubsurfaceProfile
    static readonly int bOverrideSubsurfaceProfile_Offset;
    static readonly IntPtr bOverrideSubsurfaceProfile_NativeProperty;
    
    public bool bOverrideSubsurfaceProfile
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bOverrideSubsurfaceProfile_NativeProperty, bOverrideSubsurfaceProfile_Offset);
        }
    }
    
    // ArrayProperty /Script/Engine.MaterialInstance:ScalarParameterValues
    static readonly int ScalarParameterValues_Offset;
    static readonly IntPtr ScalarParameterValues_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.ScalarParameterValue> ScalarParameterValues_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.Engine.ScalarParameterValue> ScalarParameterValues
    {
        get
        {
            if(ScalarParameterValues_Wrapper == null)
            {
                ScalarParameterValues_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.ScalarParameterValue>(1, ScalarParameterValues_NativeProperty, UnrealSharp.Engine.ScalarParameterValueMarshaler.ToNative, UnrealSharp.Engine.ScalarParameterValueMarshaler.FromNative);
            }
            
            return ScalarParameterValues_Wrapper.FromNative(IntPtr.Add(NativeObject,ScalarParameterValues_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/Engine.MaterialInstance:VectorParameterValues
    static readonly int VectorParameterValues_Offset;
    static readonly IntPtr VectorParameterValues_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.VectorParameterValue> VectorParameterValues_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.Engine.VectorParameterValue> VectorParameterValues
    {
        get
        {
            if(VectorParameterValues_Wrapper == null)
            {
                VectorParameterValues_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.VectorParameterValue>(1, VectorParameterValues_NativeProperty, UnrealSharp.Engine.VectorParameterValueMarshaler.ToNative, UnrealSharp.Engine.VectorParameterValueMarshaler.FromNative);
            }
            
            return VectorParameterValues_Wrapper.FromNative(IntPtr.Add(NativeObject,VectorParameterValues_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/Engine.MaterialInstance:DoubleVectorParameterValues
    static readonly int DoubleVectorParameterValues_Offset;
    static readonly IntPtr DoubleVectorParameterValues_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.DoubleVectorParameterValue> DoubleVectorParameterValues_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.Engine.DoubleVectorParameterValue> DoubleVectorParameterValues
    {
        get
        {
            if(DoubleVectorParameterValues_Wrapper == null)
            {
                DoubleVectorParameterValues_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.DoubleVectorParameterValue>(1, DoubleVectorParameterValues_NativeProperty, UnrealSharp.Engine.DoubleVectorParameterValueMarshaler.ToNative, UnrealSharp.Engine.DoubleVectorParameterValueMarshaler.FromNative);
            }
            
            return DoubleVectorParameterValues_Wrapper.FromNative(IntPtr.Add(NativeObject,DoubleVectorParameterValues_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/Engine.MaterialInstance:TextureParameterValues
    static readonly int TextureParameterValues_Offset;
    static readonly IntPtr TextureParameterValues_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.TextureParameterValue> TextureParameterValues_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.Engine.TextureParameterValue> TextureParameterValues
    {
        get
        {
            if(TextureParameterValues_Wrapper == null)
            {
                TextureParameterValues_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.TextureParameterValue>(1, TextureParameterValues_NativeProperty, UnrealSharp.Engine.TextureParameterValueMarshaler.ToNative, UnrealSharp.Engine.TextureParameterValueMarshaler.FromNative);
            }
            
            return TextureParameterValues_Wrapper.FromNative(IntPtr.Add(NativeObject,TextureParameterValues_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/Engine.MaterialInstance:RuntimeVirtualTextureParameterValues
    static readonly int RuntimeVirtualTextureParameterValues_Offset;
    static readonly IntPtr RuntimeVirtualTextureParameterValues_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.RuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.Engine.RuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues
    {
        get
        {
            if(RuntimeVirtualTextureParameterValues_Wrapper == null)
            {
                RuntimeVirtualTextureParameterValues_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.RuntimeVirtualTextureParameterValue>(1, RuntimeVirtualTextureParameterValues_NativeProperty, UnrealSharp.Engine.RuntimeVirtualTextureParameterValueMarshaler.ToNative, UnrealSharp.Engine.RuntimeVirtualTextureParameterValueMarshaler.FromNative);
            }
            
            return RuntimeVirtualTextureParameterValues_Wrapper.FromNative(IntPtr.Add(NativeObject,RuntimeVirtualTextureParameterValues_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/Engine.MaterialInstance:SparseVolumeTextureParameterValues
    static readonly int SparseVolumeTextureParameterValues_Offset;
    static readonly IntPtr SparseVolumeTextureParameterValues_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.SparseVolumeTextureParameterValue> SparseVolumeTextureParameterValues_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.Engine.SparseVolumeTextureParameterValue> SparseVolumeTextureParameterValues
    {
        get
        {
            if(SparseVolumeTextureParameterValues_Wrapper == null)
            {
                SparseVolumeTextureParameterValues_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.SparseVolumeTextureParameterValue>(1, SparseVolumeTextureParameterValues_NativeProperty, UnrealSharp.Engine.SparseVolumeTextureParameterValueMarshaler.ToNative, UnrealSharp.Engine.SparseVolumeTextureParameterValueMarshaler.FromNative);
            }
            
            return SparseVolumeTextureParameterValues_Wrapper.FromNative(IntPtr.Add(NativeObject,SparseVolumeTextureParameterValues_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/Engine.MaterialInstance:FontParameterValues
    static readonly int FontParameterValues_Offset;
    static readonly IntPtr FontParameterValues_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.FontParameterValue> FontParameterValues_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.Engine.FontParameterValue> FontParameterValues
    {
        get
        {
            if(FontParameterValues_Wrapper == null)
            {
                FontParameterValues_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.FontParameterValue>(1, FontParameterValues_NativeProperty, UnrealSharp.Engine.FontParameterValueMarshaler.ToNative, UnrealSharp.Engine.FontParameterValueMarshaler.FromNative);
            }
            
            return FontParameterValues_Wrapper.FromNative(IntPtr.Add(NativeObject,FontParameterValues_Offset),0,this);
        }
    }
    
    
}
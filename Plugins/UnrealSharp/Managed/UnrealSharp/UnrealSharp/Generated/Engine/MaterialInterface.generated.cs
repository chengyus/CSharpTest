// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
abstract public partial class MaterialInterface : UnrealSharp.CoreUObject.Object, IBlendableInterface
{
    
    static MaterialInterface()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MaterialInterface");
        
        SubsurfaceProfile_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SubsurfaceProfile");
        
        SetForceMipLevelsToBeResident_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetForceMipLevelsToBeResident");
        SetForceMipLevelsToBeResident_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetForceMipLevelsToBeResident_NativeFunction);
        SetForceMipLevelsToBeResident_OverrideForceMiplevelsToBeResident_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetForceMipLevelsToBeResident_NativeFunction, "OverrideForceMiplevelsToBeResident");
        SetForceMipLevelsToBeResident_bForceMiplevelsToBeResidentValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetForceMipLevelsToBeResident_NativeFunction, "bForceMiplevelsToBeResidentValue");
        SetForceMipLevelsToBeResident_ForceDuration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetForceMipLevelsToBeResident_NativeFunction, "ForceDuration");
        SetForceMipLevelsToBeResident_CinematicTextureGroups_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetForceMipLevelsToBeResident_NativeFunction, "CinematicTextureGroups");
        SetForceMipLevelsToBeResident_bFastResponse_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetForceMipLevelsToBeResident_NativeFunction, "bFastResponse");
        GetPhysicalMaterialMask_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPhysicalMaterialMask");
        GetPhysicalMaterialMask_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPhysicalMaterialMask_NativeFunction);
        GetPhysicalMaterialMask_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhysicalMaterialMask_NativeFunction, "ReturnValue");
        GetPhysicalMaterialFromMap_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPhysicalMaterialFromMap");
        GetPhysicalMaterialFromMap_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPhysicalMaterialFromMap_NativeFunction);
        GetPhysicalMaterialFromMap_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhysicalMaterialFromMap_NativeFunction, "Index");
        GetPhysicalMaterialFromMap_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhysicalMaterialFromMap_NativeFunction, "ReturnValue");
        GetPhysicalMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPhysicalMaterial");
        GetPhysicalMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPhysicalMaterial_NativeFunction);
        GetPhysicalMaterial_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhysicalMaterial_NativeFunction, "ReturnValue");
        GetParameterInfo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetParameterInfo");
        GetParameterInfo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetParameterInfo_NativeFunction);
        GetParameterInfo_Association_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParameterInfo_NativeFunction, "Association");
        GetParameterInfo_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParameterInfo_NativeFunction, "ParameterName");
        GetParameterInfo_LayerFunction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParameterInfo_NativeFunction, "LayerFunction");
        GetParameterInfo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParameterInfo_NativeFunction, "ReturnValue");
        GetNaniteOverideMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNaniteOverideMaterial");
        GetNaniteOverideMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNaniteOverideMaterial_NativeFunction);
        GetNaniteOverideMaterial_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNaniteOverideMaterial_NativeFunction, "ReturnValue");
        GetBlendMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBlendMode");
        GetBlendMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBlendMode_NativeFunction);
        GetBlendMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBlendMode_NativeFunction, "ReturnValue");
        GetBaseMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBaseMaterial");
        GetBaseMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBaseMaterial_NativeFunction);
        GetBaseMaterial_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBaseMaterial_NativeFunction, "ReturnValue");
        
        
    }
    
    protected MaterialInterface(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Engine.MaterialInterface:SubsurfaceProfile
    static readonly int SubsurfaceProfile_Offset;
    
    public UnrealSharp.Engine.SubsurfaceProfile SubsurfaceProfile
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.SubsurfaceProfile>.FromNative(IntPtr.Add(NativeObject, SubsurfaceProfile_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.MaterialInterface:SetForceMipLevelsToBeResident
    static readonly IntPtr SetForceMipLevelsToBeResident_NativeFunction;
    static readonly int SetForceMipLevelsToBeResident_ParamsSize;
    static readonly int SetForceMipLevelsToBeResident_OverrideForceMiplevelsToBeResident_Offset;
    static readonly int SetForceMipLevelsToBeResident_bForceMiplevelsToBeResidentValue_Offset;
    static readonly int SetForceMipLevelsToBeResident_ForceDuration_Offset;
    static readonly int SetForceMipLevelsToBeResident_CinematicTextureGroups_Offset;
    static readonly int SetForceMipLevelsToBeResident_bFastResponse_Offset;
    
    public void SetForceMipLevelsToBeResident(bool overrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float forceDuration, int cinematicTextureGroups = 0, bool bFastResponse = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetForceMipLevelsToBeResident_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetForceMipLevelsToBeResident_OverrideForceMiplevelsToBeResident_Offset), 0, null, overrideForceMiplevelsToBeResident);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetForceMipLevelsToBeResident_bForceMiplevelsToBeResidentValue_Offset), 0, null, bForceMiplevelsToBeResidentValue);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetForceMipLevelsToBeResident_ForceDuration_Offset), 0, null, forceDuration);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetForceMipLevelsToBeResident_CinematicTextureGroups_Offset), 0, null, cinematicTextureGroups);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetForceMipLevelsToBeResident_bFastResponse_Offset), 0, null, bFastResponse);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetForceMipLevelsToBeResident_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.MaterialInterface:GetPhysicalMaterialMask
    static readonly IntPtr GetPhysicalMaterialMask_NativeFunction;
    static readonly int GetPhysicalMaterialMask_ParamsSize;
    static readonly int GetPhysicalMaterialMask_ReturnValue_Offset;
    
    public UnrealSharp.Engine.PhysicalMaterialMask GetPhysicalMaterialMask()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPhysicalMaterialMask_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPhysicalMaterialMask_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PhysicalMaterialMask returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PhysicalMaterialMask>.FromNative(IntPtr.Add(ParamsBuffer, GetPhysicalMaterialMask_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.MaterialInterface:GetPhysicalMaterialFromMap
    static readonly IntPtr GetPhysicalMaterialFromMap_NativeFunction;
    static readonly int GetPhysicalMaterialFromMap_ParamsSize;
    static readonly int GetPhysicalMaterialFromMap_Index_Offset;
    static readonly int GetPhysicalMaterialFromMap_ReturnValue_Offset;
    
    public UnrealSharp.PhysicsCore.PhysicalMaterial GetPhysicalMaterialFromMap(int index)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPhysicalMaterialFromMap_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetPhysicalMaterialFromMap_Index_Offset), 0, null, index);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPhysicalMaterialFromMap_NativeFunction, ParamsBuffer);
            
            UnrealSharp.PhysicsCore.PhysicalMaterial returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.PhysicsCore.PhysicalMaterial>.FromNative(IntPtr.Add(ParamsBuffer, GetPhysicalMaterialFromMap_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.MaterialInterface:GetPhysicalMaterial
    static readonly IntPtr GetPhysicalMaterial_NativeFunction;
    static readonly int GetPhysicalMaterial_ParamsSize;
    static readonly int GetPhysicalMaterial_ReturnValue_Offset;
    
    public UnrealSharp.PhysicsCore.PhysicalMaterial GetPhysicalMaterial()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPhysicalMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPhysicalMaterial_NativeFunction, ParamsBuffer);
            
            UnrealSharp.PhysicsCore.PhysicalMaterial returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.PhysicsCore.PhysicalMaterial>.FromNative(IntPtr.Add(ParamsBuffer, GetPhysicalMaterial_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.MaterialInterface:GetParameterInfo
    static readonly IntPtr GetParameterInfo_NativeFunction;
    static readonly int GetParameterInfo_ParamsSize;
    static readonly int GetParameterInfo_Association_Offset;
    static readonly int GetParameterInfo_ParameterName_Offset;
    static readonly int GetParameterInfo_LayerFunction_Offset;
    static readonly int GetParameterInfo_ReturnValue_Offset;
    
    public UnrealSharp.Engine.MaterialParameterInfo GetParameterInfo(UnrealSharp.Engine.EMaterialParameterAssociation association, Name parameterName, UnrealSharp.Engine.MaterialFunctionInterface layerFunction)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetParameterInfo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EMaterialParameterAssociation>.ToNative(IntPtr.Add(ParamsBuffer, GetParameterInfo_Association_Offset), 0, null, association);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetParameterInfo_ParameterName_Offset), 0, null, parameterName);
            ObjectMarshaller<UnrealSharp.Engine.MaterialFunctionInterface>.ToNative(IntPtr.Add(ParamsBuffer, GetParameterInfo_LayerFunction_Offset), 0, null, layerFunction);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetParameterInfo_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialParameterInfo returnValue;
            returnValue = UnrealSharp.Engine.MaterialParameterInfoMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetParameterInfo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.MaterialInterface:GetNaniteOverideMaterial
    static readonly IntPtr GetNaniteOverideMaterial_NativeFunction;
    static readonly int GetNaniteOverideMaterial_ParamsSize;
    static readonly int GetNaniteOverideMaterial_ReturnValue_Offset;
    
    public UnrealSharp.Engine.MaterialInterface GetNaniteOverideMaterial()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNaniteOverideMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNaniteOverideMaterial_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialInterface returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.FromNative(IntPtr.Add(ParamsBuffer, GetNaniteOverideMaterial_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.MaterialInterface:GetBlendMode
    static readonly IntPtr GetBlendMode_NativeFunction;
    static readonly int GetBlendMode_ParamsSize;
    static readonly int GetBlendMode_ReturnValue_Offset;
    
    public UnrealSharp.Engine.EBlendMode GetBlendMode()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBlendMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBlendMode_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.EBlendMode returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Engine.EBlendMode>.FromNative(IntPtr.Add(ParamsBuffer, GetBlendMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.MaterialInterface:GetBaseMaterial
    static readonly IntPtr GetBaseMaterial_NativeFunction;
    static readonly int GetBaseMaterial_ParamsSize;
    static readonly int GetBaseMaterial_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Material GetBaseMaterial()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBaseMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBaseMaterial_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Material returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Material>.FromNative(IntPtr.Add(ParamsBuffer, GetBaseMaterial_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class MeshVertexPainterLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static MeshVertexPainterLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MeshVertexPainterKismetLibrary");
        
        
        RemovePaintedVertices_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemovePaintedVertices");
        RemovePaintedVertices_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemovePaintedVertices_NativeFunction);
        RemovePaintedVertices_StaticMeshComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemovePaintedVertices_NativeFunction, "StaticMeshComponent");
        PaintVerticesSingleColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PaintVerticesSingleColor");
        PaintVerticesSingleColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PaintVerticesSingleColor_NativeFunction);
        PaintVerticesSingleColor_StaticMeshComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PaintVerticesSingleColor_NativeFunction, "StaticMeshComponent");
        PaintVerticesSingleColor_FillColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PaintVerticesSingleColor_NativeFunction, "FillColor");
        PaintVerticesSingleColor_bConvertToSRGB_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PaintVerticesSingleColor_NativeFunction, "bConvertToSRGB");
        PaintVerticesLerpAlongAxis_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PaintVerticesLerpAlongAxis");
        PaintVerticesLerpAlongAxis_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PaintVerticesLerpAlongAxis_NativeFunction);
        PaintVerticesLerpAlongAxis_StaticMeshComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PaintVerticesLerpAlongAxis_NativeFunction, "StaticMeshComponent");
        PaintVerticesLerpAlongAxis_StartColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PaintVerticesLerpAlongAxis_NativeFunction, "StartColor");
        PaintVerticesLerpAlongAxis_EndColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PaintVerticesLerpAlongAxis_NativeFunction, "EndColor");
        PaintVerticesLerpAlongAxis_Axis_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PaintVerticesLerpAlongAxis_NativeFunction, "Axis");
        PaintVerticesLerpAlongAxis_bConvertToSRGB_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PaintVerticesLerpAlongAxis_NativeFunction, "bConvertToSRGB");
        
        
    }
    
    protected MeshVertexPainterLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.MeshVertexPainterKismetLibrary:RemovePaintedVertices
    static readonly IntPtr RemovePaintedVertices_NativeFunction;
    static readonly int RemovePaintedVertices_ParamsSize;
    static readonly int RemovePaintedVertices_StaticMeshComponent_Offset;
    
    public static void RemovePaintedVertices(UnrealSharp.Engine.StaticMeshComponent staticMeshComponent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemovePaintedVertices_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.StaticMeshComponent>.ToNative(IntPtr.Add(ParamsBuffer, RemovePaintedVertices_StaticMeshComponent_Offset), 0, null, staticMeshComponent);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RemovePaintedVertices_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.MeshVertexPainterKismetLibrary:PaintVerticesSingleColor
    static readonly IntPtr PaintVerticesSingleColor_NativeFunction;
    static readonly int PaintVerticesSingleColor_ParamsSize;
    static readonly int PaintVerticesSingleColor_StaticMeshComponent_Offset;
    static readonly int PaintVerticesSingleColor_FillColor_Offset;
    static readonly int PaintVerticesSingleColor_bConvertToSRGB_Offset;
    
    public static void PaintVerticesSingleColor(UnrealSharp.Engine.StaticMeshComponent staticMeshComponent, UnrealSharp.CoreUObject.LinearColor fillColor, bool bConvertToSRGB = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PaintVerticesSingleColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.StaticMeshComponent>.ToNative(IntPtr.Add(ParamsBuffer, PaintVerticesSingleColor_StaticMeshComponent_Offset), 0, null, staticMeshComponent);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, PaintVerticesSingleColor_FillColor_Offset), 0, null, fillColor);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, PaintVerticesSingleColor_bConvertToSRGB_Offset), 0, null, bConvertToSRGB);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, PaintVerticesSingleColor_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.MeshVertexPainterKismetLibrary:PaintVerticesLerpAlongAxis
    static readonly IntPtr PaintVerticesLerpAlongAxis_NativeFunction;
    static readonly int PaintVerticesLerpAlongAxis_ParamsSize;
    static readonly int PaintVerticesLerpAlongAxis_StaticMeshComponent_Offset;
    static readonly int PaintVerticesLerpAlongAxis_StartColor_Offset;
    static readonly int PaintVerticesLerpAlongAxis_EndColor_Offset;
    static readonly int PaintVerticesLerpAlongAxis_Axis_Offset;
    static readonly int PaintVerticesLerpAlongAxis_bConvertToSRGB_Offset;
    
    public static void PaintVerticesLerpAlongAxis(UnrealSharp.Engine.StaticMeshComponent staticMeshComponent, UnrealSharp.CoreUObject.LinearColor startColor, UnrealSharp.CoreUObject.LinearColor endColor, UnrealSharp.Engine.EVertexPaintAxis axis, bool bConvertToSRGB = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PaintVerticesLerpAlongAxis_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.StaticMeshComponent>.ToNative(IntPtr.Add(ParamsBuffer, PaintVerticesLerpAlongAxis_StaticMeshComponent_Offset), 0, null, staticMeshComponent);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, PaintVerticesLerpAlongAxis_StartColor_Offset), 0, null, startColor);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, PaintVerticesLerpAlongAxis_EndColor_Offset), 0, null, endColor);
            BlittableMarshaller<UnrealSharp.Engine.EVertexPaintAxis>.ToNative(IntPtr.Add(ParamsBuffer, PaintVerticesLerpAlongAxis_Axis_Offset), 0, null, axis);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, PaintVerticesLerpAlongAxis_bConvertToSRGB_Offset), 0, null, bConvertToSRGB);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, PaintVerticesLerpAlongAxis_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    
}
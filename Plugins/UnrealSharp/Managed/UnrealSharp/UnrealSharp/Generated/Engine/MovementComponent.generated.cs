// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
abstract public partial class MovementComponent : UnrealSharp.Engine.ActorComponent
{
    
    static MovementComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MovementComponent");
        
        UpdatedComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "UpdatedComponent");
        UpdatedPrimitive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "UpdatedPrimitive");
        Velocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Velocity");
        PlaneConstraintNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PlaneConstraintNormal");
        PlaneConstraintOrigin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PlaneConstraintOrigin");
        bUpdateOnlyIfRendered_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUpdateOnlyIfRendered");
        bUpdateOnlyIfRendered_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUpdateOnlyIfRendered");
        bAutoUpdateTickRegistration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAutoUpdateTickRegistration");
        bAutoUpdateTickRegistration_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAutoUpdateTickRegistration");
        bTickBeforeOwner_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bTickBeforeOwner");
        bTickBeforeOwner_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bTickBeforeOwner");
        bAutoRegisterUpdatedComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAutoRegisterUpdatedComponent");
        bAutoRegisterUpdatedComponent_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAutoRegisterUpdatedComponent");
        bConstrainToPlane_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bConstrainToPlane");
        bConstrainToPlane_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bConstrainToPlane");
        bSnapToPlaneAtStart_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSnapToPlaneAtStart");
        bSnapToPlaneAtStart_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bSnapToPlaneAtStart");
        bAutoRegisterPhysicsVolumeUpdates_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAutoRegisterPhysicsVolumeUpdates");
        bAutoRegisterPhysicsVolumeUpdates_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAutoRegisterPhysicsVolumeUpdates");
        bComponentShouldUpdatePhysicsVolume_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bComponentShouldUpdatePhysicsVolume");
        bComponentShouldUpdatePhysicsVolume_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bComponentShouldUpdatePhysicsVolume");
        
        StopMovementImmediately_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopMovementImmediately");
        SnapUpdatedComponentToPlane_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SnapUpdatedComponentToPlane");
        SetUpdatedComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetUpdatedComponent");
        SetUpdatedComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetUpdatedComponent_NativeFunction);
        SetUpdatedComponent_NewUpdatedComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUpdatedComponent_NativeFunction, "NewUpdatedComponent");
        SetPlaneConstraintOrigin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlaneConstraintOrigin");
        SetPlaneConstraintOrigin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlaneConstraintOrigin_NativeFunction);
        SetPlaneConstraintOrigin_PlaneOrigin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaneConstraintOrigin_NativeFunction, "PlaneOrigin");
        SetPlaneConstraintNormal_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlaneConstraintNormal");
        SetPlaneConstraintNormal_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlaneConstraintNormal_NativeFunction);
        SetPlaneConstraintNormal_PlaneNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaneConstraintNormal_NativeFunction, "PlaneNormal");
        SetPlaneConstraintFromVectors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlaneConstraintFromVectors");
        SetPlaneConstraintFromVectors_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlaneConstraintFromVectors_NativeFunction);
        SetPlaneConstraintFromVectors_Forward_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaneConstraintFromVectors_NativeFunction, "Forward");
        SetPlaneConstraintFromVectors_Up_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaneConstraintFromVectors_NativeFunction, "Up");
        SetPlaneConstraintEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlaneConstraintEnabled");
        SetPlaneConstraintEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlaneConstraintEnabled_NativeFunction);
        SetPlaneConstraintEnabled_bEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaneConstraintEnabled_NativeFunction, "bEnabled");
        SetPlaneConstraintAxisSetting_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlaneConstraintAxisSetting");
        SetPlaneConstraintAxisSetting_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlaneConstraintAxisSetting_NativeFunction);
        SetPlaneConstraintAxisSetting_NewAxisSetting_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaneConstraintAxisSetting_NativeFunction, "NewAxisSetting");
        K2_MoveUpdatedComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_MoveUpdatedComponent");
        K2_MoveUpdatedComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_MoveUpdatedComponent_NativeFunction);
        K2_MoveUpdatedComponent_Delta_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_MoveUpdatedComponent_NativeFunction, "Delta");
        K2_MoveUpdatedComponent_NewRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_MoveUpdatedComponent_NativeFunction, "NewRotation");
        K2_MoveUpdatedComponent_OutHit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_MoveUpdatedComponent_NativeFunction, "OutHit");
        K2_MoveUpdatedComponent_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_MoveUpdatedComponent_NativeFunction, "bSweep");
        K2_MoveUpdatedComponent_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_MoveUpdatedComponent_NativeFunction, "bTeleport");
        K2_MoveUpdatedComponent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_MoveUpdatedComponent_NativeFunction, "ReturnValue");
        IsExceedingMaxSpeed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsExceedingMaxSpeed");
        IsExceedingMaxSpeed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsExceedingMaxSpeed_NativeFunction);
        IsExceedingMaxSpeed_MaxSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsExceedingMaxSpeed_NativeFunction, "MaxSpeed");
        IsExceedingMaxSpeed_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsExceedingMaxSpeed_NativeFunction, "ReturnValue");
        GetPlaneConstraintOrigin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlaneConstraintOrigin");
        GetPlaneConstraintOrigin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlaneConstraintOrigin_NativeFunction);
        GetPlaneConstraintOrigin_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlaneConstraintOrigin_NativeFunction, "ReturnValue");
        GetPlaneConstraintNormal_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlaneConstraintNormal");
        GetPlaneConstraintNormal_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlaneConstraintNormal_NativeFunction);
        GetPlaneConstraintNormal_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlaneConstraintNormal_NativeFunction, "ReturnValue");
        GetPlaneConstraintAxisSetting_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlaneConstraintAxisSetting");
        GetPlaneConstraintAxisSetting_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlaneConstraintAxisSetting_NativeFunction);
        GetPlaneConstraintAxisSetting_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlaneConstraintAxisSetting_NativeFunction, "ReturnValue");
        GetPhysicsVolume_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPhysicsVolume");
        GetPhysicsVolume_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPhysicsVolume_NativeFunction);
        GetPhysicsVolume_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhysicsVolume_NativeFunction, "ReturnValue");
        GetMaxSpeed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaxSpeed");
        GetMaxSpeed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaxSpeed_NativeFunction);
        GetMaxSpeed_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaxSpeed_NativeFunction, "ReturnValue");
        GetGravityZ_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGravityZ");
        GetGravityZ_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGravityZ_NativeFunction);
        GetGravityZ_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGravityZ_NativeFunction, "ReturnValue");
        ConstrainNormalToPlane_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConstrainNormalToPlane");
        ConstrainNormalToPlane_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConstrainNormalToPlane_NativeFunction);
        ConstrainNormalToPlane_Normal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConstrainNormalToPlane_NativeFunction, "Normal");
        ConstrainNormalToPlane_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConstrainNormalToPlane_NativeFunction, "ReturnValue");
        ConstrainLocationToPlane_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConstrainLocationToPlane");
        ConstrainLocationToPlane_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConstrainLocationToPlane_NativeFunction);
        ConstrainLocationToPlane_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConstrainLocationToPlane_NativeFunction, "Location");
        ConstrainLocationToPlane_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConstrainLocationToPlane_NativeFunction, "ReturnValue");
        ConstrainDirectionToPlane_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConstrainDirectionToPlane");
        ConstrainDirectionToPlane_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConstrainDirectionToPlane_NativeFunction);
        ConstrainDirectionToPlane_Direction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConstrainDirectionToPlane_NativeFunction, "Direction");
        ConstrainDirectionToPlane_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConstrainDirectionToPlane_NativeFunction, "ReturnValue");
        
        
    }
    
    protected MovementComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Engine.MovementComponent:UpdatedComponent
    static readonly int UpdatedComponent_Offset;
    
    public UnrealSharp.Engine.SceneComponent UpdatedComponent
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.FromNative(IntPtr.Add(NativeObject, UpdatedComponent_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/Engine.MovementComponent:UpdatedPrimitive
    static readonly int UpdatedPrimitive_Offset;
    
    public UnrealSharp.Engine.PrimitiveComponent UpdatedPrimitive
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.FromNative(IntPtr.Add(NativeObject, UpdatedPrimitive_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.MovementComponent:Velocity
    static readonly int Velocity_Offset;
    
    public System.DoubleNumerics.Vector3 Velocity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, Velocity_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, Velocity_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.MovementComponent:PlaneConstraintNormal
    static readonly int PlaneConstraintNormal_Offset;
    
    public System.DoubleNumerics.Vector3 PlaneConstraintNormal
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, PlaneConstraintNormal_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.MovementComponent:PlaneConstraintOrigin
    static readonly int PlaneConstraintOrigin_Offset;
    
    public System.DoubleNumerics.Vector3 PlaneConstraintOrigin
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, PlaneConstraintOrigin_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.MovementComponent:bUpdateOnlyIfRendered
    static readonly int bUpdateOnlyIfRendered_Offset;
    static readonly IntPtr bUpdateOnlyIfRendered_NativeProperty;
    
    public bool bUpdateOnlyIfRendered
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUpdateOnlyIfRendered_NativeProperty, bUpdateOnlyIfRendered_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bUpdateOnlyIfRendered_NativeProperty, bUpdateOnlyIfRendered_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.MovementComponent:bAutoUpdateTickRegistration
    static readonly int bAutoUpdateTickRegistration_Offset;
    static readonly IntPtr bAutoUpdateTickRegistration_NativeProperty;
    
    public bool bAutoUpdateTickRegistration
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAutoUpdateTickRegistration_NativeProperty, bAutoUpdateTickRegistration_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.MovementComponent:bTickBeforeOwner
    static readonly int bTickBeforeOwner_Offset;
    static readonly IntPtr bTickBeforeOwner_NativeProperty;
    
    public bool bTickBeforeOwner
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bTickBeforeOwner_NativeProperty, bTickBeforeOwner_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.MovementComponent:bAutoRegisterUpdatedComponent
    static readonly int bAutoRegisterUpdatedComponent_Offset;
    static readonly IntPtr bAutoRegisterUpdatedComponent_NativeProperty;
    
    public bool bAutoRegisterUpdatedComponent
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAutoRegisterUpdatedComponent_NativeProperty, bAutoRegisterUpdatedComponent_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.MovementComponent:bConstrainToPlane
    static readonly int bConstrainToPlane_Offset;
    static readonly IntPtr bConstrainToPlane_NativeProperty;
    
    public bool bConstrainToPlane
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bConstrainToPlane_NativeProperty, bConstrainToPlane_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.MovementComponent:bSnapToPlaneAtStart
    static readonly int bSnapToPlaneAtStart_Offset;
    static readonly IntPtr bSnapToPlaneAtStart_NativeProperty;
    
    public bool bSnapToPlaneAtStart
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bSnapToPlaneAtStart_NativeProperty, bSnapToPlaneAtStart_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.MovementComponent:bAutoRegisterPhysicsVolumeUpdates
    static readonly int bAutoRegisterPhysicsVolumeUpdates_Offset;
    static readonly IntPtr bAutoRegisterPhysicsVolumeUpdates_NativeProperty;
    
    public bool bAutoRegisterPhysicsVolumeUpdates
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAutoRegisterPhysicsVolumeUpdates_NativeProperty, bAutoRegisterPhysicsVolumeUpdates_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.MovementComponent:bComponentShouldUpdatePhysicsVolume
    static readonly int bComponentShouldUpdatePhysicsVolume_Offset;
    static readonly IntPtr bComponentShouldUpdatePhysicsVolume_NativeProperty;
    
    public bool bComponentShouldUpdatePhysicsVolume
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bComponentShouldUpdatePhysicsVolume_NativeProperty, bComponentShouldUpdatePhysicsVolume_Offset);
        }
    }
    
    // Function /Script/Engine.MovementComponent:StopMovementImmediately
    static readonly IntPtr StopMovementImmediately_NativeFunction;
    
    public void StopMovementImmediately()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopMovementImmediately_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.MovementComponent:SnapUpdatedComponentToPlane
    static readonly IntPtr SnapUpdatedComponentToPlane_NativeFunction;
    
    public void SnapUpdatedComponentToPlane()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SnapUpdatedComponentToPlane_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.MovementComponent:SetUpdatedComponent
    static readonly IntPtr SetUpdatedComponent_NativeFunction;
    static readonly int SetUpdatedComponent_ParamsSize;
    static readonly int SetUpdatedComponent_NewUpdatedComponent_Offset;
    
    public void SetUpdatedComponent(UnrealSharp.Engine.SceneComponent newUpdatedComponent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetUpdatedComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.ToNative(IntPtr.Add(ParamsBuffer, SetUpdatedComponent_NewUpdatedComponent_Offset), 0, null, newUpdatedComponent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetUpdatedComponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.MovementComponent:SetPlaneConstraintOrigin
    static readonly IntPtr SetPlaneConstraintOrigin_NativeFunction;
    static readonly int SetPlaneConstraintOrigin_ParamsSize;
    static readonly int SetPlaneConstraintOrigin_PlaneOrigin_Offset;
    
    public void SetPlaneConstraintOrigin(System.DoubleNumerics.Vector3 planeOrigin)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlaneConstraintOrigin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaneConstraintOrigin_PlaneOrigin_Offset), 0, null, planeOrigin);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPlaneConstraintOrigin_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.MovementComponent:SetPlaneConstraintNormal
    static readonly IntPtr SetPlaneConstraintNormal_NativeFunction;
    static readonly int SetPlaneConstraintNormal_ParamsSize;
    static readonly int SetPlaneConstraintNormal_PlaneNormal_Offset;
    
    public void SetPlaneConstraintNormal(System.DoubleNumerics.Vector3 planeNormal)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlaneConstraintNormal_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaneConstraintNormal_PlaneNormal_Offset), 0, null, planeNormal);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPlaneConstraintNormal_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.MovementComponent:SetPlaneConstraintFromVectors
    static readonly IntPtr SetPlaneConstraintFromVectors_NativeFunction;
    static readonly int SetPlaneConstraintFromVectors_ParamsSize;
    static readonly int SetPlaneConstraintFromVectors_Forward_Offset;
    static readonly int SetPlaneConstraintFromVectors_Up_Offset;
    
    public void SetPlaneConstraintFromVectors(System.DoubleNumerics.Vector3 forward, System.DoubleNumerics.Vector3 up)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlaneConstraintFromVectors_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaneConstraintFromVectors_Forward_Offset), 0, null, forward);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaneConstraintFromVectors_Up_Offset), 0, null, up);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPlaneConstraintFromVectors_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.MovementComponent:SetPlaneConstraintEnabled
    static readonly IntPtr SetPlaneConstraintEnabled_NativeFunction;
    static readonly int SetPlaneConstraintEnabled_ParamsSize;
    static readonly int SetPlaneConstraintEnabled_bEnabled_Offset;
    
    public void SetPlaneConstraintEnabled(bool bEnabled)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlaneConstraintEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetPlaneConstraintEnabled_bEnabled_Offset), 0, null, bEnabled);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPlaneConstraintEnabled_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.MovementComponent:SetPlaneConstraintAxisSetting
    static readonly IntPtr SetPlaneConstraintAxisSetting_NativeFunction;
    static readonly int SetPlaneConstraintAxisSetting_ParamsSize;
    static readonly int SetPlaneConstraintAxisSetting_NewAxisSetting_Offset;
    
    public void SetPlaneConstraintAxisSetting(UnrealSharp.Engine.EPlaneConstraintAxisSetting newAxisSetting)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlaneConstraintAxisSetting_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EPlaneConstraintAxisSetting>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaneConstraintAxisSetting_NewAxisSetting_Offset), 0, null, newAxisSetting);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPlaneConstraintAxisSetting_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.MovementComponent:K2_MoveUpdatedComponent
    static readonly IntPtr K2_MoveUpdatedComponent_NativeFunction;
    static readonly int K2_MoveUpdatedComponent_ParamsSize;
    static readonly int K2_MoveUpdatedComponent_Delta_Offset;
    static readonly int K2_MoveUpdatedComponent_NewRotation_Offset;
    static readonly int K2_MoveUpdatedComponent_OutHit_Offset;
    static readonly int K2_MoveUpdatedComponent_bSweep_Offset;
    static readonly int K2_MoveUpdatedComponent_bTeleport_Offset;
    static readonly int K2_MoveUpdatedComponent_ReturnValue_Offset;
    
    public bool MoveUpdatedComponent(System.DoubleNumerics.Vector3 delta, UnrealSharp.Rotator newRotation, out UnrealSharp.Engine.HitResult outHit, bool bSweep = true, bool bTeleport = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_MoveUpdatedComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_MoveUpdatedComponent_Delta_Offset), 0, null, delta);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, K2_MoveUpdatedComponent_NewRotation_Offset), 0, null, newRotation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_MoveUpdatedComponent_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_MoveUpdatedComponent_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_MoveUpdatedComponent_NativeFunction, ParamsBuffer);
            
            outHit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_MoveUpdatedComponent_OutHit_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_MoveUpdatedComponent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.MovementComponent:IsExceedingMaxSpeed
    static readonly IntPtr IsExceedingMaxSpeed_NativeFunction;
    static readonly int IsExceedingMaxSpeed_ParamsSize;
    static readonly int IsExceedingMaxSpeed_MaxSpeed_Offset;
    static readonly int IsExceedingMaxSpeed_ReturnValue_Offset;
    
    public bool IsExceedingMaxSpeed(float maxSpeed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsExceedingMaxSpeed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, IsExceedingMaxSpeed_MaxSpeed_Offset), 0, null, maxSpeed);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsExceedingMaxSpeed_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsExceedingMaxSpeed_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.MovementComponent:GetPlaneConstraintOrigin
    static readonly IntPtr GetPlaneConstraintOrigin_NativeFunction;
    static readonly int GetPlaneConstraintOrigin_ParamsSize;
    static readonly int GetPlaneConstraintOrigin_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetPlaneConstraintOrigin()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlaneConstraintOrigin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPlaneConstraintOrigin_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetPlaneConstraintOrigin_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.MovementComponent:GetPlaneConstraintNormal
    static readonly IntPtr GetPlaneConstraintNormal_NativeFunction;
    static readonly int GetPlaneConstraintNormal_ParamsSize;
    static readonly int GetPlaneConstraintNormal_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetPlaneConstraintNormal()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlaneConstraintNormal_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPlaneConstraintNormal_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetPlaneConstraintNormal_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.MovementComponent:GetPlaneConstraintAxisSetting
    static readonly IntPtr GetPlaneConstraintAxisSetting_NativeFunction;
    static readonly int GetPlaneConstraintAxisSetting_ParamsSize;
    static readonly int GetPlaneConstraintAxisSetting_ReturnValue_Offset;
    
    public UnrealSharp.Engine.EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlaneConstraintAxisSetting_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPlaneConstraintAxisSetting_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.EPlaneConstraintAxisSetting returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Engine.EPlaneConstraintAxisSetting>.FromNative(IntPtr.Add(ParamsBuffer, GetPlaneConstraintAxisSetting_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.MovementComponent:GetPhysicsVolume
    static readonly IntPtr GetPhysicsVolume_NativeFunction;
    static readonly int GetPhysicsVolume_ParamsSize;
    static readonly int GetPhysicsVolume_ReturnValue_Offset;
    
    public UnrealSharp.Engine.PhysicsVolume GetPhysicsVolume()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPhysicsVolume_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPhysicsVolume_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PhysicsVolume returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PhysicsVolume>.FromNative(IntPtr.Add(ParamsBuffer, GetPhysicsVolume_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.MovementComponent:GetMaxSpeed
    static readonly IntPtr GetMaxSpeed_NativeFunction;
    static readonly int GetMaxSpeed_ParamsSize;
    static readonly int GetMaxSpeed_ReturnValue_Offset;
    
    public float GetMaxSpeed()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaxSpeed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMaxSpeed_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetMaxSpeed_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.MovementComponent:GetGravityZ
    static readonly IntPtr GetGravityZ_NativeFunction;
    static readonly int GetGravityZ_ParamsSize;
    static readonly int GetGravityZ_ReturnValue_Offset;
    
    public float GetGravityZ()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGravityZ_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetGravityZ_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetGravityZ_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.MovementComponent:ConstrainNormalToPlane
    static readonly IntPtr ConstrainNormalToPlane_NativeFunction;
    static readonly int ConstrainNormalToPlane_ParamsSize;
    static readonly int ConstrainNormalToPlane_Normal_Offset;
    static readonly int ConstrainNormalToPlane_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 ConstrainNormalToPlane(System.DoubleNumerics.Vector3 normal)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConstrainNormalToPlane_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ConstrainNormalToPlane_Normal_Offset), 0, null, normal);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConstrainNormalToPlane_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, ConstrainNormalToPlane_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.MovementComponent:ConstrainLocationToPlane
    static readonly IntPtr ConstrainLocationToPlane_NativeFunction;
    static readonly int ConstrainLocationToPlane_ParamsSize;
    static readonly int ConstrainLocationToPlane_Location_Offset;
    static readonly int ConstrainLocationToPlane_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 ConstrainLocationToPlane(System.DoubleNumerics.Vector3 location)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConstrainLocationToPlane_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ConstrainLocationToPlane_Location_Offset), 0, null, location);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConstrainLocationToPlane_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, ConstrainLocationToPlane_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.MovementComponent:ConstrainDirectionToPlane
    static readonly IntPtr ConstrainDirectionToPlane_NativeFunction;
    static readonly int ConstrainDirectionToPlane_ParamsSize;
    static readonly int ConstrainDirectionToPlane_Direction_Offset;
    static readonly int ConstrainDirectionToPlane_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 ConstrainDirectionToPlane(System.DoubleNumerics.Vector3 direction)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConstrainDirectionToPlane_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ConstrainDirectionToPlane_Direction_Offset), 0, null, direction);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConstrainDirectionToPlane_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, ConstrainDirectionToPlane_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
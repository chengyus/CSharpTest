// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
abstract public partial class NavMovementComponent : UnrealSharp.Engine.MovementComponent
{
    
    static NavMovementComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("NavMovementComponent");
        
        NavAgentProps_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NavAgentProps");
        
        StopMovementKeepPathing_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopMovementKeepPathing");
        StopActiveMovement_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopActiveMovement");
        IsSwimming_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsSwimming");
        IsSwimming_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsSwimming_NativeFunction);
        IsSwimming_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSwimming_NativeFunction, "ReturnValue");
        IsMovingOnGround_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsMovingOnGround");
        IsMovingOnGround_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsMovingOnGround_NativeFunction);
        IsMovingOnGround_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsMovingOnGround_NativeFunction, "ReturnValue");
        IsFlying_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsFlying");
        IsFlying_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsFlying_NativeFunction);
        IsFlying_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsFlying_NativeFunction, "ReturnValue");
        IsFalling_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsFalling");
        IsFalling_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsFalling_NativeFunction);
        IsFalling_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsFalling_NativeFunction, "ReturnValue");
        IsCrouching_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsCrouching");
        IsCrouching_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsCrouching_NativeFunction);
        IsCrouching_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsCrouching_NativeFunction, "ReturnValue");
        
        
    }
    
    protected NavMovementComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/Engine.NavMovementComponent:NavAgentProps
    static readonly int NavAgentProps_Offset;
    
    public UnrealSharp.Engine.NavAgentProperties NavAgentProps
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.NavAgentPropertiesMarshaler.FromNative(IntPtr.Add(NativeObject, NavAgentProps_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.Engine.NavAgentPropertiesMarshaler.ToNative(IntPtr.Add(NativeObject, NavAgentProps_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Engine.NavMovementComponent:StopMovementKeepPathing
    static readonly IntPtr StopMovementKeepPathing_NativeFunction;
    
    public void StopMovementKeepPathing()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopMovementKeepPathing_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.NavMovementComponent:StopActiveMovement
    static readonly IntPtr StopActiveMovement_NativeFunction;
    
    public void StopActiveMovement()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopActiveMovement_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.NavMovementComponent:IsSwimming
    static readonly IntPtr IsSwimming_NativeFunction;
    static readonly int IsSwimming_ParamsSize;
    static readonly int IsSwimming_ReturnValue_Offset;
    
    public bool IsSwimming()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsSwimming_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsSwimming_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsSwimming_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.NavMovementComponent:IsMovingOnGround
    static readonly IntPtr IsMovingOnGround_NativeFunction;
    static readonly int IsMovingOnGround_ParamsSize;
    static readonly int IsMovingOnGround_ReturnValue_Offset;
    
    public bool IsMovingOnGround()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsMovingOnGround_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsMovingOnGround_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsMovingOnGround_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.NavMovementComponent:IsFlying
    static readonly IntPtr IsFlying_NativeFunction;
    static readonly int IsFlying_ParamsSize;
    static readonly int IsFlying_ReturnValue_Offset;
    
    public bool IsFlying()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsFlying_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsFlying_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsFlying_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.NavMovementComponent:IsFalling
    static readonly IntPtr IsFalling_NativeFunction;
    static readonly int IsFalling_ParamsSize;
    static readonly int IsFalling_ReturnValue_Offset;
    
    public bool IsFalling()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsFalling_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsFalling_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsFalling_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.NavMovementComponent:IsCrouching
    static readonly IntPtr IsCrouching_NativeFunction;
    static readonly int IsCrouching_ParamsSize;
    static readonly int IsCrouching_ReturnValue_Offset;
    
    public bool IsCrouching()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsCrouching_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsCrouching_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsCrouching_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class PainCausingVolume : UnrealSharp.Engine.PhysicsVolume
{
    
    static PainCausingVolume()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PainCausingVolume");
        
        bPainCausing_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bPainCausing");
        bPainCausing_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bPainCausing");
        DamagePerSec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DamagePerSec");
        DamageType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DamageType");
        PainInterval_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PainInterval");
        bEntryPain_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEntryPain");
        bEntryPain_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEntryPain");
        
        
        
    }
    
    protected PainCausingVolume(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/Engine.PainCausingVolume:bPainCausing
    static readonly int bPainCausing_Offset;
    static readonly IntPtr bPainCausing_NativeProperty;
    
    public bool bPainCausing
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bPainCausing_NativeProperty, bPainCausing_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bPainCausing_NativeProperty, bPainCausing_Offset, value);
        }
    }
    
    // FloatProperty /Script/Engine.PainCausingVolume:DamagePerSec
    static readonly int DamagePerSec_Offset;
    
    public float DamagePerSec
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, DamagePerSec_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, DamagePerSec_Offset), 0, this, value);
        }
    }
    
    // ClassProperty /Script/Engine.PainCausingVolume:DamageType
    static readonly int DamageType_Offset;
    
    public SubclassOf<UnrealSharp.Engine.DamageType> DamageType
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.Engine.DamageType>.FromNative(IntPtr.Add(NativeObject, DamageType_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            SubclassOfMarshaller<UnrealSharp.Engine.DamageType>.ToNative(IntPtr.Add(NativeObject, DamageType_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.PainCausingVolume:PainInterval
    static readonly int PainInterval_Offset;
    
    public float PainInterval
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PainInterval_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PainInterval_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.PainCausingVolume:bEntryPain
    static readonly int bEntryPain_Offset;
    static readonly IntPtr bEntryPain_NativeProperty;
    
    public bool bEntryPain
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEntryPain_NativeProperty, bEntryPain_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bEntryPain_NativeProperty, bEntryPain_Offset, value);
        }
    }
    
    
}
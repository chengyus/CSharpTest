// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class ParticleSystemComponent : UnrealSharp.Engine.FXSystemComponent
{
    
    static ParticleSystemComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ParticleSystemComponent");
        
        Template_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Template");
        bResetOnDetach_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bResetOnDetach");
        bResetOnDetach_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bResetOnDetach");
        bAllowRecycling_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAllowRecycling");
        bAllowRecycling_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAllowRecycling");
        bAutoManageAttachment_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAutoManageAttachment");
        bAutoManageAttachment_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAutoManageAttachment");
        bAutoAttachWeldSimulatedBodies_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAutoAttachWeldSimulatedBodies");
        bAutoAttachWeldSimulatedBodies_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAutoAttachWeldSimulatedBodies");
        bOverrideLODMethod_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOverrideLODMethod");
        bOverrideLODMethod_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bOverrideLODMethod");
        LODMethod_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LODMethod");
        InstanceParameters_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InstanceParameters");
        InstanceParameters_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "InstanceParameters");
        SecondsBeforeInactive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SecondsBeforeInactive");
        CustomTimeDilation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CustomTimeDilation");
        AutoAttachParent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AutoAttachParent");
        AutoAttachSocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AutoAttachSocketName");
        AutoAttachLocationRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AutoAttachLocationRule");
        AutoAttachRotationRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AutoAttachRotationRule");
        AutoAttachScaleRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AutoAttachScaleRule");
        
        SetTrailSourceData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTrailSourceData");
        SetTrailSourceData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTrailSourceData_NativeFunction);
        SetTrailSourceData_InFirstSocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTrailSourceData_NativeFunction, "InFirstSocketName");
        SetTrailSourceData_InSecondSocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTrailSourceData_NativeFunction, "InSecondSocketName");
        SetTrailSourceData_InWidthMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTrailSourceData_NativeFunction, "InWidthMode");
        SetTrailSourceData_InWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTrailSourceData_NativeFunction, "InWidth");
        SetTemplate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTemplate");
        SetTemplate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTemplate_NativeFunction);
        SetTemplate_NewTemplate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTemplate_NativeFunction, "NewTemplate");
        SetMaterialParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMaterialParameter");
        SetMaterialParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMaterialParameter_NativeFunction);
        SetMaterialParameter_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialParameter_NativeFunction, "ParameterName");
        SetMaterialParameter_Param_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialParameter_NativeFunction, "Param");
        SetBeamTargetTangent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBeamTargetTangent");
        SetBeamTargetTangent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBeamTargetTangent_NativeFunction);
        SetBeamTargetTangent_EmitterIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBeamTargetTangent_NativeFunction, "EmitterIndex");
        SetBeamTargetTangent_NewTangentPoint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBeamTargetTangent_NativeFunction, "NewTangentPoint");
        SetBeamTargetTangent_TargetIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBeamTargetTangent_NativeFunction, "TargetIndex");
        SetBeamTargetStrength_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBeamTargetStrength");
        SetBeamTargetStrength_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBeamTargetStrength_NativeFunction);
        SetBeamTargetStrength_EmitterIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBeamTargetStrength_NativeFunction, "EmitterIndex");
        SetBeamTargetStrength_NewTargetStrength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBeamTargetStrength_NativeFunction, "NewTargetStrength");
        SetBeamTargetStrength_TargetIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBeamTargetStrength_NativeFunction, "TargetIndex");
        SetBeamTargetPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBeamTargetPoint");
        SetBeamTargetPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBeamTargetPoint_NativeFunction);
        SetBeamTargetPoint_EmitterIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBeamTargetPoint_NativeFunction, "EmitterIndex");
        SetBeamTargetPoint_NewTargetPoint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBeamTargetPoint_NativeFunction, "NewTargetPoint");
        SetBeamTargetPoint_TargetIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBeamTargetPoint_NativeFunction, "TargetIndex");
        SetBeamSourceTangent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBeamSourceTangent");
        SetBeamSourceTangent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBeamSourceTangent_NativeFunction);
        SetBeamSourceTangent_EmitterIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBeamSourceTangent_NativeFunction, "EmitterIndex");
        SetBeamSourceTangent_NewTangentPoint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBeamSourceTangent_NativeFunction, "NewTangentPoint");
        SetBeamSourceTangent_SourceIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBeamSourceTangent_NativeFunction, "SourceIndex");
        SetBeamSourceStrength_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBeamSourceStrength");
        SetBeamSourceStrength_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBeamSourceStrength_NativeFunction);
        SetBeamSourceStrength_EmitterIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBeamSourceStrength_NativeFunction, "EmitterIndex");
        SetBeamSourceStrength_NewSourceStrength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBeamSourceStrength_NativeFunction, "NewSourceStrength");
        SetBeamSourceStrength_SourceIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBeamSourceStrength_NativeFunction, "SourceIndex");
        SetBeamSourcePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBeamSourcePoint");
        SetBeamSourcePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBeamSourcePoint_NativeFunction);
        SetBeamSourcePoint_EmitterIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBeamSourcePoint_NativeFunction, "EmitterIndex");
        SetBeamSourcePoint_NewSourcePoint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBeamSourcePoint_NativeFunction, "NewSourcePoint");
        SetBeamSourcePoint_SourceIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBeamSourcePoint_NativeFunction, "SourceIndex");
        SetBeamEndPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBeamEndPoint");
        SetBeamEndPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBeamEndPoint_NativeFunction);
        SetBeamEndPoint_EmitterIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBeamEndPoint_NativeFunction, "EmitterIndex");
        SetBeamEndPoint_NewEndPoint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBeamEndPoint_NativeFunction, "NewEndPoint");
        SetAutoAttachParams_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAutoAttachParams");
        SetAutoAttachParams_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAutoAttachParams_NativeFunction);
        SetAutoAttachParams_Parent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAutoAttachParams_NativeFunction, "Parent");
        SetAutoAttachParams_SocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAutoAttachParams_NativeFunction, "SocketName");
        SetAutoAttachParams_LocationType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAutoAttachParams_NativeFunction, "LocationType");
        GetNumActiveParticles_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumActiveParticles");
        GetNumActiveParticles_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumActiveParticles_NativeFunction);
        GetNumActiveParticles_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumActiveParticles_NativeFunction, "ReturnValue");
        GetNamedMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNamedMaterial");
        GetNamedMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNamedMaterial_NativeFunction);
        GetNamedMaterial_InName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNamedMaterial_NativeFunction, "InName");
        GetNamedMaterial_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNamedMaterial_NativeFunction, "ReturnValue");
        GetBeamTargetTangent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBeamTargetTangent");
        GetBeamTargetTangent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBeamTargetTangent_NativeFunction);
        GetBeamTargetTangent_EmitterIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamTargetTangent_NativeFunction, "EmitterIndex");
        GetBeamTargetTangent_TargetIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamTargetTangent_NativeFunction, "TargetIndex");
        GetBeamTargetTangent_OutTangentPoint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamTargetTangent_NativeFunction, "OutTangentPoint");
        GetBeamTargetTangent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamTargetTangent_NativeFunction, "ReturnValue");
        GetBeamTargetStrength_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBeamTargetStrength");
        GetBeamTargetStrength_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBeamTargetStrength_NativeFunction);
        GetBeamTargetStrength_EmitterIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamTargetStrength_NativeFunction, "EmitterIndex");
        GetBeamTargetStrength_TargetIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamTargetStrength_NativeFunction, "TargetIndex");
        GetBeamTargetStrength_OutTargetStrength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamTargetStrength_NativeFunction, "OutTargetStrength");
        GetBeamTargetStrength_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamTargetStrength_NativeFunction, "ReturnValue");
        GetBeamTargetPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBeamTargetPoint");
        GetBeamTargetPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBeamTargetPoint_NativeFunction);
        GetBeamTargetPoint_EmitterIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamTargetPoint_NativeFunction, "EmitterIndex");
        GetBeamTargetPoint_TargetIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamTargetPoint_NativeFunction, "TargetIndex");
        GetBeamTargetPoint_OutTargetPoint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamTargetPoint_NativeFunction, "OutTargetPoint");
        GetBeamTargetPoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamTargetPoint_NativeFunction, "ReturnValue");
        GetBeamSourceTangent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBeamSourceTangent");
        GetBeamSourceTangent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBeamSourceTangent_NativeFunction);
        GetBeamSourceTangent_EmitterIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamSourceTangent_NativeFunction, "EmitterIndex");
        GetBeamSourceTangent_SourceIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamSourceTangent_NativeFunction, "SourceIndex");
        GetBeamSourceTangent_OutTangentPoint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamSourceTangent_NativeFunction, "OutTangentPoint");
        GetBeamSourceTangent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamSourceTangent_NativeFunction, "ReturnValue");
        GetBeamSourceStrength_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBeamSourceStrength");
        GetBeamSourceStrength_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBeamSourceStrength_NativeFunction);
        GetBeamSourceStrength_EmitterIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamSourceStrength_NativeFunction, "EmitterIndex");
        GetBeamSourceStrength_SourceIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamSourceStrength_NativeFunction, "SourceIndex");
        GetBeamSourceStrength_OutSourceStrength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamSourceStrength_NativeFunction, "OutSourceStrength");
        GetBeamSourceStrength_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamSourceStrength_NativeFunction, "ReturnValue");
        GetBeamSourcePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBeamSourcePoint");
        GetBeamSourcePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBeamSourcePoint_NativeFunction);
        GetBeamSourcePoint_EmitterIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamSourcePoint_NativeFunction, "EmitterIndex");
        GetBeamSourcePoint_SourceIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamSourcePoint_NativeFunction, "SourceIndex");
        GetBeamSourcePoint_OutSourcePoint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamSourcePoint_NativeFunction, "OutSourcePoint");
        GetBeamSourcePoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamSourcePoint_NativeFunction, "ReturnValue");
        GetBeamEndPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBeamEndPoint");
        GetBeamEndPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBeamEndPoint_NativeFunction);
        GetBeamEndPoint_EmitterIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamEndPoint_NativeFunction, "EmitterIndex");
        GetBeamEndPoint_OutEndPoint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamEndPoint_NativeFunction, "OutEndPoint");
        GetBeamEndPoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBeamEndPoint_NativeFunction, "ReturnValue");
        GenerateParticleEvent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GenerateParticleEvent");
        GenerateParticleEvent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GenerateParticleEvent_NativeFunction);
        GenerateParticleEvent_InEventName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GenerateParticleEvent_NativeFunction, "InEventName");
        GenerateParticleEvent_InEmitterTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GenerateParticleEvent_NativeFunction, "InEmitterTime");
        GenerateParticleEvent_InLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GenerateParticleEvent_NativeFunction, "InLocation");
        GenerateParticleEvent_InDirection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GenerateParticleEvent_NativeFunction, "InDirection");
        GenerateParticleEvent_InVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GenerateParticleEvent_NativeFunction, "InVelocity");
        EndTrails_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EndTrails");
        CreateNamedDynamicMaterialInstance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateNamedDynamicMaterialInstance");
        CreateNamedDynamicMaterialInstance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateNamedDynamicMaterialInstance_NativeFunction);
        CreateNamedDynamicMaterialInstance_InName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateNamedDynamicMaterialInstance_NativeFunction, "InName");
        CreateNamedDynamicMaterialInstance_SourceMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateNamedDynamicMaterialInstance_NativeFunction, "SourceMaterial");
        CreateNamedDynamicMaterialInstance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateNamedDynamicMaterialInstance_NativeFunction, "ReturnValue");
        BeginTrails_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BeginTrails");
        BeginTrails_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BeginTrails_NativeFunction);
        BeginTrails_InFirstSocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BeginTrails_NativeFunction, "InFirstSocketName");
        BeginTrails_InSecondSocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BeginTrails_NativeFunction, "InSecondSocketName");
        BeginTrails_InWidthMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BeginTrails_NativeFunction, "InWidthMode");
        BeginTrails_InWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BeginTrails_NativeFunction, "InWidth");
        
        
    }
    
    protected ParticleSystemComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Engine.ParticleSystemComponent:Template
    static readonly int Template_Offset;
    
    public UnrealSharp.Engine.ParticleSystem Template
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.ParticleSystem>.FromNative(IntPtr.Add(NativeObject, Template_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.ParticleSystemComponent:bResetOnDetach
    static readonly int bResetOnDetach_Offset;
    static readonly IntPtr bResetOnDetach_NativeProperty;
    
    public bool bResetOnDetach
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bResetOnDetach_NativeProperty, bResetOnDetach_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bResetOnDetach_NativeProperty, bResetOnDetach_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.ParticleSystemComponent:bAllowRecycling
    static readonly int bAllowRecycling_Offset;
    static readonly IntPtr bAllowRecycling_NativeProperty;
    
    public bool bAllowRecycling
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAllowRecycling_NativeProperty, bAllowRecycling_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bAllowRecycling_NativeProperty, bAllowRecycling_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.ParticleSystemComponent:bAutoManageAttachment
    static readonly int bAutoManageAttachment_Offset;
    static readonly IntPtr bAutoManageAttachment_NativeProperty;
    
    public bool bAutoManageAttachment
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAutoManageAttachment_NativeProperty, bAutoManageAttachment_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.ParticleSystemComponent:bAutoAttachWeldSimulatedBodies
    static readonly int bAutoAttachWeldSimulatedBodies_Offset;
    static readonly IntPtr bAutoAttachWeldSimulatedBodies_NativeProperty;
    
    public bool bAutoAttachWeldSimulatedBodies
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAutoAttachWeldSimulatedBodies_NativeProperty, bAutoAttachWeldSimulatedBodies_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bAutoAttachWeldSimulatedBodies_NativeProperty, bAutoAttachWeldSimulatedBodies_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.ParticleSystemComponent:bOverrideLODMethod
    static readonly int bOverrideLODMethod_Offset;
    static readonly IntPtr bOverrideLODMethod_NativeProperty;
    
    public bool bOverrideLODMethod
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bOverrideLODMethod_NativeProperty, bOverrideLODMethod_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bOverrideLODMethod_NativeProperty, bOverrideLODMethod_Offset, value);
        }
    }
    
    // ByteProperty /Script/Engine.ParticleSystemComponent:LODMethod
    static readonly int LODMethod_Offset;
    
    public UnrealSharp.Engine.ParticleSystemLODMethod LODMethod
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ParticleSystemLODMethod>.FromNative(IntPtr.Add(NativeObject, LODMethod_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.ParticleSystemLODMethod>.ToNative(IntPtr.Add(NativeObject, LODMethod_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/Engine.ParticleSystemComponent:InstanceParameters
    static readonly int InstanceParameters_Offset;
    static readonly IntPtr InstanceParameters_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.ParticleSysParam> InstanceParameters_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.ParticleSysParam> InstanceParameters
    {
        get
        {
            if(InstanceParameters_Wrapper == null)
            {
                InstanceParameters_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.ParticleSysParam>(1, InstanceParameters_NativeProperty, UnrealSharp.Engine.ParticleSysParamMarshaler.ToNative, UnrealSharp.Engine.ParticleSysParamMarshaler.FromNative);
            }
            
            return InstanceParameters_Wrapper.FromNative(IntPtr.Add(NativeObject,InstanceParameters_Offset),0,this);
        }
    }
    
    // FloatProperty /Script/Engine.ParticleSystemComponent:SecondsBeforeInactive
    static readonly int SecondsBeforeInactive_Offset;
    
    public float SecondsBeforeInactive
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SecondsBeforeInactive_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, SecondsBeforeInactive_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.ParticleSystemComponent:CustomTimeDilation
    static readonly int CustomTimeDilation_Offset;
    
    public float CustomTimeDilation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CustomTimeDilation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, CustomTimeDilation_Offset), 0, this, value);
        }
    }
    
    // WeakObjectProperty /Script/Engine.ParticleSystemComponent:AutoAttachParent
    static readonly int AutoAttachParent_Offset;
    
    public WeakObject<UnrealSharp.Engine.SceneComponent> AutoAttachParent
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<WeakObject<UnrealSharp.Engine.SceneComponent>>.FromNative(IntPtr.Add(NativeObject, AutoAttachParent_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<WeakObject<UnrealSharp.Engine.SceneComponent>>.ToNative(IntPtr.Add(NativeObject, AutoAttachParent_Offset), 0, this, value);
        }
    }
    
    // NameProperty /Script/Engine.ParticleSystemComponent:AutoAttachSocketName
    static readonly int AutoAttachSocketName_Offset;
    
    public Name AutoAttachSocketName
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, AutoAttachSocketName_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, AutoAttachSocketName_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/Engine.ParticleSystemComponent:AutoAttachLocationRule
    static readonly int AutoAttachLocationRule_Offset;
    
    public UnrealSharp.Engine.EAttachmentRule AutoAttachLocationRule
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.FromNative(IntPtr.Add(NativeObject, AutoAttachLocationRule_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.ToNative(IntPtr.Add(NativeObject, AutoAttachLocationRule_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/Engine.ParticleSystemComponent:AutoAttachRotationRule
    static readonly int AutoAttachRotationRule_Offset;
    
    public UnrealSharp.Engine.EAttachmentRule AutoAttachRotationRule
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.FromNative(IntPtr.Add(NativeObject, AutoAttachRotationRule_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.ToNative(IntPtr.Add(NativeObject, AutoAttachRotationRule_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/Engine.ParticleSystemComponent:AutoAttachScaleRule
    static readonly int AutoAttachScaleRule_Offset;
    
    public UnrealSharp.Engine.EAttachmentRule AutoAttachScaleRule
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.FromNative(IntPtr.Add(NativeObject, AutoAttachScaleRule_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.ToNative(IntPtr.Add(NativeObject, AutoAttachScaleRule_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:SetTrailSourceData
    static readonly IntPtr SetTrailSourceData_NativeFunction;
    static readonly int SetTrailSourceData_ParamsSize;
    static readonly int SetTrailSourceData_InFirstSocketName_Offset;
    static readonly int SetTrailSourceData_InSecondSocketName_Offset;
    static readonly int SetTrailSourceData_InWidthMode_Offset;
    static readonly int SetTrailSourceData_InWidth_Offset;
    
    public void SetTrailSourceData(Name inFirstSocketName, Name inSecondSocketName, UnrealSharp.Engine.ETrailWidthMode inWidthMode, float inWidth)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTrailSourceData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetTrailSourceData_InFirstSocketName_Offset), 0, null, inFirstSocketName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetTrailSourceData_InSecondSocketName_Offset), 0, null, inSecondSocketName);
            BlittableMarshaller<UnrealSharp.Engine.ETrailWidthMode>.ToNative(IntPtr.Add(ParamsBuffer, SetTrailSourceData_InWidthMode_Offset), 0, null, inWidthMode);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetTrailSourceData_InWidth_Offset), 0, null, inWidth);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTrailSourceData_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:SetTemplate
    static readonly IntPtr SetTemplate_NativeFunction;
    static readonly int SetTemplate_ParamsSize;
    static readonly int SetTemplate_NewTemplate_Offset;
    
    public void SetTemplate(UnrealSharp.Engine.ParticleSystem newTemplate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTemplate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.ParticleSystem>.ToNative(IntPtr.Add(ParamsBuffer, SetTemplate_NewTemplate_Offset), 0, null, newTemplate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTemplate_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:SetMaterialParameter
    static readonly IntPtr SetMaterialParameter_NativeFunction;
    static readonly int SetMaterialParameter_ParamsSize;
    static readonly int SetMaterialParameter_ParameterName_Offset;
    static readonly int SetMaterialParameter_Param_Offset;
    
    public void SetMaterialParameter(Name parameterName, UnrealSharp.Engine.MaterialInterface param)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMaterialParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialParameter_ParameterName_Offset), 0, null, parameterName);
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialParameter_Param_Offset), 0, null, param);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMaterialParameter_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:SetBeamTargetTangent
    static readonly IntPtr SetBeamTargetTangent_NativeFunction;
    static readonly int SetBeamTargetTangent_ParamsSize;
    static readonly int SetBeamTargetTangent_EmitterIndex_Offset;
    static readonly int SetBeamTargetTangent_NewTangentPoint_Offset;
    static readonly int SetBeamTargetTangent_TargetIndex_Offset;
    
    public void SetBeamTargetTangent(int emitterIndex, System.DoubleNumerics.Vector3 newTangentPoint, int targetIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBeamTargetTangent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetBeamTargetTangent_EmitterIndex_Offset), 0, null, emitterIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetBeamTargetTangent_NewTangentPoint_Offset), 0, null, newTangentPoint);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetBeamTargetTangent_TargetIndex_Offset), 0, null, targetIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBeamTargetTangent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:SetBeamTargetStrength
    static readonly IntPtr SetBeamTargetStrength_NativeFunction;
    static readonly int SetBeamTargetStrength_ParamsSize;
    static readonly int SetBeamTargetStrength_EmitterIndex_Offset;
    static readonly int SetBeamTargetStrength_NewTargetStrength_Offset;
    static readonly int SetBeamTargetStrength_TargetIndex_Offset;
    
    public void SetBeamTargetStrength(int emitterIndex, float newTargetStrength, int targetIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBeamTargetStrength_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetBeamTargetStrength_EmitterIndex_Offset), 0, null, emitterIndex);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetBeamTargetStrength_NewTargetStrength_Offset), 0, null, newTargetStrength);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetBeamTargetStrength_TargetIndex_Offset), 0, null, targetIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBeamTargetStrength_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:SetBeamTargetPoint
    static readonly IntPtr SetBeamTargetPoint_NativeFunction;
    static readonly int SetBeamTargetPoint_ParamsSize;
    static readonly int SetBeamTargetPoint_EmitterIndex_Offset;
    static readonly int SetBeamTargetPoint_NewTargetPoint_Offset;
    static readonly int SetBeamTargetPoint_TargetIndex_Offset;
    
    public void SetBeamTargetPoint(int emitterIndex, System.DoubleNumerics.Vector3 newTargetPoint, int targetIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBeamTargetPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetBeamTargetPoint_EmitterIndex_Offset), 0, null, emitterIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetBeamTargetPoint_NewTargetPoint_Offset), 0, null, newTargetPoint);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetBeamTargetPoint_TargetIndex_Offset), 0, null, targetIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBeamTargetPoint_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:SetBeamSourceTangent
    static readonly IntPtr SetBeamSourceTangent_NativeFunction;
    static readonly int SetBeamSourceTangent_ParamsSize;
    static readonly int SetBeamSourceTangent_EmitterIndex_Offset;
    static readonly int SetBeamSourceTangent_NewTangentPoint_Offset;
    static readonly int SetBeamSourceTangent_SourceIndex_Offset;
    
    public void SetBeamSourceTangent(int emitterIndex, System.DoubleNumerics.Vector3 newTangentPoint, int sourceIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBeamSourceTangent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetBeamSourceTangent_EmitterIndex_Offset), 0, null, emitterIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetBeamSourceTangent_NewTangentPoint_Offset), 0, null, newTangentPoint);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetBeamSourceTangent_SourceIndex_Offset), 0, null, sourceIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBeamSourceTangent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:SetBeamSourceStrength
    static readonly IntPtr SetBeamSourceStrength_NativeFunction;
    static readonly int SetBeamSourceStrength_ParamsSize;
    static readonly int SetBeamSourceStrength_EmitterIndex_Offset;
    static readonly int SetBeamSourceStrength_NewSourceStrength_Offset;
    static readonly int SetBeamSourceStrength_SourceIndex_Offset;
    
    public void SetBeamSourceStrength(int emitterIndex, float newSourceStrength, int sourceIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBeamSourceStrength_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetBeamSourceStrength_EmitterIndex_Offset), 0, null, emitterIndex);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetBeamSourceStrength_NewSourceStrength_Offset), 0, null, newSourceStrength);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetBeamSourceStrength_SourceIndex_Offset), 0, null, sourceIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBeamSourceStrength_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:SetBeamSourcePoint
    static readonly IntPtr SetBeamSourcePoint_NativeFunction;
    static readonly int SetBeamSourcePoint_ParamsSize;
    static readonly int SetBeamSourcePoint_EmitterIndex_Offset;
    static readonly int SetBeamSourcePoint_NewSourcePoint_Offset;
    static readonly int SetBeamSourcePoint_SourceIndex_Offset;
    
    public void SetBeamSourcePoint(int emitterIndex, System.DoubleNumerics.Vector3 newSourcePoint, int sourceIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBeamSourcePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetBeamSourcePoint_EmitterIndex_Offset), 0, null, emitterIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetBeamSourcePoint_NewSourcePoint_Offset), 0, null, newSourcePoint);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetBeamSourcePoint_SourceIndex_Offset), 0, null, sourceIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBeamSourcePoint_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:SetBeamEndPoint
    static readonly IntPtr SetBeamEndPoint_NativeFunction;
    static readonly int SetBeamEndPoint_ParamsSize;
    static readonly int SetBeamEndPoint_EmitterIndex_Offset;
    static readonly int SetBeamEndPoint_NewEndPoint_Offset;
    
    public void SetBeamEndPoint(int emitterIndex, System.DoubleNumerics.Vector3 newEndPoint)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBeamEndPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetBeamEndPoint_EmitterIndex_Offset), 0, null, emitterIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetBeamEndPoint_NewEndPoint_Offset), 0, null, newEndPoint);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBeamEndPoint_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:SetAutoAttachParams
    static readonly IntPtr SetAutoAttachParams_NativeFunction;
    static readonly int SetAutoAttachParams_ParamsSize;
    static readonly int SetAutoAttachParams_Parent_Offset;
    static readonly int SetAutoAttachParams_SocketName_Offset;
    static readonly int SetAutoAttachParams_LocationType_Offset;
    
    [Obsolete("Please use Set Auto Attachment Parameters")]
    public void SetAutoAttachParams(UnrealSharp.Engine.SceneComponent parent, Name socketName = default(Name), UnrealSharp.Engine.EAttachLocation locationType = UnrealSharp.Engine.EAttachLocation.KeepRelativeOffset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAutoAttachParams_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.ToNative(IntPtr.Add(ParamsBuffer, SetAutoAttachParams_Parent_Offset), 0, null, parent);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetAutoAttachParams_SocketName_Offset), 0, null, socketName);
            BlittableMarshaller<UnrealSharp.Engine.EAttachLocation>.ToNative(IntPtr.Add(ParamsBuffer, SetAutoAttachParams_LocationType_Offset), 0, null, locationType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAutoAttachParams_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:GetNumActiveParticles
    static readonly IntPtr GetNumActiveParticles_NativeFunction;
    static readonly int GetNumActiveParticles_ParamsSize;
    static readonly int GetNumActiveParticles_ReturnValue_Offset;
    
    public int GetNumActiveParticles()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumActiveParticles_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumActiveParticles_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumActiveParticles_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:GetNamedMaterial
    static readonly IntPtr GetNamedMaterial_NativeFunction;
    static readonly int GetNamedMaterial_ParamsSize;
    static readonly int GetNamedMaterial_InName_Offset;
    static readonly int GetNamedMaterial_ReturnValue_Offset;
    
    public UnrealSharp.Engine.MaterialInterface GetNamedMaterial(Name inName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNamedMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetNamedMaterial_InName_Offset), 0, null, inName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNamedMaterial_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialInterface returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.FromNative(IntPtr.Add(ParamsBuffer, GetNamedMaterial_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:GetBeamTargetTangent
    static readonly IntPtr GetBeamTargetTangent_NativeFunction;
    static readonly int GetBeamTargetTangent_ParamsSize;
    static readonly int GetBeamTargetTangent_EmitterIndex_Offset;
    static readonly int GetBeamTargetTangent_TargetIndex_Offset;
    static readonly int GetBeamTargetTangent_OutTangentPoint_Offset;
    static readonly int GetBeamTargetTangent_ReturnValue_Offset;
    
    public bool GetBeamTargetTangent(int emitterIndex, int targetIndex, out System.DoubleNumerics.Vector3 outTangentPoint)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBeamTargetTangent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetBeamTargetTangent_EmitterIndex_Offset), 0, null, emitterIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetBeamTargetTangent_TargetIndex_Offset), 0, null, targetIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBeamTargetTangent_NativeFunction, ParamsBuffer);
            
            outTangentPoint = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetBeamTargetTangent_OutTangentPoint_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetBeamTargetTangent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:GetBeamTargetStrength
    static readonly IntPtr GetBeamTargetStrength_NativeFunction;
    static readonly int GetBeamTargetStrength_ParamsSize;
    static readonly int GetBeamTargetStrength_EmitterIndex_Offset;
    static readonly int GetBeamTargetStrength_TargetIndex_Offset;
    static readonly int GetBeamTargetStrength_OutTargetStrength_Offset;
    static readonly int GetBeamTargetStrength_ReturnValue_Offset;
    
    public bool GetBeamTargetStrength(int emitterIndex, int targetIndex, out float outTargetStrength)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBeamTargetStrength_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetBeamTargetStrength_EmitterIndex_Offset), 0, null, emitterIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetBeamTargetStrength_TargetIndex_Offset), 0, null, targetIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBeamTargetStrength_NativeFunction, ParamsBuffer);
            
            outTargetStrength = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetBeamTargetStrength_OutTargetStrength_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetBeamTargetStrength_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:GetBeamTargetPoint
    static readonly IntPtr GetBeamTargetPoint_NativeFunction;
    static readonly int GetBeamTargetPoint_ParamsSize;
    static readonly int GetBeamTargetPoint_EmitterIndex_Offset;
    static readonly int GetBeamTargetPoint_TargetIndex_Offset;
    static readonly int GetBeamTargetPoint_OutTargetPoint_Offset;
    static readonly int GetBeamTargetPoint_ReturnValue_Offset;
    
    public bool GetBeamTargetPoint(int emitterIndex, int targetIndex, out System.DoubleNumerics.Vector3 outTargetPoint)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBeamTargetPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetBeamTargetPoint_EmitterIndex_Offset), 0, null, emitterIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetBeamTargetPoint_TargetIndex_Offset), 0, null, targetIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBeamTargetPoint_NativeFunction, ParamsBuffer);
            
            outTargetPoint = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetBeamTargetPoint_OutTargetPoint_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetBeamTargetPoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:GetBeamSourceTangent
    static readonly IntPtr GetBeamSourceTangent_NativeFunction;
    static readonly int GetBeamSourceTangent_ParamsSize;
    static readonly int GetBeamSourceTangent_EmitterIndex_Offset;
    static readonly int GetBeamSourceTangent_SourceIndex_Offset;
    static readonly int GetBeamSourceTangent_OutTangentPoint_Offset;
    static readonly int GetBeamSourceTangent_ReturnValue_Offset;
    
    public bool GetBeamSourceTangent(int emitterIndex, int sourceIndex, out System.DoubleNumerics.Vector3 outTangentPoint)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBeamSourceTangent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetBeamSourceTangent_EmitterIndex_Offset), 0, null, emitterIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetBeamSourceTangent_SourceIndex_Offset), 0, null, sourceIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBeamSourceTangent_NativeFunction, ParamsBuffer);
            
            outTangentPoint = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetBeamSourceTangent_OutTangentPoint_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetBeamSourceTangent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:GetBeamSourceStrength
    static readonly IntPtr GetBeamSourceStrength_NativeFunction;
    static readonly int GetBeamSourceStrength_ParamsSize;
    static readonly int GetBeamSourceStrength_EmitterIndex_Offset;
    static readonly int GetBeamSourceStrength_SourceIndex_Offset;
    static readonly int GetBeamSourceStrength_OutSourceStrength_Offset;
    static readonly int GetBeamSourceStrength_ReturnValue_Offset;
    
    public bool GetBeamSourceStrength(int emitterIndex, int sourceIndex, out float outSourceStrength)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBeamSourceStrength_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetBeamSourceStrength_EmitterIndex_Offset), 0, null, emitterIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetBeamSourceStrength_SourceIndex_Offset), 0, null, sourceIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBeamSourceStrength_NativeFunction, ParamsBuffer);
            
            outSourceStrength = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetBeamSourceStrength_OutSourceStrength_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetBeamSourceStrength_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:GetBeamSourcePoint
    static readonly IntPtr GetBeamSourcePoint_NativeFunction;
    static readonly int GetBeamSourcePoint_ParamsSize;
    static readonly int GetBeamSourcePoint_EmitterIndex_Offset;
    static readonly int GetBeamSourcePoint_SourceIndex_Offset;
    static readonly int GetBeamSourcePoint_OutSourcePoint_Offset;
    static readonly int GetBeamSourcePoint_ReturnValue_Offset;
    
    public bool GetBeamSourcePoint(int emitterIndex, int sourceIndex, out System.DoubleNumerics.Vector3 outSourcePoint)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBeamSourcePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetBeamSourcePoint_EmitterIndex_Offset), 0, null, emitterIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetBeamSourcePoint_SourceIndex_Offset), 0, null, sourceIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBeamSourcePoint_NativeFunction, ParamsBuffer);
            
            outSourcePoint = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetBeamSourcePoint_OutSourcePoint_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetBeamSourcePoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:GetBeamEndPoint
    static readonly IntPtr GetBeamEndPoint_NativeFunction;
    static readonly int GetBeamEndPoint_ParamsSize;
    static readonly int GetBeamEndPoint_EmitterIndex_Offset;
    static readonly int GetBeamEndPoint_OutEndPoint_Offset;
    static readonly int GetBeamEndPoint_ReturnValue_Offset;
    
    public bool GetBeamEndPoint(int emitterIndex, out System.DoubleNumerics.Vector3 outEndPoint)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBeamEndPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetBeamEndPoint_EmitterIndex_Offset), 0, null, emitterIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBeamEndPoint_NativeFunction, ParamsBuffer);
            
            outEndPoint = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetBeamEndPoint_OutEndPoint_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetBeamEndPoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:GenerateParticleEvent
    static readonly IntPtr GenerateParticleEvent_NativeFunction;
    static readonly int GenerateParticleEvent_ParamsSize;
    static readonly int GenerateParticleEvent_InEventName_Offset;
    static readonly int GenerateParticleEvent_InEmitterTime_Offset;
    static readonly int GenerateParticleEvent_InLocation_Offset;
    static readonly int GenerateParticleEvent_InDirection_Offset;
    static readonly int GenerateParticleEvent_InVelocity_Offset;
    
    public void GenerateParticleEvent(Name inEventName, float inEmitterTime, System.DoubleNumerics.Vector3 inLocation, System.DoubleNumerics.Vector3 inDirection, System.DoubleNumerics.Vector3 inVelocity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GenerateParticleEvent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GenerateParticleEvent_InEventName_Offset), 0, null, inEventName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GenerateParticleEvent_InEmitterTime_Offset), 0, null, inEmitterTime);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GenerateParticleEvent_InLocation_Offset), 0, null, inLocation);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GenerateParticleEvent_InDirection_Offset), 0, null, inDirection);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GenerateParticleEvent_InVelocity_Offset), 0, null, inVelocity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GenerateParticleEvent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:EndTrails
    static readonly IntPtr EndTrails_NativeFunction;
    
    public void EndTrails()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, EndTrails_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:CreateNamedDynamicMaterialInstance
    static readonly IntPtr CreateNamedDynamicMaterialInstance_NativeFunction;
    static readonly int CreateNamedDynamicMaterialInstance_ParamsSize;
    static readonly int CreateNamedDynamicMaterialInstance_InName_Offset;
    static readonly int CreateNamedDynamicMaterialInstance_SourceMaterial_Offset;
    static readonly int CreateNamedDynamicMaterialInstance_ReturnValue_Offset;
    
    public UnrealSharp.Engine.MaterialInstanceDynamic CreateNamedDynamicMaterialInstance(Name inName, UnrealSharp.Engine.MaterialInterface sourceMaterial = default(UnrealSharp.Engine.MaterialInterface))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateNamedDynamicMaterialInstance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, CreateNamedDynamicMaterialInstance_InName_Offset), 0, null, inName);
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, CreateNamedDynamicMaterialInstance_SourceMaterial_Offset), 0, null, sourceMaterial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreateNamedDynamicMaterialInstance_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialInstanceDynamic returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceDynamic>.FromNative(IntPtr.Add(ParamsBuffer, CreateNamedDynamicMaterialInstance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ParticleSystemComponent:BeginTrails
    static readonly IntPtr BeginTrails_NativeFunction;
    static readonly int BeginTrails_ParamsSize;
    static readonly int BeginTrails_InFirstSocketName_Offset;
    static readonly int BeginTrails_InSecondSocketName_Offset;
    static readonly int BeginTrails_InWidthMode_Offset;
    static readonly int BeginTrails_InWidth_Offset;
    
    public void BeginTrails(Name inFirstSocketName, Name inSecondSocketName, UnrealSharp.Engine.ETrailWidthMode inWidthMode, float inWidth)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BeginTrails_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, BeginTrails_InFirstSocketName_Offset), 0, null, inFirstSocketName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, BeginTrails_InSecondSocketName_Offset), 0, null, inSecondSocketName);
            BlittableMarshaller<UnrealSharp.Engine.ETrailWidthMode>.ToNative(IntPtr.Add(ParamsBuffer, BeginTrails_InWidthMode_Offset), 0, null, inWidthMode);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, BeginTrails_InWidth_Offset), 0, null, inWidth);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BeginTrails_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
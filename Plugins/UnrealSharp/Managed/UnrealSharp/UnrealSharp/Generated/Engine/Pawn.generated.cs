// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class Pawn : UnrealSharp.Engine.Actor
{
    
    static readonly IntPtr NativeClassPtr;
    static Pawn()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("Pawn");
        
        bUseControllerRotationPitch_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseControllerRotationPitch");
        bUseControllerRotationPitch_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseControllerRotationPitch");
        bUseControllerRotationYaw_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseControllerRotationYaw");
        bUseControllerRotationYaw_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseControllerRotationYaw");
        bUseControllerRotationRoll_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseControllerRotationRoll");
        bUseControllerRotationRoll_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseControllerRotationRoll");
        bCanAffectNavigationGeneration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCanAffectNavigationGeneration");
        bCanAffectNavigationGeneration_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCanAffectNavigationGeneration");
        BaseEyeHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BaseEyeHeight");
        AIControllerClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AIControllerClass");
        PlayerState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PlayerState");
        LastHitBy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LastHitBy");
        
        SpawnDefaultController_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SpawnDefaultController");
        SetCanAffectNavigationGeneration_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCanAffectNavigationGeneration");
        SetCanAffectNavigationGeneration_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCanAffectNavigationGeneration_NativeFunction);
        SetCanAffectNavigationGeneration_bNewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCanAffectNavigationGeneration_NativeFunction, "bNewValue");
        SetCanAffectNavigationGeneration_bForceUpdate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCanAffectNavigationGeneration_NativeFunction, "bForceUpdate");
        PawnMakeNoise_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PawnMakeNoise");
        PawnMakeNoise_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PawnMakeNoise_NativeFunction);
        PawnMakeNoise_Loudness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PawnMakeNoise_NativeFunction, "Loudness");
        PawnMakeNoise_NoiseLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PawnMakeNoise_NativeFunction, "NoiseLocation");
        PawnMakeNoise_bUseNoiseMakerLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PawnMakeNoise_NativeFunction, "bUseNoiseMakerLocation");
        PawnMakeNoise_NoiseMaker_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PawnMakeNoise_NativeFunction, "NoiseMaker");
        IsPlayerControlled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPlayerControlled");
        IsPlayerControlled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPlayerControlled_NativeFunction);
        IsPlayerControlled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPlayerControlled_NativeFunction, "ReturnValue");
        IsPawnControlled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPawnControlled");
        IsPawnControlled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPawnControlled_NativeFunction);
        IsPawnControlled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPawnControlled_NativeFunction, "ReturnValue");
        IsMoveInputIgnored_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsMoveInputIgnored");
        IsMoveInputIgnored_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsMoveInputIgnored_NativeFunction);
        IsMoveInputIgnored_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsMoveInputIgnored_NativeFunction, "ReturnValue");
        IsLocallyViewed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsLocallyViewed");
        IsLocallyViewed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsLocallyViewed_NativeFunction);
        IsLocallyViewed_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLocallyViewed_NativeFunction, "ReturnValue");
        IsLocallyControlled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsLocallyControlled");
        IsLocallyControlled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsLocallyControlled_NativeFunction);
        IsLocallyControlled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLocallyControlled_NativeFunction, "ReturnValue");
        IsControlled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsControlled");
        IsControlled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsControlled_NativeFunction);
        IsControlled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsControlled_NativeFunction, "ReturnValue");
        IsBotControlled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsBotControlled");
        IsBotControlled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsBotControlled_NativeFunction);
        IsBotControlled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsBotControlled_NativeFunction, "ReturnValue");
        GetPlatformUserId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlatformUserId");
        GetPlatformUserId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlatformUserId_NativeFunction);
        GetPlatformUserId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlatformUserId_NativeFunction, "ReturnValue");
        GetPendingMovementInputVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPendingMovementInputVector");
        GetPendingMovementInputVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPendingMovementInputVector_NativeFunction);
        GetPendingMovementInputVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPendingMovementInputVector_NativeFunction, "ReturnValue");
        GetOverrideInputComponentClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOverrideInputComponentClass");
        GetOverrideInputComponentClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOverrideInputComponentClass_NativeFunction);
        GetOverrideInputComponentClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOverrideInputComponentClass_NativeFunction, "ReturnValue");
        GetNavAgentLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNavAgentLocation");
        GetNavAgentLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNavAgentLocation_NativeFunction);
        GetNavAgentLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNavAgentLocation_NativeFunction, "ReturnValue");
        GetMovementComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMovementComponent");
        GetMovementComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMovementComponent_NativeFunction);
        GetMovementComponent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMovementComponent_NativeFunction, "ReturnValue");
        GetMovementBaseActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMovementBaseActor");
        GetMovementBaseActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMovementBaseActor_NativeFunction);
        GetMovementBaseActor_Pawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMovementBaseActor_NativeFunction, "Pawn");
        GetMovementBaseActor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMovementBaseActor_NativeFunction, "ReturnValue");
        GetLocalViewingPlayerController_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalViewingPlayerController");
        GetLocalViewingPlayerController_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalViewingPlayerController_NativeFunction);
        GetLocalViewingPlayerController_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalViewingPlayerController_NativeFunction, "ReturnValue");
        GetLastMovementInputVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLastMovementInputVector");
        GetLastMovementInputVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLastMovementInputVector_NativeFunction);
        GetLastMovementInputVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLastMovementInputVector_NativeFunction, "ReturnValue");
        GetControlRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetControlRotation");
        GetControlRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetControlRotation_NativeFunction);
        GetControlRotation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetControlRotation_NativeFunction, "ReturnValue");
        GetController_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetController");
        GetController_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetController_NativeFunction);
        GetController_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetController_NativeFunction, "ReturnValue");
        GetBaseAimRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBaseAimRotation");
        GetBaseAimRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBaseAimRotation_NativeFunction);
        GetBaseAimRotation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBaseAimRotation_NativeFunction, "ReturnValue");
        DetachFromControllerPendingDestroy_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DetachFromControllerPendingDestroy");
        ConsumeMovementInputVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConsumeMovementInputVector");
        ConsumeMovementInputVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConsumeMovementInputVector_NativeFunction);
        ConsumeMovementInputVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConsumeMovementInputVector_NativeFunction, "ReturnValue");
        AddMovementInput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddMovementInput");
        AddMovementInput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddMovementInput_NativeFunction);
        AddMovementInput_WorldDirection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMovementInput_NativeFunction, "WorldDirection");
        AddMovementInput_ScaleValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMovementInput_NativeFunction, "ScaleValue");
        AddMovementInput_bForce_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddMovementInput_NativeFunction, "bForce");
        AddControllerYawInput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddControllerYawInput");
        AddControllerYawInput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddControllerYawInput_NativeFunction);
        AddControllerYawInput_Val_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddControllerYawInput_NativeFunction, "Val");
        AddControllerRollInput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddControllerRollInput");
        AddControllerRollInput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddControllerRollInput_NativeFunction);
        AddControllerRollInput_Val_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddControllerRollInput_NativeFunction, "Val");
        AddControllerPitchInput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddControllerPitchInput");
        AddControllerPitchInput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddControllerPitchInput_NativeFunction);
        AddControllerPitchInput_Val_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddControllerPitchInput_NativeFunction, "Val");
        
        IntPtr ReceiveUnpossessed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveUnpossessed");
        ReceiveUnpossessed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveUnpossessed_NativeFunction);
        ReceiveUnpossessed_OldController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveUnpossessed_NativeFunction, "OldController");
        
        IntPtr ReceivePossessed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceivePossessed");
        ReceivePossessed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceivePossessed_NativeFunction);
        ReceivePossessed_NewController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceivePossessed_NativeFunction, "NewController");
        
        IntPtr ReceiveControllerChanged_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveControllerChanged");
        ReceiveControllerChanged_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveControllerChanged_NativeFunction);
        ReceiveControllerChanged_OldController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveControllerChanged_NativeFunction, "OldController");
        ReceiveControllerChanged_NewController_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveControllerChanged_NativeFunction, "NewController");
        
        
    }
    
    protected Pawn(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/Engine.Pawn:bUseControllerRotationPitch
    static readonly int bUseControllerRotationPitch_Offset;
    static readonly IntPtr bUseControllerRotationPitch_NativeProperty;
    
    public bool bUseControllerRotationPitch
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseControllerRotationPitch_NativeProperty, bUseControllerRotationPitch_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bUseControllerRotationPitch_NativeProperty, bUseControllerRotationPitch_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.Pawn:bUseControllerRotationYaw
    static readonly int bUseControllerRotationYaw_Offset;
    static readonly IntPtr bUseControllerRotationYaw_NativeProperty;
    
    public bool bUseControllerRotationYaw
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseControllerRotationYaw_NativeProperty, bUseControllerRotationYaw_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bUseControllerRotationYaw_NativeProperty, bUseControllerRotationYaw_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.Pawn:bUseControllerRotationRoll
    static readonly int bUseControllerRotationRoll_Offset;
    static readonly IntPtr bUseControllerRotationRoll_NativeProperty;
    
    public bool bUseControllerRotationRoll
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseControllerRotationRoll_NativeProperty, bUseControllerRotationRoll_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bUseControllerRotationRoll_NativeProperty, bUseControllerRotationRoll_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.Pawn:bCanAffectNavigationGeneration
    static readonly int bCanAffectNavigationGeneration_Offset;
    static readonly IntPtr bCanAffectNavigationGeneration_NativeProperty;
    
    public bool bCanAffectNavigationGeneration
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCanAffectNavigationGeneration_NativeProperty, bCanAffectNavigationGeneration_Offset);
        }
    }
    
    // FloatProperty /Script/Engine.Pawn:BaseEyeHeight
    static readonly int BaseEyeHeight_Offset;
    
    public float BaseEyeHeight
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, BaseEyeHeight_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, BaseEyeHeight_Offset), 0, this, value);
        }
    }
    
    // ClassProperty /Script/Engine.Pawn:AIControllerClass
    static readonly int AIControllerClass_Offset;
    
    public SubclassOf<UnrealSharp.Engine.Controller> AIControllerClass
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.Engine.Controller>.FromNative(IntPtr.Add(NativeObject, AIControllerClass_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            SubclassOfMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(NativeObject, AIControllerClass_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/Engine.Pawn:PlayerState
    static readonly int PlayerState_Offset;
    
    public UnrealSharp.Engine.PlayerState PlayerState
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.PlayerState>.FromNative(IntPtr.Add(NativeObject, PlayerState_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/Engine.Pawn:LastHitBy
    static readonly int LastHitBy_Offset;
    
    public UnrealSharp.Engine.Controller LastHitBy
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.Controller>.FromNative(IntPtr.Add(NativeObject, LastHitBy_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.Pawn:SpawnDefaultController
    static readonly IntPtr SpawnDefaultController_NativeFunction;
    
    public void SpawnDefaultController()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SpawnDefaultController_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.Pawn:SetCanAffectNavigationGeneration
    static readonly IntPtr SetCanAffectNavigationGeneration_NativeFunction;
    static readonly int SetCanAffectNavigationGeneration_ParamsSize;
    static readonly int SetCanAffectNavigationGeneration_bNewValue_Offset;
    static readonly int SetCanAffectNavigationGeneration_bForceUpdate_Offset;
    
    public void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCanAffectNavigationGeneration_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCanAffectNavigationGeneration_bNewValue_Offset), 0, null, bNewValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCanAffectNavigationGeneration_bForceUpdate_Offset), 0, null, bForceUpdate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCanAffectNavigationGeneration_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Pawn:PawnMakeNoise
    static readonly IntPtr PawnMakeNoise_NativeFunction;
    static readonly int PawnMakeNoise_ParamsSize;
    static readonly int PawnMakeNoise_Loudness_Offset;
    static readonly int PawnMakeNoise_NoiseLocation_Offset;
    static readonly int PawnMakeNoise_bUseNoiseMakerLocation_Offset;
    static readonly int PawnMakeNoise_NoiseMaker_Offset;
    
    public void PawnMakeNoise(float loudness, System.DoubleNumerics.Vector3 noiseLocation, bool bUseNoiseMakerLocation = true, UnrealSharp.Engine.Actor noiseMaker = default(UnrealSharp.Engine.Actor))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PawnMakeNoise_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PawnMakeNoise_Loudness_Offset), 0, null, loudness);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, PawnMakeNoise_NoiseLocation_Offset), 0, null, noiseLocation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, PawnMakeNoise_bUseNoiseMakerLocation_Offset), 0, null, bUseNoiseMakerLocation);
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, PawnMakeNoise_NoiseMaker_Offset), 0, null, noiseMaker);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PawnMakeNoise_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Pawn:IsPlayerControlled
    static readonly IntPtr IsPlayerControlled_NativeFunction;
    static readonly int IsPlayerControlled_ParamsSize;
    static readonly int IsPlayerControlled_ReturnValue_Offset;
    
    public bool IsPlayerControlled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPlayerControlled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsPlayerControlled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPlayerControlled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Pawn:IsPawnControlled
    static readonly IntPtr IsPawnControlled_NativeFunction;
    static readonly int IsPawnControlled_ParamsSize;
    static readonly int IsPawnControlled_ReturnValue_Offset;
    
    public bool IsPawnControlled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPawnControlled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsPawnControlled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPawnControlled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Pawn:IsMoveInputIgnored
    static readonly IntPtr IsMoveInputIgnored_NativeFunction;
    static readonly int IsMoveInputIgnored_ParamsSize;
    static readonly int IsMoveInputIgnored_ReturnValue_Offset;
    
    public bool IsMoveInputIgnored()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsMoveInputIgnored_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsMoveInputIgnored_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsMoveInputIgnored_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Pawn:IsLocallyViewed
    static readonly IntPtr IsLocallyViewed_NativeFunction;
    static readonly int IsLocallyViewed_ParamsSize;
    static readonly int IsLocallyViewed_ReturnValue_Offset;
    
    public bool IsLocallyViewed()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsLocallyViewed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsLocallyViewed_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsLocallyViewed_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Pawn:IsLocallyControlled
    static readonly IntPtr IsLocallyControlled_NativeFunction;
    static readonly int IsLocallyControlled_ParamsSize;
    static readonly int IsLocallyControlled_ReturnValue_Offset;
    
    public bool IsLocallyControlled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsLocallyControlled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsLocallyControlled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsLocallyControlled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Pawn:IsControlled
    static readonly IntPtr IsControlled_NativeFunction;
    static readonly int IsControlled_ParamsSize;
    static readonly int IsControlled_ReturnValue_Offset;
    
    public bool IsControlled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsControlled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsControlled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsControlled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Pawn:IsBotControlled
    static readonly IntPtr IsBotControlled_NativeFunction;
    static readonly int IsBotControlled_ParamsSize;
    static readonly int IsBotControlled_ReturnValue_Offset;
    
    public bool IsBotControlled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsBotControlled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsBotControlled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsBotControlled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Pawn:GetPlatformUserId
    static readonly IntPtr GetPlatformUserId_NativeFunction;
    static readonly int GetPlatformUserId_ParamsSize;
    static readonly int GetPlatformUserId_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.PlatformUserId GetPlatformUserId()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlatformUserId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPlatformUserId_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.PlatformUserId returnValue;
            returnValue = UnrealSharp.CoreUObject.PlatformUserIdMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetPlatformUserId_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Pawn:GetPendingMovementInputVector
    static readonly IntPtr GetPendingMovementInputVector_NativeFunction;
    static readonly int GetPendingMovementInputVector_ParamsSize;
    static readonly int GetPendingMovementInputVector_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetPendingMovementInputVector()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPendingMovementInputVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPendingMovementInputVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetPendingMovementInputVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Pawn:GetOverrideInputComponentClass
    static readonly IntPtr GetOverrideInputComponentClass_NativeFunction;
    static readonly int GetOverrideInputComponentClass_ParamsSize;
    static readonly int GetOverrideInputComponentClass_ReturnValue_Offset;
    
    public SubclassOf<UnrealSharp.Engine.InputComponent> GetOverrideInputComponentClass()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOverrideInputComponentClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOverrideInputComponentClass_NativeFunction, ParamsBuffer);
            
            SubclassOf<UnrealSharp.Engine.InputComponent> returnValue;
            returnValue = SubclassOfMarshaller<UnrealSharp.Engine.InputComponent>.FromNative(IntPtr.Add(ParamsBuffer, GetOverrideInputComponentClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Pawn:GetNavAgentLocation
    static readonly IntPtr GetNavAgentLocation_NativeFunction;
    static readonly int GetNavAgentLocation_ParamsSize;
    static readonly int GetNavAgentLocation_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetNavAgentLocation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNavAgentLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNavAgentLocation_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetNavAgentLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Pawn:GetMovementComponent
    static readonly IntPtr GetMovementComponent_NativeFunction;
    static readonly int GetMovementComponent_ParamsSize;
    static readonly int GetMovementComponent_ReturnValue_Offset;
    
    public UnrealSharp.Engine.PawnMovementComponent GetMovementComponent()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMovementComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMovementComponent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PawnMovementComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PawnMovementComponent>.FromNative(IntPtr.Add(ParamsBuffer, GetMovementComponent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Pawn:GetMovementBaseActor
    static readonly IntPtr GetMovementBaseActor_NativeFunction;
    static readonly int GetMovementBaseActor_ParamsSize;
    static readonly int GetMovementBaseActor_Pawn_Offset;
    static readonly int GetMovementBaseActor_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.Actor GetMovementBaseActor(UnrealSharp.Engine.Pawn pawn)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMovementBaseActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(ParamsBuffer, GetMovementBaseActor_Pawn_Offset), 0, null, pawn);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMovementBaseActor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Actor returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(ParamsBuffer, GetMovementBaseActor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Pawn:GetLocalViewingPlayerController
    static readonly IntPtr GetLocalViewingPlayerController_NativeFunction;
    static readonly int GetLocalViewingPlayerController_ParamsSize;
    static readonly int GetLocalViewingPlayerController_ReturnValue_Offset;
    
    public UnrealSharp.Engine.PlayerController GetLocalViewingPlayerController()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalViewingPlayerController_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLocalViewingPlayerController_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PlayerController returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(ParamsBuffer, GetLocalViewingPlayerController_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Pawn:GetLastMovementInputVector
    static readonly IntPtr GetLastMovementInputVector_NativeFunction;
    static readonly int GetLastMovementInputVector_ParamsSize;
    static readonly int GetLastMovementInputVector_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetLastMovementInputVector()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLastMovementInputVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLastMovementInputVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLastMovementInputVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Pawn:GetControlRotation
    static readonly IntPtr GetControlRotation_NativeFunction;
    static readonly int GetControlRotation_ParamsSize;
    static readonly int GetControlRotation_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetControlRotation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetControlRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetControlRotation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetControlRotation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Pawn:GetController
    static readonly IntPtr GetController_NativeFunction;
    static readonly int GetController_ParamsSize;
    static readonly int GetController_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Controller GetController()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetController_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetController_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Controller returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Controller>.FromNative(IntPtr.Add(ParamsBuffer, GetController_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Pawn:GetBaseAimRotation
    static readonly IntPtr GetBaseAimRotation_NativeFunction;
    static readonly int GetBaseAimRotation_ParamsSize;
    static readonly int GetBaseAimRotation_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetBaseAimRotation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBaseAimRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBaseAimRotation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetBaseAimRotation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Pawn:DetachFromControllerPendingDestroy
    static readonly IntPtr DetachFromControllerPendingDestroy_NativeFunction;
    
    public void DetachFromControllerPendingDestroy()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DetachFromControllerPendingDestroy_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.Pawn:ConsumeMovementInputVector
    static readonly IntPtr ConsumeMovementInputVector_NativeFunction;
    static readonly int ConsumeMovementInputVector_ParamsSize;
    static readonly int ConsumeMovementInputVector_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 ConsumeMovementInputVector()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConsumeMovementInputVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConsumeMovementInputVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, ConsumeMovementInputVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Pawn:AddMovementInput
    static readonly IntPtr AddMovementInput_NativeFunction;
    static readonly int AddMovementInput_ParamsSize;
    static readonly int AddMovementInput_WorldDirection_Offset;
    static readonly int AddMovementInput_ScaleValue_Offset;
    static readonly int AddMovementInput_bForce_Offset;
    
    public void AddMovementInput(System.DoubleNumerics.Vector3 worldDirection, float scaleValue = 1.000000f, bool bForce = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddMovementInput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddMovementInput_WorldDirection_Offset), 0, null, worldDirection);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddMovementInput_ScaleValue_Offset), 0, null, scaleValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddMovementInput_bForce_Offset), 0, null, bForce);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddMovementInput_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Pawn:AddControllerYawInput
    static readonly IntPtr AddControllerYawInput_NativeFunction;
    static readonly int AddControllerYawInput_ParamsSize;
    static readonly int AddControllerYawInput_Val_Offset;
    
    public void AddControllerYawInput(float val)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddControllerYawInput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddControllerYawInput_Val_Offset), 0, null, val);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddControllerYawInput_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Pawn:AddControllerRollInput
    static readonly IntPtr AddControllerRollInput_NativeFunction;
    static readonly int AddControllerRollInput_ParamsSize;
    static readonly int AddControllerRollInput_Val_Offset;
    
    public void AddControllerRollInput(float val)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddControllerRollInput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddControllerRollInput_Val_Offset), 0, null, val);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddControllerRollInput_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Pawn:AddControllerPitchInput
    static readonly IntPtr AddControllerPitchInput_NativeFunction;
    static readonly int AddControllerPitchInput_ParamsSize;
    static readonly int AddControllerPitchInput_Val_Offset;
    
    public void AddControllerPitchInput(float val)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddControllerPitchInput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddControllerPitchInput_Val_Offset), 0, null, val);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddControllerPitchInput_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.Pawn:ReceiveUnpossessed
    IntPtr ReceiveUnpossessed_NativeFunction;
    static readonly int ReceiveUnpossessed_ParamsSize;
    static readonly int ReceiveUnpossessed_OldController_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveUnpossessed(UnrealSharp.Engine.Controller oldController)
    {
        unsafe
        {
            if (ReceiveUnpossessed_NativeFunction == IntPtr.Zero)
            {
                ReceiveUnpossessed_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveUnpossessed");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveUnpossessed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveUnpossessed_OldController_Offset), 0, null, oldController);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveUnpossessed_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveUnpossessed_Implementation(UnrealSharp.Engine.Controller oldController)
    {
    }
    void Invoke_ReceiveUnpossessed(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Controller oldController = ObjectMarshaller<UnrealSharp.Engine.Controller>.FromNative(IntPtr.Add(buffer, ReceiveUnpossessed_OldController_Offset), 0, null);
            ReceiveUnpossessed_Implementation(oldController);
        }
    }
    
    // Function /Script/Engine.Pawn:ReceiveRestarted
    IntPtr ReceiveRestarted_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveRestarted()
    {
        unsafe
        {
            if (ReceiveRestarted_NativeFunction == IntPtr.Zero)
            {
                ReceiveRestarted_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveRestarted");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveRestarted_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveRestarted_Implementation()
    {
    }
    void Invoke_ReceiveRestarted(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            ReceiveRestarted_Implementation();
        }
    }
    
    // Function /Script/Engine.Pawn:ReceivePossessed
    IntPtr ReceivePossessed_NativeFunction;
    static readonly int ReceivePossessed_ParamsSize;
    static readonly int ReceivePossessed_NewController_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceivePossessed(UnrealSharp.Engine.Controller newController)
    {
        unsafe
        {
            if (ReceivePossessed_NativeFunction == IntPtr.Zero)
            {
                ReceivePossessed_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceivePossessed");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceivePossessed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, ReceivePossessed_NewController_Offset), 0, null, newController);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceivePossessed_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceivePossessed_Implementation(UnrealSharp.Engine.Controller newController)
    {
    }
    void Invoke_ReceivePossessed(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Controller newController = ObjectMarshaller<UnrealSharp.Engine.Controller>.FromNative(IntPtr.Add(buffer, ReceivePossessed_NewController_Offset), 0, null);
            ReceivePossessed_Implementation(newController);
        }
    }
    
    // Function /Script/Engine.Pawn:ReceiveControllerChanged
    IntPtr ReceiveControllerChanged_NativeFunction;
    static readonly int ReceiveControllerChanged_ParamsSize;
    static readonly int ReceiveControllerChanged_OldController_Offset;
    static readonly int ReceiveControllerChanged_NewController_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceiveControllerChanged(UnrealSharp.Engine.Controller oldController, UnrealSharp.Engine.Controller newController)
    {
        unsafe
        {
            if (ReceiveControllerChanged_NativeFunction == IntPtr.Zero)
            {
                ReceiveControllerChanged_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveControllerChanged");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveControllerChanged_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveControllerChanged_OldController_Offset), 0, null, oldController);
            ObjectMarshaller<UnrealSharp.Engine.Controller>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveControllerChanged_NewController_Offset), 0, null, newController);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveControllerChanged_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveControllerChanged_Implementation(UnrealSharp.Engine.Controller oldController, UnrealSharp.Engine.Controller newController)
    {
    }
    void Invoke_ReceiveControllerChanged(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Controller oldController = ObjectMarshaller<UnrealSharp.Engine.Controller>.FromNative(IntPtr.Add(buffer, ReceiveControllerChanged_OldController_Offset), 0, null);
            UnrealSharp.Engine.Controller newController = ObjectMarshaller<UnrealSharp.Engine.Controller>.FromNative(IntPtr.Add(buffer, ReceiveControllerChanged_NewController_Offset), 0, null);
            ReceiveControllerChanged_Implementation(oldController, newController);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class PhysicsConstraintComponent : UnrealSharp.Engine.SceneComponent
{
    
    static PhysicsConstraintComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PhysicsConstraintComponent");
        
        
        SetOrientationDriveTwistAndSwing_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOrientationDriveTwistAndSwing");
        SetOrientationDriveTwistAndSwing_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOrientationDriveTwistAndSwing_NativeFunction);
        SetOrientationDriveTwistAndSwing_bEnableTwistDrive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOrientationDriveTwistAndSwing_NativeFunction, "bEnableTwistDrive");
        SetOrientationDriveTwistAndSwing_bEnableSwingDrive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOrientationDriveTwistAndSwing_NativeFunction, "bEnableSwingDrive");
        SetOrientationDriveSLERP_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOrientationDriveSLERP");
        SetOrientationDriveSLERP_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOrientationDriveSLERP_NativeFunction);
        SetOrientationDriveSLERP_bEnableSLERP_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOrientationDriveSLERP_NativeFunction, "bEnableSLERP");
        SetLinearZLimit_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLinearZLimit");
        SetLinearZLimit_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLinearZLimit_NativeFunction);
        SetLinearZLimit_ConstraintType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearZLimit_NativeFunction, "ConstraintType");
        SetLinearZLimit_LimitSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearZLimit_NativeFunction, "LimitSize");
        SetLinearYLimit_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLinearYLimit");
        SetLinearYLimit_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLinearYLimit_NativeFunction);
        SetLinearYLimit_ConstraintType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearYLimit_NativeFunction, "ConstraintType");
        SetLinearYLimit_LimitSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearYLimit_NativeFunction, "LimitSize");
        SetLinearXLimit_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLinearXLimit");
        SetLinearXLimit_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLinearXLimit_NativeFunction);
        SetLinearXLimit_ConstraintType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearXLimit_NativeFunction, "ConstraintType");
        SetLinearXLimit_LimitSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearXLimit_NativeFunction, "LimitSize");
        SetLinearVelocityTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLinearVelocityTarget");
        SetLinearVelocityTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLinearVelocityTarget_NativeFunction);
        SetLinearVelocityTarget_InVelTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearVelocityTarget_NativeFunction, "InVelTarget");
        SetLinearVelocityDrive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLinearVelocityDrive");
        SetLinearVelocityDrive_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLinearVelocityDrive_NativeFunction);
        SetLinearVelocityDrive_bEnableDriveX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearVelocityDrive_NativeFunction, "bEnableDriveX");
        SetLinearVelocityDrive_bEnableDriveY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearVelocityDrive_NativeFunction, "bEnableDriveY");
        SetLinearVelocityDrive_bEnableDriveZ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearVelocityDrive_NativeFunction, "bEnableDriveZ");
        SetLinearPositionTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLinearPositionTarget");
        SetLinearPositionTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLinearPositionTarget_NativeFunction);
        SetLinearPositionTarget_InPosTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearPositionTarget_NativeFunction, "InPosTarget");
        SetLinearPositionDrive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLinearPositionDrive");
        SetLinearPositionDrive_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLinearPositionDrive_NativeFunction);
        SetLinearPositionDrive_bEnableDriveX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearPositionDrive_NativeFunction, "bEnableDriveX");
        SetLinearPositionDrive_bEnableDriveY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearPositionDrive_NativeFunction, "bEnableDriveY");
        SetLinearPositionDrive_bEnableDriveZ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearPositionDrive_NativeFunction, "bEnableDriveZ");
        SetLinearPlasticity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLinearPlasticity");
        SetLinearPlasticity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLinearPlasticity_NativeFunction);
        SetLinearPlasticity_bLinearPlasticity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearPlasticity_NativeFunction, "bLinearPlasticity");
        SetLinearPlasticity_LinearPlasticityThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearPlasticity_NativeFunction, "LinearPlasticityThreshold");
        SetLinearPlasticity_PlasticityType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearPlasticity_NativeFunction, "PlasticityType");
        SetLinearDriveParams_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLinearDriveParams");
        SetLinearDriveParams_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLinearDriveParams_NativeFunction);
        SetLinearDriveParams_PositionStrength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearDriveParams_NativeFunction, "PositionStrength");
        SetLinearDriveParams_VelocityStrength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearDriveParams_NativeFunction, "VelocityStrength");
        SetLinearDriveParams_InForceLimit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearDriveParams_NativeFunction, "InForceLimit");
        SetLinearBreakable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLinearBreakable");
        SetLinearBreakable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLinearBreakable_NativeFunction);
        SetLinearBreakable_bLinearBreakable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearBreakable_NativeFunction, "bLinearBreakable");
        SetLinearBreakable_LinearBreakThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearBreakable_NativeFunction, "LinearBreakThreshold");
        SetDisableCollision_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDisableCollision");
        SetDisableCollision_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDisableCollision_NativeFunction);
        SetDisableCollision_bDisableCollision_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDisableCollision_NativeFunction, "bDisableCollision");
        SetContactTransferScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetContactTransferScale");
        SetContactTransferScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetContactTransferScale_NativeFunction);
        SetContactTransferScale_ContactTransferScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetContactTransferScale_NativeFunction, "ContactTransferScale");
        SetConstraintReferencePosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetConstraintReferencePosition");
        SetConstraintReferencePosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetConstraintReferencePosition_NativeFunction);
        SetConstraintReferencePosition_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConstraintReferencePosition_NativeFunction, "Frame");
        SetConstraintReferencePosition_RefPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConstraintReferencePosition_NativeFunction, "RefPosition");
        SetConstraintReferenceOrientation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetConstraintReferenceOrientation");
        SetConstraintReferenceOrientation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetConstraintReferenceOrientation_NativeFunction);
        SetConstraintReferenceOrientation_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConstraintReferenceOrientation_NativeFunction, "Frame");
        SetConstraintReferenceOrientation_PriAxis_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConstraintReferenceOrientation_NativeFunction, "PriAxis");
        SetConstraintReferenceOrientation_SecAxis_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConstraintReferenceOrientation_NativeFunction, "SecAxis");
        SetConstraintReferenceFrame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetConstraintReferenceFrame");
        SetConstraintReferenceFrame_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetConstraintReferenceFrame_NativeFunction);
        SetConstraintReferenceFrame_Frame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConstraintReferenceFrame_NativeFunction, "Frame");
        SetConstraintReferenceFrame_RefFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConstraintReferenceFrame_NativeFunction, "RefFrame");
        SetConstrainedComponents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetConstrainedComponents");
        SetConstrainedComponents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetConstrainedComponents_NativeFunction);
        SetConstrainedComponents_Component1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConstrainedComponents_NativeFunction, "Component1");
        SetConstrainedComponents_BoneName1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConstrainedComponents_NativeFunction, "BoneName1");
        SetConstrainedComponents_Component2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConstrainedComponents_NativeFunction, "Component2");
        SetConstrainedComponents_BoneName2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConstrainedComponents_NativeFunction, "BoneName2");
        SetAngularVelocityTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAngularVelocityTarget");
        SetAngularVelocityTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAngularVelocityTarget_NativeFunction);
        SetAngularVelocityTarget_InVelTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularVelocityTarget_NativeFunction, "InVelTarget");
        SetAngularVelocityDriveTwistAndSwing_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAngularVelocityDriveTwistAndSwing");
        SetAngularVelocityDriveTwistAndSwing_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAngularVelocityDriveTwistAndSwing_NativeFunction);
        SetAngularVelocityDriveTwistAndSwing_bEnableTwistDrive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularVelocityDriveTwistAndSwing_NativeFunction, "bEnableTwistDrive");
        SetAngularVelocityDriveTwistAndSwing_bEnableSwingDrive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularVelocityDriveTwistAndSwing_NativeFunction, "bEnableSwingDrive");
        SetAngularVelocityDriveSLERP_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAngularVelocityDriveSLERP");
        SetAngularVelocityDriveSLERP_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAngularVelocityDriveSLERP_NativeFunction);
        SetAngularVelocityDriveSLERP_bEnableSLERP_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularVelocityDriveSLERP_NativeFunction, "bEnableSLERP");
        SetAngularVelocityDrive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAngularVelocityDrive");
        SetAngularVelocityDrive_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAngularVelocityDrive_NativeFunction);
        SetAngularVelocityDrive_bEnableSwingDrive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularVelocityDrive_NativeFunction, "bEnableSwingDrive");
        SetAngularVelocityDrive_bEnableTwistDrive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularVelocityDrive_NativeFunction, "bEnableTwistDrive");
        SetAngularTwistLimit_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAngularTwistLimit");
        SetAngularTwistLimit_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAngularTwistLimit_NativeFunction);
        SetAngularTwistLimit_ConstraintType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularTwistLimit_NativeFunction, "ConstraintType");
        SetAngularTwistLimit_TwistLimitAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularTwistLimit_NativeFunction, "TwistLimitAngle");
        SetAngularSwing2Limit_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAngularSwing2Limit");
        SetAngularSwing2Limit_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAngularSwing2Limit_NativeFunction);
        SetAngularSwing2Limit_MotionType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularSwing2Limit_NativeFunction, "MotionType");
        SetAngularSwing2Limit_Swing2LimitAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularSwing2Limit_NativeFunction, "Swing2LimitAngle");
        SetAngularSwing1Limit_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAngularSwing1Limit");
        SetAngularSwing1Limit_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAngularSwing1Limit_NativeFunction);
        SetAngularSwing1Limit_MotionType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularSwing1Limit_NativeFunction, "MotionType");
        SetAngularSwing1Limit_Swing1LimitAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularSwing1Limit_NativeFunction, "Swing1LimitAngle");
        SetAngularPlasticity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAngularPlasticity");
        SetAngularPlasticity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAngularPlasticity_NativeFunction);
        SetAngularPlasticity_bAngularPlasticity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularPlasticity_NativeFunction, "bAngularPlasticity");
        SetAngularPlasticity_AngularPlasticityThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularPlasticity_NativeFunction, "AngularPlasticityThreshold");
        SetAngularOrientationTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAngularOrientationTarget");
        SetAngularOrientationTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAngularOrientationTarget_NativeFunction);
        SetAngularOrientationTarget_InPosTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularOrientationTarget_NativeFunction, "InPosTarget");
        SetAngularOrientationDrive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAngularOrientationDrive");
        SetAngularOrientationDrive_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAngularOrientationDrive_NativeFunction);
        SetAngularOrientationDrive_bEnableSwingDrive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularOrientationDrive_NativeFunction, "bEnableSwingDrive");
        SetAngularOrientationDrive_bEnableTwistDrive_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularOrientationDrive_NativeFunction, "bEnableTwistDrive");
        SetAngularDriveParams_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAngularDriveParams");
        SetAngularDriveParams_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAngularDriveParams_NativeFunction);
        SetAngularDriveParams_PositionStrength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularDriveParams_NativeFunction, "PositionStrength");
        SetAngularDriveParams_VelocityStrength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularDriveParams_NativeFunction, "VelocityStrength");
        SetAngularDriveParams_InForceLimit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularDriveParams_NativeFunction, "InForceLimit");
        SetAngularDriveMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAngularDriveMode");
        SetAngularDriveMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAngularDriveMode_NativeFunction);
        SetAngularDriveMode_DriveMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularDriveMode_NativeFunction, "DriveMode");
        SetAngularBreakable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAngularBreakable");
        SetAngularBreakable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAngularBreakable_NativeFunction);
        SetAngularBreakable_bAngularBreakable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularBreakable_NativeFunction, "bAngularBreakable");
        SetAngularBreakable_AngularBreakThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularBreakable_NativeFunction, "AngularBreakThreshold");
        IsBroken_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsBroken");
        IsBroken_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsBroken_NativeFunction);
        IsBroken_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsBroken_NativeFunction, "ReturnValue");
        GetCurrentTwist_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentTwist");
        GetCurrentTwist_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentTwist_NativeFunction);
        GetCurrentTwist_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentTwist_NativeFunction, "ReturnValue");
        GetCurrentSwing2_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentSwing2");
        GetCurrentSwing2_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentSwing2_NativeFunction);
        GetCurrentSwing2_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentSwing2_NativeFunction, "ReturnValue");
        GetCurrentSwing1_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentSwing1");
        GetCurrentSwing1_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentSwing1_NativeFunction);
        GetCurrentSwing1_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentSwing1_NativeFunction, "ReturnValue");
        GetConstraintForce_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetConstraintForce");
        GetConstraintForce_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetConstraintForce_NativeFunction);
        GetConstraintForce_OutLinearForce_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConstraintForce_NativeFunction, "OutLinearForce");
        GetConstraintForce_OutAngularForce_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConstraintForce_NativeFunction, "OutAngularForce");
        GetConstraint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetConstraint");
        GetConstraint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetConstraint_NativeFunction);
        GetConstraint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConstraint_NativeFunction, "ReturnValue");
        GetConstrainedComponents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetConstrainedComponents");
        GetConstrainedComponents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetConstrainedComponents_NativeFunction);
        GetConstrainedComponents_OutComponent1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConstrainedComponents_NativeFunction, "OutComponent1");
        GetConstrainedComponents_OutBoneName1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConstrainedComponents_NativeFunction, "OutBoneName1");
        GetConstrainedComponents_OutComponent2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConstrainedComponents_NativeFunction, "OutComponent2");
        GetConstrainedComponents_OutBoneName2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConstrainedComponents_NativeFunction, "OutBoneName2");
        BreakConstraint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BreakConstraint");
        
        
    }
    
    protected PhysicsConstraintComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.PhysicsConstraintComponent:SetOrientationDriveTwistAndSwing
    static readonly IntPtr SetOrientationDriveTwistAndSwing_NativeFunction;
    static readonly int SetOrientationDriveTwistAndSwing_ParamsSize;
    static readonly int SetOrientationDriveTwistAndSwing_bEnableTwistDrive_Offset;
    static readonly int SetOrientationDriveTwistAndSwing_bEnableSwingDrive_Offset;
    
    public void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOrientationDriveTwistAndSwing_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetOrientationDriveTwistAndSwing_bEnableTwistDrive_Offset), 0, null, bEnableTwistDrive);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetOrientationDriveTwistAndSwing_bEnableSwingDrive_Offset), 0, null, bEnableSwingDrive);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOrientationDriveTwistAndSwing_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetOrientationDriveSLERP
    static readonly IntPtr SetOrientationDriveSLERP_NativeFunction;
    static readonly int SetOrientationDriveSLERP_ParamsSize;
    static readonly int SetOrientationDriveSLERP_bEnableSLERP_Offset;
    
    public void SetOrientationDriveSLERP(bool bEnableSLERP)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOrientationDriveSLERP_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetOrientationDriveSLERP_bEnableSLERP_Offset), 0, null, bEnableSLERP);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOrientationDriveSLERP_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetLinearZLimit
    static readonly IntPtr SetLinearZLimit_NativeFunction;
    static readonly int SetLinearZLimit_ParamsSize;
    static readonly int SetLinearZLimit_ConstraintType_Offset;
    static readonly int SetLinearZLimit_LimitSize_Offset;
    
    public void SetLinearZLimit(UnrealSharp.PhysicsCore.ELinearConstraintMotion constraintType, float limitSize)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLinearZLimit_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.PhysicsCore.ELinearConstraintMotion>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearZLimit_ConstraintType_Offset), 0, null, constraintType);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearZLimit_LimitSize_Offset), 0, null, limitSize);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLinearZLimit_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetLinearYLimit
    static readonly IntPtr SetLinearYLimit_NativeFunction;
    static readonly int SetLinearYLimit_ParamsSize;
    static readonly int SetLinearYLimit_ConstraintType_Offset;
    static readonly int SetLinearYLimit_LimitSize_Offset;
    
    public void SetLinearYLimit(UnrealSharp.PhysicsCore.ELinearConstraintMotion constraintType, float limitSize)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLinearYLimit_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.PhysicsCore.ELinearConstraintMotion>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearYLimit_ConstraintType_Offset), 0, null, constraintType);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearYLimit_LimitSize_Offset), 0, null, limitSize);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLinearYLimit_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetLinearXLimit
    static readonly IntPtr SetLinearXLimit_NativeFunction;
    static readonly int SetLinearXLimit_ParamsSize;
    static readonly int SetLinearXLimit_ConstraintType_Offset;
    static readonly int SetLinearXLimit_LimitSize_Offset;
    
    public void SetLinearXLimit(UnrealSharp.PhysicsCore.ELinearConstraintMotion constraintType, float limitSize)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLinearXLimit_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.PhysicsCore.ELinearConstraintMotion>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearXLimit_ConstraintType_Offset), 0, null, constraintType);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearXLimit_LimitSize_Offset), 0, null, limitSize);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLinearXLimit_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetLinearVelocityTarget
    static readonly IntPtr SetLinearVelocityTarget_NativeFunction;
    static readonly int SetLinearVelocityTarget_ParamsSize;
    static readonly int SetLinearVelocityTarget_InVelTarget_Offset;
    
    public void SetLinearVelocityTarget(System.DoubleNumerics.Vector3 inVelTarget)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLinearVelocityTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearVelocityTarget_InVelTarget_Offset), 0, null, inVelTarget);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLinearVelocityTarget_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetLinearVelocityDrive
    static readonly IntPtr SetLinearVelocityDrive_NativeFunction;
    static readonly int SetLinearVelocityDrive_ParamsSize;
    static readonly int SetLinearVelocityDrive_bEnableDriveX_Offset;
    static readonly int SetLinearVelocityDrive_bEnableDriveY_Offset;
    static readonly int SetLinearVelocityDrive_bEnableDriveZ_Offset;
    
    public void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLinearVelocityDrive_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLinearVelocityDrive_bEnableDriveX_Offset), 0, null, bEnableDriveX);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLinearVelocityDrive_bEnableDriveY_Offset), 0, null, bEnableDriveY);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLinearVelocityDrive_bEnableDriveZ_Offset), 0, null, bEnableDriveZ);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLinearVelocityDrive_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetLinearPositionTarget
    static readonly IntPtr SetLinearPositionTarget_NativeFunction;
    static readonly int SetLinearPositionTarget_ParamsSize;
    static readonly int SetLinearPositionTarget_InPosTarget_Offset;
    
    public void SetLinearPositionTarget(System.DoubleNumerics.Vector3 inPosTarget)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLinearPositionTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearPositionTarget_InPosTarget_Offset), 0, null, inPosTarget);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLinearPositionTarget_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetLinearPositionDrive
    static readonly IntPtr SetLinearPositionDrive_NativeFunction;
    static readonly int SetLinearPositionDrive_ParamsSize;
    static readonly int SetLinearPositionDrive_bEnableDriveX_Offset;
    static readonly int SetLinearPositionDrive_bEnableDriveY_Offset;
    static readonly int SetLinearPositionDrive_bEnableDriveZ_Offset;
    
    public void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLinearPositionDrive_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLinearPositionDrive_bEnableDriveX_Offset), 0, null, bEnableDriveX);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLinearPositionDrive_bEnableDriveY_Offset), 0, null, bEnableDriveY);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLinearPositionDrive_bEnableDriveZ_Offset), 0, null, bEnableDriveZ);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLinearPositionDrive_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetLinearPlasticity
    static readonly IntPtr SetLinearPlasticity_NativeFunction;
    static readonly int SetLinearPlasticity_ParamsSize;
    static readonly int SetLinearPlasticity_bLinearPlasticity_Offset;
    static readonly int SetLinearPlasticity_LinearPlasticityThreshold_Offset;
    static readonly int SetLinearPlasticity_PlasticityType_Offset;
    
    public void SetLinearPlasticity(bool bLinearPlasticity, float linearPlasticityThreshold, UnrealSharp.PhysicsCore.EConstraintPlasticityType plasticityType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLinearPlasticity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLinearPlasticity_bLinearPlasticity_Offset), 0, null, bLinearPlasticity);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearPlasticity_LinearPlasticityThreshold_Offset), 0, null, linearPlasticityThreshold);
            BlittableMarshaller<UnrealSharp.PhysicsCore.EConstraintPlasticityType>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearPlasticity_PlasticityType_Offset), 0, null, plasticityType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLinearPlasticity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetLinearDriveParams
    static readonly IntPtr SetLinearDriveParams_NativeFunction;
    static readonly int SetLinearDriveParams_ParamsSize;
    static readonly int SetLinearDriveParams_PositionStrength_Offset;
    static readonly int SetLinearDriveParams_VelocityStrength_Offset;
    static readonly int SetLinearDriveParams_InForceLimit_Offset;
    
    public void SetLinearDriveParams(float positionStrength, float velocityStrength, float inForceLimit)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLinearDriveParams_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearDriveParams_PositionStrength_Offset), 0, null, positionStrength);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearDriveParams_VelocityStrength_Offset), 0, null, velocityStrength);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearDriveParams_InForceLimit_Offset), 0, null, inForceLimit);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLinearDriveParams_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetLinearBreakable
    static readonly IntPtr SetLinearBreakable_NativeFunction;
    static readonly int SetLinearBreakable_ParamsSize;
    static readonly int SetLinearBreakable_bLinearBreakable_Offset;
    static readonly int SetLinearBreakable_LinearBreakThreshold_Offset;
    
    public void SetLinearBreakable(bool bLinearBreakable, float linearBreakThreshold)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLinearBreakable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLinearBreakable_bLinearBreakable_Offset), 0, null, bLinearBreakable);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearBreakable_LinearBreakThreshold_Offset), 0, null, linearBreakThreshold);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLinearBreakable_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetDisableCollision
    static readonly IntPtr SetDisableCollision_NativeFunction;
    static readonly int SetDisableCollision_ParamsSize;
    static readonly int SetDisableCollision_bDisableCollision_Offset;
    
    public void SetDisableCollision(bool bDisableCollision)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDisableCollision_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetDisableCollision_bDisableCollision_Offset), 0, null, bDisableCollision);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDisableCollision_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetContactTransferScale
    static readonly IntPtr SetContactTransferScale_NativeFunction;
    static readonly int SetContactTransferScale_ParamsSize;
    static readonly int SetContactTransferScale_ContactTransferScale_Offset;
    
    public void SetContactTransferScale(float contactTransferScale)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetContactTransferScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetContactTransferScale_ContactTransferScale_Offset), 0, null, contactTransferScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetContactTransferScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetConstraintReferencePosition
    static readonly IntPtr SetConstraintReferencePosition_NativeFunction;
    static readonly int SetConstraintReferencePosition_ParamsSize;
    static readonly int SetConstraintReferencePosition_Frame_Offset;
    static readonly int SetConstraintReferencePosition_RefPosition_Offset;
    
    public void SetConstraintReferencePosition(UnrealSharp.PhysicsCore.EConstraintFrame frame, System.DoubleNumerics.Vector3 refPosition)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetConstraintReferencePosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.PhysicsCore.EConstraintFrame>.ToNative(IntPtr.Add(ParamsBuffer, SetConstraintReferencePosition_Frame_Offset), 0, null, frame);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetConstraintReferencePosition_RefPosition_Offset), 0, null, refPosition);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetConstraintReferencePosition_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetConstraintReferenceOrientation
    static readonly IntPtr SetConstraintReferenceOrientation_NativeFunction;
    static readonly int SetConstraintReferenceOrientation_ParamsSize;
    static readonly int SetConstraintReferenceOrientation_Frame_Offset;
    static readonly int SetConstraintReferenceOrientation_PriAxis_Offset;
    static readonly int SetConstraintReferenceOrientation_SecAxis_Offset;
    
    public void SetConstraintReferenceOrientation(UnrealSharp.PhysicsCore.EConstraintFrame frame, System.DoubleNumerics.Vector3 priAxis, System.DoubleNumerics.Vector3 secAxis)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetConstraintReferenceOrientation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.PhysicsCore.EConstraintFrame>.ToNative(IntPtr.Add(ParamsBuffer, SetConstraintReferenceOrientation_Frame_Offset), 0, null, frame);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetConstraintReferenceOrientation_PriAxis_Offset), 0, null, priAxis);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetConstraintReferenceOrientation_SecAxis_Offset), 0, null, secAxis);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetConstraintReferenceOrientation_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetConstraintReferenceFrame
    static readonly IntPtr SetConstraintReferenceFrame_NativeFunction;
    static readonly int SetConstraintReferenceFrame_ParamsSize;
    static readonly int SetConstraintReferenceFrame_Frame_Offset;
    static readonly int SetConstraintReferenceFrame_RefFrame_Offset;
    
    public void SetConstraintReferenceFrame(UnrealSharp.PhysicsCore.EConstraintFrame frame, UnrealSharp.Transform refFrame)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetConstraintReferenceFrame_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.PhysicsCore.EConstraintFrame>.ToNative(IntPtr.Add(ParamsBuffer, SetConstraintReferenceFrame_Frame_Offset), 0, null, frame);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetConstraintReferenceFrame_RefFrame_Offset), 0, null, refFrame);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetConstraintReferenceFrame_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetConstrainedComponents
    static readonly IntPtr SetConstrainedComponents_NativeFunction;
    static readonly int SetConstrainedComponents_ParamsSize;
    static readonly int SetConstrainedComponents_Component1_Offset;
    static readonly int SetConstrainedComponents_BoneName1_Offset;
    static readonly int SetConstrainedComponents_Component2_Offset;
    static readonly int SetConstrainedComponents_BoneName2_Offset;
    
    public void SetConstrainedComponents(UnrealSharp.Engine.PrimitiveComponent component1, Name boneName1, UnrealSharp.Engine.PrimitiveComponent component2, Name boneName2)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetConstrainedComponents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative(IntPtr.Add(ParamsBuffer, SetConstrainedComponents_Component1_Offset), 0, null, component1);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetConstrainedComponents_BoneName1_Offset), 0, null, boneName1);
            ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative(IntPtr.Add(ParamsBuffer, SetConstrainedComponents_Component2_Offset), 0, null, component2);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetConstrainedComponents_BoneName2_Offset), 0, null, boneName2);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetConstrainedComponents_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetAngularVelocityTarget
    static readonly IntPtr SetAngularVelocityTarget_NativeFunction;
    static readonly int SetAngularVelocityTarget_ParamsSize;
    static readonly int SetAngularVelocityTarget_InVelTarget_Offset;
    
    public void SetAngularVelocityTarget(System.DoubleNumerics.Vector3 inVelTarget)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAngularVelocityTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetAngularVelocityTarget_InVelTarget_Offset), 0, null, inVelTarget);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAngularVelocityTarget_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetAngularVelocityDriveTwistAndSwing
    static readonly IntPtr SetAngularVelocityDriveTwistAndSwing_NativeFunction;
    static readonly int SetAngularVelocityDriveTwistAndSwing_ParamsSize;
    static readonly int SetAngularVelocityDriveTwistAndSwing_bEnableTwistDrive_Offset;
    static readonly int SetAngularVelocityDriveTwistAndSwing_bEnableSwingDrive_Offset;
    
    public void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAngularVelocityDriveTwistAndSwing_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAngularVelocityDriveTwistAndSwing_bEnableTwistDrive_Offset), 0, null, bEnableTwistDrive);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAngularVelocityDriveTwistAndSwing_bEnableSwingDrive_Offset), 0, null, bEnableSwingDrive);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAngularVelocityDriveTwistAndSwing_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetAngularVelocityDriveSLERP
    static readonly IntPtr SetAngularVelocityDriveSLERP_NativeFunction;
    static readonly int SetAngularVelocityDriveSLERP_ParamsSize;
    static readonly int SetAngularVelocityDriveSLERP_bEnableSLERP_Offset;
    
    public void SetAngularVelocityDriveSLERP(bool bEnableSLERP)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAngularVelocityDriveSLERP_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAngularVelocityDriveSLERP_bEnableSLERP_Offset), 0, null, bEnableSLERP);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAngularVelocityDriveSLERP_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetAngularVelocityDrive
    static readonly IntPtr SetAngularVelocityDrive_NativeFunction;
    static readonly int SetAngularVelocityDrive_ParamsSize;
    static readonly int SetAngularVelocityDrive_bEnableSwingDrive_Offset;
    static readonly int SetAngularVelocityDrive_bEnableTwistDrive_Offset;
    
    [Obsolete("Use SetAngularVelocityDriveTwistAndSwing instead.")]
    public void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAngularVelocityDrive_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAngularVelocityDrive_bEnableSwingDrive_Offset), 0, null, bEnableSwingDrive);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAngularVelocityDrive_bEnableTwistDrive_Offset), 0, null, bEnableTwistDrive);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAngularVelocityDrive_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetAngularTwistLimit
    static readonly IntPtr SetAngularTwistLimit_NativeFunction;
    static readonly int SetAngularTwistLimit_ParamsSize;
    static readonly int SetAngularTwistLimit_ConstraintType_Offset;
    static readonly int SetAngularTwistLimit_TwistLimitAngle_Offset;
    
    public void SetAngularTwistLimit(UnrealSharp.PhysicsCore.EAngularConstraintMotion constraintType, float twistLimitAngle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAngularTwistLimit_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.PhysicsCore.EAngularConstraintMotion>.ToNative(IntPtr.Add(ParamsBuffer, SetAngularTwistLimit_ConstraintType_Offset), 0, null, constraintType);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAngularTwistLimit_TwistLimitAngle_Offset), 0, null, twistLimitAngle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAngularTwistLimit_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetAngularSwing2Limit
    static readonly IntPtr SetAngularSwing2Limit_NativeFunction;
    static readonly int SetAngularSwing2Limit_ParamsSize;
    static readonly int SetAngularSwing2Limit_MotionType_Offset;
    static readonly int SetAngularSwing2Limit_Swing2LimitAngle_Offset;
    
    public void SetAngularSwing2Limit(UnrealSharp.PhysicsCore.EAngularConstraintMotion motionType, float swing2LimitAngle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAngularSwing2Limit_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.PhysicsCore.EAngularConstraintMotion>.ToNative(IntPtr.Add(ParamsBuffer, SetAngularSwing2Limit_MotionType_Offset), 0, null, motionType);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAngularSwing2Limit_Swing2LimitAngle_Offset), 0, null, swing2LimitAngle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAngularSwing2Limit_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetAngularSwing1Limit
    static readonly IntPtr SetAngularSwing1Limit_NativeFunction;
    static readonly int SetAngularSwing1Limit_ParamsSize;
    static readonly int SetAngularSwing1Limit_MotionType_Offset;
    static readonly int SetAngularSwing1Limit_Swing1LimitAngle_Offset;
    
    public void SetAngularSwing1Limit(UnrealSharp.PhysicsCore.EAngularConstraintMotion motionType, float swing1LimitAngle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAngularSwing1Limit_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.PhysicsCore.EAngularConstraintMotion>.ToNative(IntPtr.Add(ParamsBuffer, SetAngularSwing1Limit_MotionType_Offset), 0, null, motionType);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAngularSwing1Limit_Swing1LimitAngle_Offset), 0, null, swing1LimitAngle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAngularSwing1Limit_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetAngularPlasticity
    static readonly IntPtr SetAngularPlasticity_NativeFunction;
    static readonly int SetAngularPlasticity_ParamsSize;
    static readonly int SetAngularPlasticity_bAngularPlasticity_Offset;
    static readonly int SetAngularPlasticity_AngularPlasticityThreshold_Offset;
    
    public void SetAngularPlasticity(bool bAngularPlasticity, float angularPlasticityThreshold)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAngularPlasticity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAngularPlasticity_bAngularPlasticity_Offset), 0, null, bAngularPlasticity);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAngularPlasticity_AngularPlasticityThreshold_Offset), 0, null, angularPlasticityThreshold);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAngularPlasticity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetAngularOrientationTarget
    static readonly IntPtr SetAngularOrientationTarget_NativeFunction;
    static readonly int SetAngularOrientationTarget_ParamsSize;
    static readonly int SetAngularOrientationTarget_InPosTarget_Offset;
    
    public void SetAngularOrientationTarget(UnrealSharp.Rotator inPosTarget)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAngularOrientationTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SetAngularOrientationTarget_InPosTarget_Offset), 0, null, inPosTarget);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAngularOrientationTarget_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetAngularOrientationDrive
    static readonly IntPtr SetAngularOrientationDrive_NativeFunction;
    static readonly int SetAngularOrientationDrive_ParamsSize;
    static readonly int SetAngularOrientationDrive_bEnableSwingDrive_Offset;
    static readonly int SetAngularOrientationDrive_bEnableTwistDrive_Offset;
    
    [Obsolete("Use SetOrientationDriveTwistAndSwing instead.")]
    public void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAngularOrientationDrive_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAngularOrientationDrive_bEnableSwingDrive_Offset), 0, null, bEnableSwingDrive);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAngularOrientationDrive_bEnableTwistDrive_Offset), 0, null, bEnableTwistDrive);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAngularOrientationDrive_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetAngularDriveParams
    static readonly IntPtr SetAngularDriveParams_NativeFunction;
    static readonly int SetAngularDriveParams_ParamsSize;
    static readonly int SetAngularDriveParams_PositionStrength_Offset;
    static readonly int SetAngularDriveParams_VelocityStrength_Offset;
    static readonly int SetAngularDriveParams_InForceLimit_Offset;
    
    public void SetAngularDriveParams(float positionStrength, float velocityStrength, float inForceLimit)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAngularDriveParams_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAngularDriveParams_PositionStrength_Offset), 0, null, positionStrength);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAngularDriveParams_VelocityStrength_Offset), 0, null, velocityStrength);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAngularDriveParams_InForceLimit_Offset), 0, null, inForceLimit);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAngularDriveParams_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetAngularDriveMode
    static readonly IntPtr SetAngularDriveMode_NativeFunction;
    static readonly int SetAngularDriveMode_ParamsSize;
    static readonly int SetAngularDriveMode_DriveMode_Offset;
    
    public void SetAngularDriveMode(UnrealSharp.Engine.EAngularDriveMode driveMode)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAngularDriveMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EAngularDriveMode>.ToNative(IntPtr.Add(ParamsBuffer, SetAngularDriveMode_DriveMode_Offset), 0, null, driveMode);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAngularDriveMode_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:SetAngularBreakable
    static readonly IntPtr SetAngularBreakable_NativeFunction;
    static readonly int SetAngularBreakable_ParamsSize;
    static readonly int SetAngularBreakable_bAngularBreakable_Offset;
    static readonly int SetAngularBreakable_AngularBreakThreshold_Offset;
    
    public void SetAngularBreakable(bool bAngularBreakable, float angularBreakThreshold)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAngularBreakable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAngularBreakable_bAngularBreakable_Offset), 0, null, bAngularBreakable);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAngularBreakable_AngularBreakThreshold_Offset), 0, null, angularBreakThreshold);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAngularBreakable_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:IsBroken
    static readonly IntPtr IsBroken_NativeFunction;
    static readonly int IsBroken_ParamsSize;
    static readonly int IsBroken_ReturnValue_Offset;
    
    public bool IsBroken()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsBroken_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsBroken_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsBroken_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:GetCurrentTwist
    static readonly IntPtr GetCurrentTwist_NativeFunction;
    static readonly int GetCurrentTwist_ParamsSize;
    static readonly int GetCurrentTwist_ReturnValue_Offset;
    
    public float GetCurrentTwist()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentTwist_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurrentTwist_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentTwist_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:GetCurrentSwing2
    static readonly IntPtr GetCurrentSwing2_NativeFunction;
    static readonly int GetCurrentSwing2_ParamsSize;
    static readonly int GetCurrentSwing2_ReturnValue_Offset;
    
    public float GetCurrentSwing2()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentSwing2_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurrentSwing2_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentSwing2_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:GetCurrentSwing1
    static readonly IntPtr GetCurrentSwing1_NativeFunction;
    static readonly int GetCurrentSwing1_ParamsSize;
    static readonly int GetCurrentSwing1_ReturnValue_Offset;
    
    public float GetCurrentSwing1()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentSwing1_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurrentSwing1_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentSwing1_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:GetConstraintForce
    static readonly IntPtr GetConstraintForce_NativeFunction;
    static readonly int GetConstraintForce_ParamsSize;
    static readonly int GetConstraintForce_OutLinearForce_Offset;
    static readonly int GetConstraintForce_OutAngularForce_Offset;
    
    public void GetConstraintForce(out System.DoubleNumerics.Vector3 outLinearForce, out System.DoubleNumerics.Vector3 outAngularForce)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetConstraintForce_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetConstraintForce_NativeFunction, ParamsBuffer);
            
            outLinearForce = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetConstraintForce_OutLinearForce_Offset), 0, null);
            outAngularForce = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetConstraintForce_OutAngularForce_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:GetConstraint
    static readonly IntPtr GetConstraint_NativeFunction;
    static readonly int GetConstraint_ParamsSize;
    static readonly int GetConstraint_ReturnValue_Offset;
    
    public UnrealSharp.Engine.ConstraintInstanceAccessor GetConstraint()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetConstraint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetConstraint_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.ConstraintInstanceAccessor returnValue;
            returnValue = UnrealSharp.Engine.ConstraintInstanceAccessorMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetConstraint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:GetConstrainedComponents
    static readonly IntPtr GetConstrainedComponents_NativeFunction;
    static readonly int GetConstrainedComponents_ParamsSize;
    static readonly int GetConstrainedComponents_OutComponent1_Offset;
    static readonly int GetConstrainedComponents_OutBoneName1_Offset;
    static readonly int GetConstrainedComponents_OutComponent2_Offset;
    static readonly int GetConstrainedComponents_OutBoneName2_Offset;
    
    public void GetConstrainedComponents(out UnrealSharp.Engine.PrimitiveComponent outComponent1, out Name outBoneName1, out UnrealSharp.Engine.PrimitiveComponent outComponent2, out Name outBoneName2)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetConstrainedComponents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetConstrainedComponents_NativeFunction, ParamsBuffer);
            
            outComponent1 = ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.FromNative(IntPtr.Add(ParamsBuffer, GetConstrainedComponents_OutComponent1_Offset), 0, null);
            outBoneName1 = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetConstrainedComponents_OutBoneName1_Offset), 0, null);
            outComponent2 = ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.FromNative(IntPtr.Add(ParamsBuffer, GetConstrainedComponents_OutComponent2_Offset), 0, null);
            outBoneName2 = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetConstrainedComponents_OutBoneName2_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.PhysicsConstraintComponent:BreakConstraint
    static readonly IntPtr BreakConstraint_NativeFunction;
    
    public void BreakConstraint()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BreakConstraint_NativeFunction, IntPtr.Zero);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class PhysicsHandleComponent : UnrealSharp.Engine.ActorComponent
{
    
    static PhysicsHandleComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PhysicsHandleComponent");
        
        bSoftAngularConstraint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSoftAngularConstraint");
        bSoftAngularConstraint_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bSoftAngularConstraint");
        bSoftLinearConstraint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSoftLinearConstraint");
        bSoftLinearConstraint_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bSoftLinearConstraint");
        bInterpolateTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bInterpolateTarget");
        bInterpolateTarget_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bInterpolateTarget");
        LinearDamping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LinearDamping");
        LinearStiffness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LinearStiffness");
        AngularDamping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AngularDamping");
        AngularStiffness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AngularStiffness");
        InterpolationSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InterpolationSpeed");
        
        SetTargetRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTargetRotation");
        SetTargetRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTargetRotation_NativeFunction);
        SetTargetRotation_NewRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTargetRotation_NativeFunction, "NewRotation");
        SetTargetLocationAndRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTargetLocationAndRotation");
        SetTargetLocationAndRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTargetLocationAndRotation_NativeFunction);
        SetTargetLocationAndRotation_NewLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTargetLocationAndRotation_NativeFunction, "NewLocation");
        SetTargetLocationAndRotation_NewRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTargetLocationAndRotation_NativeFunction, "NewRotation");
        SetTargetLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTargetLocation");
        SetTargetLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTargetLocation_NativeFunction);
        SetTargetLocation_NewLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTargetLocation_NativeFunction, "NewLocation");
        SetLinearStiffness_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLinearStiffness");
        SetLinearStiffness_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLinearStiffness_NativeFunction);
        SetLinearStiffness_NewLinearStiffness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearStiffness_NativeFunction, "NewLinearStiffness");
        SetLinearDamping_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLinearDamping");
        SetLinearDamping_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLinearDamping_NativeFunction);
        SetLinearDamping_NewLinearDamping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearDamping_NativeFunction, "NewLinearDamping");
        SetInterpolationSpeed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetInterpolationSpeed");
        SetInterpolationSpeed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetInterpolationSpeed_NativeFunction);
        SetInterpolationSpeed_NewInterpolationSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInterpolationSpeed_NativeFunction, "NewInterpolationSpeed");
        SetAngularStiffness_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAngularStiffness");
        SetAngularStiffness_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAngularStiffness_NativeFunction);
        SetAngularStiffness_NewAngularStiffness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularStiffness_NativeFunction, "NewAngularStiffness");
        SetAngularDamping_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAngularDamping");
        SetAngularDamping_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAngularDamping_NativeFunction);
        SetAngularDamping_NewAngularDamping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularDamping_NativeFunction, "NewAngularDamping");
        ReleaseComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReleaseComponent");
        GrabComponentAtLocationWithRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GrabComponentAtLocationWithRotation");
        GrabComponentAtLocationWithRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GrabComponentAtLocationWithRotation_NativeFunction);
        GrabComponentAtLocationWithRotation_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GrabComponentAtLocationWithRotation_NativeFunction, "Component");
        GrabComponentAtLocationWithRotation_InBoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GrabComponentAtLocationWithRotation_NativeFunction, "InBoneName");
        GrabComponentAtLocationWithRotation_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GrabComponentAtLocationWithRotation_NativeFunction, "Location");
        GrabComponentAtLocationWithRotation_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GrabComponentAtLocationWithRotation_NativeFunction, "Rotation");
        GrabComponentAtLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GrabComponentAtLocation");
        GrabComponentAtLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GrabComponentAtLocation_NativeFunction);
        GrabComponentAtLocation_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GrabComponentAtLocation_NativeFunction, "Component");
        GrabComponentAtLocation_InBoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GrabComponentAtLocation_NativeFunction, "InBoneName");
        GrabComponentAtLocation_GrabLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GrabComponentAtLocation_NativeFunction, "GrabLocation");
        GrabComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GrabComponent");
        GrabComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GrabComponent_NativeFunction);
        GrabComponent_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GrabComponent_NativeFunction, "Component");
        GrabComponent_InBoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GrabComponent_NativeFunction, "InBoneName");
        GrabComponent_GrabLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GrabComponent_NativeFunction, "GrabLocation");
        GrabComponent_bConstrainRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GrabComponent_NativeFunction, "bConstrainRotation");
        GetTargetLocationAndRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTargetLocationAndRotation");
        GetTargetLocationAndRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTargetLocationAndRotation_NativeFunction);
        GetTargetLocationAndRotation_TargetLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTargetLocationAndRotation_NativeFunction, "TargetLocation");
        GetTargetLocationAndRotation_TargetRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTargetLocationAndRotation_NativeFunction, "TargetRotation");
        GetGrabbedComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGrabbedComponent");
        GetGrabbedComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGrabbedComponent_NativeFunction);
        GetGrabbedComponent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGrabbedComponent_NativeFunction, "ReturnValue");
        
        
    }
    
    protected PhysicsHandleComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/Engine.PhysicsHandleComponent:bSoftAngularConstraint
    static readonly int bSoftAngularConstraint_Offset;
    static readonly IntPtr bSoftAngularConstraint_NativeProperty;
    
    public bool bSoftAngularConstraint
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bSoftAngularConstraint_NativeProperty, bSoftAngularConstraint_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PhysicsHandleComponent:bSoftLinearConstraint
    static readonly int bSoftLinearConstraint_Offset;
    static readonly IntPtr bSoftLinearConstraint_NativeProperty;
    
    public bool bSoftLinearConstraint
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bSoftLinearConstraint_NativeProperty, bSoftLinearConstraint_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PhysicsHandleComponent:bInterpolateTarget
    static readonly int bInterpolateTarget_Offset;
    static readonly IntPtr bInterpolateTarget_NativeProperty;
    
    public bool bInterpolateTarget
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bInterpolateTarget_NativeProperty, bInterpolateTarget_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bInterpolateTarget_NativeProperty, bInterpolateTarget_Offset, value);
        }
    }
    
    // FloatProperty /Script/Engine.PhysicsHandleComponent:LinearDamping
    static readonly int LinearDamping_Offset;
    
    public float LinearDamping
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LinearDamping_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.PhysicsHandleComponent:LinearStiffness
    static readonly int LinearStiffness_Offset;
    
    public float LinearStiffness
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LinearStiffness_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.PhysicsHandleComponent:AngularDamping
    static readonly int AngularDamping_Offset;
    
    public float AngularDamping
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AngularDamping_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.PhysicsHandleComponent:AngularStiffness
    static readonly int AngularStiffness_Offset;
    
    public float AngularStiffness
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AngularStiffness_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.PhysicsHandleComponent:InterpolationSpeed
    static readonly int InterpolationSpeed_Offset;
    
    public float InterpolationSpeed
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, InterpolationSpeed_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.PhysicsHandleComponent:SetTargetRotation
    static readonly IntPtr SetTargetRotation_NativeFunction;
    static readonly int SetTargetRotation_ParamsSize;
    static readonly int SetTargetRotation_NewRotation_Offset;
    
    public void SetTargetRotation(UnrealSharp.Rotator newRotation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTargetRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SetTargetRotation_NewRotation_Offset), 0, null, newRotation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTargetRotation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsHandleComponent:SetTargetLocationAndRotation
    static readonly IntPtr SetTargetLocationAndRotation_NativeFunction;
    static readonly int SetTargetLocationAndRotation_ParamsSize;
    static readonly int SetTargetLocationAndRotation_NewLocation_Offset;
    static readonly int SetTargetLocationAndRotation_NewRotation_Offset;
    
    public void SetTargetLocationAndRotation(System.DoubleNumerics.Vector3 newLocation, UnrealSharp.Rotator newRotation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTargetLocationAndRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetTargetLocationAndRotation_NewLocation_Offset), 0, null, newLocation);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SetTargetLocationAndRotation_NewRotation_Offset), 0, null, newRotation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTargetLocationAndRotation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsHandleComponent:SetTargetLocation
    static readonly IntPtr SetTargetLocation_NativeFunction;
    static readonly int SetTargetLocation_ParamsSize;
    static readonly int SetTargetLocation_NewLocation_Offset;
    
    public void SetTargetLocation(System.DoubleNumerics.Vector3 newLocation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTargetLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetTargetLocation_NewLocation_Offset), 0, null, newLocation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTargetLocation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsHandleComponent:SetLinearStiffness
    static readonly IntPtr SetLinearStiffness_NativeFunction;
    static readonly int SetLinearStiffness_ParamsSize;
    static readonly int SetLinearStiffness_NewLinearStiffness_Offset;
    
    public void SetLinearStiffness(float newLinearStiffness)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLinearStiffness_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearStiffness_NewLinearStiffness_Offset), 0, null, newLinearStiffness);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLinearStiffness_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsHandleComponent:SetLinearDamping
    static readonly IntPtr SetLinearDamping_NativeFunction;
    static readonly int SetLinearDamping_ParamsSize;
    static readonly int SetLinearDamping_NewLinearDamping_Offset;
    
    public void SetLinearDamping(float newLinearDamping)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLinearDamping_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearDamping_NewLinearDamping_Offset), 0, null, newLinearDamping);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLinearDamping_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsHandleComponent:SetInterpolationSpeed
    static readonly IntPtr SetInterpolationSpeed_NativeFunction;
    static readonly int SetInterpolationSpeed_ParamsSize;
    static readonly int SetInterpolationSpeed_NewInterpolationSpeed_Offset;
    
    public void SetInterpolationSpeed(float newInterpolationSpeed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetInterpolationSpeed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetInterpolationSpeed_NewInterpolationSpeed_Offset), 0, null, newInterpolationSpeed);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetInterpolationSpeed_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsHandleComponent:SetAngularStiffness
    static readonly IntPtr SetAngularStiffness_NativeFunction;
    static readonly int SetAngularStiffness_ParamsSize;
    static readonly int SetAngularStiffness_NewAngularStiffness_Offset;
    
    public void SetAngularStiffness(float newAngularStiffness)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAngularStiffness_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAngularStiffness_NewAngularStiffness_Offset), 0, null, newAngularStiffness);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAngularStiffness_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsHandleComponent:SetAngularDamping
    static readonly IntPtr SetAngularDamping_NativeFunction;
    static readonly int SetAngularDamping_ParamsSize;
    static readonly int SetAngularDamping_NewAngularDamping_Offset;
    
    public void SetAngularDamping(float newAngularDamping)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAngularDamping_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAngularDamping_NewAngularDamping_Offset), 0, null, newAngularDamping);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAngularDamping_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsHandleComponent:ReleaseComponent
    static readonly IntPtr ReleaseComponent_NativeFunction;
    
    public void ReleaseComponent()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReleaseComponent_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.PhysicsHandleComponent:GrabComponentAtLocationWithRotation
    static readonly IntPtr GrabComponentAtLocationWithRotation_NativeFunction;
    static readonly int GrabComponentAtLocationWithRotation_ParamsSize;
    static readonly int GrabComponentAtLocationWithRotation_Component_Offset;
    static readonly int GrabComponentAtLocationWithRotation_InBoneName_Offset;
    static readonly int GrabComponentAtLocationWithRotation_Location_Offset;
    static readonly int GrabComponentAtLocationWithRotation_Rotation_Offset;
    
    public void GrabComponentAtLocationWithRotation(UnrealSharp.Engine.PrimitiveComponent component, Name inBoneName, System.DoubleNumerics.Vector3 location, UnrealSharp.Rotator rotation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GrabComponentAtLocationWithRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative(IntPtr.Add(ParamsBuffer, GrabComponentAtLocationWithRotation_Component_Offset), 0, null, component);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GrabComponentAtLocationWithRotation_InBoneName_Offset), 0, null, inBoneName);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GrabComponentAtLocationWithRotation_Location_Offset), 0, null, location);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, GrabComponentAtLocationWithRotation_Rotation_Offset), 0, null, rotation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GrabComponentAtLocationWithRotation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsHandleComponent:GrabComponentAtLocation
    static readonly IntPtr GrabComponentAtLocation_NativeFunction;
    static readonly int GrabComponentAtLocation_ParamsSize;
    static readonly int GrabComponentAtLocation_Component_Offset;
    static readonly int GrabComponentAtLocation_InBoneName_Offset;
    static readonly int GrabComponentAtLocation_GrabLocation_Offset;
    
    public void GrabComponentAtLocation(UnrealSharp.Engine.PrimitiveComponent component, Name inBoneName, System.DoubleNumerics.Vector3 grabLocation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GrabComponentAtLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative(IntPtr.Add(ParamsBuffer, GrabComponentAtLocation_Component_Offset), 0, null, component);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GrabComponentAtLocation_InBoneName_Offset), 0, null, inBoneName);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GrabComponentAtLocation_GrabLocation_Offset), 0, null, grabLocation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GrabComponentAtLocation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsHandleComponent:GrabComponent
    static readonly IntPtr GrabComponent_NativeFunction;
    static readonly int GrabComponent_ParamsSize;
    static readonly int GrabComponent_Component_Offset;
    static readonly int GrabComponent_InBoneName_Offset;
    static readonly int GrabComponent_GrabLocation_Offset;
    static readonly int GrabComponent_bConstrainRotation_Offset;
    
    [Obsolete("Please use GrabComponentAtLocation or GrabComponentAtLocationWithRotation")]
    public void GrabComponent(UnrealSharp.Engine.PrimitiveComponent component, Name inBoneName, System.DoubleNumerics.Vector3 grabLocation, bool bConstrainRotation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GrabComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative(IntPtr.Add(ParamsBuffer, GrabComponent_Component_Offset), 0, null, component);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GrabComponent_InBoneName_Offset), 0, null, inBoneName);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GrabComponent_GrabLocation_Offset), 0, null, grabLocation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GrabComponent_bConstrainRotation_Offset), 0, null, bConstrainRotation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GrabComponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PhysicsHandleComponent:GetTargetLocationAndRotation
    static readonly IntPtr GetTargetLocationAndRotation_NativeFunction;
    static readonly int GetTargetLocationAndRotation_ParamsSize;
    static readonly int GetTargetLocationAndRotation_TargetLocation_Offset;
    static readonly int GetTargetLocationAndRotation_TargetRotation_Offset;
    
    public void GetTargetLocationAndRotation(out System.DoubleNumerics.Vector3 targetLocation, out UnrealSharp.Rotator targetRotation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTargetLocationAndRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTargetLocationAndRotation_NativeFunction, ParamsBuffer);
            
            targetLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetTargetLocationAndRotation_TargetLocation_Offset), 0, null);
            targetRotation = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetTargetLocationAndRotation_TargetRotation_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.PhysicsHandleComponent:GetGrabbedComponent
    static readonly IntPtr GetGrabbedComponent_NativeFunction;
    static readonly int GetGrabbedComponent_ParamsSize;
    static readonly int GetGrabbedComponent_ReturnValue_Offset;
    
    public UnrealSharp.Engine.PrimitiveComponent GetGrabbedComponent()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGrabbedComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetGrabbedComponent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PrimitiveComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.FromNative(IntPtr.Add(ParamsBuffer, GetGrabbedComponent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class PhysicsObjectBlueprintLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static PhysicsObjectBlueprintLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PhysicsObjectBlueprintLibrary");
        
        
        GetPhysicsObjectWorldTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPhysicsObjectWorldTransform");
        GetPhysicsObjectWorldTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPhysicsObjectWorldTransform_NativeFunction);
        GetPhysicsObjectWorldTransform_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhysicsObjectWorldTransform_NativeFunction, "Component");
        GetPhysicsObjectWorldTransform_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhysicsObjectWorldTransform_NativeFunction, "BoneName");
        GetPhysicsObjectWorldTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhysicsObjectWorldTransform_NativeFunction, "ReturnValue");
        GetClosestPhysicsObjectFromWorldLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetClosestPhysicsObjectFromWorldLocation");
        GetClosestPhysicsObjectFromWorldLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetClosestPhysicsObjectFromWorldLocation_NativeFunction);
        GetClosestPhysicsObjectFromWorldLocation_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClosestPhysicsObjectFromWorldLocation_NativeFunction, "Component");
        GetClosestPhysicsObjectFromWorldLocation_WorldLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClosestPhysicsObjectFromWorldLocation_NativeFunction, "WorldLocation");
        GetClosestPhysicsObjectFromWorldLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClosestPhysicsObjectFromWorldLocation_NativeFunction, "ReturnValue");
        ExtractClosestPhysicsObjectResults_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ExtractClosestPhysicsObjectResults");
        ExtractClosestPhysicsObjectResults_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ExtractClosestPhysicsObjectResults_NativeFunction);
        ExtractClosestPhysicsObjectResults_Result_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExtractClosestPhysicsObjectResults_NativeFunction, "Result");
        ExtractClosestPhysicsObjectResults_OutName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExtractClosestPhysicsObjectResults_NativeFunction, "OutName");
        ExtractClosestPhysicsObjectResults_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExtractClosestPhysicsObjectResults_NativeFunction, "ReturnValue");
        ApplyRadialImpulse_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ApplyRadialImpulse");
        ApplyRadialImpulse_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ApplyRadialImpulse_NativeFunction);
        ApplyRadialImpulse_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialImpulse_NativeFunction, "Component");
        ApplyRadialImpulse_Origin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialImpulse_NativeFunction, "Origin");
        ApplyRadialImpulse_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialImpulse_NativeFunction, "Radius");
        ApplyRadialImpulse_Strength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialImpulse_NativeFunction, "Strength");
        ApplyRadialImpulse_Falloff_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialImpulse_NativeFunction, "Falloff");
        ApplyRadialImpulse_bApplyStrain_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialImpulse_NativeFunction, "bApplyStrain");
        
        
    }
    
    protected PhysicsObjectBlueprintLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.PhysicsObjectBlueprintLibrary:GetPhysicsObjectWorldTransform
    static readonly IntPtr GetPhysicsObjectWorldTransform_NativeFunction;
    static readonly int GetPhysicsObjectWorldTransform_ParamsSize;
    static readonly int GetPhysicsObjectWorldTransform_Component_Offset;
    static readonly int GetPhysicsObjectWorldTransform_BoneName_Offset;
    static readonly int GetPhysicsObjectWorldTransform_ReturnValue_Offset;
    
    public static UnrealSharp.Transform GetPhysicsObjectWorldTransform(UnrealSharp.Engine.PrimitiveComponent component, Name boneName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPhysicsObjectWorldTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative(IntPtr.Add(ParamsBuffer, GetPhysicsObjectWorldTransform_Component_Offset), 0, null, component);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetPhysicsObjectWorldTransform_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPhysicsObjectWorldTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetPhysicsObjectWorldTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PhysicsObjectBlueprintLibrary:GetClosestPhysicsObjectFromWorldLocation
    static readonly IntPtr GetClosestPhysicsObjectFromWorldLocation_NativeFunction;
    static readonly int GetClosestPhysicsObjectFromWorldLocation_ParamsSize;
    static readonly int GetClosestPhysicsObjectFromWorldLocation_Component_Offset;
    static readonly int GetClosestPhysicsObjectFromWorldLocation_WorldLocation_Offset;
    static readonly int GetClosestPhysicsObjectFromWorldLocation_ReturnValue_Offset;
    
    public static UnrealSharp.Chaos.ClosestPhysicsObjectResult GetClosestPhysicsObjectFromWorldLocation(UnrealSharp.Engine.PrimitiveComponent component, System.DoubleNumerics.Vector3 worldLocation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetClosestPhysicsObjectFromWorldLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative(IntPtr.Add(ParamsBuffer, GetClosestPhysicsObjectFromWorldLocation_Component_Offset), 0, null, component);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetClosestPhysicsObjectFromWorldLocation_WorldLocation_Offset), 0, null, worldLocation);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetClosestPhysicsObjectFromWorldLocation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Chaos.ClosestPhysicsObjectResult returnValue;
            returnValue = UnrealSharp.Chaos.ClosestPhysicsObjectResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetClosestPhysicsObjectFromWorldLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PhysicsObjectBlueprintLibrary:ExtractClosestPhysicsObjectResults
    static readonly IntPtr ExtractClosestPhysicsObjectResults_NativeFunction;
    static readonly int ExtractClosestPhysicsObjectResults_ParamsSize;
    static readonly int ExtractClosestPhysicsObjectResults_Result_Offset;
    static readonly int ExtractClosestPhysicsObjectResults_OutName_Offset;
    static readonly int ExtractClosestPhysicsObjectResults_ReturnValue_Offset;
    
    public static bool ExtractClosestPhysicsObjectResults(UnrealSharp.Chaos.ClosestPhysicsObjectResult result, out Name outName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ExtractClosestPhysicsObjectResults_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Chaos.ClosestPhysicsObjectResultMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ExtractClosestPhysicsObjectResults_Result_Offset), 0, null, result);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ExtractClosestPhysicsObjectResults_NativeFunction, ParamsBuffer);
            
            outName = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, ExtractClosestPhysicsObjectResults_OutName_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ExtractClosestPhysicsObjectResults_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PhysicsObjectBlueprintLibrary:ApplyRadialImpulse
    static readonly IntPtr ApplyRadialImpulse_NativeFunction;
    static readonly int ApplyRadialImpulse_ParamsSize;
    static readonly int ApplyRadialImpulse_Component_Offset;
    static readonly int ApplyRadialImpulse_Origin_Offset;
    static readonly int ApplyRadialImpulse_Radius_Offset;
    static readonly int ApplyRadialImpulse_Strength_Offset;
    static readonly int ApplyRadialImpulse_Falloff_Offset;
    static readonly int ApplyRadialImpulse_bApplyStrain_Offset;
    
    public static void ApplyRadialImpulse(UnrealSharp.Engine.PrimitiveComponent component, System.DoubleNumerics.Vector3 origin, float radius, float strength, UnrealSharp.PhysicsCore.ERadialImpulseFalloff falloff, bool bApplyStrain)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ApplyRadialImpulse_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialImpulse_Component_Offset), 0, null, component);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialImpulse_Origin_Offset), 0, null, origin);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialImpulse_Radius_Offset), 0, null, radius);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialImpulse_Strength_Offset), 0, null, strength);
            BlittableMarshaller<UnrealSharp.PhysicsCore.ERadialImpulseFalloff>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialImpulse_Falloff_Offset), 0, null, falloff);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialImpulse_bApplyStrain_Offset), 0, null, bApplyStrain);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ApplyRadialImpulse_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
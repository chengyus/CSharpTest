// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class PhysicsVolume : UnrealSharp.Engine.Volume
{
    
    static PhysicsVolume()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PhysicsVolume");
        
        TerminalVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TerminalVelocity");
        Priority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Priority");
        FluidFriction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FluidFriction");
        bWaterVolume_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bWaterVolume");
        bWaterVolume_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bWaterVolume");
        bPhysicsOnContact_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bPhysicsOnContact");
        bPhysicsOnContact_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bPhysicsOnContact");
        
        
        
    }
    
    protected PhysicsVolume(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Engine.PhysicsVolume:TerminalVelocity
    static readonly int TerminalVelocity_Offset;
    
    public float TerminalVelocity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, TerminalVelocity_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, TerminalVelocity_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.PhysicsVolume:Priority
    static readonly int Priority_Offset;
    
    public int Priority
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, Priority_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, Priority_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.PhysicsVolume:FluidFriction
    static readonly int FluidFriction_Offset;
    
    public float FluidFriction
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, FluidFriction_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, FluidFriction_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.PhysicsVolume:bWaterVolume
    static readonly int bWaterVolume_Offset;
    static readonly IntPtr bWaterVolume_NativeProperty;
    
    public bool bWaterVolume
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bWaterVolume_NativeProperty, bWaterVolume_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bWaterVolume_NativeProperty, bWaterVolume_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PhysicsVolume:bPhysicsOnContact
    static readonly int bPhysicsOnContact_Offset;
    static readonly IntPtr bPhysicsOnContact_NativeProperty;
    
    public bool bPhysicsOnContact
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bPhysicsOnContact_NativeProperty, bPhysicsOnContact_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bPhysicsOnContact_NativeProperty, bPhysicsOnContact_Offset, value);
        }
    }
    
    
}
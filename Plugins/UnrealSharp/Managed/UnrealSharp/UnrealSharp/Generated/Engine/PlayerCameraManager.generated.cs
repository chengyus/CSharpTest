// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class PlayerCameraManager : UnrealSharp.Engine.Actor
{
    
    static PlayerCameraManager()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PlayerCameraManager");
        
        TransformComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TransformComponent");
        DefaultFOV_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultFOV");
        DefaultOrthoWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultOrthoWidth");
        DefaultAspectRatio_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultAspectRatio");
        DefaultModifiers_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultModifiers");
        DefaultModifiers_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "DefaultModifiers");
        FreeCamDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FreeCamDistance");
        FreeCamOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FreeCamOffset");
        ViewTargetOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ViewTargetOffset");
        bIsOrthographic_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsOrthographic");
        bIsOrthographic_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIsOrthographic");
        bDefaultConstrainAspectRatio_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bDefaultConstrainAspectRatio");
        bDefaultConstrainAspectRatio_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bDefaultConstrainAspectRatio");
        bClientSimulatingViewTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bClientSimulatingViewTarget");
        bClientSimulatingViewTarget_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bClientSimulatingViewTarget");
        bUseClientSideCameraUpdates_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseClientSideCameraUpdates");
        bUseClientSideCameraUpdates_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseClientSideCameraUpdates");
        bGameCameraCutThisFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bGameCameraCutThisFrame");
        bGameCameraCutThisFrame_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bGameCameraCutThisFrame");
        ViewPitchMin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ViewPitchMin");
        ViewPitchMax_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ViewPitchMax");
        ViewYawMin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ViewYawMin");
        ViewYawMax_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ViewYawMax");
        ViewRollMin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ViewRollMin");
        ViewRollMax_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ViewRollMax");
        
        StopCameraShake_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopCameraShake");
        StopCameraShake_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StopCameraShake_NativeFunction);
        StopCameraShake_ShakeInstance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopCameraShake_NativeFunction, "ShakeInstance");
        StopCameraShake_bImmediately_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopCameraShake_NativeFunction, "bImmediately");
        StopCameraFade_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopCameraFade");
        StopAllInstancesOfCameraShakeFromSource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopAllInstancesOfCameraShakeFromSource");
        StopAllInstancesOfCameraShakeFromSource_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StopAllInstancesOfCameraShakeFromSource_NativeFunction);
        StopAllInstancesOfCameraShakeFromSource_Shake_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopAllInstancesOfCameraShakeFromSource_NativeFunction, "Shake");
        StopAllInstancesOfCameraShakeFromSource_SourceComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopAllInstancesOfCameraShakeFromSource_NativeFunction, "SourceComponent");
        StopAllInstancesOfCameraShakeFromSource_bImmediately_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopAllInstancesOfCameraShakeFromSource_NativeFunction, "bImmediately");
        StopAllInstancesOfCameraShake_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopAllInstancesOfCameraShake");
        StopAllInstancesOfCameraShake_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StopAllInstancesOfCameraShake_NativeFunction);
        StopAllInstancesOfCameraShake_Shake_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopAllInstancesOfCameraShake_NativeFunction, "Shake");
        StopAllInstancesOfCameraShake_bImmediately_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopAllInstancesOfCameraShake_NativeFunction, "bImmediately");
        StopAllCameraShakesFromSource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopAllCameraShakesFromSource");
        StopAllCameraShakesFromSource_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StopAllCameraShakesFromSource_NativeFunction);
        StopAllCameraShakesFromSource_SourceComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopAllCameraShakesFromSource_NativeFunction, "SourceComponent");
        StopAllCameraShakesFromSource_bImmediately_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopAllCameraShakesFromSource_NativeFunction, "bImmediately");
        StopAllCameraShakes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopAllCameraShakes");
        StopAllCameraShakes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StopAllCameraShakes_NativeFunction);
        StopAllCameraShakes_bImmediately_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopAllCameraShakes_NativeFunction, "bImmediately");
        StartCameraShakeFromSource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartCameraShakeFromSource");
        StartCameraShakeFromSource_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StartCameraShakeFromSource_NativeFunction);
        StartCameraShakeFromSource_ShakeClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartCameraShakeFromSource_NativeFunction, "ShakeClass");
        StartCameraShakeFromSource_SourceComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartCameraShakeFromSource_NativeFunction, "SourceComponent");
        StartCameraShakeFromSource_Scale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartCameraShakeFromSource_NativeFunction, "Scale");
        StartCameraShakeFromSource_PlaySpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartCameraShakeFromSource_NativeFunction, "PlaySpace");
        StartCameraShakeFromSource_UserPlaySpaceRot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartCameraShakeFromSource_NativeFunction, "UserPlaySpaceRot");
        StartCameraShakeFromSource_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartCameraShakeFromSource_NativeFunction, "ReturnValue");
        StartCameraShake_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartCameraShake");
        StartCameraShake_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StartCameraShake_NativeFunction);
        StartCameraShake_ShakeClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartCameraShake_NativeFunction, "ShakeClass");
        StartCameraShake_Scale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartCameraShake_NativeFunction, "Scale");
        StartCameraShake_PlaySpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartCameraShake_NativeFunction, "PlaySpace");
        StartCameraShake_UserPlaySpaceRot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartCameraShake_NativeFunction, "UserPlaySpaceRot");
        StartCameraShake_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartCameraShake_NativeFunction, "ReturnValue");
        StartCameraFade_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartCameraFade");
        StartCameraFade_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StartCameraFade_NativeFunction);
        StartCameraFade_FromAlpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartCameraFade_NativeFunction, "FromAlpha");
        StartCameraFade_ToAlpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartCameraFade_NativeFunction, "ToAlpha");
        StartCameraFade_Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartCameraFade_NativeFunction, "Duration");
        StartCameraFade_Color_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartCameraFade_NativeFunction, "Color");
        StartCameraFade_bShouldFadeAudio_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartCameraFade_NativeFunction, "bShouldFadeAudio");
        StartCameraFade_bHoldWhenFinished_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartCameraFade_NativeFunction, "bHoldWhenFinished");
        SetManualCameraFade_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetManualCameraFade");
        SetManualCameraFade_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetManualCameraFade_NativeFunction);
        SetManualCameraFade_InFadeAmount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetManualCameraFade_NativeFunction, "InFadeAmount");
        SetManualCameraFade_Color_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetManualCameraFade_NativeFunction, "Color");
        SetManualCameraFade_bInFadeAudio_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetManualCameraFade_NativeFunction, "bInFadeAudio");
        SetGameCameraCutThisFrame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGameCameraCutThisFrame");
        RemoveCameraModifier_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveCameraModifier");
        RemoveCameraModifier_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveCameraModifier_NativeFunction);
        RemoveCameraModifier_ModifierToRemove_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveCameraModifier_NativeFunction, "ModifierToRemove");
        RemoveCameraModifier_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveCameraModifier_NativeFunction, "ReturnValue");
        GetOwningPlayerController_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOwningPlayerController");
        GetOwningPlayerController_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOwningPlayerController_NativeFunction);
        GetOwningPlayerController_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOwningPlayerController_NativeFunction, "ReturnValue");
        GetFOVAngle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFOVAngle");
        GetFOVAngle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFOVAngle_NativeFunction);
        GetFOVAngle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFOVAngle_NativeFunction, "ReturnValue");
        GetCameraRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCameraRotation");
        GetCameraRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCameraRotation_NativeFunction);
        GetCameraRotation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCameraRotation_NativeFunction, "ReturnValue");
        GetCameraLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCameraLocation");
        GetCameraLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCameraLocation_NativeFunction);
        GetCameraLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCameraLocation_NativeFunction, "ReturnValue");
        FindCameraModifierByClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindCameraModifierByClass");
        FindCameraModifierByClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindCameraModifierByClass_NativeFunction);
        FindCameraModifierByClass_ModifierClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindCameraModifierByClass_NativeFunction, "ModifierClass");
        FindCameraModifierByClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindCameraModifierByClass_NativeFunction, "ReturnValue");
        ClearCameraLensEffects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearCameraLensEffects");
        AddNewCameraModifier_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddNewCameraModifier");
        AddNewCameraModifier_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddNewCameraModifier_NativeFunction);
        AddNewCameraModifier_ModifierClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddNewCameraModifier_NativeFunction, "ModifierClass");
        AddNewCameraModifier_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddNewCameraModifier_NativeFunction, "ReturnValue");
        
        IntPtr PhotographyCameraModify_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PhotographyCameraModify");
        PhotographyCameraModify_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PhotographyCameraModify_NativeFunction);
        PhotographyCameraModify_NewCameraLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PhotographyCameraModify_NativeFunction, "NewCameraLocation");
        PhotographyCameraModify_PreviousCameraLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PhotographyCameraModify_NativeFunction, "PreviousCameraLocation");
        PhotographyCameraModify_OriginalCameraLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PhotographyCameraModify_NativeFunction, "OriginalCameraLocation");
        PhotographyCameraModify_ResultCameraLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PhotographyCameraModify_NativeFunction, "ResultCameraLocation");
        
        IntPtr BlueprintUpdateCamera_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BlueprintUpdateCamera");
        BlueprintUpdateCamera_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BlueprintUpdateCamera_NativeFunction);
        BlueprintUpdateCamera_CameraTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintUpdateCamera_NativeFunction, "CameraTarget");
        BlueprintUpdateCamera_NewCameraLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintUpdateCamera_NativeFunction, "NewCameraLocation");
        BlueprintUpdateCamera_NewCameraRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintUpdateCamera_NativeFunction, "NewCameraRotation");
        BlueprintUpdateCamera_NewCameraFOV_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintUpdateCamera_NativeFunction, "NewCameraFOV");
        BlueprintUpdateCamera_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BlueprintUpdateCamera_NativeFunction, "ReturnValue");
        
        
    }
    
    protected PlayerCameraManager(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Engine.PlayerCameraManager:TransformComponent
    static readonly int TransformComponent_Offset;
    
    public UnrealSharp.Engine.SceneComponent TransformComponent
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.FromNative(IntPtr.Add(NativeObject, TransformComponent_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.PlayerCameraManager:DefaultFOV
    static readonly int DefaultFOV_Offset;
    
    public float DefaultFOV
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, DefaultFOV_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, DefaultFOV_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.PlayerCameraManager:DefaultOrthoWidth
    static readonly int DefaultOrthoWidth_Offset;
    
    public float DefaultOrthoWidth
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, DefaultOrthoWidth_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, DefaultOrthoWidth_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.PlayerCameraManager:DefaultAspectRatio
    static readonly int DefaultAspectRatio_Offset;
    
    public float DefaultAspectRatio
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, DefaultAspectRatio_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, DefaultAspectRatio_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/Engine.PlayerCameraManager:DefaultModifiers
    static readonly int DefaultModifiers_Offset;
    static readonly IntPtr DefaultModifiers_NativeProperty;
    UnrealArrayReadOnlyMarshaler<SubclassOf<UnrealSharp.Engine.CameraModifier>> DefaultModifiers_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<SubclassOf<UnrealSharp.Engine.CameraModifier>> DefaultModifiers
    {
        get
        {
            if(DefaultModifiers_Wrapper == null)
            {
                DefaultModifiers_Wrapper = new UnrealArrayReadOnlyMarshaler<SubclassOf<UnrealSharp.Engine.CameraModifier>>(1, DefaultModifiers_NativeProperty, SubclassOfMarshaller<UnrealSharp.Engine.CameraModifier>.ToNative, SubclassOfMarshaller<UnrealSharp.Engine.CameraModifier>.FromNative);
            }
            
            return DefaultModifiers_Wrapper.FromNative(IntPtr.Add(NativeObject,DefaultModifiers_Offset),0,this);
        }
    }
    
    // FloatProperty /Script/Engine.PlayerCameraManager:FreeCamDistance
    static readonly int FreeCamDistance_Offset;
    
    public float FreeCamDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, FreeCamDistance_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, FreeCamDistance_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.PlayerCameraManager:FreeCamOffset
    static readonly int FreeCamOffset_Offset;
    
    public System.DoubleNumerics.Vector3 FreeCamOffset
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, FreeCamOffset_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, FreeCamOffset_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.PlayerCameraManager:ViewTargetOffset
    static readonly int ViewTargetOffset_Offset;
    
    public System.DoubleNumerics.Vector3 ViewTargetOffset
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, ViewTargetOffset_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, ViewTargetOffset_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.PlayerCameraManager:bIsOrthographic
    static readonly int bIsOrthographic_Offset;
    static readonly IntPtr bIsOrthographic_NativeProperty;
    
    public bool bIsOrthographic
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIsOrthographic_NativeProperty, bIsOrthographic_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bIsOrthographic_NativeProperty, bIsOrthographic_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PlayerCameraManager:bDefaultConstrainAspectRatio
    static readonly int bDefaultConstrainAspectRatio_Offset;
    static readonly IntPtr bDefaultConstrainAspectRatio_NativeProperty;
    
    public bool bDefaultConstrainAspectRatio
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bDefaultConstrainAspectRatio_NativeProperty, bDefaultConstrainAspectRatio_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bDefaultConstrainAspectRatio_NativeProperty, bDefaultConstrainAspectRatio_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PlayerCameraManager:bClientSimulatingViewTarget
    static readonly int bClientSimulatingViewTarget_Offset;
    static readonly IntPtr bClientSimulatingViewTarget_NativeProperty;
    
    public bool bClientSimulatingViewTarget
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bClientSimulatingViewTarget_NativeProperty, bClientSimulatingViewTarget_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bClientSimulatingViewTarget_NativeProperty, bClientSimulatingViewTarget_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PlayerCameraManager:bUseClientSideCameraUpdates
    static readonly int bUseClientSideCameraUpdates_Offset;
    static readonly IntPtr bUseClientSideCameraUpdates_NativeProperty;
    
    public bool bUseClientSideCameraUpdates
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseClientSideCameraUpdates_NativeProperty, bUseClientSideCameraUpdates_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PlayerCameraManager:bGameCameraCutThisFrame
    static readonly int bGameCameraCutThisFrame_Offset;
    static readonly IntPtr bGameCameraCutThisFrame_NativeProperty;
    
    public bool bGameCameraCutThisFrame
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bGameCameraCutThisFrame_NativeProperty, bGameCameraCutThisFrame_Offset);
        }
    }
    
    // FloatProperty /Script/Engine.PlayerCameraManager:ViewPitchMin
    static readonly int ViewPitchMin_Offset;
    
    public float ViewPitchMin
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ViewPitchMin_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ViewPitchMin_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.PlayerCameraManager:ViewPitchMax
    static readonly int ViewPitchMax_Offset;
    
    public float ViewPitchMax
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ViewPitchMax_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ViewPitchMax_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.PlayerCameraManager:ViewYawMin
    static readonly int ViewYawMin_Offset;
    
    public float ViewYawMin
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ViewYawMin_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ViewYawMin_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.PlayerCameraManager:ViewYawMax
    static readonly int ViewYawMax_Offset;
    
    public float ViewYawMax
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ViewYawMax_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ViewYawMax_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.PlayerCameraManager:ViewRollMin
    static readonly int ViewRollMin_Offset;
    
    public float ViewRollMin
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ViewRollMin_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ViewRollMin_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.PlayerCameraManager:ViewRollMax
    static readonly int ViewRollMax_Offset;
    
    public float ViewRollMax
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ViewRollMax_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ViewRollMax_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:StopCameraShake
    static readonly IntPtr StopCameraShake_NativeFunction;
    static readonly int StopCameraShake_ParamsSize;
    static readonly int StopCameraShake_ShakeInstance_Offset;
    static readonly int StopCameraShake_bImmediately_Offset;
    
    public void StopCameraShake(UnrealSharp.Engine.CameraShakeBase shakeInstance, bool bImmediately = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StopCameraShake_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.CameraShakeBase>.ToNative(IntPtr.Add(ParamsBuffer, StopCameraShake_ShakeInstance_Offset), 0, null, shakeInstance);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, StopCameraShake_bImmediately_Offset), 0, null, bImmediately);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopCameraShake_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:StopCameraFade
    static readonly IntPtr StopCameraFade_NativeFunction;
    
    public void StopCameraFade()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopCameraFade_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:StopAllInstancesOfCameraShakeFromSource
    static readonly IntPtr StopAllInstancesOfCameraShakeFromSource_NativeFunction;
    static readonly int StopAllInstancesOfCameraShakeFromSource_ParamsSize;
    static readonly int StopAllInstancesOfCameraShakeFromSource_Shake_Offset;
    static readonly int StopAllInstancesOfCameraShakeFromSource_SourceComponent_Offset;
    static readonly int StopAllInstancesOfCameraShakeFromSource_bImmediately_Offset;
    
    public void StopAllInstancesOfCameraShakeFromSource(SubclassOf<UnrealSharp.Engine.CameraShakeBase> shake, UnrealSharp.Engine.CameraShakeSourceComponent sourceComponent, bool bImmediately = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StopAllInstancesOfCameraShakeFromSource_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.CameraShakeBase>.ToNative(IntPtr.Add(ParamsBuffer, StopAllInstancesOfCameraShakeFromSource_Shake_Offset), 0, null, shake);
            ObjectMarshaller<UnrealSharp.Engine.CameraShakeSourceComponent>.ToNative(IntPtr.Add(ParamsBuffer, StopAllInstancesOfCameraShakeFromSource_SourceComponent_Offset), 0, null, sourceComponent);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, StopAllInstancesOfCameraShakeFromSource_bImmediately_Offset), 0, null, bImmediately);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopAllInstancesOfCameraShakeFromSource_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:StopAllInstancesOfCameraShake
    static readonly IntPtr StopAllInstancesOfCameraShake_NativeFunction;
    static readonly int StopAllInstancesOfCameraShake_ParamsSize;
    static readonly int StopAllInstancesOfCameraShake_Shake_Offset;
    static readonly int StopAllInstancesOfCameraShake_bImmediately_Offset;
    
    public void StopAllInstancesOfCameraShake(SubclassOf<UnrealSharp.Engine.CameraShakeBase> shake, bool bImmediately = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StopAllInstancesOfCameraShake_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.CameraShakeBase>.ToNative(IntPtr.Add(ParamsBuffer, StopAllInstancesOfCameraShake_Shake_Offset), 0, null, shake);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, StopAllInstancesOfCameraShake_bImmediately_Offset), 0, null, bImmediately);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopAllInstancesOfCameraShake_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:StopAllCameraShakesFromSource
    static readonly IntPtr StopAllCameraShakesFromSource_NativeFunction;
    static readonly int StopAllCameraShakesFromSource_ParamsSize;
    static readonly int StopAllCameraShakesFromSource_SourceComponent_Offset;
    static readonly int StopAllCameraShakesFromSource_bImmediately_Offset;
    
    public void StopAllCameraShakesFromSource(UnrealSharp.Engine.CameraShakeSourceComponent sourceComponent, bool bImmediately = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StopAllCameraShakesFromSource_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.CameraShakeSourceComponent>.ToNative(IntPtr.Add(ParamsBuffer, StopAllCameraShakesFromSource_SourceComponent_Offset), 0, null, sourceComponent);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, StopAllCameraShakesFromSource_bImmediately_Offset), 0, null, bImmediately);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopAllCameraShakesFromSource_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:StopAllCameraShakes
    static readonly IntPtr StopAllCameraShakes_NativeFunction;
    static readonly int StopAllCameraShakes_ParamsSize;
    static readonly int StopAllCameraShakes_bImmediately_Offset;
    
    public void StopAllCameraShakes(bool bImmediately = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StopAllCameraShakes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, StopAllCameraShakes_bImmediately_Offset), 0, null, bImmediately);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopAllCameraShakes_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:StartCameraShakeFromSource
    static readonly IntPtr StartCameraShakeFromSource_NativeFunction;
    static readonly int StartCameraShakeFromSource_ParamsSize;
    static readonly int StartCameraShakeFromSource_ShakeClass_Offset;
    static readonly int StartCameraShakeFromSource_SourceComponent_Offset;
    static readonly int StartCameraShakeFromSource_Scale_Offset;
    static readonly int StartCameraShakeFromSource_PlaySpace_Offset;
    static readonly int StartCameraShakeFromSource_UserPlaySpaceRot_Offset;
    static readonly int StartCameraShakeFromSource_ReturnValue_Offset;
    
    public UnrealSharp.Engine.CameraShakeBase StartCameraShakeFromSource(SubclassOf<UnrealSharp.Engine.CameraShakeBase> shakeClass, UnrealSharp.Engine.CameraShakeSourceComponent sourceComponent, float scale = 1.000000f, UnrealSharp.Engine.ECameraShakePlaySpace playSpace = UnrealSharp.Engine.ECameraShakePlaySpace.CameraLocal, UnrealSharp.Rotator userPlaySpaceRot = default(UnrealSharp.Rotator))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StartCameraShakeFromSource_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.CameraShakeBase>.ToNative(IntPtr.Add(ParamsBuffer, StartCameraShakeFromSource_ShakeClass_Offset), 0, null, shakeClass);
            ObjectMarshaller<UnrealSharp.Engine.CameraShakeSourceComponent>.ToNative(IntPtr.Add(ParamsBuffer, StartCameraShakeFromSource_SourceComponent_Offset), 0, null, sourceComponent);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, StartCameraShakeFromSource_Scale_Offset), 0, null, scale);
            BlittableMarshaller<UnrealSharp.Engine.ECameraShakePlaySpace>.ToNative(IntPtr.Add(ParamsBuffer, StartCameraShakeFromSource_PlaySpace_Offset), 0, null, playSpace);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, StartCameraShakeFromSource_UserPlaySpaceRot_Offset), 0, null, userPlaySpaceRot);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StartCameraShakeFromSource_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.CameraShakeBase returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.CameraShakeBase>.FromNative(IntPtr.Add(ParamsBuffer, StartCameraShakeFromSource_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:StartCameraShake
    static readonly IntPtr StartCameraShake_NativeFunction;
    static readonly int StartCameraShake_ParamsSize;
    static readonly int StartCameraShake_ShakeClass_Offset;
    static readonly int StartCameraShake_Scale_Offset;
    static readonly int StartCameraShake_PlaySpace_Offset;
    static readonly int StartCameraShake_UserPlaySpaceRot_Offset;
    static readonly int StartCameraShake_ReturnValue_Offset;
    
    public UnrealSharp.Engine.CameraShakeBase StartCameraShake(SubclassOf<UnrealSharp.Engine.CameraShakeBase> shakeClass, float scale = 1.000000f, UnrealSharp.Engine.ECameraShakePlaySpace playSpace = UnrealSharp.Engine.ECameraShakePlaySpace.CameraLocal, UnrealSharp.Rotator userPlaySpaceRot = default(UnrealSharp.Rotator))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StartCameraShake_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.CameraShakeBase>.ToNative(IntPtr.Add(ParamsBuffer, StartCameraShake_ShakeClass_Offset), 0, null, shakeClass);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, StartCameraShake_Scale_Offset), 0, null, scale);
            BlittableMarshaller<UnrealSharp.Engine.ECameraShakePlaySpace>.ToNative(IntPtr.Add(ParamsBuffer, StartCameraShake_PlaySpace_Offset), 0, null, playSpace);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, StartCameraShake_UserPlaySpaceRot_Offset), 0, null, userPlaySpaceRot);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StartCameraShake_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.CameraShakeBase returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.CameraShakeBase>.FromNative(IntPtr.Add(ParamsBuffer, StartCameraShake_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:StartCameraFade
    static readonly IntPtr StartCameraFade_NativeFunction;
    static readonly int StartCameraFade_ParamsSize;
    static readonly int StartCameraFade_FromAlpha_Offset;
    static readonly int StartCameraFade_ToAlpha_Offset;
    static readonly int StartCameraFade_Duration_Offset;
    static readonly int StartCameraFade_Color_Offset;
    static readonly int StartCameraFade_bShouldFadeAudio_Offset;
    static readonly int StartCameraFade_bHoldWhenFinished_Offset;
    
    public void StartCameraFade(float fromAlpha, float toAlpha, float duration, UnrealSharp.CoreUObject.LinearColor color, bool bShouldFadeAudio = false, bool bHoldWhenFinished = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StartCameraFade_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, StartCameraFade_FromAlpha_Offset), 0, null, fromAlpha);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, StartCameraFade_ToAlpha_Offset), 0, null, toAlpha);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, StartCameraFade_Duration_Offset), 0, null, duration);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, StartCameraFade_Color_Offset), 0, null, color);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, StartCameraFade_bShouldFadeAudio_Offset), 0, null, bShouldFadeAudio);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, StartCameraFade_bHoldWhenFinished_Offset), 0, null, bHoldWhenFinished);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StartCameraFade_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:SetManualCameraFade
    static readonly IntPtr SetManualCameraFade_NativeFunction;
    static readonly int SetManualCameraFade_ParamsSize;
    static readonly int SetManualCameraFade_InFadeAmount_Offset;
    static readonly int SetManualCameraFade_Color_Offset;
    static readonly int SetManualCameraFade_bInFadeAudio_Offset;
    
    public void SetManualCameraFade(float inFadeAmount, UnrealSharp.CoreUObject.LinearColor color, bool bInFadeAudio)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetManualCameraFade_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetManualCameraFade_InFadeAmount_Offset), 0, null, inFadeAmount);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetManualCameraFade_Color_Offset), 0, null, color);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetManualCameraFade_bInFadeAudio_Offset), 0, null, bInFadeAudio);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetManualCameraFade_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:SetGameCameraCutThisFrame
    static readonly IntPtr SetGameCameraCutThisFrame_NativeFunction;
    
    public void SetGameCameraCutThisFrame()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetGameCameraCutThisFrame_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:RemoveCameraModifier
    static readonly IntPtr RemoveCameraModifier_NativeFunction;
    static readonly int RemoveCameraModifier_ParamsSize;
    static readonly int RemoveCameraModifier_ModifierToRemove_Offset;
    static readonly int RemoveCameraModifier_ReturnValue_Offset;
    
    public bool RemoveCameraModifier(UnrealSharp.Engine.CameraModifier modifierToRemove)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveCameraModifier_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.CameraModifier>.ToNative(IntPtr.Add(ParamsBuffer, RemoveCameraModifier_ModifierToRemove_Offset), 0, null, modifierToRemove);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveCameraModifier_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RemoveCameraModifier_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:GetOwningPlayerController
    static readonly IntPtr GetOwningPlayerController_NativeFunction;
    static readonly int GetOwningPlayerController_ParamsSize;
    static readonly int GetOwningPlayerController_ReturnValue_Offset;
    
    public UnrealSharp.Engine.PlayerController GetOwningPlayerController()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOwningPlayerController_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOwningPlayerController_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PlayerController returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(ParamsBuffer, GetOwningPlayerController_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:GetFOVAngle
    static readonly IntPtr GetFOVAngle_NativeFunction;
    static readonly int GetFOVAngle_ParamsSize;
    static readonly int GetFOVAngle_ReturnValue_Offset;
    
    public float GetFOVAngle()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFOVAngle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFOVAngle_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetFOVAngle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:GetCameraRotation
    static readonly IntPtr GetCameraRotation_NativeFunction;
    static readonly int GetCameraRotation_ParamsSize;
    static readonly int GetCameraRotation_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetCameraRotation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCameraRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCameraRotation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetCameraRotation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:GetCameraLocation
    static readonly IntPtr GetCameraLocation_NativeFunction;
    static readonly int GetCameraLocation_ParamsSize;
    static readonly int GetCameraLocation_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetCameraLocation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCameraLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCameraLocation_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetCameraLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:FindCameraModifierByClass
    static readonly IntPtr FindCameraModifierByClass_NativeFunction;
    static readonly int FindCameraModifierByClass_ParamsSize;
    static readonly int FindCameraModifierByClass_ModifierClass_Offset;
    static readonly int FindCameraModifierByClass_ReturnValue_Offset;
    
    public UnrealSharp.Engine.CameraModifier FindCameraModifierByClass(SubclassOf<UnrealSharp.Engine.CameraModifier> modifierClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindCameraModifierByClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.CameraModifier>.ToNative(IntPtr.Add(ParamsBuffer, FindCameraModifierByClass_ModifierClass_Offset), 0, null, modifierClass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindCameraModifierByClass_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.CameraModifier returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.CameraModifier>.FromNative(IntPtr.Add(ParamsBuffer, FindCameraModifierByClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:ClearCameraLensEffects
    static readonly IntPtr ClearCameraLensEffects_NativeFunction;
    
    public void ClearCameraLensEffects()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearCameraLensEffects_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:AddNewCameraModifier
    static readonly IntPtr AddNewCameraModifier_NativeFunction;
    static readonly int AddNewCameraModifier_ParamsSize;
    static readonly int AddNewCameraModifier_ModifierClass_Offset;
    static readonly int AddNewCameraModifier_ReturnValue_Offset;
    
    public UnrealSharp.Engine.CameraModifier AddNewCameraModifier(SubclassOf<UnrealSharp.Engine.CameraModifier> modifierClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddNewCameraModifier_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.CameraModifier>.ToNative(IntPtr.Add(ParamsBuffer, AddNewCameraModifier_ModifierClass_Offset), 0, null, modifierClass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddNewCameraModifier_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.CameraModifier returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.CameraModifier>.FromNative(IntPtr.Add(ParamsBuffer, AddNewCameraModifier_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:PhotographyCameraModify
    IntPtr PhotographyCameraModify_NativeFunction;
    static readonly int PhotographyCameraModify_ParamsSize;
    static readonly int PhotographyCameraModify_NewCameraLocation_Offset;
    static readonly int PhotographyCameraModify_PreviousCameraLocation_Offset;
    static readonly int PhotographyCameraModify_OriginalCameraLocation_Offset;
    static readonly int PhotographyCameraModify_ResultCameraLocation_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void PhotographyCameraModify(System.DoubleNumerics.Vector3 newCameraLocation, System.DoubleNumerics.Vector3 previousCameraLocation, System.DoubleNumerics.Vector3 originalCameraLocation, out System.DoubleNumerics.Vector3 resultCameraLocation)
    {
        unsafe
        {
            if (PhotographyCameraModify_NativeFunction == IntPtr.Zero)
            {
                PhotographyCameraModify_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "PhotographyCameraModify");
            }
            byte* ParamsBufferAllocation = stackalloc byte[PhotographyCameraModify_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, PhotographyCameraModify_NewCameraLocation_Offset), 0, null, newCameraLocation);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, PhotographyCameraModify_PreviousCameraLocation_Offset), 0, null, previousCameraLocation);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, PhotographyCameraModify_OriginalCameraLocation_Offset), 0, null, originalCameraLocation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PhotographyCameraModify_NativeFunction, ParamsBuffer);
            
            resultCameraLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, PhotographyCameraModify_ResultCameraLocation_Offset), 0, null);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void PhotographyCameraModify_Implementation(System.DoubleNumerics.Vector3 newCameraLocation, System.DoubleNumerics.Vector3 previousCameraLocation, System.DoubleNumerics.Vector3 originalCameraLocation, out System.DoubleNumerics.Vector3 resultCameraLocation)
    {
        resultCameraLocation = default(System.DoubleNumerics.Vector3);
    }
    void Invoke_PhotographyCameraModify(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            System.DoubleNumerics.Vector3 newCameraLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(buffer, PhotographyCameraModify_NewCameraLocation_Offset), 0, null);
            System.DoubleNumerics.Vector3 previousCameraLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(buffer, PhotographyCameraModify_PreviousCameraLocation_Offset), 0, null);
            System.DoubleNumerics.Vector3 originalCameraLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(buffer, PhotographyCameraModify_OriginalCameraLocation_Offset), 0, null);
            System.DoubleNumerics.Vector3 resultCameraLocation = default;
            PhotographyCameraModify_Implementation(newCameraLocation, previousCameraLocation, originalCameraLocation, out resultCameraLocation);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(buffer, PhotographyCameraModify_ResultCameraLocation_Offset), 0, null, resultCameraLocation);
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:OnPhotographySessionStart
    IntPtr OnPhotographySessionStart_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnPhotographySessionStart()
    {
        unsafe
        {
            if (OnPhotographySessionStart_NativeFunction == IntPtr.Zero)
            {
                OnPhotographySessionStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnPhotographySessionStart");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnPhotographySessionStart_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnPhotographySessionStart_Implementation()
    {
    }
    void Invoke_OnPhotographySessionStart(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            OnPhotographySessionStart_Implementation();
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:OnPhotographySessionEnd
    IntPtr OnPhotographySessionEnd_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnPhotographySessionEnd()
    {
        unsafe
        {
            if (OnPhotographySessionEnd_NativeFunction == IntPtr.Zero)
            {
                OnPhotographySessionEnd_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnPhotographySessionEnd");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnPhotographySessionEnd_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnPhotographySessionEnd_Implementation()
    {
    }
    void Invoke_OnPhotographySessionEnd(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            OnPhotographySessionEnd_Implementation();
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:OnPhotographyMultiPartCaptureStart
    IntPtr OnPhotographyMultiPartCaptureStart_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnPhotographyMultiPartCaptureStart()
    {
        unsafe
        {
            if (OnPhotographyMultiPartCaptureStart_NativeFunction == IntPtr.Zero)
            {
                OnPhotographyMultiPartCaptureStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnPhotographyMultiPartCaptureStart");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnPhotographyMultiPartCaptureStart_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnPhotographyMultiPartCaptureStart_Implementation()
    {
    }
    void Invoke_OnPhotographyMultiPartCaptureStart(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            OnPhotographyMultiPartCaptureStart_Implementation();
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:OnPhotographyMultiPartCaptureEnd
    IntPtr OnPhotographyMultiPartCaptureEnd_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void OnPhotographyMultiPartCaptureEnd()
    {
        unsafe
        {
            if (OnPhotographyMultiPartCaptureEnd_NativeFunction == IntPtr.Zero)
            {
                OnPhotographyMultiPartCaptureEnd_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnPhotographyMultiPartCaptureEnd");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnPhotographyMultiPartCaptureEnd_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnPhotographyMultiPartCaptureEnd_Implementation()
    {
    }
    void Invoke_OnPhotographyMultiPartCaptureEnd(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            OnPhotographyMultiPartCaptureEnd_Implementation();
        }
    }
    
    // Function /Script/Engine.PlayerCameraManager:BlueprintUpdateCamera
    IntPtr BlueprintUpdateCamera_NativeFunction;
    static readonly int BlueprintUpdateCamera_ParamsSize;
    static readonly int BlueprintUpdateCamera_CameraTarget_Offset;
    static readonly int BlueprintUpdateCamera_NewCameraLocation_Offset;
    static readonly int BlueprintUpdateCamera_NewCameraRotation_Offset;
    static readonly int BlueprintUpdateCamera_NewCameraFOV_Offset;
    static readonly int BlueprintUpdateCamera_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual bool BlueprintUpdateCamera(UnrealSharp.Engine.Actor cameraTarget, out System.DoubleNumerics.Vector3 newCameraLocation, out UnrealSharp.Rotator newCameraRotation, out float newCameraFOV)
    {
        unsafe
        {
            if (BlueprintUpdateCamera_NativeFunction == IntPtr.Zero)
            {
                BlueprintUpdateCamera_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "BlueprintUpdateCamera");
            }
            byte* ParamsBufferAllocation = stackalloc byte[BlueprintUpdateCamera_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, BlueprintUpdateCamera_CameraTarget_Offset), 0, null, cameraTarget);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BlueprintUpdateCamera_NativeFunction, ParamsBuffer);
            
            newCameraLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, BlueprintUpdateCamera_NewCameraLocation_Offset), 0, null);
            newCameraRotation = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, BlueprintUpdateCamera_NewCameraRotation_Offset), 0, null);
            newCameraFOV = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, BlueprintUpdateCamera_NewCameraFOV_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BlueprintUpdateCamera_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool BlueprintUpdateCamera_Implementation(UnrealSharp.Engine.Actor cameraTarget, out System.DoubleNumerics.Vector3 newCameraLocation, out UnrealSharp.Rotator newCameraRotation, out float newCameraFOV)
    {
        newCameraLocation = default(System.DoubleNumerics.Vector3);
        newCameraRotation = default(UnrealSharp.Rotator);
        newCameraFOV = default(float);
        return default(bool);
    }
    void Invoke_BlueprintUpdateCamera(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.Actor cameraTarget = ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(buffer, BlueprintUpdateCamera_CameraTarget_Offset), 0, null);
            System.DoubleNumerics.Vector3 newCameraLocation = default;
            UnrealSharp.Rotator newCameraRotation = default;
            float newCameraFOV = default;
            bool returnValue = BlueprintUpdateCamera_Implementation(cameraTarget, out newCameraLocation, out newCameraRotation, out newCameraFOV);
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(buffer, BlueprintUpdateCamera_NewCameraLocation_Offset), 0, null, newCameraLocation);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(buffer, BlueprintUpdateCamera_NewCameraRotation_Offset), 0, null, newCameraRotation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(buffer, BlueprintUpdateCamera_NewCameraFOV_Offset), 0, null, newCameraFOV);
        }
    }
    
    
}
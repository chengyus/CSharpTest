// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class PlayerController : UnrealSharp.Engine.Controller
{
    
    static PlayerController()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PlayerController");
        
        PlayerCameraManager_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PlayerCameraManager");
        PlayerCameraManagerClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PlayerCameraManagerClass");
        SmoothTargetViewRotationSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SmoothTargetViewRotationSpeed");
        CheatManager_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CheatManager");
        CheatClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CheatClass");
        AsyncPhysicsDataComponent_DEPRECARED_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AsyncPhysicsDataComponent_DEPRECARED");
        bPlayerIsWaiting_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bPlayerIsWaiting");
        bPlayerIsWaiting_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bPlayerIsWaiting");
        bShowMouseCursor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bShowMouseCursor");
        bShowMouseCursor_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bShowMouseCursor");
        bEnableClickEvents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableClickEvents");
        bEnableClickEvents_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableClickEvents");
        bEnableTouchEvents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableTouchEvents");
        bEnableTouchEvents_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableTouchEvents");
        bEnableMouseOverEvents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableMouseOverEvents");
        bEnableMouseOverEvents_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableMouseOverEvents");
        bEnableTouchOverEvents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableTouchOverEvents");
        bEnableTouchOverEvents_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableTouchOverEvents");
        bForceFeedbackEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bForceFeedbackEnabled");
        bForceFeedbackEnabled_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bForceFeedbackEnabled");
        bEnableMotionControls_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableMotionControls");
        bEnableMotionControls_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableMotionControls");
        bEnableStreamingSource_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableStreamingSource");
        bEnableStreamingSource_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableStreamingSource");
        bStreamingSourceShouldActivate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bStreamingSourceShouldActivate");
        bStreamingSourceShouldActivate_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bStreamingSourceShouldActivate");
        bStreamingSourceShouldBlockOnSlowStreaming_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bStreamingSourceShouldBlockOnSlowStreaming");
        bStreamingSourceShouldBlockOnSlowStreaming_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bStreamingSourceShouldBlockOnSlowStreaming");
        StreamingSourcePriority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StreamingSourcePriority");
        StreamingSourceDebugColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StreamingSourceDebugColor");
        StreamingSourceShapes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StreamingSourceShapes");
        StreamingSourceShapes_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "StreamingSourceShapes");
        ClickEventKeys_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ClickEventKeys");
        ClickEventKeys_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "ClickEventKeys");
        DefaultMouseCursor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultMouseCursor");
        CurrentMouseCursor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CurrentMouseCursor");
        DefaultClickTraceChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultClickTraceChannel");
        CurrentClickTraceChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CurrentClickTraceChannel");
        HitResultTraceDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "HitResultTraceDistance");
        bShouldPerformFullTickWhenPaused_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bShouldPerformFullTickWhenPaused");
        bShouldPerformFullTickWhenPaused_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bShouldPerformFullTickWhenPaused");
        
        WasInputKeyJustReleased_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "WasInputKeyJustReleased");
        WasInputKeyJustReleased_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(WasInputKeyJustReleased_NativeFunction);
        WasInputKeyJustReleased_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WasInputKeyJustReleased_NativeFunction, "Key");
        WasInputKeyJustReleased_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WasInputKeyJustReleased_NativeFunction, "ReturnValue");
        WasInputKeyJustPressed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "WasInputKeyJustPressed");
        WasInputKeyJustPressed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(WasInputKeyJustPressed_NativeFunction);
        WasInputKeyJustPressed_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WasInputKeyJustPressed_NativeFunction, "Key");
        WasInputKeyJustPressed_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WasInputKeyJustPressed_NativeFunction, "ReturnValue");
        StreamingSourceShouldBlockOnSlowStreaming_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StreamingSourceShouldBlockOnSlowStreaming");
        StreamingSourceShouldBlockOnSlowStreaming_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StreamingSourceShouldBlockOnSlowStreaming_NativeFunction);
        StreamingSourceShouldBlockOnSlowStreaming_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StreamingSourceShouldBlockOnSlowStreaming_NativeFunction, "ReturnValue");
        StreamingSourceShouldActivate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StreamingSourceShouldActivate");
        StreamingSourceShouldActivate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StreamingSourceShouldActivate_NativeFunction);
        StreamingSourceShouldActivate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StreamingSourceShouldActivate_NativeFunction, "ReturnValue");
        StopHapticEffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopHapticEffect");
        StopHapticEffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StopHapticEffect_NativeFunction);
        StopHapticEffect_Hand_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopHapticEffect_NativeFunction, "Hand");
        SetVirtualJoystickVisibility_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVirtualJoystickVisibility");
        SetVirtualJoystickVisibility_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVirtualJoystickVisibility_NativeFunction);
        SetVirtualJoystickVisibility_bVisible_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVirtualJoystickVisibility_NativeFunction, "bVisible");
        SetViewTargetWithBlend_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetViewTargetWithBlend");
        SetViewTargetWithBlend_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetViewTargetWithBlend_NativeFunction);
        SetViewTargetWithBlend_NewViewTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetViewTargetWithBlend_NativeFunction, "NewViewTarget");
        SetViewTargetWithBlend_BlendTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetViewTargetWithBlend_NativeFunction, "BlendTime");
        SetViewTargetWithBlend_BlendFunc_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetViewTargetWithBlend_NativeFunction, "BlendFunc");
        SetViewTargetWithBlend_BlendExp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetViewTargetWithBlend_NativeFunction, "BlendExp");
        SetViewTargetWithBlend_bLockOutgoing_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetViewTargetWithBlend_NativeFunction, "bLockOutgoing");
        SetMouseLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMouseLocation");
        SetMouseLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMouseLocation_NativeFunction);
        SetMouseLocation_X_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMouseLocation_NativeFunction, "X");
        SetMouseLocation_Y_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMouseLocation_NativeFunction, "Y");
        SetMouseCursorWidget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMouseCursorWidget");
        SetMouseCursorWidget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMouseCursorWidget_NativeFunction);
        SetMouseCursorWidget_Cursor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMouseCursorWidget_NativeFunction, "Cursor");
        SetMouseCursorWidget_CursorWidget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMouseCursorWidget_NativeFunction, "CursorWidget");
        SetHapticsByValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetHapticsByValue");
        SetHapticsByValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetHapticsByValue_NativeFunction);
        SetHapticsByValue_Frequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetHapticsByValue_NativeFunction, "Frequency");
        SetHapticsByValue_Amplitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetHapticsByValue_NativeFunction, "Amplitude");
        SetHapticsByValue_Hand_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetHapticsByValue_NativeFunction, "Hand");
        SetDisableHaptics_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDisableHaptics");
        SetDisableHaptics_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDisableHaptics_NativeFunction);
        SetDisableHaptics_bNewDisabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDisableHaptics_NativeFunction, "bNewDisabled");
        SetDeprecatedInputYawScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDeprecatedInputYawScale");
        SetDeprecatedInputYawScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDeprecatedInputYawScale_NativeFunction);
        SetDeprecatedInputYawScale_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDeprecatedInputYawScale_NativeFunction, "NewValue");
        SetDeprecatedInputRollScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDeprecatedInputRollScale");
        SetDeprecatedInputRollScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDeprecatedInputRollScale_NativeFunction);
        SetDeprecatedInputRollScale_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDeprecatedInputRollScale_NativeFunction, "NewValue");
        SetDeprecatedInputPitchScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDeprecatedInputPitchScale");
        SetDeprecatedInputPitchScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDeprecatedInputPitchScale_NativeFunction);
        SetDeprecatedInputPitchScale_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDeprecatedInputPitchScale_NativeFunction, "NewValue");
        SetControllerLightColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetControllerLightColor");
        SetControllerLightColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetControllerLightColor_NativeFunction);
        SetControllerLightColor_Color_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetControllerLightColor_NativeFunction, "Color");
        SetCinematicMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCinematicMode");
        SetCinematicMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCinematicMode_NativeFunction);
        SetCinematicMode_bInCinematicMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCinematicMode_NativeFunction, "bInCinematicMode");
        SetCinematicMode_bHidePlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCinematicMode_NativeFunction, "bHidePlayer");
        SetCinematicMode_bAffectsHUD_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCinematicMode_NativeFunction, "bAffectsHUD");
        SetCinematicMode_bAffectsMovement_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCinematicMode_NativeFunction, "bAffectsMovement");
        SetCinematicMode_bAffectsTurning_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCinematicMode_NativeFunction, "bAffectsTurning");
        SetAudioListenerOverride_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAudioListenerOverride");
        SetAudioListenerOverride_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAudioListenerOverride_NativeFunction);
        SetAudioListenerOverride_AttachToComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAudioListenerOverride_NativeFunction, "AttachToComponent");
        SetAudioListenerOverride_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAudioListenerOverride_NativeFunction, "Location");
        SetAudioListenerOverride_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAudioListenerOverride_NativeFunction, "Rotation");
        SetAudioListenerAttenuationOverride_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAudioListenerAttenuationOverride");
        SetAudioListenerAttenuationOverride_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAudioListenerAttenuationOverride_NativeFunction);
        SetAudioListenerAttenuationOverride_AttachToComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAudioListenerAttenuationOverride_NativeFunction, "AttachToComponent");
        SetAudioListenerAttenuationOverride_AttenuationLocationOVerride_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAudioListenerAttenuationOverride_NativeFunction, "AttenuationLocationOVerride");
        ResetControllerLightColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetControllerLightColor");
        ProjectWorldLocationToScreen_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ProjectWorldLocationToScreen");
        ProjectWorldLocationToScreen_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ProjectWorldLocationToScreen_NativeFunction);
        ProjectWorldLocationToScreen_WorldLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProjectWorldLocationToScreen_NativeFunction, "WorldLocation");
        ProjectWorldLocationToScreen_ScreenLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProjectWorldLocationToScreen_NativeFunction, "ScreenLocation");
        ProjectWorldLocationToScreen_bPlayerViewportRelative_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProjectWorldLocationToScreen_NativeFunction, "bPlayerViewportRelative");
        ProjectWorldLocationToScreen_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ProjectWorldLocationToScreen_NativeFunction, "ReturnValue");
        PlayHapticEffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlayHapticEffect");
        PlayHapticEffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PlayHapticEffect_NativeFunction);
        PlayHapticEffect_HapticEffect_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayHapticEffect_NativeFunction, "HapticEffect");
        PlayHapticEffect_Hand_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayHapticEffect_NativeFunction, "Hand");
        PlayHapticEffect_Scale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayHapticEffect_NativeFunction, "Scale");
        PlayHapticEffect_bLoop_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayHapticEffect_NativeFunction, "bLoop");
        K2_ClientPlayForceFeedback_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_ClientPlayForceFeedback");
        K2_ClientPlayForceFeedback_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_ClientPlayForceFeedback_NativeFunction);
        K2_ClientPlayForceFeedback_ForceFeedbackEffect_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_ClientPlayForceFeedback_NativeFunction, "ForceFeedbackEffect");
        K2_ClientPlayForceFeedback_Tag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_ClientPlayForceFeedback_NativeFunction, "Tag");
        K2_ClientPlayForceFeedback_bLooping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_ClientPlayForceFeedback_NativeFunction, "bLooping");
        K2_ClientPlayForceFeedback_bIgnoreTimeDilation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_ClientPlayForceFeedback_NativeFunction, "bIgnoreTimeDilation");
        K2_ClientPlayForceFeedback_bPlayWhilePaused_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_ClientPlayForceFeedback_NativeFunction, "bPlayWhilePaused");
        IsStreamingSourceEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsStreamingSourceEnabled");
        IsStreamingSourceEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsStreamingSourceEnabled_NativeFunction);
        IsStreamingSourceEnabled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsStreamingSourceEnabled_NativeFunction, "ReturnValue");
        IsInputKeyDown_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsInputKeyDown");
        IsInputKeyDown_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsInputKeyDown_NativeFunction);
        IsInputKeyDown_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsInputKeyDown_NativeFunction, "Key");
        IsInputKeyDown_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsInputKeyDown_NativeFunction, "ReturnValue");
        GetViewportSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetViewportSize");
        GetViewportSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetViewportSize_NativeFunction);
        GetViewportSize_SizeX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetViewportSize_NativeFunction, "SizeX");
        GetViewportSize_SizeY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetViewportSize_NativeFunction, "SizeY");
        GetStreamingSourceShapes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStreamingSourceShapes");
        GetStreamingSourceShapes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStreamingSourceShapes_NativeFunction);
        GetStreamingSourceShapes_OutShapes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStreamingSourceShapes_NativeFunction, "OutShapes");
        GetStreamingSourceShapes_OutShapes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetStreamingSourceShapes_NativeFunction, "OutShapes");
        GetStreamingSourcePriority_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStreamingSourcePriority");
        GetStreamingSourcePriority_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStreamingSourcePriority_NativeFunction);
        GetStreamingSourcePriority_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStreamingSourcePriority_NativeFunction, "ReturnValue");
        GetStreamingSourceLocationAndRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStreamingSourceLocationAndRotation");
        GetStreamingSourceLocationAndRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStreamingSourceLocationAndRotation_NativeFunction);
        GetStreamingSourceLocationAndRotation_OutLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStreamingSourceLocationAndRotation_NativeFunction, "OutLocation");
        GetStreamingSourceLocationAndRotation_OutRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStreamingSourceLocationAndRotation_NativeFunction, "OutRotation");
        GetSpectatorPawn_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSpectatorPawn");
        GetSpectatorPawn_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSpectatorPawn_NativeFunction);
        GetSpectatorPawn_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSpectatorPawn_NativeFunction, "ReturnValue");
        GetPlatformUserId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlatformUserId");
        GetPlatformUserId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlatformUserId_NativeFunction);
        GetPlatformUserId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlatformUserId_NativeFunction, "ReturnValue");
        GetOverridePlayerInputClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOverridePlayerInputClass");
        GetOverridePlayerInputClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOverridePlayerInputClass_NativeFunction);
        GetOverridePlayerInputClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOverridePlayerInputClass_NativeFunction, "ReturnValue");
        GetMousePosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMousePosition");
        GetMousePosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMousePosition_NativeFunction);
        GetMousePosition_LocationX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMousePosition_NativeFunction, "LocationX");
        GetMousePosition_LocationY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMousePosition_NativeFunction, "LocationY");
        GetMousePosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMousePosition_NativeFunction, "ReturnValue");
        GetInputVectorKeyState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInputVectorKeyState");
        GetInputVectorKeyState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInputVectorKeyState_NativeFunction);
        GetInputVectorKeyState_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputVectorKeyState_NativeFunction, "Key");
        GetInputVectorKeyState_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputVectorKeyState_NativeFunction, "ReturnValue");
        GetInputTouchState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInputTouchState");
        GetInputTouchState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInputTouchState_NativeFunction);
        GetInputTouchState_FingerIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputTouchState_NativeFunction, "FingerIndex");
        GetInputTouchState_LocationX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputTouchState_NativeFunction, "LocationX");
        GetInputTouchState_LocationY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputTouchState_NativeFunction, "LocationY");
        GetInputTouchState_bIsCurrentlyPressed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputTouchState_NativeFunction, "bIsCurrentlyPressed");
        GetInputMouseDelta_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInputMouseDelta");
        GetInputMouseDelta_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInputMouseDelta_NativeFunction);
        GetInputMouseDelta_DeltaX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputMouseDelta_NativeFunction, "DeltaX");
        GetInputMouseDelta_DeltaY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputMouseDelta_NativeFunction, "DeltaY");
        GetInputMotionState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInputMotionState");
        GetInputMotionState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInputMotionState_NativeFunction);
        GetInputMotionState_Tilt_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputMotionState_NativeFunction, "Tilt");
        GetInputMotionState_RotationRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputMotionState_NativeFunction, "RotationRate");
        GetInputMotionState_Gravity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputMotionState_NativeFunction, "Gravity");
        GetInputMotionState_Acceleration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputMotionState_NativeFunction, "Acceleration");
        GetInputKeyTimeDown_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInputKeyTimeDown");
        GetInputKeyTimeDown_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInputKeyTimeDown_NativeFunction);
        GetInputKeyTimeDown_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputKeyTimeDown_NativeFunction, "Key");
        GetInputKeyTimeDown_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputKeyTimeDown_NativeFunction, "ReturnValue");
        GetInputAnalogStickState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInputAnalogStickState");
        GetInputAnalogStickState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInputAnalogStickState_NativeFunction);
        GetInputAnalogStickState_WhichStick_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputAnalogStickState_NativeFunction, "WhichStick");
        GetInputAnalogStickState_StickX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputAnalogStickState_NativeFunction, "StickX");
        GetInputAnalogStickState_StickY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputAnalogStickState_NativeFunction, "StickY");
        GetInputAnalogKeyState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInputAnalogKeyState");
        GetInputAnalogKeyState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInputAnalogKeyState_NativeFunction);
        GetInputAnalogKeyState_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputAnalogKeyState_NativeFunction, "Key");
        GetInputAnalogKeyState_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputAnalogKeyState_NativeFunction, "ReturnValue");
        GetHUD_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHUD");
        GetHUD_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHUD_NativeFunction);
        GetHUD_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHUD_NativeFunction, "ReturnValue");
        GetHitResultUnderFingerForObjects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHitResultUnderFingerForObjects");
        GetHitResultUnderFingerForObjects_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHitResultUnderFingerForObjects_NativeFunction);
        GetHitResultUnderFingerForObjects_FingerIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderFingerForObjects_NativeFunction, "FingerIndex");
        GetHitResultUnderFingerForObjects_ObjectTypes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderFingerForObjects_NativeFunction, "ObjectTypes");
        GetHitResultUnderFingerForObjects_ObjectTypes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetHitResultUnderFingerForObjects_NativeFunction, "ObjectTypes");
        GetHitResultUnderFingerForObjects_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderFingerForObjects_NativeFunction, "bTraceComplex");
        GetHitResultUnderFingerForObjects_HitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderFingerForObjects_NativeFunction, "HitResult");
        GetHitResultUnderFingerForObjects_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderFingerForObjects_NativeFunction, "ReturnValue");
        GetHitResultUnderFingerByChannel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHitResultUnderFingerByChannel");
        GetHitResultUnderFingerByChannel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHitResultUnderFingerByChannel_NativeFunction);
        GetHitResultUnderFingerByChannel_FingerIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderFingerByChannel_NativeFunction, "FingerIndex");
        GetHitResultUnderFingerByChannel_TraceChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderFingerByChannel_NativeFunction, "TraceChannel");
        GetHitResultUnderFingerByChannel_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderFingerByChannel_NativeFunction, "bTraceComplex");
        GetHitResultUnderFingerByChannel_HitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderFingerByChannel_NativeFunction, "HitResult");
        GetHitResultUnderFingerByChannel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderFingerByChannel_NativeFunction, "ReturnValue");
        GetHitResultUnderFinger_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHitResultUnderFinger");
        GetHitResultUnderFinger_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHitResultUnderFinger_NativeFunction);
        GetHitResultUnderFinger_FingerIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderFinger_NativeFunction, "FingerIndex");
        GetHitResultUnderFinger_TraceChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderFinger_NativeFunction, "TraceChannel");
        GetHitResultUnderFinger_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderFinger_NativeFunction, "bTraceComplex");
        GetHitResultUnderFinger_HitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderFinger_NativeFunction, "HitResult");
        GetHitResultUnderFinger_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderFinger_NativeFunction, "ReturnValue");
        GetHitResultUnderCursorForObjects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHitResultUnderCursorForObjects");
        GetHitResultUnderCursorForObjects_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHitResultUnderCursorForObjects_NativeFunction);
        GetHitResultUnderCursorForObjects_ObjectTypes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderCursorForObjects_NativeFunction, "ObjectTypes");
        GetHitResultUnderCursorForObjects_ObjectTypes_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetHitResultUnderCursorForObjects_NativeFunction, "ObjectTypes");
        GetHitResultUnderCursorForObjects_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderCursorForObjects_NativeFunction, "bTraceComplex");
        GetHitResultUnderCursorForObjects_HitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderCursorForObjects_NativeFunction, "HitResult");
        GetHitResultUnderCursorForObjects_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderCursorForObjects_NativeFunction, "ReturnValue");
        GetHitResultUnderCursorByChannel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHitResultUnderCursorByChannel");
        GetHitResultUnderCursorByChannel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHitResultUnderCursorByChannel_NativeFunction);
        GetHitResultUnderCursorByChannel_TraceChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderCursorByChannel_NativeFunction, "TraceChannel");
        GetHitResultUnderCursorByChannel_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderCursorByChannel_NativeFunction, "bTraceComplex");
        GetHitResultUnderCursorByChannel_HitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderCursorByChannel_NativeFunction, "HitResult");
        GetHitResultUnderCursorByChannel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderCursorByChannel_NativeFunction, "ReturnValue");
        GetHitResultUnderCursor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHitResultUnderCursor");
        GetHitResultUnderCursor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHitResultUnderCursor_NativeFunction);
        GetHitResultUnderCursor_TraceChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderCursor_NativeFunction, "TraceChannel");
        GetHitResultUnderCursor_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderCursor_NativeFunction, "bTraceComplex");
        GetHitResultUnderCursor_HitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderCursor_NativeFunction, "HitResult");
        GetHitResultUnderCursor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHitResultUnderCursor_NativeFunction, "ReturnValue");
        GetFocalLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFocalLocation");
        GetFocalLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFocalLocation_NativeFunction);
        GetFocalLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFocalLocation_NativeFunction, "ReturnValue");
        GetDeprecatedInputYawScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDeprecatedInputYawScale");
        GetDeprecatedInputYawScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDeprecatedInputYawScale_NativeFunction);
        GetDeprecatedInputYawScale_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDeprecatedInputYawScale_NativeFunction, "ReturnValue");
        GetDeprecatedInputRollScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDeprecatedInputRollScale");
        GetDeprecatedInputRollScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDeprecatedInputRollScale_NativeFunction);
        GetDeprecatedInputRollScale_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDeprecatedInputRollScale_NativeFunction, "ReturnValue");
        GetDeprecatedInputPitchScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDeprecatedInputPitchScale");
        GetDeprecatedInputPitchScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDeprecatedInputPitchScale_NativeFunction);
        GetDeprecatedInputPitchScale_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDeprecatedInputPitchScale_NativeFunction, "ReturnValue");
        GetAsyncPhysicsDataToWrite_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAsyncPhysicsDataToWrite");
        GetAsyncPhysicsDataToWrite_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAsyncPhysicsDataToWrite_NativeFunction);
        GetAsyncPhysicsDataToWrite_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAsyncPhysicsDataToWrite_NativeFunction, "ReturnValue");
        GetAsyncPhysicsDataToConsume_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAsyncPhysicsDataToConsume");
        GetAsyncPhysicsDataToConsume_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAsyncPhysicsDataToConsume_NativeFunction);
        GetAsyncPhysicsDataToConsume_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAsyncPhysicsDataToConsume_NativeFunction, "ReturnValue");
        DeprojectScreenPositionToWorld_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeprojectScreenPositionToWorld");
        DeprojectScreenPositionToWorld_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeprojectScreenPositionToWorld_NativeFunction);
        DeprojectScreenPositionToWorld_ScreenX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeprojectScreenPositionToWorld_NativeFunction, "ScreenX");
        DeprojectScreenPositionToWorld_ScreenY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeprojectScreenPositionToWorld_NativeFunction, "ScreenY");
        DeprojectScreenPositionToWorld_WorldLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeprojectScreenPositionToWorld_NativeFunction, "WorldLocation");
        DeprojectScreenPositionToWorld_WorldDirection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeprojectScreenPositionToWorld_NativeFunction, "WorldDirection");
        DeprojectScreenPositionToWorld_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeprojectScreenPositionToWorld_NativeFunction, "ReturnValue");
        DeprojectMousePositionToWorld_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeprojectMousePositionToWorld");
        DeprojectMousePositionToWorld_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeprojectMousePositionToWorld_NativeFunction);
        DeprojectMousePositionToWorld_WorldLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeprojectMousePositionToWorld_NativeFunction, "WorldLocation");
        DeprojectMousePositionToWorld_WorldDirection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeprojectMousePositionToWorld_NativeFunction, "WorldDirection");
        DeprojectMousePositionToWorld_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeprojectMousePositionToWorld_NativeFunction, "ReturnValue");
        ClientStopForceFeedback_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClientStopForceFeedback");
        ClientStopForceFeedback_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClientStopForceFeedback_NativeFunction);
        ClientStopForceFeedback_ForceFeedbackEffect_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClientStopForceFeedback_NativeFunction, "ForceFeedbackEffect");
        ClientStopForceFeedback_Tag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClientStopForceFeedback_NativeFunction, "Tag");
        ClientStopCameraShakesFromSource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClientStopCameraShakesFromSource");
        ClientStopCameraShakesFromSource_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClientStopCameraShakesFromSource_NativeFunction);
        ClientStopCameraShakesFromSource_SourceComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClientStopCameraShakesFromSource_NativeFunction, "SourceComponent");
        ClientStopCameraShakesFromSource_bImmediately_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClientStopCameraShakesFromSource_NativeFunction, "bImmediately");
        ClientStopCameraShake_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClientStopCameraShake");
        ClientStopCameraShake_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClientStopCameraShake_NativeFunction);
        ClientStopCameraShake_Shake_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClientStopCameraShake_NativeFunction, "Shake");
        ClientStopCameraShake_bImmediately_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClientStopCameraShake_NativeFunction, "bImmediately");
        ClientStartCameraShakeFromSource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClientStartCameraShakeFromSource");
        ClientStartCameraShakeFromSource_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClientStartCameraShakeFromSource_NativeFunction);
        ClientStartCameraShakeFromSource_Shake_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClientStartCameraShakeFromSource_NativeFunction, "Shake");
        ClientStartCameraShakeFromSource_SourceComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClientStartCameraShakeFromSource_NativeFunction, "SourceComponent");
        ClientStartCameraShake_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClientStartCameraShake");
        ClientStartCameraShake_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClientStartCameraShake_NativeFunction);
        ClientStartCameraShake_Shake_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClientStartCameraShake_NativeFunction, "Shake");
        ClientStartCameraShake_Scale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClientStartCameraShake_NativeFunction, "Scale");
        ClientStartCameraShake_PlaySpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClientStartCameraShake_NativeFunction, "PlaySpace");
        ClientStartCameraShake_UserPlaySpaceRot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClientStartCameraShake_NativeFunction, "UserPlaySpaceRot");
        ClientSpawnGenericCameraLensEffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClientSpawnGenericCameraLensEffect");
        ClientSpawnGenericCameraLensEffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClientSpawnGenericCameraLensEffect_NativeFunction);
        ClientSpawnGenericCameraLensEffect_LensEffectEmitterClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClientSpawnGenericCameraLensEffect_NativeFunction, "LensEffectEmitterClass");
        ClientSetHUD_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClientSetHUD");
        ClientSetHUD_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClientSetHUD_NativeFunction);
        ClientSetHUD_NewHUDClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClientSetHUD_NativeFunction, "NewHUDClass");
        ClientClearCameraLensEffects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClientClearCameraLensEffects");
        ClearAudioListenerOverride_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearAudioListenerOverride");
        ClearAudioListenerAttenuationOverride_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearAudioListenerAttenuationOverride");
        CanRestartPlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CanRestartPlayer");
        CanRestartPlayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CanRestartPlayer_NativeFunction);
        CanRestartPlayer_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanRestartPlayer_NativeFunction, "ReturnValue");
        AddYawInput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddYawInput");
        AddYawInput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddYawInput_NativeFunction);
        AddYawInput_Val_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddYawInput_NativeFunction, "Val");
        AddRollInput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddRollInput");
        AddRollInput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddRollInput_NativeFunction);
        AddRollInput_Val_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddRollInput_NativeFunction, "Val");
        AddPitchInput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddPitchInput");
        AddPitchInput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddPitchInput_NativeFunction);
        AddPitchInput_Val_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddPitchInput_NativeFunction, "Val");
        ActivateTouchInterface_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ActivateTouchInterface");
        ActivateTouchInterface_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ActivateTouchInterface_NativeFunction);
        ActivateTouchInterface_NewTouchInterface_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ActivateTouchInterface_NativeFunction, "NewTouchInterface");
        
        
    }
    
    protected PlayerController(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Engine.PlayerController:PlayerCameraManager
    static readonly int PlayerCameraManager_Offset;
    
    public UnrealSharp.Engine.PlayerCameraManager PlayerCameraManager
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.PlayerCameraManager>.FromNative(IntPtr.Add(NativeObject, PlayerCameraManager_Offset), 0, this);
        }
    }
    
    // ClassProperty /Script/Engine.PlayerController:PlayerCameraManagerClass
    static readonly int PlayerCameraManagerClass_Offset;
    
    public SubclassOf<UnrealSharp.Engine.PlayerCameraManager> PlayerCameraManagerClass
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.Engine.PlayerCameraManager>.FromNative(IntPtr.Add(NativeObject, PlayerCameraManagerClass_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.PlayerController:SmoothTargetViewRotationSpeed
    static readonly int SmoothTargetViewRotationSpeed_Offset;
    
    public float SmoothTargetViewRotationSpeed
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SmoothTargetViewRotationSpeed_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, SmoothTargetViewRotationSpeed_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/Engine.PlayerController:CheatManager
    static readonly int CheatManager_Offset;
    
    public UnrealSharp.Engine.CheatManager CheatManager
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.CheatManager>.FromNative(IntPtr.Add(NativeObject, CheatManager_Offset), 0, this);
        }
    }
    
    // ClassProperty /Script/Engine.PlayerController:CheatClass
    static readonly int CheatClass_Offset;
    
    public SubclassOf<UnrealSharp.Engine.CheatManager> CheatClass
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.Engine.CheatManager>.FromNative(IntPtr.Add(NativeObject, CheatClass_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/Engine.PlayerController:AsyncPhysicsDataComponent_DEPRECARED
    static readonly int AsyncPhysicsDataComponent_DEPRECARED_Offset;
    
    public UnrealSharp.Engine.AsyncPhysicsInputComponent AsyncPhysicsDataComponent_DEPRECARED
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.AsyncPhysicsInputComponent>.FromNative(IntPtr.Add(NativeObject, AsyncPhysicsDataComponent_DEPRECARED_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.AsyncPhysicsInputComponent>.ToNative(IntPtr.Add(NativeObject, AsyncPhysicsDataComponent_DEPRECARED_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.PlayerController:bPlayerIsWaiting
    static readonly int bPlayerIsWaiting_Offset;
    static readonly IntPtr bPlayerIsWaiting_NativeProperty;
    
    public bool bPlayerIsWaiting
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bPlayerIsWaiting_NativeProperty, bPlayerIsWaiting_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PlayerController:bShowMouseCursor
    static readonly int bShowMouseCursor_Offset;
    static readonly IntPtr bShowMouseCursor_NativeProperty;
    
    public bool bShowMouseCursor
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bShowMouseCursor_NativeProperty, bShowMouseCursor_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bShowMouseCursor_NativeProperty, bShowMouseCursor_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PlayerController:bEnableClickEvents
    static readonly int bEnableClickEvents_Offset;
    static readonly IntPtr bEnableClickEvents_NativeProperty;
    
    public bool bEnableClickEvents
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableClickEvents_NativeProperty, bEnableClickEvents_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bEnableClickEvents_NativeProperty, bEnableClickEvents_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PlayerController:bEnableTouchEvents
    static readonly int bEnableTouchEvents_Offset;
    static readonly IntPtr bEnableTouchEvents_NativeProperty;
    
    public bool bEnableTouchEvents
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableTouchEvents_NativeProperty, bEnableTouchEvents_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bEnableTouchEvents_NativeProperty, bEnableTouchEvents_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PlayerController:bEnableMouseOverEvents
    static readonly int bEnableMouseOverEvents_Offset;
    static readonly IntPtr bEnableMouseOverEvents_NativeProperty;
    
    public bool bEnableMouseOverEvents
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableMouseOverEvents_NativeProperty, bEnableMouseOverEvents_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bEnableMouseOverEvents_NativeProperty, bEnableMouseOverEvents_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PlayerController:bEnableTouchOverEvents
    static readonly int bEnableTouchOverEvents_Offset;
    static readonly IntPtr bEnableTouchOverEvents_NativeProperty;
    
    public bool bEnableTouchOverEvents
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableTouchOverEvents_NativeProperty, bEnableTouchOverEvents_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bEnableTouchOverEvents_NativeProperty, bEnableTouchOverEvents_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PlayerController:bForceFeedbackEnabled
    static readonly int bForceFeedbackEnabled_Offset;
    static readonly IntPtr bForceFeedbackEnabled_NativeProperty;
    
    public bool bForceFeedbackEnabled
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bForceFeedbackEnabled_NativeProperty, bForceFeedbackEnabled_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bForceFeedbackEnabled_NativeProperty, bForceFeedbackEnabled_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PlayerController:bEnableMotionControls
    static readonly int bEnableMotionControls_Offset;
    static readonly IntPtr bEnableMotionControls_NativeProperty;
    
    public bool bEnableMotionControls
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableMotionControls_NativeProperty, bEnableMotionControls_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bEnableMotionControls_NativeProperty, bEnableMotionControls_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PlayerController:bEnableStreamingSource
    static readonly int bEnableStreamingSource_Offset;
    static readonly IntPtr bEnableStreamingSource_NativeProperty;
    
    public bool bEnableStreamingSource
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableStreamingSource_NativeProperty, bEnableStreamingSource_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bEnableStreamingSource_NativeProperty, bEnableStreamingSource_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PlayerController:bStreamingSourceShouldActivate
    static readonly int bStreamingSourceShouldActivate_Offset;
    static readonly IntPtr bStreamingSourceShouldActivate_NativeProperty;
    
    public bool bStreamingSourceShouldActivate
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bStreamingSourceShouldActivate_NativeProperty, bStreamingSourceShouldActivate_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bStreamingSourceShouldActivate_NativeProperty, bStreamingSourceShouldActivate_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PlayerController:bStreamingSourceShouldBlockOnSlowStreaming
    static readonly int bStreamingSourceShouldBlockOnSlowStreaming_Offset;
    static readonly IntPtr bStreamingSourceShouldBlockOnSlowStreaming_NativeProperty;
    
    public bool bStreamingSourceShouldBlockOnSlowStreaming
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bStreamingSourceShouldBlockOnSlowStreaming_NativeProperty, bStreamingSourceShouldBlockOnSlowStreaming_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bStreamingSourceShouldBlockOnSlowStreaming_NativeProperty, bStreamingSourceShouldBlockOnSlowStreaming_Offset, value);
        }
    }
    
    // EnumProperty /Script/Engine.PlayerController:StreamingSourcePriority
    static readonly int StreamingSourcePriority_Offset;
    
    public UnrealSharp.Engine.EStreamingSourcePriority StreamingSourcePriority
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EStreamingSourcePriority>.FromNative(IntPtr.Add(NativeObject, StreamingSourcePriority_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EStreamingSourcePriority>.ToNative(IntPtr.Add(NativeObject, StreamingSourcePriority_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.PlayerController:StreamingSourceDebugColor
    static readonly int StreamingSourceDebugColor_Offset;
    
    public UnrealSharp.CoreUObject.Color StreamingSourceDebugColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(NativeObject, StreamingSourceDebugColor_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(NativeObject, StreamingSourceDebugColor_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/Engine.PlayerController:StreamingSourceShapes
    static readonly int StreamingSourceShapes_Offset;
    static readonly IntPtr StreamingSourceShapes_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.StreamingSourceShape> StreamingSourceShapes_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.StreamingSourceShape> StreamingSourceShapes
    {
        get
        {
            if(StreamingSourceShapes_Wrapper == null)
            {
                StreamingSourceShapes_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.StreamingSourceShape>(1, StreamingSourceShapes_NativeProperty, UnrealSharp.Engine.StreamingSourceShapeMarshaler.ToNative, UnrealSharp.Engine.StreamingSourceShapeMarshaler.FromNative);
            }
            
            return StreamingSourceShapes_Wrapper.FromNative(IntPtr.Add(NativeObject,StreamingSourceShapes_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/Engine.PlayerController:ClickEventKeys
    static readonly int ClickEventKeys_Offset;
    static readonly IntPtr ClickEventKeys_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.InputCore.Key> ClickEventKeys_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.InputCore.Key> ClickEventKeys
    {
        get
        {
            if(ClickEventKeys_Wrapper == null)
            {
                ClickEventKeys_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.InputCore.Key>(1, ClickEventKeys_NativeProperty, UnrealSharp.InputCore.KeyMarshaler.ToNative, UnrealSharp.InputCore.KeyMarshaler.FromNative);
            }
            
            return ClickEventKeys_Wrapper.FromNative(IntPtr.Add(NativeObject,ClickEventKeys_Offset),0,this);
        }
    }
    
    // ByteProperty /Script/Engine.PlayerController:DefaultMouseCursor
    static readonly int DefaultMouseCursor_Offset;
    
    public UnrealSharp.CoreUObject.EMouseCursor DefaultMouseCursor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.EMouseCursor>.FromNative(IntPtr.Add(NativeObject, DefaultMouseCursor_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/Engine.PlayerController:CurrentMouseCursor
    static readonly int CurrentMouseCursor_Offset;
    
    public UnrealSharp.CoreUObject.EMouseCursor CurrentMouseCursor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.EMouseCursor>.FromNative(IntPtr.Add(NativeObject, CurrentMouseCursor_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.EMouseCursor>.ToNative(IntPtr.Add(NativeObject, CurrentMouseCursor_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/Engine.PlayerController:DefaultClickTraceChannel
    static readonly int DefaultClickTraceChannel_Offset;
    
    public UnrealSharp.Engine.ECollisionChannel DefaultClickTraceChannel
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ECollisionChannel>.FromNative(IntPtr.Add(NativeObject, DefaultClickTraceChannel_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/Engine.PlayerController:CurrentClickTraceChannel
    static readonly int CurrentClickTraceChannel_Offset;
    
    public UnrealSharp.Engine.ECollisionChannel CurrentClickTraceChannel
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ECollisionChannel>.FromNative(IntPtr.Add(NativeObject, CurrentClickTraceChannel_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.ECollisionChannel>.ToNative(IntPtr.Add(NativeObject, CurrentClickTraceChannel_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.PlayerController:HitResultTraceDistance
    static readonly int HitResultTraceDistance_Offset;
    
    public float HitResultTraceDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, HitResultTraceDistance_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, HitResultTraceDistance_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.PlayerController:bShouldPerformFullTickWhenPaused
    static readonly int bShouldPerformFullTickWhenPaused_Offset;
    static readonly IntPtr bShouldPerformFullTickWhenPaused_NativeProperty;
    
    public bool bShouldPerformFullTickWhenPaused
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bShouldPerformFullTickWhenPaused_NativeProperty, bShouldPerformFullTickWhenPaused_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bShouldPerformFullTickWhenPaused_NativeProperty, bShouldPerformFullTickWhenPaused_Offset, value);
        }
    }
    
    // Function /Script/Engine.PlayerController:WasInputKeyJustReleased
    static readonly IntPtr WasInputKeyJustReleased_NativeFunction;
    static readonly int WasInputKeyJustReleased_ParamsSize;
    static readonly int WasInputKeyJustReleased_Key_Offset;
    static readonly int WasInputKeyJustReleased_ReturnValue_Offset;
    
    public bool WasInputKeyJustReleased(UnrealSharp.InputCore.Key key)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[WasInputKeyJustReleased_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.InputCore.KeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, WasInputKeyJustReleased_Key_Offset), 0, null, key);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, WasInputKeyJustReleased_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, WasInputKeyJustReleased_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:WasInputKeyJustPressed
    static readonly IntPtr WasInputKeyJustPressed_NativeFunction;
    static readonly int WasInputKeyJustPressed_ParamsSize;
    static readonly int WasInputKeyJustPressed_Key_Offset;
    static readonly int WasInputKeyJustPressed_ReturnValue_Offset;
    
    public bool WasInputKeyJustPressed(UnrealSharp.InputCore.Key key)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[WasInputKeyJustPressed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.InputCore.KeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, WasInputKeyJustPressed_Key_Offset), 0, null, key);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, WasInputKeyJustPressed_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, WasInputKeyJustPressed_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:StreamingSourceShouldBlockOnSlowStreaming
    static readonly IntPtr StreamingSourceShouldBlockOnSlowStreaming_NativeFunction;
    static readonly int StreamingSourceShouldBlockOnSlowStreaming_ParamsSize;
    static readonly int StreamingSourceShouldBlockOnSlowStreaming_ReturnValue_Offset;
    
    public bool StreamingSourceShouldBlockOnSlowStreaming()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StreamingSourceShouldBlockOnSlowStreaming_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StreamingSourceShouldBlockOnSlowStreaming_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, StreamingSourceShouldBlockOnSlowStreaming_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:StreamingSourceShouldActivate
    static readonly IntPtr StreamingSourceShouldActivate_NativeFunction;
    static readonly int StreamingSourceShouldActivate_ParamsSize;
    static readonly int StreamingSourceShouldActivate_ReturnValue_Offset;
    
    public bool StreamingSourceShouldActivate()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StreamingSourceShouldActivate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StreamingSourceShouldActivate_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, StreamingSourceShouldActivate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:StopHapticEffect
    static readonly IntPtr StopHapticEffect_NativeFunction;
    static readonly int StopHapticEffect_ParamsSize;
    static readonly int StopHapticEffect_Hand_Offset;
    
    public void StopHapticEffect(UnrealSharp.InputCore.EControllerHand hand)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StopHapticEffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.InputCore.EControllerHand>.ToNative(IntPtr.Add(ParamsBuffer, StopHapticEffect_Hand_Offset), 0, null, hand);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopHapticEffect_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:SetVirtualJoystickVisibility
    static readonly IntPtr SetVirtualJoystickVisibility_NativeFunction;
    static readonly int SetVirtualJoystickVisibility_ParamsSize;
    static readonly int SetVirtualJoystickVisibility_bVisible_Offset;
    
    public void SetVirtualJoystickVisibility(bool bVisible)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVirtualJoystickVisibility_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetVirtualJoystickVisibility_bVisible_Offset), 0, null, bVisible);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVirtualJoystickVisibility_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:SetViewTargetWithBlend
    static readonly IntPtr SetViewTargetWithBlend_NativeFunction;
    static readonly int SetViewTargetWithBlend_ParamsSize;
    static readonly int SetViewTargetWithBlend_NewViewTarget_Offset;
    static readonly int SetViewTargetWithBlend_BlendTime_Offset;
    static readonly int SetViewTargetWithBlend_BlendFunc_Offset;
    static readonly int SetViewTargetWithBlend_BlendExp_Offset;
    static readonly int SetViewTargetWithBlend_bLockOutgoing_Offset;
    
    public void SetViewTargetWithBlend(UnrealSharp.Engine.Actor newViewTarget, float blendTime = 0.000000f, UnrealSharp.Engine.EViewTargetBlendFunction blendFunc = UnrealSharp.Engine.EViewTargetBlendFunction.VTBlend_Linear, float blendExp = 0.000000f, bool bLockOutgoing = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetViewTargetWithBlend_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, SetViewTargetWithBlend_NewViewTarget_Offset), 0, null, newViewTarget);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetViewTargetWithBlend_BlendTime_Offset), 0, null, blendTime);
            BlittableMarshaller<UnrealSharp.Engine.EViewTargetBlendFunction>.ToNative(IntPtr.Add(ParamsBuffer, SetViewTargetWithBlend_BlendFunc_Offset), 0, null, blendFunc);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetViewTargetWithBlend_BlendExp_Offset), 0, null, blendExp);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetViewTargetWithBlend_bLockOutgoing_Offset), 0, null, bLockOutgoing);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetViewTargetWithBlend_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:SetMouseLocation
    static readonly IntPtr SetMouseLocation_NativeFunction;
    static readonly int SetMouseLocation_ParamsSize;
    static readonly int SetMouseLocation_X_Offset;
    static readonly int SetMouseLocation_Y_Offset;
    
    public void SetMouseLocation(int x, int y)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMouseLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetMouseLocation_X_Offset), 0, null, x);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetMouseLocation_Y_Offset), 0, null, y);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMouseLocation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:SetMouseCursorWidget
    static readonly IntPtr SetMouseCursorWidget_NativeFunction;
    static readonly int SetMouseCursorWidget_ParamsSize;
    static readonly int SetMouseCursorWidget_Cursor_Offset;
    static readonly int SetMouseCursorWidget_CursorWidget_Offset;
    
    public void SetMouseCursorWidget(UnrealSharp.CoreUObject.EMouseCursor cursor, UnrealSharp.UMG.UserWidget cursorWidget)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMouseCursorWidget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.EMouseCursor>.ToNative(IntPtr.Add(ParamsBuffer, SetMouseCursorWidget_Cursor_Offset), 0, null, cursor);
            ObjectMarshaller<UnrealSharp.UMG.UserWidget>.ToNative(IntPtr.Add(ParamsBuffer, SetMouseCursorWidget_CursorWidget_Offset), 0, null, cursorWidget);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMouseCursorWidget_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:SetHapticsByValue
    static readonly IntPtr SetHapticsByValue_NativeFunction;
    static readonly int SetHapticsByValue_ParamsSize;
    static readonly int SetHapticsByValue_Frequency_Offset;
    static readonly int SetHapticsByValue_Amplitude_Offset;
    static readonly int SetHapticsByValue_Hand_Offset;
    
    public void SetHapticsByValue(float frequency, float amplitude, UnrealSharp.InputCore.EControllerHand hand)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetHapticsByValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetHapticsByValue_Frequency_Offset), 0, null, frequency);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetHapticsByValue_Amplitude_Offset), 0, null, amplitude);
            BlittableMarshaller<UnrealSharp.InputCore.EControllerHand>.ToNative(IntPtr.Add(ParamsBuffer, SetHapticsByValue_Hand_Offset), 0, null, hand);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetHapticsByValue_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:SetDisableHaptics
    static readonly IntPtr SetDisableHaptics_NativeFunction;
    static readonly int SetDisableHaptics_ParamsSize;
    static readonly int SetDisableHaptics_bNewDisabled_Offset;
    
    public void SetDisableHaptics(bool bNewDisabled)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDisableHaptics_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetDisableHaptics_bNewDisabled_Offset), 0, null, bNewDisabled);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDisableHaptics_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:SetDeprecatedInputYawScale
    static readonly IntPtr SetDeprecatedInputYawScale_NativeFunction;
    static readonly int SetDeprecatedInputYawScale_ParamsSize;
    static readonly int SetDeprecatedInputYawScale_NewValue_Offset;
    
    public void SetDeprecatedInputYawScale(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDeprecatedInputYawScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetDeprecatedInputYawScale_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDeprecatedInputYawScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:SetDeprecatedInputRollScale
    static readonly IntPtr SetDeprecatedInputRollScale_NativeFunction;
    static readonly int SetDeprecatedInputRollScale_ParamsSize;
    static readonly int SetDeprecatedInputRollScale_NewValue_Offset;
    
    public void SetDeprecatedInputRollScale(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDeprecatedInputRollScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetDeprecatedInputRollScale_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDeprecatedInputRollScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:SetDeprecatedInputPitchScale
    static readonly IntPtr SetDeprecatedInputPitchScale_NativeFunction;
    static readonly int SetDeprecatedInputPitchScale_ParamsSize;
    static readonly int SetDeprecatedInputPitchScale_NewValue_Offset;
    
    public void SetDeprecatedInputPitchScale(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDeprecatedInputPitchScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetDeprecatedInputPitchScale_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDeprecatedInputPitchScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:SetControllerLightColor
    static readonly IntPtr SetControllerLightColor_NativeFunction;
    static readonly int SetControllerLightColor_ParamsSize;
    static readonly int SetControllerLightColor_Color_Offset;
    
    public void SetControllerLightColor(UnrealSharp.CoreUObject.Color color)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetControllerLightColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(ParamsBuffer, SetControllerLightColor_Color_Offset), 0, null, color);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetControllerLightColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:SetCinematicMode
    static readonly IntPtr SetCinematicMode_NativeFunction;
    static readonly int SetCinematicMode_ParamsSize;
    static readonly int SetCinematicMode_bInCinematicMode_Offset;
    static readonly int SetCinematicMode_bHidePlayer_Offset;
    static readonly int SetCinematicMode_bAffectsHUD_Offset;
    static readonly int SetCinematicMode_bAffectsMovement_Offset;
    static readonly int SetCinematicMode_bAffectsTurning_Offset;
    
    public void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCinematicMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCinematicMode_bInCinematicMode_Offset), 0, null, bInCinematicMode);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCinematicMode_bHidePlayer_Offset), 0, null, bHidePlayer);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCinematicMode_bAffectsHUD_Offset), 0, null, bAffectsHUD);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCinematicMode_bAffectsMovement_Offset), 0, null, bAffectsMovement);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCinematicMode_bAffectsTurning_Offset), 0, null, bAffectsTurning);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCinematicMode_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:SetAudioListenerOverride
    static readonly IntPtr SetAudioListenerOverride_NativeFunction;
    static readonly int SetAudioListenerOverride_ParamsSize;
    static readonly int SetAudioListenerOverride_AttachToComponent_Offset;
    static readonly int SetAudioListenerOverride_Location_Offset;
    static readonly int SetAudioListenerOverride_Rotation_Offset;
    
    public void SetAudioListenerOverride(UnrealSharp.Engine.SceneComponent attachToComponent, System.DoubleNumerics.Vector3 location, UnrealSharp.Rotator rotation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAudioListenerOverride_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.ToNative(IntPtr.Add(ParamsBuffer, SetAudioListenerOverride_AttachToComponent_Offset), 0, null, attachToComponent);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetAudioListenerOverride_Location_Offset), 0, null, location);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SetAudioListenerOverride_Rotation_Offset), 0, null, rotation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAudioListenerOverride_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:SetAudioListenerAttenuationOverride
    static readonly IntPtr SetAudioListenerAttenuationOverride_NativeFunction;
    static readonly int SetAudioListenerAttenuationOverride_ParamsSize;
    static readonly int SetAudioListenerAttenuationOverride_AttachToComponent_Offset;
    static readonly int SetAudioListenerAttenuationOverride_AttenuationLocationOVerride_Offset;
    
    public void SetAudioListenerAttenuationOverride(UnrealSharp.Engine.SceneComponent attachToComponent, System.DoubleNumerics.Vector3 attenuationLocationOVerride)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAudioListenerAttenuationOverride_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.ToNative(IntPtr.Add(ParamsBuffer, SetAudioListenerAttenuationOverride_AttachToComponent_Offset), 0, null, attachToComponent);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetAudioListenerAttenuationOverride_AttenuationLocationOVerride_Offset), 0, null, attenuationLocationOVerride);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAudioListenerAttenuationOverride_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:ResetControllerLightColor
    static readonly IntPtr ResetControllerLightColor_NativeFunction;
    
    public void ResetControllerLightColor()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetControllerLightColor_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.PlayerController:ProjectWorldLocationToScreen
    static readonly IntPtr ProjectWorldLocationToScreen_NativeFunction;
    static readonly int ProjectWorldLocationToScreen_ParamsSize;
    static readonly int ProjectWorldLocationToScreen_WorldLocation_Offset;
    static readonly int ProjectWorldLocationToScreen_ScreenLocation_Offset;
    static readonly int ProjectWorldLocationToScreen_bPlayerViewportRelative_Offset;
    static readonly int ProjectWorldLocationToScreen_ReturnValue_Offset;
    
    public bool ProjectWorldLocationToScreen(System.DoubleNumerics.Vector3 worldLocation, out System.DoubleNumerics.Vector2 screenLocation, bool bPlayerViewportRelative = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ProjectWorldLocationToScreen_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ProjectWorldLocationToScreen_WorldLocation_Offset), 0, null, worldLocation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ProjectWorldLocationToScreen_bPlayerViewportRelative_Offset), 0, null, bPlayerViewportRelative);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ProjectWorldLocationToScreen_NativeFunction, ParamsBuffer);
            
            screenLocation = BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(ParamsBuffer, ProjectWorldLocationToScreen_ScreenLocation_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ProjectWorldLocationToScreen_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:PlayHapticEffect
    static readonly IntPtr PlayHapticEffect_NativeFunction;
    static readonly int PlayHapticEffect_ParamsSize;
    static readonly int PlayHapticEffect_HapticEffect_Offset;
    static readonly int PlayHapticEffect_Hand_Offset;
    static readonly int PlayHapticEffect_Scale_Offset;
    static readonly int PlayHapticEffect_bLoop_Offset;
    
    public void PlayHapticEffect(UnrealSharp.Engine.HapticFeedbackEffect_Base hapticEffect, UnrealSharp.InputCore.EControllerHand hand, float scale = 1.000000f, bool bLoop = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PlayHapticEffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.HapticFeedbackEffect_Base>.ToNative(IntPtr.Add(ParamsBuffer, PlayHapticEffect_HapticEffect_Offset), 0, null, hapticEffect);
            BlittableMarshaller<UnrealSharp.InputCore.EControllerHand>.ToNative(IntPtr.Add(ParamsBuffer, PlayHapticEffect_Hand_Offset), 0, null, hand);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, PlayHapticEffect_Scale_Offset), 0, null, scale);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, PlayHapticEffect_bLoop_Offset), 0, null, bLoop);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PlayHapticEffect_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:K2_ClientPlayForceFeedback
    static readonly IntPtr K2_ClientPlayForceFeedback_NativeFunction;
    static readonly int K2_ClientPlayForceFeedback_ParamsSize;
    static readonly int K2_ClientPlayForceFeedback_ForceFeedbackEffect_Offset;
    static readonly int K2_ClientPlayForceFeedback_Tag_Offset;
    static readonly int K2_ClientPlayForceFeedback_bLooping_Offset;
    static readonly int K2_ClientPlayForceFeedback_bIgnoreTimeDilation_Offset;
    static readonly int K2_ClientPlayForceFeedback_bPlayWhilePaused_Offset;
    
    public void K2_ClientPlayForceFeedback(UnrealSharp.Engine.ForceFeedbackEffect forceFeedbackEffect, Name tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_ClientPlayForceFeedback_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.ForceFeedbackEffect>.ToNative(IntPtr.Add(ParamsBuffer, K2_ClientPlayForceFeedback_ForceFeedbackEffect_Offset), 0, null, forceFeedbackEffect);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, K2_ClientPlayForceFeedback_Tag_Offset), 0, null, tag);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_ClientPlayForceFeedback_bLooping_Offset), 0, null, bLooping);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_ClientPlayForceFeedback_bIgnoreTimeDilation_Offset), 0, null, bIgnoreTimeDilation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_ClientPlayForceFeedback_bPlayWhilePaused_Offset), 0, null, bPlayWhilePaused);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_ClientPlayForceFeedback_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:IsStreamingSourceEnabled
    static readonly IntPtr IsStreamingSourceEnabled_NativeFunction;
    static readonly int IsStreamingSourceEnabled_ParamsSize;
    static readonly int IsStreamingSourceEnabled_ReturnValue_Offset;
    
    public bool IsStreamingSourceEnabled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsStreamingSourceEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsStreamingSourceEnabled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsStreamingSourceEnabled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:IsInputKeyDown
    static readonly IntPtr IsInputKeyDown_NativeFunction;
    static readonly int IsInputKeyDown_ParamsSize;
    static readonly int IsInputKeyDown_Key_Offset;
    static readonly int IsInputKeyDown_ReturnValue_Offset;
    
    public bool IsInputKeyDown(UnrealSharp.InputCore.Key key)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsInputKeyDown_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.InputCore.KeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsInputKeyDown_Key_Offset), 0, null, key);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsInputKeyDown_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsInputKeyDown_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:GetViewportSize
    static readonly IntPtr GetViewportSize_NativeFunction;
    static readonly int GetViewportSize_ParamsSize;
    static readonly int GetViewportSize_SizeX_Offset;
    static readonly int GetViewportSize_SizeY_Offset;
    
    public void GetViewportSize(out int sizeX, out int sizeY)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetViewportSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetViewportSize_NativeFunction, ParamsBuffer);
            
            sizeX = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetViewportSize_SizeX_Offset), 0, null);
            sizeY = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetViewportSize_SizeY_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:GetStreamingSourceShapes
    static readonly IntPtr GetStreamingSourceShapes_NativeFunction;
    static readonly int GetStreamingSourceShapes_ParamsSize;
    static readonly int GetStreamingSourceShapes_OutShapes_Offset;
    static readonly int GetStreamingSourceShapes_OutShapes_ElementSize;
    
    public void GetStreamingSourceShapes(out System.Collections.Generic.IList<UnrealSharp.Engine.StreamingSourceShape> outShapes)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStreamingSourceShapes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetStreamingSourceShapes_NativeFunction, ParamsBuffer);
            
            IntPtr OutShapes_NativeBuffer = IntPtr.Add(ParamsBuffer, GetStreamingSourceShapes_OutShapes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.StreamingSourceShape> OutShapes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.StreamingSourceShape> (1, UnrealSharp.Engine.StreamingSourceShapeMarshaler.ToNative, UnrealSharp.Engine.StreamingSourceShapeMarshaler.FromNative, GetStreamingSourceShapes_OutShapes_ElementSize);
            outShapes = OutShapes_Marshaler.FromNative(OutShapes_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.StreamingSourceShape>.DestructInstance(OutShapes_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:GetStreamingSourcePriority
    static readonly IntPtr GetStreamingSourcePriority_NativeFunction;
    static readonly int GetStreamingSourcePriority_ParamsSize;
    static readonly int GetStreamingSourcePriority_ReturnValue_Offset;
    
    public UnrealSharp.Engine.EStreamingSourcePriority GetStreamingSourcePriority()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStreamingSourcePriority_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetStreamingSourcePriority_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.EStreamingSourcePriority returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Engine.EStreamingSourcePriority>.FromNative(IntPtr.Add(ParamsBuffer, GetStreamingSourcePriority_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:GetStreamingSourceLocationAndRotation
    static readonly IntPtr GetStreamingSourceLocationAndRotation_NativeFunction;
    static readonly int GetStreamingSourceLocationAndRotation_ParamsSize;
    static readonly int GetStreamingSourceLocationAndRotation_OutLocation_Offset;
    static readonly int GetStreamingSourceLocationAndRotation_OutRotation_Offset;
    
    public void GetStreamingSourceLocationAndRotation(out System.DoubleNumerics.Vector3 outLocation, out UnrealSharp.Rotator outRotation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStreamingSourceLocationAndRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetStreamingSourceLocationAndRotation_NativeFunction, ParamsBuffer);
            
            outLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetStreamingSourceLocationAndRotation_OutLocation_Offset), 0, null);
            outRotation = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetStreamingSourceLocationAndRotation_OutRotation_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:GetSpectatorPawn
    static readonly IntPtr GetSpectatorPawn_NativeFunction;
    static readonly int GetSpectatorPawn_ParamsSize;
    static readonly int GetSpectatorPawn_ReturnValue_Offset;
    
    public UnrealSharp.Engine.SpectatorPawn GetSpectatorPawn()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSpectatorPawn_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSpectatorPawn_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.SpectatorPawn returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.SpectatorPawn>.FromNative(IntPtr.Add(ParamsBuffer, GetSpectatorPawn_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:GetPlatformUserId
    static readonly IntPtr GetPlatformUserId_NativeFunction;
    static readonly int GetPlatformUserId_ParamsSize;
    static readonly int GetPlatformUserId_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.PlatformUserId GetPlatformUserId()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlatformUserId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPlatformUserId_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.PlatformUserId returnValue;
            returnValue = UnrealSharp.CoreUObject.PlatformUserIdMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetPlatformUserId_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:GetOverridePlayerInputClass
    static readonly IntPtr GetOverridePlayerInputClass_NativeFunction;
    static readonly int GetOverridePlayerInputClass_ParamsSize;
    static readonly int GetOverridePlayerInputClass_ReturnValue_Offset;
    
    public SubclassOf<UnrealSharp.Engine.PlayerInput> GetOverridePlayerInputClass()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOverridePlayerInputClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOverridePlayerInputClass_NativeFunction, ParamsBuffer);
            
            SubclassOf<UnrealSharp.Engine.PlayerInput> returnValue;
            returnValue = SubclassOfMarshaller<UnrealSharp.Engine.PlayerInput>.FromNative(IntPtr.Add(ParamsBuffer, GetOverridePlayerInputClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:GetMousePosition
    static readonly IntPtr GetMousePosition_NativeFunction;
    static readonly int GetMousePosition_ParamsSize;
    static readonly int GetMousePosition_LocationX_Offset;
    static readonly int GetMousePosition_LocationY_Offset;
    static readonly int GetMousePosition_ReturnValue_Offset;
    
    public bool GetMousePosition(out float locationX, out float locationY)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMousePosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMousePosition_NativeFunction, ParamsBuffer);
            
            locationX = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetMousePosition_LocationX_Offset), 0, null);
            locationY = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetMousePosition_LocationY_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetMousePosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:GetInputVectorKeyState
    static readonly IntPtr GetInputVectorKeyState_NativeFunction;
    static readonly int GetInputVectorKeyState_ParamsSize;
    static readonly int GetInputVectorKeyState_Key_Offset;
    static readonly int GetInputVectorKeyState_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetInputVectorKeyState(UnrealSharp.InputCore.Key key)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInputVectorKeyState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.InputCore.KeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetInputVectorKeyState_Key_Offset), 0, null, key);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInputVectorKeyState_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetInputVectorKeyState_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:GetInputTouchState
    static readonly IntPtr GetInputTouchState_NativeFunction;
    static readonly int GetInputTouchState_ParamsSize;
    static readonly int GetInputTouchState_FingerIndex_Offset;
    static readonly int GetInputTouchState_LocationX_Offset;
    static readonly int GetInputTouchState_LocationY_Offset;
    static readonly int GetInputTouchState_bIsCurrentlyPressed_Offset;
    
    public void GetInputTouchState(UnrealSharp.InputCore.ETouchIndex fingerIndex, out float locationX, out float locationY, out bool bIsCurrentlyPressed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInputTouchState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.InputCore.ETouchIndex>.ToNative(IntPtr.Add(ParamsBuffer, GetInputTouchState_FingerIndex_Offset), 0, null, fingerIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInputTouchState_NativeFunction, ParamsBuffer);
            
            locationX = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetInputTouchState_LocationX_Offset), 0, null);
            locationY = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetInputTouchState_LocationY_Offset), 0, null);
            bIsCurrentlyPressed = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetInputTouchState_bIsCurrentlyPressed_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:GetInputMouseDelta
    static readonly IntPtr GetInputMouseDelta_NativeFunction;
    static readonly int GetInputMouseDelta_ParamsSize;
    static readonly int GetInputMouseDelta_DeltaX_Offset;
    static readonly int GetInputMouseDelta_DeltaY_Offset;
    
    public void GetInputMouseDelta(out float deltaX, out float deltaY)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInputMouseDelta_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInputMouseDelta_NativeFunction, ParamsBuffer);
            
            deltaX = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetInputMouseDelta_DeltaX_Offset), 0, null);
            deltaY = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetInputMouseDelta_DeltaY_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:GetInputMotionState
    static readonly IntPtr GetInputMotionState_NativeFunction;
    static readonly int GetInputMotionState_ParamsSize;
    static readonly int GetInputMotionState_Tilt_Offset;
    static readonly int GetInputMotionState_RotationRate_Offset;
    static readonly int GetInputMotionState_Gravity_Offset;
    static readonly int GetInputMotionState_Acceleration_Offset;
    
    public void GetInputMotionState(out System.DoubleNumerics.Vector3 tilt, out System.DoubleNumerics.Vector3 rotationRate, out System.DoubleNumerics.Vector3 gravity, out System.DoubleNumerics.Vector3 acceleration)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInputMotionState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInputMotionState_NativeFunction, ParamsBuffer);
            
            tilt = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetInputMotionState_Tilt_Offset), 0, null);
            rotationRate = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetInputMotionState_RotationRate_Offset), 0, null);
            gravity = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetInputMotionState_Gravity_Offset), 0, null);
            acceleration = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetInputMotionState_Acceleration_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:GetInputKeyTimeDown
    static readonly IntPtr GetInputKeyTimeDown_NativeFunction;
    static readonly int GetInputKeyTimeDown_ParamsSize;
    static readonly int GetInputKeyTimeDown_Key_Offset;
    static readonly int GetInputKeyTimeDown_ReturnValue_Offset;
    
    public float GetInputKeyTimeDown(UnrealSharp.InputCore.Key key)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInputKeyTimeDown_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.InputCore.KeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetInputKeyTimeDown_Key_Offset), 0, null, key);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInputKeyTimeDown_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetInputKeyTimeDown_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:GetInputAnalogStickState
    static readonly IntPtr GetInputAnalogStickState_NativeFunction;
    static readonly int GetInputAnalogStickState_ParamsSize;
    static readonly int GetInputAnalogStickState_WhichStick_Offset;
    static readonly int GetInputAnalogStickState_StickX_Offset;
    static readonly int GetInputAnalogStickState_StickY_Offset;
    
    public void GetInputAnalogStickState(UnrealSharp.Engine.EControllerAnalogStick whichStick, out float stickX, out float stickY)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInputAnalogStickState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EControllerAnalogStick>.ToNative(IntPtr.Add(ParamsBuffer, GetInputAnalogStickState_WhichStick_Offset), 0, null, whichStick);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInputAnalogStickState_NativeFunction, ParamsBuffer);
            
            stickX = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetInputAnalogStickState_StickX_Offset), 0, null);
            stickY = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetInputAnalogStickState_StickY_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:GetInputAnalogKeyState
    static readonly IntPtr GetInputAnalogKeyState_NativeFunction;
    static readonly int GetInputAnalogKeyState_ParamsSize;
    static readonly int GetInputAnalogKeyState_Key_Offset;
    static readonly int GetInputAnalogKeyState_ReturnValue_Offset;
    
    public float GetInputAnalogKeyState(UnrealSharp.InputCore.Key key)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInputAnalogKeyState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.InputCore.KeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetInputAnalogKeyState_Key_Offset), 0, null, key);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInputAnalogKeyState_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetInputAnalogKeyState_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:GetHUD
    static readonly IntPtr GetHUD_NativeFunction;
    static readonly int GetHUD_ParamsSize;
    static readonly int GetHUD_ReturnValue_Offset;
    
    public UnrealSharp.Engine.HUD GetHUD()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHUD_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetHUD_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.HUD returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.HUD>.FromNative(IntPtr.Add(ParamsBuffer, GetHUD_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:GetHitResultUnderFingerForObjects
    static readonly IntPtr GetHitResultUnderFingerForObjects_NativeFunction;
    static readonly int GetHitResultUnderFingerForObjects_ParamsSize;
    static readonly int GetHitResultUnderFingerForObjects_FingerIndex_Offset;
    static readonly int GetHitResultUnderFingerForObjects_ObjectTypes_Offset;
    static readonly int GetHitResultUnderFingerForObjects_ObjectTypes_ElementSize;
    static readonly int GetHitResultUnderFingerForObjects_bTraceComplex_Offset;
    static readonly int GetHitResultUnderFingerForObjects_HitResult_Offset;
    static readonly int GetHitResultUnderFingerForObjects_ReturnValue_Offset;
    
    public bool GetHitResultUnderFingerForObjects(UnrealSharp.InputCore.ETouchIndex fingerIndex, System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, out UnrealSharp.Engine.HitResult hitResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHitResultUnderFingerForObjects_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.InputCore.ETouchIndex>.ToNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderFingerForObjects_FingerIndex_Offset), 0, null, fingerIndex);
            IntPtr ObjectTypes_NativeBuffer = IntPtr.Add(ParamsBuffer, GetHitResultUnderFingerForObjects_ObjectTypes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery> ObjectTypes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery>(1, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.ToNative, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.FromNative, GetHitResultUnderFingerForObjects_ObjectTypes_ElementSize);
            ObjectTypes_Marshaler.ToNative(ObjectTypes_NativeBuffer, 0, null, objectTypes);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderFingerForObjects_bTraceComplex_Offset), 0, null, bTraceComplex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetHitResultUnderFingerForObjects_NativeFunction, ParamsBuffer);
            
            hitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderFingerForObjects_HitResult_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderFingerForObjects_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:GetHitResultUnderFingerByChannel
    static readonly IntPtr GetHitResultUnderFingerByChannel_NativeFunction;
    static readonly int GetHitResultUnderFingerByChannel_ParamsSize;
    static readonly int GetHitResultUnderFingerByChannel_FingerIndex_Offset;
    static readonly int GetHitResultUnderFingerByChannel_TraceChannel_Offset;
    static readonly int GetHitResultUnderFingerByChannel_bTraceComplex_Offset;
    static readonly int GetHitResultUnderFingerByChannel_HitResult_Offset;
    static readonly int GetHitResultUnderFingerByChannel_ReturnValue_Offset;
    
    public bool GetHitResultUnderFingerByChannel(UnrealSharp.InputCore.ETouchIndex fingerIndex, UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, out UnrealSharp.Engine.HitResult hitResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHitResultUnderFingerByChannel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.InputCore.ETouchIndex>.ToNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderFingerByChannel_FingerIndex_Offset), 0, null, fingerIndex);
            BlittableMarshaller<UnrealSharp.Engine.ETraceTypeQuery>.ToNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderFingerByChannel_TraceChannel_Offset), 0, null, traceChannel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderFingerByChannel_bTraceComplex_Offset), 0, null, bTraceComplex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetHitResultUnderFingerByChannel_NativeFunction, ParamsBuffer);
            
            hitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderFingerByChannel_HitResult_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderFingerByChannel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:GetHitResultUnderFinger
    static readonly IntPtr GetHitResultUnderFinger_NativeFunction;
    static readonly int GetHitResultUnderFinger_ParamsSize;
    static readonly int GetHitResultUnderFinger_FingerIndex_Offset;
    static readonly int GetHitResultUnderFinger_TraceChannel_Offset;
    static readonly int GetHitResultUnderFinger_bTraceComplex_Offset;
    static readonly int GetHitResultUnderFinger_HitResult_Offset;
    static readonly int GetHitResultUnderFinger_ReturnValue_Offset;
    
    [Obsolete("Use new GetHitResultUnderFingerByChannel or GetHitResultUnderFingerForObject")]
    public bool GetHitResultUnderFinger(UnrealSharp.InputCore.ETouchIndex fingerIndex, UnrealSharp.Engine.ECollisionChannel traceChannel, bool bTraceComplex, out UnrealSharp.Engine.HitResult hitResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHitResultUnderFinger_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.InputCore.ETouchIndex>.ToNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderFinger_FingerIndex_Offset), 0, null, fingerIndex);
            BlittableMarshaller<UnrealSharp.Engine.ECollisionChannel>.ToNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderFinger_TraceChannel_Offset), 0, null, traceChannel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderFinger_bTraceComplex_Offset), 0, null, bTraceComplex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetHitResultUnderFinger_NativeFunction, ParamsBuffer);
            
            hitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderFinger_HitResult_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderFinger_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:GetHitResultUnderCursorForObjects
    static readonly IntPtr GetHitResultUnderCursorForObjects_NativeFunction;
    static readonly int GetHitResultUnderCursorForObjects_ParamsSize;
    static readonly int GetHitResultUnderCursorForObjects_ObjectTypes_Offset;
    static readonly int GetHitResultUnderCursorForObjects_ObjectTypes_ElementSize;
    static readonly int GetHitResultUnderCursorForObjects_bTraceComplex_Offset;
    static readonly int GetHitResultUnderCursorForObjects_HitResult_Offset;
    static readonly int GetHitResultUnderCursorForObjects_ReturnValue_Offset;
    
    public bool GetHitResultUnderCursorForObjects(System.Collections.Generic.IList<UnrealSharp.Engine.EObjectTypeQuery> objectTypes, bool bTraceComplex, out UnrealSharp.Engine.HitResult hitResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHitResultUnderCursorForObjects_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ObjectTypes_NativeBuffer = IntPtr.Add(ParamsBuffer, GetHitResultUnderCursorForObjects_ObjectTypes_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery> ObjectTypes_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.EObjectTypeQuery>(1, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.ToNative, BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.FromNative, GetHitResultUnderCursorForObjects_ObjectTypes_ElementSize);
            ObjectTypes_Marshaler.ToNative(ObjectTypes_NativeBuffer, 0, null, objectTypes);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderCursorForObjects_bTraceComplex_Offset), 0, null, bTraceComplex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetHitResultUnderCursorForObjects_NativeFunction, ParamsBuffer);
            
            hitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderCursorForObjects_HitResult_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderCursorForObjects_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:GetHitResultUnderCursorByChannel
    static readonly IntPtr GetHitResultUnderCursorByChannel_NativeFunction;
    static readonly int GetHitResultUnderCursorByChannel_ParamsSize;
    static readonly int GetHitResultUnderCursorByChannel_TraceChannel_Offset;
    static readonly int GetHitResultUnderCursorByChannel_bTraceComplex_Offset;
    static readonly int GetHitResultUnderCursorByChannel_HitResult_Offset;
    static readonly int GetHitResultUnderCursorByChannel_ReturnValue_Offset;
    
    public bool GetHitResultUnderCursorByChannel(UnrealSharp.Engine.ETraceTypeQuery traceChannel, bool bTraceComplex, out UnrealSharp.Engine.HitResult hitResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHitResultUnderCursorByChannel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ETraceTypeQuery>.ToNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderCursorByChannel_TraceChannel_Offset), 0, null, traceChannel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderCursorByChannel_bTraceComplex_Offset), 0, null, bTraceComplex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetHitResultUnderCursorByChannel_NativeFunction, ParamsBuffer);
            
            hitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderCursorByChannel_HitResult_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderCursorByChannel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:GetHitResultUnderCursor
    static readonly IntPtr GetHitResultUnderCursor_NativeFunction;
    static readonly int GetHitResultUnderCursor_ParamsSize;
    static readonly int GetHitResultUnderCursor_TraceChannel_Offset;
    static readonly int GetHitResultUnderCursor_bTraceComplex_Offset;
    static readonly int GetHitResultUnderCursor_HitResult_Offset;
    static readonly int GetHitResultUnderCursor_ReturnValue_Offset;
    
    [Obsolete("Use new GetHitResultUnderCursorByChannel or GetHitResultUnderCursorForObject")]
    public bool GetHitResultUnderCursor(UnrealSharp.Engine.ECollisionChannel traceChannel, bool bTraceComplex, out UnrealSharp.Engine.HitResult hitResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHitResultUnderCursor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ECollisionChannel>.ToNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderCursor_TraceChannel_Offset), 0, null, traceChannel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderCursor_bTraceComplex_Offset), 0, null, bTraceComplex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetHitResultUnderCursor_NativeFunction, ParamsBuffer);
            
            hitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderCursor_HitResult_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetHitResultUnderCursor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:GetFocalLocation
    static readonly IntPtr GetFocalLocation_NativeFunction;
    static readonly int GetFocalLocation_ParamsSize;
    static readonly int GetFocalLocation_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetFocalLocation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFocalLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFocalLocation_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetFocalLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:GetDeprecatedInputYawScale
    static readonly IntPtr GetDeprecatedInputYawScale_NativeFunction;
    static readonly int GetDeprecatedInputYawScale_ParamsSize;
    static readonly int GetDeprecatedInputYawScale_ReturnValue_Offset;
    
    public float GetDeprecatedInputYawScale()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDeprecatedInputYawScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDeprecatedInputYawScale_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetDeprecatedInputYawScale_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:GetDeprecatedInputRollScale
    static readonly IntPtr GetDeprecatedInputRollScale_NativeFunction;
    static readonly int GetDeprecatedInputRollScale_ParamsSize;
    static readonly int GetDeprecatedInputRollScale_ReturnValue_Offset;
    
    public float GetDeprecatedInputRollScale()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDeprecatedInputRollScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDeprecatedInputRollScale_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetDeprecatedInputRollScale_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:GetDeprecatedInputPitchScale
    static readonly IntPtr GetDeprecatedInputPitchScale_NativeFunction;
    static readonly int GetDeprecatedInputPitchScale_ParamsSize;
    static readonly int GetDeprecatedInputPitchScale_ReturnValue_Offset;
    
    public float GetDeprecatedInputPitchScale()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDeprecatedInputPitchScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDeprecatedInputPitchScale_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetDeprecatedInputPitchScale_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:GetAsyncPhysicsDataToWrite
    static readonly IntPtr GetAsyncPhysicsDataToWrite_NativeFunction;
    static readonly int GetAsyncPhysicsDataToWrite_ParamsSize;
    static readonly int GetAsyncPhysicsDataToWrite_ReturnValue_Offset;
    
    protected UnrealSharp.Engine.AsyncPhysicsData GetAsyncPhysicsDataToWrite()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAsyncPhysicsDataToWrite_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAsyncPhysicsDataToWrite_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AsyncPhysicsData returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AsyncPhysicsData>.FromNative(IntPtr.Add(ParamsBuffer, GetAsyncPhysicsDataToWrite_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:GetAsyncPhysicsDataToConsume
    static readonly IntPtr GetAsyncPhysicsDataToConsume_NativeFunction;
    static readonly int GetAsyncPhysicsDataToConsume_ParamsSize;
    static readonly int GetAsyncPhysicsDataToConsume_ReturnValue_Offset;
    
    protected UnrealSharp.Engine.AsyncPhysicsData GetAsyncPhysicsDataToConsume()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAsyncPhysicsDataToConsume_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAsyncPhysicsDataToConsume_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.AsyncPhysicsData returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.AsyncPhysicsData>.FromNative(IntPtr.Add(ParamsBuffer, GetAsyncPhysicsDataToConsume_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:DeprojectScreenPositionToWorld
    static readonly IntPtr DeprojectScreenPositionToWorld_NativeFunction;
    static readonly int DeprojectScreenPositionToWorld_ParamsSize;
    static readonly int DeprojectScreenPositionToWorld_ScreenX_Offset;
    static readonly int DeprojectScreenPositionToWorld_ScreenY_Offset;
    static readonly int DeprojectScreenPositionToWorld_WorldLocation_Offset;
    static readonly int DeprojectScreenPositionToWorld_WorldDirection_Offset;
    static readonly int DeprojectScreenPositionToWorld_ReturnValue_Offset;
    
    public bool DeprojectScreenPositionToWorld(float screenX, float screenY, out System.DoubleNumerics.Vector3 worldLocation, out System.DoubleNumerics.Vector3 worldDirection)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeprojectScreenPositionToWorld_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DeprojectScreenPositionToWorld_ScreenX_Offset), 0, null, screenX);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DeprojectScreenPositionToWorld_ScreenY_Offset), 0, null, screenY);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DeprojectScreenPositionToWorld_NativeFunction, ParamsBuffer);
            
            worldLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, DeprojectScreenPositionToWorld_WorldLocation_Offset), 0, null);
            worldDirection = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, DeprojectScreenPositionToWorld_WorldDirection_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DeprojectScreenPositionToWorld_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:DeprojectMousePositionToWorld
    static readonly IntPtr DeprojectMousePositionToWorld_NativeFunction;
    static readonly int DeprojectMousePositionToWorld_ParamsSize;
    static readonly int DeprojectMousePositionToWorld_WorldLocation_Offset;
    static readonly int DeprojectMousePositionToWorld_WorldDirection_Offset;
    static readonly int DeprojectMousePositionToWorld_ReturnValue_Offset;
    
    public bool DeprojectMousePositionToWorld(out System.DoubleNumerics.Vector3 worldLocation, out System.DoubleNumerics.Vector3 worldDirection)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeprojectMousePositionToWorld_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DeprojectMousePositionToWorld_NativeFunction, ParamsBuffer);
            
            worldLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, DeprojectMousePositionToWorld_WorldLocation_Offset), 0, null);
            worldDirection = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, DeprojectMousePositionToWorld_WorldDirection_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DeprojectMousePositionToWorld_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:ClientStopForceFeedback
    static readonly IntPtr ClientStopForceFeedback_NativeFunction;
    static readonly int ClientStopForceFeedback_ParamsSize;
    static readonly int ClientStopForceFeedback_ForceFeedbackEffect_Offset;
    static readonly int ClientStopForceFeedback_Tag_Offset;
    
    public void ClientStopForceFeedback(UnrealSharp.Engine.ForceFeedbackEffect forceFeedbackEffect, Name tag)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClientStopForceFeedback_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.ForceFeedbackEffect>.ToNative(IntPtr.Add(ParamsBuffer, ClientStopForceFeedback_ForceFeedbackEffect_Offset), 0, null, forceFeedbackEffect);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ClientStopForceFeedback_Tag_Offset), 0, null, tag);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClientStopForceFeedback_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:ClientStopCameraShakesFromSource
    static readonly IntPtr ClientStopCameraShakesFromSource_NativeFunction;
    static readonly int ClientStopCameraShakesFromSource_ParamsSize;
    static readonly int ClientStopCameraShakesFromSource_SourceComponent_Offset;
    static readonly int ClientStopCameraShakesFromSource_bImmediately_Offset;
    
    public void ClientStopCameraShakesFromSource(UnrealSharp.Engine.CameraShakeSourceComponent sourceComponent, bool bImmediately = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClientStopCameraShakesFromSource_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.CameraShakeSourceComponent>.ToNative(IntPtr.Add(ParamsBuffer, ClientStopCameraShakesFromSource_SourceComponent_Offset), 0, null, sourceComponent);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ClientStopCameraShakesFromSource_bImmediately_Offset), 0, null, bImmediately);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClientStopCameraShakesFromSource_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:ClientStopCameraShake
    static readonly IntPtr ClientStopCameraShake_NativeFunction;
    static readonly int ClientStopCameraShake_ParamsSize;
    static readonly int ClientStopCameraShake_Shake_Offset;
    static readonly int ClientStopCameraShake_bImmediately_Offset;
    
    public void ClientStopCameraShake(SubclassOf<UnrealSharp.Engine.CameraShakeBase> shake, bool bImmediately = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClientStopCameraShake_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.CameraShakeBase>.ToNative(IntPtr.Add(ParamsBuffer, ClientStopCameraShake_Shake_Offset), 0, null, shake);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ClientStopCameraShake_bImmediately_Offset), 0, null, bImmediately);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClientStopCameraShake_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:ClientStartCameraShakeFromSource
    static readonly IntPtr ClientStartCameraShakeFromSource_NativeFunction;
    static readonly int ClientStartCameraShakeFromSource_ParamsSize;
    static readonly int ClientStartCameraShakeFromSource_Shake_Offset;
    static readonly int ClientStartCameraShakeFromSource_SourceComponent_Offset;
    
    public void ClientStartCameraShakeFromSource(SubclassOf<UnrealSharp.Engine.CameraShakeBase> shake, UnrealSharp.Engine.CameraShakeSourceComponent sourceComponent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClientStartCameraShakeFromSource_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.CameraShakeBase>.ToNative(IntPtr.Add(ParamsBuffer, ClientStartCameraShakeFromSource_Shake_Offset), 0, null, shake);
            ObjectMarshaller<UnrealSharp.Engine.CameraShakeSourceComponent>.ToNative(IntPtr.Add(ParamsBuffer, ClientStartCameraShakeFromSource_SourceComponent_Offset), 0, null, sourceComponent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClientStartCameraShakeFromSource_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:ClientStartCameraShake
    static readonly IntPtr ClientStartCameraShake_NativeFunction;
    static readonly int ClientStartCameraShake_ParamsSize;
    static readonly int ClientStartCameraShake_Shake_Offset;
    static readonly int ClientStartCameraShake_Scale_Offset;
    static readonly int ClientStartCameraShake_PlaySpace_Offset;
    static readonly int ClientStartCameraShake_UserPlaySpaceRot_Offset;
    
    public void ClientStartCameraShake(SubclassOf<UnrealSharp.Engine.CameraShakeBase> shake, float scale = 1.000000f, UnrealSharp.Engine.ECameraShakePlaySpace playSpace = UnrealSharp.Engine.ECameraShakePlaySpace.CameraLocal, UnrealSharp.Rotator userPlaySpaceRot = default(UnrealSharp.Rotator))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClientStartCameraShake_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.CameraShakeBase>.ToNative(IntPtr.Add(ParamsBuffer, ClientStartCameraShake_Shake_Offset), 0, null, shake);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ClientStartCameraShake_Scale_Offset), 0, null, scale);
            BlittableMarshaller<UnrealSharp.Engine.ECameraShakePlaySpace>.ToNative(IntPtr.Add(ParamsBuffer, ClientStartCameraShake_PlaySpace_Offset), 0, null, playSpace);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, ClientStartCameraShake_UserPlaySpaceRot_Offset), 0, null, userPlaySpaceRot);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClientStartCameraShake_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:ClientSpawnGenericCameraLensEffect
    static readonly IntPtr ClientSpawnGenericCameraLensEffect_NativeFunction;
    static readonly int ClientSpawnGenericCameraLensEffect_ParamsSize;
    static readonly int ClientSpawnGenericCameraLensEffect_LensEffectEmitterClass_Offset;
    
    public void ClientSpawnGenericCameraLensEffect(SubclassOf<UnrealSharp.Engine.Actor> lensEffectEmitterClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClientSpawnGenericCameraLensEffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ClientSpawnGenericCameraLensEffect_LensEffectEmitterClass_Offset), 0, null, lensEffectEmitterClass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClientSpawnGenericCameraLensEffect_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:ClientSetHUD
    static readonly IntPtr ClientSetHUD_NativeFunction;
    static readonly int ClientSetHUD_ParamsSize;
    static readonly int ClientSetHUD_NewHUDClass_Offset;
    
    public void ClientSetHUD(SubclassOf<UnrealSharp.Engine.HUD> newHUDClass)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClientSetHUD_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.HUD>.ToNative(IntPtr.Add(ParamsBuffer, ClientSetHUD_NewHUDClass_Offset), 0, null, newHUDClass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClientSetHUD_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:ClientClearCameraLensEffects
    static readonly IntPtr ClientClearCameraLensEffects_NativeFunction;
    
    public void ClientClearCameraLensEffects()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClientClearCameraLensEffects_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.PlayerController:ClearAudioListenerOverride
    static readonly IntPtr ClearAudioListenerOverride_NativeFunction;
    
    public void ClearAudioListenerOverride()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearAudioListenerOverride_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.PlayerController:ClearAudioListenerAttenuationOverride
    static readonly IntPtr ClearAudioListenerAttenuationOverride_NativeFunction;
    
    public void ClearAudioListenerAttenuationOverride()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearAudioListenerAttenuationOverride_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.PlayerController:CanRestartPlayer
    static readonly IntPtr CanRestartPlayer_NativeFunction;
    static readonly int CanRestartPlayer_ParamsSize;
    static readonly int CanRestartPlayer_ReturnValue_Offset;
    
    public bool CanRestartPlayer()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CanRestartPlayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CanRestartPlayer_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CanRestartPlayer_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerController:AddYawInput
    static readonly IntPtr AddYawInput_NativeFunction;
    static readonly int AddYawInput_ParamsSize;
    static readonly int AddYawInput_Val_Offset;
    
    public void AddYawInput(float val)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddYawInput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddYawInput_Val_Offset), 0, null, val);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddYawInput_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:AddRollInput
    static readonly IntPtr AddRollInput_NativeFunction;
    static readonly int AddRollInput_ParamsSize;
    static readonly int AddRollInput_Val_Offset;
    
    public void AddRollInput(float val)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddRollInput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddRollInput_Val_Offset), 0, null, val);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddRollInput_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:AddPitchInput
    static readonly IntPtr AddPitchInput_NativeFunction;
    static readonly int AddPitchInput_ParamsSize;
    static readonly int AddPitchInput_Val_Offset;
    
    public void AddPitchInput(float val)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddPitchInput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddPitchInput_Val_Offset), 0, null, val);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddPitchInput_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PlayerController:ActivateTouchInterface
    static readonly IntPtr ActivateTouchInterface_NativeFunction;
    static readonly int ActivateTouchInterface_ParamsSize;
    static readonly int ActivateTouchInterface_NewTouchInterface_Offset;
    
    public void ActivateTouchInterface(UnrealSharp.Engine.TouchInterface newTouchInterface)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ActivateTouchInterface_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.TouchInterface>.ToNative(IntPtr.Add(ParamsBuffer, ActivateTouchInterface_NewTouchInterface_Offset), 0, null, newTouchInterface);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ActivateTouchInterface_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
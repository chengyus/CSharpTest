// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class PlayerState : UnrealSharp.Engine.Info
{
    
    static PlayerState()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PlayerState");
        
        Score_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Score");
        PlayerId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PlayerId");
        CompressedPing_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CompressedPing");
        bIsSpectator_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsSpectator");
        bIsSpectator_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIsSpectator");
        bIsABot_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsABot");
        bIsABot_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIsABot");
        PawnPrivate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PawnPrivate");
        
        IsOnlyASpectator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsOnlyASpectator");
        IsOnlyASpectator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsOnlyASpectator_NativeFunction);
        IsOnlyASpectator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsOnlyASpectator_NativeFunction, "ReturnValue");
        GetPlayerName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayerName");
        GetPlayerName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayerName_NativeFunction);
        GetPlayerName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerName_NativeFunction, "ReturnValue");
        GetPlayerController_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayerController");
        GetPlayerController_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayerController_NativeFunction);
        GetPlayerController_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerController_NativeFunction, "ReturnValue");
        GetPingInMilliseconds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPingInMilliseconds");
        GetPingInMilliseconds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPingInMilliseconds_NativeFunction);
        GetPingInMilliseconds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPingInMilliseconds_NativeFunction, "ReturnValue");
        GetPawn_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPawn");
        GetPawn_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPawn_NativeFunction);
        GetPawn_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPawn_NativeFunction, "ReturnValue");
        BP_GetUniqueId_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BP_GetUniqueId");
        BP_GetUniqueId_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BP_GetUniqueId_NativeFunction);
        BP_GetUniqueId_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BP_GetUniqueId_NativeFunction, "ReturnValue");
        
        IntPtr ReceiveOverrideWith_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveOverrideWith");
        ReceiveOverrideWith_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveOverrideWith_NativeFunction);
        ReceiveOverrideWith_OldPlayerState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveOverrideWith_NativeFunction, "OldPlayerState");
        
        IntPtr ReceiveCopyProperties_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceiveCopyProperties");
        ReceiveCopyProperties_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceiveCopyProperties_NativeFunction);
        ReceiveCopyProperties_NewPlayerState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceiveCopyProperties_NativeFunction, "NewPlayerState");
        
        
    }
    
    protected PlayerState(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Engine.PlayerState:Score
    static readonly int Score_Offset;
    
    public float Score
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Score_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Engine.PlayerState:PlayerId
    static readonly int PlayerId_Offset;
    
    public int PlayerId
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, PlayerId_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/Engine.PlayerState:CompressedPing
    static readonly int CompressedPing_Offset;
    
    public byte CompressedPing
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<byte>.FromNative(IntPtr.Add(NativeObject, CompressedPing_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.PlayerState:bIsSpectator
    static readonly int bIsSpectator_Offset;
    static readonly IntPtr bIsSpectator_NativeProperty;
    
    public bool bIsSpectator
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIsSpectator_NativeProperty, bIsSpectator_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PlayerState:bIsABot
    static readonly int bIsABot_Offset;
    static readonly IntPtr bIsABot_NativeProperty;
    
    public bool bIsABot
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIsABot_NativeProperty, bIsABot_Offset);
        }
    }
    
    // ObjectProperty /Script/Engine.PlayerState:PawnPrivate
    static readonly int PawnPrivate_Offset;
    
    public UnrealSharp.Engine.Pawn PawnPrivate
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(NativeObject, PawnPrivate_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.PlayerState:IsOnlyASpectator
    static readonly IntPtr IsOnlyASpectator_NativeFunction;
    static readonly int IsOnlyASpectator_ParamsSize;
    static readonly int IsOnlyASpectator_ReturnValue_Offset;
    
    public bool IsOnlyASpectator()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsOnlyASpectator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsOnlyASpectator_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsOnlyASpectator_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerState:GetPlayerName
    static readonly IntPtr GetPlayerName_NativeFunction;
    static readonly int GetPlayerName_ParamsSize;
    static readonly int GetPlayerName_ReturnValue_Offset;
    
    public string GetPlayerName()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayerName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPlayerName_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetPlayerName_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerState:GetPlayerController
    static readonly IntPtr GetPlayerController_NativeFunction;
    static readonly int GetPlayerController_ParamsSize;
    static readonly int GetPlayerController_ReturnValue_Offset;
    
    public UnrealSharp.Engine.PlayerController GetPlayerController()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayerController_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPlayerController_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PlayerController returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PlayerController>.FromNative(IntPtr.Add(ParamsBuffer, GetPlayerController_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerState:GetPingInMilliseconds
    static readonly IntPtr GetPingInMilliseconds_NativeFunction;
    static readonly int GetPingInMilliseconds_ParamsSize;
    static readonly int GetPingInMilliseconds_ReturnValue_Offset;
    
    public float GetPingInMilliseconds()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPingInMilliseconds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPingInMilliseconds_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetPingInMilliseconds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerState:GetPawn
    static readonly IntPtr GetPawn_NativeFunction;
    static readonly int GetPawn_ParamsSize;
    static readonly int GetPawn_ReturnValue_Offset;
    
    public UnrealSharp.Engine.Pawn GetPawn()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPawn_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPawn_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Pawn returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative(IntPtr.Add(ParamsBuffer, GetPawn_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerState:BP_GetUniqueId
    static readonly IntPtr BP_GetUniqueId_NativeFunction;
    static readonly int BP_GetUniqueId_ParamsSize;
    static readonly int BP_GetUniqueId_ReturnValue_Offset;
    
    public UnrealSharp.Engine.UniqueNetIdRepl BP_GetUniqueId()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BP_GetUniqueId_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BP_GetUniqueId_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.UniqueNetIdRepl returnValue;
            returnValue = UnrealSharp.Engine.UniqueNetIdReplMarshaler.FromNative(IntPtr.Add(ParamsBuffer, BP_GetUniqueId_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PlayerState:ReceiveOverrideWith
    IntPtr ReceiveOverrideWith_NativeFunction;
    static readonly int ReceiveOverrideWith_ParamsSize;
    static readonly int ReceiveOverrideWith_OldPlayerState_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void ReceiveOverrideWith(UnrealSharp.Engine.PlayerState oldPlayerState)
    {
        unsafe
        {
            if (ReceiveOverrideWith_NativeFunction == IntPtr.Zero)
            {
                ReceiveOverrideWith_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveOverrideWith");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveOverrideWith_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerState>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveOverrideWith_OldPlayerState_Offset), 0, null, oldPlayerState);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveOverrideWith_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveOverrideWith_Implementation(UnrealSharp.Engine.PlayerState oldPlayerState)
    {
    }
    void Invoke_ReceiveOverrideWith(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.PlayerState oldPlayerState = ObjectMarshaller<UnrealSharp.Engine.PlayerState>.FromNative(IntPtr.Add(buffer, ReceiveOverrideWith_OldPlayerState_Offset), 0, null);
            ReceiveOverrideWith_Implementation(oldPlayerState);
        }
    }
    
    // Function /Script/Engine.PlayerState:ReceiveCopyProperties
    IntPtr ReceiveCopyProperties_NativeFunction;
    static readonly int ReceiveCopyProperties_ParamsSize;
    static readonly int ReceiveCopyProperties_NewPlayerState_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void ReceiveCopyProperties(UnrealSharp.Engine.PlayerState newPlayerState)
    {
        unsafe
        {
            if (ReceiveCopyProperties_NativeFunction == IntPtr.Zero)
            {
                ReceiveCopyProperties_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveCopyProperties");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceiveCopyProperties_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerState>.ToNative(IntPtr.Add(ParamsBuffer, ReceiveCopyProperties_NewPlayerState_Offset), 0, null, newPlayerState);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveCopyProperties_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveCopyProperties_Implementation(UnrealSharp.Engine.PlayerState newPlayerState)
    {
    }
    void Invoke_ReceiveCopyProperties(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.PlayerState newPlayerState = ObjectMarshaller<UnrealSharp.Engine.PlayerState>.FromNative(IntPtr.Add(buffer, ReceiveCopyProperties_NewPlayerState_Offset), 0, null);
            ReceiveCopyProperties_Implementation(newPlayerState);
        }
    }
    
    
}
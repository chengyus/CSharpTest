// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class PluginBlueprintLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static PluginBlueprintLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PluginBlueprintLibrary");
        
        
        IsPluginMounted_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPluginMounted");
        IsPluginMounted_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPluginMounted_NativeFunction);
        IsPluginMounted_PluginName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPluginMounted_NativeFunction, "PluginName");
        IsPluginMounted_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPluginMounted_NativeFunction, "ReturnValue");
        GetPluginVersionName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPluginVersionName");
        GetPluginVersionName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPluginVersionName_NativeFunction);
        GetPluginVersionName_PluginName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginVersionName_NativeFunction, "PluginName");
        GetPluginVersionName_OutVersionName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginVersionName_NativeFunction, "OutVersionName");
        GetPluginVersionName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginVersionName_NativeFunction, "ReturnValue");
        GetPluginVersion_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPluginVersion");
        GetPluginVersion_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPluginVersion_NativeFunction);
        GetPluginVersion_PluginName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginVersion_NativeFunction, "PluginName");
        GetPluginVersion_OutVersion_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginVersion_NativeFunction, "OutVersion");
        GetPluginVersion_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginVersion_NativeFunction, "ReturnValue");
        GetPluginNameForObjectPath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPluginNameForObjectPath");
        GetPluginNameForObjectPath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPluginNameForObjectPath_NativeFunction);
        GetPluginNameForObjectPath_ObjectPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginNameForObjectPath_NativeFunction, "ObjectPath");
        GetPluginNameForObjectPath_OutPluginName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginNameForObjectPath_NativeFunction, "OutPluginName");
        GetPluginNameForObjectPath_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginNameForObjectPath_NativeFunction, "ReturnValue");
        GetPluginMountedAssetPath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPluginMountedAssetPath");
        GetPluginMountedAssetPath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPluginMountedAssetPath_NativeFunction);
        GetPluginMountedAssetPath_PluginName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginMountedAssetPath_NativeFunction, "PluginName");
        GetPluginMountedAssetPath_OutAssetPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginMountedAssetPath_NativeFunction, "OutAssetPath");
        GetPluginMountedAssetPath_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginMountedAssetPath_NativeFunction, "ReturnValue");
        GetPluginEditorCustomVirtualPath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPluginEditorCustomVirtualPath");
        GetPluginEditorCustomVirtualPath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPluginEditorCustomVirtualPath_NativeFunction);
        GetPluginEditorCustomVirtualPath_PluginName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginEditorCustomVirtualPath_NativeFunction, "PluginName");
        GetPluginEditorCustomVirtualPath_OutVirtualPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginEditorCustomVirtualPath_NativeFunction, "OutVirtualPath");
        GetPluginEditorCustomVirtualPath_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginEditorCustomVirtualPath_NativeFunction, "ReturnValue");
        GetPluginDescriptorFilePath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPluginDescriptorFilePath");
        GetPluginDescriptorFilePath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPluginDescriptorFilePath_NativeFunction);
        GetPluginDescriptorFilePath_PluginName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginDescriptorFilePath_NativeFunction, "PluginName");
        GetPluginDescriptorFilePath_OutFilePath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginDescriptorFilePath_NativeFunction, "OutFilePath");
        GetPluginDescriptorFilePath_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginDescriptorFilePath_NativeFunction, "ReturnValue");
        GetPluginDescription_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPluginDescription");
        GetPluginDescription_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPluginDescription_NativeFunction);
        GetPluginDescription_PluginName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginDescription_NativeFunction, "PluginName");
        GetPluginDescription_OutDescription_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginDescription_NativeFunction, "OutDescription");
        GetPluginDescription_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginDescription_NativeFunction, "ReturnValue");
        GetPluginContentDir_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPluginContentDir");
        GetPluginContentDir_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPluginContentDir_NativeFunction);
        GetPluginContentDir_PluginName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginContentDir_NativeFunction, "PluginName");
        GetPluginContentDir_OutContentDir_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginContentDir_NativeFunction, "OutContentDir");
        GetPluginContentDir_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginContentDir_NativeFunction, "ReturnValue");
        GetPluginBaseDir_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPluginBaseDir");
        GetPluginBaseDir_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPluginBaseDir_NativeFunction);
        GetPluginBaseDir_PluginName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginBaseDir_NativeFunction, "PluginName");
        GetPluginBaseDir_OutBaseDir_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginBaseDir_NativeFunction, "OutBaseDir");
        GetPluginBaseDir_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPluginBaseDir_NativeFunction, "ReturnValue");
        
        
    }
    
    protected PluginBlueprintLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.PluginBlueprintLibrary:IsPluginMounted
    static readonly IntPtr IsPluginMounted_NativeFunction;
    static readonly int IsPluginMounted_ParamsSize;
    static readonly int IsPluginMounted_PluginName_Offset;
    static readonly int IsPluginMounted_ReturnValue_Offset;
    
    public static bool IsPluginMounted(string pluginName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPluginMounted_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr PluginName_NativePtr = IntPtr.Add(ParamsBuffer,IsPluginMounted_PluginName_Offset);
            StringMarshaller.ToNative(PluginName_NativePtr,0,null,pluginName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsPluginMounted_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPluginMounted_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(PluginName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PluginBlueprintLibrary:GetPluginVersionName
    static readonly IntPtr GetPluginVersionName_NativeFunction;
    static readonly int GetPluginVersionName_ParamsSize;
    static readonly int GetPluginVersionName_PluginName_Offset;
    static readonly int GetPluginVersionName_OutVersionName_Offset;
    static readonly int GetPluginVersionName_ReturnValue_Offset;
    
    public static bool GetPluginVersionName(string pluginName, out string outVersionName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPluginVersionName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr PluginName_NativePtr = IntPtr.Add(ParamsBuffer,GetPluginVersionName_PluginName_Offset);
            StringMarshaller.ToNative(PluginName_NativePtr,0,null,pluginName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPluginVersionName_NativeFunction, ParamsBuffer);
            
            IntPtr OutVersionName_NativePtr = IntPtr.Add(ParamsBuffer,GetPluginVersionName_OutVersionName_Offset);
            outVersionName = StringMarshaller.FromNative(OutVersionName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutVersionName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetPluginVersionName_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(PluginName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PluginBlueprintLibrary:GetPluginVersion
    static readonly IntPtr GetPluginVersion_NativeFunction;
    static readonly int GetPluginVersion_ParamsSize;
    static readonly int GetPluginVersion_PluginName_Offset;
    static readonly int GetPluginVersion_OutVersion_Offset;
    static readonly int GetPluginVersion_ReturnValue_Offset;
    
    public static bool GetPluginVersion(string pluginName, out int outVersion)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPluginVersion_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr PluginName_NativePtr = IntPtr.Add(ParamsBuffer,GetPluginVersion_PluginName_Offset);
            StringMarshaller.ToNative(PluginName_NativePtr,0,null,pluginName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPluginVersion_NativeFunction, ParamsBuffer);
            
            outVersion = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetPluginVersion_OutVersion_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetPluginVersion_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(PluginName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PluginBlueprintLibrary:GetPluginNameForObjectPath
    static readonly IntPtr GetPluginNameForObjectPath_NativeFunction;
    static readonly int GetPluginNameForObjectPath_ParamsSize;
    static readonly int GetPluginNameForObjectPath_ObjectPath_Offset;
    static readonly int GetPluginNameForObjectPath_OutPluginName_Offset;
    static readonly int GetPluginNameForObjectPath_ReturnValue_Offset;
    
    public static bool GetPluginNameForObjectPath(UnrealSharp.CoreUObject.SoftObjectPath objectPath, out string outPluginName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPluginNameForObjectPath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.SoftObjectPathMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetPluginNameForObjectPath_ObjectPath_Offset), 0, null, objectPath);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPluginNameForObjectPath_NativeFunction, ParamsBuffer);
            
            IntPtr OutPluginName_NativePtr = IntPtr.Add(ParamsBuffer,GetPluginNameForObjectPath_OutPluginName_Offset);
            outPluginName = StringMarshaller.FromNative(OutPluginName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutPluginName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetPluginNameForObjectPath_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PluginBlueprintLibrary:GetPluginMountedAssetPath
    static readonly IntPtr GetPluginMountedAssetPath_NativeFunction;
    static readonly int GetPluginMountedAssetPath_ParamsSize;
    static readonly int GetPluginMountedAssetPath_PluginName_Offset;
    static readonly int GetPluginMountedAssetPath_OutAssetPath_Offset;
    static readonly int GetPluginMountedAssetPath_ReturnValue_Offset;
    
    public static bool GetPluginMountedAssetPath(string pluginName, out string outAssetPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPluginMountedAssetPath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr PluginName_NativePtr = IntPtr.Add(ParamsBuffer,GetPluginMountedAssetPath_PluginName_Offset);
            StringMarshaller.ToNative(PluginName_NativePtr,0,null,pluginName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPluginMountedAssetPath_NativeFunction, ParamsBuffer);
            
            IntPtr OutAssetPath_NativePtr = IntPtr.Add(ParamsBuffer,GetPluginMountedAssetPath_OutAssetPath_Offset);
            outAssetPath = StringMarshaller.FromNative(OutAssetPath_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutAssetPath_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetPluginMountedAssetPath_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(PluginName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PluginBlueprintLibrary:GetPluginEditorCustomVirtualPath
    static readonly IntPtr GetPluginEditorCustomVirtualPath_NativeFunction;
    static readonly int GetPluginEditorCustomVirtualPath_ParamsSize;
    static readonly int GetPluginEditorCustomVirtualPath_PluginName_Offset;
    static readonly int GetPluginEditorCustomVirtualPath_OutVirtualPath_Offset;
    static readonly int GetPluginEditorCustomVirtualPath_ReturnValue_Offset;
    
    public static bool GetPluginEditorCustomVirtualPath(string pluginName, out string outVirtualPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPluginEditorCustomVirtualPath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr PluginName_NativePtr = IntPtr.Add(ParamsBuffer,GetPluginEditorCustomVirtualPath_PluginName_Offset);
            StringMarshaller.ToNative(PluginName_NativePtr,0,null,pluginName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPluginEditorCustomVirtualPath_NativeFunction, ParamsBuffer);
            
            IntPtr OutVirtualPath_NativePtr = IntPtr.Add(ParamsBuffer,GetPluginEditorCustomVirtualPath_OutVirtualPath_Offset);
            outVirtualPath = StringMarshaller.FromNative(OutVirtualPath_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutVirtualPath_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetPluginEditorCustomVirtualPath_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(PluginName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PluginBlueprintLibrary:GetPluginDescriptorFilePath
    static readonly IntPtr GetPluginDescriptorFilePath_NativeFunction;
    static readonly int GetPluginDescriptorFilePath_ParamsSize;
    static readonly int GetPluginDescriptorFilePath_PluginName_Offset;
    static readonly int GetPluginDescriptorFilePath_OutFilePath_Offset;
    static readonly int GetPluginDescriptorFilePath_ReturnValue_Offset;
    
    public static bool GetPluginDescriptorFilePath(string pluginName, out string outFilePath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPluginDescriptorFilePath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr PluginName_NativePtr = IntPtr.Add(ParamsBuffer,GetPluginDescriptorFilePath_PluginName_Offset);
            StringMarshaller.ToNative(PluginName_NativePtr,0,null,pluginName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPluginDescriptorFilePath_NativeFunction, ParamsBuffer);
            
            IntPtr OutFilePath_NativePtr = IntPtr.Add(ParamsBuffer,GetPluginDescriptorFilePath_OutFilePath_Offset);
            outFilePath = StringMarshaller.FromNative(OutFilePath_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutFilePath_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetPluginDescriptorFilePath_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(PluginName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PluginBlueprintLibrary:GetPluginDescription
    static readonly IntPtr GetPluginDescription_NativeFunction;
    static readonly int GetPluginDescription_ParamsSize;
    static readonly int GetPluginDescription_PluginName_Offset;
    static readonly int GetPluginDescription_OutDescription_Offset;
    static readonly int GetPluginDescription_ReturnValue_Offset;
    
    public static bool GetPluginDescription(string pluginName, out string outDescription)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPluginDescription_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr PluginName_NativePtr = IntPtr.Add(ParamsBuffer,GetPluginDescription_PluginName_Offset);
            StringMarshaller.ToNative(PluginName_NativePtr,0,null,pluginName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPluginDescription_NativeFunction, ParamsBuffer);
            
            IntPtr OutDescription_NativePtr = IntPtr.Add(ParamsBuffer,GetPluginDescription_OutDescription_Offset);
            outDescription = StringMarshaller.FromNative(OutDescription_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutDescription_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetPluginDescription_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(PluginName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PluginBlueprintLibrary:GetPluginContentDir
    static readonly IntPtr GetPluginContentDir_NativeFunction;
    static readonly int GetPluginContentDir_ParamsSize;
    static readonly int GetPluginContentDir_PluginName_Offset;
    static readonly int GetPluginContentDir_OutContentDir_Offset;
    static readonly int GetPluginContentDir_ReturnValue_Offset;
    
    public static bool GetPluginContentDir(string pluginName, out string outContentDir)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPluginContentDir_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr PluginName_NativePtr = IntPtr.Add(ParamsBuffer,GetPluginContentDir_PluginName_Offset);
            StringMarshaller.ToNative(PluginName_NativePtr,0,null,pluginName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPluginContentDir_NativeFunction, ParamsBuffer);
            
            IntPtr OutContentDir_NativePtr = IntPtr.Add(ParamsBuffer,GetPluginContentDir_OutContentDir_Offset);
            outContentDir = StringMarshaller.FromNative(OutContentDir_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutContentDir_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetPluginContentDir_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(PluginName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PluginBlueprintLibrary:GetPluginBaseDir
    static readonly IntPtr GetPluginBaseDir_NativeFunction;
    static readonly int GetPluginBaseDir_ParamsSize;
    static readonly int GetPluginBaseDir_PluginName_Offset;
    static readonly int GetPluginBaseDir_OutBaseDir_Offset;
    static readonly int GetPluginBaseDir_ReturnValue_Offset;
    
    public static bool GetPluginBaseDir(string pluginName, out string outBaseDir)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPluginBaseDir_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr PluginName_NativePtr = IntPtr.Add(ParamsBuffer,GetPluginBaseDir_PluginName_Offset);
            StringMarshaller.ToNative(PluginName_NativePtr,0,null,pluginName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPluginBaseDir_NativeFunction, ParamsBuffer);
            
            IntPtr OutBaseDir_NativePtr = IntPtr.Add(ParamsBuffer,GetPluginBaseDir_OutBaseDir_Offset);
            outBaseDir = StringMarshaller.FromNative(OutBaseDir_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutBaseDir_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetPluginBaseDir_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(PluginName_NativePtr, 0);
            return returnValue;
        }
    }
    
    
}
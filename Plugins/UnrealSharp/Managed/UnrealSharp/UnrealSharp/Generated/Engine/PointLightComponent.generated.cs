// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class PointLightComponent : UnrealSharp.Engine.LocalLightComponent
{
    
    static PointLightComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PointLightComponent");
        
        bUseInverseSquaredFalloff_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseInverseSquaredFalloff");
        bUseInverseSquaredFalloff_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseInverseSquaredFalloff");
        LightFalloffExponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LightFalloffExponent");
        SourceRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SourceRadius");
        SoftSourceRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SoftSourceRadius");
        SourceLength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SourceLength");
        
        SetUseInverseSquaredFalloff_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetUseInverseSquaredFalloff");
        SetUseInverseSquaredFalloff_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetUseInverseSquaredFalloff_NativeFunction);
        SetUseInverseSquaredFalloff_bNewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUseInverseSquaredFalloff_NativeFunction, "bNewValue");
        SetSourceRadius_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSourceRadius");
        SetSourceRadius_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSourceRadius_NativeFunction);
        SetSourceRadius_bNewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSourceRadius_NativeFunction, "bNewValue");
        SetSourceLength_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSourceLength");
        SetSourceLength_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSourceLength_NativeFunction);
        SetSourceLength_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSourceLength_NativeFunction, "NewValue");
        SetSoftSourceRadius_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSoftSourceRadius");
        SetSoftSourceRadius_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSoftSourceRadius_NativeFunction);
        SetSoftSourceRadius_bNewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSoftSourceRadius_NativeFunction, "bNewValue");
        SetLightFalloffExponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLightFalloffExponent");
        SetLightFalloffExponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLightFalloffExponent_NativeFunction);
        SetLightFalloffExponent_NewLightFalloffExponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLightFalloffExponent_NativeFunction, "NewLightFalloffExponent");
        SetInverseExposureBlend_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetInverseExposureBlend");
        SetInverseExposureBlend_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetInverseExposureBlend_NativeFunction);
        SetInverseExposureBlend_NewInverseExposureBlend_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInverseExposureBlend_NativeFunction, "NewInverseExposureBlend");
        
        
    }
    
    protected PointLightComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/Engine.PointLightComponent:bUseInverseSquaredFalloff
    static readonly int bUseInverseSquaredFalloff_Offset;
    static readonly IntPtr bUseInverseSquaredFalloff_NativeProperty;
    
    public bool bUseInverseSquaredFalloff
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseInverseSquaredFalloff_NativeProperty, bUseInverseSquaredFalloff_Offset);
        }
    }
    
    // FloatProperty /Script/Engine.PointLightComponent:LightFalloffExponent
    static readonly int LightFalloffExponent_Offset;
    
    public float LightFalloffExponent
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LightFalloffExponent_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.PointLightComponent:SourceRadius
    static readonly int SourceRadius_Offset;
    
    public float SourceRadius
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SourceRadius_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.PointLightComponent:SoftSourceRadius
    static readonly int SoftSourceRadius_Offset;
    
    public float SoftSourceRadius
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SoftSourceRadius_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.PointLightComponent:SourceLength
    static readonly int SourceLength_Offset;
    
    public float SourceLength
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SourceLength_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.PointLightComponent:SetUseInverseSquaredFalloff
    static readonly IntPtr SetUseInverseSquaredFalloff_NativeFunction;
    static readonly int SetUseInverseSquaredFalloff_ParamsSize;
    static readonly int SetUseInverseSquaredFalloff_bNewValue_Offset;
    
    public void SetUseInverseSquaredFalloff(bool bNewValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetUseInverseSquaredFalloff_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetUseInverseSquaredFalloff_bNewValue_Offset), 0, null, bNewValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetUseInverseSquaredFalloff_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PointLightComponent:SetSourceRadius
    static readonly IntPtr SetSourceRadius_NativeFunction;
    static readonly int SetSourceRadius_ParamsSize;
    static readonly int SetSourceRadius_bNewValue_Offset;
    
    public void SetSourceRadius(float bNewValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSourceRadius_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSourceRadius_bNewValue_Offset), 0, null, bNewValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSourceRadius_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PointLightComponent:SetSourceLength
    static readonly IntPtr SetSourceLength_NativeFunction;
    static readonly int SetSourceLength_ParamsSize;
    static readonly int SetSourceLength_NewValue_Offset;
    
    public void SetSourceLength(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSourceLength_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSourceLength_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSourceLength_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PointLightComponent:SetSoftSourceRadius
    static readonly IntPtr SetSoftSourceRadius_NativeFunction;
    static readonly int SetSoftSourceRadius_ParamsSize;
    static readonly int SetSoftSourceRadius_bNewValue_Offset;
    
    public void SetSoftSourceRadius(float bNewValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSoftSourceRadius_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSoftSourceRadius_bNewValue_Offset), 0, null, bNewValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSoftSourceRadius_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PointLightComponent:SetLightFalloffExponent
    static readonly IntPtr SetLightFalloffExponent_NativeFunction;
    static readonly int SetLightFalloffExponent_ParamsSize;
    static readonly int SetLightFalloffExponent_NewLightFalloffExponent_Offset;
    
    public void SetLightFalloffExponent(float newLightFalloffExponent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLightFalloffExponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLightFalloffExponent_NewLightFalloffExponent_Offset), 0, null, newLightFalloffExponent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLightFalloffExponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PointLightComponent:SetInverseExposureBlend
    static readonly IntPtr SetInverseExposureBlend_NativeFunction;
    static readonly int SetInverseExposureBlend_ParamsSize;
    static readonly int SetInverseExposureBlend_NewInverseExposureBlend_Offset;
    
    public void SetInverseExposureBlend(float newInverseExposureBlend)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetInverseExposureBlend_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetInverseExposureBlend_NewInverseExposureBlend_Offset), 0, null, newInverseExposureBlend);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetInverseExposureBlend_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
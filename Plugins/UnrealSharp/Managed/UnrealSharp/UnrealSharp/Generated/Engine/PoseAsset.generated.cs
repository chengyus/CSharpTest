// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class PoseAsset : UnrealSharp.Engine.AnimationAsset
{
    
    static PoseAsset()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PoseAsset");
        
        
        UpdatePoseFromAnimation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UpdatePoseFromAnimation");
        UpdatePoseFromAnimation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UpdatePoseFromAnimation_NativeFunction);
        UpdatePoseFromAnimation_AnimSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdatePoseFromAnimation_NativeFunction, "AnimSequence");
        SetBasePoseName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBasePoseName");
        SetBasePoseName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBasePoseName_NativeFunction);
        SetBasePoseName_NewBasePoseName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBasePoseName_NativeFunction, "NewBasePoseName");
        SetBasePoseName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBasePoseName_NativeFunction, "ReturnValue");
        RenamePose_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RenamePose");
        RenamePose_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RenamePose_NativeFunction);
        RenamePose_OriginalPoseName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenamePose_NativeFunction, "OriginalPoseName");
        RenamePose_NewPoseName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenamePose_NativeFunction, "NewPoseName");
        GetPoseNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPoseNames");
        GetPoseNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPoseNames_NativeFunction);
        GetPoseNames_PoseNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPoseNames_NativeFunction, "PoseNames");
        GetPoseNames_PoseNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetPoseNames_NativeFunction, "PoseNames");
        GetBasePoseName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBasePoseName");
        GetBasePoseName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBasePoseName_NativeFunction);
        GetBasePoseName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBasePoseName_NativeFunction, "ReturnValue");
        
        
    }
    
    protected PoseAsset(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.PoseAsset:UpdatePoseFromAnimation
    static readonly IntPtr UpdatePoseFromAnimation_NativeFunction;
    static readonly int UpdatePoseFromAnimation_ParamsSize;
    static readonly int UpdatePoseFromAnimation_AnimSequence_Offset;
    
    public void UpdatePoseFromAnimation(UnrealSharp.Engine.AnimSequence animSequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UpdatePoseFromAnimation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AnimSequence>.ToNative(IntPtr.Add(ParamsBuffer, UpdatePoseFromAnimation_AnimSequence_Offset), 0, null, animSequence);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UpdatePoseFromAnimation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PoseAsset:SetBasePoseName
    static readonly IntPtr SetBasePoseName_NativeFunction;
    static readonly int SetBasePoseName_ParamsSize;
    static readonly int SetBasePoseName_NewBasePoseName_Offset;
    static readonly int SetBasePoseName_ReturnValue_Offset;
    
    public bool SetBasePoseName(Name newBasePoseName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBasePoseName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetBasePoseName_NewBasePoseName_Offset), 0, null, newBasePoseName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBasePoseName_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetBasePoseName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PoseAsset:RenamePose
    static readonly IntPtr RenamePose_NativeFunction;
    static readonly int RenamePose_ParamsSize;
    static readonly int RenamePose_OriginalPoseName_Offset;
    static readonly int RenamePose_NewPoseName_Offset;
    
    public void RenamePose(Name originalPoseName, Name newPoseName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RenamePose_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RenamePose_OriginalPoseName_Offset), 0, null, originalPoseName);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RenamePose_NewPoseName_Offset), 0, null, newPoseName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RenamePose_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.PoseAsset:GetPoseNames
    static readonly IntPtr GetPoseNames_NativeFunction;
    static readonly int GetPoseNames_ParamsSize;
    static readonly int GetPoseNames_PoseNames_Offset;
    static readonly int GetPoseNames_PoseNames_ElementSize;
    
    public void GetPoseNames(out System.Collections.Generic.IList<Name> poseNames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPoseNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPoseNames_NativeFunction, ParamsBuffer);
            
            IntPtr PoseNames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetPoseNames_PoseNames_Offset);
            UnrealArrayCopyMarshaler<Name> PoseNames_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetPoseNames_PoseNames_ElementSize);
            poseNames = PoseNames_Marshaler.FromNative(PoseNames_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(PoseNames_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.PoseAsset:GetBasePoseName
    static readonly IntPtr GetBasePoseName_NativeFunction;
    static readonly int GetBasePoseName_ParamsSize;
    static readonly int GetBasePoseName_ReturnValue_Offset;
    
    public Name GetBasePoseName()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBasePoseName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBasePoseName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetBasePoseName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
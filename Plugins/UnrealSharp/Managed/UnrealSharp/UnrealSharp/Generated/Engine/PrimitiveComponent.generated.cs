// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
abstract public partial class PrimitiveComponent : UnrealSharp.Engine.SceneComponent
{
    
    static PrimitiveComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PrimitiveComponent");
        
        MinDrawDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinDrawDistance");
        LDMaxDrawDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LDMaxDrawDistance");
        CachedMaxDrawDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CachedMaxDrawDistance");
        IndirectLightingCacheQuality_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "IndirectLightingCacheQuality");
        LightmapType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LightmapType");
        HLODBatchingPolicy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "HLODBatchingPolicy");
        bEnableAutoLODGeneration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableAutoLODGeneration");
        bEnableAutoLODGeneration_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableAutoLODGeneration");
        bNeverDistanceCull_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bNeverDistanceCull");
        bNeverDistanceCull_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bNeverDistanceCull");
        bAlwaysCreatePhysicsState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAlwaysCreatePhysicsState");
        bAlwaysCreatePhysicsState_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAlwaysCreatePhysicsState");
        bGenerateOverlapEvents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bGenerateOverlapEvents");
        bGenerateOverlapEvents_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bGenerateOverlapEvents");
        bMultiBodyOverlap_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bMultiBodyOverlap");
        bMultiBodyOverlap_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bMultiBodyOverlap");
        bTraceComplexOnMove_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bTraceComplexOnMove");
        bTraceComplexOnMove_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bTraceComplexOnMove");
        bReturnMaterialOnMove_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bReturnMaterialOnMove");
        bReturnMaterialOnMove_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bReturnMaterialOnMove");
        bAllowCullDistanceVolume_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAllowCullDistanceVolume");
        bAllowCullDistanceVolume_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAllowCullDistanceVolume");
        bVisibleInReflectionCaptures_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bVisibleInReflectionCaptures");
        bVisibleInReflectionCaptures_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bVisibleInReflectionCaptures");
        bVisibleInRealTimeSkyCaptures_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bVisibleInRealTimeSkyCaptures");
        bVisibleInRealTimeSkyCaptures_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bVisibleInRealTimeSkyCaptures");
        bVisibleInRayTracing_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bVisibleInRayTracing");
        bVisibleInRayTracing_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bVisibleInRayTracing");
        bRenderInMainPass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bRenderInMainPass");
        bRenderInMainPass_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bRenderInMainPass");
        bRenderInDepthPass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bRenderInDepthPass");
        bRenderInDepthPass_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bRenderInDepthPass");
        bReceivesDecals_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bReceivesDecals");
        bReceivesDecals_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bReceivesDecals");
        bHoldout_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bHoldout");
        bHoldout_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bHoldout");
        bOwnerNoSee_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOwnerNoSee");
        bOwnerNoSee_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bOwnerNoSee");
        bOnlyOwnerSee_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOnlyOwnerSee");
        bOnlyOwnerSee_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bOnlyOwnerSee");
        bTreatAsBackgroundForOcclusion_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bTreatAsBackgroundForOcclusion");
        bTreatAsBackgroundForOcclusion_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bTreatAsBackgroundForOcclusion");
        bUseAsOccluder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseAsOccluder");
        bUseAsOccluder_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseAsOccluder");
        bForceMipStreaming_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bForceMipStreaming");
        bForceMipStreaming_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bForceMipStreaming");
        CastShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CastShadow");
        CastShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "CastShadow");
        bEmissiveLightSource_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEmissiveLightSource");
        bEmissiveLightSource_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEmissiveLightSource");
        bAffectDynamicIndirectLighting_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAffectDynamicIndirectLighting");
        bAffectDynamicIndirectLighting_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAffectDynamicIndirectLighting");
        bAffectIndirectLightingWhileHidden_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAffectIndirectLightingWhileHidden");
        bAffectIndirectLightingWhileHidden_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAffectIndirectLightingWhileHidden");
        bAffectDistanceFieldLighting_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAffectDistanceFieldLighting");
        bAffectDistanceFieldLighting_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAffectDistanceFieldLighting");
        bCastDynamicShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastDynamicShadow");
        bCastDynamicShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastDynamicShadow");
        bCastStaticShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastStaticShadow");
        bCastStaticShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastStaticShadow");
        ShadowCacheInvalidationBehavior_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShadowCacheInvalidationBehavior");
        bCastVolumetricTranslucentShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastVolumetricTranslucentShadow");
        bCastVolumetricTranslucentShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastVolumetricTranslucentShadow");
        bCastContactShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastContactShadow");
        bCastContactShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastContactShadow");
        bSelfShadowOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSelfShadowOnly");
        bSelfShadowOnly_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bSelfShadowOnly");
        bCastFarShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastFarShadow");
        bCastFarShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastFarShadow");
        bCastInsetShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastInsetShadow");
        bCastInsetShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastInsetShadow");
        bCastCinematicShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastCinematicShadow");
        bCastCinematicShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastCinematicShadow");
        bCastHiddenShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastHiddenShadow");
        bCastHiddenShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastHiddenShadow");
        bCastShadowAsTwoSided_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastShadowAsTwoSided");
        bCastShadowAsTwoSided_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastShadowAsTwoSided");
        bLightAttachmentsAsGroup_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bLightAttachmentsAsGroup");
        bLightAttachmentsAsGroup_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bLightAttachmentsAsGroup");
        bExcludeFromLightAttachmentGroup_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bExcludeFromLightAttachmentGroup");
        bExcludeFromLightAttachmentGroup_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bExcludeFromLightAttachmentGroup");
        bReceiveMobileCSMShadows_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bReceiveMobileCSMShadows");
        bReceiveMobileCSMShadows_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bReceiveMobileCSMShadows");
        bSingleSampleShadowFromStationaryLights_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSingleSampleShadowFromStationaryLights");
        bSingleSampleShadowFromStationaryLights_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bSingleSampleShadowFromStationaryLights");
        bIgnoreRadialImpulse_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIgnoreRadialImpulse");
        bIgnoreRadialImpulse_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIgnoreRadialImpulse");
        bIgnoreRadialForce_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIgnoreRadialForce");
        bIgnoreRadialForce_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIgnoreRadialForce");
        bApplyImpulseOnDamage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bApplyImpulseOnDamage");
        bApplyImpulseOnDamage_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bApplyImpulseOnDamage");
        bReplicatePhysicsToAutonomousProxy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bReplicatePhysicsToAutonomousProxy");
        bReplicatePhysicsToAutonomousProxy_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bReplicatePhysicsToAutonomousProxy");
        bRenderCustomDepth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bRenderCustomDepth");
        bRenderCustomDepth_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bRenderCustomDepth");
        bVisibleInSceneCaptureOnly_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bVisibleInSceneCaptureOnly");
        bVisibleInSceneCaptureOnly_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bVisibleInSceneCaptureOnly");
        bHiddenInSceneCapture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bHiddenInSceneCapture");
        bHiddenInSceneCapture_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bHiddenInSceneCapture");
        bStaticWhenNotMoveable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bStaticWhenNotMoveable");
        bStaticWhenNotMoveable_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bStaticWhenNotMoveable");
        CanCharacterStepUpOn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CanCharacterStepUpOn");
        LightingChannels_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LightingChannels");
        RayTracingGroupId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RayTracingGroupId");
        CustomDepthStencilValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CustomDepthStencilValue");
        TranslucencySortPriority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TranslucencySortPriority");
        TranslucencySortDistanceOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TranslucencySortDistanceOffset");
        RuntimeVirtualTextures_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RuntimeVirtualTextures");
        RuntimeVirtualTextures_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "RuntimeVirtualTextures");
        VirtualTextureRenderPassType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VirtualTextureRenderPassType");
        BodyInstance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BodyInstance");
        RayTracingGroupCullingPriority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RayTracingGroupCullingPriority");
        CustomDepthStencilWriteMask_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CustomDepthStencilWriteMask");
        
        WasRecentlyRendered_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "WasRecentlyRendered");
        WasRecentlyRendered_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(WasRecentlyRendered_NativeFunction);
        WasRecentlyRendered_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WasRecentlyRendered_NativeFunction, "Tolerance");
        WasRecentlyRendered_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WasRecentlyRendered_NativeFunction, "ReturnValue");
        WakeRigidBody_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "WakeRigidBody");
        WakeRigidBody_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(WakeRigidBody_NativeFunction);
        WakeRigidBody_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WakeRigidBody_NativeFunction, "BoneName");
        WakeAllRigidBodies_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "WakeAllRigidBodies");
        SetWalkableSlopeOverride_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWalkableSlopeOverride");
        SetWalkableSlopeOverride_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWalkableSlopeOverride_NativeFunction);
        SetWalkableSlopeOverride_NewOverride_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWalkableSlopeOverride_NativeFunction, "NewOverride");
        SetVisibleInSceneCaptureOnly_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVisibleInSceneCaptureOnly");
        SetVisibleInSceneCaptureOnly_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVisibleInSceneCaptureOnly_NativeFunction);
        SetVisibleInSceneCaptureOnly_bValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVisibleInSceneCaptureOnly_NativeFunction, "bValue");
        SetVisibleInRayTracing_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVisibleInRayTracing");
        SetVisibleInRayTracing_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVisibleInRayTracing_NativeFunction);
        SetVisibleInRayTracing_bNewVisibleInRayTracing_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVisibleInRayTracing_NativeFunction, "bNewVisibleInRayTracing");
        SetVectorParameterForDefaultCustomPrimitiveData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVectorParameterForDefaultCustomPrimitiveData");
        SetVectorParameterForDefaultCustomPrimitiveData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVectorParameterForDefaultCustomPrimitiveData_NativeFunction);
        SetVectorParameterForDefaultCustomPrimitiveData_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVectorParameterForDefaultCustomPrimitiveData_NativeFunction, "ParameterName");
        SetVectorParameterForDefaultCustomPrimitiveData_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVectorParameterForDefaultCustomPrimitiveData_NativeFunction, "Value");
        SetVectorParameterForCustomPrimitiveData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVectorParameterForCustomPrimitiveData");
        SetVectorParameterForCustomPrimitiveData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVectorParameterForCustomPrimitiveData_NativeFunction);
        SetVectorParameterForCustomPrimitiveData_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVectorParameterForCustomPrimitiveData_NativeFunction, "ParameterName");
        SetVectorParameterForCustomPrimitiveData_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVectorParameterForCustomPrimitiveData_NativeFunction, "Value");
        SetUseCCD_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetUseCCD");
        SetUseCCD_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetUseCCD_NativeFunction);
        SetUseCCD_InUseCCD_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUseCCD_NativeFunction, "InUseCCD");
        SetUseCCD_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUseCCD_NativeFunction, "BoneName");
        SetTranslucentSortPriority_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTranslucentSortPriority");
        SetTranslucentSortPriority_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTranslucentSortPriority_NativeFunction);
        SetTranslucentSortPriority_NewTranslucentSortPriority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTranslucentSortPriority_NativeFunction, "NewTranslucentSortPriority");
        SetTranslucencySortDistanceOffset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTranslucencySortDistanceOffset");
        SetTranslucencySortDistanceOffset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTranslucencySortDistanceOffset_NativeFunction);
        SetTranslucencySortDistanceOffset_NewTranslucencySortDistanceOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTranslucencySortDistanceOffset_NativeFunction, "NewTranslucencySortDistanceOffset");
        SetStaticWhenNotMoveable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetStaticWhenNotMoveable");
        SetStaticWhenNotMoveable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetStaticWhenNotMoveable_NativeFunction);
        SetStaticWhenNotMoveable_bInStaticWhenNotMoveable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetStaticWhenNotMoveable_NativeFunction, "bInStaticWhenNotMoveable");
        SetSingleSampleShadowFromStationaryLights_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSingleSampleShadowFromStationaryLights");
        SetSingleSampleShadowFromStationaryLights_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSingleSampleShadowFromStationaryLights_NativeFunction);
        SetSingleSampleShadowFromStationaryLights_bNewSingleSampleShadowFromStationaryLights_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSingleSampleShadowFromStationaryLights_NativeFunction, "bNewSingleSampleShadowFromStationaryLights");
        SetSimulatePhysics_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSimulatePhysics");
        SetSimulatePhysics_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSimulatePhysics_NativeFunction);
        SetSimulatePhysics_bSimulate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSimulatePhysics_NativeFunction, "bSimulate");
        SetScalarParameterForDefaultCustomPrimitiveData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetScalarParameterForDefaultCustomPrimitiveData");
        SetScalarParameterForDefaultCustomPrimitiveData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetScalarParameterForDefaultCustomPrimitiveData_NativeFunction);
        SetScalarParameterForDefaultCustomPrimitiveData_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetScalarParameterForDefaultCustomPrimitiveData_NativeFunction, "ParameterName");
        SetScalarParameterForDefaultCustomPrimitiveData_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetScalarParameterForDefaultCustomPrimitiveData_NativeFunction, "Value");
        SetScalarParameterForCustomPrimitiveData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetScalarParameterForCustomPrimitiveData");
        SetScalarParameterForCustomPrimitiveData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetScalarParameterForCustomPrimitiveData_NativeFunction);
        SetScalarParameterForCustomPrimitiveData_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetScalarParameterForCustomPrimitiveData_NativeFunction, "ParameterName");
        SetScalarParameterForCustomPrimitiveData_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetScalarParameterForCustomPrimitiveData_NativeFunction, "Value");
        SetRenderInMainPass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRenderInMainPass");
        SetRenderInMainPass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRenderInMainPass_NativeFunction);
        SetRenderInMainPass_bValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRenderInMainPass_NativeFunction, "bValue");
        SetRenderInDepthPass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRenderInDepthPass");
        SetRenderInDepthPass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRenderInDepthPass_NativeFunction);
        SetRenderInDepthPass_bValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRenderInDepthPass_NativeFunction, "bValue");
        SetRenderCustomDepth_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRenderCustomDepth");
        SetRenderCustomDepth_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRenderCustomDepth_NativeFunction);
        SetRenderCustomDepth_bValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRenderCustomDepth_NativeFunction, "bValue");
        SetReceivesDecals_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetReceivesDecals");
        SetReceivesDecals_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetReceivesDecals_NativeFunction);
        SetReceivesDecals_bNewReceivesDecals_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetReceivesDecals_NativeFunction, "bNewReceivesDecals");
        SetPhysMaterialOverride_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPhysMaterialOverride");
        SetPhysMaterialOverride_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPhysMaterialOverride_NativeFunction);
        SetPhysMaterialOverride_NewPhysMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPhysMaterialOverride_NativeFunction, "NewPhysMaterial");
        SetPhysicsMaxAngularVelocityInRadians_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPhysicsMaxAngularVelocityInRadians");
        SetPhysicsMaxAngularVelocityInRadians_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPhysicsMaxAngularVelocityInRadians_NativeFunction);
        SetPhysicsMaxAngularVelocityInRadians_NewMaxAngVel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPhysicsMaxAngularVelocityInRadians_NativeFunction, "NewMaxAngVel");
        SetPhysicsMaxAngularVelocityInRadians_bAddToCurrent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPhysicsMaxAngularVelocityInRadians_NativeFunction, "bAddToCurrent");
        SetPhysicsMaxAngularVelocityInRadians_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPhysicsMaxAngularVelocityInRadians_NativeFunction, "BoneName");
        SetPhysicsMaxAngularVelocityInDegrees_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPhysicsMaxAngularVelocityInDegrees");
        SetPhysicsMaxAngularVelocityInDegrees_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPhysicsMaxAngularVelocityInDegrees_NativeFunction);
        SetPhysicsMaxAngularVelocityInDegrees_NewMaxAngVel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPhysicsMaxAngularVelocityInDegrees_NativeFunction, "NewMaxAngVel");
        SetPhysicsMaxAngularVelocityInDegrees_bAddToCurrent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPhysicsMaxAngularVelocityInDegrees_NativeFunction, "bAddToCurrent");
        SetPhysicsMaxAngularVelocityInDegrees_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPhysicsMaxAngularVelocityInDegrees_NativeFunction, "BoneName");
        SetPhysicsLinearVelocity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPhysicsLinearVelocity");
        SetPhysicsLinearVelocity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPhysicsLinearVelocity_NativeFunction);
        SetPhysicsLinearVelocity_NewVel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPhysicsLinearVelocity_NativeFunction, "NewVel");
        SetPhysicsLinearVelocity_bAddToCurrent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPhysicsLinearVelocity_NativeFunction, "bAddToCurrent");
        SetPhysicsLinearVelocity_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPhysicsLinearVelocity_NativeFunction, "BoneName");
        SetPhysicsAngularVelocityInRadians_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPhysicsAngularVelocityInRadians");
        SetPhysicsAngularVelocityInRadians_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPhysicsAngularVelocityInRadians_NativeFunction);
        SetPhysicsAngularVelocityInRadians_NewAngVel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPhysicsAngularVelocityInRadians_NativeFunction, "NewAngVel");
        SetPhysicsAngularVelocityInRadians_bAddToCurrent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPhysicsAngularVelocityInRadians_NativeFunction, "bAddToCurrent");
        SetPhysicsAngularVelocityInRadians_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPhysicsAngularVelocityInRadians_NativeFunction, "BoneName");
        SetPhysicsAngularVelocityInDegrees_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPhysicsAngularVelocityInDegrees");
        SetPhysicsAngularVelocityInDegrees_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPhysicsAngularVelocityInDegrees_NativeFunction);
        SetPhysicsAngularVelocityInDegrees_NewAngVel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPhysicsAngularVelocityInDegrees_NativeFunction, "NewAngVel");
        SetPhysicsAngularVelocityInDegrees_bAddToCurrent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPhysicsAngularVelocityInDegrees_NativeFunction, "bAddToCurrent");
        SetPhysicsAngularVelocityInDegrees_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPhysicsAngularVelocityInDegrees_NativeFunction, "BoneName");
        SetOwnerNoSee_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOwnerNoSee");
        SetOwnerNoSee_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOwnerNoSee_NativeFunction);
        SetOwnerNoSee_bNewOwnerNoSee_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOwnerNoSee_NativeFunction, "bNewOwnerNoSee");
        SetOnlyOwnerSee_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOnlyOwnerSee");
        SetOnlyOwnerSee_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOnlyOwnerSee_NativeFunction);
        SetOnlyOwnerSee_bNewOnlyOwnerSee_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOnlyOwnerSee_NativeFunction, "bNewOnlyOwnerSee");
        SetNotifyRigidBodyCollision_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNotifyRigidBodyCollision");
        SetNotifyRigidBodyCollision_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNotifyRigidBodyCollision_NativeFunction);
        SetNotifyRigidBodyCollision_bNewNotifyRigidBodyCollision_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNotifyRigidBodyCollision_NativeFunction, "bNewNotifyRigidBodyCollision");
        SetMaterialByName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMaterialByName");
        SetMaterialByName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMaterialByName_NativeFunction);
        SetMaterialByName_MaterialSlotName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialByName_NativeFunction, "MaterialSlotName");
        SetMaterialByName_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialByName_NativeFunction, "Material");
        SetMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMaterial");
        SetMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMaterial_NativeFunction);
        SetMaterial_ElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterial_NativeFunction, "ElementIndex");
        SetMaterial_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterial_NativeFunction, "Material");
        SetMassScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMassScale");
        SetMassScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMassScale_NativeFunction);
        SetMassScale_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMassScale_NativeFunction, "BoneName");
        SetMassScale_InMassScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMassScale_NativeFunction, "InMassScale");
        SetMassOverrideInKg_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMassOverrideInKg");
        SetMassOverrideInKg_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMassOverrideInKg_NativeFunction);
        SetMassOverrideInKg_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMassOverrideInKg_NativeFunction, "BoneName");
        SetMassOverrideInKg_MassInKg_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMassOverrideInKg_NativeFunction, "MassInKg");
        SetMassOverrideInKg_bOverrideMass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMassOverrideInKg_NativeFunction, "bOverrideMass");
        SetLinearDamping_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLinearDamping");
        SetLinearDamping_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLinearDamping_NativeFunction);
        SetLinearDamping_InDamping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearDamping_NativeFunction, "InDamping");
        SetLightingChannels_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLightingChannels");
        SetLightingChannels_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLightingChannels_NativeFunction);
        SetLightingChannels_bChannel0_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLightingChannels_NativeFunction, "bChannel0");
        SetLightingChannels_bChannel1_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLightingChannels_NativeFunction, "bChannel1");
        SetLightingChannels_bChannel2_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLightingChannels_NativeFunction, "bChannel2");
        SetLightAttachmentsAsGroup_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLightAttachmentsAsGroup");
        SetLightAttachmentsAsGroup_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLightAttachmentsAsGroup_NativeFunction);
        SetLightAttachmentsAsGroup_bInLightAttachmentsAsGroup_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLightAttachmentsAsGroup_NativeFunction, "bInLightAttachmentsAsGroup");
        SetIgnoreBoundsForEditorFocus_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIgnoreBoundsForEditorFocus");
        SetIgnoreBoundsForEditorFocus_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIgnoreBoundsForEditorFocus_NativeFunction);
        SetIgnoreBoundsForEditorFocus_bIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIgnoreBoundsForEditorFocus_NativeFunction, "bIgnore");
        SetHoldout_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetHoldout");
        SetHoldout_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetHoldout_NativeFunction);
        SetHoldout_bNewHoldout_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetHoldout_NativeFunction, "bNewHoldout");
        SetHiddenInSceneCapture_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetHiddenInSceneCapture");
        SetHiddenInSceneCapture_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetHiddenInSceneCapture_NativeFunction);
        SetHiddenInSceneCapture_bValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetHiddenInSceneCapture_NativeFunction, "bValue");
        SetExcludeFromLightAttachmentGroup_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetExcludeFromLightAttachmentGroup");
        SetExcludeFromLightAttachmentGroup_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetExcludeFromLightAttachmentGroup_NativeFunction);
        SetExcludeFromLightAttachmentGroup_bInExcludeFromLightAttachmentGroup_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetExcludeFromLightAttachmentGroup_NativeFunction, "bInExcludeFromLightAttachmentGroup");
        SetExcludedFromHLODLevel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetExcludedFromHLODLevel");
        SetExcludedFromHLODLevel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetExcludedFromHLODLevel_NativeFunction);
        SetExcludedFromHLODLevel_HLODLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetExcludedFromHLODLevel_NativeFunction, "HLODLevel");
        SetExcludedFromHLODLevel_bExcluded_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetExcludedFromHLODLevel_NativeFunction, "bExcluded");
        SetEnableGravity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetEnableGravity");
        SetEnableGravity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetEnableGravity_NativeFunction);
        SetEnableGravity_bGravityEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEnableGravity_NativeFunction, "bGravityEnabled");
        SetEmissiveLightSource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetEmissiveLightSource");
        SetEmissiveLightSource_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetEmissiveLightSource_NativeFunction);
        SetEmissiveLightSource_NewEmissiveLightSource_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEmissiveLightSource_NativeFunction, "NewEmissiveLightSource");
        SetDefaultCustomPrimitiveDataVector4_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDefaultCustomPrimitiveDataVector4");
        SetDefaultCustomPrimitiveDataVector4_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDefaultCustomPrimitiveDataVector4_NativeFunction);
        SetDefaultCustomPrimitiveDataVector4_DataIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefaultCustomPrimitiveDataVector4_NativeFunction, "DataIndex");
        SetDefaultCustomPrimitiveDataVector4_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefaultCustomPrimitiveDataVector4_NativeFunction, "Value");
        SetDefaultCustomPrimitiveDataVector3_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDefaultCustomPrimitiveDataVector3");
        SetDefaultCustomPrimitiveDataVector3_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDefaultCustomPrimitiveDataVector3_NativeFunction);
        SetDefaultCustomPrimitiveDataVector3_DataIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefaultCustomPrimitiveDataVector3_NativeFunction, "DataIndex");
        SetDefaultCustomPrimitiveDataVector3_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefaultCustomPrimitiveDataVector3_NativeFunction, "Value");
        SetDefaultCustomPrimitiveDataVector2_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDefaultCustomPrimitiveDataVector2");
        SetDefaultCustomPrimitiveDataVector2_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDefaultCustomPrimitiveDataVector2_NativeFunction);
        SetDefaultCustomPrimitiveDataVector2_DataIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefaultCustomPrimitiveDataVector2_NativeFunction, "DataIndex");
        SetDefaultCustomPrimitiveDataVector2_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefaultCustomPrimitiveDataVector2_NativeFunction, "Value");
        SetDefaultCustomPrimitiveDataFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDefaultCustomPrimitiveDataFloat");
        SetDefaultCustomPrimitiveDataFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDefaultCustomPrimitiveDataFloat_NativeFunction);
        SetDefaultCustomPrimitiveDataFloat_DataIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefaultCustomPrimitiveDataFloat_NativeFunction, "DataIndex");
        SetDefaultCustomPrimitiveDataFloat_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefaultCustomPrimitiveDataFloat_NativeFunction, "Value");
        SetCustomPrimitiveDataVector4_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomPrimitiveDataVector4");
        SetCustomPrimitiveDataVector4_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomPrimitiveDataVector4_NativeFunction);
        SetCustomPrimitiveDataVector4_DataIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomPrimitiveDataVector4_NativeFunction, "DataIndex");
        SetCustomPrimitiveDataVector4_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomPrimitiveDataVector4_NativeFunction, "Value");
        SetCustomPrimitiveDataVector3_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomPrimitiveDataVector3");
        SetCustomPrimitiveDataVector3_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomPrimitiveDataVector3_NativeFunction);
        SetCustomPrimitiveDataVector3_DataIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomPrimitiveDataVector3_NativeFunction, "DataIndex");
        SetCustomPrimitiveDataVector3_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomPrimitiveDataVector3_NativeFunction, "Value");
        SetCustomPrimitiveDataVector2_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomPrimitiveDataVector2");
        SetCustomPrimitiveDataVector2_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomPrimitiveDataVector2_NativeFunction);
        SetCustomPrimitiveDataVector2_DataIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomPrimitiveDataVector2_NativeFunction, "DataIndex");
        SetCustomPrimitiveDataVector2_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomPrimitiveDataVector2_NativeFunction, "Value");
        SetCustomPrimitiveDataFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomPrimitiveDataFloat");
        SetCustomPrimitiveDataFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomPrimitiveDataFloat_NativeFunction);
        SetCustomPrimitiveDataFloat_DataIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomPrimitiveDataFloat_NativeFunction, "DataIndex");
        SetCustomPrimitiveDataFloat_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomPrimitiveDataFloat_NativeFunction, "Value");
        SetCustomDepthStencilWriteMask_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomDepthStencilWriteMask");
        SetCustomDepthStencilWriteMask_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomDepthStencilWriteMask_NativeFunction);
        SetCustomDepthStencilWriteMask_WriteMaskBit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomDepthStencilWriteMask_NativeFunction, "WriteMaskBit");
        SetCustomDepthStencilValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomDepthStencilValue");
        SetCustomDepthStencilValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomDepthStencilValue_NativeFunction);
        SetCustomDepthStencilValue_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomDepthStencilValue_NativeFunction, "Value");
        SetCullDistance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCullDistance");
        SetCullDistance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCullDistance_NativeFunction);
        SetCullDistance_NewCullDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCullDistance_NativeFunction, "NewCullDistance");
        SetConstraintMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetConstraintMode");
        SetConstraintMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetConstraintMode_NativeFunction);
        SetConstraintMode_ConstraintMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConstraintMode_NativeFunction, "ConstraintMode");
        SetCollisionResponseToChannel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCollisionResponseToChannel");
        SetCollisionResponseToChannel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCollisionResponseToChannel_NativeFunction);
        SetCollisionResponseToChannel_Channel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCollisionResponseToChannel_NativeFunction, "Channel");
        SetCollisionResponseToChannel_NewResponse_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCollisionResponseToChannel_NativeFunction, "NewResponse");
        SetCollisionResponseToAllChannels_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCollisionResponseToAllChannels");
        SetCollisionResponseToAllChannels_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCollisionResponseToAllChannels_NativeFunction);
        SetCollisionResponseToAllChannels_NewResponse_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCollisionResponseToAllChannels_NativeFunction, "NewResponse");
        SetCollisionProfileName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCollisionProfileName");
        SetCollisionProfileName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCollisionProfileName_NativeFunction);
        SetCollisionProfileName_InCollisionProfileName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCollisionProfileName_NativeFunction, "InCollisionProfileName");
        SetCollisionProfileName_bUpdateOverlaps_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCollisionProfileName_NativeFunction, "bUpdateOverlaps");
        SetCollisionObjectType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCollisionObjectType");
        SetCollisionObjectType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCollisionObjectType_NativeFunction);
        SetCollisionObjectType_Channel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCollisionObjectType_NativeFunction, "Channel");
        SetCollisionEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCollisionEnabled");
        SetCollisionEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCollisionEnabled_NativeFunction);
        SetCollisionEnabled_NewType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCollisionEnabled_NativeFunction, "NewType");
        SetCenterOfMass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCenterOfMass");
        SetCenterOfMass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCenterOfMass_NativeFunction);
        SetCenterOfMass_CenterOfMassOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCenterOfMass_NativeFunction, "CenterOfMassOffset");
        SetCenterOfMass_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCenterOfMass_NativeFunction, "BoneName");
        SetCastShadow_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCastShadow");
        SetCastShadow_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCastShadow_NativeFunction);
        SetCastShadow_NewCastShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCastShadow_NativeFunction, "NewCastShadow");
        SetCastInsetShadow_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCastInsetShadow");
        SetCastInsetShadow_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCastInsetShadow_NativeFunction);
        SetCastInsetShadow_bInCastInsetShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCastInsetShadow_NativeFunction, "bInCastInsetShadow");
        SetCastHiddenShadow_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCastHiddenShadow");
        SetCastHiddenShadow_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCastHiddenShadow_NativeFunction);
        SetCastHiddenShadow_NewCastHiddenShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCastHiddenShadow_NativeFunction, "NewCastHiddenShadow");
        SetCastContactShadow_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCastContactShadow");
        SetCastContactShadow_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCastContactShadow_NativeFunction);
        SetCastContactShadow_bInCastContactShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCastContactShadow_NativeFunction, "bInCastContactShadow");
        SetBoundsScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBoundsScale");
        SetBoundsScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBoundsScale_NativeFunction);
        SetBoundsScale_NewBoundsScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoundsScale_NativeFunction, "NewBoundsScale");
        SetAngularDamping_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAngularDamping");
        SetAngularDamping_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAngularDamping_NativeFunction);
        SetAngularDamping_InDamping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAngularDamping_NativeFunction, "InDamping");
        SetAllUseCCD_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAllUseCCD");
        SetAllUseCCD_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAllUseCCD_NativeFunction);
        SetAllUseCCD_InUseCCD_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAllUseCCD_NativeFunction, "InUseCCD");
        SetAllPhysicsLinearVelocity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAllPhysicsLinearVelocity");
        SetAllPhysicsLinearVelocity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAllPhysicsLinearVelocity_NativeFunction);
        SetAllPhysicsLinearVelocity_NewVel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAllPhysicsLinearVelocity_NativeFunction, "NewVel");
        SetAllPhysicsLinearVelocity_bAddToCurrent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAllPhysicsLinearVelocity_NativeFunction, "bAddToCurrent");
        SetAllPhysicsAngularVelocityInRadians_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAllPhysicsAngularVelocityInRadians");
        SetAllPhysicsAngularVelocityInRadians_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAllPhysicsAngularVelocityInRadians_NativeFunction);
        SetAllPhysicsAngularVelocityInRadians_NewAngVel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAllPhysicsAngularVelocityInRadians_NativeFunction, "NewAngVel");
        SetAllPhysicsAngularVelocityInRadians_bAddToCurrent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAllPhysicsAngularVelocityInRadians_NativeFunction, "bAddToCurrent");
        SetAllPhysicsAngularVelocityInDegrees_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAllPhysicsAngularVelocityInDegrees");
        SetAllPhysicsAngularVelocityInDegrees_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAllPhysicsAngularVelocityInDegrees_NativeFunction);
        SetAllPhysicsAngularVelocityInDegrees_NewAngVel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAllPhysicsAngularVelocityInDegrees_NativeFunction, "NewAngVel");
        SetAllPhysicsAngularVelocityInDegrees_bAddToCurrent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAllPhysicsAngularVelocityInDegrees_NativeFunction, "bAddToCurrent");
        SetAllMassScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAllMassScale");
        SetAllMassScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAllMassScale_NativeFunction);
        SetAllMassScale_InMassScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAllMassScale_NativeFunction, "InMassScale");
        SetAffectIndirectLightingWhileHidden_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAffectIndirectLightingWhileHidden");
        SetAffectIndirectLightingWhileHidden_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAffectIndirectLightingWhileHidden_NativeFunction);
        SetAffectIndirectLightingWhileHidden_bNewAffectIndirectLightingWhileHidden_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAffectIndirectLightingWhileHidden_NativeFunction, "bNewAffectIndirectLightingWhileHidden");
        SetAffectDynamicIndirectLighting_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAffectDynamicIndirectLighting");
        SetAffectDynamicIndirectLighting_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAffectDynamicIndirectLighting_NativeFunction);
        SetAffectDynamicIndirectLighting_bNewAffectDynamicIndirectLighting_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAffectDynamicIndirectLighting_NativeFunction, "bNewAffectDynamicIndirectLighting");
        SetAffectDistanceFieldLighting_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAffectDistanceFieldLighting");
        SetAffectDistanceFieldLighting_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAffectDistanceFieldLighting_NativeFunction);
        SetAffectDistanceFieldLighting_NewAffectDistanceFieldLighting_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAffectDistanceFieldLighting_NativeFunction, "NewAffectDistanceFieldLighting");
        ScaleByMomentOfInertia_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ScaleByMomentOfInertia");
        ScaleByMomentOfInertia_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ScaleByMomentOfInertia_NativeFunction);
        ScaleByMomentOfInertia_InputVector_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScaleByMomentOfInertia_NativeFunction, "InputVector");
        ScaleByMomentOfInertia_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScaleByMomentOfInertia_NativeFunction, "BoneName");
        ScaleByMomentOfInertia_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScaleByMomentOfInertia_NativeFunction, "ReturnValue");
        PutRigidBodyToSleep_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PutRigidBodyToSleep");
        PutRigidBodyToSleep_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PutRigidBodyToSleep_NativeFunction);
        PutRigidBodyToSleep_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PutRigidBodyToSleep_NativeFunction, "BoneName");
        K2_SphereTraceComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_SphereTraceComponent");
        K2_SphereTraceComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_SphereTraceComponent_NativeFunction);
        K2_SphereTraceComponent_TraceStart_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SphereTraceComponent_NativeFunction, "TraceStart");
        K2_SphereTraceComponent_TraceEnd_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SphereTraceComponent_NativeFunction, "TraceEnd");
        K2_SphereTraceComponent_SphereRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SphereTraceComponent_NativeFunction, "SphereRadius");
        K2_SphereTraceComponent_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SphereTraceComponent_NativeFunction, "bTraceComplex");
        K2_SphereTraceComponent_bShowTrace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SphereTraceComponent_NativeFunction, "bShowTrace");
        K2_SphereTraceComponent_bPersistentShowTrace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SphereTraceComponent_NativeFunction, "bPersistentShowTrace");
        K2_SphereTraceComponent_HitLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SphereTraceComponent_NativeFunction, "HitLocation");
        K2_SphereTraceComponent_HitNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SphereTraceComponent_NativeFunction, "HitNormal");
        K2_SphereTraceComponent_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SphereTraceComponent_NativeFunction, "BoneName");
        K2_SphereTraceComponent_OutHit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SphereTraceComponent_NativeFunction, "OutHit");
        K2_SphereTraceComponent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SphereTraceComponent_NativeFunction, "ReturnValue");
        K2_SphereOverlapComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_SphereOverlapComponent");
        K2_SphereOverlapComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_SphereOverlapComponent_NativeFunction);
        K2_SphereOverlapComponent_InSphereCentre_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SphereOverlapComponent_NativeFunction, "InSphereCentre");
        K2_SphereOverlapComponent_InSphereRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SphereOverlapComponent_NativeFunction, "InSphereRadius");
        K2_SphereOverlapComponent_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SphereOverlapComponent_NativeFunction, "bTraceComplex");
        K2_SphereOverlapComponent_bShowTrace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SphereOverlapComponent_NativeFunction, "bShowTrace");
        K2_SphereOverlapComponent_bPersistentShowTrace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SphereOverlapComponent_NativeFunction, "bPersistentShowTrace");
        K2_SphereOverlapComponent_HitLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SphereOverlapComponent_NativeFunction, "HitLocation");
        K2_SphereOverlapComponent_HitNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SphereOverlapComponent_NativeFunction, "HitNormal");
        K2_SphereOverlapComponent_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SphereOverlapComponent_NativeFunction, "BoneName");
        K2_SphereOverlapComponent_OutHit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SphereOverlapComponent_NativeFunction, "OutHit");
        K2_SphereOverlapComponent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SphereOverlapComponent_NativeFunction, "ReturnValue");
        K2_LineTraceComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_LineTraceComponent");
        K2_LineTraceComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_LineTraceComponent_NativeFunction);
        K2_LineTraceComponent_TraceStart_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_LineTraceComponent_NativeFunction, "TraceStart");
        K2_LineTraceComponent_TraceEnd_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_LineTraceComponent_NativeFunction, "TraceEnd");
        K2_LineTraceComponent_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_LineTraceComponent_NativeFunction, "bTraceComplex");
        K2_LineTraceComponent_bShowTrace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_LineTraceComponent_NativeFunction, "bShowTrace");
        K2_LineTraceComponent_bPersistentShowTrace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_LineTraceComponent_NativeFunction, "bPersistentShowTrace");
        K2_LineTraceComponent_HitLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_LineTraceComponent_NativeFunction, "HitLocation");
        K2_LineTraceComponent_HitNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_LineTraceComponent_NativeFunction, "HitNormal");
        K2_LineTraceComponent_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_LineTraceComponent_NativeFunction, "BoneName");
        K2_LineTraceComponent_OutHit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_LineTraceComponent_NativeFunction, "OutHit");
        K2_LineTraceComponent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_LineTraceComponent_NativeFunction, "ReturnValue");
        K2_IsQueryCollisionEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_IsQueryCollisionEnabled");
        K2_IsQueryCollisionEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_IsQueryCollisionEnabled_NativeFunction);
        K2_IsQueryCollisionEnabled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_IsQueryCollisionEnabled_NativeFunction, "ReturnValue");
        K2_IsPhysicsCollisionEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_IsPhysicsCollisionEnabled");
        K2_IsPhysicsCollisionEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_IsPhysicsCollisionEnabled_NativeFunction);
        K2_IsPhysicsCollisionEnabled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_IsPhysicsCollisionEnabled_NativeFunction, "ReturnValue");
        K2_IsCollisionEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_IsCollisionEnabled");
        K2_IsCollisionEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_IsCollisionEnabled_NativeFunction);
        K2_IsCollisionEnabled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_IsCollisionEnabled_NativeFunction, "ReturnValue");
        K2_BoxOverlapComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_BoxOverlapComponent");
        K2_BoxOverlapComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_BoxOverlapComponent_NativeFunction);
        K2_BoxOverlapComponent_InBoxCentre_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_BoxOverlapComponent_NativeFunction, "InBoxCentre");
        K2_BoxOverlapComponent_InBox_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_BoxOverlapComponent_NativeFunction, "InBox");
        K2_BoxOverlapComponent_bTraceComplex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_BoxOverlapComponent_NativeFunction, "bTraceComplex");
        K2_BoxOverlapComponent_bShowTrace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_BoxOverlapComponent_NativeFunction, "bShowTrace");
        K2_BoxOverlapComponent_bPersistentShowTrace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_BoxOverlapComponent_NativeFunction, "bPersistentShowTrace");
        K2_BoxOverlapComponent_HitLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_BoxOverlapComponent_NativeFunction, "HitLocation");
        K2_BoxOverlapComponent_HitNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_BoxOverlapComponent_NativeFunction, "HitNormal");
        K2_BoxOverlapComponent_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_BoxOverlapComponent_NativeFunction, "BoneName");
        K2_BoxOverlapComponent_OutHit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_BoxOverlapComponent_NativeFunction, "OutHit");
        K2_BoxOverlapComponent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_BoxOverlapComponent_NativeFunction, "ReturnValue");
        IsOverlappingComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsOverlappingComponent");
        IsOverlappingComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsOverlappingComponent_NativeFunction);
        IsOverlappingComponent_OtherComp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsOverlappingComponent_NativeFunction, "OtherComp");
        IsOverlappingComponent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsOverlappingComponent_NativeFunction, "ReturnValue");
        IsOverlappingActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsOverlappingActor");
        IsOverlappingActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsOverlappingActor_NativeFunction);
        IsOverlappingActor_Other_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsOverlappingActor_NativeFunction, "Other");
        IsOverlappingActor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsOverlappingActor_NativeFunction, "ReturnValue");
        IsGravityEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsGravityEnabled");
        IsGravityEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsGravityEnabled_NativeFunction);
        IsGravityEnabled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsGravityEnabled_NativeFunction, "ReturnValue");
        IsExcludedFromHLODLevel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsExcludedFromHLODLevel");
        IsExcludedFromHLODLevel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsExcludedFromHLODLevel_NativeFunction);
        IsExcludedFromHLODLevel_HLODLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsExcludedFromHLODLevel_NativeFunction, "HLODLevel");
        IsExcludedFromHLODLevel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsExcludedFromHLODLevel_NativeFunction, "ReturnValue");
        IsAnyRigidBodyAwake_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsAnyRigidBodyAwake");
        IsAnyRigidBodyAwake_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsAnyRigidBodyAwake_NativeFunction);
        IsAnyRigidBodyAwake_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAnyRigidBodyAwake_NativeFunction, "ReturnValue");
        InvalidateLumenSurfaceCache_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "InvalidateLumenSurfaceCache");
        IgnoreComponentWhenMoving_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IgnoreComponentWhenMoving");
        IgnoreComponentWhenMoving_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IgnoreComponentWhenMoving_NativeFunction);
        IgnoreComponentWhenMoving_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IgnoreComponentWhenMoving_NativeFunction, "Component");
        IgnoreComponentWhenMoving_bShouldIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IgnoreComponentWhenMoving_NativeFunction, "bShouldIgnore");
        IgnoreActorWhenMoving_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IgnoreActorWhenMoving");
        IgnoreActorWhenMoving_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IgnoreActorWhenMoving_NativeFunction);
        IgnoreActorWhenMoving_Actor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IgnoreActorWhenMoving_NativeFunction, "Actor");
        IgnoreActorWhenMoving_bShouldIgnore_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IgnoreActorWhenMoving_NativeFunction, "bShouldIgnore");
        GetWalkableSlopeOverride_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWalkableSlopeOverride");
        GetWalkableSlopeOverride_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWalkableSlopeOverride_NativeFunction);
        GetWalkableSlopeOverride_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWalkableSlopeOverride_NativeFunction, "ReturnValue");
        GetStaticWhenNotMoveable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStaticWhenNotMoveable");
        GetStaticWhenNotMoveable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStaticWhenNotMoveable_NativeFunction);
        GetStaticWhenNotMoveable_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStaticWhenNotMoveable_NativeFunction, "ReturnValue");
        GetPhysicsLinearVelocityAtPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPhysicsLinearVelocityAtPoint");
        GetPhysicsLinearVelocityAtPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPhysicsLinearVelocityAtPoint_NativeFunction);
        GetPhysicsLinearVelocityAtPoint_Point_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhysicsLinearVelocityAtPoint_NativeFunction, "Point");
        GetPhysicsLinearVelocityAtPoint_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhysicsLinearVelocityAtPoint_NativeFunction, "BoneName");
        GetPhysicsLinearVelocityAtPoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhysicsLinearVelocityAtPoint_NativeFunction, "ReturnValue");
        GetPhysicsLinearVelocity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPhysicsLinearVelocity");
        GetPhysicsLinearVelocity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPhysicsLinearVelocity_NativeFunction);
        GetPhysicsLinearVelocity_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhysicsLinearVelocity_NativeFunction, "BoneName");
        GetPhysicsLinearVelocity_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhysicsLinearVelocity_NativeFunction, "ReturnValue");
        GetPhysicsAngularVelocityInRadians_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPhysicsAngularVelocityInRadians");
        GetPhysicsAngularVelocityInRadians_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPhysicsAngularVelocityInRadians_NativeFunction);
        GetPhysicsAngularVelocityInRadians_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhysicsAngularVelocityInRadians_NativeFunction, "BoneName");
        GetPhysicsAngularVelocityInRadians_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhysicsAngularVelocityInRadians_NativeFunction, "ReturnValue");
        GetPhysicsAngularVelocityInDegrees_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPhysicsAngularVelocityInDegrees");
        GetPhysicsAngularVelocityInDegrees_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPhysicsAngularVelocityInDegrees_NativeFunction);
        GetPhysicsAngularVelocityInDegrees_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhysicsAngularVelocityInDegrees_NativeFunction, "BoneName");
        GetPhysicsAngularVelocityInDegrees_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhysicsAngularVelocityInDegrees_NativeFunction, "ReturnValue");
        GetOverlappingComponents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOverlappingComponents");
        GetOverlappingComponents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOverlappingComponents_NativeFunction);
        GetOverlappingComponents_OutOverlappingComponents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOverlappingComponents_NativeFunction, "OutOverlappingComponents");
        GetOverlappingComponents_OutOverlappingComponents_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetOverlappingComponents_NativeFunction, "OutOverlappingComponents");
        GetOverlappingActors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOverlappingActors");
        GetOverlappingActors_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOverlappingActors_NativeFunction);
        GetOverlappingActors_OverlappingActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOverlappingActors_NativeFunction, "OverlappingActors");
        GetOverlappingActors_OverlappingActors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetOverlappingActors_NativeFunction, "OverlappingActors");
        GetOverlappingActors_ClassFilter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOverlappingActors_NativeFunction, "ClassFilter");
        GetNumMaterials_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumMaterials");
        GetNumMaterials_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumMaterials_NativeFunction);
        GetNumMaterials_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumMaterials_NativeFunction, "ReturnValue");
        GetMaterialFromCollisionFaceIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaterialFromCollisionFaceIndex");
        GetMaterialFromCollisionFaceIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaterialFromCollisionFaceIndex_NativeFunction);
        GetMaterialFromCollisionFaceIndex_FaceIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialFromCollisionFaceIndex_NativeFunction, "FaceIndex");
        GetMaterialFromCollisionFaceIndex_SectionIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialFromCollisionFaceIndex_NativeFunction, "SectionIndex");
        GetMaterialFromCollisionFaceIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialFromCollisionFaceIndex_NativeFunction, "ReturnValue");
        GetMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaterial");
        GetMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaterial_NativeFunction);
        GetMaterial_ElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterial_NativeFunction, "ElementIndex");
        GetMaterial_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterial_NativeFunction, "ReturnValue");
        GetMassScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMassScale");
        GetMassScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMassScale_NativeFunction);
        GetMassScale_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMassScale_NativeFunction, "BoneName");
        GetMassScale_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMassScale_NativeFunction, "ReturnValue");
        GetMass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMass");
        GetMass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMass_NativeFunction);
        GetMass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMass_NativeFunction, "ReturnValue");
        GetLinearDamping_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLinearDamping");
        GetLinearDamping_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLinearDamping_NativeFunction);
        GetLinearDamping_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinearDamping_NativeFunction, "ReturnValue");
        GetInertiaTensor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInertiaTensor");
        GetInertiaTensor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInertiaTensor_NativeFunction);
        GetInertiaTensor_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInertiaTensor_NativeFunction, "BoneName");
        GetInertiaTensor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInertiaTensor_NativeFunction, "ReturnValue");
        GetIgnoreBoundsForEditorFocus_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetIgnoreBoundsForEditorFocus");
        GetIgnoreBoundsForEditorFocus_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetIgnoreBoundsForEditorFocus_NativeFunction);
        GetIgnoreBoundsForEditorFocus_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetIgnoreBoundsForEditorFocus_NativeFunction, "ReturnValue");
        GetCustomPrimitiveDataIndexForVectorParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomPrimitiveDataIndexForVectorParameter");
        GetCustomPrimitiveDataIndexForVectorParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomPrimitiveDataIndexForVectorParameter_NativeFunction);
        GetCustomPrimitiveDataIndexForVectorParameter_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomPrimitiveDataIndexForVectorParameter_NativeFunction, "ParameterName");
        GetCustomPrimitiveDataIndexForVectorParameter_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomPrimitiveDataIndexForVectorParameter_NativeFunction, "ReturnValue");
        GetCustomPrimitiveDataIndexForScalarParameter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomPrimitiveDataIndexForScalarParameter");
        GetCustomPrimitiveDataIndexForScalarParameter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomPrimitiveDataIndexForScalarParameter_NativeFunction);
        GetCustomPrimitiveDataIndexForScalarParameter_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomPrimitiveDataIndexForScalarParameter_NativeFunction, "ParameterName");
        GetCustomPrimitiveDataIndexForScalarParameter_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomPrimitiveDataIndexForScalarParameter_NativeFunction, "ReturnValue");
        GetCollisionResponseToChannel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCollisionResponseToChannel");
        GetCollisionResponseToChannel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCollisionResponseToChannel_NativeFunction);
        GetCollisionResponseToChannel_Channel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCollisionResponseToChannel_NativeFunction, "Channel");
        GetCollisionResponseToChannel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCollisionResponseToChannel_NativeFunction, "ReturnValue");
        GetCollisionProfileName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCollisionProfileName");
        GetCollisionProfileName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCollisionProfileName_NativeFunction);
        GetCollisionProfileName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCollisionProfileName_NativeFunction, "ReturnValue");
        GetCollisionObjectType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCollisionObjectType");
        GetCollisionObjectType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCollisionObjectType_NativeFunction);
        GetCollisionObjectType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCollisionObjectType_NativeFunction, "ReturnValue");
        GetCollisionEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCollisionEnabled");
        GetCollisionEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCollisionEnabled_NativeFunction);
        GetCollisionEnabled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCollisionEnabled_NativeFunction, "ReturnValue");
        GetClosestPointOnCollision_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetClosestPointOnCollision");
        GetClosestPointOnCollision_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetClosestPointOnCollision_NativeFunction);
        GetClosestPointOnCollision_Point_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClosestPointOnCollision_NativeFunction, "Point");
        GetClosestPointOnCollision_OutPointOnBody_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClosestPointOnCollision_NativeFunction, "OutPointOnBody");
        GetClosestPointOnCollision_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClosestPointOnCollision_NativeFunction, "BoneName");
        GetClosestPointOnCollision_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClosestPointOnCollision_NativeFunction, "ReturnValue");
        GetCenterOfMass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCenterOfMass");
        GetCenterOfMass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCenterOfMass_NativeFunction);
        GetCenterOfMass_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCenterOfMass_NativeFunction, "BoneName");
        GetCenterOfMass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCenterOfMass_NativeFunction, "ReturnValue");
        GetBodyInstanceAsyncPhysicsTickHandle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBodyInstanceAsyncPhysicsTickHandle");
        GetBodyInstanceAsyncPhysicsTickHandle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBodyInstanceAsyncPhysicsTickHandle_NativeFunction);
        GetBodyInstanceAsyncPhysicsTickHandle_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBodyInstanceAsyncPhysicsTickHandle_NativeFunction, "BoneName");
        GetBodyInstanceAsyncPhysicsTickHandle_bGetWelded_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBodyInstanceAsyncPhysicsTickHandle_NativeFunction, "bGetWelded");
        GetBodyInstanceAsyncPhysicsTickHandle_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBodyInstanceAsyncPhysicsTickHandle_NativeFunction, "Index");
        GetBodyInstanceAsyncPhysicsTickHandle_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBodyInstanceAsyncPhysicsTickHandle_NativeFunction, "ReturnValue");
        GetAngularDamping_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAngularDamping");
        GetAngularDamping_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAngularDamping_NativeFunction);
        GetAngularDamping_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAngularDamping_NativeFunction, "ReturnValue");
        CreateDynamicMaterialInstance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateDynamicMaterialInstance");
        CreateDynamicMaterialInstance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateDynamicMaterialInstance_NativeFunction);
        CreateDynamicMaterialInstance_ElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateDynamicMaterialInstance_NativeFunction, "ElementIndex");
        CreateDynamicMaterialInstance_SourceMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateDynamicMaterialInstance_NativeFunction, "SourceMaterial");
        CreateDynamicMaterialInstance_OptionalName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateDynamicMaterialInstance_NativeFunction, "OptionalName");
        CreateDynamicMaterialInstance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateDynamicMaterialInstance_NativeFunction, "ReturnValue");
        CreateAndSetMaterialInstanceDynamicFromMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateAndSetMaterialInstanceDynamicFromMaterial");
        CreateAndSetMaterialInstanceDynamicFromMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateAndSetMaterialInstanceDynamicFromMaterial_NativeFunction);
        CreateAndSetMaterialInstanceDynamicFromMaterial_ElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateAndSetMaterialInstanceDynamicFromMaterial_NativeFunction, "ElementIndex");
        CreateAndSetMaterialInstanceDynamicFromMaterial_Parent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateAndSetMaterialInstanceDynamicFromMaterial_NativeFunction, "Parent");
        CreateAndSetMaterialInstanceDynamicFromMaterial_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateAndSetMaterialInstanceDynamicFromMaterial_NativeFunction, "ReturnValue");
        CreateAndSetMaterialInstanceDynamic_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateAndSetMaterialInstanceDynamic");
        CreateAndSetMaterialInstanceDynamic_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateAndSetMaterialInstanceDynamic_NativeFunction);
        CreateAndSetMaterialInstanceDynamic_ElementIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateAndSetMaterialInstanceDynamic_NativeFunction, "ElementIndex");
        CreateAndSetMaterialInstanceDynamic_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateAndSetMaterialInstanceDynamic_NativeFunction, "ReturnValue");
        CopyArrayOfMoveIgnoreComponents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CopyArrayOfMoveIgnoreComponents");
        CopyArrayOfMoveIgnoreComponents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CopyArrayOfMoveIgnoreComponents_NativeFunction);
        CopyArrayOfMoveIgnoreComponents_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyArrayOfMoveIgnoreComponents_NativeFunction, "ReturnValue");
        CopyArrayOfMoveIgnoreComponents_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CopyArrayOfMoveIgnoreComponents_NativeFunction, "ReturnValue");
        CopyArrayOfMoveIgnoreActors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CopyArrayOfMoveIgnoreActors");
        CopyArrayOfMoveIgnoreActors_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CopyArrayOfMoveIgnoreActors_NativeFunction);
        CopyArrayOfMoveIgnoreActors_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyArrayOfMoveIgnoreActors_NativeFunction, "ReturnValue");
        CopyArrayOfMoveIgnoreActors_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CopyArrayOfMoveIgnoreActors_NativeFunction, "ReturnValue");
        ClearMoveIgnoreComponents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearMoveIgnoreComponents");
        ClearMoveIgnoreActors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearMoveIgnoreActors");
        CanCharacterStepUp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CanCharacterStepUp");
        CanCharacterStepUp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CanCharacterStepUp_NativeFunction);
        CanCharacterStepUp_Pawn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanCharacterStepUp_NativeFunction, "Pawn");
        CanCharacterStepUp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanCharacterStepUp_NativeFunction, "ReturnValue");
        AddVelocityChangeImpulseAtLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddVelocityChangeImpulseAtLocation");
        AddVelocityChangeImpulseAtLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddVelocityChangeImpulseAtLocation_NativeFunction);
        AddVelocityChangeImpulseAtLocation_Impulse_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVelocityChangeImpulseAtLocation_NativeFunction, "Impulse");
        AddVelocityChangeImpulseAtLocation_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVelocityChangeImpulseAtLocation_NativeFunction, "Location");
        AddVelocityChangeImpulseAtLocation_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVelocityChangeImpulseAtLocation_NativeFunction, "BoneName");
        AddTorqueInRadians_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddTorqueInRadians");
        AddTorqueInRadians_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddTorqueInRadians_NativeFunction);
        AddTorqueInRadians_Torque_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTorqueInRadians_NativeFunction, "Torque");
        AddTorqueInRadians_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTorqueInRadians_NativeFunction, "BoneName");
        AddTorqueInRadians_bAccelChange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTorqueInRadians_NativeFunction, "bAccelChange");
        AddTorqueInDegrees_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddTorqueInDegrees");
        AddTorqueInDegrees_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddTorqueInDegrees_NativeFunction);
        AddTorqueInDegrees_Torque_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTorqueInDegrees_NativeFunction, "Torque");
        AddTorqueInDegrees_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTorqueInDegrees_NativeFunction, "BoneName");
        AddTorqueInDegrees_bAccelChange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTorqueInDegrees_NativeFunction, "bAccelChange");
        AddRadialImpulse_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddRadialImpulse");
        AddRadialImpulse_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddRadialImpulse_NativeFunction);
        AddRadialImpulse_Origin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddRadialImpulse_NativeFunction, "Origin");
        AddRadialImpulse_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddRadialImpulse_NativeFunction, "Radius");
        AddRadialImpulse_Strength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddRadialImpulse_NativeFunction, "Strength");
        AddRadialImpulse_Falloff_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddRadialImpulse_NativeFunction, "Falloff");
        AddRadialImpulse_bVelChange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddRadialImpulse_NativeFunction, "bVelChange");
        AddRadialForce_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddRadialForce");
        AddRadialForce_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddRadialForce_NativeFunction);
        AddRadialForce_Origin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddRadialForce_NativeFunction, "Origin");
        AddRadialForce_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddRadialForce_NativeFunction, "Radius");
        AddRadialForce_Strength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddRadialForce_NativeFunction, "Strength");
        AddRadialForce_Falloff_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddRadialForce_NativeFunction, "Falloff");
        AddRadialForce_bAccelChange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddRadialForce_NativeFunction, "bAccelChange");
        AddImpulseAtLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddImpulseAtLocation");
        AddImpulseAtLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddImpulseAtLocation_NativeFunction);
        AddImpulseAtLocation_Impulse_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddImpulseAtLocation_NativeFunction, "Impulse");
        AddImpulseAtLocation_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddImpulseAtLocation_NativeFunction, "Location");
        AddImpulseAtLocation_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddImpulseAtLocation_NativeFunction, "BoneName");
        AddImpulse_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddImpulse");
        AddImpulse_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddImpulse_NativeFunction);
        AddImpulse_Impulse_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddImpulse_NativeFunction, "Impulse");
        AddImpulse_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddImpulse_NativeFunction, "BoneName");
        AddImpulse_bVelChange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddImpulse_NativeFunction, "bVelChange");
        AddForceAtLocationLocal_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddForceAtLocationLocal");
        AddForceAtLocationLocal_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddForceAtLocationLocal_NativeFunction);
        AddForceAtLocationLocal_Force_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddForceAtLocationLocal_NativeFunction, "Force");
        AddForceAtLocationLocal_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddForceAtLocationLocal_NativeFunction, "Location");
        AddForceAtLocationLocal_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddForceAtLocationLocal_NativeFunction, "BoneName");
        AddForceAtLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddForceAtLocation");
        AddForceAtLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddForceAtLocation_NativeFunction);
        AddForceAtLocation_Force_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddForceAtLocation_NativeFunction, "Force");
        AddForceAtLocation_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddForceAtLocation_NativeFunction, "Location");
        AddForceAtLocation_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddForceAtLocation_NativeFunction, "BoneName");
        AddForce_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddForce");
        AddForce_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddForce_NativeFunction);
        AddForce_Force_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddForce_NativeFunction, "Force");
        AddForce_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddForce_NativeFunction, "BoneName");
        AddForce_bAccelChange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddForce_NativeFunction, "bAccelChange");
        AddAngularImpulseInRadians_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddAngularImpulseInRadians");
        AddAngularImpulseInRadians_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddAngularImpulseInRadians_NativeFunction);
        AddAngularImpulseInRadians_Impulse_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAngularImpulseInRadians_NativeFunction, "Impulse");
        AddAngularImpulseInRadians_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAngularImpulseInRadians_NativeFunction, "BoneName");
        AddAngularImpulseInRadians_bVelChange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAngularImpulseInRadians_NativeFunction, "bVelChange");
        AddAngularImpulseInDegrees_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddAngularImpulseInDegrees");
        AddAngularImpulseInDegrees_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddAngularImpulseInDegrees_NativeFunction);
        AddAngularImpulseInDegrees_Impulse_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAngularImpulseInDegrees_NativeFunction, "Impulse");
        AddAngularImpulseInDegrees_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAngularImpulseInDegrees_NativeFunction, "BoneName");
        AddAngularImpulseInDegrees_bVelChange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddAngularImpulseInDegrees_NativeFunction, "bVelChange");
        
        
    }
    
    protected PrimitiveComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Engine.PrimitiveComponent:MinDrawDistance
    static readonly int MinDrawDistance_Offset;
    
    public float MinDrawDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinDrawDistance_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.PrimitiveComponent:LDMaxDrawDistance
    static readonly int LDMaxDrawDistance_Offset;
    
    public float LDMaxDrawDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LDMaxDrawDistance_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.PrimitiveComponent:CachedMaxDrawDistance
    static readonly int CachedMaxDrawDistance_Offset;
    
    public float CachedMaxDrawDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CachedMaxDrawDistance_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/Engine.PrimitiveComponent:IndirectLightingCacheQuality
    static readonly int IndirectLightingCacheQuality_Offset;
    
    public UnrealSharp.Engine.EIndirectLightingCacheQuality IndirectLightingCacheQuality
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EIndirectLightingCacheQuality>.FromNative(IntPtr.Add(NativeObject, IndirectLightingCacheQuality_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/Engine.PrimitiveComponent:LightmapType
    static readonly int LightmapType_Offset;
    
    public UnrealSharp.Engine.ELightmapType LightmapType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ELightmapType>.FromNative(IntPtr.Add(NativeObject, LightmapType_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/Engine.PrimitiveComponent:HLODBatchingPolicy
    static readonly int HLODBatchingPolicy_Offset;
    
    public UnrealSharp.Engine.EHLODBatchingPolicy HLODBatchingPolicy
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EHLODBatchingPolicy>.FromNative(IntPtr.Add(NativeObject, HLODBatchingPolicy_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EHLODBatchingPolicy>.ToNative(IntPtr.Add(NativeObject, HLODBatchingPolicy_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bEnableAutoLODGeneration
    static readonly int bEnableAutoLODGeneration_Offset;
    static readonly IntPtr bEnableAutoLODGeneration_NativeProperty;
    
    public bool bEnableAutoLODGeneration
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableAutoLODGeneration_NativeProperty, bEnableAutoLODGeneration_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bEnableAutoLODGeneration_NativeProperty, bEnableAutoLODGeneration_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bNeverDistanceCull
    static readonly int bNeverDistanceCull_Offset;
    static readonly IntPtr bNeverDistanceCull_NativeProperty;
    
    public bool bNeverDistanceCull
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bNeverDistanceCull_NativeProperty, bNeverDistanceCull_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bAlwaysCreatePhysicsState
    static readonly int bAlwaysCreatePhysicsState_Offset;
    static readonly IntPtr bAlwaysCreatePhysicsState_NativeProperty;
    
    public bool bAlwaysCreatePhysicsState
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAlwaysCreatePhysicsState_NativeProperty, bAlwaysCreatePhysicsState_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bGenerateOverlapEvents
    static readonly int bGenerateOverlapEvents_Offset;
    static readonly IntPtr bGenerateOverlapEvents_NativeProperty;
    
    public bool bGenerateOverlapEvents
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bGenerateOverlapEvents_NativeProperty, bGenerateOverlapEvents_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bGenerateOverlapEvents_NativeProperty, bGenerateOverlapEvents_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bMultiBodyOverlap
    static readonly int bMultiBodyOverlap_Offset;
    static readonly IntPtr bMultiBodyOverlap_NativeProperty;
    
    public bool bMultiBodyOverlap
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bMultiBodyOverlap_NativeProperty, bMultiBodyOverlap_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bMultiBodyOverlap_NativeProperty, bMultiBodyOverlap_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bTraceComplexOnMove
    static readonly int bTraceComplexOnMove_Offset;
    static readonly IntPtr bTraceComplexOnMove_NativeProperty;
    
    public bool bTraceComplexOnMove
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bTraceComplexOnMove_NativeProperty, bTraceComplexOnMove_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bTraceComplexOnMove_NativeProperty, bTraceComplexOnMove_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bReturnMaterialOnMove
    static readonly int bReturnMaterialOnMove_Offset;
    static readonly IntPtr bReturnMaterialOnMove_NativeProperty;
    
    public bool bReturnMaterialOnMove
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bReturnMaterialOnMove_NativeProperty, bReturnMaterialOnMove_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bReturnMaterialOnMove_NativeProperty, bReturnMaterialOnMove_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bAllowCullDistanceVolume
    static readonly int bAllowCullDistanceVolume_Offset;
    static readonly IntPtr bAllowCullDistanceVolume_NativeProperty;
    
    public bool bAllowCullDistanceVolume
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAllowCullDistanceVolume_NativeProperty, bAllowCullDistanceVolume_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bVisibleInReflectionCaptures
    static readonly int bVisibleInReflectionCaptures_Offset;
    static readonly IntPtr bVisibleInReflectionCaptures_NativeProperty;
    
    public bool bVisibleInReflectionCaptures
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bVisibleInReflectionCaptures_NativeProperty, bVisibleInReflectionCaptures_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bVisibleInRealTimeSkyCaptures
    static readonly int bVisibleInRealTimeSkyCaptures_Offset;
    static readonly IntPtr bVisibleInRealTimeSkyCaptures_NativeProperty;
    
    public bool bVisibleInRealTimeSkyCaptures
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bVisibleInRealTimeSkyCaptures_NativeProperty, bVisibleInRealTimeSkyCaptures_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bVisibleInRayTracing
    static readonly int bVisibleInRayTracing_Offset;
    static readonly IntPtr bVisibleInRayTracing_NativeProperty;
    
    public bool bVisibleInRayTracing
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bVisibleInRayTracing_NativeProperty, bVisibleInRayTracing_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bRenderInMainPass
    static readonly int bRenderInMainPass_Offset;
    static readonly IntPtr bRenderInMainPass_NativeProperty;
    
    public bool bRenderInMainPass
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bRenderInMainPass_NativeProperty, bRenderInMainPass_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bRenderInDepthPass
    static readonly int bRenderInDepthPass_Offset;
    static readonly IntPtr bRenderInDepthPass_NativeProperty;
    
    public bool bRenderInDepthPass
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bRenderInDepthPass_NativeProperty, bRenderInDepthPass_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bReceivesDecals
    static readonly int bReceivesDecals_Offset;
    static readonly IntPtr bReceivesDecals_NativeProperty;
    
    public bool bReceivesDecals
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bReceivesDecals_NativeProperty, bReceivesDecals_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bHoldout
    static readonly int bHoldout_Offset;
    static readonly IntPtr bHoldout_NativeProperty;
    
    public bool bHoldout
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bHoldout_NativeProperty, bHoldout_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bOwnerNoSee
    static readonly int bOwnerNoSee_Offset;
    static readonly IntPtr bOwnerNoSee_NativeProperty;
    
    public bool bOwnerNoSee
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bOwnerNoSee_NativeProperty, bOwnerNoSee_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bOnlyOwnerSee
    static readonly int bOnlyOwnerSee_Offset;
    static readonly IntPtr bOnlyOwnerSee_NativeProperty;
    
    public bool bOnlyOwnerSee
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bOnlyOwnerSee_NativeProperty, bOnlyOwnerSee_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bTreatAsBackgroundForOcclusion
    static readonly int bTreatAsBackgroundForOcclusion_Offset;
    static readonly IntPtr bTreatAsBackgroundForOcclusion_NativeProperty;
    
    public bool bTreatAsBackgroundForOcclusion
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bTreatAsBackgroundForOcclusion_NativeProperty, bTreatAsBackgroundForOcclusion_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bUseAsOccluder
    static readonly int bUseAsOccluder_Offset;
    static readonly IntPtr bUseAsOccluder_NativeProperty;
    
    public bool bUseAsOccluder
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseAsOccluder_NativeProperty, bUseAsOccluder_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bForceMipStreaming
    static readonly int bForceMipStreaming_Offset;
    static readonly IntPtr bForceMipStreaming_NativeProperty;
    
    public bool bForceMipStreaming
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bForceMipStreaming_NativeProperty, bForceMipStreaming_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:CastShadow
    static readonly int CastShadow_Offset;
    static readonly IntPtr CastShadow_NativeProperty;
    
    public bool CastShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, CastShadow_NativeProperty, CastShadow_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bEmissiveLightSource
    static readonly int bEmissiveLightSource_Offset;
    static readonly IntPtr bEmissiveLightSource_NativeProperty;
    
    public bool bEmissiveLightSource
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEmissiveLightSource_NativeProperty, bEmissiveLightSource_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bAffectDynamicIndirectLighting
    static readonly int bAffectDynamicIndirectLighting_Offset;
    static readonly IntPtr bAffectDynamicIndirectLighting_NativeProperty;
    
    public bool bAffectDynamicIndirectLighting
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAffectDynamicIndirectLighting_NativeProperty, bAffectDynamicIndirectLighting_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bAffectIndirectLightingWhileHidden
    static readonly int bAffectIndirectLightingWhileHidden_Offset;
    static readonly IntPtr bAffectIndirectLightingWhileHidden_NativeProperty;
    
    public bool bAffectIndirectLightingWhileHidden
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAffectIndirectLightingWhileHidden_NativeProperty, bAffectIndirectLightingWhileHidden_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bAffectDistanceFieldLighting
    static readonly int bAffectDistanceFieldLighting_Offset;
    static readonly IntPtr bAffectDistanceFieldLighting_NativeProperty;
    
    public bool bAffectDistanceFieldLighting
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAffectDistanceFieldLighting_NativeProperty, bAffectDistanceFieldLighting_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bCastDynamicShadow
    static readonly int bCastDynamicShadow_Offset;
    static readonly IntPtr bCastDynamicShadow_NativeProperty;
    
    public bool bCastDynamicShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastDynamicShadow_NativeProperty, bCastDynamicShadow_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bCastStaticShadow
    static readonly int bCastStaticShadow_Offset;
    static readonly IntPtr bCastStaticShadow_NativeProperty;
    
    public bool bCastStaticShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastStaticShadow_NativeProperty, bCastStaticShadow_Offset);
        }
    }
    
    // EnumProperty /Script/Engine.PrimitiveComponent:ShadowCacheInvalidationBehavior
    static readonly int ShadowCacheInvalidationBehavior_Offset;
    
    public UnrealSharp.Engine.EShadowCacheInvalidationBehavior ShadowCacheInvalidationBehavior
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EShadowCacheInvalidationBehavior>.FromNative(IntPtr.Add(NativeObject, ShadowCacheInvalidationBehavior_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bCastVolumetricTranslucentShadow
    static readonly int bCastVolumetricTranslucentShadow_Offset;
    static readonly IntPtr bCastVolumetricTranslucentShadow_NativeProperty;
    
    public bool bCastVolumetricTranslucentShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastVolumetricTranslucentShadow_NativeProperty, bCastVolumetricTranslucentShadow_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bCastContactShadow
    static readonly int bCastContactShadow_Offset;
    static readonly IntPtr bCastContactShadow_NativeProperty;
    
    public bool bCastContactShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastContactShadow_NativeProperty, bCastContactShadow_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bSelfShadowOnly
    static readonly int bSelfShadowOnly_Offset;
    static readonly IntPtr bSelfShadowOnly_NativeProperty;
    
    public bool bSelfShadowOnly
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bSelfShadowOnly_NativeProperty, bSelfShadowOnly_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bCastFarShadow
    static readonly int bCastFarShadow_Offset;
    static readonly IntPtr bCastFarShadow_NativeProperty;
    
    public bool bCastFarShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastFarShadow_NativeProperty, bCastFarShadow_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bCastInsetShadow
    static readonly int bCastInsetShadow_Offset;
    static readonly IntPtr bCastInsetShadow_NativeProperty;
    
    public bool bCastInsetShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastInsetShadow_NativeProperty, bCastInsetShadow_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bCastCinematicShadow
    static readonly int bCastCinematicShadow_Offset;
    static readonly IntPtr bCastCinematicShadow_NativeProperty;
    
    public bool bCastCinematicShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastCinematicShadow_NativeProperty, bCastCinematicShadow_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bCastHiddenShadow
    static readonly int bCastHiddenShadow_Offset;
    static readonly IntPtr bCastHiddenShadow_NativeProperty;
    
    public bool bCastHiddenShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastHiddenShadow_NativeProperty, bCastHiddenShadow_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bCastShadowAsTwoSided
    static readonly int bCastShadowAsTwoSided_Offset;
    static readonly IntPtr bCastShadowAsTwoSided_NativeProperty;
    
    public bool bCastShadowAsTwoSided
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastShadowAsTwoSided_NativeProperty, bCastShadowAsTwoSided_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bLightAttachmentsAsGroup
    static readonly int bLightAttachmentsAsGroup_Offset;
    static readonly IntPtr bLightAttachmentsAsGroup_NativeProperty;
    
    public bool bLightAttachmentsAsGroup
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bLightAttachmentsAsGroup_NativeProperty, bLightAttachmentsAsGroup_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bExcludeFromLightAttachmentGroup
    static readonly int bExcludeFromLightAttachmentGroup_Offset;
    static readonly IntPtr bExcludeFromLightAttachmentGroup_NativeProperty;
    
    public bool bExcludeFromLightAttachmentGroup
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bExcludeFromLightAttachmentGroup_NativeProperty, bExcludeFromLightAttachmentGroup_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bReceiveMobileCSMShadows
    static readonly int bReceiveMobileCSMShadows_Offset;
    static readonly IntPtr bReceiveMobileCSMShadows_NativeProperty;
    
    public bool bReceiveMobileCSMShadows
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bReceiveMobileCSMShadows_NativeProperty, bReceiveMobileCSMShadows_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bSingleSampleShadowFromStationaryLights
    static readonly int bSingleSampleShadowFromStationaryLights_Offset;
    static readonly IntPtr bSingleSampleShadowFromStationaryLights_NativeProperty;
    
    public bool bSingleSampleShadowFromStationaryLights
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bSingleSampleShadowFromStationaryLights_NativeProperty, bSingleSampleShadowFromStationaryLights_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bIgnoreRadialImpulse
    static readonly int bIgnoreRadialImpulse_Offset;
    static readonly IntPtr bIgnoreRadialImpulse_NativeProperty;
    
    public bool bIgnoreRadialImpulse
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIgnoreRadialImpulse_NativeProperty, bIgnoreRadialImpulse_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bIgnoreRadialImpulse_NativeProperty, bIgnoreRadialImpulse_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bIgnoreRadialForce
    static readonly int bIgnoreRadialForce_Offset;
    static readonly IntPtr bIgnoreRadialForce_NativeProperty;
    
    public bool bIgnoreRadialForce
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIgnoreRadialForce_NativeProperty, bIgnoreRadialForce_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bIgnoreRadialForce_NativeProperty, bIgnoreRadialForce_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bApplyImpulseOnDamage
    static readonly int bApplyImpulseOnDamage_Offset;
    static readonly IntPtr bApplyImpulseOnDamage_NativeProperty;
    
    public bool bApplyImpulseOnDamage
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bApplyImpulseOnDamage_NativeProperty, bApplyImpulseOnDamage_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bApplyImpulseOnDamage_NativeProperty, bApplyImpulseOnDamage_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bReplicatePhysicsToAutonomousProxy
    static readonly int bReplicatePhysicsToAutonomousProxy_Offset;
    static readonly IntPtr bReplicatePhysicsToAutonomousProxy_NativeProperty;
    
    public bool bReplicatePhysicsToAutonomousProxy
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bReplicatePhysicsToAutonomousProxy_NativeProperty, bReplicatePhysicsToAutonomousProxy_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bReplicatePhysicsToAutonomousProxy_NativeProperty, bReplicatePhysicsToAutonomousProxy_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bRenderCustomDepth
    static readonly int bRenderCustomDepth_Offset;
    static readonly IntPtr bRenderCustomDepth_NativeProperty;
    
    public bool bRenderCustomDepth
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bRenderCustomDepth_NativeProperty, bRenderCustomDepth_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bVisibleInSceneCaptureOnly
    static readonly int bVisibleInSceneCaptureOnly_Offset;
    static readonly IntPtr bVisibleInSceneCaptureOnly_NativeProperty;
    
    public bool bVisibleInSceneCaptureOnly
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bVisibleInSceneCaptureOnly_NativeProperty, bVisibleInSceneCaptureOnly_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bHiddenInSceneCapture
    static readonly int bHiddenInSceneCapture_Offset;
    static readonly IntPtr bHiddenInSceneCapture_NativeProperty;
    
    public bool bHiddenInSceneCapture
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bHiddenInSceneCapture_NativeProperty, bHiddenInSceneCapture_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.PrimitiveComponent:bStaticWhenNotMoveable
    static readonly int bStaticWhenNotMoveable_Offset;
    static readonly IntPtr bStaticWhenNotMoveable_NativeProperty;
    
    public bool bStaticWhenNotMoveable
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bStaticWhenNotMoveable_NativeProperty, bStaticWhenNotMoveable_Offset);
        }
    }
    
    // ByteProperty /Script/Engine.PrimitiveComponent:CanCharacterStepUpOn
    static readonly int CanCharacterStepUpOn_Offset;
    
    public UnrealSharp.Engine.ECanBeCharacterBase CanCharacterStepUpOn
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ECanBeCharacterBase>.FromNative(IntPtr.Add(NativeObject, CanCharacterStepUpOn_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.ECanBeCharacterBase>.ToNative(IntPtr.Add(NativeObject, CanCharacterStepUpOn_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.PrimitiveComponent:LightingChannels
    static readonly int LightingChannels_Offset;
    
    public UnrealSharp.Engine.LightingChannels LightingChannels
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.LightingChannelsMarshaler.FromNative(IntPtr.Add(NativeObject, LightingChannels_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Engine.PrimitiveComponent:RayTracingGroupId
    static readonly int RayTracingGroupId_Offset;
    
    public int RayTracingGroupId
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, RayTracingGroupId_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Engine.PrimitiveComponent:CustomDepthStencilValue
    static readonly int CustomDepthStencilValue_Offset;
    
    public int CustomDepthStencilValue
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, CustomDepthStencilValue_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Engine.PrimitiveComponent:TranslucencySortPriority
    static readonly int TranslucencySortPriority_Offset;
    
    public int TranslucencySortPriority
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, TranslucencySortPriority_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.PrimitiveComponent:TranslucencySortDistanceOffset
    static readonly int TranslucencySortDistanceOffset_Offset;
    
    public float TranslucencySortDistanceOffset
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, TranslucencySortDistanceOffset_Offset), 0, this);
        }
    }
    
    // ArrayProperty /Script/Engine.PrimitiveComponent:RuntimeVirtualTextures
    static readonly int RuntimeVirtualTextures_Offset;
    static readonly IntPtr RuntimeVirtualTextures_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.RuntimeVirtualTexture> RuntimeVirtualTextures_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.RuntimeVirtualTexture> RuntimeVirtualTextures
    {
        get
        {
            if(RuntimeVirtualTextures_Wrapper == null)
            {
                RuntimeVirtualTextures_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.RuntimeVirtualTexture>(1, RuntimeVirtualTextures_NativeProperty, ObjectMarshaller<UnrealSharp.Engine.RuntimeVirtualTexture>.ToNative, ObjectMarshaller<UnrealSharp.Engine.RuntimeVirtualTexture>.FromNative);
            }
            
            return RuntimeVirtualTextures_Wrapper.FromNative(IntPtr.Add(NativeObject,RuntimeVirtualTextures_Offset),0,this);
        }
    }
    
    // EnumProperty /Script/Engine.PrimitiveComponent:VirtualTextureRenderPassType
    static readonly int VirtualTextureRenderPassType_Offset;
    
    public UnrealSharp.Engine.ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ERuntimeVirtualTextureMainPassType>.FromNative(IntPtr.Add(NativeObject, VirtualTextureRenderPassType_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.PrimitiveComponent:BodyInstance
    static readonly int BodyInstance_Offset;
    
    public UnrealSharp.Engine.BodyInstance BodyInstance
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.BodyInstanceMarshaler.FromNative(IntPtr.Add(NativeObject, BodyInstance_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/Engine.PrimitiveComponent:RayTracingGroupCullingPriority
    static readonly int RayTracingGroupCullingPriority_Offset;
    
    public UnrealSharp.Engine.ERayTracingGroupCullingPriority RayTracingGroupCullingPriority
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ERayTracingGroupCullingPriority>.FromNative(IntPtr.Add(NativeObject, RayTracingGroupCullingPriority_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/Engine.PrimitiveComponent:CustomDepthStencilWriteMask
    static readonly int CustomDepthStencilWriteMask_Offset;
    
    public UnrealSharp.Engine.ERendererStencilMask CustomDepthStencilWriteMask
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ERendererStencilMask>.FromNative(IntPtr.Add(NativeObject, CustomDepthStencilWriteMask_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:WasRecentlyRendered
    static readonly IntPtr WasRecentlyRendered_NativeFunction;
    static readonly int WasRecentlyRendered_ParamsSize;
    static readonly int WasRecentlyRendered_Tolerance_Offset;
    static readonly int WasRecentlyRendered_ReturnValue_Offset;
    
    public bool WasRecentlyRendered(float tolerance = 0.200000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[WasRecentlyRendered_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, WasRecentlyRendered_Tolerance_Offset), 0, null, tolerance);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, WasRecentlyRendered_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, WasRecentlyRendered_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:WakeRigidBody
    static readonly IntPtr WakeRigidBody_NativeFunction;
    static readonly int WakeRigidBody_ParamsSize;
    static readonly int WakeRigidBody_BoneName_Offset;
    
    public void WakeRigidBody(Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[WakeRigidBody_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, WakeRigidBody_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, WakeRigidBody_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:WakeAllRigidBodies
    static readonly IntPtr WakeAllRigidBodies_NativeFunction;
    
    public void WakeAllRigidBodies()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, WakeAllRigidBodies_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetWalkableSlopeOverride
    static readonly IntPtr SetWalkableSlopeOverride_NativeFunction;
    static readonly int SetWalkableSlopeOverride_ParamsSize;
    static readonly int SetWalkableSlopeOverride_NewOverride_Offset;
    
    public void SetWalkableSlopeOverride(UnrealSharp.Engine.WalkableSlopeOverride newOverride)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWalkableSlopeOverride_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.WalkableSlopeOverrideMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetWalkableSlopeOverride_NewOverride_Offset), 0, null, newOverride);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetWalkableSlopeOverride_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetVisibleInSceneCaptureOnly
    static readonly IntPtr SetVisibleInSceneCaptureOnly_NativeFunction;
    static readonly int SetVisibleInSceneCaptureOnly_ParamsSize;
    static readonly int SetVisibleInSceneCaptureOnly_bValue_Offset;
    
    public void SetVisibleInSceneCaptureOnly(bool bValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVisibleInSceneCaptureOnly_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetVisibleInSceneCaptureOnly_bValue_Offset), 0, null, bValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVisibleInSceneCaptureOnly_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetVisibleInRayTracing
    static readonly IntPtr SetVisibleInRayTracing_NativeFunction;
    static readonly int SetVisibleInRayTracing_ParamsSize;
    static readonly int SetVisibleInRayTracing_bNewVisibleInRayTracing_Offset;
    
    public void SetVisibleInRayTracing(bool bNewVisibleInRayTracing)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVisibleInRayTracing_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetVisibleInRayTracing_bNewVisibleInRayTracing_Offset), 0, null, bNewVisibleInRayTracing);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVisibleInRayTracing_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetVectorParameterForDefaultCustomPrimitiveData
    static readonly IntPtr SetVectorParameterForDefaultCustomPrimitiveData_NativeFunction;
    static readonly int SetVectorParameterForDefaultCustomPrimitiveData_ParamsSize;
    static readonly int SetVectorParameterForDefaultCustomPrimitiveData_ParameterName_Offset;
    static readonly int SetVectorParameterForDefaultCustomPrimitiveData_Value_Offset;
    
    public void SetVectorParameterForDefaultCustomPrimitiveData(Name parameterName, System.DoubleNumerics.Vector4 value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVectorParameterForDefaultCustomPrimitiveData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetVectorParameterForDefaultCustomPrimitiveData_ParameterName_Offset), 0, null, parameterName);
            BlittableMarshaller<System.DoubleNumerics.Vector4>.ToNative(IntPtr.Add(ParamsBuffer, SetVectorParameterForDefaultCustomPrimitiveData_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVectorParameterForDefaultCustomPrimitiveData_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetVectorParameterForCustomPrimitiveData
    static readonly IntPtr SetVectorParameterForCustomPrimitiveData_NativeFunction;
    static readonly int SetVectorParameterForCustomPrimitiveData_ParamsSize;
    static readonly int SetVectorParameterForCustomPrimitiveData_ParameterName_Offset;
    static readonly int SetVectorParameterForCustomPrimitiveData_Value_Offset;
    
    public void SetVectorParameterForCustomPrimitiveData(Name parameterName, System.DoubleNumerics.Vector4 value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVectorParameterForCustomPrimitiveData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetVectorParameterForCustomPrimitiveData_ParameterName_Offset), 0, null, parameterName);
            BlittableMarshaller<System.DoubleNumerics.Vector4>.ToNative(IntPtr.Add(ParamsBuffer, SetVectorParameterForCustomPrimitiveData_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVectorParameterForCustomPrimitiveData_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetUseCCD
    static readonly IntPtr SetUseCCD_NativeFunction;
    static readonly int SetUseCCD_ParamsSize;
    static readonly int SetUseCCD_InUseCCD_Offset;
    static readonly int SetUseCCD_BoneName_Offset;
    
    public void SetUseCCD(bool inUseCCD, Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetUseCCD_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetUseCCD_InUseCCD_Offset), 0, null, inUseCCD);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetUseCCD_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetUseCCD_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetTranslucentSortPriority
    static readonly IntPtr SetTranslucentSortPriority_NativeFunction;
    static readonly int SetTranslucentSortPriority_ParamsSize;
    static readonly int SetTranslucentSortPriority_NewTranslucentSortPriority_Offset;
    
    public void SetTranslucentSortPriority(int newTranslucentSortPriority)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTranslucentSortPriority_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetTranslucentSortPriority_NewTranslucentSortPriority_Offset), 0, null, newTranslucentSortPriority);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTranslucentSortPriority_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetTranslucencySortDistanceOffset
    static readonly IntPtr SetTranslucencySortDistanceOffset_NativeFunction;
    static readonly int SetTranslucencySortDistanceOffset_ParamsSize;
    static readonly int SetTranslucencySortDistanceOffset_NewTranslucencySortDistanceOffset_Offset;
    
    public void SetTranslucencySortDistanceOffset(float newTranslucencySortDistanceOffset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTranslucencySortDistanceOffset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetTranslucencySortDistanceOffset_NewTranslucencySortDistanceOffset_Offset), 0, null, newTranslucencySortDistanceOffset);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTranslucencySortDistanceOffset_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetStaticWhenNotMoveable
    static readonly IntPtr SetStaticWhenNotMoveable_NativeFunction;
    static readonly int SetStaticWhenNotMoveable_ParamsSize;
    static readonly int SetStaticWhenNotMoveable_bInStaticWhenNotMoveable_Offset;
    
    public void SetStaticWhenNotMoveable(bool bInStaticWhenNotMoveable)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetStaticWhenNotMoveable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetStaticWhenNotMoveable_bInStaticWhenNotMoveable_Offset), 0, null, bInStaticWhenNotMoveable);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetStaticWhenNotMoveable_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetSingleSampleShadowFromStationaryLights
    static readonly IntPtr SetSingleSampleShadowFromStationaryLights_NativeFunction;
    static readonly int SetSingleSampleShadowFromStationaryLights_ParamsSize;
    static readonly int SetSingleSampleShadowFromStationaryLights_bNewSingleSampleShadowFromStationaryLights_Offset;
    
    public void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSingleSampleShadowFromStationaryLights_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetSingleSampleShadowFromStationaryLights_bNewSingleSampleShadowFromStationaryLights_Offset), 0, null, bNewSingleSampleShadowFromStationaryLights);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSingleSampleShadowFromStationaryLights_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetSimulatePhysics
    static readonly IntPtr SetSimulatePhysics_NativeFunction;
    static readonly int SetSimulatePhysics_ParamsSize;
    static readonly int SetSimulatePhysics_bSimulate_Offset;
    
    public void SetSimulatePhysics(bool bSimulate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSimulatePhysics_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetSimulatePhysics_bSimulate_Offset), 0, null, bSimulate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSimulatePhysics_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetScalarParameterForDefaultCustomPrimitiveData
    static readonly IntPtr SetScalarParameterForDefaultCustomPrimitiveData_NativeFunction;
    static readonly int SetScalarParameterForDefaultCustomPrimitiveData_ParamsSize;
    static readonly int SetScalarParameterForDefaultCustomPrimitiveData_ParameterName_Offset;
    static readonly int SetScalarParameterForDefaultCustomPrimitiveData_Value_Offset;
    
    public void SetScalarParameterForDefaultCustomPrimitiveData(Name parameterName, float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetScalarParameterForDefaultCustomPrimitiveData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetScalarParameterForDefaultCustomPrimitiveData_ParameterName_Offset), 0, null, parameterName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetScalarParameterForDefaultCustomPrimitiveData_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetScalarParameterForDefaultCustomPrimitiveData_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetScalarParameterForCustomPrimitiveData
    static readonly IntPtr SetScalarParameterForCustomPrimitiveData_NativeFunction;
    static readonly int SetScalarParameterForCustomPrimitiveData_ParamsSize;
    static readonly int SetScalarParameterForCustomPrimitiveData_ParameterName_Offset;
    static readonly int SetScalarParameterForCustomPrimitiveData_Value_Offset;
    
    public void SetScalarParameterForCustomPrimitiveData(Name parameterName, float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetScalarParameterForCustomPrimitiveData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetScalarParameterForCustomPrimitiveData_ParameterName_Offset), 0, null, parameterName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetScalarParameterForCustomPrimitiveData_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetScalarParameterForCustomPrimitiveData_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetRenderInMainPass
    static readonly IntPtr SetRenderInMainPass_NativeFunction;
    static readonly int SetRenderInMainPass_ParamsSize;
    static readonly int SetRenderInMainPass_bValue_Offset;
    
    public void SetRenderInMainPass(bool bValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRenderInMainPass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetRenderInMainPass_bValue_Offset), 0, null, bValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRenderInMainPass_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetRenderInDepthPass
    static readonly IntPtr SetRenderInDepthPass_NativeFunction;
    static readonly int SetRenderInDepthPass_ParamsSize;
    static readonly int SetRenderInDepthPass_bValue_Offset;
    
    public void SetRenderInDepthPass(bool bValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRenderInDepthPass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetRenderInDepthPass_bValue_Offset), 0, null, bValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRenderInDepthPass_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetRenderCustomDepth
    static readonly IntPtr SetRenderCustomDepth_NativeFunction;
    static readonly int SetRenderCustomDepth_ParamsSize;
    static readonly int SetRenderCustomDepth_bValue_Offset;
    
    public void SetRenderCustomDepth(bool bValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRenderCustomDepth_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetRenderCustomDepth_bValue_Offset), 0, null, bValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRenderCustomDepth_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetReceivesDecals
    static readonly IntPtr SetReceivesDecals_NativeFunction;
    static readonly int SetReceivesDecals_ParamsSize;
    static readonly int SetReceivesDecals_bNewReceivesDecals_Offset;
    
    public void SetReceivesDecals(bool bNewReceivesDecals)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetReceivesDecals_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetReceivesDecals_bNewReceivesDecals_Offset), 0, null, bNewReceivesDecals);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetReceivesDecals_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetPhysMaterialOverride
    static readonly IntPtr SetPhysMaterialOverride_NativeFunction;
    static readonly int SetPhysMaterialOverride_ParamsSize;
    static readonly int SetPhysMaterialOverride_NewPhysMaterial_Offset;
    
    public void SetPhysMaterialOverride(UnrealSharp.PhysicsCore.PhysicalMaterial newPhysMaterial)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPhysMaterialOverride_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.PhysicsCore.PhysicalMaterial>.ToNative(IntPtr.Add(ParamsBuffer, SetPhysMaterialOverride_NewPhysMaterial_Offset), 0, null, newPhysMaterial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPhysMaterialOverride_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetPhysicsMaxAngularVelocityInRadians
    static readonly IntPtr SetPhysicsMaxAngularVelocityInRadians_NativeFunction;
    static readonly int SetPhysicsMaxAngularVelocityInRadians_ParamsSize;
    static readonly int SetPhysicsMaxAngularVelocityInRadians_NewMaxAngVel_Offset;
    static readonly int SetPhysicsMaxAngularVelocityInRadians_bAddToCurrent_Offset;
    static readonly int SetPhysicsMaxAngularVelocityInRadians_BoneName_Offset;
    
    public void SetPhysicsMaxAngularVelocityInRadians(float newMaxAngVel, bool bAddToCurrent = false, Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPhysicsMaxAngularVelocityInRadians_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPhysicsMaxAngularVelocityInRadians_NewMaxAngVel_Offset), 0, null, newMaxAngVel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetPhysicsMaxAngularVelocityInRadians_bAddToCurrent_Offset), 0, null, bAddToCurrent);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetPhysicsMaxAngularVelocityInRadians_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPhysicsMaxAngularVelocityInRadians_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetPhysicsMaxAngularVelocityInDegrees
    static readonly IntPtr SetPhysicsMaxAngularVelocityInDegrees_NativeFunction;
    static readonly int SetPhysicsMaxAngularVelocityInDegrees_ParamsSize;
    static readonly int SetPhysicsMaxAngularVelocityInDegrees_NewMaxAngVel_Offset;
    static readonly int SetPhysicsMaxAngularVelocityInDegrees_bAddToCurrent_Offset;
    static readonly int SetPhysicsMaxAngularVelocityInDegrees_BoneName_Offset;
    
    public void SetPhysicsMaxAngularVelocityInDegrees(float newMaxAngVel, bool bAddToCurrent = false, Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPhysicsMaxAngularVelocityInDegrees_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPhysicsMaxAngularVelocityInDegrees_NewMaxAngVel_Offset), 0, null, newMaxAngVel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetPhysicsMaxAngularVelocityInDegrees_bAddToCurrent_Offset), 0, null, bAddToCurrent);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetPhysicsMaxAngularVelocityInDegrees_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPhysicsMaxAngularVelocityInDegrees_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetPhysicsLinearVelocity
    static readonly IntPtr SetPhysicsLinearVelocity_NativeFunction;
    static readonly int SetPhysicsLinearVelocity_ParamsSize;
    static readonly int SetPhysicsLinearVelocity_NewVel_Offset;
    static readonly int SetPhysicsLinearVelocity_bAddToCurrent_Offset;
    static readonly int SetPhysicsLinearVelocity_BoneName_Offset;
    
    public void SetPhysicsLinearVelocity(System.DoubleNumerics.Vector3 newVel, bool bAddToCurrent = false, Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPhysicsLinearVelocity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetPhysicsLinearVelocity_NewVel_Offset), 0, null, newVel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetPhysicsLinearVelocity_bAddToCurrent_Offset), 0, null, bAddToCurrent);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetPhysicsLinearVelocity_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPhysicsLinearVelocity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetPhysicsAngularVelocityInRadians
    static readonly IntPtr SetPhysicsAngularVelocityInRadians_NativeFunction;
    static readonly int SetPhysicsAngularVelocityInRadians_ParamsSize;
    static readonly int SetPhysicsAngularVelocityInRadians_NewAngVel_Offset;
    static readonly int SetPhysicsAngularVelocityInRadians_bAddToCurrent_Offset;
    static readonly int SetPhysicsAngularVelocityInRadians_BoneName_Offset;
    
    public void SetPhysicsAngularVelocityInRadians(System.DoubleNumerics.Vector3 newAngVel, bool bAddToCurrent = false, Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPhysicsAngularVelocityInRadians_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetPhysicsAngularVelocityInRadians_NewAngVel_Offset), 0, null, newAngVel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetPhysicsAngularVelocityInRadians_bAddToCurrent_Offset), 0, null, bAddToCurrent);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetPhysicsAngularVelocityInRadians_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPhysicsAngularVelocityInRadians_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetPhysicsAngularVelocityInDegrees
    static readonly IntPtr SetPhysicsAngularVelocityInDegrees_NativeFunction;
    static readonly int SetPhysicsAngularVelocityInDegrees_ParamsSize;
    static readonly int SetPhysicsAngularVelocityInDegrees_NewAngVel_Offset;
    static readonly int SetPhysicsAngularVelocityInDegrees_bAddToCurrent_Offset;
    static readonly int SetPhysicsAngularVelocityInDegrees_BoneName_Offset;
    
    public void SetPhysicsAngularVelocityInDegrees(System.DoubleNumerics.Vector3 newAngVel, bool bAddToCurrent = false, Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPhysicsAngularVelocityInDegrees_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetPhysicsAngularVelocityInDegrees_NewAngVel_Offset), 0, null, newAngVel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetPhysicsAngularVelocityInDegrees_bAddToCurrent_Offset), 0, null, bAddToCurrent);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetPhysicsAngularVelocityInDegrees_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPhysicsAngularVelocityInDegrees_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetOwnerNoSee
    static readonly IntPtr SetOwnerNoSee_NativeFunction;
    static readonly int SetOwnerNoSee_ParamsSize;
    static readonly int SetOwnerNoSee_bNewOwnerNoSee_Offset;
    
    public void SetOwnerNoSee(bool bNewOwnerNoSee)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOwnerNoSee_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetOwnerNoSee_bNewOwnerNoSee_Offset), 0, null, bNewOwnerNoSee);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOwnerNoSee_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetOnlyOwnerSee
    static readonly IntPtr SetOnlyOwnerSee_NativeFunction;
    static readonly int SetOnlyOwnerSee_ParamsSize;
    static readonly int SetOnlyOwnerSee_bNewOnlyOwnerSee_Offset;
    
    public void SetOnlyOwnerSee(bool bNewOnlyOwnerSee)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOnlyOwnerSee_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetOnlyOwnerSee_bNewOnlyOwnerSee_Offset), 0, null, bNewOnlyOwnerSee);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOnlyOwnerSee_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetNotifyRigidBodyCollision
    static readonly IntPtr SetNotifyRigidBodyCollision_NativeFunction;
    static readonly int SetNotifyRigidBodyCollision_ParamsSize;
    static readonly int SetNotifyRigidBodyCollision_bNewNotifyRigidBodyCollision_Offset;
    
    public void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNotifyRigidBodyCollision_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetNotifyRigidBodyCollision_bNewNotifyRigidBodyCollision_Offset), 0, null, bNewNotifyRigidBodyCollision);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNotifyRigidBodyCollision_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetMaterialByName
    static readonly IntPtr SetMaterialByName_NativeFunction;
    static readonly int SetMaterialByName_ParamsSize;
    static readonly int SetMaterialByName_MaterialSlotName_Offset;
    static readonly int SetMaterialByName_Material_Offset;
    
    public void SetMaterialByName(Name materialSlotName, UnrealSharp.Engine.MaterialInterface material)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMaterialByName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialByName_MaterialSlotName_Offset), 0, null, materialSlotName);
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialByName_Material_Offset), 0, null, material);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMaterialByName_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetMaterial
    static readonly IntPtr SetMaterial_NativeFunction;
    static readonly int SetMaterial_ParamsSize;
    static readonly int SetMaterial_ElementIndex_Offset;
    static readonly int SetMaterial_Material_Offset;
    
    public void SetMaterial(int elementIndex, UnrealSharp.Engine.MaterialInterface material)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterial_ElementIndex_Offset), 0, null, elementIndex);
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterial_Material_Offset), 0, null, material);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMaterial_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetMassScale
    static readonly IntPtr SetMassScale_NativeFunction;
    static readonly int SetMassScale_ParamsSize;
    static readonly int SetMassScale_BoneName_Offset;
    static readonly int SetMassScale_InMassScale_Offset;
    
    public void SetMassScale(Name boneName = default(Name), float inMassScale = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMassScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetMassScale_BoneName_Offset), 0, null, boneName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMassScale_InMassScale_Offset), 0, null, inMassScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMassScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetMassOverrideInKg
    static readonly IntPtr SetMassOverrideInKg_NativeFunction;
    static readonly int SetMassOverrideInKg_ParamsSize;
    static readonly int SetMassOverrideInKg_BoneName_Offset;
    static readonly int SetMassOverrideInKg_MassInKg_Offset;
    static readonly int SetMassOverrideInKg_bOverrideMass_Offset;
    
    public void SetMassOverrideInKg(Name boneName = default(Name), float massInKg = 1.000000f, bool bOverrideMass = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMassOverrideInKg_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetMassOverrideInKg_BoneName_Offset), 0, null, boneName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMassOverrideInKg_MassInKg_Offset), 0, null, massInKg);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetMassOverrideInKg_bOverrideMass_Offset), 0, null, bOverrideMass);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMassOverrideInKg_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetLinearDamping
    static readonly IntPtr SetLinearDamping_NativeFunction;
    static readonly int SetLinearDamping_ParamsSize;
    static readonly int SetLinearDamping_InDamping_Offset;
    
    public void SetLinearDamping(float inDamping)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLinearDamping_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearDamping_InDamping_Offset), 0, null, inDamping);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLinearDamping_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetLightingChannels
    static readonly IntPtr SetLightingChannels_NativeFunction;
    static readonly int SetLightingChannels_ParamsSize;
    static readonly int SetLightingChannels_bChannel0_Offset;
    static readonly int SetLightingChannels_bChannel1_Offset;
    static readonly int SetLightingChannels_bChannel2_Offset;
    
    public void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLightingChannels_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLightingChannels_bChannel0_Offset), 0, null, bChannel0);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLightingChannels_bChannel1_Offset), 0, null, bChannel1);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLightingChannels_bChannel2_Offset), 0, null, bChannel2);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLightingChannels_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetLightAttachmentsAsGroup
    static readonly IntPtr SetLightAttachmentsAsGroup_NativeFunction;
    static readonly int SetLightAttachmentsAsGroup_ParamsSize;
    static readonly int SetLightAttachmentsAsGroup_bInLightAttachmentsAsGroup_Offset;
    
    public void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLightAttachmentsAsGroup_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLightAttachmentsAsGroup_bInLightAttachmentsAsGroup_Offset), 0, null, bInLightAttachmentsAsGroup);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLightAttachmentsAsGroup_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetIgnoreBoundsForEditorFocus
    static readonly IntPtr SetIgnoreBoundsForEditorFocus_NativeFunction;
    static readonly int SetIgnoreBoundsForEditorFocus_ParamsSize;
    static readonly int SetIgnoreBoundsForEditorFocus_bIgnore_Offset;
    
    public void SetIgnoreBoundsForEditorFocus(bool bIgnore)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIgnoreBoundsForEditorFocus_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetIgnoreBoundsForEditorFocus_bIgnore_Offset), 0, null, bIgnore);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIgnoreBoundsForEditorFocus_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetHoldout
    static readonly IntPtr SetHoldout_NativeFunction;
    static readonly int SetHoldout_ParamsSize;
    static readonly int SetHoldout_bNewHoldout_Offset;
    
    public void SetHoldout(bool bNewHoldout)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetHoldout_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetHoldout_bNewHoldout_Offset), 0, null, bNewHoldout);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetHoldout_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetHiddenInSceneCapture
    static readonly IntPtr SetHiddenInSceneCapture_NativeFunction;
    static readonly int SetHiddenInSceneCapture_ParamsSize;
    static readonly int SetHiddenInSceneCapture_bValue_Offset;
    
    public void SetHiddenInSceneCapture(bool bValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetHiddenInSceneCapture_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetHiddenInSceneCapture_bValue_Offset), 0, null, bValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetHiddenInSceneCapture_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetExcludeFromLightAttachmentGroup
    static readonly IntPtr SetExcludeFromLightAttachmentGroup_NativeFunction;
    static readonly int SetExcludeFromLightAttachmentGroup_ParamsSize;
    static readonly int SetExcludeFromLightAttachmentGroup_bInExcludeFromLightAttachmentGroup_Offset;
    
    public void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetExcludeFromLightAttachmentGroup_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetExcludeFromLightAttachmentGroup_bInExcludeFromLightAttachmentGroup_Offset), 0, null, bInExcludeFromLightAttachmentGroup);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetExcludeFromLightAttachmentGroup_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetExcludedFromHLODLevel
    static readonly IntPtr SetExcludedFromHLODLevel_NativeFunction;
    static readonly int SetExcludedFromHLODLevel_ParamsSize;
    static readonly int SetExcludedFromHLODLevel_HLODLevel_Offset;
    static readonly int SetExcludedFromHLODLevel_bExcluded_Offset;
    
    public void SetExcludedFromHLODLevel(UnrealSharp.Engine.EHLODLevelExclusion hLODLevel, bool bExcluded)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetExcludedFromHLODLevel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EHLODLevelExclusion>.ToNative(IntPtr.Add(ParamsBuffer, SetExcludedFromHLODLevel_HLODLevel_Offset), 0, null, hLODLevel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetExcludedFromHLODLevel_bExcluded_Offset), 0, null, bExcluded);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetExcludedFromHLODLevel_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetEnableGravity
    static readonly IntPtr SetEnableGravity_NativeFunction;
    static readonly int SetEnableGravity_ParamsSize;
    static readonly int SetEnableGravity_bGravityEnabled_Offset;
    
    public void SetEnableGravity(bool bGravityEnabled)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetEnableGravity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetEnableGravity_bGravityEnabled_Offset), 0, null, bGravityEnabled);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetEnableGravity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetEmissiveLightSource
    static readonly IntPtr SetEmissiveLightSource_NativeFunction;
    static readonly int SetEmissiveLightSource_ParamsSize;
    static readonly int SetEmissiveLightSource_NewEmissiveLightSource_Offset;
    
    public void SetEmissiveLightSource(bool newEmissiveLightSource)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetEmissiveLightSource_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetEmissiveLightSource_NewEmissiveLightSource_Offset), 0, null, newEmissiveLightSource);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetEmissiveLightSource_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetDefaultCustomPrimitiveDataVector4
    static readonly IntPtr SetDefaultCustomPrimitiveDataVector4_NativeFunction;
    static readonly int SetDefaultCustomPrimitiveDataVector4_ParamsSize;
    static readonly int SetDefaultCustomPrimitiveDataVector4_DataIndex_Offset;
    static readonly int SetDefaultCustomPrimitiveDataVector4_Value_Offset;
    
    public void SetDefaultCustomPrimitiveDataVector4(int dataIndex, System.DoubleNumerics.Vector4 value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDefaultCustomPrimitiveDataVector4_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetDefaultCustomPrimitiveDataVector4_DataIndex_Offset), 0, null, dataIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector4>.ToNative(IntPtr.Add(ParamsBuffer, SetDefaultCustomPrimitiveDataVector4_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDefaultCustomPrimitiveDataVector4_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetDefaultCustomPrimitiveDataVector3
    static readonly IntPtr SetDefaultCustomPrimitiveDataVector3_NativeFunction;
    static readonly int SetDefaultCustomPrimitiveDataVector3_ParamsSize;
    static readonly int SetDefaultCustomPrimitiveDataVector3_DataIndex_Offset;
    static readonly int SetDefaultCustomPrimitiveDataVector3_Value_Offset;
    
    public void SetDefaultCustomPrimitiveDataVector3(int dataIndex, System.DoubleNumerics.Vector3 value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDefaultCustomPrimitiveDataVector3_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetDefaultCustomPrimitiveDataVector3_DataIndex_Offset), 0, null, dataIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetDefaultCustomPrimitiveDataVector3_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDefaultCustomPrimitiveDataVector3_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetDefaultCustomPrimitiveDataVector2
    static readonly IntPtr SetDefaultCustomPrimitiveDataVector2_NativeFunction;
    static readonly int SetDefaultCustomPrimitiveDataVector2_ParamsSize;
    static readonly int SetDefaultCustomPrimitiveDataVector2_DataIndex_Offset;
    static readonly int SetDefaultCustomPrimitiveDataVector2_Value_Offset;
    
    public void SetDefaultCustomPrimitiveDataVector2(int dataIndex, System.DoubleNumerics.Vector2 value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDefaultCustomPrimitiveDataVector2_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetDefaultCustomPrimitiveDataVector2_DataIndex_Offset), 0, null, dataIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetDefaultCustomPrimitiveDataVector2_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDefaultCustomPrimitiveDataVector2_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetDefaultCustomPrimitiveDataFloat
    static readonly IntPtr SetDefaultCustomPrimitiveDataFloat_NativeFunction;
    static readonly int SetDefaultCustomPrimitiveDataFloat_ParamsSize;
    static readonly int SetDefaultCustomPrimitiveDataFloat_DataIndex_Offset;
    static readonly int SetDefaultCustomPrimitiveDataFloat_Value_Offset;
    
    public void SetDefaultCustomPrimitiveDataFloat(int dataIndex, float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDefaultCustomPrimitiveDataFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetDefaultCustomPrimitiveDataFloat_DataIndex_Offset), 0, null, dataIndex);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetDefaultCustomPrimitiveDataFloat_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDefaultCustomPrimitiveDataFloat_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetCustomPrimitiveDataVector4
    static readonly IntPtr SetCustomPrimitiveDataVector4_NativeFunction;
    static readonly int SetCustomPrimitiveDataVector4_ParamsSize;
    static readonly int SetCustomPrimitiveDataVector4_DataIndex_Offset;
    static readonly int SetCustomPrimitiveDataVector4_Value_Offset;
    
    public void SetCustomPrimitiveDataVector4(int dataIndex, System.DoubleNumerics.Vector4 value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomPrimitiveDataVector4_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomPrimitiveDataVector4_DataIndex_Offset), 0, null, dataIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector4>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomPrimitiveDataVector4_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomPrimitiveDataVector4_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetCustomPrimitiveDataVector3
    static readonly IntPtr SetCustomPrimitiveDataVector3_NativeFunction;
    static readonly int SetCustomPrimitiveDataVector3_ParamsSize;
    static readonly int SetCustomPrimitiveDataVector3_DataIndex_Offset;
    static readonly int SetCustomPrimitiveDataVector3_Value_Offset;
    
    public void SetCustomPrimitiveDataVector3(int dataIndex, System.DoubleNumerics.Vector3 value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomPrimitiveDataVector3_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomPrimitiveDataVector3_DataIndex_Offset), 0, null, dataIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomPrimitiveDataVector3_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomPrimitiveDataVector3_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetCustomPrimitiveDataVector2
    static readonly IntPtr SetCustomPrimitiveDataVector2_NativeFunction;
    static readonly int SetCustomPrimitiveDataVector2_ParamsSize;
    static readonly int SetCustomPrimitiveDataVector2_DataIndex_Offset;
    static readonly int SetCustomPrimitiveDataVector2_Value_Offset;
    
    public void SetCustomPrimitiveDataVector2(int dataIndex, System.DoubleNumerics.Vector2 value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomPrimitiveDataVector2_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomPrimitiveDataVector2_DataIndex_Offset), 0, null, dataIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomPrimitiveDataVector2_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomPrimitiveDataVector2_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetCustomPrimitiveDataFloat
    static readonly IntPtr SetCustomPrimitiveDataFloat_NativeFunction;
    static readonly int SetCustomPrimitiveDataFloat_ParamsSize;
    static readonly int SetCustomPrimitiveDataFloat_DataIndex_Offset;
    static readonly int SetCustomPrimitiveDataFloat_Value_Offset;
    
    public void SetCustomPrimitiveDataFloat(int dataIndex, float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomPrimitiveDataFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomPrimitiveDataFloat_DataIndex_Offset), 0, null, dataIndex);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomPrimitiveDataFloat_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomPrimitiveDataFloat_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetCustomDepthStencilWriteMask
    static readonly IntPtr SetCustomDepthStencilWriteMask_NativeFunction;
    static readonly int SetCustomDepthStencilWriteMask_ParamsSize;
    static readonly int SetCustomDepthStencilWriteMask_WriteMaskBit_Offset;
    
    public void SetCustomDepthStencilWriteMask(UnrealSharp.Engine.ERendererStencilMask writeMaskBit)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomDepthStencilWriteMask_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ERendererStencilMask>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomDepthStencilWriteMask_WriteMaskBit_Offset), 0, null, writeMaskBit);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomDepthStencilWriteMask_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetCustomDepthStencilValue
    static readonly IntPtr SetCustomDepthStencilValue_NativeFunction;
    static readonly int SetCustomDepthStencilValue_ParamsSize;
    static readonly int SetCustomDepthStencilValue_Value_Offset;
    
    public void SetCustomDepthStencilValue(int value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomDepthStencilValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomDepthStencilValue_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomDepthStencilValue_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetCullDistance
    static readonly IntPtr SetCullDistance_NativeFunction;
    static readonly int SetCullDistance_ParamsSize;
    static readonly int SetCullDistance_NewCullDistance_Offset;
    
    public void SetCullDistance(float newCullDistance)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCullDistance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCullDistance_NewCullDistance_Offset), 0, null, newCullDistance);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCullDistance_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetConstraintMode
    static readonly IntPtr SetConstraintMode_NativeFunction;
    static readonly int SetConstraintMode_ParamsSize;
    static readonly int SetConstraintMode_ConstraintMode_Offset;
    
    public void SetConstraintMode(UnrealSharp.Engine.EDOFMode constraintMode)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetConstraintMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EDOFMode>.ToNative(IntPtr.Add(ParamsBuffer, SetConstraintMode_ConstraintMode_Offset), 0, null, constraintMode);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetConstraintMode_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetCollisionResponseToChannel
    static readonly IntPtr SetCollisionResponseToChannel_NativeFunction;
    static readonly int SetCollisionResponseToChannel_ParamsSize;
    static readonly int SetCollisionResponseToChannel_Channel_Offset;
    static readonly int SetCollisionResponseToChannel_NewResponse_Offset;
    
    public void SetCollisionResponseToChannel(UnrealSharp.Engine.ECollisionChannel channel, UnrealSharp.Engine.ECollisionResponse newResponse)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCollisionResponseToChannel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ECollisionChannel>.ToNative(IntPtr.Add(ParamsBuffer, SetCollisionResponseToChannel_Channel_Offset), 0, null, channel);
            BlittableMarshaller<UnrealSharp.Engine.ECollisionResponse>.ToNative(IntPtr.Add(ParamsBuffer, SetCollisionResponseToChannel_NewResponse_Offset), 0, null, newResponse);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCollisionResponseToChannel_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetCollisionResponseToAllChannels
    static readonly IntPtr SetCollisionResponseToAllChannels_NativeFunction;
    static readonly int SetCollisionResponseToAllChannels_ParamsSize;
    static readonly int SetCollisionResponseToAllChannels_NewResponse_Offset;
    
    public void SetCollisionResponseToAllChannels(UnrealSharp.Engine.ECollisionResponse newResponse)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCollisionResponseToAllChannels_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ECollisionResponse>.ToNative(IntPtr.Add(ParamsBuffer, SetCollisionResponseToAllChannels_NewResponse_Offset), 0, null, newResponse);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCollisionResponseToAllChannels_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetCollisionProfileName
    static readonly IntPtr SetCollisionProfileName_NativeFunction;
    static readonly int SetCollisionProfileName_ParamsSize;
    static readonly int SetCollisionProfileName_InCollisionProfileName_Offset;
    static readonly int SetCollisionProfileName_bUpdateOverlaps_Offset;
    
    public void SetCollisionProfileName(Name inCollisionProfileName, bool bUpdateOverlaps = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCollisionProfileName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetCollisionProfileName_InCollisionProfileName_Offset), 0, null, inCollisionProfileName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCollisionProfileName_bUpdateOverlaps_Offset), 0, null, bUpdateOverlaps);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCollisionProfileName_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetCollisionObjectType
    static readonly IntPtr SetCollisionObjectType_NativeFunction;
    static readonly int SetCollisionObjectType_ParamsSize;
    static readonly int SetCollisionObjectType_Channel_Offset;
    
    public void SetCollisionObjectType(UnrealSharp.Engine.ECollisionChannel channel)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCollisionObjectType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ECollisionChannel>.ToNative(IntPtr.Add(ParamsBuffer, SetCollisionObjectType_Channel_Offset), 0, null, channel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCollisionObjectType_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetCollisionEnabled
    static readonly IntPtr SetCollisionEnabled_NativeFunction;
    static readonly int SetCollisionEnabled_ParamsSize;
    static readonly int SetCollisionEnabled_NewType_Offset;
    
    public void SetCollisionEnabled(UnrealSharp.Engine.ECollisionEnabled newType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCollisionEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ECollisionEnabled>.ToNative(IntPtr.Add(ParamsBuffer, SetCollisionEnabled_NewType_Offset), 0, null, newType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCollisionEnabled_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetCenterOfMass
    static readonly IntPtr SetCenterOfMass_NativeFunction;
    static readonly int SetCenterOfMass_ParamsSize;
    static readonly int SetCenterOfMass_CenterOfMassOffset_Offset;
    static readonly int SetCenterOfMass_BoneName_Offset;
    
    public void SetCenterOfMass(System.DoubleNumerics.Vector3 centerOfMassOffset, Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCenterOfMass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetCenterOfMass_CenterOfMassOffset_Offset), 0, null, centerOfMassOffset);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetCenterOfMass_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCenterOfMass_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetCastShadow
    static readonly IntPtr SetCastShadow_NativeFunction;
    static readonly int SetCastShadow_ParamsSize;
    static readonly int SetCastShadow_NewCastShadow_Offset;
    
    public void SetCastShadow(bool newCastShadow)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCastShadow_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCastShadow_NewCastShadow_Offset), 0, null, newCastShadow);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCastShadow_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetCastInsetShadow
    static readonly IntPtr SetCastInsetShadow_NativeFunction;
    static readonly int SetCastInsetShadow_ParamsSize;
    static readonly int SetCastInsetShadow_bInCastInsetShadow_Offset;
    
    public void SetCastInsetShadow(bool bInCastInsetShadow)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCastInsetShadow_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCastInsetShadow_bInCastInsetShadow_Offset), 0, null, bInCastInsetShadow);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCastInsetShadow_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetCastHiddenShadow
    static readonly IntPtr SetCastHiddenShadow_NativeFunction;
    static readonly int SetCastHiddenShadow_ParamsSize;
    static readonly int SetCastHiddenShadow_NewCastHiddenShadow_Offset;
    
    public void SetCastHiddenShadow(bool newCastHiddenShadow)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCastHiddenShadow_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCastHiddenShadow_NewCastHiddenShadow_Offset), 0, null, newCastHiddenShadow);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCastHiddenShadow_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetCastContactShadow
    static readonly IntPtr SetCastContactShadow_NativeFunction;
    static readonly int SetCastContactShadow_ParamsSize;
    static readonly int SetCastContactShadow_bInCastContactShadow_Offset;
    
    public void SetCastContactShadow(bool bInCastContactShadow)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCastContactShadow_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCastContactShadow_bInCastContactShadow_Offset), 0, null, bInCastContactShadow);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCastContactShadow_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetBoundsScale
    static readonly IntPtr SetBoundsScale_NativeFunction;
    static readonly int SetBoundsScale_ParamsSize;
    static readonly int SetBoundsScale_NewBoundsScale_Offset;
    
    public void SetBoundsScale(float newBoundsScale = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBoundsScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetBoundsScale_NewBoundsScale_Offset), 0, null, newBoundsScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBoundsScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetAngularDamping
    static readonly IntPtr SetAngularDamping_NativeFunction;
    static readonly int SetAngularDamping_ParamsSize;
    static readonly int SetAngularDamping_InDamping_Offset;
    
    public void SetAngularDamping(float inDamping)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAngularDamping_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAngularDamping_InDamping_Offset), 0, null, inDamping);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAngularDamping_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetAllUseCCD
    static readonly IntPtr SetAllUseCCD_NativeFunction;
    static readonly int SetAllUseCCD_ParamsSize;
    static readonly int SetAllUseCCD_InUseCCD_Offset;
    
    public void SetAllUseCCD(bool inUseCCD)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAllUseCCD_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAllUseCCD_InUseCCD_Offset), 0, null, inUseCCD);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAllUseCCD_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetAllPhysicsLinearVelocity
    static readonly IntPtr SetAllPhysicsLinearVelocity_NativeFunction;
    static readonly int SetAllPhysicsLinearVelocity_ParamsSize;
    static readonly int SetAllPhysicsLinearVelocity_NewVel_Offset;
    static readonly int SetAllPhysicsLinearVelocity_bAddToCurrent_Offset;
    
    public void SetAllPhysicsLinearVelocity(System.DoubleNumerics.Vector3 newVel, bool bAddToCurrent = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAllPhysicsLinearVelocity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetAllPhysicsLinearVelocity_NewVel_Offset), 0, null, newVel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAllPhysicsLinearVelocity_bAddToCurrent_Offset), 0, null, bAddToCurrent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAllPhysicsLinearVelocity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetAllPhysicsAngularVelocityInRadians
    static readonly IntPtr SetAllPhysicsAngularVelocityInRadians_NativeFunction;
    static readonly int SetAllPhysicsAngularVelocityInRadians_ParamsSize;
    static readonly int SetAllPhysicsAngularVelocityInRadians_NewAngVel_Offset;
    static readonly int SetAllPhysicsAngularVelocityInRadians_bAddToCurrent_Offset;
    
    public void SetAllPhysicsAngularVelocityInRadians(System.DoubleNumerics.Vector3 newAngVel, bool bAddToCurrent = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAllPhysicsAngularVelocityInRadians_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetAllPhysicsAngularVelocityInRadians_NewAngVel_Offset), 0, null, newAngVel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAllPhysicsAngularVelocityInRadians_bAddToCurrent_Offset), 0, null, bAddToCurrent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAllPhysicsAngularVelocityInRadians_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetAllPhysicsAngularVelocityInDegrees
    static readonly IntPtr SetAllPhysicsAngularVelocityInDegrees_NativeFunction;
    static readonly int SetAllPhysicsAngularVelocityInDegrees_ParamsSize;
    static readonly int SetAllPhysicsAngularVelocityInDegrees_NewAngVel_Offset;
    static readonly int SetAllPhysicsAngularVelocityInDegrees_bAddToCurrent_Offset;
    
    public void SetAllPhysicsAngularVelocityInDegrees(System.DoubleNumerics.Vector3 newAngVel, bool bAddToCurrent = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAllPhysicsAngularVelocityInDegrees_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetAllPhysicsAngularVelocityInDegrees_NewAngVel_Offset), 0, null, newAngVel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAllPhysicsAngularVelocityInDegrees_bAddToCurrent_Offset), 0, null, bAddToCurrent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAllPhysicsAngularVelocityInDegrees_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetAllMassScale
    static readonly IntPtr SetAllMassScale_NativeFunction;
    static readonly int SetAllMassScale_ParamsSize;
    static readonly int SetAllMassScale_InMassScale_Offset;
    
    public void SetAllMassScale(float inMassScale = 1.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAllMassScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAllMassScale_InMassScale_Offset), 0, null, inMassScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAllMassScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetAffectIndirectLightingWhileHidden
    static readonly IntPtr SetAffectIndirectLightingWhileHidden_NativeFunction;
    static readonly int SetAffectIndirectLightingWhileHidden_ParamsSize;
    static readonly int SetAffectIndirectLightingWhileHidden_bNewAffectIndirectLightingWhileHidden_Offset;
    
    public void SetAffectIndirectLightingWhileHidden(bool bNewAffectIndirectLightingWhileHidden)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAffectIndirectLightingWhileHidden_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAffectIndirectLightingWhileHidden_bNewAffectIndirectLightingWhileHidden_Offset), 0, null, bNewAffectIndirectLightingWhileHidden);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAffectIndirectLightingWhileHidden_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetAffectDynamicIndirectLighting
    static readonly IntPtr SetAffectDynamicIndirectLighting_NativeFunction;
    static readonly int SetAffectDynamicIndirectLighting_ParamsSize;
    static readonly int SetAffectDynamicIndirectLighting_bNewAffectDynamicIndirectLighting_Offset;
    
    public void SetAffectDynamicIndirectLighting(bool bNewAffectDynamicIndirectLighting)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAffectDynamicIndirectLighting_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAffectDynamicIndirectLighting_bNewAffectDynamicIndirectLighting_Offset), 0, null, bNewAffectDynamicIndirectLighting);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAffectDynamicIndirectLighting_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:SetAffectDistanceFieldLighting
    static readonly IntPtr SetAffectDistanceFieldLighting_NativeFunction;
    static readonly int SetAffectDistanceFieldLighting_ParamsSize;
    static readonly int SetAffectDistanceFieldLighting_NewAffectDistanceFieldLighting_Offset;
    
    public void SetAffectDistanceFieldLighting(bool newAffectDistanceFieldLighting)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAffectDistanceFieldLighting_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAffectDistanceFieldLighting_NewAffectDistanceFieldLighting_Offset), 0, null, newAffectDistanceFieldLighting);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAffectDistanceFieldLighting_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:ScaleByMomentOfInertia
    static readonly IntPtr ScaleByMomentOfInertia_NativeFunction;
    static readonly int ScaleByMomentOfInertia_ParamsSize;
    static readonly int ScaleByMomentOfInertia_InputVector_Offset;
    static readonly int ScaleByMomentOfInertia_BoneName_Offset;
    static readonly int ScaleByMomentOfInertia_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 ScaleByMomentOfInertia(System.DoubleNumerics.Vector3 inputVector, Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ScaleByMomentOfInertia_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ScaleByMomentOfInertia_InputVector_Offset), 0, null, inputVector);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ScaleByMomentOfInertia_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ScaleByMomentOfInertia_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, ScaleByMomentOfInertia_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:PutRigidBodyToSleep
    static readonly IntPtr PutRigidBodyToSleep_NativeFunction;
    static readonly int PutRigidBodyToSleep_ParamsSize;
    static readonly int PutRigidBodyToSleep_BoneName_Offset;
    
    public void PutRigidBodyToSleep(Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PutRigidBodyToSleep_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, PutRigidBodyToSleep_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PutRigidBodyToSleep_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:K2_SphereTraceComponent
    static readonly IntPtr K2_SphereTraceComponent_NativeFunction;
    static readonly int K2_SphereTraceComponent_ParamsSize;
    static readonly int K2_SphereTraceComponent_TraceStart_Offset;
    static readonly int K2_SphereTraceComponent_TraceEnd_Offset;
    static readonly int K2_SphereTraceComponent_SphereRadius_Offset;
    static readonly int K2_SphereTraceComponent_bTraceComplex_Offset;
    static readonly int K2_SphereTraceComponent_bShowTrace_Offset;
    static readonly int K2_SphereTraceComponent_bPersistentShowTrace_Offset;
    static readonly int K2_SphereTraceComponent_HitLocation_Offset;
    static readonly int K2_SphereTraceComponent_HitNormal_Offset;
    static readonly int K2_SphereTraceComponent_BoneName_Offset;
    static readonly int K2_SphereTraceComponent_OutHit_Offset;
    static readonly int K2_SphereTraceComponent_ReturnValue_Offset;
    
    public bool SphereTraceComponent(System.DoubleNumerics.Vector3 traceStart, System.DoubleNumerics.Vector3 traceEnd, float sphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out System.DoubleNumerics.Vector3 hitLocation, out System.DoubleNumerics.Vector3 hitNormal, out Name boneName, out UnrealSharp.Engine.HitResult outHit)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_SphereTraceComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_SphereTraceComponent_TraceStart_Offset), 0, null, traceStart);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_SphereTraceComponent_TraceEnd_Offset), 0, null, traceEnd);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, K2_SphereTraceComponent_SphereRadius_Offset), 0, null, sphereRadius);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SphereTraceComponent_bTraceComplex_Offset), 0, null, bTraceComplex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SphereTraceComponent_bShowTrace_Offset), 0, null, bShowTrace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SphereTraceComponent_bPersistentShowTrace_Offset), 0, null, bPersistentShowTrace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_SphereTraceComponent_NativeFunction, ParamsBuffer);
            
            hitLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, K2_SphereTraceComponent_HitLocation_Offset), 0, null);
            hitNormal = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, K2_SphereTraceComponent_HitNormal_Offset), 0, null);
            boneName = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, K2_SphereTraceComponent_BoneName_Offset), 0, null);
            outHit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_SphereTraceComponent_OutHit_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_SphereTraceComponent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:K2_SphereOverlapComponent
    static readonly IntPtr K2_SphereOverlapComponent_NativeFunction;
    static readonly int K2_SphereOverlapComponent_ParamsSize;
    static readonly int K2_SphereOverlapComponent_InSphereCentre_Offset;
    static readonly int K2_SphereOverlapComponent_InSphereRadius_Offset;
    static readonly int K2_SphereOverlapComponent_bTraceComplex_Offset;
    static readonly int K2_SphereOverlapComponent_bShowTrace_Offset;
    static readonly int K2_SphereOverlapComponent_bPersistentShowTrace_Offset;
    static readonly int K2_SphereOverlapComponent_HitLocation_Offset;
    static readonly int K2_SphereOverlapComponent_HitNormal_Offset;
    static readonly int K2_SphereOverlapComponent_BoneName_Offset;
    static readonly int K2_SphereOverlapComponent_OutHit_Offset;
    static readonly int K2_SphereOverlapComponent_ReturnValue_Offset;
    
    public bool SphereOverlapComponent(System.DoubleNumerics.Vector3 inSphereCentre, float inSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out System.DoubleNumerics.Vector3 hitLocation, out System.DoubleNumerics.Vector3 hitNormal, out Name boneName, out UnrealSharp.Engine.HitResult outHit)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_SphereOverlapComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_SphereOverlapComponent_InSphereCentre_Offset), 0, null, inSphereCentre);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, K2_SphereOverlapComponent_InSphereRadius_Offset), 0, null, inSphereRadius);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SphereOverlapComponent_bTraceComplex_Offset), 0, null, bTraceComplex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SphereOverlapComponent_bShowTrace_Offset), 0, null, bShowTrace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SphereOverlapComponent_bPersistentShowTrace_Offset), 0, null, bPersistentShowTrace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_SphereOverlapComponent_NativeFunction, ParamsBuffer);
            
            hitLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, K2_SphereOverlapComponent_HitLocation_Offset), 0, null);
            hitNormal = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, K2_SphereOverlapComponent_HitNormal_Offset), 0, null);
            boneName = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, K2_SphereOverlapComponent_BoneName_Offset), 0, null);
            outHit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_SphereOverlapComponent_OutHit_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_SphereOverlapComponent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:K2_LineTraceComponent
    static readonly IntPtr K2_LineTraceComponent_NativeFunction;
    static readonly int K2_LineTraceComponent_ParamsSize;
    static readonly int K2_LineTraceComponent_TraceStart_Offset;
    static readonly int K2_LineTraceComponent_TraceEnd_Offset;
    static readonly int K2_LineTraceComponent_bTraceComplex_Offset;
    static readonly int K2_LineTraceComponent_bShowTrace_Offset;
    static readonly int K2_LineTraceComponent_bPersistentShowTrace_Offset;
    static readonly int K2_LineTraceComponent_HitLocation_Offset;
    static readonly int K2_LineTraceComponent_HitNormal_Offset;
    static readonly int K2_LineTraceComponent_BoneName_Offset;
    static readonly int K2_LineTraceComponent_OutHit_Offset;
    static readonly int K2_LineTraceComponent_ReturnValue_Offset;
    
    public bool LineTraceComponent(System.DoubleNumerics.Vector3 traceStart, System.DoubleNumerics.Vector3 traceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out System.DoubleNumerics.Vector3 hitLocation, out System.DoubleNumerics.Vector3 hitNormal, out Name boneName, out UnrealSharp.Engine.HitResult outHit)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_LineTraceComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_LineTraceComponent_TraceStart_Offset), 0, null, traceStart);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_LineTraceComponent_TraceEnd_Offset), 0, null, traceEnd);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_LineTraceComponent_bTraceComplex_Offset), 0, null, bTraceComplex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_LineTraceComponent_bShowTrace_Offset), 0, null, bShowTrace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_LineTraceComponent_bPersistentShowTrace_Offset), 0, null, bPersistentShowTrace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_LineTraceComponent_NativeFunction, ParamsBuffer);
            
            hitLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, K2_LineTraceComponent_HitLocation_Offset), 0, null);
            hitNormal = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, K2_LineTraceComponent_HitNormal_Offset), 0, null);
            boneName = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, K2_LineTraceComponent_BoneName_Offset), 0, null);
            outHit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_LineTraceComponent_OutHit_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_LineTraceComponent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:K2_IsQueryCollisionEnabled
    static readonly IntPtr K2_IsQueryCollisionEnabled_NativeFunction;
    static readonly int K2_IsQueryCollisionEnabled_ParamsSize;
    static readonly int K2_IsQueryCollisionEnabled_ReturnValue_Offset;
    
    public bool IsQueryCollisionEnabled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_IsQueryCollisionEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_IsQueryCollisionEnabled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_IsQueryCollisionEnabled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:K2_IsPhysicsCollisionEnabled
    static readonly IntPtr K2_IsPhysicsCollisionEnabled_NativeFunction;
    static readonly int K2_IsPhysicsCollisionEnabled_ParamsSize;
    static readonly int K2_IsPhysicsCollisionEnabled_ReturnValue_Offset;
    
    public bool IsPhysicsCollisionEnabled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_IsPhysicsCollisionEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_IsPhysicsCollisionEnabled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_IsPhysicsCollisionEnabled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:K2_IsCollisionEnabled
    static readonly IntPtr K2_IsCollisionEnabled_NativeFunction;
    static readonly int K2_IsCollisionEnabled_ParamsSize;
    static readonly int K2_IsCollisionEnabled_ReturnValue_Offset;
    
    public bool IsCollisionEnabled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_IsCollisionEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_IsCollisionEnabled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_IsCollisionEnabled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:K2_BoxOverlapComponent
    static readonly IntPtr K2_BoxOverlapComponent_NativeFunction;
    static readonly int K2_BoxOverlapComponent_ParamsSize;
    static readonly int K2_BoxOverlapComponent_InBoxCentre_Offset;
    static readonly int K2_BoxOverlapComponent_InBox_Offset;
    static readonly int K2_BoxOverlapComponent_bTraceComplex_Offset;
    static readonly int K2_BoxOverlapComponent_bShowTrace_Offset;
    static readonly int K2_BoxOverlapComponent_bPersistentShowTrace_Offset;
    static readonly int K2_BoxOverlapComponent_HitLocation_Offset;
    static readonly int K2_BoxOverlapComponent_HitNormal_Offset;
    static readonly int K2_BoxOverlapComponent_BoneName_Offset;
    static readonly int K2_BoxOverlapComponent_OutHit_Offset;
    static readonly int K2_BoxOverlapComponent_ReturnValue_Offset;
    
    public bool BoxOverlapComponent(System.DoubleNumerics.Vector3 inBoxCentre, UnrealSharp.CoreUObject.Box inBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out System.DoubleNumerics.Vector3 hitLocation, out System.DoubleNumerics.Vector3 hitNormal, out Name boneName, out UnrealSharp.Engine.HitResult outHit)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_BoxOverlapComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_BoxOverlapComponent_InBoxCentre_Offset), 0, null, inBoxCentre);
            UnrealSharp.CoreUObject.BoxMarshaler.ToNative(IntPtr.Add(ParamsBuffer, K2_BoxOverlapComponent_InBox_Offset), 0, null, inBox);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_BoxOverlapComponent_bTraceComplex_Offset), 0, null, bTraceComplex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_BoxOverlapComponent_bShowTrace_Offset), 0, null, bShowTrace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_BoxOverlapComponent_bPersistentShowTrace_Offset), 0, null, bPersistentShowTrace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_BoxOverlapComponent_NativeFunction, ParamsBuffer);
            
            hitLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, K2_BoxOverlapComponent_HitLocation_Offset), 0, null);
            hitNormal = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, K2_BoxOverlapComponent_HitNormal_Offset), 0, null);
            boneName = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, K2_BoxOverlapComponent_BoneName_Offset), 0, null);
            outHit = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_BoxOverlapComponent_OutHit_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_BoxOverlapComponent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:IsOverlappingComponent
    static readonly IntPtr IsOverlappingComponent_NativeFunction;
    static readonly int IsOverlappingComponent_ParamsSize;
    static readonly int IsOverlappingComponent_OtherComp_Offset;
    static readonly int IsOverlappingComponent_ReturnValue_Offset;
    
    public bool IsOverlappingComponent(UnrealSharp.Engine.PrimitiveComponent otherComp)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsOverlappingComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative(IntPtr.Add(ParamsBuffer, IsOverlappingComponent_OtherComp_Offset), 0, null, otherComp);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsOverlappingComponent_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsOverlappingComponent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:IsOverlappingActor
    static readonly IntPtr IsOverlappingActor_NativeFunction;
    static readonly int IsOverlappingActor_ParamsSize;
    static readonly int IsOverlappingActor_Other_Offset;
    static readonly int IsOverlappingActor_ReturnValue_Offset;
    
    public bool IsOverlappingActor(UnrealSharp.Engine.Actor other)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsOverlappingActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, IsOverlappingActor_Other_Offset), 0, null, other);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsOverlappingActor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsOverlappingActor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:IsGravityEnabled
    static readonly IntPtr IsGravityEnabled_NativeFunction;
    static readonly int IsGravityEnabled_ParamsSize;
    static readonly int IsGravityEnabled_ReturnValue_Offset;
    
    public bool IsGravityEnabled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsGravityEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsGravityEnabled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsGravityEnabled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:IsExcludedFromHLODLevel
    static readonly IntPtr IsExcludedFromHLODLevel_NativeFunction;
    static readonly int IsExcludedFromHLODLevel_ParamsSize;
    static readonly int IsExcludedFromHLODLevel_HLODLevel_Offset;
    static readonly int IsExcludedFromHLODLevel_ReturnValue_Offset;
    
    public bool IsExcludedFromHLODLevel(UnrealSharp.Engine.EHLODLevelExclusion hLODLevel)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsExcludedFromHLODLevel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EHLODLevelExclusion>.ToNative(IntPtr.Add(ParamsBuffer, IsExcludedFromHLODLevel_HLODLevel_Offset), 0, null, hLODLevel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsExcludedFromHLODLevel_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsExcludedFromHLODLevel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:IsAnyRigidBodyAwake
    static readonly IntPtr IsAnyRigidBodyAwake_NativeFunction;
    static readonly int IsAnyRigidBodyAwake_ParamsSize;
    static readonly int IsAnyRigidBodyAwake_ReturnValue_Offset;
    
    public bool IsAnyRigidBodyAwake()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsAnyRigidBodyAwake_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsAnyRigidBodyAwake_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsAnyRigidBodyAwake_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:InvalidateLumenSurfaceCache
    static readonly IntPtr InvalidateLumenSurfaceCache_NativeFunction;
    
    public void InvalidateLumenSurfaceCache()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, InvalidateLumenSurfaceCache_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:IgnoreComponentWhenMoving
    static readonly IntPtr IgnoreComponentWhenMoving_NativeFunction;
    static readonly int IgnoreComponentWhenMoving_ParamsSize;
    static readonly int IgnoreComponentWhenMoving_Component_Offset;
    static readonly int IgnoreComponentWhenMoving_bShouldIgnore_Offset;
    
    public void IgnoreComponentWhenMoving(UnrealSharp.Engine.PrimitiveComponent component, bool bShouldIgnore)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IgnoreComponentWhenMoving_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative(IntPtr.Add(ParamsBuffer, IgnoreComponentWhenMoving_Component_Offset), 0, null, component);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, IgnoreComponentWhenMoving_bShouldIgnore_Offset), 0, null, bShouldIgnore);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IgnoreComponentWhenMoving_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:IgnoreActorWhenMoving
    static readonly IntPtr IgnoreActorWhenMoving_NativeFunction;
    static readonly int IgnoreActorWhenMoving_ParamsSize;
    static readonly int IgnoreActorWhenMoving_Actor_Offset;
    static readonly int IgnoreActorWhenMoving_bShouldIgnore_Offset;
    
    public void IgnoreActorWhenMoving(UnrealSharp.Engine.Actor actor, bool bShouldIgnore)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IgnoreActorWhenMoving_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, IgnoreActorWhenMoving_Actor_Offset), 0, null, actor);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, IgnoreActorWhenMoving_bShouldIgnore_Offset), 0, null, bShouldIgnore);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IgnoreActorWhenMoving_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetWalkableSlopeOverride
    static readonly IntPtr GetWalkableSlopeOverride_NativeFunction;
    static readonly int GetWalkableSlopeOverride_ParamsSize;
    static readonly int GetWalkableSlopeOverride_ReturnValue_Offset;
    
    public UnrealSharp.Engine.WalkableSlopeOverride GetWalkableSlopeOverride()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWalkableSlopeOverride_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetWalkableSlopeOverride_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.WalkableSlopeOverride returnValue;
            returnValue = UnrealSharp.Engine.WalkableSlopeOverrideMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetWalkableSlopeOverride_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetStaticWhenNotMoveable
    static readonly IntPtr GetStaticWhenNotMoveable_NativeFunction;
    static readonly int GetStaticWhenNotMoveable_ParamsSize;
    static readonly int GetStaticWhenNotMoveable_ReturnValue_Offset;
    
    public bool GetStaticWhenNotMoveable()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStaticWhenNotMoveable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetStaticWhenNotMoveable_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetStaticWhenNotMoveable_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetPhysicsLinearVelocityAtPoint
    static readonly IntPtr GetPhysicsLinearVelocityAtPoint_NativeFunction;
    static readonly int GetPhysicsLinearVelocityAtPoint_ParamsSize;
    static readonly int GetPhysicsLinearVelocityAtPoint_Point_Offset;
    static readonly int GetPhysicsLinearVelocityAtPoint_BoneName_Offset;
    static readonly int GetPhysicsLinearVelocityAtPoint_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetPhysicsLinearVelocityAtPoint(System.DoubleNumerics.Vector3 point, Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPhysicsLinearVelocityAtPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetPhysicsLinearVelocityAtPoint_Point_Offset), 0, null, point);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetPhysicsLinearVelocityAtPoint_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPhysicsLinearVelocityAtPoint_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetPhysicsLinearVelocityAtPoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetPhysicsLinearVelocity
    static readonly IntPtr GetPhysicsLinearVelocity_NativeFunction;
    static readonly int GetPhysicsLinearVelocity_ParamsSize;
    static readonly int GetPhysicsLinearVelocity_BoneName_Offset;
    static readonly int GetPhysicsLinearVelocity_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetPhysicsLinearVelocity(Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPhysicsLinearVelocity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetPhysicsLinearVelocity_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPhysicsLinearVelocity_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetPhysicsLinearVelocity_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetPhysicsAngularVelocityInRadians
    static readonly IntPtr GetPhysicsAngularVelocityInRadians_NativeFunction;
    static readonly int GetPhysicsAngularVelocityInRadians_ParamsSize;
    static readonly int GetPhysicsAngularVelocityInRadians_BoneName_Offset;
    static readonly int GetPhysicsAngularVelocityInRadians_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetPhysicsAngularVelocityInRadians(Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPhysicsAngularVelocityInRadians_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetPhysicsAngularVelocityInRadians_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPhysicsAngularVelocityInRadians_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetPhysicsAngularVelocityInRadians_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetPhysicsAngularVelocityInDegrees
    static readonly IntPtr GetPhysicsAngularVelocityInDegrees_NativeFunction;
    static readonly int GetPhysicsAngularVelocityInDegrees_ParamsSize;
    static readonly int GetPhysicsAngularVelocityInDegrees_BoneName_Offset;
    static readonly int GetPhysicsAngularVelocityInDegrees_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetPhysicsAngularVelocityInDegrees(Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPhysicsAngularVelocityInDegrees_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetPhysicsAngularVelocityInDegrees_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPhysicsAngularVelocityInDegrees_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetPhysicsAngularVelocityInDegrees_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetOverlappingComponents
    static readonly IntPtr GetOverlappingComponents_NativeFunction;
    static readonly int GetOverlappingComponents_ParamsSize;
    static readonly int GetOverlappingComponents_OutOverlappingComponents_Offset;
    static readonly int GetOverlappingComponents_OutOverlappingComponents_ElementSize;
    
    public void GetOverlappingComponents(out System.Collections.Generic.IList<UnrealSharp.Engine.PrimitiveComponent> outOverlappingComponents)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOverlappingComponents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOverlappingComponents_NativeFunction, ParamsBuffer);
            
            IntPtr OutOverlappingComponents_NativeBuffer = IntPtr.Add(ParamsBuffer, GetOverlappingComponents_OutOverlappingComponents_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent> OutOverlappingComponents_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent> (1, ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative, ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.FromNative, GetOverlappingComponents_OutOverlappingComponents_ElementSize);
            outOverlappingComponents = OutOverlappingComponents_Marshaler.FromNative(OutOverlappingComponents_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent>.DestructInstance(OutOverlappingComponents_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetOverlappingActors
    static readonly IntPtr GetOverlappingActors_NativeFunction;
    static readonly int GetOverlappingActors_ParamsSize;
    static readonly int GetOverlappingActors_OverlappingActors_Offset;
    static readonly int GetOverlappingActors_OverlappingActors_ElementSize;
    static readonly int GetOverlappingActors_ClassFilter_Offset;
    
    public void GetOverlappingActors(out System.Collections.Generic.IList<UnrealSharp.Engine.Actor> overlappingActors, SubclassOf<UnrealSharp.Engine.Actor> classFilter = default(SubclassOf<UnrealSharp.Engine.Actor>))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOverlappingActors_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, GetOverlappingActors_ClassFilter_Offset), 0, null, classFilter);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOverlappingActors_NativeFunction, ParamsBuffer);
            
            IntPtr OverlappingActors_NativeBuffer = IntPtr.Add(ParamsBuffer, GetOverlappingActors_OverlappingActors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> OverlappingActors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, GetOverlappingActors_OverlappingActors_ElementSize);
            overlappingActors = OverlappingActors_Marshaler.FromNative(OverlappingActors_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(OverlappingActors_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetNumMaterials
    static readonly IntPtr GetNumMaterials_NativeFunction;
    static readonly int GetNumMaterials_ParamsSize;
    static readonly int GetNumMaterials_ReturnValue_Offset;
    
    public int GetNumMaterials()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumMaterials_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumMaterials_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumMaterials_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetMaterialFromCollisionFaceIndex
    static readonly IntPtr GetMaterialFromCollisionFaceIndex_NativeFunction;
    static readonly int GetMaterialFromCollisionFaceIndex_ParamsSize;
    static readonly int GetMaterialFromCollisionFaceIndex_FaceIndex_Offset;
    static readonly int GetMaterialFromCollisionFaceIndex_SectionIndex_Offset;
    static readonly int GetMaterialFromCollisionFaceIndex_ReturnValue_Offset;
    
    public UnrealSharp.Engine.MaterialInterface GetMaterialFromCollisionFaceIndex(int faceIndex, out int sectionIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaterialFromCollisionFaceIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialFromCollisionFaceIndex_FaceIndex_Offset), 0, null, faceIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMaterialFromCollisionFaceIndex_NativeFunction, ParamsBuffer);
            
            sectionIndex = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetMaterialFromCollisionFaceIndex_SectionIndex_Offset), 0, null);
            UnrealSharp.Engine.MaterialInterface returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.FromNative(IntPtr.Add(ParamsBuffer, GetMaterialFromCollisionFaceIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetMaterial
    static readonly IntPtr GetMaterial_NativeFunction;
    static readonly int GetMaterial_ParamsSize;
    static readonly int GetMaterial_ElementIndex_Offset;
    static readonly int GetMaterial_ReturnValue_Offset;
    
    public UnrealSharp.Engine.MaterialInterface GetMaterial(int elementIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterial_ElementIndex_Offset), 0, null, elementIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMaterial_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialInterface returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.FromNative(IntPtr.Add(ParamsBuffer, GetMaterial_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetMassScale
    static readonly IntPtr GetMassScale_NativeFunction;
    static readonly int GetMassScale_ParamsSize;
    static readonly int GetMassScale_BoneName_Offset;
    static readonly int GetMassScale_ReturnValue_Offset;
    
    public float GetMassScale(Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMassScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetMassScale_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMassScale_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetMassScale_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetMass
    static readonly IntPtr GetMass_NativeFunction;
    static readonly int GetMass_ParamsSize;
    static readonly int GetMass_ReturnValue_Offset;
    
    public float GetMass()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMass_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetMass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetLinearDamping
    static readonly IntPtr GetLinearDamping_NativeFunction;
    static readonly int GetLinearDamping_ParamsSize;
    static readonly int GetLinearDamping_ReturnValue_Offset;
    
    public float GetLinearDamping()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLinearDamping_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLinearDamping_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetLinearDamping_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetInertiaTensor
    static readonly IntPtr GetInertiaTensor_NativeFunction;
    static readonly int GetInertiaTensor_ParamsSize;
    static readonly int GetInertiaTensor_BoneName_Offset;
    static readonly int GetInertiaTensor_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetInertiaTensor(Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInertiaTensor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetInertiaTensor_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInertiaTensor_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetInertiaTensor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetIgnoreBoundsForEditorFocus
    static readonly IntPtr GetIgnoreBoundsForEditorFocus_NativeFunction;
    static readonly int GetIgnoreBoundsForEditorFocus_ParamsSize;
    static readonly int GetIgnoreBoundsForEditorFocus_ReturnValue_Offset;
    
    public bool GetIgnoreBoundsForEditorFocus()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetIgnoreBoundsForEditorFocus_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetIgnoreBoundsForEditorFocus_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetIgnoreBoundsForEditorFocus_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetCustomPrimitiveDataIndexForVectorParameter
    static readonly IntPtr GetCustomPrimitiveDataIndexForVectorParameter_NativeFunction;
    static readonly int GetCustomPrimitiveDataIndexForVectorParameter_ParamsSize;
    static readonly int GetCustomPrimitiveDataIndexForVectorParameter_ParameterName_Offset;
    static readonly int GetCustomPrimitiveDataIndexForVectorParameter_ReturnValue_Offset;
    
    public int GetCustomPrimitiveDataIndexForVectorParameter(Name parameterName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomPrimitiveDataIndexForVectorParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetCustomPrimitiveDataIndexForVectorParameter_ParameterName_Offset), 0, null, parameterName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomPrimitiveDataIndexForVectorParameter_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomPrimitiveDataIndexForVectorParameter_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetCustomPrimitiveDataIndexForScalarParameter
    static readonly IntPtr GetCustomPrimitiveDataIndexForScalarParameter_NativeFunction;
    static readonly int GetCustomPrimitiveDataIndexForScalarParameter_ParamsSize;
    static readonly int GetCustomPrimitiveDataIndexForScalarParameter_ParameterName_Offset;
    static readonly int GetCustomPrimitiveDataIndexForScalarParameter_ReturnValue_Offset;
    
    public int GetCustomPrimitiveDataIndexForScalarParameter(Name parameterName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomPrimitiveDataIndexForScalarParameter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetCustomPrimitiveDataIndexForScalarParameter_ParameterName_Offset), 0, null, parameterName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomPrimitiveDataIndexForScalarParameter_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomPrimitiveDataIndexForScalarParameter_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetCollisionResponseToChannel
    static readonly IntPtr GetCollisionResponseToChannel_NativeFunction;
    static readonly int GetCollisionResponseToChannel_ParamsSize;
    static readonly int GetCollisionResponseToChannel_Channel_Offset;
    static readonly int GetCollisionResponseToChannel_ReturnValue_Offset;
    
    public UnrealSharp.Engine.ECollisionResponse GetCollisionResponseToChannel(UnrealSharp.Engine.ECollisionChannel channel)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCollisionResponseToChannel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ECollisionChannel>.ToNative(IntPtr.Add(ParamsBuffer, GetCollisionResponseToChannel_Channel_Offset), 0, null, channel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCollisionResponseToChannel_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.ECollisionResponse returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Engine.ECollisionResponse>.FromNative(IntPtr.Add(ParamsBuffer, GetCollisionResponseToChannel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetCollisionProfileName
    static readonly IntPtr GetCollisionProfileName_NativeFunction;
    static readonly int GetCollisionProfileName_ParamsSize;
    static readonly int GetCollisionProfileName_ReturnValue_Offset;
    
    public Name GetCollisionProfileName()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCollisionProfileName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCollisionProfileName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetCollisionProfileName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetCollisionObjectType
    static readonly IntPtr GetCollisionObjectType_NativeFunction;
    static readonly int GetCollisionObjectType_ParamsSize;
    static readonly int GetCollisionObjectType_ReturnValue_Offset;
    
    public UnrealSharp.Engine.ECollisionChannel GetCollisionObjectType()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCollisionObjectType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCollisionObjectType_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.ECollisionChannel returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Engine.ECollisionChannel>.FromNative(IntPtr.Add(ParamsBuffer, GetCollisionObjectType_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetCollisionEnabled
    static readonly IntPtr GetCollisionEnabled_NativeFunction;
    static readonly int GetCollisionEnabled_ParamsSize;
    static readonly int GetCollisionEnabled_ReturnValue_Offset;
    
    public UnrealSharp.Engine.ECollisionEnabled GetCollisionEnabled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCollisionEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCollisionEnabled_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.ECollisionEnabled returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Engine.ECollisionEnabled>.FromNative(IntPtr.Add(ParamsBuffer, GetCollisionEnabled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetClosestPointOnCollision
    static readonly IntPtr GetClosestPointOnCollision_NativeFunction;
    static readonly int GetClosestPointOnCollision_ParamsSize;
    static readonly int GetClosestPointOnCollision_Point_Offset;
    static readonly int GetClosestPointOnCollision_OutPointOnBody_Offset;
    static readonly int GetClosestPointOnCollision_BoneName_Offset;
    static readonly int GetClosestPointOnCollision_ReturnValue_Offset;
    
    public float GetClosestPointOnCollision(System.DoubleNumerics.Vector3 point, out System.DoubleNumerics.Vector3 outPointOnBody, Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetClosestPointOnCollision_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetClosestPointOnCollision_Point_Offset), 0, null, point);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetClosestPointOnCollision_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetClosestPointOnCollision_NativeFunction, ParamsBuffer);
            
            outPointOnBody = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetClosestPointOnCollision_OutPointOnBody_Offset), 0, null);
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetClosestPointOnCollision_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetCenterOfMass
    static readonly IntPtr GetCenterOfMass_NativeFunction;
    static readonly int GetCenterOfMass_ParamsSize;
    static readonly int GetCenterOfMass_BoneName_Offset;
    static readonly int GetCenterOfMass_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetCenterOfMass(Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCenterOfMass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetCenterOfMass_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCenterOfMass_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetCenterOfMass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetBodyInstanceAsyncPhysicsTickHandle
    static readonly IntPtr GetBodyInstanceAsyncPhysicsTickHandle_NativeFunction;
    static readonly int GetBodyInstanceAsyncPhysicsTickHandle_ParamsSize;
    static readonly int GetBodyInstanceAsyncPhysicsTickHandle_BoneName_Offset;
    static readonly int GetBodyInstanceAsyncPhysicsTickHandle_bGetWelded_Offset;
    static readonly int GetBodyInstanceAsyncPhysicsTickHandle_Index_Offset;
    static readonly int GetBodyInstanceAsyncPhysicsTickHandle_ReturnValue_Offset;
    
    public UnrealSharp.Engine.BodyInstanceAsyncPhysicsTickHandle GetBodyInstanceAsyncPhysicsTickHandle(Name boneName = default(Name), bool bGetWelded = true, int index = -1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBodyInstanceAsyncPhysicsTickHandle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetBodyInstanceAsyncPhysicsTickHandle_BoneName_Offset), 0, null, boneName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetBodyInstanceAsyncPhysicsTickHandle_bGetWelded_Offset), 0, null, bGetWelded);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetBodyInstanceAsyncPhysicsTickHandle_Index_Offset), 0, null, index);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBodyInstanceAsyncPhysicsTickHandle_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.BodyInstanceAsyncPhysicsTickHandle returnValue;
            returnValue = UnrealSharp.Engine.BodyInstanceAsyncPhysicsTickHandleMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetBodyInstanceAsyncPhysicsTickHandle_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:GetAngularDamping
    static readonly IntPtr GetAngularDamping_NativeFunction;
    static readonly int GetAngularDamping_ParamsSize;
    static readonly int GetAngularDamping_ReturnValue_Offset;
    
    public float GetAngularDamping()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAngularDamping_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAngularDamping_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetAngularDamping_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:CreateDynamicMaterialInstance
    static readonly IntPtr CreateDynamicMaterialInstance_NativeFunction;
    static readonly int CreateDynamicMaterialInstance_ParamsSize;
    static readonly int CreateDynamicMaterialInstance_ElementIndex_Offset;
    static readonly int CreateDynamicMaterialInstance_SourceMaterial_Offset;
    static readonly int CreateDynamicMaterialInstance_OptionalName_Offset;
    static readonly int CreateDynamicMaterialInstance_ReturnValue_Offset;
    
    public UnrealSharp.Engine.MaterialInstanceDynamic CreateDynamicMaterialInstance(int elementIndex, UnrealSharp.Engine.MaterialInterface sourceMaterial = default(UnrealSharp.Engine.MaterialInterface), Name optionalName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateDynamicMaterialInstance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateDynamicMaterialInstance_ElementIndex_Offset), 0, null, elementIndex);
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, CreateDynamicMaterialInstance_SourceMaterial_Offset), 0, null, sourceMaterial);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, CreateDynamicMaterialInstance_OptionalName_Offset), 0, null, optionalName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreateDynamicMaterialInstance_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialInstanceDynamic returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceDynamic>.FromNative(IntPtr.Add(ParamsBuffer, CreateDynamicMaterialInstance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:CreateAndSetMaterialInstanceDynamicFromMaterial
    static readonly IntPtr CreateAndSetMaterialInstanceDynamicFromMaterial_NativeFunction;
    static readonly int CreateAndSetMaterialInstanceDynamicFromMaterial_ParamsSize;
    static readonly int CreateAndSetMaterialInstanceDynamicFromMaterial_ElementIndex_Offset;
    static readonly int CreateAndSetMaterialInstanceDynamicFromMaterial_Parent_Offset;
    static readonly int CreateAndSetMaterialInstanceDynamicFromMaterial_ReturnValue_Offset;
    
    [Obsolete("Use CreateDynamicMaterialInstance instead.")]
    public UnrealSharp.Engine.MaterialInstanceDynamic CreateAndSetMaterialInstanceDynamicFromMaterial(int elementIndex, UnrealSharp.Engine.MaterialInterface parent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateAndSetMaterialInstanceDynamicFromMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateAndSetMaterialInstanceDynamicFromMaterial_ElementIndex_Offset), 0, null, elementIndex);
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, CreateAndSetMaterialInstanceDynamicFromMaterial_Parent_Offset), 0, null, parent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreateAndSetMaterialInstanceDynamicFromMaterial_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialInstanceDynamic returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceDynamic>.FromNative(IntPtr.Add(ParamsBuffer, CreateAndSetMaterialInstanceDynamicFromMaterial_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:CreateAndSetMaterialInstanceDynamic
    static readonly IntPtr CreateAndSetMaterialInstanceDynamic_NativeFunction;
    static readonly int CreateAndSetMaterialInstanceDynamic_ParamsSize;
    static readonly int CreateAndSetMaterialInstanceDynamic_ElementIndex_Offset;
    static readonly int CreateAndSetMaterialInstanceDynamic_ReturnValue_Offset;
    
    [Obsolete("Use CreateDynamicMaterialInstance instead.")]
    public UnrealSharp.Engine.MaterialInstanceDynamic CreateAndSetMaterialInstanceDynamic(int elementIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateAndSetMaterialInstanceDynamic_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateAndSetMaterialInstanceDynamic_ElementIndex_Offset), 0, null, elementIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreateAndSetMaterialInstanceDynamic_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialInstanceDynamic returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceDynamic>.FromNative(IntPtr.Add(ParamsBuffer, CreateAndSetMaterialInstanceDynamic_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:CopyArrayOfMoveIgnoreComponents
    static readonly IntPtr CopyArrayOfMoveIgnoreComponents_NativeFunction;
    static readonly int CopyArrayOfMoveIgnoreComponents_ParamsSize;
    static readonly int CopyArrayOfMoveIgnoreComponents_ReturnValue_Offset;
    static readonly int CopyArrayOfMoveIgnoreComponents_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.PrimitiveComponent> CopyArrayOfMoveIgnoreComponents()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CopyArrayOfMoveIgnoreComponents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CopyArrayOfMoveIgnoreComponents_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.Engine.PrimitiveComponent> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, CopyArrayOfMoveIgnoreComponents_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent> (1, ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative, ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.FromNative, CopyArrayOfMoveIgnoreComponents_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.PrimitiveComponent>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:CopyArrayOfMoveIgnoreActors
    static readonly IntPtr CopyArrayOfMoveIgnoreActors_NativeFunction;
    static readonly int CopyArrayOfMoveIgnoreActors_ParamsSize;
    static readonly int CopyArrayOfMoveIgnoreActors_ReturnValue_Offset;
    static readonly int CopyArrayOfMoveIgnoreActors_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.Actor> CopyArrayOfMoveIgnoreActors()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CopyArrayOfMoveIgnoreActors_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CopyArrayOfMoveIgnoreActors_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.Engine.Actor> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, CopyArrayOfMoveIgnoreActors_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, CopyArrayOfMoveIgnoreActors_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:ClearMoveIgnoreComponents
    static readonly IntPtr ClearMoveIgnoreComponents_NativeFunction;
    
    public void ClearMoveIgnoreComponents()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearMoveIgnoreComponents_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:ClearMoveIgnoreActors
    static readonly IntPtr ClearMoveIgnoreActors_NativeFunction;
    
    public void ClearMoveIgnoreActors()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearMoveIgnoreActors_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:CanCharacterStepUp
    static readonly IntPtr CanCharacterStepUp_NativeFunction;
    static readonly int CanCharacterStepUp_ParamsSize;
    static readonly int CanCharacterStepUp_Pawn_Offset;
    static readonly int CanCharacterStepUp_ReturnValue_Offset;
    
    public bool CanCharacterStepUp(UnrealSharp.Engine.Pawn pawn)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CanCharacterStepUp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative(IntPtr.Add(ParamsBuffer, CanCharacterStepUp_Pawn_Offset), 0, null, pawn);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CanCharacterStepUp_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CanCharacterStepUp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:AddVelocityChangeImpulseAtLocation
    static readonly IntPtr AddVelocityChangeImpulseAtLocation_NativeFunction;
    static readonly int AddVelocityChangeImpulseAtLocation_ParamsSize;
    static readonly int AddVelocityChangeImpulseAtLocation_Impulse_Offset;
    static readonly int AddVelocityChangeImpulseAtLocation_Location_Offset;
    static readonly int AddVelocityChangeImpulseAtLocation_BoneName_Offset;
    
    public void AddVelocityChangeImpulseAtLocation(System.DoubleNumerics.Vector3 impulse, System.DoubleNumerics.Vector3 location, Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddVelocityChangeImpulseAtLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddVelocityChangeImpulseAtLocation_Impulse_Offset), 0, null, impulse);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddVelocityChangeImpulseAtLocation_Location_Offset), 0, null, location);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddVelocityChangeImpulseAtLocation_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddVelocityChangeImpulseAtLocation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:AddTorqueInRadians
    static readonly IntPtr AddTorqueInRadians_NativeFunction;
    static readonly int AddTorqueInRadians_ParamsSize;
    static readonly int AddTorqueInRadians_Torque_Offset;
    static readonly int AddTorqueInRadians_BoneName_Offset;
    static readonly int AddTorqueInRadians_bAccelChange_Offset;
    
    public void AddTorqueInRadians(System.DoubleNumerics.Vector3 torque, Name boneName = default(Name), bool bAccelChange = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddTorqueInRadians_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddTorqueInRadians_Torque_Offset), 0, null, torque);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddTorqueInRadians_BoneName_Offset), 0, null, boneName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddTorqueInRadians_bAccelChange_Offset), 0, null, bAccelChange);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddTorqueInRadians_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:AddTorqueInDegrees
    static readonly IntPtr AddTorqueInDegrees_NativeFunction;
    static readonly int AddTorqueInDegrees_ParamsSize;
    static readonly int AddTorqueInDegrees_Torque_Offset;
    static readonly int AddTorqueInDegrees_BoneName_Offset;
    static readonly int AddTorqueInDegrees_bAccelChange_Offset;
    
    public void AddTorqueInDegrees(System.DoubleNumerics.Vector3 torque, Name boneName = default(Name), bool bAccelChange = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddTorqueInDegrees_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddTorqueInDegrees_Torque_Offset), 0, null, torque);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddTorqueInDegrees_BoneName_Offset), 0, null, boneName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddTorqueInDegrees_bAccelChange_Offset), 0, null, bAccelChange);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddTorqueInDegrees_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:AddRadialImpulse
    static readonly IntPtr AddRadialImpulse_NativeFunction;
    static readonly int AddRadialImpulse_ParamsSize;
    static readonly int AddRadialImpulse_Origin_Offset;
    static readonly int AddRadialImpulse_Radius_Offset;
    static readonly int AddRadialImpulse_Strength_Offset;
    static readonly int AddRadialImpulse_Falloff_Offset;
    static readonly int AddRadialImpulse_bVelChange_Offset;
    
    public void AddRadialImpulse(System.DoubleNumerics.Vector3 origin, float radius, float strength, UnrealSharp.PhysicsCore.ERadialImpulseFalloff falloff, bool bVelChange = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddRadialImpulse_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddRadialImpulse_Origin_Offset), 0, null, origin);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddRadialImpulse_Radius_Offset), 0, null, radius);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddRadialImpulse_Strength_Offset), 0, null, strength);
            BlittableMarshaller<UnrealSharp.PhysicsCore.ERadialImpulseFalloff>.ToNative(IntPtr.Add(ParamsBuffer, AddRadialImpulse_Falloff_Offset), 0, null, falloff);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddRadialImpulse_bVelChange_Offset), 0, null, bVelChange);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddRadialImpulse_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:AddRadialForce
    static readonly IntPtr AddRadialForce_NativeFunction;
    static readonly int AddRadialForce_ParamsSize;
    static readonly int AddRadialForce_Origin_Offset;
    static readonly int AddRadialForce_Radius_Offset;
    static readonly int AddRadialForce_Strength_Offset;
    static readonly int AddRadialForce_Falloff_Offset;
    static readonly int AddRadialForce_bAccelChange_Offset;
    
    public void AddRadialForce(System.DoubleNumerics.Vector3 origin, float radius, float strength, UnrealSharp.PhysicsCore.ERadialImpulseFalloff falloff, bool bAccelChange = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddRadialForce_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddRadialForce_Origin_Offset), 0, null, origin);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddRadialForce_Radius_Offset), 0, null, radius);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddRadialForce_Strength_Offset), 0, null, strength);
            BlittableMarshaller<UnrealSharp.PhysicsCore.ERadialImpulseFalloff>.ToNative(IntPtr.Add(ParamsBuffer, AddRadialForce_Falloff_Offset), 0, null, falloff);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddRadialForce_bAccelChange_Offset), 0, null, bAccelChange);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddRadialForce_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:AddImpulseAtLocation
    static readonly IntPtr AddImpulseAtLocation_NativeFunction;
    static readonly int AddImpulseAtLocation_ParamsSize;
    static readonly int AddImpulseAtLocation_Impulse_Offset;
    static readonly int AddImpulseAtLocation_Location_Offset;
    static readonly int AddImpulseAtLocation_BoneName_Offset;
    
    public void AddImpulseAtLocation(System.DoubleNumerics.Vector3 impulse, System.DoubleNumerics.Vector3 location, Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddImpulseAtLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddImpulseAtLocation_Impulse_Offset), 0, null, impulse);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddImpulseAtLocation_Location_Offset), 0, null, location);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddImpulseAtLocation_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddImpulseAtLocation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:AddImpulse
    static readonly IntPtr AddImpulse_NativeFunction;
    static readonly int AddImpulse_ParamsSize;
    static readonly int AddImpulse_Impulse_Offset;
    static readonly int AddImpulse_BoneName_Offset;
    static readonly int AddImpulse_bVelChange_Offset;
    
    public void AddImpulse(System.DoubleNumerics.Vector3 impulse, Name boneName = default(Name), bool bVelChange = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddImpulse_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddImpulse_Impulse_Offset), 0, null, impulse);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddImpulse_BoneName_Offset), 0, null, boneName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddImpulse_bVelChange_Offset), 0, null, bVelChange);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddImpulse_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:AddForceAtLocationLocal
    static readonly IntPtr AddForceAtLocationLocal_NativeFunction;
    static readonly int AddForceAtLocationLocal_ParamsSize;
    static readonly int AddForceAtLocationLocal_Force_Offset;
    static readonly int AddForceAtLocationLocal_Location_Offset;
    static readonly int AddForceAtLocationLocal_BoneName_Offset;
    
    public void AddForceAtLocationLocal(System.DoubleNumerics.Vector3 force, System.DoubleNumerics.Vector3 location, Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddForceAtLocationLocal_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddForceAtLocationLocal_Force_Offset), 0, null, force);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddForceAtLocationLocal_Location_Offset), 0, null, location);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddForceAtLocationLocal_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddForceAtLocationLocal_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:AddForceAtLocation
    static readonly IntPtr AddForceAtLocation_NativeFunction;
    static readonly int AddForceAtLocation_ParamsSize;
    static readonly int AddForceAtLocation_Force_Offset;
    static readonly int AddForceAtLocation_Location_Offset;
    static readonly int AddForceAtLocation_BoneName_Offset;
    
    public void AddForceAtLocation(System.DoubleNumerics.Vector3 force, System.DoubleNumerics.Vector3 location, Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddForceAtLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddForceAtLocation_Force_Offset), 0, null, force);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddForceAtLocation_Location_Offset), 0, null, location);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddForceAtLocation_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddForceAtLocation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:AddForce
    static readonly IntPtr AddForce_NativeFunction;
    static readonly int AddForce_ParamsSize;
    static readonly int AddForce_Force_Offset;
    static readonly int AddForce_BoneName_Offset;
    static readonly int AddForce_bAccelChange_Offset;
    
    public void AddForce(System.DoubleNumerics.Vector3 force, Name boneName = default(Name), bool bAccelChange = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddForce_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddForce_Force_Offset), 0, null, force);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddForce_BoneName_Offset), 0, null, boneName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddForce_bAccelChange_Offset), 0, null, bAccelChange);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddForce_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:AddAngularImpulseInRadians
    static readonly IntPtr AddAngularImpulseInRadians_NativeFunction;
    static readonly int AddAngularImpulseInRadians_ParamsSize;
    static readonly int AddAngularImpulseInRadians_Impulse_Offset;
    static readonly int AddAngularImpulseInRadians_BoneName_Offset;
    static readonly int AddAngularImpulseInRadians_bVelChange_Offset;
    
    public void AddAngularImpulseInRadians(System.DoubleNumerics.Vector3 impulse, Name boneName = default(Name), bool bVelChange = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddAngularImpulseInRadians_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddAngularImpulseInRadians_Impulse_Offset), 0, null, impulse);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddAngularImpulseInRadians_BoneName_Offset), 0, null, boneName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddAngularImpulseInRadians_bVelChange_Offset), 0, null, bVelChange);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddAngularImpulseInRadians_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.PrimitiveComponent:AddAngularImpulseInDegrees
    static readonly IntPtr AddAngularImpulseInDegrees_NativeFunction;
    static readonly int AddAngularImpulseInDegrees_ParamsSize;
    static readonly int AddAngularImpulseInDegrees_Impulse_Offset;
    static readonly int AddAngularImpulseInDegrees_BoneName_Offset;
    static readonly int AddAngularImpulseInDegrees_bVelChange_Offset;
    
    public void AddAngularImpulseInDegrees(System.DoubleNumerics.Vector3 impulse, Name boneName = default(Name), bool bVelChange = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddAngularImpulseInDegrees_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddAngularImpulseInDegrees_Impulse_Offset), 0, null, impulse);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddAngularImpulseInDegrees_BoneName_Offset), 0, null, boneName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddAngularImpulseInDegrees_bVelChange_Offset), 0, null, bVelChange);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddAngularImpulseInDegrees_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
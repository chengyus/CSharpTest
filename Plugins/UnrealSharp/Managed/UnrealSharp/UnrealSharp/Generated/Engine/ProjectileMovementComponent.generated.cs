// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class ProjectileMovementComponent : UnrealSharp.Engine.MovementComponent
{
    
    static ProjectileMovementComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ProjectileMovementComponent");
        
        InitialSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InitialSpeed");
        MaxSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxSpeed");
        bRotationFollowsVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bRotationFollowsVelocity");
        bRotationFollowsVelocity_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bRotationFollowsVelocity");
        bRotationRemainsVertical_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bRotationRemainsVertical");
        bRotationRemainsVertical_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bRotationRemainsVertical");
        bShouldBounce_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bShouldBounce");
        bShouldBounce_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bShouldBounce");
        bInitialVelocityInLocalSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bInitialVelocityInLocalSpace");
        bInitialVelocityInLocalSpace_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bInitialVelocityInLocalSpace");
        bForceSubStepping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bForceSubStepping");
        bForceSubStepping_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bForceSubStepping");
        bSimulationEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSimulationEnabled");
        bSimulationEnabled_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bSimulationEnabled");
        bSweepCollision_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSweepCollision");
        bSweepCollision_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bSweepCollision");
        bIsHomingProjectile_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsHomingProjectile");
        bIsHomingProjectile_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIsHomingProjectile");
        bBounceAngleAffectsFriction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bBounceAngleAffectsFriction");
        bBounceAngleAffectsFriction_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bBounceAngleAffectsFriction");
        bIsSliding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsSliding");
        bIsSliding_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIsSliding");
        bInterpMovement_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bInterpMovement");
        bInterpMovement_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bInterpMovement");
        bInterpRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bInterpRotation");
        bInterpRotation_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bInterpRotation");
        bThrottleInterpolation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bThrottleInterpolation");
        bThrottleInterpolation_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bThrottleInterpolation");
        bInterpolationUseScopedMovement_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bInterpolationUseScopedMovement");
        bInterpolationUseScopedMovement_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bInterpolationUseScopedMovement");
        PreviousHitTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PreviousHitTime");
        PreviousHitNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PreviousHitNormal");
        ProjectileGravityScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ProjectileGravityScale");
        Bounciness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Bounciness");
        Friction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Friction");
        BounceVelocityStopSimulatingThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BounceVelocityStopSimulatingThreshold");
        MinFrictionFraction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinFrictionFraction");
        HomingAccelerationMagnitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "HomingAccelerationMagnitude");
        HomingTargetComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "HomingTargetComponent");
        MaxSimulationTimeStep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxSimulationTimeStep");
        MaxSimulationIterations_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxSimulationIterations");
        BounceAdditionalIterations_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BounceAdditionalIterations");
        InterpLocationTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InterpLocationTime");
        InterpRotationTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InterpRotationTime");
        InterpLocationMaxLagDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InterpLocationMaxLagDistance");
        InterpLocationSnapToTargetDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InterpLocationSnapToTargetDistance");
        ThrottleInterpolationThresholdNotRenderedShortTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ThrottleInterpolationThresholdNotRenderedShortTime");
        ThrottleInterpolationThresholdNotRenderedLongTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ThrottleInterpolationThresholdNotRenderedLongTime");
        ThrottleInterpolationSkipFramesRecent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ThrottleInterpolationSkipFramesRecent");
        ThrottleInterpolationSkipFramesNotRecent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ThrottleInterpolationSkipFramesNotRecent");
        
        StopSimulating_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopSimulating");
        StopSimulating_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StopSimulating_NativeFunction);
        StopSimulating_HitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopSimulating_NativeFunction, "HitResult");
        SetVelocityInLocalSpace_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVelocityInLocalSpace");
        SetVelocityInLocalSpace_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVelocityInLocalSpace_NativeFunction);
        SetVelocityInLocalSpace_NewVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVelocityInLocalSpace_NativeFunction, "NewVelocity");
        SetInterpolatedComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetInterpolatedComponent");
        SetInterpolatedComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetInterpolatedComponent_NativeFunction);
        SetInterpolatedComponent_Component_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInterpolatedComponent_NativeFunction, "Component");
        ResetInterpolation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetInterpolation");
        MoveInterpolationTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MoveInterpolationTarget");
        MoveInterpolationTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MoveInterpolationTarget_NativeFunction);
        MoveInterpolationTarget_NewLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveInterpolationTarget_NativeFunction, "NewLocation");
        MoveInterpolationTarget_NewRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MoveInterpolationTarget_NativeFunction, "NewRotation");
        LimitVelocity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LimitVelocity");
        LimitVelocity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LimitVelocity_NativeFunction);
        LimitVelocity_NewVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LimitVelocity_NativeFunction, "NewVelocity");
        LimitVelocity_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LimitVelocity_NativeFunction, "ReturnValue");
        IsVelocityUnderSimulationThreshold_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsVelocityUnderSimulationThreshold");
        IsVelocityUnderSimulationThreshold_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsVelocityUnderSimulationThreshold_NativeFunction);
        IsVelocityUnderSimulationThreshold_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsVelocityUnderSimulationThreshold_NativeFunction, "ReturnValue");
        IsInterpolationComplete_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsInterpolationComplete");
        IsInterpolationComplete_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsInterpolationComplete_NativeFunction);
        IsInterpolationComplete_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsInterpolationComplete_NativeFunction, "ReturnValue");
        
        
    }
    
    protected ProjectileMovementComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Engine.ProjectileMovementComponent:InitialSpeed
    static readonly int InitialSpeed_Offset;
    
    public float InitialSpeed
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, InitialSpeed_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, InitialSpeed_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.ProjectileMovementComponent:MaxSpeed
    static readonly int MaxSpeed_Offset;
    
    public float MaxSpeed
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxSpeed_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxSpeed_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.ProjectileMovementComponent:bRotationFollowsVelocity
    static readonly int bRotationFollowsVelocity_Offset;
    static readonly IntPtr bRotationFollowsVelocity_NativeProperty;
    
    public bool bRotationFollowsVelocity
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bRotationFollowsVelocity_NativeProperty, bRotationFollowsVelocity_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bRotationFollowsVelocity_NativeProperty, bRotationFollowsVelocity_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.ProjectileMovementComponent:bRotationRemainsVertical
    static readonly int bRotationRemainsVertical_Offset;
    static readonly IntPtr bRotationRemainsVertical_NativeProperty;
    
    public bool bRotationRemainsVertical
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bRotationRemainsVertical_NativeProperty, bRotationRemainsVertical_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bRotationRemainsVertical_NativeProperty, bRotationRemainsVertical_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.ProjectileMovementComponent:bShouldBounce
    static readonly int bShouldBounce_Offset;
    static readonly IntPtr bShouldBounce_NativeProperty;
    
    public bool bShouldBounce
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bShouldBounce_NativeProperty, bShouldBounce_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bShouldBounce_NativeProperty, bShouldBounce_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.ProjectileMovementComponent:bInitialVelocityInLocalSpace
    static readonly int bInitialVelocityInLocalSpace_Offset;
    static readonly IntPtr bInitialVelocityInLocalSpace_NativeProperty;
    
    public bool bInitialVelocityInLocalSpace
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bInitialVelocityInLocalSpace_NativeProperty, bInitialVelocityInLocalSpace_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bInitialVelocityInLocalSpace_NativeProperty, bInitialVelocityInLocalSpace_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.ProjectileMovementComponent:bForceSubStepping
    static readonly int bForceSubStepping_Offset;
    static readonly IntPtr bForceSubStepping_NativeProperty;
    
    public bool bForceSubStepping
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bForceSubStepping_NativeProperty, bForceSubStepping_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bForceSubStepping_NativeProperty, bForceSubStepping_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.ProjectileMovementComponent:bSimulationEnabled
    static readonly int bSimulationEnabled_Offset;
    static readonly IntPtr bSimulationEnabled_NativeProperty;
    
    public bool bSimulationEnabled
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bSimulationEnabled_NativeProperty, bSimulationEnabled_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bSimulationEnabled_NativeProperty, bSimulationEnabled_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.ProjectileMovementComponent:bSweepCollision
    static readonly int bSweepCollision_Offset;
    static readonly IntPtr bSweepCollision_NativeProperty;
    
    public bool bSweepCollision
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bSweepCollision_NativeProperty, bSweepCollision_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bSweepCollision_NativeProperty, bSweepCollision_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.ProjectileMovementComponent:bIsHomingProjectile
    static readonly int bIsHomingProjectile_Offset;
    static readonly IntPtr bIsHomingProjectile_NativeProperty;
    
    public bool bIsHomingProjectile
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIsHomingProjectile_NativeProperty, bIsHomingProjectile_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bIsHomingProjectile_NativeProperty, bIsHomingProjectile_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.ProjectileMovementComponent:bBounceAngleAffectsFriction
    static readonly int bBounceAngleAffectsFriction_Offset;
    static readonly IntPtr bBounceAngleAffectsFriction_NativeProperty;
    
    public bool bBounceAngleAffectsFriction
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bBounceAngleAffectsFriction_NativeProperty, bBounceAngleAffectsFriction_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bBounceAngleAffectsFriction_NativeProperty, bBounceAngleAffectsFriction_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.ProjectileMovementComponent:bIsSliding
    static readonly int bIsSliding_Offset;
    static readonly IntPtr bIsSliding_NativeProperty;
    
    public bool bIsSliding
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIsSliding_NativeProperty, bIsSliding_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.ProjectileMovementComponent:bInterpMovement
    static readonly int bInterpMovement_Offset;
    static readonly IntPtr bInterpMovement_NativeProperty;
    
    public bool bInterpMovement
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bInterpMovement_NativeProperty, bInterpMovement_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bInterpMovement_NativeProperty, bInterpMovement_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.ProjectileMovementComponent:bInterpRotation
    static readonly int bInterpRotation_Offset;
    static readonly IntPtr bInterpRotation_NativeProperty;
    
    public bool bInterpRotation
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bInterpRotation_NativeProperty, bInterpRotation_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bInterpRotation_NativeProperty, bInterpRotation_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.ProjectileMovementComponent:bThrottleInterpolation
    static readonly int bThrottleInterpolation_Offset;
    static readonly IntPtr bThrottleInterpolation_NativeProperty;
    
    public bool bThrottleInterpolation
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bThrottleInterpolation_NativeProperty, bThrottleInterpolation_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bThrottleInterpolation_NativeProperty, bThrottleInterpolation_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.ProjectileMovementComponent:bInterpolationUseScopedMovement
    static readonly int bInterpolationUseScopedMovement_Offset;
    static readonly IntPtr bInterpolationUseScopedMovement_NativeProperty;
    
    public bool bInterpolationUseScopedMovement
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bInterpolationUseScopedMovement_NativeProperty, bInterpolationUseScopedMovement_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bInterpolationUseScopedMovement_NativeProperty, bInterpolationUseScopedMovement_Offset, value);
        }
    }
    
    // FloatProperty /Script/Engine.ProjectileMovementComponent:PreviousHitTime
    static readonly int PreviousHitTime_Offset;
    
    public float PreviousHitTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PreviousHitTime_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.ProjectileMovementComponent:PreviousHitNormal
    static readonly int PreviousHitNormal_Offset;
    
    public System.DoubleNumerics.Vector3 PreviousHitNormal
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, PreviousHitNormal_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.ProjectileMovementComponent:ProjectileGravityScale
    static readonly int ProjectileGravityScale_Offset;
    
    public float ProjectileGravityScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ProjectileGravityScale_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ProjectileGravityScale_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.ProjectileMovementComponent:Bounciness
    static readonly int Bounciness_Offset;
    
    public float Bounciness
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Bounciness_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Bounciness_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.ProjectileMovementComponent:Friction
    static readonly int Friction_Offset;
    
    public float Friction
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Friction_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Friction_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.ProjectileMovementComponent:BounceVelocityStopSimulatingThreshold
    static readonly int BounceVelocityStopSimulatingThreshold_Offset;
    
    public float BounceVelocityStopSimulatingThreshold
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, BounceVelocityStopSimulatingThreshold_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, BounceVelocityStopSimulatingThreshold_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.ProjectileMovementComponent:MinFrictionFraction
    static readonly int MinFrictionFraction_Offset;
    
    public float MinFrictionFraction
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinFrictionFraction_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MinFrictionFraction_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.ProjectileMovementComponent:HomingAccelerationMagnitude
    static readonly int HomingAccelerationMagnitude_Offset;
    
    public float HomingAccelerationMagnitude
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, HomingAccelerationMagnitude_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, HomingAccelerationMagnitude_Offset), 0, this, value);
        }
    }
    
    // WeakObjectProperty /Script/Engine.ProjectileMovementComponent:HomingTargetComponent
    static readonly int HomingTargetComponent_Offset;
    
    public WeakObject<UnrealSharp.Engine.SceneComponent> HomingTargetComponent
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<WeakObject<UnrealSharp.Engine.SceneComponent>>.FromNative(IntPtr.Add(NativeObject, HomingTargetComponent_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<WeakObject<UnrealSharp.Engine.SceneComponent>>.ToNative(IntPtr.Add(NativeObject, HomingTargetComponent_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.ProjectileMovementComponent:MaxSimulationTimeStep
    static readonly int MaxSimulationTimeStep_Offset;
    
    public float MaxSimulationTimeStep
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxSimulationTimeStep_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxSimulationTimeStep_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.ProjectileMovementComponent:MaxSimulationIterations
    static readonly int MaxSimulationIterations_Offset;
    
    public int MaxSimulationIterations
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, MaxSimulationIterations_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, MaxSimulationIterations_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.ProjectileMovementComponent:BounceAdditionalIterations
    static readonly int BounceAdditionalIterations_Offset;
    
    public int BounceAdditionalIterations
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, BounceAdditionalIterations_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, BounceAdditionalIterations_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.ProjectileMovementComponent:InterpLocationTime
    static readonly int InterpLocationTime_Offset;
    
    public float InterpLocationTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, InterpLocationTime_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, InterpLocationTime_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.ProjectileMovementComponent:InterpRotationTime
    static readonly int InterpRotationTime_Offset;
    
    public float InterpRotationTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, InterpRotationTime_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, InterpRotationTime_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.ProjectileMovementComponent:InterpLocationMaxLagDistance
    static readonly int InterpLocationMaxLagDistance_Offset;
    
    public float InterpLocationMaxLagDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, InterpLocationMaxLagDistance_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, InterpLocationMaxLagDistance_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.ProjectileMovementComponent:InterpLocationSnapToTargetDistance
    static readonly int InterpLocationSnapToTargetDistance_Offset;
    
    public float InterpLocationSnapToTargetDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, InterpLocationSnapToTargetDistance_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, InterpLocationSnapToTargetDistance_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.ProjectileMovementComponent:ThrottleInterpolationThresholdNotRenderedShortTime
    static readonly int ThrottleInterpolationThresholdNotRenderedShortTime_Offset;
    
    public float ThrottleInterpolationThresholdNotRenderedShortTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ThrottleInterpolationThresholdNotRenderedShortTime_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ThrottleInterpolationThresholdNotRenderedShortTime_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.ProjectileMovementComponent:ThrottleInterpolationThresholdNotRenderedLongTime
    static readonly int ThrottleInterpolationThresholdNotRenderedLongTime_Offset;
    
    public float ThrottleInterpolationThresholdNotRenderedLongTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ThrottleInterpolationThresholdNotRenderedLongTime_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ThrottleInterpolationThresholdNotRenderedLongTime_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.ProjectileMovementComponent:ThrottleInterpolationSkipFramesRecent
    static readonly int ThrottleInterpolationSkipFramesRecent_Offset;
    
    public int ThrottleInterpolationSkipFramesRecent
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, ThrottleInterpolationSkipFramesRecent_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, ThrottleInterpolationSkipFramesRecent_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.ProjectileMovementComponent:ThrottleInterpolationSkipFramesNotRecent
    static readonly int ThrottleInterpolationSkipFramesNotRecent_Offset;
    
    public int ThrottleInterpolationSkipFramesNotRecent
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, ThrottleInterpolationSkipFramesNotRecent_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, ThrottleInterpolationSkipFramesNotRecent_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Engine.ProjectileMovementComponent:StopSimulating
    static readonly IntPtr StopSimulating_NativeFunction;
    static readonly int StopSimulating_ParamsSize;
    static readonly int StopSimulating_HitResult_Offset;
    
    public void StopSimulating(UnrealSharp.Engine.HitResult hitResult)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StopSimulating_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.HitResultMarshaler.ToNative(IntPtr.Add(ParamsBuffer, StopSimulating_HitResult_Offset), 0, null, hitResult);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopSimulating_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.ProjectileMovementComponent:SetVelocityInLocalSpace
    static readonly IntPtr SetVelocityInLocalSpace_NativeFunction;
    static readonly int SetVelocityInLocalSpace_ParamsSize;
    static readonly int SetVelocityInLocalSpace_NewVelocity_Offset;
    
    public void SetVelocityInLocalSpace(System.DoubleNumerics.Vector3 newVelocity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVelocityInLocalSpace_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetVelocityInLocalSpace_NewVelocity_Offset), 0, null, newVelocity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVelocityInLocalSpace_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ProjectileMovementComponent:SetInterpolatedComponent
    static readonly IntPtr SetInterpolatedComponent_NativeFunction;
    static readonly int SetInterpolatedComponent_ParamsSize;
    static readonly int SetInterpolatedComponent_Component_Offset;
    
    public void SetInterpolatedComponent(UnrealSharp.Engine.SceneComponent component)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetInterpolatedComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.ToNative(IntPtr.Add(ParamsBuffer, SetInterpolatedComponent_Component_Offset), 0, null, component);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetInterpolatedComponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.ProjectileMovementComponent:ResetInterpolation
    static readonly IntPtr ResetInterpolation_NativeFunction;
    
    public void ResetInterpolation()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetInterpolation_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.ProjectileMovementComponent:MoveInterpolationTarget
    static readonly IntPtr MoveInterpolationTarget_NativeFunction;
    static readonly int MoveInterpolationTarget_ParamsSize;
    static readonly int MoveInterpolationTarget_NewLocation_Offset;
    static readonly int MoveInterpolationTarget_NewRotation_Offset;
    
    public void MoveInterpolationTarget(System.DoubleNumerics.Vector3 newLocation, UnrealSharp.Rotator newRotation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MoveInterpolationTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, MoveInterpolationTarget_NewLocation_Offset), 0, null, newLocation);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, MoveInterpolationTarget_NewRotation_Offset), 0, null, newRotation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, MoveInterpolationTarget_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.ProjectileMovementComponent:LimitVelocity
    static readonly IntPtr LimitVelocity_NativeFunction;
    static readonly int LimitVelocity_ParamsSize;
    static readonly int LimitVelocity_NewVelocity_Offset;
    static readonly int LimitVelocity_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 LimitVelocity(System.DoubleNumerics.Vector3 newVelocity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LimitVelocity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LimitVelocity_NewVelocity_Offset), 0, null, newVelocity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, LimitVelocity_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, LimitVelocity_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ProjectileMovementComponent:IsVelocityUnderSimulationThreshold
    static readonly IntPtr IsVelocityUnderSimulationThreshold_NativeFunction;
    static readonly int IsVelocityUnderSimulationThreshold_ParamsSize;
    static readonly int IsVelocityUnderSimulationThreshold_ReturnValue_Offset;
    
    public bool IsVelocityUnderSimulationThreshold()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsVelocityUnderSimulationThreshold_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsVelocityUnderSimulationThreshold_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsVelocityUnderSimulationThreshold_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.ProjectileMovementComponent:IsInterpolationComplete
    static readonly IntPtr IsInterpolationComplete_NativeFunction;
    static readonly int IsInterpolationComplete_ParamsSize;
    static readonly int IsInterpolationComplete_ReturnValue_Offset;
    
    public bool IsInterpolationComplete()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsInterpolationComplete_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsInterpolationComplete_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsInterpolationComplete_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
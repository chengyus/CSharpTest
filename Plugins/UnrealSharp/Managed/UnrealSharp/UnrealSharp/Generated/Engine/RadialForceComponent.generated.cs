// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class RadialForceComponent : UnrealSharp.Engine.SceneComponent
{
    
    static RadialForceComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("RadialForceComponent");
        
        Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Radius");
        Falloff_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Falloff");
        ImpulseStrength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ImpulseStrength");
        bImpulseVelChange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImpulseVelChange");
        bImpulseVelChange_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bImpulseVelChange");
        bIgnoreOwningActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIgnoreOwningActor");
        bIgnoreOwningActor_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIgnoreOwningActor");
        ForceStrength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ForceStrength");
        DestructibleDamage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DestructibleDamage");
        
        RemoveObjectTypeToAffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveObjectTypeToAffect");
        RemoveObjectTypeToAffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveObjectTypeToAffect_NativeFunction);
        RemoveObjectTypeToAffect_ObjectType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveObjectTypeToAffect_NativeFunction, "ObjectType");
        FireImpulse_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FireImpulse");
        AddObjectTypeToAffect_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddObjectTypeToAffect");
        AddObjectTypeToAffect_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddObjectTypeToAffect_NativeFunction);
        AddObjectTypeToAffect_ObjectType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddObjectTypeToAffect_NativeFunction, "ObjectType");
        
        
    }
    
    protected RadialForceComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Engine.RadialForceComponent:Radius
    static readonly int Radius_Offset;
    
    public float Radius
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Radius_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Radius_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/Engine.RadialForceComponent:Falloff
    static readonly int Falloff_Offset;
    
    public UnrealSharp.PhysicsCore.ERadialImpulseFalloff Falloff
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.PhysicsCore.ERadialImpulseFalloff>.FromNative(IntPtr.Add(NativeObject, Falloff_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.PhysicsCore.ERadialImpulseFalloff>.ToNative(IntPtr.Add(NativeObject, Falloff_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.RadialForceComponent:ImpulseStrength
    static readonly int ImpulseStrength_Offset;
    
    public float ImpulseStrength
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ImpulseStrength_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ImpulseStrength_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.RadialForceComponent:bImpulseVelChange
    static readonly int bImpulseVelChange_Offset;
    static readonly IntPtr bImpulseVelChange_NativeProperty;
    
    public bool bImpulseVelChange
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bImpulseVelChange_NativeProperty, bImpulseVelChange_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bImpulseVelChange_NativeProperty, bImpulseVelChange_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.RadialForceComponent:bIgnoreOwningActor
    static readonly int bIgnoreOwningActor_Offset;
    static readonly IntPtr bIgnoreOwningActor_NativeProperty;
    
    public bool bIgnoreOwningActor
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIgnoreOwningActor_NativeProperty, bIgnoreOwningActor_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bIgnoreOwningActor_NativeProperty, bIgnoreOwningActor_Offset, value);
        }
    }
    
    // FloatProperty /Script/Engine.RadialForceComponent:ForceStrength
    static readonly int ForceStrength_Offset;
    
    public float ForceStrength
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ForceStrength_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ForceStrength_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.RadialForceComponent:DestructibleDamage
    static readonly int DestructibleDamage_Offset;
    
    public float DestructibleDamage
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, DestructibleDamage_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, DestructibleDamage_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Engine.RadialForceComponent:RemoveObjectTypeToAffect
    static readonly IntPtr RemoveObjectTypeToAffect_NativeFunction;
    static readonly int RemoveObjectTypeToAffect_ParamsSize;
    static readonly int RemoveObjectTypeToAffect_ObjectType_Offset;
    
    public void RemoveObjectTypeToAffect(UnrealSharp.Engine.EObjectTypeQuery objectType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveObjectTypeToAffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.ToNative(IntPtr.Add(ParamsBuffer, RemoveObjectTypeToAffect_ObjectType_Offset), 0, null, objectType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveObjectTypeToAffect_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.RadialForceComponent:FireImpulse
    static readonly IntPtr FireImpulse_NativeFunction;
    
    public void FireImpulse()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FireImpulse_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.RadialForceComponent:AddObjectTypeToAffect
    static readonly IntPtr AddObjectTypeToAffect_NativeFunction;
    static readonly int AddObjectTypeToAffect_ParamsSize;
    static readonly int AddObjectTypeToAffect_ObjectType_Offset;
    
    public void AddObjectTypeToAffect(UnrealSharp.Engine.EObjectTypeQuery objectType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddObjectTypeToAffect_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EObjectTypeQuery>.ToNative(IntPtr.Add(ParamsBuffer, AddObjectTypeToAffect_ObjectType_Offset), 0, null, objectType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddObjectTypeToAffect_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
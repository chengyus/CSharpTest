// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class RawAnimSequenceTrackExtensions : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static RawAnimSequenceTrackExtensions()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("RawAnimSequenceTrackExtensions");
        
        
        GetScaleKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetScaleKeys");
        GetScaleKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetScaleKeys_NativeFunction);
        GetScaleKeys_Track_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScaleKeys_NativeFunction, "Track");
        GetScaleKeys_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScaleKeys_NativeFunction, "ReturnValue");
        GetScaleKeys_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetScaleKeys_NativeFunction, "ReturnValue");
        GetRotationalKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRotationalKeys");
        GetRotationalKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRotationalKeys_NativeFunction);
        GetRotationalKeys_Track_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotationalKeys_NativeFunction, "Track");
        GetRotationalKeys_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotationalKeys_NativeFunction, "ReturnValue");
        GetRotationalKeys_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetRotationalKeys_NativeFunction, "ReturnValue");
        GetPositionalKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPositionalKeys");
        GetPositionalKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPositionalKeys_NativeFunction);
        GetPositionalKeys_Track_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPositionalKeys_NativeFunction, "Track");
        GetPositionalKeys_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPositionalKeys_NativeFunction, "ReturnValue");
        GetPositionalKeys_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetPositionalKeys_NativeFunction, "ReturnValue");
        
        
    }
    
    protected RawAnimSequenceTrackExtensions(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.RawAnimSequenceTrackExtensions:GetScaleKeys
    static readonly IntPtr GetScaleKeys_NativeFunction;
    static readonly int GetScaleKeys_ParamsSize;
    static readonly int GetScaleKeys_Track_Offset;
    static readonly int GetScaleKeys_ReturnValue_Offset;
    static readonly int GetScaleKeys_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<System.DoubleNumerics.Vector3> GetScaleKeys(UnrealSharp.Engine.RawAnimSequenceTrack track)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetScaleKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.RawAnimSequenceTrackMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetScaleKeys_Track_Offset), 0, null, track);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetScaleKeys_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<System.DoubleNumerics.Vector3> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetScaleKeys_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GetScaleKeys_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.RawAnimSequenceTrackExtensions:GetRotationalKeys
    static readonly IntPtr GetRotationalKeys_NativeFunction;
    static readonly int GetRotationalKeys_ParamsSize;
    static readonly int GetRotationalKeys_Track_Offset;
    static readonly int GetRotationalKeys_ReturnValue_Offset;
    static readonly int GetRotationalKeys_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<System.DoubleNumerics.Quaternion> GetRotationalKeys(UnrealSharp.Engine.RawAnimSequenceTrack track)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRotationalKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.RawAnimSequenceTrackMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetRotationalKeys_Track_Offset), 0, null, track);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetRotationalKeys_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<System.DoubleNumerics.Quaternion> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetRotationalKeys_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Quaternion> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Quaternion> (1, BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative, BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative, GetRotationalKeys_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Quaternion>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.RawAnimSequenceTrackExtensions:GetPositionalKeys
    static readonly IntPtr GetPositionalKeys_NativeFunction;
    static readonly int GetPositionalKeys_ParamsSize;
    static readonly int GetPositionalKeys_Track_Offset;
    static readonly int GetPositionalKeys_ReturnValue_Offset;
    static readonly int GetPositionalKeys_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<System.DoubleNumerics.Vector3> GetPositionalKeys(UnrealSharp.Engine.RawAnimSequenceTrack track)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPositionalKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.RawAnimSequenceTrackMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetPositionalKeys_Track_Offset), 0, null, track);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPositionalKeys_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<System.DoubleNumerics.Vector3> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetPositionalKeys_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, GetPositionalKeys_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class RuntimeVirtualTexture : UnrealSharp.CoreUObject.Object
{
    
    static RuntimeVirtualTexture()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("RuntimeVirtualTexture");
        
        TileCount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TileCount");
        TileSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TileSize");
        TileBorderSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TileBorderSize");
        MaterialType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaterialType");
        bCompressTextures_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCompressTextures");
        bUseLowQualityCompression_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseLowQualityCompression");
        LODGroup_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LODGroup");
        
        GetSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSize");
        GetSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSize_NativeFunction);
        GetSize_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSize_NativeFunction, "ReturnValue");
        GetPageTableSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPageTableSize");
        GetPageTableSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPageTableSize_NativeFunction);
        GetPageTableSize_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPageTableSize_NativeFunction, "ReturnValue");
        
        
    }
    
    protected RuntimeVirtualTexture(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // IntProperty /Script/Engine.RuntimeVirtualTexture:TileCount
    static readonly int TileCount_Offset;
    
    public int TileCount
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, TileCount_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Engine.RuntimeVirtualTexture:TileSize
    static readonly int TileSize_Offset;
    
    public int TileSize
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, TileSize_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Engine.RuntimeVirtualTexture:TileBorderSize
    static readonly int TileBorderSize_Offset;
    
    public int TileBorderSize
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, TileBorderSize_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/Engine.RuntimeVirtualTexture:MaterialType
    static readonly int MaterialType_Offset;
    
    public UnrealSharp.Engine.ERuntimeVirtualTextureMaterialType MaterialType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ERuntimeVirtualTextureMaterialType>.FromNative(IntPtr.Add(NativeObject, MaterialType_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.RuntimeVirtualTexture:bCompressTextures
    static readonly int bCompressTextures_Offset;
    
    public bool bCompressTextures
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bCompressTextures_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.RuntimeVirtualTexture:bUseLowQualityCompression
    static readonly int bUseLowQualityCompression_Offset;
    
    public bool bUseLowQualityCompression
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseLowQualityCompression_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/Engine.RuntimeVirtualTexture:LODGroup
    static readonly int LODGroup_Offset;
    
    public UnrealSharp.Engine.TextureGroup LODGroup
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.TextureGroup>.FromNative(IntPtr.Add(NativeObject, LODGroup_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.TextureGroup>.ToNative(IntPtr.Add(NativeObject, LODGroup_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Engine.RuntimeVirtualTexture:GetSize
    static readonly IntPtr GetSize_NativeFunction;
    static readonly int GetSize_ParamsSize;
    static readonly int GetSize_ReturnValue_Offset;
    
    public int GetSize()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSize_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetSize_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.RuntimeVirtualTexture:GetPageTableSize
    static readonly IntPtr GetPageTableSize_NativeFunction;
    static readonly int GetPageTableSize_ParamsSize;
    static readonly int GetPageTableSize_ReturnValue_Offset;
    
    public int GetPageTableSize()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPageTableSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPageTableSize_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetPageTableSize_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
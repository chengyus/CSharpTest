// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class RuntimeVirtualTextureComponent : UnrealSharp.Engine.SceneComponent
{
    
    static RuntimeVirtualTextureComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("RuntimeVirtualTextureComponent");
        
        VirtualTexture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VirtualTexture");
        StreamingTexture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StreamingTexture");
        LossyCompressionAmount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LossyCompressionAmount");
        bBuildDebugStreamingMips_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bBuildDebugStreamingMips");
        
        Invalidate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Invalidate");
        Invalidate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Invalidate_NativeFunction);
        Invalidate_WorldBounds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Invalidate_NativeFunction, "WorldBounds");
        
        
    }
    
    protected RuntimeVirtualTextureComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Engine.RuntimeVirtualTextureComponent:VirtualTexture
    static readonly int VirtualTexture_Offset;
    
    public UnrealSharp.Engine.RuntimeVirtualTexture VirtualTexture
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.RuntimeVirtualTexture>.FromNative(IntPtr.Add(NativeObject, VirtualTexture_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/Engine.RuntimeVirtualTextureComponent:StreamingTexture
    static readonly int StreamingTexture_Offset;
    
    public UnrealSharp.Engine.VirtualTextureBuilder StreamingTexture
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.VirtualTextureBuilder>.FromNative(IntPtr.Add(NativeObject, StreamingTexture_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/Engine.RuntimeVirtualTextureComponent:LossyCompressionAmount
    static readonly int LossyCompressionAmount_Offset;
    
    public UnrealSharp.Engine.ETextureLossyCompressionAmount LossyCompressionAmount
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ETextureLossyCompressionAmount>.FromNative(IntPtr.Add(NativeObject, LossyCompressionAmount_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.ETextureLossyCompressionAmount>.ToNative(IntPtr.Add(NativeObject, LossyCompressionAmount_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.RuntimeVirtualTextureComponent:bBuildDebugStreamingMips
    static readonly int bBuildDebugStreamingMips_Offset;
    
    public bool bBuildDebugStreamingMips
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bBuildDebugStreamingMips_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.RuntimeVirtualTextureComponent:Invalidate
    static readonly IntPtr Invalidate_NativeFunction;
    static readonly int Invalidate_ParamsSize;
    static readonly int Invalidate_WorldBounds_Offset;
    
    public void Invalidate(UnrealSharp.CoreUObject.BoxSphereBounds worldBounds)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Invalidate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.BoxSphereBounds>.ToNative(IntPtr.Add(ParamsBuffer, Invalidate_WorldBounds_Offset), 0, null, worldBounds);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Invalidate_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    
}
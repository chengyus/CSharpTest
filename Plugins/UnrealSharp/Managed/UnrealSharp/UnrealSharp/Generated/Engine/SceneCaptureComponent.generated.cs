// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
abstract public partial class SceneCaptureComponent : UnrealSharp.Engine.SceneComponent
{
    
    static SceneCaptureComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SceneCaptureComponent");
        
        PrimitiveRenderMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PrimitiveRenderMode");
        CaptureSource_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CaptureSource");
        bCaptureEveryFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCaptureEveryFrame");
        bCaptureEveryFrame_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCaptureEveryFrame");
        bCaptureOnMovement_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCaptureOnMovement");
        bCaptureOnMovement_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCaptureOnMovement");
        bAlwaysPersistRenderingState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAlwaysPersistRenderingState");
        HiddenActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "HiddenActors");
        HiddenActors_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "HiddenActors");
        ShowOnlyActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShowOnlyActors");
        ShowOnlyActors_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "ShowOnlyActors");
        MaxViewDistanceOverride_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxViewDistanceOverride");
        CaptureSortPriority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CaptureSortPriority");
        bUseRayTracingIfEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseRayTracingIfEnabled");
        ShowFlagSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShowFlagSettings");
        ShowFlagSettings_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "ShowFlagSettings");
        ProfilingEventName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ProfilingEventName");
        ProfilingEventName_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "ProfilingEventName");
        
        ShowOnlyComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ShowOnlyComponent");
        ShowOnlyComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ShowOnlyComponent_NativeFunction);
        ShowOnlyComponent_InComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ShowOnlyComponent_NativeFunction, "InComponent");
        ShowOnlyActorComponents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ShowOnlyActorComponents");
        ShowOnlyActorComponents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ShowOnlyActorComponents_NativeFunction);
        ShowOnlyActorComponents_InActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ShowOnlyActorComponents_NativeFunction, "InActor");
        ShowOnlyActorComponents_bIncludeFromChildActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ShowOnlyActorComponents_NativeFunction, "bIncludeFromChildActors");
        SetCaptureSortPriority_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCaptureSortPriority");
        SetCaptureSortPriority_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCaptureSortPriority_NativeFunction);
        SetCaptureSortPriority_NewCaptureSortPriority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCaptureSortPriority_NativeFunction, "NewCaptureSortPriority");
        RemoveShowOnlyComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveShowOnlyComponent");
        RemoveShowOnlyComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveShowOnlyComponent_NativeFunction);
        RemoveShowOnlyComponent_InComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveShowOnlyComponent_NativeFunction, "InComponent");
        RemoveShowOnlyActorComponents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveShowOnlyActorComponents");
        RemoveShowOnlyActorComponents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveShowOnlyActorComponents_NativeFunction);
        RemoveShowOnlyActorComponents_InActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveShowOnlyActorComponents_NativeFunction, "InActor");
        RemoveShowOnlyActorComponents_bIncludeFromChildActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveShowOnlyActorComponents_NativeFunction, "bIncludeFromChildActors");
        HideComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HideComponent");
        HideComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HideComponent_NativeFunction);
        HideComponent_InComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HideComponent_NativeFunction, "InComponent");
        HideActorComponents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HideActorComponents");
        HideActorComponents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HideActorComponents_NativeFunction);
        HideActorComponents_InActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HideActorComponents_NativeFunction, "InActor");
        HideActorComponents_bIncludeFromChildActors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HideActorComponents_NativeFunction, "bIncludeFromChildActors");
        ClearShowOnlyComponents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearShowOnlyComponents");
        ClearHiddenComponents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearHiddenComponents");
        
        
    }
    
    protected SceneCaptureComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // EnumProperty /Script/Engine.SceneCaptureComponent:PrimitiveRenderMode
    static readonly int PrimitiveRenderMode_Offset;
    
    public UnrealSharp.Engine.ESceneCapturePrimitiveRenderMode PrimitiveRenderMode
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ESceneCapturePrimitiveRenderMode>.FromNative(IntPtr.Add(NativeObject, PrimitiveRenderMode_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.ESceneCapturePrimitiveRenderMode>.ToNative(IntPtr.Add(NativeObject, PrimitiveRenderMode_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/Engine.SceneCaptureComponent:CaptureSource
    static readonly int CaptureSource_Offset;
    
    public UnrealSharp.Engine.ESceneCaptureSource CaptureSource
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ESceneCaptureSource>.FromNative(IntPtr.Add(NativeObject, CaptureSource_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.ESceneCaptureSource>.ToNative(IntPtr.Add(NativeObject, CaptureSource_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.SceneCaptureComponent:bCaptureEveryFrame
    static readonly int bCaptureEveryFrame_Offset;
    static readonly IntPtr bCaptureEveryFrame_NativeProperty;
    
    public bool bCaptureEveryFrame
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCaptureEveryFrame_NativeProperty, bCaptureEveryFrame_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bCaptureEveryFrame_NativeProperty, bCaptureEveryFrame_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.SceneCaptureComponent:bCaptureOnMovement
    static readonly int bCaptureOnMovement_Offset;
    static readonly IntPtr bCaptureOnMovement_NativeProperty;
    
    public bool bCaptureOnMovement
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCaptureOnMovement_NativeProperty, bCaptureOnMovement_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bCaptureOnMovement_NativeProperty, bCaptureOnMovement_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.SceneCaptureComponent:bAlwaysPersistRenderingState
    static readonly int bAlwaysPersistRenderingState_Offset;
    
    public bool bAlwaysPersistRenderingState
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAlwaysPersistRenderingState_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAlwaysPersistRenderingState_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/Engine.SceneCaptureComponent:HiddenActors
    static readonly int HiddenActors_Offset;
    static readonly IntPtr HiddenActors_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.Actor> HiddenActors_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.Actor> HiddenActors
    {
        get
        {
            if(HiddenActors_Wrapper == null)
            {
                HiddenActors_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.Actor>(1, HiddenActors_NativeProperty, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative);
            }
            
            return HiddenActors_Wrapper.FromNative(IntPtr.Add(NativeObject,HiddenActors_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/Engine.SceneCaptureComponent:ShowOnlyActors
    static readonly int ShowOnlyActors_Offset;
    static readonly IntPtr ShowOnlyActors_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.Actor> ShowOnlyActors_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.Actor> ShowOnlyActors
    {
        get
        {
            if(ShowOnlyActors_Wrapper == null)
            {
                ShowOnlyActors_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.Actor>(1, ShowOnlyActors_NativeProperty, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative);
            }
            
            return ShowOnlyActors_Wrapper.FromNative(IntPtr.Add(NativeObject,ShowOnlyActors_Offset),0,this);
        }
    }
    
    // FloatProperty /Script/Engine.SceneCaptureComponent:MaxViewDistanceOverride
    static readonly int MaxViewDistanceOverride_Offset;
    
    public float MaxViewDistanceOverride
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxViewDistanceOverride_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxViewDistanceOverride_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.SceneCaptureComponent:CaptureSortPriority
    static readonly int CaptureSortPriority_Offset;
    
    public int CaptureSortPriority
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, CaptureSortPriority_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.SceneCaptureComponent:bUseRayTracingIfEnabled
    static readonly int bUseRayTracingIfEnabled_Offset;
    
    public bool bUseRayTracingIfEnabled
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseRayTracingIfEnabled_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bUseRayTracingIfEnabled_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/Engine.SceneCaptureComponent:ShowFlagSettings
    static readonly int ShowFlagSettings_Offset;
    static readonly IntPtr ShowFlagSettings_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.EngineShowFlagsSetting> ShowFlagSettings_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.EngineShowFlagsSetting> ShowFlagSettings
    {
        get
        {
            if(ShowFlagSettings_Wrapper == null)
            {
                ShowFlagSettings_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.EngineShowFlagsSetting>(1, ShowFlagSettings_NativeProperty, UnrealSharp.Engine.EngineShowFlagsSettingMarshaler.ToNative, UnrealSharp.Engine.EngineShowFlagsSettingMarshaler.FromNative);
            }
            
            return ShowFlagSettings_Wrapper.FromNative(IntPtr.Add(NativeObject,ShowFlagSettings_Offset),0,this);
        }
    }
    
    // StrProperty /Script/Engine.SceneCaptureComponent:ProfilingEventName
    static readonly int ProfilingEventName_Offset;
    static readonly IntPtr ProfilingEventName_NativeProperty;
    
    public string ProfilingEventName
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,ProfilingEventName_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,ProfilingEventName_Offset),0,this,value);
        }
    }
    
    // Function /Script/Engine.SceneCaptureComponent:ShowOnlyComponent
    static readonly IntPtr ShowOnlyComponent_NativeFunction;
    static readonly int ShowOnlyComponent_ParamsSize;
    static readonly int ShowOnlyComponent_InComponent_Offset;
    
    public void ShowOnlyComponent(UnrealSharp.Engine.PrimitiveComponent inComponent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ShowOnlyComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative(IntPtr.Add(ParamsBuffer, ShowOnlyComponent_InComponent_Offset), 0, null, inComponent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ShowOnlyComponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SceneCaptureComponent:ShowOnlyActorComponents
    static readonly IntPtr ShowOnlyActorComponents_NativeFunction;
    static readonly int ShowOnlyActorComponents_ParamsSize;
    static readonly int ShowOnlyActorComponents_InActor_Offset;
    static readonly int ShowOnlyActorComponents_bIncludeFromChildActors_Offset;
    
    public void ShowOnlyActorComponents(UnrealSharp.Engine.Actor inActor, bool bIncludeFromChildActors = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ShowOnlyActorComponents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, ShowOnlyActorComponents_InActor_Offset), 0, null, inActor);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ShowOnlyActorComponents_bIncludeFromChildActors_Offset), 0, null, bIncludeFromChildActors);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ShowOnlyActorComponents_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SceneCaptureComponent:SetCaptureSortPriority
    static readonly IntPtr SetCaptureSortPriority_NativeFunction;
    static readonly int SetCaptureSortPriority_ParamsSize;
    static readonly int SetCaptureSortPriority_NewCaptureSortPriority_Offset;
    
    public void SetCaptureSortPriority(int newCaptureSortPriority)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCaptureSortPriority_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetCaptureSortPriority_NewCaptureSortPriority_Offset), 0, null, newCaptureSortPriority);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCaptureSortPriority_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SceneCaptureComponent:RemoveShowOnlyComponent
    static readonly IntPtr RemoveShowOnlyComponent_NativeFunction;
    static readonly int RemoveShowOnlyComponent_ParamsSize;
    static readonly int RemoveShowOnlyComponent_InComponent_Offset;
    
    public void RemoveShowOnlyComponent(UnrealSharp.Engine.PrimitiveComponent inComponent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveShowOnlyComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative(IntPtr.Add(ParamsBuffer, RemoveShowOnlyComponent_InComponent_Offset), 0, null, inComponent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveShowOnlyComponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SceneCaptureComponent:RemoveShowOnlyActorComponents
    static readonly IntPtr RemoveShowOnlyActorComponents_NativeFunction;
    static readonly int RemoveShowOnlyActorComponents_ParamsSize;
    static readonly int RemoveShowOnlyActorComponents_InActor_Offset;
    static readonly int RemoveShowOnlyActorComponents_bIncludeFromChildActors_Offset;
    
    public void RemoveShowOnlyActorComponents(UnrealSharp.Engine.Actor inActor, bool bIncludeFromChildActors = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveShowOnlyActorComponents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, RemoveShowOnlyActorComponents_InActor_Offset), 0, null, inActor);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, RemoveShowOnlyActorComponents_bIncludeFromChildActors_Offset), 0, null, bIncludeFromChildActors);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveShowOnlyActorComponents_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SceneCaptureComponent:HideComponent
    static readonly IntPtr HideComponent_NativeFunction;
    static readonly int HideComponent_ParamsSize;
    static readonly int HideComponent_InComponent_Offset;
    
    public void HideComponent(UnrealSharp.Engine.PrimitiveComponent inComponent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HideComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.ToNative(IntPtr.Add(ParamsBuffer, HideComponent_InComponent_Offset), 0, null, inComponent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HideComponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SceneCaptureComponent:HideActorComponents
    static readonly IntPtr HideActorComponents_NativeFunction;
    static readonly int HideActorComponents_ParamsSize;
    static readonly int HideActorComponents_InActor_Offset;
    static readonly int HideActorComponents_bIncludeFromChildActors_Offset;
    
    public void HideActorComponents(UnrealSharp.Engine.Actor inActor, bool bIncludeFromChildActors = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HideActorComponents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, HideActorComponents_InActor_Offset), 0, null, inActor);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, HideActorComponents_bIncludeFromChildActors_Offset), 0, null, bIncludeFromChildActors);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HideActorComponents_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SceneCaptureComponent:ClearShowOnlyComponents
    static readonly IntPtr ClearShowOnlyComponents_NativeFunction;
    
    public void ClearShowOnlyComponents()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearShowOnlyComponents_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.SceneCaptureComponent:ClearHiddenComponents
    static readonly IntPtr ClearHiddenComponents_NativeFunction;
    
    public void ClearHiddenComponents()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearHiddenComponents_NativeFunction, IntPtr.Zero);
        }
    }
    
    
}
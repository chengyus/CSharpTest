// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class SceneCaptureComponent2D : UnrealSharp.Engine.SceneCaptureComponent
{
    
    static SceneCaptureComponent2D()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SceneCaptureComponent2D");
        
        ProjectionType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ProjectionType");
        FOVAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FOVAngle");
        OrthoWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OrthoWidth");
        TextureTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TextureTarget");
        CompositeMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CompositeMode");
        PostProcessSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PostProcessSettings");
        PostProcessBlendWeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PostProcessBlendWeight");
        bOverride_CustomNearClippingPlane_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOverride_CustomNearClippingPlane");
        bOverride_CustomNearClippingPlane_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bOverride_CustomNearClippingPlane");
        CustomNearClippingPlane_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CustomNearClippingPlane");
        bUseCustomProjectionMatrix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseCustomProjectionMatrix");
        CustomProjectionMatrix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CustomProjectionMatrix");
        bUseFauxOrthoViewPos_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseFauxOrthoViewPos");
        bEnableOrthographicTiling_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableOrthographicTiling");
        NumXTiles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NumXTiles");
        NumYTiles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NumYTiles");
        bEnableClipPlane_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableClipPlane");
        ClipPlaneBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ClipPlaneBase");
        ClipPlaneNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ClipPlaneNormal");
        bCameraCutThisFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCameraCutThisFrame");
        bCameraCutThisFrame_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCameraCutThisFrame");
        bConsiderUnrenderedOpaquePixelAsFullyTranslucent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bConsiderUnrenderedOpaquePixelAsFullyTranslucent");
        bConsiderUnrenderedOpaquePixelAsFullyTranslucent_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bConsiderUnrenderedOpaquePixelAsFullyTranslucent");
        
        CaptureScene_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CaptureScene");
        
        
    }
    
    protected SceneCaptureComponent2D(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ByteProperty /Script/Engine.SceneCaptureComponent2D:ProjectionType
    static readonly int ProjectionType_Offset;
    
    public UnrealSharp.Engine.ECameraProjectionMode ProjectionType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ECameraProjectionMode>.FromNative(IntPtr.Add(NativeObject, ProjectionType_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.ECameraProjectionMode>.ToNative(IntPtr.Add(NativeObject, ProjectionType_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.SceneCaptureComponent2D:FOVAngle
    static readonly int FOVAngle_Offset;
    
    public float FOVAngle
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, FOVAngle_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, FOVAngle_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.SceneCaptureComponent2D:OrthoWidth
    static readonly int OrthoWidth_Offset;
    
    public float OrthoWidth
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, OrthoWidth_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, OrthoWidth_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/Engine.SceneCaptureComponent2D:TextureTarget
    static readonly int TextureTarget_Offset;
    
    public UnrealSharp.Engine.TextureRenderTarget2D TextureTarget
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.FromNative(IntPtr.Add(NativeObject, TextureTarget_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(NativeObject, TextureTarget_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/Engine.SceneCaptureComponent2D:CompositeMode
    static readonly int CompositeMode_Offset;
    
    public UnrealSharp.Engine.ESceneCaptureCompositeMode CompositeMode
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ESceneCaptureCompositeMode>.FromNative(IntPtr.Add(NativeObject, CompositeMode_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.ESceneCaptureCompositeMode>.ToNative(IntPtr.Add(NativeObject, CompositeMode_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.SceneCaptureComponent2D:PostProcessSettings
    static readonly int PostProcessSettings_Offset;
    
    public UnrealSharp.Engine.PostProcessSettings PostProcessSettings
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.PostProcessSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, PostProcessSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.Engine.PostProcessSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, PostProcessSettings_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.SceneCaptureComponent2D:PostProcessBlendWeight
    static readonly int PostProcessBlendWeight_Offset;
    
    public float PostProcessBlendWeight
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PostProcessBlendWeight_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PostProcessBlendWeight_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.SceneCaptureComponent2D:bOverride_CustomNearClippingPlane
    static readonly int bOverride_CustomNearClippingPlane_Offset;
    static readonly IntPtr bOverride_CustomNearClippingPlane_NativeProperty;
    
    public bool bOverride_CustomNearClippingPlane
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bOverride_CustomNearClippingPlane_NativeProperty, bOverride_CustomNearClippingPlane_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bOverride_CustomNearClippingPlane_NativeProperty, bOverride_CustomNearClippingPlane_Offset, value);
        }
    }
    
    // FloatProperty /Script/Engine.SceneCaptureComponent2D:CustomNearClippingPlane
    static readonly int CustomNearClippingPlane_Offset;
    
    public float CustomNearClippingPlane
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CustomNearClippingPlane_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, CustomNearClippingPlane_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.SceneCaptureComponent2D:bUseCustomProjectionMatrix
    static readonly int bUseCustomProjectionMatrix_Offset;
    
    public bool bUseCustomProjectionMatrix
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseCustomProjectionMatrix_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bUseCustomProjectionMatrix_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.SceneCaptureComponent2D:CustomProjectionMatrix
    static readonly int CustomProjectionMatrix_Offset;
    
    public System.DoubleNumerics.Matrix4x4 CustomProjectionMatrix
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.FromNative(IntPtr.Add(NativeObject, CustomProjectionMatrix_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(NativeObject, CustomProjectionMatrix_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.SceneCaptureComponent2D:bUseFauxOrthoViewPos
    static readonly int bUseFauxOrthoViewPos_Offset;
    
    public bool bUseFauxOrthoViewPos
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseFauxOrthoViewPos_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bUseFauxOrthoViewPos_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.SceneCaptureComponent2D:bEnableOrthographicTiling
    static readonly int bEnableOrthographicTiling_Offset;
    
    public bool bEnableOrthographicTiling
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bEnableOrthographicTiling_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bEnableOrthographicTiling_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.SceneCaptureComponent2D:NumXTiles
    static readonly int NumXTiles_Offset;
    
    public int NumXTiles
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, NumXTiles_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, NumXTiles_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.SceneCaptureComponent2D:NumYTiles
    static readonly int NumYTiles_Offset;
    
    public int NumYTiles
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, NumYTiles_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, NumYTiles_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.SceneCaptureComponent2D:bEnableClipPlane
    static readonly int bEnableClipPlane_Offset;
    
    public bool bEnableClipPlane
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bEnableClipPlane_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bEnableClipPlane_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.SceneCaptureComponent2D:ClipPlaneBase
    static readonly int ClipPlaneBase_Offset;
    
    public System.DoubleNumerics.Vector3 ClipPlaneBase
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, ClipPlaneBase_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, ClipPlaneBase_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.SceneCaptureComponent2D:ClipPlaneNormal
    static readonly int ClipPlaneNormal_Offset;
    
    public System.DoubleNumerics.Vector3 ClipPlaneNormal
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, ClipPlaneNormal_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, ClipPlaneNormal_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.SceneCaptureComponent2D:bCameraCutThisFrame
    static readonly int bCameraCutThisFrame_Offset;
    static readonly IntPtr bCameraCutThisFrame_NativeProperty;
    
    public bool bCameraCutThisFrame
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCameraCutThisFrame_NativeProperty, bCameraCutThisFrame_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bCameraCutThisFrame_NativeProperty, bCameraCutThisFrame_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.SceneCaptureComponent2D:bConsiderUnrenderedOpaquePixelAsFullyTranslucent
    static readonly int bConsiderUnrenderedOpaquePixelAsFullyTranslucent_Offset;
    static readonly IntPtr bConsiderUnrenderedOpaquePixelAsFullyTranslucent_NativeProperty;
    
    public bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bConsiderUnrenderedOpaquePixelAsFullyTranslucent_NativeProperty, bConsiderUnrenderedOpaquePixelAsFullyTranslucent_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bConsiderUnrenderedOpaquePixelAsFullyTranslucent_NativeProperty, bConsiderUnrenderedOpaquePixelAsFullyTranslucent_Offset, value);
        }
    }
    
    // Function /Script/Engine.SceneCaptureComponent2D:CaptureScene
    static readonly IntPtr CaptureScene_NativeFunction;
    
    public void CaptureScene()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CaptureScene_NativeFunction, IntPtr.Zero);
        }
    }
    
    
}
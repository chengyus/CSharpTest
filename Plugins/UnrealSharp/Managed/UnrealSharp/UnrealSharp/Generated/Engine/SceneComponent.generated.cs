// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class SceneComponent : UnrealSharp.Engine.ActorComponent
{
    
    static SceneComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SceneComponent");
        
        RelativeLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RelativeLocation");
        RelativeRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RelativeRotation");
        RelativeScale3D_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RelativeScale3D");
        bAbsoluteLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAbsoluteLocation");
        bAbsoluteLocation_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAbsoluteLocation");
        bAbsoluteRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAbsoluteRotation");
        bAbsoluteRotation_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAbsoluteRotation");
        bAbsoluteScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAbsoluteScale");
        bAbsoluteScale_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAbsoluteScale");
        bVisible_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bVisible");
        bVisible_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bVisible");
        bShouldUpdatePhysicsVolume_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bShouldUpdatePhysicsVolume");
        bShouldUpdatePhysicsVolume_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bShouldUpdatePhysicsVolume");
        bHiddenInGame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bHiddenInGame");
        bHiddenInGame_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bHiddenInGame");
        bUseAttachParentBound_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseAttachParentBound");
        bUseAttachParentBound_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseAttachParentBound");
        Mobility_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Mobility");
        DetailMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DetailMode");
        
        ToggleVisibility_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ToggleVisibility");
        ToggleVisibility_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ToggleVisibility_NativeFunction);
        ToggleVisibility_bPropagateToChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ToggleVisibility_NativeFunction, "bPropagateToChildren");
        SetWorldScale3D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWorldScale3D");
        SetWorldScale3D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWorldScale3D_NativeFunction);
        SetWorldScale3D_NewScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWorldScale3D_NativeFunction, "NewScale");
        SetVisibility_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVisibility");
        SetVisibility_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVisibility_NativeFunction);
        SetVisibility_bNewVisibility_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVisibility_NativeFunction, "bNewVisibility");
        SetVisibility_bPropagateToChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVisibility_NativeFunction, "bPropagateToChildren");
        SetRelativeScale3D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRelativeScale3D");
        SetRelativeScale3D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRelativeScale3D_NativeFunction);
        SetRelativeScale3D_NewScale3D_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRelativeScale3D_NativeFunction, "NewScale3D");
        SetMobility_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMobility");
        SetMobility_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMobility_NativeFunction);
        SetMobility_NewMobility_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMobility_NativeFunction, "NewMobility");
        SetHiddenInGame_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetHiddenInGame");
        SetHiddenInGame_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetHiddenInGame_NativeFunction);
        SetHiddenInGame_NewHidden_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetHiddenInGame_NativeFunction, "NewHidden");
        SetHiddenInGame_bPropagateToChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetHiddenInGame_NativeFunction, "bPropagateToChildren");
        SetAbsolute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAbsolute");
        SetAbsolute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAbsolute_NativeFunction);
        SetAbsolute_bNewAbsoluteLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAbsolute_NativeFunction, "bNewAbsoluteLocation");
        SetAbsolute_bNewAbsoluteRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAbsolute_NativeFunction, "bNewAbsoluteRotation");
        SetAbsolute_bNewAbsoluteScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAbsolute_NativeFunction, "bNewAbsoluteScale");
        ResetRelativeTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetRelativeTransform");
        K2_SetWorldTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_SetWorldTransform");
        K2_SetWorldTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_SetWorldTransform_NativeFunction);
        K2_SetWorldTransform_NewTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetWorldTransform_NativeFunction, "NewTransform");
        K2_SetWorldTransform_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetWorldTransform_NativeFunction, "bSweep");
        K2_SetWorldTransform_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetWorldTransform_NativeFunction, "SweepHitResult");
        K2_SetWorldTransform_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetWorldTransform_NativeFunction, "bTeleport");
        K2_SetWorldRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_SetWorldRotation");
        K2_SetWorldRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_SetWorldRotation_NativeFunction);
        K2_SetWorldRotation_NewRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetWorldRotation_NativeFunction, "NewRotation");
        K2_SetWorldRotation_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetWorldRotation_NativeFunction, "bSweep");
        K2_SetWorldRotation_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetWorldRotation_NativeFunction, "SweepHitResult");
        K2_SetWorldRotation_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetWorldRotation_NativeFunction, "bTeleport");
        K2_SetWorldLocationAndRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_SetWorldLocationAndRotation");
        K2_SetWorldLocationAndRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_SetWorldLocationAndRotation_NativeFunction);
        K2_SetWorldLocationAndRotation_NewLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetWorldLocationAndRotation_NativeFunction, "NewLocation");
        K2_SetWorldLocationAndRotation_NewRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetWorldLocationAndRotation_NativeFunction, "NewRotation");
        K2_SetWorldLocationAndRotation_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetWorldLocationAndRotation_NativeFunction, "bSweep");
        K2_SetWorldLocationAndRotation_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetWorldLocationAndRotation_NativeFunction, "SweepHitResult");
        K2_SetWorldLocationAndRotation_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetWorldLocationAndRotation_NativeFunction, "bTeleport");
        K2_SetWorldLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_SetWorldLocation");
        K2_SetWorldLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_SetWorldLocation_NativeFunction);
        K2_SetWorldLocation_NewLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetWorldLocation_NativeFunction, "NewLocation");
        K2_SetWorldLocation_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetWorldLocation_NativeFunction, "bSweep");
        K2_SetWorldLocation_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetWorldLocation_NativeFunction, "SweepHitResult");
        K2_SetWorldLocation_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetWorldLocation_NativeFunction, "bTeleport");
        K2_SetRelativeTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_SetRelativeTransform");
        K2_SetRelativeTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_SetRelativeTransform_NativeFunction);
        K2_SetRelativeTransform_NewTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetRelativeTransform_NativeFunction, "NewTransform");
        K2_SetRelativeTransform_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetRelativeTransform_NativeFunction, "bSweep");
        K2_SetRelativeTransform_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetRelativeTransform_NativeFunction, "SweepHitResult");
        K2_SetRelativeTransform_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetRelativeTransform_NativeFunction, "bTeleport");
        K2_SetRelativeRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_SetRelativeRotation");
        K2_SetRelativeRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_SetRelativeRotation_NativeFunction);
        K2_SetRelativeRotation_NewRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetRelativeRotation_NativeFunction, "NewRotation");
        K2_SetRelativeRotation_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetRelativeRotation_NativeFunction, "bSweep");
        K2_SetRelativeRotation_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetRelativeRotation_NativeFunction, "SweepHitResult");
        K2_SetRelativeRotation_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetRelativeRotation_NativeFunction, "bTeleport");
        K2_SetRelativeLocationAndRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_SetRelativeLocationAndRotation");
        K2_SetRelativeLocationAndRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_SetRelativeLocationAndRotation_NativeFunction);
        K2_SetRelativeLocationAndRotation_NewLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetRelativeLocationAndRotation_NativeFunction, "NewLocation");
        K2_SetRelativeLocationAndRotation_NewRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetRelativeLocationAndRotation_NativeFunction, "NewRotation");
        K2_SetRelativeLocationAndRotation_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetRelativeLocationAndRotation_NativeFunction, "bSweep");
        K2_SetRelativeLocationAndRotation_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetRelativeLocationAndRotation_NativeFunction, "SweepHitResult");
        K2_SetRelativeLocationAndRotation_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetRelativeLocationAndRotation_NativeFunction, "bTeleport");
        K2_SetRelativeLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_SetRelativeLocation");
        K2_SetRelativeLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_SetRelativeLocation_NativeFunction);
        K2_SetRelativeLocation_NewLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetRelativeLocation_NativeFunction, "NewLocation");
        K2_SetRelativeLocation_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetRelativeLocation_NativeFunction, "bSweep");
        K2_SetRelativeLocation_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetRelativeLocation_NativeFunction, "SweepHitResult");
        K2_SetRelativeLocation_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_SetRelativeLocation_NativeFunction, "bTeleport");
        K2_GetComponentToWorld_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_GetComponentToWorld");
        K2_GetComponentToWorld_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_GetComponentToWorld_NativeFunction);
        K2_GetComponentToWorld_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetComponentToWorld_NativeFunction, "ReturnValue");
        K2_GetComponentScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_GetComponentScale");
        K2_GetComponentScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_GetComponentScale_NativeFunction);
        K2_GetComponentScale_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetComponentScale_NativeFunction, "ReturnValue");
        K2_GetComponentRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_GetComponentRotation");
        K2_GetComponentRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_GetComponentRotation_NativeFunction);
        K2_GetComponentRotation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetComponentRotation_NativeFunction, "ReturnValue");
        K2_GetComponentLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_GetComponentLocation");
        K2_GetComponentLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_GetComponentLocation_NativeFunction);
        K2_GetComponentLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_GetComponentLocation_NativeFunction, "ReturnValue");
        K2_DetachFromComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_DetachFromComponent");
        K2_DetachFromComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_DetachFromComponent_NativeFunction);
        K2_DetachFromComponent_LocationRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DetachFromComponent_NativeFunction, "LocationRule");
        K2_DetachFromComponent_RotationRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DetachFromComponent_NativeFunction, "RotationRule");
        K2_DetachFromComponent_ScaleRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DetachFromComponent_NativeFunction, "ScaleRule");
        K2_DetachFromComponent_bCallModify_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_DetachFromComponent_NativeFunction, "bCallModify");
        K2_AttachToComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_AttachToComponent");
        K2_AttachToComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_AttachToComponent_NativeFunction);
        K2_AttachToComponent_Parent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachToComponent_NativeFunction, "Parent");
        K2_AttachToComponent_SocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachToComponent_NativeFunction, "SocketName");
        K2_AttachToComponent_LocationRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachToComponent_NativeFunction, "LocationRule");
        K2_AttachToComponent_RotationRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachToComponent_NativeFunction, "RotationRule");
        K2_AttachToComponent_ScaleRule_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachToComponent_NativeFunction, "ScaleRule");
        K2_AttachToComponent_bWeldSimulatedBodies_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachToComponent_NativeFunction, "bWeldSimulatedBodies");
        K2_AttachToComponent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachToComponent_NativeFunction, "ReturnValue");
        K2_AttachTo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_AttachTo");
        K2_AttachTo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_AttachTo_NativeFunction);
        K2_AttachTo_InParent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachTo_NativeFunction, "InParent");
        K2_AttachTo_InSocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachTo_NativeFunction, "InSocketName");
        K2_AttachTo_AttachType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachTo_NativeFunction, "AttachType");
        K2_AttachTo_bWeldSimulatedBodies_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachTo_NativeFunction, "bWeldSimulatedBodies");
        K2_AttachTo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AttachTo_NativeFunction, "ReturnValue");
        K2_AddWorldTransformKeepScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_AddWorldTransformKeepScale");
        K2_AddWorldTransformKeepScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_AddWorldTransformKeepScale_NativeFunction);
        K2_AddWorldTransformKeepScale_DeltaTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddWorldTransformKeepScale_NativeFunction, "DeltaTransform");
        K2_AddWorldTransformKeepScale_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddWorldTransformKeepScale_NativeFunction, "bSweep");
        K2_AddWorldTransformKeepScale_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddWorldTransformKeepScale_NativeFunction, "SweepHitResult");
        K2_AddWorldTransformKeepScale_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddWorldTransformKeepScale_NativeFunction, "bTeleport");
        K2_AddWorldTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_AddWorldTransform");
        K2_AddWorldTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_AddWorldTransform_NativeFunction);
        K2_AddWorldTransform_DeltaTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddWorldTransform_NativeFunction, "DeltaTransform");
        K2_AddWorldTransform_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddWorldTransform_NativeFunction, "bSweep");
        K2_AddWorldTransform_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddWorldTransform_NativeFunction, "SweepHitResult");
        K2_AddWorldTransform_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddWorldTransform_NativeFunction, "bTeleport");
        K2_AddWorldRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_AddWorldRotation");
        K2_AddWorldRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_AddWorldRotation_NativeFunction);
        K2_AddWorldRotation_DeltaRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddWorldRotation_NativeFunction, "DeltaRotation");
        K2_AddWorldRotation_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddWorldRotation_NativeFunction, "bSweep");
        K2_AddWorldRotation_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddWorldRotation_NativeFunction, "SweepHitResult");
        K2_AddWorldRotation_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddWorldRotation_NativeFunction, "bTeleport");
        K2_AddWorldOffset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_AddWorldOffset");
        K2_AddWorldOffset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_AddWorldOffset_NativeFunction);
        K2_AddWorldOffset_DeltaLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddWorldOffset_NativeFunction, "DeltaLocation");
        K2_AddWorldOffset_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddWorldOffset_NativeFunction, "bSweep");
        K2_AddWorldOffset_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddWorldOffset_NativeFunction, "SweepHitResult");
        K2_AddWorldOffset_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddWorldOffset_NativeFunction, "bTeleport");
        K2_AddRelativeRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_AddRelativeRotation");
        K2_AddRelativeRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_AddRelativeRotation_NativeFunction);
        K2_AddRelativeRotation_DeltaRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddRelativeRotation_NativeFunction, "DeltaRotation");
        K2_AddRelativeRotation_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddRelativeRotation_NativeFunction, "bSweep");
        K2_AddRelativeRotation_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddRelativeRotation_NativeFunction, "SweepHitResult");
        K2_AddRelativeRotation_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddRelativeRotation_NativeFunction, "bTeleport");
        K2_AddRelativeLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_AddRelativeLocation");
        K2_AddRelativeLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_AddRelativeLocation_NativeFunction);
        K2_AddRelativeLocation_DeltaLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddRelativeLocation_NativeFunction, "DeltaLocation");
        K2_AddRelativeLocation_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddRelativeLocation_NativeFunction, "bSweep");
        K2_AddRelativeLocation_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddRelativeLocation_NativeFunction, "SweepHitResult");
        K2_AddRelativeLocation_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddRelativeLocation_NativeFunction, "bTeleport");
        K2_AddLocalTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_AddLocalTransform");
        K2_AddLocalTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_AddLocalTransform_NativeFunction);
        K2_AddLocalTransform_DeltaTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddLocalTransform_NativeFunction, "DeltaTransform");
        K2_AddLocalTransform_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddLocalTransform_NativeFunction, "bSweep");
        K2_AddLocalTransform_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddLocalTransform_NativeFunction, "SweepHitResult");
        K2_AddLocalTransform_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddLocalTransform_NativeFunction, "bTeleport");
        K2_AddLocalRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_AddLocalRotation");
        K2_AddLocalRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_AddLocalRotation_NativeFunction);
        K2_AddLocalRotation_DeltaRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddLocalRotation_NativeFunction, "DeltaRotation");
        K2_AddLocalRotation_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddLocalRotation_NativeFunction, "bSweep");
        K2_AddLocalRotation_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddLocalRotation_NativeFunction, "SweepHitResult");
        K2_AddLocalRotation_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddLocalRotation_NativeFunction, "bTeleport");
        K2_AddLocalOffset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_AddLocalOffset");
        K2_AddLocalOffset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_AddLocalOffset_NativeFunction);
        K2_AddLocalOffset_DeltaLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddLocalOffset_NativeFunction, "DeltaLocation");
        K2_AddLocalOffset_bSweep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddLocalOffset_NativeFunction, "bSweep");
        K2_AddLocalOffset_SweepHitResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddLocalOffset_NativeFunction, "SweepHitResult");
        K2_AddLocalOffset_bTeleport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_AddLocalOffset_NativeFunction, "bTeleport");
        IsVisible_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsVisible");
        IsVisible_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsVisible_NativeFunction);
        IsVisible_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsVisible_NativeFunction, "ReturnValue");
        IsSimulatingPhysics_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsSimulatingPhysics");
        IsSimulatingPhysics_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsSimulatingPhysics_NativeFunction);
        IsSimulatingPhysics_BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSimulatingPhysics_NativeFunction, "BoneName");
        IsSimulatingPhysics_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSimulatingPhysics_NativeFunction, "ReturnValue");
        IsAnySimulatingPhysics_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsAnySimulatingPhysics");
        IsAnySimulatingPhysics_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsAnySimulatingPhysics_NativeFunction);
        IsAnySimulatingPhysics_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAnySimulatingPhysics_NativeFunction, "ReturnValue");
        GetUpVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetUpVector");
        GetUpVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetUpVector_NativeFunction);
        GetUpVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUpVector_NativeFunction, "ReturnValue");
        GetSocketTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSocketTransform");
        GetSocketTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSocketTransform_NativeFunction);
        GetSocketTransform_InSocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSocketTransform_NativeFunction, "InSocketName");
        GetSocketTransform_TransformSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSocketTransform_NativeFunction, "TransformSpace");
        GetSocketTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSocketTransform_NativeFunction, "ReturnValue");
        GetSocketRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSocketRotation");
        GetSocketRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSocketRotation_NativeFunction);
        GetSocketRotation_InSocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSocketRotation_NativeFunction, "InSocketName");
        GetSocketRotation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSocketRotation_NativeFunction, "ReturnValue");
        GetSocketQuaternion_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSocketQuaternion");
        GetSocketQuaternion_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSocketQuaternion_NativeFunction);
        GetSocketQuaternion_InSocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSocketQuaternion_NativeFunction, "InSocketName");
        GetSocketQuaternion_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSocketQuaternion_NativeFunction, "ReturnValue");
        GetSocketLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSocketLocation");
        GetSocketLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSocketLocation_NativeFunction);
        GetSocketLocation_InSocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSocketLocation_NativeFunction, "InSocketName");
        GetSocketLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSocketLocation_NativeFunction, "ReturnValue");
        GetRightVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRightVector");
        GetRightVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRightVector_NativeFunction);
        GetRightVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRightVector_NativeFunction, "ReturnValue");
        GetRelativeTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRelativeTransform");
        GetRelativeTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRelativeTransform_NativeFunction);
        GetRelativeTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRelativeTransform_NativeFunction, "ReturnValue");
        GetPhysicsVolume_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPhysicsVolume");
        GetPhysicsVolume_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPhysicsVolume_NativeFunction);
        GetPhysicsVolume_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPhysicsVolume_NativeFunction, "ReturnValue");
        GetParentComponents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetParentComponents");
        GetParentComponents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetParentComponents_NativeFunction);
        GetParentComponents_Parents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParentComponents_NativeFunction, "Parents");
        GetParentComponents_Parents_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetParentComponents_NativeFunction, "Parents");
        GetNumChildrenComponents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumChildrenComponents");
        GetNumChildrenComponents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumChildrenComponents_NativeFunction);
        GetNumChildrenComponents_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumChildrenComponents_NativeFunction, "ReturnValue");
        GetForwardVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetForwardVector");
        GetForwardVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetForwardVector_NativeFunction);
        GetForwardVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetForwardVector_NativeFunction, "ReturnValue");
        GetComponentVelocity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetComponentVelocity");
        GetComponentVelocity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetComponentVelocity_NativeFunction);
        GetComponentVelocity_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetComponentVelocity_NativeFunction, "ReturnValue");
        GetChildrenComponents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetChildrenComponents");
        GetChildrenComponents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetChildrenComponents_NativeFunction);
        GetChildrenComponents_bIncludeAllDescendants_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildrenComponents_NativeFunction, "bIncludeAllDescendants");
        GetChildrenComponents_Children_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildrenComponents_NativeFunction, "Children");
        GetChildrenComponents_Children_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetChildrenComponents_NativeFunction, "Children");
        GetChildComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetChildComponent");
        GetChildComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetChildComponent_NativeFunction);
        GetChildComponent_ChildIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildComponent_NativeFunction, "ChildIndex");
        GetChildComponent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildComponent_NativeFunction, "ReturnValue");
        GetAttachSocketName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAttachSocketName");
        GetAttachSocketName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAttachSocketName_NativeFunction);
        GetAttachSocketName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAttachSocketName_NativeFunction, "ReturnValue");
        GetAttachParent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAttachParent");
        GetAttachParent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAttachParent_NativeFunction);
        GetAttachParent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAttachParent_NativeFunction, "ReturnValue");
        GetAllSocketNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAllSocketNames");
        GetAllSocketNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAllSocketNames_NativeFunction);
        GetAllSocketNames_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAllSocketNames_NativeFunction, "ReturnValue");
        GetAllSocketNames_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetAllSocketNames_NativeFunction, "ReturnValue");
        DoesSocketExist_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DoesSocketExist");
        DoesSocketExist_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DoesSocketExist_NativeFunction);
        DoesSocketExist_InSocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesSocketExist_NativeFunction, "InSocketName");
        DoesSocketExist_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesSocketExist_NativeFunction, "ReturnValue");
        DetachFromParent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DetachFromParent");
        DetachFromParent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DetachFromParent_NativeFunction);
        DetachFromParent_bMaintainWorldPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DetachFromParent_NativeFunction, "bMaintainWorldPosition");
        DetachFromParent_bCallModify_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DetachFromParent_NativeFunction, "bCallModify");
        
        
    }
    
    protected SceneComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/Engine.SceneComponent:RelativeLocation
    static readonly int RelativeLocation_Offset;
    
    public System.DoubleNumerics.Vector3 RelativeLocation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, RelativeLocation_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.SceneComponent:RelativeRotation
    static readonly int RelativeRotation_Offset;
    
    public UnrealSharp.Rotator RelativeRotation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(NativeObject, RelativeRotation_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.SceneComponent:RelativeScale3D
    static readonly int RelativeScale3D_Offset;
    
    public System.DoubleNumerics.Vector3 RelativeScale3D
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, RelativeScale3D_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.SceneComponent:bAbsoluteLocation
    static readonly int bAbsoluteLocation_Offset;
    static readonly IntPtr bAbsoluteLocation_NativeProperty;
    
    public bool bAbsoluteLocation
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAbsoluteLocation_NativeProperty, bAbsoluteLocation_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bAbsoluteLocation_NativeProperty, bAbsoluteLocation_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.SceneComponent:bAbsoluteRotation
    static readonly int bAbsoluteRotation_Offset;
    static readonly IntPtr bAbsoluteRotation_NativeProperty;
    
    public bool bAbsoluteRotation
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAbsoluteRotation_NativeProperty, bAbsoluteRotation_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bAbsoluteRotation_NativeProperty, bAbsoluteRotation_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.SceneComponent:bAbsoluteScale
    static readonly int bAbsoluteScale_Offset;
    static readonly IntPtr bAbsoluteScale_NativeProperty;
    
    public bool bAbsoluteScale
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAbsoluteScale_NativeProperty, bAbsoluteScale_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bAbsoluteScale_NativeProperty, bAbsoluteScale_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.SceneComponent:bVisible
    static readonly int bVisible_Offset;
    static readonly IntPtr bVisible_NativeProperty;
    
    public bool bVisible
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bVisible_NativeProperty, bVisible_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.SceneComponent:bShouldUpdatePhysicsVolume
    static readonly int bShouldUpdatePhysicsVolume_Offset;
    static readonly IntPtr bShouldUpdatePhysicsVolume_NativeProperty;
    
    public bool bShouldUpdatePhysicsVolume
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bShouldUpdatePhysicsVolume_NativeProperty, bShouldUpdatePhysicsVolume_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bShouldUpdatePhysicsVolume_NativeProperty, bShouldUpdatePhysicsVolume_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.SceneComponent:bHiddenInGame
    static readonly int bHiddenInGame_Offset;
    static readonly IntPtr bHiddenInGame_NativeProperty;
    
    public bool bHiddenInGame
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bHiddenInGame_NativeProperty, bHiddenInGame_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.SceneComponent:bUseAttachParentBound
    static readonly int bUseAttachParentBound_Offset;
    static readonly IntPtr bUseAttachParentBound_NativeProperty;
    
    public bool bUseAttachParentBound
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseAttachParentBound_NativeProperty, bUseAttachParentBound_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bUseAttachParentBound_NativeProperty, bUseAttachParentBound_Offset, value);
        }
    }
    
    // ByteProperty /Script/Engine.SceneComponent:Mobility
    static readonly int Mobility_Offset;
    
    public UnrealSharp.Engine.EComponentMobility Mobility
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EComponentMobility>.FromNative(IntPtr.Add(NativeObject, Mobility_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/Engine.SceneComponent:DetailMode
    static readonly int DetailMode_Offset;
    
    public UnrealSharp.Engine.EDetailMode DetailMode
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EDetailMode>.FromNative(IntPtr.Add(NativeObject, DetailMode_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.SceneComponent:ToggleVisibility
    static readonly IntPtr ToggleVisibility_NativeFunction;
    static readonly int ToggleVisibility_ParamsSize;
    static readonly int ToggleVisibility_bPropagateToChildren_Offset;
    
    public void ToggleVisibility(bool bPropagateToChildren = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ToggleVisibility_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ToggleVisibility_bPropagateToChildren_Offset), 0, null, bPropagateToChildren);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ToggleVisibility_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:SetWorldScale3D
    static readonly IntPtr SetWorldScale3D_NativeFunction;
    static readonly int SetWorldScale3D_ParamsSize;
    static readonly int SetWorldScale3D_NewScale_Offset;
    
    public void SetWorldScale3D(System.DoubleNumerics.Vector3 newScale)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWorldScale3D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetWorldScale3D_NewScale_Offset), 0, null, newScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetWorldScale3D_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:SetVisibility
    static readonly IntPtr SetVisibility_NativeFunction;
    static readonly int SetVisibility_ParamsSize;
    static readonly int SetVisibility_bNewVisibility_Offset;
    static readonly int SetVisibility_bPropagateToChildren_Offset;
    
    public void SetVisibility(bool bNewVisibility, bool bPropagateToChildren = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVisibility_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetVisibility_bNewVisibility_Offset), 0, null, bNewVisibility);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetVisibility_bPropagateToChildren_Offset), 0, null, bPropagateToChildren);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVisibility_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:SetRelativeScale3D
    static readonly IntPtr SetRelativeScale3D_NativeFunction;
    static readonly int SetRelativeScale3D_ParamsSize;
    static readonly int SetRelativeScale3D_NewScale3D_Offset;
    
    public void SetRelativeScale3D(System.DoubleNumerics.Vector3 newScale3D)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRelativeScale3D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetRelativeScale3D_NewScale3D_Offset), 0, null, newScale3D);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRelativeScale3D_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:SetMobility
    static readonly IntPtr SetMobility_NativeFunction;
    static readonly int SetMobility_ParamsSize;
    static readonly int SetMobility_NewMobility_Offset;
    
    public void SetMobility(UnrealSharp.Engine.EComponentMobility newMobility)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMobility_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EComponentMobility>.ToNative(IntPtr.Add(ParamsBuffer, SetMobility_NewMobility_Offset), 0, null, newMobility);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMobility_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:SetHiddenInGame
    static readonly IntPtr SetHiddenInGame_NativeFunction;
    static readonly int SetHiddenInGame_ParamsSize;
    static readonly int SetHiddenInGame_NewHidden_Offset;
    static readonly int SetHiddenInGame_bPropagateToChildren_Offset;
    
    public void SetHiddenInGame(bool newHidden, bool bPropagateToChildren = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetHiddenInGame_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetHiddenInGame_NewHidden_Offset), 0, null, newHidden);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetHiddenInGame_bPropagateToChildren_Offset), 0, null, bPropagateToChildren);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetHiddenInGame_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:SetAbsolute
    static readonly IntPtr SetAbsolute_NativeFunction;
    static readonly int SetAbsolute_ParamsSize;
    static readonly int SetAbsolute_bNewAbsoluteLocation_Offset;
    static readonly int SetAbsolute_bNewAbsoluteRotation_Offset;
    static readonly int SetAbsolute_bNewAbsoluteScale_Offset;
    
    public void SetAbsolute(bool bNewAbsoluteLocation = false, bool bNewAbsoluteRotation = false, bool bNewAbsoluteScale = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAbsolute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAbsolute_bNewAbsoluteLocation_Offset), 0, null, bNewAbsoluteLocation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAbsolute_bNewAbsoluteRotation_Offset), 0, null, bNewAbsoluteRotation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAbsolute_bNewAbsoluteScale_Offset), 0, null, bNewAbsoluteScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAbsolute_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:ResetRelativeTransform
    static readonly IntPtr ResetRelativeTransform_NativeFunction;
    
    public void ResetRelativeTransform()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetRelativeTransform_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_SetWorldTransform
    static readonly IntPtr K2_SetWorldTransform_NativeFunction;
    static readonly int K2_SetWorldTransform_ParamsSize;
    static readonly int K2_SetWorldTransform_NewTransform_Offset;
    static readonly int K2_SetWorldTransform_bSweep_Offset;
    static readonly int K2_SetWorldTransform_SweepHitResult_Offset;
    static readonly int K2_SetWorldTransform_bTeleport_Offset;
    
    public void SetWorldTransform(UnrealSharp.Transform newTransform, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_SetWorldTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetWorldTransform_NewTransform_Offset), 0, null, newTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetWorldTransform_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetWorldTransform_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_SetWorldTransform_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_SetWorldTransform_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_SetWorldRotation
    static readonly IntPtr K2_SetWorldRotation_NativeFunction;
    static readonly int K2_SetWorldRotation_ParamsSize;
    static readonly int K2_SetWorldRotation_NewRotation_Offset;
    static readonly int K2_SetWorldRotation_bSweep_Offset;
    static readonly int K2_SetWorldRotation_SweepHitResult_Offset;
    static readonly int K2_SetWorldRotation_bTeleport_Offset;
    
    public void SetWorldRotation(UnrealSharp.Rotator newRotation, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_SetWorldRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetWorldRotation_NewRotation_Offset), 0, null, newRotation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetWorldRotation_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetWorldRotation_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_SetWorldRotation_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_SetWorldRotation_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_SetWorldLocationAndRotation
    static readonly IntPtr K2_SetWorldLocationAndRotation_NativeFunction;
    static readonly int K2_SetWorldLocationAndRotation_ParamsSize;
    static readonly int K2_SetWorldLocationAndRotation_NewLocation_Offset;
    static readonly int K2_SetWorldLocationAndRotation_NewRotation_Offset;
    static readonly int K2_SetWorldLocationAndRotation_bSweep_Offset;
    static readonly int K2_SetWorldLocationAndRotation_SweepHitResult_Offset;
    static readonly int K2_SetWorldLocationAndRotation_bTeleport_Offset;
    
    public void SetWorldLocationAndRotation(System.DoubleNumerics.Vector3 newLocation, UnrealSharp.Rotator newRotation, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_SetWorldLocationAndRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetWorldLocationAndRotation_NewLocation_Offset), 0, null, newLocation);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetWorldLocationAndRotation_NewRotation_Offset), 0, null, newRotation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetWorldLocationAndRotation_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetWorldLocationAndRotation_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_SetWorldLocationAndRotation_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_SetWorldLocationAndRotation_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_SetWorldLocation
    static readonly IntPtr K2_SetWorldLocation_NativeFunction;
    static readonly int K2_SetWorldLocation_ParamsSize;
    static readonly int K2_SetWorldLocation_NewLocation_Offset;
    static readonly int K2_SetWorldLocation_bSweep_Offset;
    static readonly int K2_SetWorldLocation_SweepHitResult_Offset;
    static readonly int K2_SetWorldLocation_bTeleport_Offset;
    
    public void SetWorldLocation(System.DoubleNumerics.Vector3 newLocation, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_SetWorldLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetWorldLocation_NewLocation_Offset), 0, null, newLocation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetWorldLocation_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetWorldLocation_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_SetWorldLocation_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_SetWorldLocation_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_SetRelativeTransform
    static readonly IntPtr K2_SetRelativeTransform_NativeFunction;
    static readonly int K2_SetRelativeTransform_ParamsSize;
    static readonly int K2_SetRelativeTransform_NewTransform_Offset;
    static readonly int K2_SetRelativeTransform_bSweep_Offset;
    static readonly int K2_SetRelativeTransform_SweepHitResult_Offset;
    static readonly int K2_SetRelativeTransform_bTeleport_Offset;
    
    public void SetRelativeTransform(UnrealSharp.Transform newTransform, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_SetRelativeTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetRelativeTransform_NewTransform_Offset), 0, null, newTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetRelativeTransform_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetRelativeTransform_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_SetRelativeTransform_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_SetRelativeTransform_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_SetRelativeRotation
    static readonly IntPtr K2_SetRelativeRotation_NativeFunction;
    static readonly int K2_SetRelativeRotation_ParamsSize;
    static readonly int K2_SetRelativeRotation_NewRotation_Offset;
    static readonly int K2_SetRelativeRotation_bSweep_Offset;
    static readonly int K2_SetRelativeRotation_SweepHitResult_Offset;
    static readonly int K2_SetRelativeRotation_bTeleport_Offset;
    
    public void SetRelativeRotation(UnrealSharp.Rotator newRotation, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_SetRelativeRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetRelativeRotation_NewRotation_Offset), 0, null, newRotation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetRelativeRotation_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetRelativeRotation_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_SetRelativeRotation_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_SetRelativeRotation_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_SetRelativeLocationAndRotation
    static readonly IntPtr K2_SetRelativeLocationAndRotation_NativeFunction;
    static readonly int K2_SetRelativeLocationAndRotation_ParamsSize;
    static readonly int K2_SetRelativeLocationAndRotation_NewLocation_Offset;
    static readonly int K2_SetRelativeLocationAndRotation_NewRotation_Offset;
    static readonly int K2_SetRelativeLocationAndRotation_bSweep_Offset;
    static readonly int K2_SetRelativeLocationAndRotation_SweepHitResult_Offset;
    static readonly int K2_SetRelativeLocationAndRotation_bTeleport_Offset;
    
    public void SetRelativeLocationAndRotation(System.DoubleNumerics.Vector3 newLocation, UnrealSharp.Rotator newRotation, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_SetRelativeLocationAndRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetRelativeLocationAndRotation_NewLocation_Offset), 0, null, newLocation);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetRelativeLocationAndRotation_NewRotation_Offset), 0, null, newRotation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetRelativeLocationAndRotation_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetRelativeLocationAndRotation_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_SetRelativeLocationAndRotation_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_SetRelativeLocationAndRotation_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_SetRelativeLocation
    static readonly IntPtr K2_SetRelativeLocation_NativeFunction;
    static readonly int K2_SetRelativeLocation_ParamsSize;
    static readonly int K2_SetRelativeLocation_NewLocation_Offset;
    static readonly int K2_SetRelativeLocation_bSweep_Offset;
    static readonly int K2_SetRelativeLocation_SweepHitResult_Offset;
    static readonly int K2_SetRelativeLocation_bTeleport_Offset;
    
    public void SetRelativeLocation(System.DoubleNumerics.Vector3 newLocation, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_SetRelativeLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_SetRelativeLocation_NewLocation_Offset), 0, null, newLocation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetRelativeLocation_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_SetRelativeLocation_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_SetRelativeLocation_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_SetRelativeLocation_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_GetComponentToWorld
    static readonly IntPtr K2_GetComponentToWorld_NativeFunction;
    static readonly int K2_GetComponentToWorld_ParamsSize;
    static readonly int K2_GetComponentToWorld_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetWorldTransform()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_GetComponentToWorld_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_GetComponentToWorld_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, K2_GetComponentToWorld_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_GetComponentScale
    static readonly IntPtr K2_GetComponentScale_NativeFunction;
    static readonly int K2_GetComponentScale_ParamsSize;
    static readonly int K2_GetComponentScale_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetWorldScale()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_GetComponentScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_GetComponentScale_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, K2_GetComponentScale_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_GetComponentRotation
    static readonly IntPtr K2_GetComponentRotation_NativeFunction;
    static readonly int K2_GetComponentRotation_ParamsSize;
    static readonly int K2_GetComponentRotation_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetWorldRotation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_GetComponentRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_GetComponentRotation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, K2_GetComponentRotation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_GetComponentLocation
    static readonly IntPtr K2_GetComponentLocation_NativeFunction;
    static readonly int K2_GetComponentLocation_ParamsSize;
    static readonly int K2_GetComponentLocation_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetWorldLocation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_GetComponentLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_GetComponentLocation_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, K2_GetComponentLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_DetachFromComponent
    static readonly IntPtr K2_DetachFromComponent_NativeFunction;
    static readonly int K2_DetachFromComponent_ParamsSize;
    static readonly int K2_DetachFromComponent_LocationRule_Offset;
    static readonly int K2_DetachFromComponent_RotationRule_Offset;
    static readonly int K2_DetachFromComponent_ScaleRule_Offset;
    static readonly int K2_DetachFromComponent_bCallModify_Offset;
    
    public void DetachFromComponent(UnrealSharp.Engine.EDetachmentRule locationRule = UnrealSharp.Engine.EDetachmentRule.KeepRelative, UnrealSharp.Engine.EDetachmentRule rotationRule = UnrealSharp.Engine.EDetachmentRule.KeepRelative, UnrealSharp.Engine.EDetachmentRule scaleRule = UnrealSharp.Engine.EDetachmentRule.KeepRelative, bool bCallModify = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_DetachFromComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EDetachmentRule>.ToNative(IntPtr.Add(ParamsBuffer, K2_DetachFromComponent_LocationRule_Offset), 0, null, locationRule);
            BlittableMarshaller<UnrealSharp.Engine.EDetachmentRule>.ToNative(IntPtr.Add(ParamsBuffer, K2_DetachFromComponent_RotationRule_Offset), 0, null, rotationRule);
            BlittableMarshaller<UnrealSharp.Engine.EDetachmentRule>.ToNative(IntPtr.Add(ParamsBuffer, K2_DetachFromComponent_ScaleRule_Offset), 0, null, scaleRule);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_DetachFromComponent_bCallModify_Offset), 0, null, bCallModify);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_DetachFromComponent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_AttachToComponent
    static readonly IntPtr K2_AttachToComponent_NativeFunction;
    static readonly int K2_AttachToComponent_ParamsSize;
    static readonly int K2_AttachToComponent_Parent_Offset;
    static readonly int K2_AttachToComponent_SocketName_Offset;
    static readonly int K2_AttachToComponent_LocationRule_Offset;
    static readonly int K2_AttachToComponent_RotationRule_Offset;
    static readonly int K2_AttachToComponent_ScaleRule_Offset;
    static readonly int K2_AttachToComponent_bWeldSimulatedBodies_Offset;
    static readonly int K2_AttachToComponent_ReturnValue_Offset;
    
    public bool AttachToComponent(UnrealSharp.Engine.SceneComponent parent, Name socketName, UnrealSharp.Engine.EAttachmentRule locationRule, UnrealSharp.Engine.EAttachmentRule rotationRule, UnrealSharp.Engine.EAttachmentRule scaleRule, bool bWeldSimulatedBodies)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_AttachToComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachToComponent_Parent_Offset), 0, null, parent);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachToComponent_SocketName_Offset), 0, null, socketName);
            BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachToComponent_LocationRule_Offset), 0, null, locationRule);
            BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachToComponent_RotationRule_Offset), 0, null, rotationRule);
            BlittableMarshaller<UnrealSharp.Engine.EAttachmentRule>.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachToComponent_ScaleRule_Offset), 0, null, scaleRule);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachToComponent_bWeldSimulatedBodies_Offset), 0, null, bWeldSimulatedBodies);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_AttachToComponent_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_AttachToComponent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_AttachTo
    static readonly IntPtr K2_AttachTo_NativeFunction;
    static readonly int K2_AttachTo_ParamsSize;
    static readonly int K2_AttachTo_InParent_Offset;
    static readonly int K2_AttachTo_InSocketName_Offset;
    static readonly int K2_AttachTo_AttachType_Offset;
    static readonly int K2_AttachTo_bWeldSimulatedBodies_Offset;
    static readonly int K2_AttachTo_ReturnValue_Offset;
    
    public bool K2_AttachTo(UnrealSharp.Engine.SceneComponent inParent, Name inSocketName = default(Name), UnrealSharp.Engine.EAttachLocation attachType = UnrealSharp.Engine.EAttachLocation.KeepRelativeOffset, bool bWeldSimulatedBodies = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_AttachTo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachTo_InParent_Offset), 0, null, inParent);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachTo_InSocketName_Offset), 0, null, inSocketName);
            BlittableMarshaller<UnrealSharp.Engine.EAttachLocation>.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachTo_AttachType_Offset), 0, null, attachType);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AttachTo_bWeldSimulatedBodies_Offset), 0, null, bWeldSimulatedBodies);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_AttachTo_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, K2_AttachTo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_AddWorldTransformKeepScale
    static readonly IntPtr K2_AddWorldTransformKeepScale_NativeFunction;
    static readonly int K2_AddWorldTransformKeepScale_ParamsSize;
    static readonly int K2_AddWorldTransformKeepScale_DeltaTransform_Offset;
    static readonly int K2_AddWorldTransformKeepScale_bSweep_Offset;
    static readonly int K2_AddWorldTransformKeepScale_SweepHitResult_Offset;
    static readonly int K2_AddWorldTransformKeepScale_bTeleport_Offset;
    
    public void AddWorldTransformKeepScale(UnrealSharp.Transform deltaTransform, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_AddWorldTransformKeepScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, K2_AddWorldTransformKeepScale_DeltaTransform_Offset), 0, null, deltaTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddWorldTransformKeepScale_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddWorldTransformKeepScale_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_AddWorldTransformKeepScale_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_AddWorldTransformKeepScale_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_AddWorldTransform
    static readonly IntPtr K2_AddWorldTransform_NativeFunction;
    static readonly int K2_AddWorldTransform_ParamsSize;
    static readonly int K2_AddWorldTransform_DeltaTransform_Offset;
    static readonly int K2_AddWorldTransform_bSweep_Offset;
    static readonly int K2_AddWorldTransform_SweepHitResult_Offset;
    static readonly int K2_AddWorldTransform_bTeleport_Offset;
    
    public void AddWorldTransform(UnrealSharp.Transform deltaTransform, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_AddWorldTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, K2_AddWorldTransform_DeltaTransform_Offset), 0, null, deltaTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddWorldTransform_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddWorldTransform_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_AddWorldTransform_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_AddWorldTransform_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_AddWorldRotation
    static readonly IntPtr K2_AddWorldRotation_NativeFunction;
    static readonly int K2_AddWorldRotation_ParamsSize;
    static readonly int K2_AddWorldRotation_DeltaRotation_Offset;
    static readonly int K2_AddWorldRotation_bSweep_Offset;
    static readonly int K2_AddWorldRotation_SweepHitResult_Offset;
    static readonly int K2_AddWorldRotation_bTeleport_Offset;
    
    public void AddWorldRotation(UnrealSharp.Rotator deltaRotation, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_AddWorldRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, K2_AddWorldRotation_DeltaRotation_Offset), 0, null, deltaRotation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddWorldRotation_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddWorldRotation_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_AddWorldRotation_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_AddWorldRotation_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_AddWorldOffset
    static readonly IntPtr K2_AddWorldOffset_NativeFunction;
    static readonly int K2_AddWorldOffset_ParamsSize;
    static readonly int K2_AddWorldOffset_DeltaLocation_Offset;
    static readonly int K2_AddWorldOffset_bSweep_Offset;
    static readonly int K2_AddWorldOffset_SweepHitResult_Offset;
    static readonly int K2_AddWorldOffset_bTeleport_Offset;
    
    public void AddWorldOffset(System.DoubleNumerics.Vector3 deltaLocation, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_AddWorldOffset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_AddWorldOffset_DeltaLocation_Offset), 0, null, deltaLocation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddWorldOffset_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddWorldOffset_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_AddWorldOffset_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_AddWorldOffset_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_AddRelativeRotation
    static readonly IntPtr K2_AddRelativeRotation_NativeFunction;
    static readonly int K2_AddRelativeRotation_ParamsSize;
    static readonly int K2_AddRelativeRotation_DeltaRotation_Offset;
    static readonly int K2_AddRelativeRotation_bSweep_Offset;
    static readonly int K2_AddRelativeRotation_SweepHitResult_Offset;
    static readonly int K2_AddRelativeRotation_bTeleport_Offset;
    
    public void AddRelativeRotation(UnrealSharp.Rotator deltaRotation, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_AddRelativeRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, K2_AddRelativeRotation_DeltaRotation_Offset), 0, null, deltaRotation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddRelativeRotation_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddRelativeRotation_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_AddRelativeRotation_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_AddRelativeRotation_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_AddRelativeLocation
    static readonly IntPtr K2_AddRelativeLocation_NativeFunction;
    static readonly int K2_AddRelativeLocation_ParamsSize;
    static readonly int K2_AddRelativeLocation_DeltaLocation_Offset;
    static readonly int K2_AddRelativeLocation_bSweep_Offset;
    static readonly int K2_AddRelativeLocation_SweepHitResult_Offset;
    static readonly int K2_AddRelativeLocation_bTeleport_Offset;
    
    public void AddRelativeLocation(System.DoubleNumerics.Vector3 deltaLocation, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_AddRelativeLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_AddRelativeLocation_DeltaLocation_Offset), 0, null, deltaLocation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddRelativeLocation_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddRelativeLocation_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_AddRelativeLocation_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_AddRelativeLocation_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_AddLocalTransform
    static readonly IntPtr K2_AddLocalTransform_NativeFunction;
    static readonly int K2_AddLocalTransform_ParamsSize;
    static readonly int K2_AddLocalTransform_DeltaTransform_Offset;
    static readonly int K2_AddLocalTransform_bSweep_Offset;
    static readonly int K2_AddLocalTransform_SweepHitResult_Offset;
    static readonly int K2_AddLocalTransform_bTeleport_Offset;
    
    public void AddLocalTransform(UnrealSharp.Transform deltaTransform, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_AddLocalTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, K2_AddLocalTransform_DeltaTransform_Offset), 0, null, deltaTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddLocalTransform_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddLocalTransform_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_AddLocalTransform_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_AddLocalTransform_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_AddLocalRotation
    static readonly IntPtr K2_AddLocalRotation_NativeFunction;
    static readonly int K2_AddLocalRotation_ParamsSize;
    static readonly int K2_AddLocalRotation_DeltaRotation_Offset;
    static readonly int K2_AddLocalRotation_bSweep_Offset;
    static readonly int K2_AddLocalRotation_SweepHitResult_Offset;
    static readonly int K2_AddLocalRotation_bTeleport_Offset;
    
    public void AddLocalRotation(UnrealSharp.Rotator deltaRotation, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_AddLocalRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, K2_AddLocalRotation_DeltaRotation_Offset), 0, null, deltaRotation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddLocalRotation_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddLocalRotation_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_AddLocalRotation_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_AddLocalRotation_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:K2_AddLocalOffset
    static readonly IntPtr K2_AddLocalOffset_NativeFunction;
    static readonly int K2_AddLocalOffset_ParamsSize;
    static readonly int K2_AddLocalOffset_DeltaLocation_Offset;
    static readonly int K2_AddLocalOffset_bSweep_Offset;
    static readonly int K2_AddLocalOffset_SweepHitResult_Offset;
    static readonly int K2_AddLocalOffset_bTeleport_Offset;
    
    public void AddLocalOffset(System.DoubleNumerics.Vector3 deltaLocation, bool bSweep, out UnrealSharp.Engine.HitResult sweepHitResult, bool bTeleport)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_AddLocalOffset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, K2_AddLocalOffset_DeltaLocation_Offset), 0, null, deltaLocation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddLocalOffset_bSweep_Offset), 0, null, bSweep);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, K2_AddLocalOffset_bTeleport_Offset), 0, null, bTeleport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_AddLocalOffset_NativeFunction, ParamsBuffer);
            
            sweepHitResult = UnrealSharp.Engine.HitResultMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_AddLocalOffset_SweepHitResult_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:IsVisible
    static readonly IntPtr IsVisible_NativeFunction;
    static readonly int IsVisible_ParamsSize;
    static readonly int IsVisible_ReturnValue_Offset;
    
    public bool IsVisible()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsVisible_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsVisible_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsVisible_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:IsSimulatingPhysics
    static readonly IntPtr IsSimulatingPhysics_NativeFunction;
    static readonly int IsSimulatingPhysics_ParamsSize;
    static readonly int IsSimulatingPhysics_BoneName_Offset;
    static readonly int IsSimulatingPhysics_ReturnValue_Offset;
    
    public bool IsSimulatingPhysics(Name boneName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsSimulatingPhysics_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, IsSimulatingPhysics_BoneName_Offset), 0, null, boneName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsSimulatingPhysics_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsSimulatingPhysics_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:IsAnySimulatingPhysics
    static readonly IntPtr IsAnySimulatingPhysics_NativeFunction;
    static readonly int IsAnySimulatingPhysics_ParamsSize;
    static readonly int IsAnySimulatingPhysics_ReturnValue_Offset;
    
    public bool IsAnySimulatingPhysics()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsAnySimulatingPhysics_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsAnySimulatingPhysics_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsAnySimulatingPhysics_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:GetUpVector
    static readonly IntPtr GetUpVector_NativeFunction;
    static readonly int GetUpVector_ParamsSize;
    static readonly int GetUpVector_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetUpVector()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetUpVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetUpVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetUpVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:GetSocketTransform
    static readonly IntPtr GetSocketTransform_NativeFunction;
    static readonly int GetSocketTransform_ParamsSize;
    static readonly int GetSocketTransform_InSocketName_Offset;
    static readonly int GetSocketTransform_TransformSpace_Offset;
    static readonly int GetSocketTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetSocketTransform(Name inSocketName, UnrealSharp.Engine.ERelativeTransformSpace transformSpace = UnrealSharp.Engine.ERelativeTransformSpace.RTS_World)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSocketTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetSocketTransform_InSocketName_Offset), 0, null, inSocketName);
            BlittableMarshaller<UnrealSharp.Engine.ERelativeTransformSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetSocketTransform_TransformSpace_Offset), 0, null, transformSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSocketTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetSocketTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:GetSocketRotation
    static readonly IntPtr GetSocketRotation_NativeFunction;
    static readonly int GetSocketRotation_ParamsSize;
    static readonly int GetSocketRotation_InSocketName_Offset;
    static readonly int GetSocketRotation_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetSocketRotation(Name inSocketName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSocketRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetSocketRotation_InSocketName_Offset), 0, null, inSocketName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSocketRotation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetSocketRotation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:GetSocketQuaternion
    static readonly IntPtr GetSocketQuaternion_NativeFunction;
    static readonly int GetSocketQuaternion_ParamsSize;
    static readonly int GetSocketQuaternion_InSocketName_Offset;
    static readonly int GetSocketQuaternion_ReturnValue_Offset;
    
    [Obsolete("Use GetSocketRotation instead, Quat is not fully supported in blueprints.")]
    public System.DoubleNumerics.Quaternion GetSocketQuaternion(Name inSocketName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSocketQuaternion_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetSocketQuaternion_InSocketName_Offset), 0, null, inSocketName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSocketQuaternion_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Quaternion returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Quaternion>.FromNative(IntPtr.Add(ParamsBuffer, GetSocketQuaternion_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:GetSocketLocation
    static readonly IntPtr GetSocketLocation_NativeFunction;
    static readonly int GetSocketLocation_ParamsSize;
    static readonly int GetSocketLocation_InSocketName_Offset;
    static readonly int GetSocketLocation_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetSocketLocation(Name inSocketName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSocketLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetSocketLocation_InSocketName_Offset), 0, null, inSocketName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSocketLocation_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetSocketLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:GetRightVector
    static readonly IntPtr GetRightVector_NativeFunction;
    static readonly int GetRightVector_ParamsSize;
    static readonly int GetRightVector_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetRightVector()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRightVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRightVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetRightVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:GetRelativeTransform
    static readonly IntPtr GetRelativeTransform_NativeFunction;
    static readonly int GetRelativeTransform_ParamsSize;
    static readonly int GetRelativeTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetRelativeTransform()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRelativeTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRelativeTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetRelativeTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:GetPhysicsVolume
    static readonly IntPtr GetPhysicsVolume_NativeFunction;
    static readonly int GetPhysicsVolume_ParamsSize;
    static readonly int GetPhysicsVolume_ReturnValue_Offset;
    
    public UnrealSharp.Engine.PhysicsVolume GetPhysicsVolume()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPhysicsVolume_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPhysicsVolume_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.PhysicsVolume returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.PhysicsVolume>.FromNative(IntPtr.Add(ParamsBuffer, GetPhysicsVolume_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:GetParentComponents
    static readonly IntPtr GetParentComponents_NativeFunction;
    static readonly int GetParentComponents_ParamsSize;
    static readonly int GetParentComponents_Parents_Offset;
    static readonly int GetParentComponents_Parents_ElementSize;
    
    public void GetParentComponents(out System.Collections.Generic.IList<UnrealSharp.Engine.SceneComponent> parents)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetParentComponents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetParentComponents_NativeFunction, ParamsBuffer);
            
            IntPtr Parents_NativeBuffer = IntPtr.Add(ParamsBuffer, GetParentComponents_Parents_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.SceneComponent> Parents_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.SceneComponent> (1, ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.ToNative, ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.FromNative, GetParentComponents_Parents_ElementSize);
            parents = Parents_Marshaler.FromNative(Parents_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.SceneComponent>.DestructInstance(Parents_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:GetNumChildrenComponents
    static readonly IntPtr GetNumChildrenComponents_NativeFunction;
    static readonly int GetNumChildrenComponents_ParamsSize;
    static readonly int GetNumChildrenComponents_ReturnValue_Offset;
    
    public int GetNumChildrenComponents()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumChildrenComponents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumChildrenComponents_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumChildrenComponents_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:GetForwardVector
    static readonly IntPtr GetForwardVector_NativeFunction;
    static readonly int GetForwardVector_ParamsSize;
    static readonly int GetForwardVector_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetForwardVector()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetForwardVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetForwardVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetForwardVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:GetComponentVelocity
    static readonly IntPtr GetComponentVelocity_NativeFunction;
    static readonly int GetComponentVelocity_ParamsSize;
    static readonly int GetComponentVelocity_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetComponentVelocity()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetComponentVelocity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetComponentVelocity_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetComponentVelocity_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:GetChildrenComponents
    static readonly IntPtr GetChildrenComponents_NativeFunction;
    static readonly int GetChildrenComponents_ParamsSize;
    static readonly int GetChildrenComponents_bIncludeAllDescendants_Offset;
    static readonly int GetChildrenComponents_Children_Offset;
    static readonly int GetChildrenComponents_Children_ElementSize;
    
    public void GetChildrenComponents(bool bIncludeAllDescendants, out System.Collections.Generic.IList<UnrealSharp.Engine.SceneComponent> children)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetChildrenComponents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetChildrenComponents_bIncludeAllDescendants_Offset), 0, null, bIncludeAllDescendants);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetChildrenComponents_NativeFunction, ParamsBuffer);
            
            IntPtr Children_NativeBuffer = IntPtr.Add(ParamsBuffer, GetChildrenComponents_Children_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.SceneComponent> Children_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.SceneComponent> (1, ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.ToNative, ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.FromNative, GetChildrenComponents_Children_ElementSize);
            children = Children_Marshaler.FromNative(Children_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.SceneComponent>.DestructInstance(Children_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Engine.SceneComponent:GetChildComponent
    static readonly IntPtr GetChildComponent_NativeFunction;
    static readonly int GetChildComponent_ParamsSize;
    static readonly int GetChildComponent_ChildIndex_Offset;
    static readonly int GetChildComponent_ReturnValue_Offset;
    
    public UnrealSharp.Engine.SceneComponent GetChildComponent(int childIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetChildComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetChildComponent_ChildIndex_Offset), 0, null, childIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetChildComponent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.SceneComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.FromNative(IntPtr.Add(ParamsBuffer, GetChildComponent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:GetAttachSocketName
    static readonly IntPtr GetAttachSocketName_NativeFunction;
    static readonly int GetAttachSocketName_ParamsSize;
    static readonly int GetAttachSocketName_ReturnValue_Offset;
    
    public Name GetAttachSocketName()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAttachSocketName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAttachSocketName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetAttachSocketName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:GetAttachParent
    static readonly IntPtr GetAttachParent_NativeFunction;
    static readonly int GetAttachParent_ParamsSize;
    static readonly int GetAttachParent_ReturnValue_Offset;
    
    public UnrealSharp.Engine.SceneComponent GetAttachParent()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAttachParent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAttachParent_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.SceneComponent returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.SceneComponent>.FromNative(IntPtr.Add(ParamsBuffer, GetAttachParent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:GetAllSocketNames
    static readonly IntPtr GetAllSocketNames_NativeFunction;
    static readonly int GetAllSocketNames_ParamsSize;
    static readonly int GetAllSocketNames_ReturnValue_Offset;
    static readonly int GetAllSocketNames_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<Name> GetAllSocketNames()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAllSocketNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAllSocketNames_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<Name> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetAllSocketNames_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<Name> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetAllSocketNames_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:DoesSocketExist
    static readonly IntPtr DoesSocketExist_NativeFunction;
    static readonly int DoesSocketExist_ParamsSize;
    static readonly int DoesSocketExist_InSocketName_Offset;
    static readonly int DoesSocketExist_ReturnValue_Offset;
    
    public bool DoesSocketExist(Name inSocketName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DoesSocketExist_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, DoesSocketExist_InSocketName_Offset), 0, null, inSocketName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DoesSocketExist_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DoesSocketExist_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SceneComponent:DetachFromParent
    static readonly IntPtr DetachFromParent_NativeFunction;
    static readonly int DetachFromParent_ParamsSize;
    static readonly int DetachFromParent_bMaintainWorldPosition_Offset;
    static readonly int DetachFromParent_bCallModify_Offset;
    
    public void DetachFromParent(bool bMaintainWorldPosition = false, bool bCallModify = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DetachFromParent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, DetachFromParent_bMaintainWorldPosition_Offset), 0, null, bMaintainWorldPosition);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, DetachFromParent_bCallModify_Offset), 0, null, bCallModify);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DetachFromParent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
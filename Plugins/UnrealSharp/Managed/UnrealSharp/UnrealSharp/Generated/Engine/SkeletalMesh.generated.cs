// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class SkeletalMesh : UnrealSharp.Engine.SkinnedAsset
{
    
    static SkeletalMesh()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SkeletalMesh");
        
        Skeleton_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Skeleton");
        PositiveBoundsExtension_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PositiveBoundsExtension");
        NegativeBoundsExtension_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NegativeBoundsExtension");
        Materials_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Materials");
        Materials_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Materials");
        LODSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LODSettings");
        DefaultAnimatingRig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultAnimatingRig");
        PhysicsAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PhysicsAsset");
        ShadowPhysicsAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShadowPhysicsAsset");
        NodeMappingData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NodeMappingData");
        NodeMappingData_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "NodeMappingData");
        MorphTargets_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MorphTargets");
        MorphTargets_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "MorphTargets");
        PostProcessAnimBlueprint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PostProcessAnimBlueprint");
        MeshClothingAssets_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MeshClothingAssets");
        MeshClothingAssets_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "MeshClothingAssets");
        DefaultMeshDeformer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultMeshDeformer");
        OverlayMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OverlayMaterial");
        OverlayMaterialMaxDrawDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OverlayMaterialMaxDrawDistance");
        
        SetOverlayMaterialMaxDrawDistance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOverlayMaterialMaxDrawDistance");
        SetOverlayMaterialMaxDrawDistance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOverlayMaterialMaxDrawDistance_NativeFunction);
        SetOverlayMaterialMaxDrawDistance_InMaxDrawDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOverlayMaterialMaxDrawDistance_NativeFunction, "InMaxDrawDistance");
        SetOverlayMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOverlayMaterial");
        SetOverlayMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOverlayMaterial_NativeFunction);
        SetOverlayMaterial_NewOverlayMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOverlayMaterial_NativeFunction, "NewOverlayMaterial");
        NumSockets_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "NumSockets");
        NumSockets_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(NumSockets_NativeFunction);
        NumSockets_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NumSockets_NativeFunction, "ReturnValue");
        IsSectionUsingCloth_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsSectionUsingCloth");
        IsSectionUsingCloth_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsSectionUsingCloth_NativeFunction);
        IsSectionUsingCloth_InSectionIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSectionUsingCloth_NativeFunction, "InSectionIndex");
        IsSectionUsingCloth_bCheckCorrespondingSections_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSectionUsingCloth_NativeFunction, "bCheckCorrespondingSections");
        IsSectionUsingCloth_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSectionUsingCloth_NativeFunction, "ReturnValue");
        GetSocketByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSocketByIndex");
        GetSocketByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSocketByIndex_NativeFunction);
        GetSocketByIndex_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSocketByIndex_NativeFunction, "Index");
        GetSocketByIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSocketByIndex_NativeFunction, "ReturnValue");
        GetOverlayMaterialMaxDrawDistance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOverlayMaterialMaxDrawDistance");
        GetOverlayMaterialMaxDrawDistance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOverlayMaterialMaxDrawDistance_NativeFunction);
        GetOverlayMaterialMaxDrawDistance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOverlayMaterialMaxDrawDistance_NativeFunction, "ReturnValue");
        GetOverlayMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOverlayMaterial");
        GetOverlayMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOverlayMaterial_NativeFunction);
        GetOverlayMaterial_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOverlayMaterial_NativeFunction, "ReturnValue");
        GetNodeMappingContainer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNodeMappingContainer");
        GetNodeMappingContainer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNodeMappingContainer_NativeFunction);
        GetNodeMappingContainer_SourceAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodeMappingContainer_NativeFunction, "SourceAsset");
        GetNodeMappingContainer_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodeMappingContainer_NativeFunction, "ReturnValue");
        GetImportedBounds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetImportedBounds");
        GetImportedBounds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetImportedBounds_NativeFunction);
        GetImportedBounds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetImportedBounds_NativeFunction, "ReturnValue");
        GetBounds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBounds");
        GetBounds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBounds_NativeFunction);
        GetBounds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBounds_NativeFunction, "ReturnValue");
        FindSocketAndIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindSocketAndIndex");
        FindSocketAndIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindSocketAndIndex_NativeFunction);
        FindSocketAndIndex_InSocketName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindSocketAndIndex_NativeFunction, "InSocketName");
        FindSocketAndIndex_OutIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindSocketAndIndex_NativeFunction, "OutIndex");
        FindSocketAndIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindSocketAndIndex_NativeFunction, "ReturnValue");
        AddSocket_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddSocket");
        AddSocket_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddSocket_NativeFunction);
        AddSocket_InSocket_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSocket_NativeFunction, "InSocket");
        AddSocket_bAddToSkeleton_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSocket_NativeFunction, "bAddToSkeleton");
        
        
    }
    
    protected SkeletalMesh(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Engine.SkeletalMesh:Skeleton
    static readonly int Skeleton_Offset;
    
    public UnrealSharp.Engine.Skeleton Skeleton
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.Skeleton>.FromNative(IntPtr.Add(NativeObject, Skeleton_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.Skeleton>.ToNative(IntPtr.Add(NativeObject, Skeleton_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.SkeletalMesh:PositiveBoundsExtension
    static readonly int PositiveBoundsExtension_Offset;
    
    public System.DoubleNumerics.Vector3 PositiveBoundsExtension
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, PositiveBoundsExtension_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.SkeletalMesh:NegativeBoundsExtension
    static readonly int NegativeBoundsExtension_Offset;
    
    public System.DoubleNumerics.Vector3 NegativeBoundsExtension
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, NegativeBoundsExtension_Offset), 0, this);
        }
    }
    
    // ArrayProperty /Script/Engine.SkeletalMesh:Materials
    static readonly int Materials_Offset;
    static readonly IntPtr Materials_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.SkeletalMaterial> Materials_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.SkeletalMaterial> Materials
    {
        get
        {
            if(Materials_Wrapper == null)
            {
                Materials_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.SkeletalMaterial>(1, Materials_NativeProperty, UnrealSharp.Engine.SkeletalMaterialMarshaler.ToNative, UnrealSharp.Engine.SkeletalMaterialMarshaler.FromNative);
            }
            
            return Materials_Wrapper.FromNative(IntPtr.Add(NativeObject,Materials_Offset),0,this);
        }
    }
    
    // ObjectProperty /Script/Engine.SkeletalMesh:LODSettings
    static readonly int LODSettings_Offset;
    
    public UnrealSharp.Engine.SkeletalMeshLODSettings LODSettings
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.SkeletalMeshLODSettings>.FromNative(IntPtr.Add(NativeObject, LODSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.SkeletalMeshLODSettings>.ToNative(IntPtr.Add(NativeObject, LODSettings_Offset), 0, this, value);
        }
    }
    
    // SoftObjectProperty /Script/Engine.SkeletalMesh:DefaultAnimatingRig
    static readonly int DefaultAnimatingRig_Offset;
    
    public SoftObject<UnrealSharp.CoreUObject.Object> DefaultAnimatingRig
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<SoftObject<UnrealSharp.CoreUObject.Object>>.FromNative(IntPtr.Add(NativeObject, DefaultAnimatingRig_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<SoftObject<UnrealSharp.CoreUObject.Object>>.ToNative(IntPtr.Add(NativeObject, DefaultAnimatingRig_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/Engine.SkeletalMesh:PhysicsAsset
    static readonly int PhysicsAsset_Offset;
    
    public UnrealSharp.Engine.PhysicsAsset PhysicsAsset
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.PhysicsAsset>.FromNative(IntPtr.Add(NativeObject, PhysicsAsset_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/Engine.SkeletalMesh:ShadowPhysicsAsset
    static readonly int ShadowPhysicsAsset_Offset;
    
    public UnrealSharp.Engine.PhysicsAsset ShadowPhysicsAsset
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.PhysicsAsset>.FromNative(IntPtr.Add(NativeObject, ShadowPhysicsAsset_Offset), 0, this);
        }
    }
    
    // ArrayProperty /Script/Engine.SkeletalMesh:NodeMappingData
    static readonly int NodeMappingData_Offset;
    static readonly IntPtr NodeMappingData_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.NodeMappingContainer> NodeMappingData_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.Engine.NodeMappingContainer> NodeMappingData
    {
        get
        {
            if(NodeMappingData_Wrapper == null)
            {
                NodeMappingData_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.NodeMappingContainer>(1, NodeMappingData_NativeProperty, ObjectMarshaller<UnrealSharp.Engine.NodeMappingContainer>.ToNative, ObjectMarshaller<UnrealSharp.Engine.NodeMappingContainer>.FromNative);
            }
            
            return NodeMappingData_Wrapper.FromNative(IntPtr.Add(NativeObject,NodeMappingData_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/Engine.SkeletalMesh:MorphTargets
    static readonly int MorphTargets_Offset;
    static readonly IntPtr MorphTargets_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.MorphTarget> MorphTargets_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.MorphTarget> MorphTargets
    {
        get
        {
            if(MorphTargets_Wrapper == null)
            {
                MorphTargets_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.MorphTarget>(1, MorphTargets_NativeProperty, ObjectMarshaller<UnrealSharp.Engine.MorphTarget>.ToNative, ObjectMarshaller<UnrealSharp.Engine.MorphTarget>.FromNative);
            }
            
            return MorphTargets_Wrapper.FromNative(IntPtr.Add(NativeObject,MorphTargets_Offset),0,this);
        }
    }
    
    // ClassProperty /Script/Engine.SkeletalMesh:PostProcessAnimBlueprint
    static readonly int PostProcessAnimBlueprint_Offset;
    
    public SubclassOf<UnrealSharp.Engine.AnimInstance> PostProcessAnimBlueprint
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.Engine.AnimInstance>.FromNative(IntPtr.Add(NativeObject, PostProcessAnimBlueprint_Offset), 0, this);
        }
    }
    
    // ArrayProperty /Script/Engine.SkeletalMesh:MeshClothingAssets
    static readonly int MeshClothingAssets_Offset;
    static readonly IntPtr MeshClothingAssets_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.ClothingSystemRuntimeInterface.ClothingAssetBase> MeshClothingAssets_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.ClothingSystemRuntimeInterface.ClothingAssetBase> MeshClothingAssets
    {
        get
        {
            if(MeshClothingAssets_Wrapper == null)
            {
                MeshClothingAssets_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.ClothingSystemRuntimeInterface.ClothingAssetBase>(1, MeshClothingAssets_NativeProperty, ObjectMarshaller<UnrealSharp.ClothingSystemRuntimeInterface.ClothingAssetBase>.ToNative, ObjectMarshaller<UnrealSharp.ClothingSystemRuntimeInterface.ClothingAssetBase>.FromNative);
            }
            
            return MeshClothingAssets_Wrapper.FromNative(IntPtr.Add(NativeObject,MeshClothingAssets_Offset),0,this);
        }
    }
    
    // ObjectProperty /Script/Engine.SkeletalMesh:DefaultMeshDeformer
    static readonly int DefaultMeshDeformer_Offset;
    
    public UnrealSharp.Engine.MeshDeformer DefaultMeshDeformer
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.MeshDeformer>.FromNative(IntPtr.Add(NativeObject, DefaultMeshDeformer_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/Engine.SkeletalMesh:OverlayMaterial
    static readonly int OverlayMaterial_Offset;
    
    public UnrealSharp.Engine.MaterialInterface OverlayMaterial
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.FromNative(IntPtr.Add(NativeObject, OverlayMaterial_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.SkeletalMesh:OverlayMaterialMaxDrawDistance
    static readonly int OverlayMaterialMaxDrawDistance_Offset;
    
    public float OverlayMaterialMaxDrawDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, OverlayMaterialMaxDrawDistance_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.SkeletalMesh:SetOverlayMaterialMaxDrawDistance
    static readonly IntPtr SetOverlayMaterialMaxDrawDistance_NativeFunction;
    static readonly int SetOverlayMaterialMaxDrawDistance_ParamsSize;
    static readonly int SetOverlayMaterialMaxDrawDistance_InMaxDrawDistance_Offset;
    
    public void SetOverlayMaterialMaxDrawDistance(float inMaxDrawDistance)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOverlayMaterialMaxDrawDistance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetOverlayMaterialMaxDrawDistance_InMaxDrawDistance_Offset), 0, null, inMaxDrawDistance);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOverlayMaterialMaxDrawDistance_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SkeletalMesh:SetOverlayMaterial
    static readonly IntPtr SetOverlayMaterial_NativeFunction;
    static readonly int SetOverlayMaterial_ParamsSize;
    static readonly int SetOverlayMaterial_NewOverlayMaterial_Offset;
    
    public void SetOverlayMaterial(UnrealSharp.Engine.MaterialInterface newOverlayMaterial)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOverlayMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SetOverlayMaterial_NewOverlayMaterial_Offset), 0, null, newOverlayMaterial);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOverlayMaterial_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SkeletalMesh:NumSockets
    static readonly IntPtr NumSockets_NativeFunction;
    static readonly int NumSockets_ParamsSize;
    static readonly int NumSockets_ReturnValue_Offset;
    
    public int NumSockets()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[NumSockets_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, NumSockets_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, NumSockets_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SkeletalMesh:IsSectionUsingCloth
    static readonly IntPtr IsSectionUsingCloth_NativeFunction;
    static readonly int IsSectionUsingCloth_ParamsSize;
    static readonly int IsSectionUsingCloth_InSectionIndex_Offset;
    static readonly int IsSectionUsingCloth_bCheckCorrespondingSections_Offset;
    static readonly int IsSectionUsingCloth_ReturnValue_Offset;
    
    public bool IsSectionUsingCloth(int inSectionIndex, bool bCheckCorrespondingSections = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsSectionUsingCloth_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, IsSectionUsingCloth_InSectionIndex_Offset), 0, null, inSectionIndex);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, IsSectionUsingCloth_bCheckCorrespondingSections_Offset), 0, null, bCheckCorrespondingSections);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsSectionUsingCloth_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsSectionUsingCloth_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SkeletalMesh:GetSocketByIndex
    static readonly IntPtr GetSocketByIndex_NativeFunction;
    static readonly int GetSocketByIndex_ParamsSize;
    static readonly int GetSocketByIndex_Index_Offset;
    static readonly int GetSocketByIndex_ReturnValue_Offset;
    
    public UnrealSharp.Engine.SkeletalMeshSocket GetSocketByIndex(int index)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSocketByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetSocketByIndex_Index_Offset), 0, null, index);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSocketByIndex_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.SkeletalMeshSocket returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.SkeletalMeshSocket>.FromNative(IntPtr.Add(ParamsBuffer, GetSocketByIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SkeletalMesh:GetOverlayMaterialMaxDrawDistance
    static readonly IntPtr GetOverlayMaterialMaxDrawDistance_NativeFunction;
    static readonly int GetOverlayMaterialMaxDrawDistance_ParamsSize;
    static readonly int GetOverlayMaterialMaxDrawDistance_ReturnValue_Offset;
    
    public float GetOverlayMaterialMaxDrawDistance()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOverlayMaterialMaxDrawDistance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOverlayMaterialMaxDrawDistance_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetOverlayMaterialMaxDrawDistance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SkeletalMesh:GetOverlayMaterial
    static readonly IntPtr GetOverlayMaterial_NativeFunction;
    static readonly int GetOverlayMaterial_ParamsSize;
    static readonly int GetOverlayMaterial_ReturnValue_Offset;
    
    public UnrealSharp.Engine.MaterialInterface GetOverlayMaterial()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOverlayMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOverlayMaterial_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialInterface returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.FromNative(IntPtr.Add(ParamsBuffer, GetOverlayMaterial_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SkeletalMesh:GetNodeMappingContainer
    static readonly IntPtr GetNodeMappingContainer_NativeFunction;
    static readonly int GetNodeMappingContainer_ParamsSize;
    static readonly int GetNodeMappingContainer_SourceAsset_Offset;
    static readonly int GetNodeMappingContainer_ReturnValue_Offset;
    
    public UnrealSharp.Engine.NodeMappingContainer GetNodeMappingContainer(UnrealSharp.Engine.Blueprint sourceAsset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNodeMappingContainer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Blueprint>.ToNative(IntPtr.Add(ParamsBuffer, GetNodeMappingContainer_SourceAsset_Offset), 0, null, sourceAsset);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNodeMappingContainer_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.NodeMappingContainer returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.NodeMappingContainer>.FromNative(IntPtr.Add(ParamsBuffer, GetNodeMappingContainer_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SkeletalMesh:GetImportedBounds
    static readonly IntPtr GetImportedBounds_NativeFunction;
    static readonly int GetImportedBounds_ParamsSize;
    static readonly int GetImportedBounds_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.BoxSphereBounds GetImportedBounds()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetImportedBounds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetImportedBounds_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.BoxSphereBounds returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.BoxSphereBounds>.FromNative(IntPtr.Add(ParamsBuffer, GetImportedBounds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SkeletalMesh:GetBounds
    static readonly IntPtr GetBounds_NativeFunction;
    static readonly int GetBounds_ParamsSize;
    static readonly int GetBounds_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.BoxSphereBounds GetBounds()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBounds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBounds_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.BoxSphereBounds returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.BoxSphereBounds>.FromNative(IntPtr.Add(ParamsBuffer, GetBounds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SkeletalMesh:FindSocketAndIndex
    static readonly IntPtr FindSocketAndIndex_NativeFunction;
    static readonly int FindSocketAndIndex_ParamsSize;
    static readonly int FindSocketAndIndex_InSocketName_Offset;
    static readonly int FindSocketAndIndex_OutIndex_Offset;
    static readonly int FindSocketAndIndex_ReturnValue_Offset;
    
    public UnrealSharp.Engine.SkeletalMeshSocket FindSocketAndIndex(Name inSocketName, out int outIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindSocketAndIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, FindSocketAndIndex_InSocketName_Offset), 0, null, inSocketName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindSocketAndIndex_NativeFunction, ParamsBuffer);
            
            outIndex = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, FindSocketAndIndex_OutIndex_Offset), 0, null);
            UnrealSharp.Engine.SkeletalMeshSocket returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.SkeletalMeshSocket>.FromNative(IntPtr.Add(ParamsBuffer, FindSocketAndIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SkeletalMesh:AddSocket
    static readonly IntPtr AddSocket_NativeFunction;
    static readonly int AddSocket_ParamsSize;
    static readonly int AddSocket_InSocket_Offset;
    static readonly int AddSocket_bAddToSkeleton_Offset;
    
    public void AddSocket(UnrealSharp.Engine.SkeletalMeshSocket inSocket, bool bAddToSkeleton = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddSocket_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SkeletalMeshSocket>.ToNative(IntPtr.Add(ParamsBuffer, AddSocket_InSocket_Offset), 0, null, inSocket);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddSocket_bAddToSkeleton_Offset), 0, null, bAddToSkeleton);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddSocket_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
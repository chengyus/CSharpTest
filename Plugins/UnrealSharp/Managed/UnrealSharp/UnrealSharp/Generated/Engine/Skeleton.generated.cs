// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class Skeleton : UnrealSharp.CoreUObject.Object
{
    
    static Skeleton()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("Skeleton");
        
        CompatibleSkeletons_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CompatibleSkeletons");
        CompatibleSkeletons_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "CompatibleSkeletons");
        
        GetBlendProfile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBlendProfile");
        GetBlendProfile_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBlendProfile_NativeFunction);
        GetBlendProfile_InProfileName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBlendProfile_NativeFunction, "InProfileName");
        GetBlendProfile_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBlendProfile_NativeFunction, "ReturnValue");
        AddCompatibleSkeletonSoft_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddCompatibleSkeletonSoft");
        AddCompatibleSkeletonSoft_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddCompatibleSkeletonSoft_NativeFunction);
        AddCompatibleSkeletonSoft_SourceSkeleton_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddCompatibleSkeletonSoft_NativeFunction, "SourceSkeleton");
        AddCompatibleSkeleton_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddCompatibleSkeleton");
        AddCompatibleSkeleton_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddCompatibleSkeleton_NativeFunction);
        AddCompatibleSkeleton_SourceSkeleton_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddCompatibleSkeleton_NativeFunction, "SourceSkeleton");
        
        
    }
    
    protected Skeleton(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ArrayProperty /Script/Engine.Skeleton:CompatibleSkeletons
    static readonly int CompatibleSkeletons_Offset;
    static readonly IntPtr CompatibleSkeletons_NativeProperty;
    UnrealArrayReadOnlyMarshaler<SoftObject<UnrealSharp.Engine.Skeleton>> CompatibleSkeletons_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<SoftObject<UnrealSharp.Engine.Skeleton>> CompatibleSkeletons
    {
        get
        {
            if(CompatibleSkeletons_Wrapper == null)
            {
                CompatibleSkeletons_Wrapper = new UnrealArrayReadOnlyMarshaler<SoftObject<UnrealSharp.Engine.Skeleton>>(1, CompatibleSkeletons_NativeProperty, BlittableMarshaller<SoftObject<UnrealSharp.Engine.Skeleton>>.ToNative, BlittableMarshaller<SoftObject<UnrealSharp.Engine.Skeleton>>.FromNative);
            }
            
            return CompatibleSkeletons_Wrapper.FromNative(IntPtr.Add(NativeObject,CompatibleSkeletons_Offset),0,this);
        }
    }
    
    // Function /Script/Engine.Skeleton:GetBlendProfile
    static readonly IntPtr GetBlendProfile_NativeFunction;
    static readonly int GetBlendProfile_ParamsSize;
    static readonly int GetBlendProfile_InProfileName_Offset;
    static readonly int GetBlendProfile_ReturnValue_Offset;
    
    public UnrealSharp.Engine.BlendProfile GetBlendProfile(Name inProfileName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBlendProfile_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetBlendProfile_InProfileName_Offset), 0, null, inProfileName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBlendProfile_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.BlendProfile returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.BlendProfile>.FromNative(IntPtr.Add(ParamsBuffer, GetBlendProfile_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Skeleton:AddCompatibleSkeletonSoft
    static readonly IntPtr AddCompatibleSkeletonSoft_NativeFunction;
    static readonly int AddCompatibleSkeletonSoft_ParamsSize;
    static readonly int AddCompatibleSkeletonSoft_SourceSkeleton_Offset;
    
    public void AddCompatibleSkeletonSoft(SoftObject<UnrealSharp.Engine.Skeleton> sourceSkeleton)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddCompatibleSkeletonSoft_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<SoftObject<UnrealSharp.Engine.Skeleton>>.ToNative(IntPtr.Add(ParamsBuffer, AddCompatibleSkeletonSoft_SourceSkeleton_Offset), 0, null, sourceSkeleton);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddCompatibleSkeletonSoft_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.Skeleton:AddCompatibleSkeleton
    static readonly IntPtr AddCompatibleSkeleton_NativeFunction;
    static readonly int AddCompatibleSkeleton_ParamsSize;
    static readonly int AddCompatibleSkeleton_SourceSkeleton_Offset;
    
    public void AddCompatibleSkeleton(UnrealSharp.Engine.Skeleton sourceSkeleton)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddCompatibleSkeleton_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Skeleton>.ToNative(IntPtr.Add(ParamsBuffer, AddCompatibleSkeleton_SourceSkeleton_Offset), 0, null, sourceSkeleton);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddCompatibleSkeleton_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class SkyAtmosphereComponent : UnrealSharp.Engine.SceneComponent
{
    
    static SkyAtmosphereComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SkyAtmosphereComponent");
        
        TransformMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TransformMode");
        BottomRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BottomRadius");
        GroundAlbedo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "GroundAlbedo");
        AtmosphereHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AtmosphereHeight");
        MultiScatteringFactor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MultiScatteringFactor");
        TraceSampleCountScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TraceSampleCountScale");
        RayleighScatteringScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RayleighScatteringScale");
        RayleighScattering_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RayleighScattering");
        RayleighExponentialDistribution_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RayleighExponentialDistribution");
        MieScatteringScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MieScatteringScale");
        MieScattering_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MieScattering");
        MieAbsorptionScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MieAbsorptionScale");
        MieAbsorption_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MieAbsorption");
        MieAnisotropy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MieAnisotropy");
        MieExponentialDistribution_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MieExponentialDistribution");
        OtherAbsorptionScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OtherAbsorptionScale");
        OtherAbsorption_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OtherAbsorption");
        OtherTentDistribution_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OtherTentDistribution");
        SkyLuminanceFactor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SkyLuminanceFactor");
        AerialPespectiveViewDistanceScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AerialPespectiveViewDistanceScale");
        HeightFogContribution_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "HeightFogContribution");
        TransmittanceMinLightElevationAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TransmittanceMinLightElevationAngle");
        AerialPerspectiveStartDepth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AerialPerspectiveStartDepth");
        
        SetSkyLuminanceFactor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSkyLuminanceFactor");
        SetSkyLuminanceFactor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSkyLuminanceFactor_NativeFunction);
        SetSkyLuminanceFactor_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSkyLuminanceFactor_NativeFunction, "NewValue");
        SetRayleighScatteringScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRayleighScatteringScale");
        SetRayleighScatteringScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRayleighScatteringScale_NativeFunction);
        SetRayleighScatteringScale_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRayleighScatteringScale_NativeFunction, "NewValue");
        SetRayleighScattering_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRayleighScattering");
        SetRayleighScattering_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRayleighScattering_NativeFunction);
        SetRayleighScattering_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRayleighScattering_NativeFunction, "NewValue");
        SetRayleighExponentialDistribution_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRayleighExponentialDistribution");
        SetRayleighExponentialDistribution_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRayleighExponentialDistribution_NativeFunction);
        SetRayleighExponentialDistribution_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRayleighExponentialDistribution_NativeFunction, "NewValue");
        SetOtherAbsorptionScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOtherAbsorptionScale");
        SetOtherAbsorptionScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOtherAbsorptionScale_NativeFunction);
        SetOtherAbsorptionScale_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOtherAbsorptionScale_NativeFunction, "NewValue");
        SetOtherAbsorption_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOtherAbsorption");
        SetOtherAbsorption_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOtherAbsorption_NativeFunction);
        SetOtherAbsorption_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOtherAbsorption_NativeFunction, "NewValue");
        SetMultiScatteringFactor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMultiScatteringFactor");
        SetMultiScatteringFactor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMultiScatteringFactor_NativeFunction);
        SetMultiScatteringFactor_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMultiScatteringFactor_NativeFunction, "NewValue");
        SetMieScatteringScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMieScatteringScale");
        SetMieScatteringScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMieScatteringScale_NativeFunction);
        SetMieScatteringScale_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMieScatteringScale_NativeFunction, "NewValue");
        SetMieScattering_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMieScattering");
        SetMieScattering_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMieScattering_NativeFunction);
        SetMieScattering_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMieScattering_NativeFunction, "NewValue");
        SetMieExponentialDistribution_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMieExponentialDistribution");
        SetMieExponentialDistribution_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMieExponentialDistribution_NativeFunction);
        SetMieExponentialDistribution_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMieExponentialDistribution_NativeFunction, "NewValue");
        SetMieAnisotropy_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMieAnisotropy");
        SetMieAnisotropy_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMieAnisotropy_NativeFunction);
        SetMieAnisotropy_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMieAnisotropy_NativeFunction, "NewValue");
        SetMieAbsorptionScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMieAbsorptionScale");
        SetMieAbsorptionScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMieAbsorptionScale_NativeFunction);
        SetMieAbsorptionScale_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMieAbsorptionScale_NativeFunction, "NewValue");
        SetMieAbsorption_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMieAbsorption");
        SetMieAbsorption_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMieAbsorption_NativeFunction);
        SetMieAbsorption_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMieAbsorption_NativeFunction, "NewValue");
        SetHeightFogContribution_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetHeightFogContribution");
        SetHeightFogContribution_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetHeightFogContribution_NativeFunction);
        SetHeightFogContribution_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetHeightFogContribution_NativeFunction, "NewValue");
        SetGroundAlbedo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGroundAlbedo");
        SetGroundAlbedo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGroundAlbedo_NativeFunction);
        SetGroundAlbedo_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGroundAlbedo_NativeFunction, "NewValue");
        SetBottomRadius_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBottomRadius");
        SetBottomRadius_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBottomRadius_NativeFunction);
        SetBottomRadius_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBottomRadius_NativeFunction, "NewValue");
        SetAtmosphereHeight_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAtmosphereHeight");
        SetAtmosphereHeight_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAtmosphereHeight_NativeFunction);
        SetAtmosphereHeight_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAtmosphereHeight_NativeFunction, "NewValue");
        SetAerialPespectiveViewDistanceScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAerialPespectiveViewDistanceScale");
        SetAerialPespectiveViewDistanceScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAerialPespectiveViewDistanceScale_NativeFunction);
        SetAerialPespectiveViewDistanceScale_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAerialPespectiveViewDistanceScale_NativeFunction, "NewValue");
        ResetAtmosphereLightDirectionOverride_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetAtmosphereLightDirectionOverride");
        ResetAtmosphereLightDirectionOverride_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ResetAtmosphereLightDirectionOverride_NativeFunction);
        ResetAtmosphereLightDirectionOverride_AtmosphereLightIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResetAtmosphereLightDirectionOverride_NativeFunction, "AtmosphereLightIndex");
        OverrideAtmosphereLightDirection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OverrideAtmosphereLightDirection");
        OverrideAtmosphereLightDirection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OverrideAtmosphereLightDirection_NativeFunction);
        OverrideAtmosphereLightDirection_AtmosphereLightIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OverrideAtmosphereLightDirection_NativeFunction, "AtmosphereLightIndex");
        OverrideAtmosphereLightDirection_LightDirection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OverrideAtmosphereLightDirection_NativeFunction, "LightDirection");
        IsAtmosphereLightDirectionOverriden_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsAtmosphereLightDirectionOverriden");
        IsAtmosphereLightDirectionOverriden_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsAtmosphereLightDirectionOverriden_NativeFunction);
        IsAtmosphereLightDirectionOverriden_AtmosphereLightIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAtmosphereLightDirectionOverriden_NativeFunction, "AtmosphereLightIndex");
        IsAtmosphereLightDirectionOverriden_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAtmosphereLightDirectionOverriden_NativeFunction, "ReturnValue");
        GetOverridenAtmosphereLightDirection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOverridenAtmosphereLightDirection");
        GetOverridenAtmosphereLightDirection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOverridenAtmosphereLightDirection_NativeFunction);
        GetOverridenAtmosphereLightDirection_AtmosphereLightIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOverridenAtmosphereLightDirection_NativeFunction, "AtmosphereLightIndex");
        GetOverridenAtmosphereLightDirection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOverridenAtmosphereLightDirection_NativeFunction, "ReturnValue");
        GetAtmosphereTransmitanceOnGroundAtPlanetTop_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAtmosphereTransmitanceOnGroundAtPlanetTop");
        GetAtmosphereTransmitanceOnGroundAtPlanetTop_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAtmosphereTransmitanceOnGroundAtPlanetTop_NativeFunction);
        GetAtmosphereTransmitanceOnGroundAtPlanetTop_DirectionalLight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAtmosphereTransmitanceOnGroundAtPlanetTop_NativeFunction, "DirectionalLight");
        GetAtmosphereTransmitanceOnGroundAtPlanetTop_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAtmosphereTransmitanceOnGroundAtPlanetTop_NativeFunction, "ReturnValue");
        
        
    }
    
    protected SkyAtmosphereComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // EnumProperty /Script/Engine.SkyAtmosphereComponent:TransformMode
    static readonly int TransformMode_Offset;
    
    public UnrealSharp.Engine.ESkyAtmosphereTransformMode TransformMode
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ESkyAtmosphereTransformMode>.FromNative(IntPtr.Add(NativeObject, TransformMode_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.SkyAtmosphereComponent:BottomRadius
    static readonly int BottomRadius_Offset;
    
    public float BottomRadius
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, BottomRadius_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.SkyAtmosphereComponent:GroundAlbedo
    static readonly int GroundAlbedo_Offset;
    
    public UnrealSharp.CoreUObject.Color GroundAlbedo
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(NativeObject, GroundAlbedo_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.SkyAtmosphereComponent:AtmosphereHeight
    static readonly int AtmosphereHeight_Offset;
    
    public float AtmosphereHeight
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AtmosphereHeight_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.SkyAtmosphereComponent:MultiScatteringFactor
    static readonly int MultiScatteringFactor_Offset;
    
    public float MultiScatteringFactor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MultiScatteringFactor_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.SkyAtmosphereComponent:TraceSampleCountScale
    static readonly int TraceSampleCountScale_Offset;
    
    public float TraceSampleCountScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, TraceSampleCountScale_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.SkyAtmosphereComponent:RayleighScatteringScale
    static readonly int RayleighScatteringScale_Offset;
    
    public float RayleighScatteringScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, RayleighScatteringScale_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.SkyAtmosphereComponent:RayleighScattering
    static readonly int RayleighScattering_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor RayleighScattering
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, RayleighScattering_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.SkyAtmosphereComponent:RayleighExponentialDistribution
    static readonly int RayleighExponentialDistribution_Offset;
    
    public float RayleighExponentialDistribution
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, RayleighExponentialDistribution_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.SkyAtmosphereComponent:MieScatteringScale
    static readonly int MieScatteringScale_Offset;
    
    public float MieScatteringScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MieScatteringScale_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.SkyAtmosphereComponent:MieScattering
    static readonly int MieScattering_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor MieScattering
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, MieScattering_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.SkyAtmosphereComponent:MieAbsorptionScale
    static readonly int MieAbsorptionScale_Offset;
    
    public float MieAbsorptionScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MieAbsorptionScale_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.SkyAtmosphereComponent:MieAbsorption
    static readonly int MieAbsorption_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor MieAbsorption
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, MieAbsorption_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.SkyAtmosphereComponent:MieAnisotropy
    static readonly int MieAnisotropy_Offset;
    
    public float MieAnisotropy
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MieAnisotropy_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.SkyAtmosphereComponent:MieExponentialDistribution
    static readonly int MieExponentialDistribution_Offset;
    
    public float MieExponentialDistribution
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MieExponentialDistribution_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.SkyAtmosphereComponent:OtherAbsorptionScale
    static readonly int OtherAbsorptionScale_Offset;
    
    public float OtherAbsorptionScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, OtherAbsorptionScale_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.SkyAtmosphereComponent:OtherAbsorption
    static readonly int OtherAbsorption_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor OtherAbsorption
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, OtherAbsorption_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.SkyAtmosphereComponent:OtherTentDistribution
    static readonly int OtherTentDistribution_Offset;
    
    public UnrealSharp.Engine.TentDistribution OtherTentDistribution
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.TentDistribution>.FromNative(IntPtr.Add(NativeObject, OtherTentDistribution_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.SkyAtmosphereComponent:SkyLuminanceFactor
    static readonly int SkyLuminanceFactor_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor SkyLuminanceFactor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, SkyLuminanceFactor_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.SkyAtmosphereComponent:AerialPespectiveViewDistanceScale
    static readonly int AerialPespectiveViewDistanceScale_Offset;
    
    public float AerialPespectiveViewDistanceScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AerialPespectiveViewDistanceScale_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.SkyAtmosphereComponent:HeightFogContribution
    static readonly int HeightFogContribution_Offset;
    
    public float HeightFogContribution
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, HeightFogContribution_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.SkyAtmosphereComponent:TransmittanceMinLightElevationAngle
    static readonly int TransmittanceMinLightElevationAngle_Offset;
    
    public float TransmittanceMinLightElevationAngle
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, TransmittanceMinLightElevationAngle_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.SkyAtmosphereComponent:AerialPerspectiveStartDepth
    static readonly int AerialPerspectiveStartDepth_Offset;
    
    public float AerialPerspectiveStartDepth
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AerialPerspectiveStartDepth_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:SetSkyLuminanceFactor
    static readonly IntPtr SetSkyLuminanceFactor_NativeFunction;
    static readonly int SetSkyLuminanceFactor_ParamsSize;
    static readonly int SetSkyLuminanceFactor_NewValue_Offset;
    
    public void SetSkyLuminanceFactor(UnrealSharp.CoreUObject.LinearColor newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSkyLuminanceFactor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetSkyLuminanceFactor_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSkyLuminanceFactor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:SetRayleighScatteringScale
    static readonly IntPtr SetRayleighScatteringScale_NativeFunction;
    static readonly int SetRayleighScatteringScale_ParamsSize;
    static readonly int SetRayleighScatteringScale_NewValue_Offset;
    
    public void SetRayleighScatteringScale(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRayleighScatteringScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetRayleighScatteringScale_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRayleighScatteringScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:SetRayleighScattering
    static readonly IntPtr SetRayleighScattering_NativeFunction;
    static readonly int SetRayleighScattering_ParamsSize;
    static readonly int SetRayleighScattering_NewValue_Offset;
    
    public void SetRayleighScattering(UnrealSharp.CoreUObject.LinearColor newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRayleighScattering_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetRayleighScattering_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRayleighScattering_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:SetRayleighExponentialDistribution
    static readonly IntPtr SetRayleighExponentialDistribution_NativeFunction;
    static readonly int SetRayleighExponentialDistribution_ParamsSize;
    static readonly int SetRayleighExponentialDistribution_NewValue_Offset;
    
    public void SetRayleighExponentialDistribution(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRayleighExponentialDistribution_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetRayleighExponentialDistribution_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRayleighExponentialDistribution_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:SetOtherAbsorptionScale
    static readonly IntPtr SetOtherAbsorptionScale_NativeFunction;
    static readonly int SetOtherAbsorptionScale_ParamsSize;
    static readonly int SetOtherAbsorptionScale_NewValue_Offset;
    
    public void SetOtherAbsorptionScale(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOtherAbsorptionScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetOtherAbsorptionScale_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOtherAbsorptionScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:SetOtherAbsorption
    static readonly IntPtr SetOtherAbsorption_NativeFunction;
    static readonly int SetOtherAbsorption_ParamsSize;
    static readonly int SetOtherAbsorption_NewValue_Offset;
    
    public void SetOtherAbsorption(UnrealSharp.CoreUObject.LinearColor newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOtherAbsorption_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetOtherAbsorption_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOtherAbsorption_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:SetMultiScatteringFactor
    static readonly IntPtr SetMultiScatteringFactor_NativeFunction;
    static readonly int SetMultiScatteringFactor_ParamsSize;
    static readonly int SetMultiScatteringFactor_NewValue_Offset;
    
    public void SetMultiScatteringFactor(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMultiScatteringFactor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMultiScatteringFactor_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMultiScatteringFactor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:SetMieScatteringScale
    static readonly IntPtr SetMieScatteringScale_NativeFunction;
    static readonly int SetMieScatteringScale_ParamsSize;
    static readonly int SetMieScatteringScale_NewValue_Offset;
    
    public void SetMieScatteringScale(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMieScatteringScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMieScatteringScale_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMieScatteringScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:SetMieScattering
    static readonly IntPtr SetMieScattering_NativeFunction;
    static readonly int SetMieScattering_ParamsSize;
    static readonly int SetMieScattering_NewValue_Offset;
    
    public void SetMieScattering(UnrealSharp.CoreUObject.LinearColor newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMieScattering_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetMieScattering_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMieScattering_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:SetMieExponentialDistribution
    static readonly IntPtr SetMieExponentialDistribution_NativeFunction;
    static readonly int SetMieExponentialDistribution_ParamsSize;
    static readonly int SetMieExponentialDistribution_NewValue_Offset;
    
    public void SetMieExponentialDistribution(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMieExponentialDistribution_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMieExponentialDistribution_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMieExponentialDistribution_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:SetMieAnisotropy
    static readonly IntPtr SetMieAnisotropy_NativeFunction;
    static readonly int SetMieAnisotropy_ParamsSize;
    static readonly int SetMieAnisotropy_NewValue_Offset;
    
    public void SetMieAnisotropy(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMieAnisotropy_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMieAnisotropy_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMieAnisotropy_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:SetMieAbsorptionScale
    static readonly IntPtr SetMieAbsorptionScale_NativeFunction;
    static readonly int SetMieAbsorptionScale_ParamsSize;
    static readonly int SetMieAbsorptionScale_NewValue_Offset;
    
    public void SetMieAbsorptionScale(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMieAbsorptionScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMieAbsorptionScale_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMieAbsorptionScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:SetMieAbsorption
    static readonly IntPtr SetMieAbsorption_NativeFunction;
    static readonly int SetMieAbsorption_ParamsSize;
    static readonly int SetMieAbsorption_NewValue_Offset;
    
    public void SetMieAbsorption(UnrealSharp.CoreUObject.LinearColor newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMieAbsorption_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetMieAbsorption_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMieAbsorption_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:SetHeightFogContribution
    static readonly IntPtr SetHeightFogContribution_NativeFunction;
    static readonly int SetHeightFogContribution_ParamsSize;
    static readonly int SetHeightFogContribution_NewValue_Offset;
    
    public void SetHeightFogContribution(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetHeightFogContribution_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetHeightFogContribution_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetHeightFogContribution_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:SetGroundAlbedo
    static readonly IntPtr SetGroundAlbedo_NativeFunction;
    static readonly int SetGroundAlbedo_ParamsSize;
    static readonly int SetGroundAlbedo_NewValue_Offset;
    
    public void SetGroundAlbedo(UnrealSharp.CoreUObject.Color newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGroundAlbedo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(ParamsBuffer, SetGroundAlbedo_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetGroundAlbedo_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:SetBottomRadius
    static readonly IntPtr SetBottomRadius_NativeFunction;
    static readonly int SetBottomRadius_ParamsSize;
    static readonly int SetBottomRadius_NewValue_Offset;
    
    public void SetBottomRadius(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBottomRadius_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetBottomRadius_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBottomRadius_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:SetAtmosphereHeight
    static readonly IntPtr SetAtmosphereHeight_NativeFunction;
    static readonly int SetAtmosphereHeight_ParamsSize;
    static readonly int SetAtmosphereHeight_NewValue_Offset;
    
    public void SetAtmosphereHeight(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAtmosphereHeight_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAtmosphereHeight_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAtmosphereHeight_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:SetAerialPespectiveViewDistanceScale
    static readonly IntPtr SetAerialPespectiveViewDistanceScale_NativeFunction;
    static readonly int SetAerialPespectiveViewDistanceScale_ParamsSize;
    static readonly int SetAerialPespectiveViewDistanceScale_NewValue_Offset;
    
    public void SetAerialPespectiveViewDistanceScale(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAerialPespectiveViewDistanceScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetAerialPespectiveViewDistanceScale_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAerialPespectiveViewDistanceScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:ResetAtmosphereLightDirectionOverride
    static readonly IntPtr ResetAtmosphereLightDirectionOverride_NativeFunction;
    static readonly int ResetAtmosphereLightDirectionOverride_ParamsSize;
    static readonly int ResetAtmosphereLightDirectionOverride_AtmosphereLightIndex_Offset;
    
    public void ResetAtmosphereLightDirectionOverride(int atmosphereLightIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ResetAtmosphereLightDirectionOverride_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ResetAtmosphereLightDirectionOverride_AtmosphereLightIndex_Offset), 0, null, atmosphereLightIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetAtmosphereLightDirectionOverride_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:OverrideAtmosphereLightDirection
    static readonly IntPtr OverrideAtmosphereLightDirection_NativeFunction;
    static readonly int OverrideAtmosphereLightDirection_ParamsSize;
    static readonly int OverrideAtmosphereLightDirection_AtmosphereLightIndex_Offset;
    static readonly int OverrideAtmosphereLightDirection_LightDirection_Offset;
    
    public void OverrideAtmosphereLightDirection(int atmosphereLightIndex, System.DoubleNumerics.Vector3 lightDirection)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[OverrideAtmosphereLightDirection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, OverrideAtmosphereLightDirection_AtmosphereLightIndex_Offset), 0, null, atmosphereLightIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, OverrideAtmosphereLightDirection_LightDirection_Offset), 0, null, lightDirection);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OverrideAtmosphereLightDirection_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:IsAtmosphereLightDirectionOverriden
    static readonly IntPtr IsAtmosphereLightDirectionOverriden_NativeFunction;
    static readonly int IsAtmosphereLightDirectionOverriden_ParamsSize;
    static readonly int IsAtmosphereLightDirectionOverriden_AtmosphereLightIndex_Offset;
    static readonly int IsAtmosphereLightDirectionOverriden_ReturnValue_Offset;
    
    public bool IsAtmosphereLightDirectionOverriden(int atmosphereLightIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsAtmosphereLightDirectionOverriden_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, IsAtmosphereLightDirectionOverriden_AtmosphereLightIndex_Offset), 0, null, atmosphereLightIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsAtmosphereLightDirectionOverriden_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsAtmosphereLightDirectionOverriden_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:GetOverridenAtmosphereLightDirection
    static readonly IntPtr GetOverridenAtmosphereLightDirection_NativeFunction;
    static readonly int GetOverridenAtmosphereLightDirection_ParamsSize;
    static readonly int GetOverridenAtmosphereLightDirection_AtmosphereLightIndex_Offset;
    static readonly int GetOverridenAtmosphereLightDirection_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetOverridenAtmosphereLightDirection(int atmosphereLightIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOverridenAtmosphereLightDirection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetOverridenAtmosphereLightDirection_AtmosphereLightIndex_Offset), 0, null, atmosphereLightIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOverridenAtmosphereLightDirection_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetOverridenAtmosphereLightDirection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SkyAtmosphereComponent:GetAtmosphereTransmitanceOnGroundAtPlanetTop
    static readonly IntPtr GetAtmosphereTransmitanceOnGroundAtPlanetTop_NativeFunction;
    static readonly int GetAtmosphereTransmitanceOnGroundAtPlanetTop_ParamsSize;
    static readonly int GetAtmosphereTransmitanceOnGroundAtPlanetTop_DirectionalLight_Offset;
    static readonly int GetAtmosphereTransmitanceOnGroundAtPlanetTop_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor GetAtmosphereTransmitanceOnGroundAtPlanetTop(UnrealSharp.Engine.DirectionalLightComponent directionalLight)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAtmosphereTransmitanceOnGroundAtPlanetTop_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.DirectionalLightComponent>.ToNative(IntPtr.Add(ParamsBuffer, GetAtmosphereTransmitanceOnGroundAtPlanetTop_DirectionalLight_Offset), 0, null, directionalLight);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAtmosphereTransmitanceOnGroundAtPlanetTop_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, GetAtmosphereTransmitanceOnGroundAtPlanetTop_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
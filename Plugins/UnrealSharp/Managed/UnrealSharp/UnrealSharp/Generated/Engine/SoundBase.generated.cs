// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
abstract public partial class SoundBase : UnrealSharp.CoreUObject.Object
{
    
    static SoundBase()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SoundBase");
        
        SoundClassObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SoundClassObject");
        bOverrideConcurrency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOverrideConcurrency");
        bOverrideConcurrency_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bOverrideConcurrency");
        bEnableBusSends_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableBusSends");
        bEnableBusSends_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableBusSends");
        bBypassVolumeScaleForPriority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bBypassVolumeScaleForPriority");
        bBypassVolumeScaleForPriority_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bBypassVolumeScaleForPriority");
        VirtualizationMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VirtualizationMode");
        ConcurrencyOverrides_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ConcurrencyOverrides");
        Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Duration");
        MaxDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxDistance");
        TotalSamples_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TotalSamples");
        Priority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Priority");
        SoundSubmixObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SoundSubmixObject");
        SoundSubmixSends_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SoundSubmixSends");
        SoundSubmixSends_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "SoundSubmixSends");
        SourceEffectChain_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SourceEffectChain");
        BusSends_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BusSends");
        BusSends_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "BusSends");
        PreEffectBusSends_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PreEffectBusSends");
        PreEffectBusSends_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "PreEffectBusSends");
        
        
        
    }
    
    protected SoundBase(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Engine.SoundBase:SoundClassObject
    static readonly int SoundClassObject_Offset;
    
    public UnrealSharp.Engine.SoundClass SoundClassObject
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.SoundClass>.FromNative(IntPtr.Add(NativeObject, SoundClassObject_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.SoundBase:bOverrideConcurrency
    static readonly int bOverrideConcurrency_Offset;
    static readonly IntPtr bOverrideConcurrency_NativeProperty;
    
    public bool bOverrideConcurrency
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bOverrideConcurrency_NativeProperty, bOverrideConcurrency_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bOverrideConcurrency_NativeProperty, bOverrideConcurrency_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.SoundBase:bEnableBusSends
    static readonly int bEnableBusSends_Offset;
    static readonly IntPtr bEnableBusSends_NativeProperty;
    
    public bool bEnableBusSends
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableBusSends_NativeProperty, bEnableBusSends_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bEnableBusSends_NativeProperty, bEnableBusSends_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.SoundBase:bBypassVolumeScaleForPriority
    static readonly int bBypassVolumeScaleForPriority_Offset;
    static readonly IntPtr bBypassVolumeScaleForPriority_NativeProperty;
    
    public bool bBypassVolumeScaleForPriority
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bBypassVolumeScaleForPriority_NativeProperty, bBypassVolumeScaleForPriority_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bBypassVolumeScaleForPriority_NativeProperty, bBypassVolumeScaleForPriority_Offset, value);
        }
    }
    
    // EnumProperty /Script/Engine.SoundBase:VirtualizationMode
    static readonly int VirtualizationMode_Offset;
    
    public UnrealSharp.Engine.EVirtualizationMode VirtualizationMode
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EVirtualizationMode>.FromNative(IntPtr.Add(NativeObject, VirtualizationMode_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EVirtualizationMode>.ToNative(IntPtr.Add(NativeObject, VirtualizationMode_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.SoundBase:ConcurrencyOverrides
    static readonly int ConcurrencyOverrides_Offset;
    
    public UnrealSharp.Engine.SoundConcurrencySettings ConcurrencyOverrides
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.SoundConcurrencySettingsMarshaler.FromNative(IntPtr.Add(NativeObject, ConcurrencyOverrides_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.Engine.SoundConcurrencySettingsMarshaler.ToNative(IntPtr.Add(NativeObject, ConcurrencyOverrides_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.SoundBase:Duration
    static readonly int Duration_Offset;
    
    public float Duration
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Duration_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.SoundBase:MaxDistance
    static readonly int MaxDistance_Offset;
    
    public float MaxDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxDistance_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.SoundBase:TotalSamples
    static readonly int TotalSamples_Offset;
    
    public float TotalSamples
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, TotalSamples_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.SoundBase:Priority
    static readonly int Priority_Offset;
    
    public float Priority
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Priority_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Priority_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/Engine.SoundBase:SoundSubmixObject
    static readonly int SoundSubmixObject_Offset;
    
    public UnrealSharp.Engine.SoundSubmixBase SoundSubmixObject
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.SoundSubmixBase>.FromNative(IntPtr.Add(NativeObject, SoundSubmixObject_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.SoundSubmixBase>.ToNative(IntPtr.Add(NativeObject, SoundSubmixObject_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/Engine.SoundBase:SoundSubmixSends
    static readonly int SoundSubmixSends_Offset;
    static readonly IntPtr SoundSubmixSends_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.SoundSubmixSendInfo> SoundSubmixSends_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.SoundSubmixSendInfo> SoundSubmixSends
    {
        get
        {
            if(SoundSubmixSends_Wrapper == null)
            {
                SoundSubmixSends_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.SoundSubmixSendInfo>(1, SoundSubmixSends_NativeProperty, UnrealSharp.Engine.SoundSubmixSendInfoMarshaler.ToNative, UnrealSharp.Engine.SoundSubmixSendInfoMarshaler.FromNative);
            }
            
            return SoundSubmixSends_Wrapper.FromNative(IntPtr.Add(NativeObject,SoundSubmixSends_Offset),0,this);
        }
    }
    
    // ObjectProperty /Script/Engine.SoundBase:SourceEffectChain
    static readonly int SourceEffectChain_Offset;
    
    public UnrealSharp.Engine.SoundEffectSourcePresetChain SourceEffectChain
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.SoundEffectSourcePresetChain>.FromNative(IntPtr.Add(NativeObject, SourceEffectChain_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.SoundEffectSourcePresetChain>.ToNative(IntPtr.Add(NativeObject, SourceEffectChain_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/Engine.SoundBase:BusSends
    static readonly int BusSends_Offset;
    static readonly IntPtr BusSends_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.SoundSourceBusSendInfo> BusSends_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.SoundSourceBusSendInfo> BusSends
    {
        get
        {
            if(BusSends_Wrapper == null)
            {
                BusSends_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.SoundSourceBusSendInfo>(1, BusSends_NativeProperty, UnrealSharp.Engine.SoundSourceBusSendInfoMarshaler.ToNative, UnrealSharp.Engine.SoundSourceBusSendInfoMarshaler.FromNative);
            }
            
            return BusSends_Wrapper.FromNative(IntPtr.Add(NativeObject,BusSends_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/Engine.SoundBase:PreEffectBusSends
    static readonly int PreEffectBusSends_Offset;
    static readonly IntPtr PreEffectBusSends_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.SoundSourceBusSendInfo> PreEffectBusSends_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.SoundSourceBusSendInfo> PreEffectBusSends
    {
        get
        {
            if(PreEffectBusSends_Wrapper == null)
            {
                PreEffectBusSends_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.SoundSourceBusSendInfo>(1, PreEffectBusSends_NativeProperty, UnrealSharp.Engine.SoundSourceBusSendInfoMarshaler.ToNative, UnrealSharp.Engine.SoundSourceBusSendInfoMarshaler.FromNative);
            }
            
            return PreEffectBusSends_Wrapper.FromNative(IntPtr.Add(NativeObject,PreEffectBusSends_Offset),0,this);
        }
    }
    
    
}
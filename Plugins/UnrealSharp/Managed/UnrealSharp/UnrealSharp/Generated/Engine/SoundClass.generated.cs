// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class SoundClass : UnrealSharp.CoreUObject.Object
{
    
    static SoundClass()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SoundClass");
        
        Properties_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Properties");
        ChildClasses_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ChildClasses");
        ChildClasses_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "ChildClasses");
        PassiveSoundMixModifiers_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PassiveSoundMixModifiers");
        PassiveSoundMixModifiers_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "PassiveSoundMixModifiers");
        ParentClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ParentClass");
        
        
        
    }
    
    protected SoundClass(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/Engine.SoundClass:Properties
    static readonly int Properties_Offset;
    
    public UnrealSharp.Engine.SoundClassProperties Properties
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.SoundClassPropertiesMarshaler.FromNative(IntPtr.Add(NativeObject, Properties_Offset), 0, this);
        }
    }
    
    // ArrayProperty /Script/Engine.SoundClass:ChildClasses
    static readonly int ChildClasses_Offset;
    static readonly IntPtr ChildClasses_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.SoundClass> ChildClasses_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.Engine.SoundClass> ChildClasses
    {
        get
        {
            if(ChildClasses_Wrapper == null)
            {
                ChildClasses_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.SoundClass>(1, ChildClasses_NativeProperty, ObjectMarshaller<UnrealSharp.Engine.SoundClass>.ToNative, ObjectMarshaller<UnrealSharp.Engine.SoundClass>.FromNative);
            }
            
            return ChildClasses_Wrapper.FromNative(IntPtr.Add(NativeObject,ChildClasses_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/Engine.SoundClass:PassiveSoundMixModifiers
    static readonly int PassiveSoundMixModifiers_Offset;
    static readonly IntPtr PassiveSoundMixModifiers_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.PassiveSoundMixModifier> PassiveSoundMixModifiers_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.Engine.PassiveSoundMixModifier> PassiveSoundMixModifiers
    {
        get
        {
            if(PassiveSoundMixModifiers_Wrapper == null)
            {
                PassiveSoundMixModifiers_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.PassiveSoundMixModifier>(1, PassiveSoundMixModifiers_NativeProperty, UnrealSharp.Engine.PassiveSoundMixModifierMarshaler.ToNative, UnrealSharp.Engine.PassiveSoundMixModifierMarshaler.FromNative);
            }
            
            return PassiveSoundMixModifiers_Wrapper.FromNative(IntPtr.Add(NativeObject,PassiveSoundMixModifiers_Offset),0,this);
        }
    }
    
    // ObjectProperty /Script/Engine.SoundClass:ParentClass
    static readonly int ParentClass_Offset;
    
    public UnrealSharp.Engine.SoundClass ParentClass
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.SoundClass>.FromNative(IntPtr.Add(NativeObject, ParentClass_Offset), 0, this);
        }
    }
    
    
}
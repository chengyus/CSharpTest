// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class SoundSubmix : UnrealSharp.Engine.SoundSubmixWithParentBase
{
    
    static SoundSubmix()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SoundSubmix");
        
        bMuteWhenBackgrounded_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bMuteWhenBackgrounded");
        bMuteWhenBackgrounded_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bMuteWhenBackgrounded");
        SubmixEffectChain_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SubmixEffectChain");
        SubmixEffectChain_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "SubmixEffectChain");
        AmbisonicsPluginSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AmbisonicsPluginSettings");
        EnvelopeFollowerAttackTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "EnvelopeFollowerAttackTime");
        EnvelopeFollowerReleaseTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "EnvelopeFollowerReleaseTime");
        OutputVolume_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OutputVolume");
        WetLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WetLevel");
        DryLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DryLevel");
        OutputVolumeModulation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OutputVolumeModulation");
        WetLevelModulation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WetLevelModulation");
        DryLevelModulation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DryLevelModulation");
        bSendToAudioLink_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSendToAudioLink");
        bSendToAudioLink_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bSendToAudioLink");
        AudioLinkSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AudioLinkSettings");
        
        StopSpectralAnalysis_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopSpectralAnalysis");
        StopSpectralAnalysis_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StopSpectralAnalysis_NativeFunction);
        StopSpectralAnalysis_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopSpectralAnalysis_NativeFunction, "WorldContextObject");
        StopRecordingOutput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopRecordingOutput");
        StopRecordingOutput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StopRecordingOutput_NativeFunction);
        StopRecordingOutput_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopRecordingOutput_NativeFunction, "WorldContextObject");
        StopRecordingOutput_ExportType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopRecordingOutput_NativeFunction, "ExportType");
        StopRecordingOutput_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopRecordingOutput_NativeFunction, "Name");
        StopRecordingOutput_Path_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopRecordingOutput_NativeFunction, "Path");
        StopRecordingOutput_ExistingSoundWaveToOverwrite_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopRecordingOutput_NativeFunction, "ExistingSoundWaveToOverwrite");
        StopEnvelopeFollowing_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopEnvelopeFollowing");
        StopEnvelopeFollowing_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StopEnvelopeFollowing_NativeFunction);
        StopEnvelopeFollowing_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopEnvelopeFollowing_NativeFunction, "WorldContextObject");
        StartSpectralAnalysis_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartSpectralAnalysis");
        StartSpectralAnalysis_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StartSpectralAnalysis_NativeFunction);
        StartSpectralAnalysis_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartSpectralAnalysis_NativeFunction, "WorldContextObject");
        StartSpectralAnalysis_FFTSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartSpectralAnalysis_NativeFunction, "FFTSize");
        StartSpectralAnalysis_InterpolationMethod_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartSpectralAnalysis_NativeFunction, "InterpolationMethod");
        StartSpectralAnalysis_WindowType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartSpectralAnalysis_NativeFunction, "WindowType");
        StartSpectralAnalysis_HopSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartSpectralAnalysis_NativeFunction, "HopSize");
        StartSpectralAnalysis_SpectrumType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartSpectralAnalysis_NativeFunction, "SpectrumType");
        StartRecordingOutput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartRecordingOutput");
        StartRecordingOutput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StartRecordingOutput_NativeFunction);
        StartRecordingOutput_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartRecordingOutput_NativeFunction, "WorldContextObject");
        StartRecordingOutput_ExpectedDuration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartRecordingOutput_NativeFunction, "ExpectedDuration");
        StartEnvelopeFollowing_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartEnvelopeFollowing");
        StartEnvelopeFollowing_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StartEnvelopeFollowing_NativeFunction);
        StartEnvelopeFollowing_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartEnvelopeFollowing_NativeFunction, "WorldContextObject");
        SetSubmixWetLevel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSubmixWetLevel");
        SetSubmixWetLevel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSubmixWetLevel_NativeFunction);
        SetSubmixWetLevel_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSubmixWetLevel_NativeFunction, "WorldContextObject");
        SetSubmixWetLevel_InWetLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSubmixWetLevel_NativeFunction, "InWetLevel");
        SetSubmixOutputVolume_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSubmixOutputVolume");
        SetSubmixOutputVolume_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSubmixOutputVolume_NativeFunction);
        SetSubmixOutputVolume_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSubmixOutputVolume_NativeFunction, "WorldContextObject");
        SetSubmixOutputVolume_InOutputVolume_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSubmixOutputVolume_NativeFunction, "InOutputVolume");
        SetSubmixDryLevel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSubmixDryLevel");
        SetSubmixDryLevel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSubmixDryLevel_NativeFunction);
        SetSubmixDryLevel_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSubmixDryLevel_NativeFunction, "WorldContextObject");
        SetSubmixDryLevel_InDryLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSubmixDryLevel_NativeFunction, "InDryLevel");
        
        
    }
    
    protected SoundSubmix(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/Engine.SoundSubmix:bMuteWhenBackgrounded
    static readonly int bMuteWhenBackgrounded_Offset;
    static readonly IntPtr bMuteWhenBackgrounded_NativeProperty;
    
    public bool bMuteWhenBackgrounded
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bMuteWhenBackgrounded_NativeProperty, bMuteWhenBackgrounded_Offset);
        }
    }
    
    // ArrayProperty /Script/Engine.SoundSubmix:SubmixEffectChain
    static readonly int SubmixEffectChain_Offset;
    static readonly IntPtr SubmixEffectChain_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.SoundEffectSubmixPreset> SubmixEffectChain_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.Engine.SoundEffectSubmixPreset> SubmixEffectChain
    {
        get
        {
            if(SubmixEffectChain_Wrapper == null)
            {
                SubmixEffectChain_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.SoundEffectSubmixPreset>(1, SubmixEffectChain_NativeProperty, ObjectMarshaller<UnrealSharp.Engine.SoundEffectSubmixPreset>.ToNative, ObjectMarshaller<UnrealSharp.Engine.SoundEffectSubmixPreset>.FromNative);
            }
            
            return SubmixEffectChain_Wrapper.FromNative(IntPtr.Add(NativeObject,SubmixEffectChain_Offset),0,this);
        }
    }
    
    // ObjectProperty /Script/Engine.SoundSubmix:AmbisonicsPluginSettings
    static readonly int AmbisonicsPluginSettings_Offset;
    
    public UnrealSharp.AudioExtensions.SoundfieldEncodingSettingsBase AmbisonicsPluginSettings
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.AudioExtensions.SoundfieldEncodingSettingsBase>.FromNative(IntPtr.Add(NativeObject, AmbisonicsPluginSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.AudioExtensions.SoundfieldEncodingSettingsBase>.ToNative(IntPtr.Add(NativeObject, AmbisonicsPluginSettings_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.SoundSubmix:EnvelopeFollowerAttackTime
    static readonly int EnvelopeFollowerAttackTime_Offset;
    
    public int EnvelopeFollowerAttackTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, EnvelopeFollowerAttackTime_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, EnvelopeFollowerAttackTime_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.SoundSubmix:EnvelopeFollowerReleaseTime
    static readonly int EnvelopeFollowerReleaseTime_Offset;
    
    public int EnvelopeFollowerReleaseTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, EnvelopeFollowerReleaseTime_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, EnvelopeFollowerReleaseTime_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.SoundSubmix:OutputVolume
    static readonly int OutputVolume_Offset;
    
    public float OutputVolume
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, OutputVolume_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, OutputVolume_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.SoundSubmix:WetLevel
    static readonly int WetLevel_Offset;
    
    public float WetLevel
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, WetLevel_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, WetLevel_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.SoundSubmix:DryLevel
    static readonly int DryLevel_Offset;
    
    public float DryLevel
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, DryLevel_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, DryLevel_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.SoundSubmix:OutputVolumeModulation
    static readonly int OutputVolumeModulation_Offset;
    
    public UnrealSharp.Engine.SoundModulationDestinationSettings OutputVolumeModulation
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.SoundModulationDestinationSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, OutputVolumeModulation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.Engine.SoundModulationDestinationSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, OutputVolumeModulation_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.SoundSubmix:WetLevelModulation
    static readonly int WetLevelModulation_Offset;
    
    public UnrealSharp.Engine.SoundModulationDestinationSettings WetLevelModulation
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.SoundModulationDestinationSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, WetLevelModulation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.Engine.SoundModulationDestinationSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, WetLevelModulation_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.SoundSubmix:DryLevelModulation
    static readonly int DryLevelModulation_Offset;
    
    public UnrealSharp.Engine.SoundModulationDestinationSettings DryLevelModulation
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.SoundModulationDestinationSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, DryLevelModulation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.Engine.SoundModulationDestinationSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, DryLevelModulation_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.SoundSubmix:bSendToAudioLink
    static readonly int bSendToAudioLink_Offset;
    static readonly IntPtr bSendToAudioLink_NativeProperty;
    
    public bool bSendToAudioLink
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bSendToAudioLink_NativeProperty, bSendToAudioLink_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bSendToAudioLink_NativeProperty, bSendToAudioLink_Offset, value);
        }
    }
    
    // ObjectProperty /Script/Engine.SoundSubmix:AudioLinkSettings
    static readonly int AudioLinkSettings_Offset;
    
    public UnrealSharp.AudioLinkCore.AudioLinkSettingsAbstract AudioLinkSettings
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.AudioLinkCore.AudioLinkSettingsAbstract>.FromNative(IntPtr.Add(NativeObject, AudioLinkSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.AudioLinkCore.AudioLinkSettingsAbstract>.ToNative(IntPtr.Add(NativeObject, AudioLinkSettings_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Engine.SoundSubmix:StopSpectralAnalysis
    static readonly IntPtr StopSpectralAnalysis_NativeFunction;
    static readonly int StopSpectralAnalysis_ParamsSize;
    static readonly int StopSpectralAnalysis_WorldContextObject_Offset;
    
    public void StopSpectralAnalysis(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StopSpectralAnalysis_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, StopSpectralAnalysis_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopSpectralAnalysis_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SoundSubmix:StopRecordingOutput
    static readonly IntPtr StopRecordingOutput_NativeFunction;
    static readonly int StopRecordingOutput_ParamsSize;
    static readonly int StopRecordingOutput_WorldContextObject_Offset;
    static readonly int StopRecordingOutput_ExportType_Offset;
    static readonly int StopRecordingOutput_Name_Offset;
    static readonly int StopRecordingOutput_Path_Offset;
    static readonly int StopRecordingOutput_ExistingSoundWaveToOverwrite_Offset;
    
    public void StopRecordingOutput(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.EAudioRecordingExportType exportType, string name, string path, UnrealSharp.Engine.SoundWave existingSoundWaveToOverwrite = default(UnrealSharp.Engine.SoundWave))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StopRecordingOutput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, StopRecordingOutput_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<UnrealSharp.Engine.EAudioRecordingExportType>.ToNative(IntPtr.Add(ParamsBuffer, StopRecordingOutput_ExportType_Offset), 0, null, exportType);
            IntPtr Name_NativePtr = IntPtr.Add(ParamsBuffer,StopRecordingOutput_Name_Offset);
            StringMarshaller.ToNative(Name_NativePtr,0,null,name);
            IntPtr Path_NativePtr = IntPtr.Add(ParamsBuffer,StopRecordingOutput_Path_Offset);
            StringMarshaller.ToNative(Path_NativePtr,0,null,path);
            ObjectMarshaller<UnrealSharp.Engine.SoundWave>.ToNative(IntPtr.Add(ParamsBuffer, StopRecordingOutput_ExistingSoundWaveToOverwrite_Offset), 0, null, existingSoundWaveToOverwrite);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopRecordingOutput_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Name_NativePtr, 0);
            StringMarshaller.DestructInstance(Path_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.SoundSubmix:StopEnvelopeFollowing
    static readonly IntPtr StopEnvelopeFollowing_NativeFunction;
    static readonly int StopEnvelopeFollowing_ParamsSize;
    static readonly int StopEnvelopeFollowing_WorldContextObject_Offset;
    
    public void StopEnvelopeFollowing(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StopEnvelopeFollowing_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, StopEnvelopeFollowing_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopEnvelopeFollowing_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SoundSubmix:StartSpectralAnalysis
    static readonly IntPtr StartSpectralAnalysis_NativeFunction;
    static readonly int StartSpectralAnalysis_ParamsSize;
    static readonly int StartSpectralAnalysis_WorldContextObject_Offset;
    static readonly int StartSpectralAnalysis_FFTSize_Offset;
    static readonly int StartSpectralAnalysis_InterpolationMethod_Offset;
    static readonly int StartSpectralAnalysis_WindowType_Offset;
    static readonly int StartSpectralAnalysis_HopSize_Offset;
    static readonly int StartSpectralAnalysis_SpectrumType_Offset;
    
    public void StartSpectralAnalysis(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.EFFTSize fFTSize = UnrealSharp.Engine.EFFTSize.DefaultSize, UnrealSharp.Engine.EFFTPeakInterpolationMethod interpolationMethod = UnrealSharp.Engine.EFFTPeakInterpolationMethod.Linear, UnrealSharp.Engine.EFFTWindowType windowType = UnrealSharp.Engine.EFFTWindowType.Hann, float hopSize = 0.000000f, UnrealSharp.Engine.EAudioSpectrumType spectrumType = UnrealSharp.Engine.EAudioSpectrumType.MagnitudeSpectrum)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StartSpectralAnalysis_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, StartSpectralAnalysis_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<UnrealSharp.Engine.EFFTSize>.ToNative(IntPtr.Add(ParamsBuffer, StartSpectralAnalysis_FFTSize_Offset), 0, null, fFTSize);
            BlittableMarshaller<UnrealSharp.Engine.EFFTPeakInterpolationMethod>.ToNative(IntPtr.Add(ParamsBuffer, StartSpectralAnalysis_InterpolationMethod_Offset), 0, null, interpolationMethod);
            BlittableMarshaller<UnrealSharp.Engine.EFFTWindowType>.ToNative(IntPtr.Add(ParamsBuffer, StartSpectralAnalysis_WindowType_Offset), 0, null, windowType);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, StartSpectralAnalysis_HopSize_Offset), 0, null, hopSize);
            BlittableMarshaller<UnrealSharp.Engine.EAudioSpectrumType>.ToNative(IntPtr.Add(ParamsBuffer, StartSpectralAnalysis_SpectrumType_Offset), 0, null, spectrumType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StartSpectralAnalysis_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SoundSubmix:StartRecordingOutput
    static readonly IntPtr StartRecordingOutput_NativeFunction;
    static readonly int StartRecordingOutput_ParamsSize;
    static readonly int StartRecordingOutput_WorldContextObject_Offset;
    static readonly int StartRecordingOutput_ExpectedDuration_Offset;
    
    public void StartRecordingOutput(UnrealSharp.CoreUObject.Object worldContextObject, float expectedDuration)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StartRecordingOutput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, StartRecordingOutput_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, StartRecordingOutput_ExpectedDuration_Offset), 0, null, expectedDuration);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StartRecordingOutput_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SoundSubmix:StartEnvelopeFollowing
    static readonly IntPtr StartEnvelopeFollowing_NativeFunction;
    static readonly int StartEnvelopeFollowing_ParamsSize;
    static readonly int StartEnvelopeFollowing_WorldContextObject_Offset;
    
    public void StartEnvelopeFollowing(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StartEnvelopeFollowing_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, StartEnvelopeFollowing_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StartEnvelopeFollowing_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SoundSubmix:SetSubmixWetLevel
    static readonly IntPtr SetSubmixWetLevel_NativeFunction;
    static readonly int SetSubmixWetLevel_ParamsSize;
    static readonly int SetSubmixWetLevel_WorldContextObject_Offset;
    static readonly int SetSubmixWetLevel_InWetLevel_Offset;
    
    public void SetSubmixWetLevel(UnrealSharp.CoreUObject.Object worldContextObject, float inWetLevel)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSubmixWetLevel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetSubmixWetLevel_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSubmixWetLevel_InWetLevel_Offset), 0, null, inWetLevel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSubmixWetLevel_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SoundSubmix:SetSubmixOutputVolume
    static readonly IntPtr SetSubmixOutputVolume_NativeFunction;
    static readonly int SetSubmixOutputVolume_ParamsSize;
    static readonly int SetSubmixOutputVolume_WorldContextObject_Offset;
    static readonly int SetSubmixOutputVolume_InOutputVolume_Offset;
    
    public void SetSubmixOutputVolume(UnrealSharp.CoreUObject.Object worldContextObject, float inOutputVolume)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSubmixOutputVolume_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetSubmixOutputVolume_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSubmixOutputVolume_InOutputVolume_Offset), 0, null, inOutputVolume);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSubmixOutputVolume_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SoundSubmix:SetSubmixDryLevel
    static readonly IntPtr SetSubmixDryLevel_NativeFunction;
    static readonly int SetSubmixDryLevel_ParamsSize;
    static readonly int SetSubmixDryLevel_WorldContextObject_Offset;
    static readonly int SetSubmixDryLevel_InDryLevel_Offset;
    
    public void SetSubmixDryLevel(UnrealSharp.CoreUObject.Object worldContextObject, float inDryLevel)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSubmixDryLevel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetSubmixDryLevel_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSubmixDryLevel_InDryLevel_Offset), 0, null, inDryLevel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSubmixDryLevel_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class SplineComponent : UnrealSharp.Engine.PrimitiveComponent
{
    
    static SplineComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SplineComponent");
        
        Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Duration");
        bStationaryEndpoints_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bStationaryEndpoints");
        bInputSplinePointsToConstructionScript_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bInputSplinePointsToConstructionScript");
        bDrawDebug_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bDrawDebug");
        DefaultUpVector_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultUpVector");
        
        UpdateSpline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UpdateSpline");
        SetWorldLocationAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWorldLocationAtSplinePoint");
        SetWorldLocationAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWorldLocationAtSplinePoint_NativeFunction);
        SetWorldLocationAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWorldLocationAtSplinePoint_NativeFunction, "PointIndex");
        SetWorldLocationAtSplinePoint_InLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWorldLocationAtSplinePoint_NativeFunction, "InLocation");
        SetUpVectorAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetUpVectorAtSplinePoint");
        SetUpVectorAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetUpVectorAtSplinePoint_NativeFunction);
        SetUpVectorAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUpVectorAtSplinePoint_NativeFunction, "PointIndex");
        SetUpVectorAtSplinePoint_InUpVector_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUpVectorAtSplinePoint_NativeFunction, "InUpVector");
        SetUpVectorAtSplinePoint_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUpVectorAtSplinePoint_NativeFunction, "CoordinateSpace");
        SetUpVectorAtSplinePoint_bUpdateSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUpVectorAtSplinePoint_NativeFunction, "bUpdateSpline");
        SetUnselectedSplineSegmentColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetUnselectedSplineSegmentColor");
        SetUnselectedSplineSegmentColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetUnselectedSplineSegmentColor_NativeFunction);
        SetUnselectedSplineSegmentColor_SegmentColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetUnselectedSplineSegmentColor_NativeFunction, "SegmentColor");
        SetTangentsAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTangentsAtSplinePoint");
        SetTangentsAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTangentsAtSplinePoint_NativeFunction);
        SetTangentsAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTangentsAtSplinePoint_NativeFunction, "PointIndex");
        SetTangentsAtSplinePoint_InArriveTangent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTangentsAtSplinePoint_NativeFunction, "InArriveTangent");
        SetTangentsAtSplinePoint_InLeaveTangent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTangentsAtSplinePoint_NativeFunction, "InLeaveTangent");
        SetTangentsAtSplinePoint_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTangentsAtSplinePoint_NativeFunction, "CoordinateSpace");
        SetTangentsAtSplinePoint_bUpdateSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTangentsAtSplinePoint_NativeFunction, "bUpdateSpline");
        SetTangentColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTangentColor");
        SetTangentColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTangentColor_NativeFunction);
        SetTangentColor_TangentColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTangentColor_NativeFunction, "TangentColor");
        SetTangentAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTangentAtSplinePoint");
        SetTangentAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTangentAtSplinePoint_NativeFunction);
        SetTangentAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTangentAtSplinePoint_NativeFunction, "PointIndex");
        SetTangentAtSplinePoint_InTangent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTangentAtSplinePoint_NativeFunction, "InTangent");
        SetTangentAtSplinePoint_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTangentAtSplinePoint_NativeFunction, "CoordinateSpace");
        SetTangentAtSplinePoint_bUpdateSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTangentAtSplinePoint_NativeFunction, "bUpdateSpline");
        SetSplineWorldPoints_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSplineWorldPoints");
        SetSplineWorldPoints_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSplineWorldPoints_NativeFunction);
        SetSplineWorldPoints_Points_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSplineWorldPoints_NativeFunction, "Points");
        SetSplineWorldPoints_Points_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetSplineWorldPoints_NativeFunction, "Points");
        SetSplinePointType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSplinePointType");
        SetSplinePointType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSplinePointType_NativeFunction);
        SetSplinePointType_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSplinePointType_NativeFunction, "PointIndex");
        SetSplinePointType_Type_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSplinePointType_NativeFunction, "Type");
        SetSplinePointType_bUpdateSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSplinePointType_NativeFunction, "bUpdateSpline");
        SetSplinePoints_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSplinePoints");
        SetSplinePoints_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSplinePoints_NativeFunction);
        SetSplinePoints_Points_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSplinePoints_NativeFunction, "Points");
        SetSplinePoints_Points_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetSplinePoints_NativeFunction, "Points");
        SetSplinePoints_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSplinePoints_NativeFunction, "CoordinateSpace");
        SetSplinePoints_bUpdateSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSplinePoints_NativeFunction, "bUpdateSpline");
        SetSplineLocalPoints_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSplineLocalPoints");
        SetSplineLocalPoints_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSplineLocalPoints_NativeFunction);
        SetSplineLocalPoints_Points_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSplineLocalPoints_NativeFunction, "Points");
        SetSplineLocalPoints_Points_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetSplineLocalPoints_NativeFunction, "Points");
        SetSelectedSplineSegmentColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSelectedSplineSegmentColor");
        SetSelectedSplineSegmentColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSelectedSplineSegmentColor_NativeFunction);
        SetSelectedSplineSegmentColor_SegmentColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSelectedSplineSegmentColor_NativeFunction, "SegmentColor");
        SetScaleAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetScaleAtSplinePoint");
        SetScaleAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetScaleAtSplinePoint_NativeFunction);
        SetScaleAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetScaleAtSplinePoint_NativeFunction, "PointIndex");
        SetScaleAtSplinePoint_InScaleVector_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetScaleAtSplinePoint_NativeFunction, "InScaleVector");
        SetScaleAtSplinePoint_bUpdateSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetScaleAtSplinePoint_NativeFunction, "bUpdateSpline");
        SetRotationAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRotationAtSplinePoint");
        SetRotationAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRotationAtSplinePoint_NativeFunction);
        SetRotationAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRotationAtSplinePoint_NativeFunction, "PointIndex");
        SetRotationAtSplinePoint_InRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRotationAtSplinePoint_NativeFunction, "InRotation");
        SetRotationAtSplinePoint_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRotationAtSplinePoint_NativeFunction, "CoordinateSpace");
        SetRotationAtSplinePoint_bUpdateSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRotationAtSplinePoint_NativeFunction, "bUpdateSpline");
        SetLocationAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocationAtSplinePoint");
        SetLocationAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocationAtSplinePoint_NativeFunction);
        SetLocationAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocationAtSplinePoint_NativeFunction, "PointIndex");
        SetLocationAtSplinePoint_InLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocationAtSplinePoint_NativeFunction, "InLocation");
        SetLocationAtSplinePoint_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocationAtSplinePoint_NativeFunction, "CoordinateSpace");
        SetLocationAtSplinePoint_bUpdateSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocationAtSplinePoint_NativeFunction, "bUpdateSpline");
        SetDrawDebug_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDrawDebug");
        SetDrawDebug_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDrawDebug_NativeFunction);
        SetDrawDebug_bShow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDrawDebug_NativeFunction, "bShow");
        SetDefaultUpVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDefaultUpVector");
        SetDefaultUpVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDefaultUpVector_NativeFunction);
        SetDefaultUpVector_UpVector_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefaultUpVector_NativeFunction, "UpVector");
        SetDefaultUpVector_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDefaultUpVector_NativeFunction, "CoordinateSpace");
        SetClosedLoopAtPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetClosedLoopAtPosition");
        SetClosedLoopAtPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetClosedLoopAtPosition_NativeFunction);
        SetClosedLoopAtPosition_bInClosedLoop_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetClosedLoopAtPosition_NativeFunction, "bInClosedLoop");
        SetClosedLoopAtPosition_Key_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetClosedLoopAtPosition_NativeFunction, "Key");
        SetClosedLoopAtPosition_bUpdateSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetClosedLoopAtPosition_NativeFunction, "bUpdateSpline");
        SetClosedLoop_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetClosedLoop");
        SetClosedLoop_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetClosedLoop_NativeFunction);
        SetClosedLoop_bInClosedLoop_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetClosedLoop_NativeFunction, "bInClosedLoop");
        SetClosedLoop_bUpdateSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetClosedLoop_NativeFunction, "bUpdateSpline");
        RemoveSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveSplinePoint");
        RemoveSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveSplinePoint_NativeFunction);
        RemoveSplinePoint_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSplinePoint_NativeFunction, "Index");
        RemoveSplinePoint_bUpdateSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSplinePoint_NativeFunction, "bUpdateSpline");
        IsClosedLoop_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsClosedLoop");
        IsClosedLoop_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsClosedLoop_NativeFunction);
        IsClosedLoop_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsClosedLoop_NativeFunction, "ReturnValue");
        GetWorldTangentAtDistanceAlongSpline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWorldTangentAtDistanceAlongSpline");
        GetWorldTangentAtDistanceAlongSpline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWorldTangentAtDistanceAlongSpline_NativeFunction);
        GetWorldTangentAtDistanceAlongSpline_Distance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldTangentAtDistanceAlongSpline_NativeFunction, "Distance");
        GetWorldTangentAtDistanceAlongSpline_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldTangentAtDistanceAlongSpline_NativeFunction, "ReturnValue");
        GetWorldRotationAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWorldRotationAtTime");
        GetWorldRotationAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWorldRotationAtTime_NativeFunction);
        GetWorldRotationAtTime_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldRotationAtTime_NativeFunction, "Time");
        GetWorldRotationAtTime_bUseConstantVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldRotationAtTime_NativeFunction, "bUseConstantVelocity");
        GetWorldRotationAtTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldRotationAtTime_NativeFunction, "ReturnValue");
        GetWorldRotationAtDistanceAlongSpline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWorldRotationAtDistanceAlongSpline");
        GetWorldRotationAtDistanceAlongSpline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWorldRotationAtDistanceAlongSpline_NativeFunction);
        GetWorldRotationAtDistanceAlongSpline_Distance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldRotationAtDistanceAlongSpline_NativeFunction, "Distance");
        GetWorldRotationAtDistanceAlongSpline_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldRotationAtDistanceAlongSpline_NativeFunction, "ReturnValue");
        GetWorldLocationAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWorldLocationAtTime");
        GetWorldLocationAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWorldLocationAtTime_NativeFunction);
        GetWorldLocationAtTime_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldLocationAtTime_NativeFunction, "Time");
        GetWorldLocationAtTime_bUseConstantVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldLocationAtTime_NativeFunction, "bUseConstantVelocity");
        GetWorldLocationAtTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldLocationAtTime_NativeFunction, "ReturnValue");
        GetWorldLocationAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWorldLocationAtSplinePoint");
        GetWorldLocationAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWorldLocationAtSplinePoint_NativeFunction);
        GetWorldLocationAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldLocationAtSplinePoint_NativeFunction, "PointIndex");
        GetWorldLocationAtSplinePoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldLocationAtSplinePoint_NativeFunction, "ReturnValue");
        GetWorldLocationAtDistanceAlongSpline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWorldLocationAtDistanceAlongSpline");
        GetWorldLocationAtDistanceAlongSpline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWorldLocationAtDistanceAlongSpline_NativeFunction);
        GetWorldLocationAtDistanceAlongSpline_Distance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldLocationAtDistanceAlongSpline_NativeFunction, "Distance");
        GetWorldLocationAtDistanceAlongSpline_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldLocationAtDistanceAlongSpline_NativeFunction, "ReturnValue");
        GetWorldDirectionAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWorldDirectionAtTime");
        GetWorldDirectionAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWorldDirectionAtTime_NativeFunction);
        GetWorldDirectionAtTime_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldDirectionAtTime_NativeFunction, "Time");
        GetWorldDirectionAtTime_bUseConstantVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldDirectionAtTime_NativeFunction, "bUseConstantVelocity");
        GetWorldDirectionAtTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldDirectionAtTime_NativeFunction, "ReturnValue");
        GetWorldDirectionAtDistanceAlongSpline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWorldDirectionAtDistanceAlongSpline");
        GetWorldDirectionAtDistanceAlongSpline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWorldDirectionAtDistanceAlongSpline_NativeFunction);
        GetWorldDirectionAtDistanceAlongSpline_Distance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldDirectionAtDistanceAlongSpline_NativeFunction, "Distance");
        GetWorldDirectionAtDistanceAlongSpline_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWorldDirectionAtDistanceAlongSpline_NativeFunction, "ReturnValue");
        GetVectorPropertyAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVectorPropertyAtSplinePoint");
        GetVectorPropertyAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVectorPropertyAtSplinePoint_NativeFunction);
        GetVectorPropertyAtSplinePoint_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorPropertyAtSplinePoint_NativeFunction, "Index");
        GetVectorPropertyAtSplinePoint_PropertyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorPropertyAtSplinePoint_NativeFunction, "PropertyName");
        GetVectorPropertyAtSplinePoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorPropertyAtSplinePoint_NativeFunction, "ReturnValue");
        GetVectorPropertyAtSplineInputKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVectorPropertyAtSplineInputKey");
        GetVectorPropertyAtSplineInputKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVectorPropertyAtSplineInputKey_NativeFunction);
        GetVectorPropertyAtSplineInputKey_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorPropertyAtSplineInputKey_NativeFunction, "InKey");
        GetVectorPropertyAtSplineInputKey_PropertyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorPropertyAtSplineInputKey_NativeFunction, "PropertyName");
        GetVectorPropertyAtSplineInputKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorPropertyAtSplineInputKey_NativeFunction, "ReturnValue");
        GetUpVectorAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetUpVectorAtTime");
        GetUpVectorAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetUpVectorAtTime_NativeFunction);
        GetUpVectorAtTime_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUpVectorAtTime_NativeFunction, "Time");
        GetUpVectorAtTime_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUpVectorAtTime_NativeFunction, "CoordinateSpace");
        GetUpVectorAtTime_bUseConstantVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUpVectorAtTime_NativeFunction, "bUseConstantVelocity");
        GetUpVectorAtTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUpVectorAtTime_NativeFunction, "ReturnValue");
        GetUpVectorAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetUpVectorAtSplinePoint");
        GetUpVectorAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetUpVectorAtSplinePoint_NativeFunction);
        GetUpVectorAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUpVectorAtSplinePoint_NativeFunction, "PointIndex");
        GetUpVectorAtSplinePoint_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUpVectorAtSplinePoint_NativeFunction, "CoordinateSpace");
        GetUpVectorAtSplinePoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUpVectorAtSplinePoint_NativeFunction, "ReturnValue");
        GetUpVectorAtSplineInputKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetUpVectorAtSplineInputKey");
        GetUpVectorAtSplineInputKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetUpVectorAtSplineInputKey_NativeFunction);
        GetUpVectorAtSplineInputKey_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUpVectorAtSplineInputKey_NativeFunction, "InKey");
        GetUpVectorAtSplineInputKey_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUpVectorAtSplineInputKey_NativeFunction, "CoordinateSpace");
        GetUpVectorAtSplineInputKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUpVectorAtSplineInputKey_NativeFunction, "ReturnValue");
        GetUpVectorAtDistanceAlongSpline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetUpVectorAtDistanceAlongSpline");
        GetUpVectorAtDistanceAlongSpline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetUpVectorAtDistanceAlongSpline_NativeFunction);
        GetUpVectorAtDistanceAlongSpline_Distance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUpVectorAtDistanceAlongSpline_NativeFunction, "Distance");
        GetUpVectorAtDistanceAlongSpline_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUpVectorAtDistanceAlongSpline_NativeFunction, "CoordinateSpace");
        GetUpVectorAtDistanceAlongSpline_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUpVectorAtDistanceAlongSpline_NativeFunction, "ReturnValue");
        GetTransformAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTransformAtTime");
        GetTransformAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTransformAtTime_NativeFunction);
        GetTransformAtTime_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformAtTime_NativeFunction, "Time");
        GetTransformAtTime_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformAtTime_NativeFunction, "CoordinateSpace");
        GetTransformAtTime_bUseConstantVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformAtTime_NativeFunction, "bUseConstantVelocity");
        GetTransformAtTime_bUseScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformAtTime_NativeFunction, "bUseScale");
        GetTransformAtTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformAtTime_NativeFunction, "ReturnValue");
        GetTransformAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTransformAtSplinePoint");
        GetTransformAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTransformAtSplinePoint_NativeFunction);
        GetTransformAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformAtSplinePoint_NativeFunction, "PointIndex");
        GetTransformAtSplinePoint_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformAtSplinePoint_NativeFunction, "CoordinateSpace");
        GetTransformAtSplinePoint_bUseScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformAtSplinePoint_NativeFunction, "bUseScale");
        GetTransformAtSplinePoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformAtSplinePoint_NativeFunction, "ReturnValue");
        GetTransformAtSplineInputKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTransformAtSplineInputKey");
        GetTransformAtSplineInputKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTransformAtSplineInputKey_NativeFunction);
        GetTransformAtSplineInputKey_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformAtSplineInputKey_NativeFunction, "InKey");
        GetTransformAtSplineInputKey_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformAtSplineInputKey_NativeFunction, "CoordinateSpace");
        GetTransformAtSplineInputKey_bUseScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformAtSplineInputKey_NativeFunction, "bUseScale");
        GetTransformAtSplineInputKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformAtSplineInputKey_NativeFunction, "ReturnValue");
        GetTransformAtDistanceAlongSpline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTransformAtDistanceAlongSpline");
        GetTransformAtDistanceAlongSpline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTransformAtDistanceAlongSpline_NativeFunction);
        GetTransformAtDistanceAlongSpline_Distance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformAtDistanceAlongSpline_NativeFunction, "Distance");
        GetTransformAtDistanceAlongSpline_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformAtDistanceAlongSpline_NativeFunction, "CoordinateSpace");
        GetTransformAtDistanceAlongSpline_bUseScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformAtDistanceAlongSpline_NativeFunction, "bUseScale");
        GetTransformAtDistanceAlongSpline_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransformAtDistanceAlongSpline_NativeFunction, "ReturnValue");
        GetTimeAtDistanceAlongSpline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTimeAtDistanceAlongSpline");
        GetTimeAtDistanceAlongSpline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTimeAtDistanceAlongSpline_NativeFunction);
        GetTimeAtDistanceAlongSpline_Distance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTimeAtDistanceAlongSpline_NativeFunction, "Distance");
        GetTimeAtDistanceAlongSpline_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTimeAtDistanceAlongSpline_NativeFunction, "ReturnValue");
        GetTangentAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTangentAtTime");
        GetTangentAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTangentAtTime_NativeFunction);
        GetTangentAtTime_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTangentAtTime_NativeFunction, "Time");
        GetTangentAtTime_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTangentAtTime_NativeFunction, "CoordinateSpace");
        GetTangentAtTime_bUseConstantVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTangentAtTime_NativeFunction, "bUseConstantVelocity");
        GetTangentAtTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTangentAtTime_NativeFunction, "ReturnValue");
        GetTangentAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTangentAtSplinePoint");
        GetTangentAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTangentAtSplinePoint_NativeFunction);
        GetTangentAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTangentAtSplinePoint_NativeFunction, "PointIndex");
        GetTangentAtSplinePoint_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTangentAtSplinePoint_NativeFunction, "CoordinateSpace");
        GetTangentAtSplinePoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTangentAtSplinePoint_NativeFunction, "ReturnValue");
        GetTangentAtSplineInputKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTangentAtSplineInputKey");
        GetTangentAtSplineInputKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTangentAtSplineInputKey_NativeFunction);
        GetTangentAtSplineInputKey_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTangentAtSplineInputKey_NativeFunction, "InKey");
        GetTangentAtSplineInputKey_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTangentAtSplineInputKey_NativeFunction, "CoordinateSpace");
        GetTangentAtSplineInputKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTangentAtSplineInputKey_NativeFunction, "ReturnValue");
        GetTangentAtDistanceAlongSpline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTangentAtDistanceAlongSpline");
        GetTangentAtDistanceAlongSpline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTangentAtDistanceAlongSpline_NativeFunction);
        GetTangentAtDistanceAlongSpline_Distance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTangentAtDistanceAlongSpline_NativeFunction, "Distance");
        GetTangentAtDistanceAlongSpline_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTangentAtDistanceAlongSpline_NativeFunction, "CoordinateSpace");
        GetTangentAtDistanceAlongSpline_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTangentAtDistanceAlongSpline_NativeFunction, "ReturnValue");
        GetSplinePointType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSplinePointType");
        GetSplinePointType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSplinePointType_NativeFunction);
        GetSplinePointType_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSplinePointType_NativeFunction, "PointIndex");
        GetSplinePointType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSplinePointType_NativeFunction, "ReturnValue");
        GetSplinePointAt_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSplinePointAt");
        GetSplinePointAt_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSplinePointAt_NativeFunction);
        GetSplinePointAt_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSplinePointAt_NativeFunction, "PointIndex");
        GetSplinePointAt_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSplinePointAt_NativeFunction, "CoordinateSpace");
        GetSplinePointAt_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSplinePointAt_NativeFunction, "ReturnValue");
        GetSplineLength_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSplineLength");
        GetSplineLength_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSplineLength_NativeFunction);
        GetSplineLength_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSplineLength_NativeFunction, "ReturnValue");
        GetScaleAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetScaleAtTime");
        GetScaleAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetScaleAtTime_NativeFunction);
        GetScaleAtTime_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScaleAtTime_NativeFunction, "Time");
        GetScaleAtTime_bUseConstantVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScaleAtTime_NativeFunction, "bUseConstantVelocity");
        GetScaleAtTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScaleAtTime_NativeFunction, "ReturnValue");
        GetScaleAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetScaleAtSplinePoint");
        GetScaleAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetScaleAtSplinePoint_NativeFunction);
        GetScaleAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScaleAtSplinePoint_NativeFunction, "PointIndex");
        GetScaleAtSplinePoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScaleAtSplinePoint_NativeFunction, "ReturnValue");
        GetScaleAtSplineInputKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetScaleAtSplineInputKey");
        GetScaleAtSplineInputKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetScaleAtSplineInputKey_NativeFunction);
        GetScaleAtSplineInputKey_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScaleAtSplineInputKey_NativeFunction, "InKey");
        GetScaleAtSplineInputKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScaleAtSplineInputKey_NativeFunction, "ReturnValue");
        GetScaleAtDistanceAlongSpline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetScaleAtDistanceAlongSpline");
        GetScaleAtDistanceAlongSpline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetScaleAtDistanceAlongSpline_NativeFunction);
        GetScaleAtDistanceAlongSpline_Distance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScaleAtDistanceAlongSpline_NativeFunction, "Distance");
        GetScaleAtDistanceAlongSpline_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScaleAtDistanceAlongSpline_NativeFunction, "ReturnValue");
        GetRotationAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRotationAtTime");
        GetRotationAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRotationAtTime_NativeFunction);
        GetRotationAtTime_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotationAtTime_NativeFunction, "Time");
        GetRotationAtTime_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotationAtTime_NativeFunction, "CoordinateSpace");
        GetRotationAtTime_bUseConstantVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotationAtTime_NativeFunction, "bUseConstantVelocity");
        GetRotationAtTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotationAtTime_NativeFunction, "ReturnValue");
        GetRotationAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRotationAtSplinePoint");
        GetRotationAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRotationAtSplinePoint_NativeFunction);
        GetRotationAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotationAtSplinePoint_NativeFunction, "PointIndex");
        GetRotationAtSplinePoint_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotationAtSplinePoint_NativeFunction, "CoordinateSpace");
        GetRotationAtSplinePoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotationAtSplinePoint_NativeFunction, "ReturnValue");
        GetRotationAtSplineInputKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRotationAtSplineInputKey");
        GetRotationAtSplineInputKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRotationAtSplineInputKey_NativeFunction);
        GetRotationAtSplineInputKey_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotationAtSplineInputKey_NativeFunction, "InKey");
        GetRotationAtSplineInputKey_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotationAtSplineInputKey_NativeFunction, "CoordinateSpace");
        GetRotationAtSplineInputKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotationAtSplineInputKey_NativeFunction, "ReturnValue");
        GetRotationAtDistanceAlongSpline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRotationAtDistanceAlongSpline");
        GetRotationAtDistanceAlongSpline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRotationAtDistanceAlongSpline_NativeFunction);
        GetRotationAtDistanceAlongSpline_Distance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotationAtDistanceAlongSpline_NativeFunction, "Distance");
        GetRotationAtDistanceAlongSpline_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotationAtDistanceAlongSpline_NativeFunction, "CoordinateSpace");
        GetRotationAtDistanceAlongSpline_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRotationAtDistanceAlongSpline_NativeFunction, "ReturnValue");
        GetRollAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRollAtTime");
        GetRollAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRollAtTime_NativeFunction);
        GetRollAtTime_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRollAtTime_NativeFunction, "Time");
        GetRollAtTime_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRollAtTime_NativeFunction, "CoordinateSpace");
        GetRollAtTime_bUseConstantVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRollAtTime_NativeFunction, "bUseConstantVelocity");
        GetRollAtTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRollAtTime_NativeFunction, "ReturnValue");
        GetRollAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRollAtSplinePoint");
        GetRollAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRollAtSplinePoint_NativeFunction);
        GetRollAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRollAtSplinePoint_NativeFunction, "PointIndex");
        GetRollAtSplinePoint_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRollAtSplinePoint_NativeFunction, "CoordinateSpace");
        GetRollAtSplinePoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRollAtSplinePoint_NativeFunction, "ReturnValue");
        GetRollAtSplineInputKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRollAtSplineInputKey");
        GetRollAtSplineInputKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRollAtSplineInputKey_NativeFunction);
        GetRollAtSplineInputKey_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRollAtSplineInputKey_NativeFunction, "InKey");
        GetRollAtSplineInputKey_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRollAtSplineInputKey_NativeFunction, "CoordinateSpace");
        GetRollAtSplineInputKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRollAtSplineInputKey_NativeFunction, "ReturnValue");
        GetRollAtDistanceAlongSpline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRollAtDistanceAlongSpline");
        GetRollAtDistanceAlongSpline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRollAtDistanceAlongSpline_NativeFunction);
        GetRollAtDistanceAlongSpline_Distance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRollAtDistanceAlongSpline_NativeFunction, "Distance");
        GetRollAtDistanceAlongSpline_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRollAtDistanceAlongSpline_NativeFunction, "CoordinateSpace");
        GetRollAtDistanceAlongSpline_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRollAtDistanceAlongSpline_NativeFunction, "ReturnValue");
        GetRightVectorAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRightVectorAtTime");
        GetRightVectorAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRightVectorAtTime_NativeFunction);
        GetRightVectorAtTime_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRightVectorAtTime_NativeFunction, "Time");
        GetRightVectorAtTime_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRightVectorAtTime_NativeFunction, "CoordinateSpace");
        GetRightVectorAtTime_bUseConstantVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRightVectorAtTime_NativeFunction, "bUseConstantVelocity");
        GetRightVectorAtTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRightVectorAtTime_NativeFunction, "ReturnValue");
        GetRightVectorAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRightVectorAtSplinePoint");
        GetRightVectorAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRightVectorAtSplinePoint_NativeFunction);
        GetRightVectorAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRightVectorAtSplinePoint_NativeFunction, "PointIndex");
        GetRightVectorAtSplinePoint_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRightVectorAtSplinePoint_NativeFunction, "CoordinateSpace");
        GetRightVectorAtSplinePoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRightVectorAtSplinePoint_NativeFunction, "ReturnValue");
        GetRightVectorAtSplineInputKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRightVectorAtSplineInputKey");
        GetRightVectorAtSplineInputKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRightVectorAtSplineInputKey_NativeFunction);
        GetRightVectorAtSplineInputKey_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRightVectorAtSplineInputKey_NativeFunction, "InKey");
        GetRightVectorAtSplineInputKey_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRightVectorAtSplineInputKey_NativeFunction, "CoordinateSpace");
        GetRightVectorAtSplineInputKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRightVectorAtSplineInputKey_NativeFunction, "ReturnValue");
        GetRightVectorAtDistanceAlongSpline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRightVectorAtDistanceAlongSpline");
        GetRightVectorAtDistanceAlongSpline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRightVectorAtDistanceAlongSpline_NativeFunction);
        GetRightVectorAtDistanceAlongSpline_Distance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRightVectorAtDistanceAlongSpline_NativeFunction, "Distance");
        GetRightVectorAtDistanceAlongSpline_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRightVectorAtDistanceAlongSpline_NativeFunction, "CoordinateSpace");
        GetRightVectorAtDistanceAlongSpline_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRightVectorAtDistanceAlongSpline_NativeFunction, "ReturnValue");
        GetNumberOfSplineSegments_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumberOfSplineSegments");
        GetNumberOfSplineSegments_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumberOfSplineSegments_NativeFunction);
        GetNumberOfSplineSegments_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumberOfSplineSegments_NativeFunction, "ReturnValue");
        GetNumberOfSplinePoints_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumberOfSplinePoints");
        GetNumberOfSplinePoints_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumberOfSplinePoints_NativeFunction);
        GetNumberOfSplinePoints_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumberOfSplinePoints_NativeFunction, "ReturnValue");
        GetLocationAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocationAtTime");
        GetLocationAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocationAtTime_NativeFunction);
        GetLocationAtTime_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocationAtTime_NativeFunction, "Time");
        GetLocationAtTime_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocationAtTime_NativeFunction, "CoordinateSpace");
        GetLocationAtTime_bUseConstantVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocationAtTime_NativeFunction, "bUseConstantVelocity");
        GetLocationAtTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocationAtTime_NativeFunction, "ReturnValue");
        GetLocationAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocationAtSplinePoint");
        GetLocationAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocationAtSplinePoint_NativeFunction);
        GetLocationAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocationAtSplinePoint_NativeFunction, "PointIndex");
        GetLocationAtSplinePoint_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocationAtSplinePoint_NativeFunction, "CoordinateSpace");
        GetLocationAtSplinePoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocationAtSplinePoint_NativeFunction, "ReturnValue");
        GetLocationAtSplineInputKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocationAtSplineInputKey");
        GetLocationAtSplineInputKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocationAtSplineInputKey_NativeFunction);
        GetLocationAtSplineInputKey_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocationAtSplineInputKey_NativeFunction, "InKey");
        GetLocationAtSplineInputKey_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocationAtSplineInputKey_NativeFunction, "CoordinateSpace");
        GetLocationAtSplineInputKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocationAtSplineInputKey_NativeFunction, "ReturnValue");
        GetLocationAtDistanceAlongSpline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocationAtDistanceAlongSpline");
        GetLocationAtDistanceAlongSpline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocationAtDistanceAlongSpline_NativeFunction);
        GetLocationAtDistanceAlongSpline_Distance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocationAtDistanceAlongSpline_NativeFunction, "Distance");
        GetLocationAtDistanceAlongSpline_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocationAtDistanceAlongSpline_NativeFunction, "CoordinateSpace");
        GetLocationAtDistanceAlongSpline_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocationAtDistanceAlongSpline_NativeFunction, "ReturnValue");
        GetLocationAndTangentAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocationAndTangentAtSplinePoint");
        GetLocationAndTangentAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocationAndTangentAtSplinePoint_NativeFunction);
        GetLocationAndTangentAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocationAndTangentAtSplinePoint_NativeFunction, "PointIndex");
        GetLocationAndTangentAtSplinePoint_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocationAndTangentAtSplinePoint_NativeFunction, "Location");
        GetLocationAndTangentAtSplinePoint_Tangent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocationAndTangentAtSplinePoint_NativeFunction, "Tangent");
        GetLocationAndTangentAtSplinePoint_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocationAndTangentAtSplinePoint_NativeFunction, "CoordinateSpace");
        GetLocalLocationAndTangentAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalLocationAndTangentAtSplinePoint");
        GetLocalLocationAndTangentAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalLocationAndTangentAtSplinePoint_NativeFunction);
        GetLocalLocationAndTangentAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalLocationAndTangentAtSplinePoint_NativeFunction, "PointIndex");
        GetLocalLocationAndTangentAtSplinePoint_LocalLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalLocationAndTangentAtSplinePoint_NativeFunction, "LocalLocation");
        GetLocalLocationAndTangentAtSplinePoint_LocalTangent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalLocationAndTangentAtSplinePoint_NativeFunction, "LocalTangent");
        GetLeaveTangentAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLeaveTangentAtSplinePoint");
        GetLeaveTangentAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLeaveTangentAtSplinePoint_NativeFunction);
        GetLeaveTangentAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLeaveTangentAtSplinePoint_NativeFunction, "PointIndex");
        GetLeaveTangentAtSplinePoint_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLeaveTangentAtSplinePoint_NativeFunction, "CoordinateSpace");
        GetLeaveTangentAtSplinePoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLeaveTangentAtSplinePoint_NativeFunction, "ReturnValue");
        GetInputKeyValueAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInputKeyValueAtSplinePoint");
        GetInputKeyValueAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInputKeyValueAtSplinePoint_NativeFunction);
        GetInputKeyValueAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputKeyValueAtSplinePoint_NativeFunction, "PointIndex");
        GetInputKeyValueAtSplinePoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputKeyValueAtSplinePoint_NativeFunction, "ReturnValue");
        GetInputKeyValueAtDistanceAlongSpline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInputKeyValueAtDistanceAlongSpline");
        GetInputKeyValueAtDistanceAlongSpline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInputKeyValueAtDistanceAlongSpline_NativeFunction);
        GetInputKeyValueAtDistanceAlongSpline_Distance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputKeyValueAtDistanceAlongSpline_NativeFunction, "Distance");
        GetInputKeyValueAtDistanceAlongSpline_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputKeyValueAtDistanceAlongSpline_NativeFunction, "ReturnValue");
        GetInputKeyAtDistanceAlongSpline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInputKeyAtDistanceAlongSpline");
        GetInputKeyAtDistanceAlongSpline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInputKeyAtDistanceAlongSpline_NativeFunction);
        GetInputKeyAtDistanceAlongSpline_Distance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputKeyAtDistanceAlongSpline_NativeFunction, "Distance");
        GetInputKeyAtDistanceAlongSpline_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputKeyAtDistanceAlongSpline_NativeFunction, "ReturnValue");
        GetFloatPropertyAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFloatPropertyAtSplinePoint");
        GetFloatPropertyAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFloatPropertyAtSplinePoint_NativeFunction);
        GetFloatPropertyAtSplinePoint_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatPropertyAtSplinePoint_NativeFunction, "Index");
        GetFloatPropertyAtSplinePoint_PropertyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatPropertyAtSplinePoint_NativeFunction, "PropertyName");
        GetFloatPropertyAtSplinePoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatPropertyAtSplinePoint_NativeFunction, "ReturnValue");
        GetFloatPropertyAtSplineInputKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFloatPropertyAtSplineInputKey");
        GetFloatPropertyAtSplineInputKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFloatPropertyAtSplineInputKey_NativeFunction);
        GetFloatPropertyAtSplineInputKey_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatPropertyAtSplineInputKey_NativeFunction, "InKey");
        GetFloatPropertyAtSplineInputKey_PropertyName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatPropertyAtSplineInputKey_NativeFunction, "PropertyName");
        GetFloatPropertyAtSplineInputKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatPropertyAtSplineInputKey_NativeFunction, "ReturnValue");
        GetDistanceAlongSplineAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDistanceAlongSplineAtSplinePoint");
        GetDistanceAlongSplineAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDistanceAlongSplineAtSplinePoint_NativeFunction);
        GetDistanceAlongSplineAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDistanceAlongSplineAtSplinePoint_NativeFunction, "PointIndex");
        GetDistanceAlongSplineAtSplinePoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDistanceAlongSplineAtSplinePoint_NativeFunction, "ReturnValue");
        GetDistanceAlongSplineAtSplineInputKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDistanceAlongSplineAtSplineInputKey");
        GetDistanceAlongSplineAtSplineInputKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDistanceAlongSplineAtSplineInputKey_NativeFunction);
        GetDistanceAlongSplineAtSplineInputKey_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDistanceAlongSplineAtSplineInputKey_NativeFunction, "InKey");
        GetDistanceAlongSplineAtSplineInputKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDistanceAlongSplineAtSplineInputKey_NativeFunction, "ReturnValue");
        GetDistanceAlongSplineAtLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDistanceAlongSplineAtLocation");
        GetDistanceAlongSplineAtLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDistanceAlongSplineAtLocation_NativeFunction);
        GetDistanceAlongSplineAtLocation_InLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDistanceAlongSplineAtLocation_NativeFunction, "InLocation");
        GetDistanceAlongSplineAtLocation_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDistanceAlongSplineAtLocation_NativeFunction, "CoordinateSpace");
        GetDistanceAlongSplineAtLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDistanceAlongSplineAtLocation_NativeFunction, "ReturnValue");
        GetDirectionAtTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDirectionAtTime");
        GetDirectionAtTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDirectionAtTime_NativeFunction);
        GetDirectionAtTime_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDirectionAtTime_NativeFunction, "Time");
        GetDirectionAtTime_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDirectionAtTime_NativeFunction, "CoordinateSpace");
        GetDirectionAtTime_bUseConstantVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDirectionAtTime_NativeFunction, "bUseConstantVelocity");
        GetDirectionAtTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDirectionAtTime_NativeFunction, "ReturnValue");
        GetDirectionAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDirectionAtSplinePoint");
        GetDirectionAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDirectionAtSplinePoint_NativeFunction);
        GetDirectionAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDirectionAtSplinePoint_NativeFunction, "PointIndex");
        GetDirectionAtSplinePoint_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDirectionAtSplinePoint_NativeFunction, "CoordinateSpace");
        GetDirectionAtSplinePoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDirectionAtSplinePoint_NativeFunction, "ReturnValue");
        GetDirectionAtSplineInputKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDirectionAtSplineInputKey");
        GetDirectionAtSplineInputKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDirectionAtSplineInputKey_NativeFunction);
        GetDirectionAtSplineInputKey_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDirectionAtSplineInputKey_NativeFunction, "InKey");
        GetDirectionAtSplineInputKey_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDirectionAtSplineInputKey_NativeFunction, "CoordinateSpace");
        GetDirectionAtSplineInputKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDirectionAtSplineInputKey_NativeFunction, "ReturnValue");
        GetDirectionAtDistanceAlongSpline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDirectionAtDistanceAlongSpline");
        GetDirectionAtDistanceAlongSpline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDirectionAtDistanceAlongSpline_NativeFunction);
        GetDirectionAtDistanceAlongSpline_Distance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDirectionAtDistanceAlongSpline_NativeFunction, "Distance");
        GetDirectionAtDistanceAlongSpline_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDirectionAtDistanceAlongSpline_NativeFunction, "CoordinateSpace");
        GetDirectionAtDistanceAlongSpline_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDirectionAtDistanceAlongSpline_NativeFunction, "ReturnValue");
        GetDefaultUpVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDefaultUpVector");
        GetDefaultUpVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDefaultUpVector_NativeFunction);
        GetDefaultUpVector_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultUpVector_NativeFunction, "CoordinateSpace");
        GetDefaultUpVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultUpVector_NativeFunction, "ReturnValue");
        GetArriveTangentAtSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetArriveTangentAtSplinePoint");
        GetArriveTangentAtSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetArriveTangentAtSplinePoint_NativeFunction);
        GetArriveTangentAtSplinePoint_PointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetArriveTangentAtSplinePoint_NativeFunction, "PointIndex");
        GetArriveTangentAtSplinePoint_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetArriveTangentAtSplinePoint_NativeFunction, "CoordinateSpace");
        GetArriveTangentAtSplinePoint_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetArriveTangentAtSplinePoint_NativeFunction, "ReturnValue");
        FindUpVectorClosestToWorldLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindUpVectorClosestToWorldLocation");
        FindUpVectorClosestToWorldLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindUpVectorClosestToWorldLocation_NativeFunction);
        FindUpVectorClosestToWorldLocation_WorldLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindUpVectorClosestToWorldLocation_NativeFunction, "WorldLocation");
        FindUpVectorClosestToWorldLocation_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindUpVectorClosestToWorldLocation_NativeFunction, "CoordinateSpace");
        FindUpVectorClosestToWorldLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindUpVectorClosestToWorldLocation_NativeFunction, "ReturnValue");
        FindTransformClosestToWorldLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindTransformClosestToWorldLocation");
        FindTransformClosestToWorldLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindTransformClosestToWorldLocation_NativeFunction);
        FindTransformClosestToWorldLocation_WorldLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindTransformClosestToWorldLocation_NativeFunction, "WorldLocation");
        FindTransformClosestToWorldLocation_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindTransformClosestToWorldLocation_NativeFunction, "CoordinateSpace");
        FindTransformClosestToWorldLocation_bUseScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindTransformClosestToWorldLocation_NativeFunction, "bUseScale");
        FindTransformClosestToWorldLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindTransformClosestToWorldLocation_NativeFunction, "ReturnValue");
        FindTangentClosestToWorldLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindTangentClosestToWorldLocation");
        FindTangentClosestToWorldLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindTangentClosestToWorldLocation_NativeFunction);
        FindTangentClosestToWorldLocation_WorldLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindTangentClosestToWorldLocation_NativeFunction, "WorldLocation");
        FindTangentClosestToWorldLocation_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindTangentClosestToWorldLocation_NativeFunction, "CoordinateSpace");
        FindTangentClosestToWorldLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindTangentClosestToWorldLocation_NativeFunction, "ReturnValue");
        FindScaleClosestToWorldLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindScaleClosestToWorldLocation");
        FindScaleClosestToWorldLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindScaleClosestToWorldLocation_NativeFunction);
        FindScaleClosestToWorldLocation_WorldLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindScaleClosestToWorldLocation_NativeFunction, "WorldLocation");
        FindScaleClosestToWorldLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindScaleClosestToWorldLocation_NativeFunction, "ReturnValue");
        FindRotationClosestToWorldLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindRotationClosestToWorldLocation");
        FindRotationClosestToWorldLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindRotationClosestToWorldLocation_NativeFunction);
        FindRotationClosestToWorldLocation_WorldLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindRotationClosestToWorldLocation_NativeFunction, "WorldLocation");
        FindRotationClosestToWorldLocation_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindRotationClosestToWorldLocation_NativeFunction, "CoordinateSpace");
        FindRotationClosestToWorldLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindRotationClosestToWorldLocation_NativeFunction, "ReturnValue");
        FindRollClosestToWorldLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindRollClosestToWorldLocation");
        FindRollClosestToWorldLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindRollClosestToWorldLocation_NativeFunction);
        FindRollClosestToWorldLocation_WorldLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindRollClosestToWorldLocation_NativeFunction, "WorldLocation");
        FindRollClosestToWorldLocation_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindRollClosestToWorldLocation_NativeFunction, "CoordinateSpace");
        FindRollClosestToWorldLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindRollClosestToWorldLocation_NativeFunction, "ReturnValue");
        FindRightVectorClosestToWorldLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindRightVectorClosestToWorldLocation");
        FindRightVectorClosestToWorldLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindRightVectorClosestToWorldLocation_NativeFunction);
        FindRightVectorClosestToWorldLocation_WorldLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindRightVectorClosestToWorldLocation_NativeFunction, "WorldLocation");
        FindRightVectorClosestToWorldLocation_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindRightVectorClosestToWorldLocation_NativeFunction, "CoordinateSpace");
        FindRightVectorClosestToWorldLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindRightVectorClosestToWorldLocation_NativeFunction, "ReturnValue");
        FindLocationClosestToWorldLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindLocationClosestToWorldLocation");
        FindLocationClosestToWorldLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindLocationClosestToWorldLocation_NativeFunction);
        FindLocationClosestToWorldLocation_WorldLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindLocationClosestToWorldLocation_NativeFunction, "WorldLocation");
        FindLocationClosestToWorldLocation_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindLocationClosestToWorldLocation_NativeFunction, "CoordinateSpace");
        FindLocationClosestToWorldLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindLocationClosestToWorldLocation_NativeFunction, "ReturnValue");
        FindInputKeyClosestToWorldLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindInputKeyClosestToWorldLocation");
        FindInputKeyClosestToWorldLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindInputKeyClosestToWorldLocation_NativeFunction);
        FindInputKeyClosestToWorldLocation_WorldLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindInputKeyClosestToWorldLocation_NativeFunction, "WorldLocation");
        FindInputKeyClosestToWorldLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindInputKeyClosestToWorldLocation_NativeFunction, "ReturnValue");
        FindDirectionClosestToWorldLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindDirectionClosestToWorldLocation");
        FindDirectionClosestToWorldLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindDirectionClosestToWorldLocation_NativeFunction);
        FindDirectionClosestToWorldLocation_WorldLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindDirectionClosestToWorldLocation_NativeFunction, "WorldLocation");
        FindDirectionClosestToWorldLocation_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindDirectionClosestToWorldLocation_NativeFunction, "CoordinateSpace");
        FindDirectionClosestToWorldLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindDirectionClosestToWorldLocation_NativeFunction, "ReturnValue");
        DivideSplineIntoPolylineRecursiveWithDistances_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DivideSplineIntoPolylineRecursiveWithDistances");
        DivideSplineIntoPolylineRecursiveWithDistances_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DivideSplineIntoPolylineRecursiveWithDistances_NativeFunction);
        DivideSplineIntoPolylineRecursiveWithDistances_StartDistanceAlongSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DivideSplineIntoPolylineRecursiveWithDistances_NativeFunction, "StartDistanceAlongSpline");
        DivideSplineIntoPolylineRecursiveWithDistances_EndDistanceAlongSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DivideSplineIntoPolylineRecursiveWithDistances_NativeFunction, "EndDistanceAlongSpline");
        DivideSplineIntoPolylineRecursiveWithDistances_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DivideSplineIntoPolylineRecursiveWithDistances_NativeFunction, "CoordinateSpace");
        DivideSplineIntoPolylineRecursiveWithDistances_MaxSquareDistanceFromSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DivideSplineIntoPolylineRecursiveWithDistances_NativeFunction, "MaxSquareDistanceFromSpline");
        DivideSplineIntoPolylineRecursiveWithDistances_OutPoints_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DivideSplineIntoPolylineRecursiveWithDistances_NativeFunction, "OutPoints");
        DivideSplineIntoPolylineRecursiveWithDistances_OutPoints_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(DivideSplineIntoPolylineRecursiveWithDistances_NativeFunction, "OutPoints");
        DivideSplineIntoPolylineRecursiveWithDistances_OutDistancesAlongSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DivideSplineIntoPolylineRecursiveWithDistances_NativeFunction, "OutDistancesAlongSpline");
        DivideSplineIntoPolylineRecursiveWithDistances_OutDistancesAlongSpline_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(DivideSplineIntoPolylineRecursiveWithDistances_NativeFunction, "OutDistancesAlongSpline");
        DivideSplineIntoPolylineRecursiveWithDistances_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DivideSplineIntoPolylineRecursiveWithDistances_NativeFunction, "ReturnValue");
        DivideSplineIntoPolylineRecursive_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DivideSplineIntoPolylineRecursive");
        DivideSplineIntoPolylineRecursive_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DivideSplineIntoPolylineRecursive_NativeFunction);
        DivideSplineIntoPolylineRecursive_StartDistanceAlongSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DivideSplineIntoPolylineRecursive_NativeFunction, "StartDistanceAlongSpline");
        DivideSplineIntoPolylineRecursive_EndDistanceAlongSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DivideSplineIntoPolylineRecursive_NativeFunction, "EndDistanceAlongSpline");
        DivideSplineIntoPolylineRecursive_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DivideSplineIntoPolylineRecursive_NativeFunction, "CoordinateSpace");
        DivideSplineIntoPolylineRecursive_MaxSquareDistanceFromSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DivideSplineIntoPolylineRecursive_NativeFunction, "MaxSquareDistanceFromSpline");
        DivideSplineIntoPolylineRecursive_OutPoints_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DivideSplineIntoPolylineRecursive_NativeFunction, "OutPoints");
        DivideSplineIntoPolylineRecursive_OutPoints_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(DivideSplineIntoPolylineRecursive_NativeFunction, "OutPoints");
        DivideSplineIntoPolylineRecursive_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DivideSplineIntoPolylineRecursive_NativeFunction, "ReturnValue");
        ConvertSplineToPolyLine_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertSplineToPolyLine");
        ConvertSplineToPolyLine_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertSplineToPolyLine_NativeFunction);
        ConvertSplineToPolyLine_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertSplineToPolyLine_NativeFunction, "CoordinateSpace");
        ConvertSplineToPolyLine_MaxSquareDistanceFromSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertSplineToPolyLine_NativeFunction, "MaxSquareDistanceFromSpline");
        ConvertSplineToPolyLine_OutPoints_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertSplineToPolyLine_NativeFunction, "OutPoints");
        ConvertSplineToPolyLine_OutPoints_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ConvertSplineToPolyLine_NativeFunction, "OutPoints");
        ConvertSplineToPolyLine_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertSplineToPolyLine_NativeFunction, "ReturnValue");
        ConvertSplineSegmentToPolyLine_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertSplineSegmentToPolyLine");
        ConvertSplineSegmentToPolyLine_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertSplineSegmentToPolyLine_NativeFunction);
        ConvertSplineSegmentToPolyLine_SplinePointStartIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertSplineSegmentToPolyLine_NativeFunction, "SplinePointStartIndex");
        ConvertSplineSegmentToPolyLine_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertSplineSegmentToPolyLine_NativeFunction, "CoordinateSpace");
        ConvertSplineSegmentToPolyLine_MaxSquareDistanceFromSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertSplineSegmentToPolyLine_NativeFunction, "MaxSquareDistanceFromSpline");
        ConvertSplineSegmentToPolyLine_OutPoints_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertSplineSegmentToPolyLine_NativeFunction, "OutPoints");
        ConvertSplineSegmentToPolyLine_OutPoints_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ConvertSplineSegmentToPolyLine_NativeFunction, "OutPoints");
        ConvertSplineSegmentToPolyLine_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertSplineSegmentToPolyLine_NativeFunction, "ReturnValue");
        ClearSplinePoints_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearSplinePoints");
        ClearSplinePoints_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClearSplinePoints_NativeFunction);
        ClearSplinePoints_bUpdateSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearSplinePoints_NativeFunction, "bUpdateSpline");
        AddSplineWorldPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddSplineWorldPoint");
        AddSplineWorldPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddSplineWorldPoint_NativeFunction);
        AddSplineWorldPoint_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSplineWorldPoint_NativeFunction, "Position");
        AddSplinePointAtIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddSplinePointAtIndex");
        AddSplinePointAtIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddSplinePointAtIndex_NativeFunction);
        AddSplinePointAtIndex_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSplinePointAtIndex_NativeFunction, "Position");
        AddSplinePointAtIndex_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSplinePointAtIndex_NativeFunction, "Index");
        AddSplinePointAtIndex_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSplinePointAtIndex_NativeFunction, "CoordinateSpace");
        AddSplinePointAtIndex_bUpdateSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSplinePointAtIndex_NativeFunction, "bUpdateSpline");
        AddSplinePoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddSplinePoint");
        AddSplinePoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddSplinePoint_NativeFunction);
        AddSplinePoint_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSplinePoint_NativeFunction, "Position");
        AddSplinePoint_CoordinateSpace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSplinePoint_NativeFunction, "CoordinateSpace");
        AddSplinePoint_bUpdateSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSplinePoint_NativeFunction, "bUpdateSpline");
        AddSplineLocalPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddSplineLocalPoint");
        AddSplineLocalPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddSplineLocalPoint_NativeFunction);
        AddSplineLocalPoint_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSplineLocalPoint_NativeFunction, "Position");
        AddPoints_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddPoints");
        AddPoints_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddPoints_NativeFunction);
        AddPoints_Points_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddPoints_NativeFunction, "Points");
        AddPoints_Points_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(AddPoints_NativeFunction, "Points");
        AddPoints_bUpdateSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddPoints_NativeFunction, "bUpdateSpline");
        AddPoint_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddPoint");
        AddPoint_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddPoint_NativeFunction);
        AddPoint_Point_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddPoint_NativeFunction, "Point");
        AddPoint_bUpdateSpline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddPoint_NativeFunction, "bUpdateSpline");
        
        
    }
    
    protected SplineComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Engine.SplineComponent:Duration
    static readonly int Duration_Offset;
    
    public float Duration
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Duration_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Duration_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.SplineComponent:bStationaryEndpoints
    static readonly int bStationaryEndpoints_Offset;
    
    public bool bStationaryEndpoints
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bStationaryEndpoints_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bStationaryEndpoints_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.SplineComponent:bInputSplinePointsToConstructionScript
    static readonly int bInputSplinePointsToConstructionScript_Offset;
    
    public bool bInputSplinePointsToConstructionScript
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bInputSplinePointsToConstructionScript_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bInputSplinePointsToConstructionScript_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.SplineComponent:bDrawDebug
    static readonly int bDrawDebug_Offset;
    
    public bool bDrawDebug
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bDrawDebug_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bDrawDebug_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.SplineComponent:DefaultUpVector
    static readonly int DefaultUpVector_Offset;
    
    public System.DoubleNumerics.Vector3 DefaultUpVector
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, DefaultUpVector_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, DefaultUpVector_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Engine.SplineComponent:UpdateSpline
    static readonly IntPtr UpdateSpline_NativeFunction;
    
    public void UpdateSpline()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UpdateSpline_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.SplineComponent:SetWorldLocationAtSplinePoint
    static readonly IntPtr SetWorldLocationAtSplinePoint_NativeFunction;
    static readonly int SetWorldLocationAtSplinePoint_ParamsSize;
    static readonly int SetWorldLocationAtSplinePoint_PointIndex_Offset;
    static readonly int SetWorldLocationAtSplinePoint_InLocation_Offset;
    
    [Obsolete("Please use SetLocationAtSplinePoint, specifying SplineCoordinateSpace::World")]
    public void SetWorldLocationAtSplinePoint(int pointIndex, System.DoubleNumerics.Vector3 inLocation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWorldLocationAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetWorldLocationAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetWorldLocationAtSplinePoint_InLocation_Offset), 0, null, inLocation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetWorldLocationAtSplinePoint_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:SetUpVectorAtSplinePoint
    static readonly IntPtr SetUpVectorAtSplinePoint_NativeFunction;
    static readonly int SetUpVectorAtSplinePoint_ParamsSize;
    static readonly int SetUpVectorAtSplinePoint_PointIndex_Offset;
    static readonly int SetUpVectorAtSplinePoint_InUpVector_Offset;
    static readonly int SetUpVectorAtSplinePoint_CoordinateSpace_Offset;
    static readonly int SetUpVectorAtSplinePoint_bUpdateSpline_Offset;
    
    public void SetUpVectorAtSplinePoint(int pointIndex, System.DoubleNumerics.Vector3 inUpVector, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, bool bUpdateSpline = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetUpVectorAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetUpVectorAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetUpVectorAtSplinePoint_InUpVector_Offset), 0, null, inUpVector);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, SetUpVectorAtSplinePoint_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetUpVectorAtSplinePoint_bUpdateSpline_Offset), 0, null, bUpdateSpline);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetUpVectorAtSplinePoint_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:SetUnselectedSplineSegmentColor
    static readonly IntPtr SetUnselectedSplineSegmentColor_NativeFunction;
    static readonly int SetUnselectedSplineSegmentColor_ParamsSize;
    static readonly int SetUnselectedSplineSegmentColor_SegmentColor_Offset;
    
    public void SetUnselectedSplineSegmentColor(UnrealSharp.CoreUObject.LinearColor segmentColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetUnselectedSplineSegmentColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetUnselectedSplineSegmentColor_SegmentColor_Offset), 0, null, segmentColor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetUnselectedSplineSegmentColor_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:SetTangentsAtSplinePoint
    static readonly IntPtr SetTangentsAtSplinePoint_NativeFunction;
    static readonly int SetTangentsAtSplinePoint_ParamsSize;
    static readonly int SetTangentsAtSplinePoint_PointIndex_Offset;
    static readonly int SetTangentsAtSplinePoint_InArriveTangent_Offset;
    static readonly int SetTangentsAtSplinePoint_InLeaveTangent_Offset;
    static readonly int SetTangentsAtSplinePoint_CoordinateSpace_Offset;
    static readonly int SetTangentsAtSplinePoint_bUpdateSpline_Offset;
    
    public void SetTangentsAtSplinePoint(int pointIndex, System.DoubleNumerics.Vector3 inArriveTangent, System.DoubleNumerics.Vector3 inLeaveTangent, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, bool bUpdateSpline = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTangentsAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetTangentsAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetTangentsAtSplinePoint_InArriveTangent_Offset), 0, null, inArriveTangent);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetTangentsAtSplinePoint_InLeaveTangent_Offset), 0, null, inLeaveTangent);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, SetTangentsAtSplinePoint_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetTangentsAtSplinePoint_bUpdateSpline_Offset), 0, null, bUpdateSpline);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTangentsAtSplinePoint_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:SetTangentColor
    static readonly IntPtr SetTangentColor_NativeFunction;
    static readonly int SetTangentColor_ParamsSize;
    static readonly int SetTangentColor_TangentColor_Offset;
    
    public void SetTangentColor(UnrealSharp.CoreUObject.LinearColor tangentColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTangentColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetTangentColor_TangentColor_Offset), 0, null, tangentColor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTangentColor_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:SetTangentAtSplinePoint
    static readonly IntPtr SetTangentAtSplinePoint_NativeFunction;
    static readonly int SetTangentAtSplinePoint_ParamsSize;
    static readonly int SetTangentAtSplinePoint_PointIndex_Offset;
    static readonly int SetTangentAtSplinePoint_InTangent_Offset;
    static readonly int SetTangentAtSplinePoint_CoordinateSpace_Offset;
    static readonly int SetTangentAtSplinePoint_bUpdateSpline_Offset;
    
    public void SetTangentAtSplinePoint(int pointIndex, System.DoubleNumerics.Vector3 inTangent, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, bool bUpdateSpline = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTangentAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetTangentAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetTangentAtSplinePoint_InTangent_Offset), 0, null, inTangent);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, SetTangentAtSplinePoint_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetTangentAtSplinePoint_bUpdateSpline_Offset), 0, null, bUpdateSpline);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTangentAtSplinePoint_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:SetSplineWorldPoints
    static readonly IntPtr SetSplineWorldPoints_NativeFunction;
    static readonly int SetSplineWorldPoints_ParamsSize;
    static readonly int SetSplineWorldPoints_Points_Offset;
    static readonly int SetSplineWorldPoints_Points_ElementSize;
    
    [Obsolete("Please use SetSplinePoints, specifying SplineCoordinateSpace::World")]
    public void SetSplineWorldPoints(System.Collections.Generic.IList<System.DoubleNumerics.Vector3> points)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSplineWorldPoints_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Points_NativeBuffer = IntPtr.Add(ParamsBuffer, SetSplineWorldPoints_Points_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Points_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, SetSplineWorldPoints_Points_ElementSize);
            Points_Marshaler.ToNative(Points_NativeBuffer, 0, null, points);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSplineWorldPoints_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:SetSplinePointType
    static readonly IntPtr SetSplinePointType_NativeFunction;
    static readonly int SetSplinePointType_ParamsSize;
    static readonly int SetSplinePointType_PointIndex_Offset;
    static readonly int SetSplinePointType_Type_Offset;
    static readonly int SetSplinePointType_bUpdateSpline_Offset;
    
    public void SetSplinePointType(int pointIndex, UnrealSharp.Engine.ESplinePointType type, bool bUpdateSpline = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSplinePointType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetSplinePointType_PointIndex_Offset), 0, null, pointIndex);
            BlittableMarshaller<UnrealSharp.Engine.ESplinePointType>.ToNative(IntPtr.Add(ParamsBuffer, SetSplinePointType_Type_Offset), 0, null, type);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetSplinePointType_bUpdateSpline_Offset), 0, null, bUpdateSpline);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSplinePointType_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:SetSplinePoints
    static readonly IntPtr SetSplinePoints_NativeFunction;
    static readonly int SetSplinePoints_ParamsSize;
    static readonly int SetSplinePoints_Points_Offset;
    static readonly int SetSplinePoints_Points_ElementSize;
    static readonly int SetSplinePoints_CoordinateSpace_Offset;
    static readonly int SetSplinePoints_bUpdateSpline_Offset;
    
    public void SetSplinePoints(System.Collections.Generic.IList<System.DoubleNumerics.Vector3> points, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, bool bUpdateSpline = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSplinePoints_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Points_NativeBuffer = IntPtr.Add(ParamsBuffer, SetSplinePoints_Points_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Points_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, SetSplinePoints_Points_ElementSize);
            Points_Marshaler.ToNative(Points_NativeBuffer, 0, null, points);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, SetSplinePoints_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetSplinePoints_bUpdateSpline_Offset), 0, null, bUpdateSpline);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSplinePoints_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:SetSplineLocalPoints
    static readonly IntPtr SetSplineLocalPoints_NativeFunction;
    static readonly int SetSplineLocalPoints_ParamsSize;
    static readonly int SetSplineLocalPoints_Points_Offset;
    static readonly int SetSplineLocalPoints_Points_ElementSize;
    
    [Obsolete("Please use SetSplinePoints, specifying SplineCoordinateSpace::Local")]
    public void SetSplineLocalPoints(System.Collections.Generic.IList<System.DoubleNumerics.Vector3> points)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSplineLocalPoints_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Points_NativeBuffer = IntPtr.Add(ParamsBuffer, SetSplineLocalPoints_Points_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> Points_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>(1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, SetSplineLocalPoints_Points_ElementSize);
            Points_Marshaler.ToNative(Points_NativeBuffer, 0, null, points);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSplineLocalPoints_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:SetSelectedSplineSegmentColor
    static readonly IntPtr SetSelectedSplineSegmentColor_NativeFunction;
    static readonly int SetSelectedSplineSegmentColor_ParamsSize;
    static readonly int SetSelectedSplineSegmentColor_SegmentColor_Offset;
    
    public void SetSelectedSplineSegmentColor(UnrealSharp.CoreUObject.LinearColor segmentColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSelectedSplineSegmentColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetSelectedSplineSegmentColor_SegmentColor_Offset), 0, null, segmentColor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSelectedSplineSegmentColor_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:SetScaleAtSplinePoint
    static readonly IntPtr SetScaleAtSplinePoint_NativeFunction;
    static readonly int SetScaleAtSplinePoint_ParamsSize;
    static readonly int SetScaleAtSplinePoint_PointIndex_Offset;
    static readonly int SetScaleAtSplinePoint_InScaleVector_Offset;
    static readonly int SetScaleAtSplinePoint_bUpdateSpline_Offset;
    
    public void SetScaleAtSplinePoint(int pointIndex, System.DoubleNumerics.Vector3 inScaleVector, bool bUpdateSpline = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetScaleAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetScaleAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetScaleAtSplinePoint_InScaleVector_Offset), 0, null, inScaleVector);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetScaleAtSplinePoint_bUpdateSpline_Offset), 0, null, bUpdateSpline);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetScaleAtSplinePoint_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:SetRotationAtSplinePoint
    static readonly IntPtr SetRotationAtSplinePoint_NativeFunction;
    static readonly int SetRotationAtSplinePoint_ParamsSize;
    static readonly int SetRotationAtSplinePoint_PointIndex_Offset;
    static readonly int SetRotationAtSplinePoint_InRotation_Offset;
    static readonly int SetRotationAtSplinePoint_CoordinateSpace_Offset;
    static readonly int SetRotationAtSplinePoint_bUpdateSpline_Offset;
    
    public void SetRotationAtSplinePoint(int pointIndex, UnrealSharp.Rotator inRotation, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, bool bUpdateSpline = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRotationAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetRotationAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SetRotationAtSplinePoint_InRotation_Offset), 0, null, inRotation);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, SetRotationAtSplinePoint_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetRotationAtSplinePoint_bUpdateSpline_Offset), 0, null, bUpdateSpline);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRotationAtSplinePoint_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:SetLocationAtSplinePoint
    static readonly IntPtr SetLocationAtSplinePoint_NativeFunction;
    static readonly int SetLocationAtSplinePoint_ParamsSize;
    static readonly int SetLocationAtSplinePoint_PointIndex_Offset;
    static readonly int SetLocationAtSplinePoint_InLocation_Offset;
    static readonly int SetLocationAtSplinePoint_CoordinateSpace_Offset;
    static readonly int SetLocationAtSplinePoint_bUpdateSpline_Offset;
    
    public void SetLocationAtSplinePoint(int pointIndex, System.DoubleNumerics.Vector3 inLocation, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, bool bUpdateSpline = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocationAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetLocationAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetLocationAtSplinePoint_InLocation_Offset), 0, null, inLocation);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, SetLocationAtSplinePoint_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocationAtSplinePoint_bUpdateSpline_Offset), 0, null, bUpdateSpline);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLocationAtSplinePoint_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:SetDrawDebug
    static readonly IntPtr SetDrawDebug_NativeFunction;
    static readonly int SetDrawDebug_ParamsSize;
    static readonly int SetDrawDebug_bShow_Offset;
    
    public void SetDrawDebug(bool bShow)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDrawDebug_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetDrawDebug_bShow_Offset), 0, null, bShow);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDrawDebug_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:SetDefaultUpVector
    static readonly IntPtr SetDefaultUpVector_NativeFunction;
    static readonly int SetDefaultUpVector_ParamsSize;
    static readonly int SetDefaultUpVector_UpVector_Offset;
    static readonly int SetDefaultUpVector_CoordinateSpace_Offset;
    
    public void SetDefaultUpVector(System.DoubleNumerics.Vector3 upVector, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDefaultUpVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetDefaultUpVector_UpVector_Offset), 0, null, upVector);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, SetDefaultUpVector_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDefaultUpVector_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:SetClosedLoopAtPosition
    static readonly IntPtr SetClosedLoopAtPosition_NativeFunction;
    static readonly int SetClosedLoopAtPosition_ParamsSize;
    static readonly int SetClosedLoopAtPosition_bInClosedLoop_Offset;
    static readonly int SetClosedLoopAtPosition_Key_Offset;
    static readonly int SetClosedLoopAtPosition_bUpdateSpline_Offset;
    
    public void SetClosedLoopAtPosition(bool bInClosedLoop, float key, bool bUpdateSpline = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetClosedLoopAtPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetClosedLoopAtPosition_bInClosedLoop_Offset), 0, null, bInClosedLoop);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetClosedLoopAtPosition_Key_Offset), 0, null, key);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetClosedLoopAtPosition_bUpdateSpline_Offset), 0, null, bUpdateSpline);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetClosedLoopAtPosition_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:SetClosedLoop
    static readonly IntPtr SetClosedLoop_NativeFunction;
    static readonly int SetClosedLoop_ParamsSize;
    static readonly int SetClosedLoop_bInClosedLoop_Offset;
    static readonly int SetClosedLoop_bUpdateSpline_Offset;
    
    public void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetClosedLoop_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetClosedLoop_bInClosedLoop_Offset), 0, null, bInClosedLoop);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetClosedLoop_bUpdateSpline_Offset), 0, null, bUpdateSpline);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetClosedLoop_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:RemoveSplinePoint
    static readonly IntPtr RemoveSplinePoint_NativeFunction;
    static readonly int RemoveSplinePoint_ParamsSize;
    static readonly int RemoveSplinePoint_Index_Offset;
    static readonly int RemoveSplinePoint_bUpdateSpline_Offset;
    
    public void RemoveSplinePoint(int index, bool bUpdateSpline = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, RemoveSplinePoint_Index_Offset), 0, null, index);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, RemoveSplinePoint_bUpdateSpline_Offset), 0, null, bUpdateSpline);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveSplinePoint_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:IsClosedLoop
    static readonly IntPtr IsClosedLoop_NativeFunction;
    static readonly int IsClosedLoop_ParamsSize;
    static readonly int IsClosedLoop_ReturnValue_Offset;
    
    public bool IsClosedLoop()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsClosedLoop_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsClosedLoop_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsClosedLoop_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetWorldTangentAtDistanceAlongSpline
    static readonly IntPtr GetWorldTangentAtDistanceAlongSpline_NativeFunction;
    static readonly int GetWorldTangentAtDistanceAlongSpline_ParamsSize;
    static readonly int GetWorldTangentAtDistanceAlongSpline_Distance_Offset;
    static readonly int GetWorldTangentAtDistanceAlongSpline_ReturnValue_Offset;
    
    [Obsolete("Please use GetTangentAtDistanceAlongSpline, specifying SplineCoordinateSpace::World")]
    public System.DoubleNumerics.Vector3 GetWorldTangentAtDistanceAlongSpline(float distance)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWorldTangentAtDistanceAlongSpline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetWorldTangentAtDistanceAlongSpline_Distance_Offset), 0, null, distance);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetWorldTangentAtDistanceAlongSpline_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetWorldTangentAtDistanceAlongSpline_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetWorldRotationAtTime
    static readonly IntPtr GetWorldRotationAtTime_NativeFunction;
    static readonly int GetWorldRotationAtTime_ParamsSize;
    static readonly int GetWorldRotationAtTime_Time_Offset;
    static readonly int GetWorldRotationAtTime_bUseConstantVelocity_Offset;
    static readonly int GetWorldRotationAtTime_ReturnValue_Offset;
    
    [Obsolete("Please use GetRotationAtTime, specifying SplineCoordinateSpace::World")]
    public UnrealSharp.Rotator GetWorldRotationAtTime(float time, bool bUseConstantVelocity = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWorldRotationAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetWorldRotationAtTime_Time_Offset), 0, null, time);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetWorldRotationAtTime_bUseConstantVelocity_Offset), 0, null, bUseConstantVelocity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetWorldRotationAtTime_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetWorldRotationAtTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetWorldRotationAtDistanceAlongSpline
    static readonly IntPtr GetWorldRotationAtDistanceAlongSpline_NativeFunction;
    static readonly int GetWorldRotationAtDistanceAlongSpline_ParamsSize;
    static readonly int GetWorldRotationAtDistanceAlongSpline_Distance_Offset;
    static readonly int GetWorldRotationAtDistanceAlongSpline_ReturnValue_Offset;
    
    [Obsolete("Please use GetRotationAtDistanceAlongSpline, specifying SplineCoordinateSpace::World")]
    public UnrealSharp.Rotator GetWorldRotationAtDistanceAlongSpline(float distance)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWorldRotationAtDistanceAlongSpline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetWorldRotationAtDistanceAlongSpline_Distance_Offset), 0, null, distance);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetWorldRotationAtDistanceAlongSpline_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetWorldRotationAtDistanceAlongSpline_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetWorldLocationAtTime
    static readonly IntPtr GetWorldLocationAtTime_NativeFunction;
    static readonly int GetWorldLocationAtTime_ParamsSize;
    static readonly int GetWorldLocationAtTime_Time_Offset;
    static readonly int GetWorldLocationAtTime_bUseConstantVelocity_Offset;
    static readonly int GetWorldLocationAtTime_ReturnValue_Offset;
    
    [Obsolete("Please use GetLocationAtTime, specifying SplineCoordinateSpace::World")]
    public System.DoubleNumerics.Vector3 GetWorldLocationAtTime(float time, bool bUseConstantVelocity = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWorldLocationAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetWorldLocationAtTime_Time_Offset), 0, null, time);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetWorldLocationAtTime_bUseConstantVelocity_Offset), 0, null, bUseConstantVelocity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetWorldLocationAtTime_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetWorldLocationAtTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetWorldLocationAtSplinePoint
    static readonly IntPtr GetWorldLocationAtSplinePoint_NativeFunction;
    static readonly int GetWorldLocationAtSplinePoint_ParamsSize;
    static readonly int GetWorldLocationAtSplinePoint_PointIndex_Offset;
    static readonly int GetWorldLocationAtSplinePoint_ReturnValue_Offset;
    
    [Obsolete("Please use GetLocationAtSplinePoint, specifying SplineCoordinateSpace::World")]
    public System.DoubleNumerics.Vector3 GetWorldLocationAtSplinePoint(int pointIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWorldLocationAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetWorldLocationAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetWorldLocationAtSplinePoint_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetWorldLocationAtSplinePoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetWorldLocationAtDistanceAlongSpline
    static readonly IntPtr GetWorldLocationAtDistanceAlongSpline_NativeFunction;
    static readonly int GetWorldLocationAtDistanceAlongSpline_ParamsSize;
    static readonly int GetWorldLocationAtDistanceAlongSpline_Distance_Offset;
    static readonly int GetWorldLocationAtDistanceAlongSpline_ReturnValue_Offset;
    
    [Obsolete("Please use GetLocationAtDistanceAlongSpline, specifying SplineCoordinateSpace::World")]
    public System.DoubleNumerics.Vector3 GetWorldLocationAtDistanceAlongSpline(float distance)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWorldLocationAtDistanceAlongSpline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetWorldLocationAtDistanceAlongSpline_Distance_Offset), 0, null, distance);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetWorldLocationAtDistanceAlongSpline_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetWorldLocationAtDistanceAlongSpline_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetWorldDirectionAtTime
    static readonly IntPtr GetWorldDirectionAtTime_NativeFunction;
    static readonly int GetWorldDirectionAtTime_ParamsSize;
    static readonly int GetWorldDirectionAtTime_Time_Offset;
    static readonly int GetWorldDirectionAtTime_bUseConstantVelocity_Offset;
    static readonly int GetWorldDirectionAtTime_ReturnValue_Offset;
    
    [Obsolete("Please use GetDirectionAtTime, specifying SplineCoordinateSpace::World")]
    public System.DoubleNumerics.Vector3 GetWorldDirectionAtTime(float time, bool bUseConstantVelocity = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWorldDirectionAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetWorldDirectionAtTime_Time_Offset), 0, null, time);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetWorldDirectionAtTime_bUseConstantVelocity_Offset), 0, null, bUseConstantVelocity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetWorldDirectionAtTime_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetWorldDirectionAtTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetWorldDirectionAtDistanceAlongSpline
    static readonly IntPtr GetWorldDirectionAtDistanceAlongSpline_NativeFunction;
    static readonly int GetWorldDirectionAtDistanceAlongSpline_ParamsSize;
    static readonly int GetWorldDirectionAtDistanceAlongSpline_Distance_Offset;
    static readonly int GetWorldDirectionAtDistanceAlongSpline_ReturnValue_Offset;
    
    [Obsolete("Please use GetDirectionAtDistanceAlongSpline, specifying SplineCoordinateSpace::World")]
    public System.DoubleNumerics.Vector3 GetWorldDirectionAtDistanceAlongSpline(float distance)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWorldDirectionAtDistanceAlongSpline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetWorldDirectionAtDistanceAlongSpline_Distance_Offset), 0, null, distance);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetWorldDirectionAtDistanceAlongSpline_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetWorldDirectionAtDistanceAlongSpline_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetVectorPropertyAtSplinePoint
    static readonly IntPtr GetVectorPropertyAtSplinePoint_NativeFunction;
    static readonly int GetVectorPropertyAtSplinePoint_ParamsSize;
    static readonly int GetVectorPropertyAtSplinePoint_Index_Offset;
    static readonly int GetVectorPropertyAtSplinePoint_PropertyName_Offset;
    static readonly int GetVectorPropertyAtSplinePoint_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetVectorPropertyAtSplinePoint(int index, Name propertyName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVectorPropertyAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetVectorPropertyAtSplinePoint_Index_Offset), 0, null, index);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetVectorPropertyAtSplinePoint_PropertyName_Offset), 0, null, propertyName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVectorPropertyAtSplinePoint_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetVectorPropertyAtSplinePoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetVectorPropertyAtSplineInputKey
    static readonly IntPtr GetVectorPropertyAtSplineInputKey_NativeFunction;
    static readonly int GetVectorPropertyAtSplineInputKey_ParamsSize;
    static readonly int GetVectorPropertyAtSplineInputKey_InKey_Offset;
    static readonly int GetVectorPropertyAtSplineInputKey_PropertyName_Offset;
    static readonly int GetVectorPropertyAtSplineInputKey_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetVectorPropertyAtSplineInputKey(float inKey, Name propertyName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVectorPropertyAtSplineInputKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetVectorPropertyAtSplineInputKey_InKey_Offset), 0, null, inKey);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetVectorPropertyAtSplineInputKey_PropertyName_Offset), 0, null, propertyName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVectorPropertyAtSplineInputKey_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetVectorPropertyAtSplineInputKey_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetUpVectorAtTime
    static readonly IntPtr GetUpVectorAtTime_NativeFunction;
    static readonly int GetUpVectorAtTime_ParamsSize;
    static readonly int GetUpVectorAtTime_Time_Offset;
    static readonly int GetUpVectorAtTime_CoordinateSpace_Offset;
    static readonly int GetUpVectorAtTime_bUseConstantVelocity_Offset;
    static readonly int GetUpVectorAtTime_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetUpVectorAtTime(float time, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, bool bUseConstantVelocity = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetUpVectorAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetUpVectorAtTime_Time_Offset), 0, null, time);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetUpVectorAtTime_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetUpVectorAtTime_bUseConstantVelocity_Offset), 0, null, bUseConstantVelocity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetUpVectorAtTime_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetUpVectorAtTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetUpVectorAtSplinePoint
    static readonly IntPtr GetUpVectorAtSplinePoint_NativeFunction;
    static readonly int GetUpVectorAtSplinePoint_ParamsSize;
    static readonly int GetUpVectorAtSplinePoint_PointIndex_Offset;
    static readonly int GetUpVectorAtSplinePoint_CoordinateSpace_Offset;
    static readonly int GetUpVectorAtSplinePoint_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetUpVectorAtSplinePoint(int pointIndex, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetUpVectorAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetUpVectorAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetUpVectorAtSplinePoint_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetUpVectorAtSplinePoint_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetUpVectorAtSplinePoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetUpVectorAtSplineInputKey
    static readonly IntPtr GetUpVectorAtSplineInputKey_NativeFunction;
    static readonly int GetUpVectorAtSplineInputKey_ParamsSize;
    static readonly int GetUpVectorAtSplineInputKey_InKey_Offset;
    static readonly int GetUpVectorAtSplineInputKey_CoordinateSpace_Offset;
    static readonly int GetUpVectorAtSplineInputKey_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetUpVectorAtSplineInputKey(float inKey, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetUpVectorAtSplineInputKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetUpVectorAtSplineInputKey_InKey_Offset), 0, null, inKey);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetUpVectorAtSplineInputKey_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetUpVectorAtSplineInputKey_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetUpVectorAtSplineInputKey_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetUpVectorAtDistanceAlongSpline
    static readonly IntPtr GetUpVectorAtDistanceAlongSpline_NativeFunction;
    static readonly int GetUpVectorAtDistanceAlongSpline_ParamsSize;
    static readonly int GetUpVectorAtDistanceAlongSpline_Distance_Offset;
    static readonly int GetUpVectorAtDistanceAlongSpline_CoordinateSpace_Offset;
    static readonly int GetUpVectorAtDistanceAlongSpline_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetUpVectorAtDistanceAlongSpline(float distance, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetUpVectorAtDistanceAlongSpline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetUpVectorAtDistanceAlongSpline_Distance_Offset), 0, null, distance);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetUpVectorAtDistanceAlongSpline_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetUpVectorAtDistanceAlongSpline_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetUpVectorAtDistanceAlongSpline_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetTransformAtTime
    static readonly IntPtr GetTransformAtTime_NativeFunction;
    static readonly int GetTransformAtTime_ParamsSize;
    static readonly int GetTransformAtTime_Time_Offset;
    static readonly int GetTransformAtTime_CoordinateSpace_Offset;
    static readonly int GetTransformAtTime_bUseConstantVelocity_Offset;
    static readonly int GetTransformAtTime_bUseScale_Offset;
    static readonly int GetTransformAtTime_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetTransformAtTime(float time, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, bool bUseConstantVelocity = false, bool bUseScale = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTransformAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetTransformAtTime_Time_Offset), 0, null, time);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetTransformAtTime_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetTransformAtTime_bUseConstantVelocity_Offset), 0, null, bUseConstantVelocity);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetTransformAtTime_bUseScale_Offset), 0, null, bUseScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTransformAtTime_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetTransformAtTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetTransformAtSplinePoint
    static readonly IntPtr GetTransformAtSplinePoint_NativeFunction;
    static readonly int GetTransformAtSplinePoint_ParamsSize;
    static readonly int GetTransformAtSplinePoint_PointIndex_Offset;
    static readonly int GetTransformAtSplinePoint_CoordinateSpace_Offset;
    static readonly int GetTransformAtSplinePoint_bUseScale_Offset;
    static readonly int GetTransformAtSplinePoint_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetTransformAtSplinePoint(int pointIndex, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, bool bUseScale = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTransformAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetTransformAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetTransformAtSplinePoint_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetTransformAtSplinePoint_bUseScale_Offset), 0, null, bUseScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTransformAtSplinePoint_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetTransformAtSplinePoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetTransformAtSplineInputKey
    static readonly IntPtr GetTransformAtSplineInputKey_NativeFunction;
    static readonly int GetTransformAtSplineInputKey_ParamsSize;
    static readonly int GetTransformAtSplineInputKey_InKey_Offset;
    static readonly int GetTransformAtSplineInputKey_CoordinateSpace_Offset;
    static readonly int GetTransformAtSplineInputKey_bUseScale_Offset;
    static readonly int GetTransformAtSplineInputKey_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetTransformAtSplineInputKey(float inKey, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, bool bUseScale = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTransformAtSplineInputKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetTransformAtSplineInputKey_InKey_Offset), 0, null, inKey);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetTransformAtSplineInputKey_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetTransformAtSplineInputKey_bUseScale_Offset), 0, null, bUseScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTransformAtSplineInputKey_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetTransformAtSplineInputKey_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetTransformAtDistanceAlongSpline
    static readonly IntPtr GetTransformAtDistanceAlongSpline_NativeFunction;
    static readonly int GetTransformAtDistanceAlongSpline_ParamsSize;
    static readonly int GetTransformAtDistanceAlongSpline_Distance_Offset;
    static readonly int GetTransformAtDistanceAlongSpline_CoordinateSpace_Offset;
    static readonly int GetTransformAtDistanceAlongSpline_bUseScale_Offset;
    static readonly int GetTransformAtDistanceAlongSpline_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetTransformAtDistanceAlongSpline(float distance, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, bool bUseScale = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTransformAtDistanceAlongSpline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetTransformAtDistanceAlongSpline_Distance_Offset), 0, null, distance);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetTransformAtDistanceAlongSpline_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetTransformAtDistanceAlongSpline_bUseScale_Offset), 0, null, bUseScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTransformAtDistanceAlongSpline_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetTransformAtDistanceAlongSpline_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetTimeAtDistanceAlongSpline
    static readonly IntPtr GetTimeAtDistanceAlongSpline_NativeFunction;
    static readonly int GetTimeAtDistanceAlongSpline_ParamsSize;
    static readonly int GetTimeAtDistanceAlongSpline_Distance_Offset;
    static readonly int GetTimeAtDistanceAlongSpline_ReturnValue_Offset;
    
    public float GetTimeAtDistanceAlongSpline(float distance)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTimeAtDistanceAlongSpline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetTimeAtDistanceAlongSpline_Distance_Offset), 0, null, distance);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTimeAtDistanceAlongSpline_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetTimeAtDistanceAlongSpline_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetTangentAtTime
    static readonly IntPtr GetTangentAtTime_NativeFunction;
    static readonly int GetTangentAtTime_ParamsSize;
    static readonly int GetTangentAtTime_Time_Offset;
    static readonly int GetTangentAtTime_CoordinateSpace_Offset;
    static readonly int GetTangentAtTime_bUseConstantVelocity_Offset;
    static readonly int GetTangentAtTime_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetTangentAtTime(float time, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, bool bUseConstantVelocity = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTangentAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetTangentAtTime_Time_Offset), 0, null, time);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetTangentAtTime_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetTangentAtTime_bUseConstantVelocity_Offset), 0, null, bUseConstantVelocity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTangentAtTime_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetTangentAtTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetTangentAtSplinePoint
    static readonly IntPtr GetTangentAtSplinePoint_NativeFunction;
    static readonly int GetTangentAtSplinePoint_ParamsSize;
    static readonly int GetTangentAtSplinePoint_PointIndex_Offset;
    static readonly int GetTangentAtSplinePoint_CoordinateSpace_Offset;
    static readonly int GetTangentAtSplinePoint_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetTangentAtSplinePoint(int pointIndex, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTangentAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetTangentAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetTangentAtSplinePoint_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTangentAtSplinePoint_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetTangentAtSplinePoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetTangentAtSplineInputKey
    static readonly IntPtr GetTangentAtSplineInputKey_NativeFunction;
    static readonly int GetTangentAtSplineInputKey_ParamsSize;
    static readonly int GetTangentAtSplineInputKey_InKey_Offset;
    static readonly int GetTangentAtSplineInputKey_CoordinateSpace_Offset;
    static readonly int GetTangentAtSplineInputKey_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetTangentAtSplineInputKey(float inKey, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTangentAtSplineInputKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetTangentAtSplineInputKey_InKey_Offset), 0, null, inKey);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetTangentAtSplineInputKey_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTangentAtSplineInputKey_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetTangentAtSplineInputKey_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetTangentAtDistanceAlongSpline
    static readonly IntPtr GetTangentAtDistanceAlongSpline_NativeFunction;
    static readonly int GetTangentAtDistanceAlongSpline_ParamsSize;
    static readonly int GetTangentAtDistanceAlongSpline_Distance_Offset;
    static readonly int GetTangentAtDistanceAlongSpline_CoordinateSpace_Offset;
    static readonly int GetTangentAtDistanceAlongSpline_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetTangentAtDistanceAlongSpline(float distance, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTangentAtDistanceAlongSpline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetTangentAtDistanceAlongSpline_Distance_Offset), 0, null, distance);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetTangentAtDistanceAlongSpline_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTangentAtDistanceAlongSpline_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetTangentAtDistanceAlongSpline_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetSplinePointType
    static readonly IntPtr GetSplinePointType_NativeFunction;
    static readonly int GetSplinePointType_ParamsSize;
    static readonly int GetSplinePointType_PointIndex_Offset;
    static readonly int GetSplinePointType_ReturnValue_Offset;
    
    public UnrealSharp.Engine.ESplinePointType GetSplinePointType(int pointIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSplinePointType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetSplinePointType_PointIndex_Offset), 0, null, pointIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSplinePointType_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.ESplinePointType returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Engine.ESplinePointType>.FromNative(IntPtr.Add(ParamsBuffer, GetSplinePointType_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetSplinePointAt
    static readonly IntPtr GetSplinePointAt_NativeFunction;
    static readonly int GetSplinePointAt_ParamsSize;
    static readonly int GetSplinePointAt_PointIndex_Offset;
    static readonly int GetSplinePointAt_CoordinateSpace_Offset;
    static readonly int GetSplinePointAt_ReturnValue_Offset;
    
    public UnrealSharp.Engine.SplinePoint GetSplinePointAt(int pointIndex, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSplinePointAt_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetSplinePointAt_PointIndex_Offset), 0, null, pointIndex);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetSplinePointAt_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSplinePointAt_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.SplinePoint returnValue;
            returnValue = UnrealSharp.Engine.SplinePointMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetSplinePointAt_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetSplineLength
    static readonly IntPtr GetSplineLength_NativeFunction;
    static readonly int GetSplineLength_ParamsSize;
    static readonly int GetSplineLength_ReturnValue_Offset;
    
    public float GetSplineLength()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSplineLength_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSplineLength_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetSplineLength_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetScaleAtTime
    static readonly IntPtr GetScaleAtTime_NativeFunction;
    static readonly int GetScaleAtTime_ParamsSize;
    static readonly int GetScaleAtTime_Time_Offset;
    static readonly int GetScaleAtTime_bUseConstantVelocity_Offset;
    static readonly int GetScaleAtTime_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetScaleAtTime(float time, bool bUseConstantVelocity = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetScaleAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetScaleAtTime_Time_Offset), 0, null, time);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetScaleAtTime_bUseConstantVelocity_Offset), 0, null, bUseConstantVelocity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetScaleAtTime_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetScaleAtTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetScaleAtSplinePoint
    static readonly IntPtr GetScaleAtSplinePoint_NativeFunction;
    static readonly int GetScaleAtSplinePoint_ParamsSize;
    static readonly int GetScaleAtSplinePoint_PointIndex_Offset;
    static readonly int GetScaleAtSplinePoint_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetScaleAtSplinePoint(int pointIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetScaleAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetScaleAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetScaleAtSplinePoint_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetScaleAtSplinePoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetScaleAtSplineInputKey
    static readonly IntPtr GetScaleAtSplineInputKey_NativeFunction;
    static readonly int GetScaleAtSplineInputKey_ParamsSize;
    static readonly int GetScaleAtSplineInputKey_InKey_Offset;
    static readonly int GetScaleAtSplineInputKey_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetScaleAtSplineInputKey(float inKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetScaleAtSplineInputKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetScaleAtSplineInputKey_InKey_Offset), 0, null, inKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetScaleAtSplineInputKey_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetScaleAtSplineInputKey_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetScaleAtDistanceAlongSpline
    static readonly IntPtr GetScaleAtDistanceAlongSpline_NativeFunction;
    static readonly int GetScaleAtDistanceAlongSpline_ParamsSize;
    static readonly int GetScaleAtDistanceAlongSpline_Distance_Offset;
    static readonly int GetScaleAtDistanceAlongSpline_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetScaleAtDistanceAlongSpline(float distance)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetScaleAtDistanceAlongSpline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetScaleAtDistanceAlongSpline_Distance_Offset), 0, null, distance);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetScaleAtDistanceAlongSpline_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetScaleAtDistanceAlongSpline_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetRotationAtTime
    static readonly IntPtr GetRotationAtTime_NativeFunction;
    static readonly int GetRotationAtTime_ParamsSize;
    static readonly int GetRotationAtTime_Time_Offset;
    static readonly int GetRotationAtTime_CoordinateSpace_Offset;
    static readonly int GetRotationAtTime_bUseConstantVelocity_Offset;
    static readonly int GetRotationAtTime_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetRotationAtTime(float time, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, bool bUseConstantVelocity = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRotationAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetRotationAtTime_Time_Offset), 0, null, time);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetRotationAtTime_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetRotationAtTime_bUseConstantVelocity_Offset), 0, null, bUseConstantVelocity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRotationAtTime_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetRotationAtTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetRotationAtSplinePoint
    static readonly IntPtr GetRotationAtSplinePoint_NativeFunction;
    static readonly int GetRotationAtSplinePoint_ParamsSize;
    static readonly int GetRotationAtSplinePoint_PointIndex_Offset;
    static readonly int GetRotationAtSplinePoint_CoordinateSpace_Offset;
    static readonly int GetRotationAtSplinePoint_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetRotationAtSplinePoint(int pointIndex, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRotationAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetRotationAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetRotationAtSplinePoint_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRotationAtSplinePoint_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetRotationAtSplinePoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetRotationAtSplineInputKey
    static readonly IntPtr GetRotationAtSplineInputKey_NativeFunction;
    static readonly int GetRotationAtSplineInputKey_ParamsSize;
    static readonly int GetRotationAtSplineInputKey_InKey_Offset;
    static readonly int GetRotationAtSplineInputKey_CoordinateSpace_Offset;
    static readonly int GetRotationAtSplineInputKey_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetRotationAtSplineInputKey(float inKey, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRotationAtSplineInputKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetRotationAtSplineInputKey_InKey_Offset), 0, null, inKey);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetRotationAtSplineInputKey_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRotationAtSplineInputKey_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetRotationAtSplineInputKey_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetRotationAtDistanceAlongSpline
    static readonly IntPtr GetRotationAtDistanceAlongSpline_NativeFunction;
    static readonly int GetRotationAtDistanceAlongSpline_ParamsSize;
    static readonly int GetRotationAtDistanceAlongSpline_Distance_Offset;
    static readonly int GetRotationAtDistanceAlongSpline_CoordinateSpace_Offset;
    static readonly int GetRotationAtDistanceAlongSpline_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetRotationAtDistanceAlongSpline(float distance, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRotationAtDistanceAlongSpline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetRotationAtDistanceAlongSpline_Distance_Offset), 0, null, distance);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetRotationAtDistanceAlongSpline_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRotationAtDistanceAlongSpline_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetRotationAtDistanceAlongSpline_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetRollAtTime
    static readonly IntPtr GetRollAtTime_NativeFunction;
    static readonly int GetRollAtTime_ParamsSize;
    static readonly int GetRollAtTime_Time_Offset;
    static readonly int GetRollAtTime_CoordinateSpace_Offset;
    static readonly int GetRollAtTime_bUseConstantVelocity_Offset;
    static readonly int GetRollAtTime_ReturnValue_Offset;
    
    public float GetRollAtTime(float time, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, bool bUseConstantVelocity = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRollAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetRollAtTime_Time_Offset), 0, null, time);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetRollAtTime_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetRollAtTime_bUseConstantVelocity_Offset), 0, null, bUseConstantVelocity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRollAtTime_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetRollAtTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetRollAtSplinePoint
    static readonly IntPtr GetRollAtSplinePoint_NativeFunction;
    static readonly int GetRollAtSplinePoint_ParamsSize;
    static readonly int GetRollAtSplinePoint_PointIndex_Offset;
    static readonly int GetRollAtSplinePoint_CoordinateSpace_Offset;
    static readonly int GetRollAtSplinePoint_ReturnValue_Offset;
    
    public float GetRollAtSplinePoint(int pointIndex, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRollAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetRollAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetRollAtSplinePoint_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRollAtSplinePoint_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetRollAtSplinePoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetRollAtSplineInputKey
    static readonly IntPtr GetRollAtSplineInputKey_NativeFunction;
    static readonly int GetRollAtSplineInputKey_ParamsSize;
    static readonly int GetRollAtSplineInputKey_InKey_Offset;
    static readonly int GetRollAtSplineInputKey_CoordinateSpace_Offset;
    static readonly int GetRollAtSplineInputKey_ReturnValue_Offset;
    
    public float GetRollAtSplineInputKey(float inKey, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRollAtSplineInputKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetRollAtSplineInputKey_InKey_Offset), 0, null, inKey);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetRollAtSplineInputKey_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRollAtSplineInputKey_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetRollAtSplineInputKey_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetRollAtDistanceAlongSpline
    static readonly IntPtr GetRollAtDistanceAlongSpline_NativeFunction;
    static readonly int GetRollAtDistanceAlongSpline_ParamsSize;
    static readonly int GetRollAtDistanceAlongSpline_Distance_Offset;
    static readonly int GetRollAtDistanceAlongSpline_CoordinateSpace_Offset;
    static readonly int GetRollAtDistanceAlongSpline_ReturnValue_Offset;
    
    public float GetRollAtDistanceAlongSpline(float distance, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRollAtDistanceAlongSpline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetRollAtDistanceAlongSpline_Distance_Offset), 0, null, distance);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetRollAtDistanceAlongSpline_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRollAtDistanceAlongSpline_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetRollAtDistanceAlongSpline_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetRightVectorAtTime
    static readonly IntPtr GetRightVectorAtTime_NativeFunction;
    static readonly int GetRightVectorAtTime_ParamsSize;
    static readonly int GetRightVectorAtTime_Time_Offset;
    static readonly int GetRightVectorAtTime_CoordinateSpace_Offset;
    static readonly int GetRightVectorAtTime_bUseConstantVelocity_Offset;
    static readonly int GetRightVectorAtTime_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetRightVectorAtTime(float time, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, bool bUseConstantVelocity = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRightVectorAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetRightVectorAtTime_Time_Offset), 0, null, time);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetRightVectorAtTime_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetRightVectorAtTime_bUseConstantVelocity_Offset), 0, null, bUseConstantVelocity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRightVectorAtTime_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetRightVectorAtTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetRightVectorAtSplinePoint
    static readonly IntPtr GetRightVectorAtSplinePoint_NativeFunction;
    static readonly int GetRightVectorAtSplinePoint_ParamsSize;
    static readonly int GetRightVectorAtSplinePoint_PointIndex_Offset;
    static readonly int GetRightVectorAtSplinePoint_CoordinateSpace_Offset;
    static readonly int GetRightVectorAtSplinePoint_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetRightVectorAtSplinePoint(int pointIndex, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRightVectorAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetRightVectorAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetRightVectorAtSplinePoint_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRightVectorAtSplinePoint_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetRightVectorAtSplinePoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetRightVectorAtSplineInputKey
    static readonly IntPtr GetRightVectorAtSplineInputKey_NativeFunction;
    static readonly int GetRightVectorAtSplineInputKey_ParamsSize;
    static readonly int GetRightVectorAtSplineInputKey_InKey_Offset;
    static readonly int GetRightVectorAtSplineInputKey_CoordinateSpace_Offset;
    static readonly int GetRightVectorAtSplineInputKey_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetRightVectorAtSplineInputKey(float inKey, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRightVectorAtSplineInputKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetRightVectorAtSplineInputKey_InKey_Offset), 0, null, inKey);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetRightVectorAtSplineInputKey_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRightVectorAtSplineInputKey_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetRightVectorAtSplineInputKey_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetRightVectorAtDistanceAlongSpline
    static readonly IntPtr GetRightVectorAtDistanceAlongSpline_NativeFunction;
    static readonly int GetRightVectorAtDistanceAlongSpline_ParamsSize;
    static readonly int GetRightVectorAtDistanceAlongSpline_Distance_Offset;
    static readonly int GetRightVectorAtDistanceAlongSpline_CoordinateSpace_Offset;
    static readonly int GetRightVectorAtDistanceAlongSpline_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetRightVectorAtDistanceAlongSpline(float distance, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRightVectorAtDistanceAlongSpline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetRightVectorAtDistanceAlongSpline_Distance_Offset), 0, null, distance);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetRightVectorAtDistanceAlongSpline_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRightVectorAtDistanceAlongSpline_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetRightVectorAtDistanceAlongSpline_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetNumberOfSplineSegments
    static readonly IntPtr GetNumberOfSplineSegments_NativeFunction;
    static readonly int GetNumberOfSplineSegments_ParamsSize;
    static readonly int GetNumberOfSplineSegments_ReturnValue_Offset;
    
    public int GetNumberOfSplineSegments()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumberOfSplineSegments_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumberOfSplineSegments_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumberOfSplineSegments_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetNumberOfSplinePoints
    static readonly IntPtr GetNumberOfSplinePoints_NativeFunction;
    static readonly int GetNumberOfSplinePoints_ParamsSize;
    static readonly int GetNumberOfSplinePoints_ReturnValue_Offset;
    
    public int GetNumberOfSplinePoints()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumberOfSplinePoints_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumberOfSplinePoints_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumberOfSplinePoints_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetLocationAtTime
    static readonly IntPtr GetLocationAtTime_NativeFunction;
    static readonly int GetLocationAtTime_ParamsSize;
    static readonly int GetLocationAtTime_Time_Offset;
    static readonly int GetLocationAtTime_CoordinateSpace_Offset;
    static readonly int GetLocationAtTime_bUseConstantVelocity_Offset;
    static readonly int GetLocationAtTime_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetLocationAtTime(float time, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, bool bUseConstantVelocity = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocationAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetLocationAtTime_Time_Offset), 0, null, time);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetLocationAtTime_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetLocationAtTime_bUseConstantVelocity_Offset), 0, null, bUseConstantVelocity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLocationAtTime_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLocationAtTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetLocationAtSplinePoint
    static readonly IntPtr GetLocationAtSplinePoint_NativeFunction;
    static readonly int GetLocationAtSplinePoint_ParamsSize;
    static readonly int GetLocationAtSplinePoint_PointIndex_Offset;
    static readonly int GetLocationAtSplinePoint_CoordinateSpace_Offset;
    static readonly int GetLocationAtSplinePoint_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetLocationAtSplinePoint(int pointIndex, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocationAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetLocationAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetLocationAtSplinePoint_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLocationAtSplinePoint_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLocationAtSplinePoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetLocationAtSplineInputKey
    static readonly IntPtr GetLocationAtSplineInputKey_NativeFunction;
    static readonly int GetLocationAtSplineInputKey_ParamsSize;
    static readonly int GetLocationAtSplineInputKey_InKey_Offset;
    static readonly int GetLocationAtSplineInputKey_CoordinateSpace_Offset;
    static readonly int GetLocationAtSplineInputKey_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetLocationAtSplineInputKey(float inKey, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocationAtSplineInputKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetLocationAtSplineInputKey_InKey_Offset), 0, null, inKey);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetLocationAtSplineInputKey_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLocationAtSplineInputKey_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLocationAtSplineInputKey_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetLocationAtDistanceAlongSpline
    static readonly IntPtr GetLocationAtDistanceAlongSpline_NativeFunction;
    static readonly int GetLocationAtDistanceAlongSpline_ParamsSize;
    static readonly int GetLocationAtDistanceAlongSpline_Distance_Offset;
    static readonly int GetLocationAtDistanceAlongSpline_CoordinateSpace_Offset;
    static readonly int GetLocationAtDistanceAlongSpline_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetLocationAtDistanceAlongSpline(float distance, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocationAtDistanceAlongSpline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetLocationAtDistanceAlongSpline_Distance_Offset), 0, null, distance);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetLocationAtDistanceAlongSpline_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLocationAtDistanceAlongSpline_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLocationAtDistanceAlongSpline_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetLocationAndTangentAtSplinePoint
    static readonly IntPtr GetLocationAndTangentAtSplinePoint_NativeFunction;
    static readonly int GetLocationAndTangentAtSplinePoint_ParamsSize;
    static readonly int GetLocationAndTangentAtSplinePoint_PointIndex_Offset;
    static readonly int GetLocationAndTangentAtSplinePoint_Location_Offset;
    static readonly int GetLocationAndTangentAtSplinePoint_Tangent_Offset;
    static readonly int GetLocationAndTangentAtSplinePoint_CoordinateSpace_Offset;
    
    public void GetLocationAndTangentAtSplinePoint(int pointIndex, out System.DoubleNumerics.Vector3 location, out System.DoubleNumerics.Vector3 tangent, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocationAndTangentAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetLocationAndTangentAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetLocationAndTangentAtSplinePoint_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLocationAndTangentAtSplinePoint_NativeFunction, ParamsBuffer);
            
            location = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLocationAndTangentAtSplinePoint_Location_Offset), 0, null);
            tangent = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLocationAndTangentAtSplinePoint_Tangent_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetLocalLocationAndTangentAtSplinePoint
    static readonly IntPtr GetLocalLocationAndTangentAtSplinePoint_NativeFunction;
    static readonly int GetLocalLocationAndTangentAtSplinePoint_ParamsSize;
    static readonly int GetLocalLocationAndTangentAtSplinePoint_PointIndex_Offset;
    static readonly int GetLocalLocationAndTangentAtSplinePoint_LocalLocation_Offset;
    static readonly int GetLocalLocationAndTangentAtSplinePoint_LocalTangent_Offset;
    
    [Obsolete("Please use GetLocationAndTangentAtSplinePoint, specifying SplineCoordinateSpace::Local")]
    public void GetLocalLocationAndTangentAtSplinePoint(int pointIndex, out System.DoubleNumerics.Vector3 localLocation, out System.DoubleNumerics.Vector3 localTangent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalLocationAndTangentAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetLocalLocationAndTangentAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLocalLocationAndTangentAtSplinePoint_NativeFunction, ParamsBuffer);
            
            localLocation = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLocalLocationAndTangentAtSplinePoint_LocalLocation_Offset), 0, null);
            localTangent = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLocalLocationAndTangentAtSplinePoint_LocalTangent_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetLeaveTangentAtSplinePoint
    static readonly IntPtr GetLeaveTangentAtSplinePoint_NativeFunction;
    static readonly int GetLeaveTangentAtSplinePoint_ParamsSize;
    static readonly int GetLeaveTangentAtSplinePoint_PointIndex_Offset;
    static readonly int GetLeaveTangentAtSplinePoint_CoordinateSpace_Offset;
    static readonly int GetLeaveTangentAtSplinePoint_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetLeaveTangentAtSplinePoint(int pointIndex, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLeaveTangentAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetLeaveTangentAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetLeaveTangentAtSplinePoint_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLeaveTangentAtSplinePoint_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLeaveTangentAtSplinePoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetInputKeyValueAtSplinePoint
    static readonly IntPtr GetInputKeyValueAtSplinePoint_NativeFunction;
    static readonly int GetInputKeyValueAtSplinePoint_ParamsSize;
    static readonly int GetInputKeyValueAtSplinePoint_PointIndex_Offset;
    static readonly int GetInputKeyValueAtSplinePoint_ReturnValue_Offset;
    
    public float GetInputKeyValueAtSplinePoint(int pointIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInputKeyValueAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetInputKeyValueAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInputKeyValueAtSplinePoint_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetInputKeyValueAtSplinePoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetInputKeyValueAtDistanceAlongSpline
    static readonly IntPtr GetInputKeyValueAtDistanceAlongSpline_NativeFunction;
    static readonly int GetInputKeyValueAtDistanceAlongSpline_ParamsSize;
    static readonly int GetInputKeyValueAtDistanceAlongSpline_Distance_Offset;
    static readonly int GetInputKeyValueAtDistanceAlongSpline_ReturnValue_Offset;
    
    public float GetInputKeyValueAtDistanceAlongSpline(float distance)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInputKeyValueAtDistanceAlongSpline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetInputKeyValueAtDistanceAlongSpline_Distance_Offset), 0, null, distance);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInputKeyValueAtDistanceAlongSpline_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetInputKeyValueAtDistanceAlongSpline_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetInputKeyAtDistanceAlongSpline
    static readonly IntPtr GetInputKeyAtDistanceAlongSpline_NativeFunction;
    static readonly int GetInputKeyAtDistanceAlongSpline_ParamsSize;
    static readonly int GetInputKeyAtDistanceAlongSpline_Distance_Offset;
    static readonly int GetInputKeyAtDistanceAlongSpline_ReturnValue_Offset;
    
    [Obsolete("Please use GetInputKeyValueAtDistanceAlongSpline to get input key at distance or GetTimeAtDistanceAlongSpline to get time value (normalized to duration) at distance (same logic as deprecated function).")]
    public float GetInputKeyAtDistanceAlongSpline(float distance)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInputKeyAtDistanceAlongSpline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetInputKeyAtDistanceAlongSpline_Distance_Offset), 0, null, distance);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInputKeyAtDistanceAlongSpline_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetInputKeyAtDistanceAlongSpline_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetFloatPropertyAtSplinePoint
    static readonly IntPtr GetFloatPropertyAtSplinePoint_NativeFunction;
    static readonly int GetFloatPropertyAtSplinePoint_ParamsSize;
    static readonly int GetFloatPropertyAtSplinePoint_Index_Offset;
    static readonly int GetFloatPropertyAtSplinePoint_PropertyName_Offset;
    static readonly int GetFloatPropertyAtSplinePoint_ReturnValue_Offset;
    
    public float GetFloatPropertyAtSplinePoint(int index, Name propertyName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFloatPropertyAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetFloatPropertyAtSplinePoint_Index_Offset), 0, null, index);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetFloatPropertyAtSplinePoint_PropertyName_Offset), 0, null, propertyName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFloatPropertyAtSplinePoint_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetFloatPropertyAtSplinePoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetFloatPropertyAtSplineInputKey
    static readonly IntPtr GetFloatPropertyAtSplineInputKey_NativeFunction;
    static readonly int GetFloatPropertyAtSplineInputKey_ParamsSize;
    static readonly int GetFloatPropertyAtSplineInputKey_InKey_Offset;
    static readonly int GetFloatPropertyAtSplineInputKey_PropertyName_Offset;
    static readonly int GetFloatPropertyAtSplineInputKey_ReturnValue_Offset;
    
    public float GetFloatPropertyAtSplineInputKey(float inKey, Name propertyName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFloatPropertyAtSplineInputKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetFloatPropertyAtSplineInputKey_InKey_Offset), 0, null, inKey);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetFloatPropertyAtSplineInputKey_PropertyName_Offset), 0, null, propertyName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFloatPropertyAtSplineInputKey_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetFloatPropertyAtSplineInputKey_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetDistanceAlongSplineAtSplinePoint
    static readonly IntPtr GetDistanceAlongSplineAtSplinePoint_NativeFunction;
    static readonly int GetDistanceAlongSplineAtSplinePoint_ParamsSize;
    static readonly int GetDistanceAlongSplineAtSplinePoint_PointIndex_Offset;
    static readonly int GetDistanceAlongSplineAtSplinePoint_ReturnValue_Offset;
    
    public float GetDistanceAlongSplineAtSplinePoint(int pointIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDistanceAlongSplineAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetDistanceAlongSplineAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDistanceAlongSplineAtSplinePoint_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetDistanceAlongSplineAtSplinePoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetDistanceAlongSplineAtSplineInputKey
    static readonly IntPtr GetDistanceAlongSplineAtSplineInputKey_NativeFunction;
    static readonly int GetDistanceAlongSplineAtSplineInputKey_ParamsSize;
    static readonly int GetDistanceAlongSplineAtSplineInputKey_InKey_Offset;
    static readonly int GetDistanceAlongSplineAtSplineInputKey_ReturnValue_Offset;
    
    public float GetDistanceAlongSplineAtSplineInputKey(float inKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDistanceAlongSplineAtSplineInputKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetDistanceAlongSplineAtSplineInputKey_InKey_Offset), 0, null, inKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDistanceAlongSplineAtSplineInputKey_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetDistanceAlongSplineAtSplineInputKey_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetDistanceAlongSplineAtLocation
    static readonly IntPtr GetDistanceAlongSplineAtLocation_NativeFunction;
    static readonly int GetDistanceAlongSplineAtLocation_ParamsSize;
    static readonly int GetDistanceAlongSplineAtLocation_InLocation_Offset;
    static readonly int GetDistanceAlongSplineAtLocation_CoordinateSpace_Offset;
    static readonly int GetDistanceAlongSplineAtLocation_ReturnValue_Offset;
    
    public float GetDistanceAlongSplineAtLocation(System.DoubleNumerics.Vector3 inLocation, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDistanceAlongSplineAtLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, GetDistanceAlongSplineAtLocation_InLocation_Offset), 0, null, inLocation);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetDistanceAlongSplineAtLocation_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDistanceAlongSplineAtLocation_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetDistanceAlongSplineAtLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetDirectionAtTime
    static readonly IntPtr GetDirectionAtTime_NativeFunction;
    static readonly int GetDirectionAtTime_ParamsSize;
    static readonly int GetDirectionAtTime_Time_Offset;
    static readonly int GetDirectionAtTime_CoordinateSpace_Offset;
    static readonly int GetDirectionAtTime_bUseConstantVelocity_Offset;
    static readonly int GetDirectionAtTime_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetDirectionAtTime(float time, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, bool bUseConstantVelocity = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDirectionAtTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetDirectionAtTime_Time_Offset), 0, null, time);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetDirectionAtTime_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetDirectionAtTime_bUseConstantVelocity_Offset), 0, null, bUseConstantVelocity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDirectionAtTime_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetDirectionAtTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetDirectionAtSplinePoint
    static readonly IntPtr GetDirectionAtSplinePoint_NativeFunction;
    static readonly int GetDirectionAtSplinePoint_ParamsSize;
    static readonly int GetDirectionAtSplinePoint_PointIndex_Offset;
    static readonly int GetDirectionAtSplinePoint_CoordinateSpace_Offset;
    static readonly int GetDirectionAtSplinePoint_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetDirectionAtSplinePoint(int pointIndex, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDirectionAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetDirectionAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetDirectionAtSplinePoint_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDirectionAtSplinePoint_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetDirectionAtSplinePoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetDirectionAtSplineInputKey
    static readonly IntPtr GetDirectionAtSplineInputKey_NativeFunction;
    static readonly int GetDirectionAtSplineInputKey_ParamsSize;
    static readonly int GetDirectionAtSplineInputKey_InKey_Offset;
    static readonly int GetDirectionAtSplineInputKey_CoordinateSpace_Offset;
    static readonly int GetDirectionAtSplineInputKey_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetDirectionAtSplineInputKey(float inKey, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDirectionAtSplineInputKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetDirectionAtSplineInputKey_InKey_Offset), 0, null, inKey);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetDirectionAtSplineInputKey_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDirectionAtSplineInputKey_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetDirectionAtSplineInputKey_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetDirectionAtDistanceAlongSpline
    static readonly IntPtr GetDirectionAtDistanceAlongSpline_NativeFunction;
    static readonly int GetDirectionAtDistanceAlongSpline_ParamsSize;
    static readonly int GetDirectionAtDistanceAlongSpline_Distance_Offset;
    static readonly int GetDirectionAtDistanceAlongSpline_CoordinateSpace_Offset;
    static readonly int GetDirectionAtDistanceAlongSpline_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetDirectionAtDistanceAlongSpline(float distance, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDirectionAtDistanceAlongSpline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetDirectionAtDistanceAlongSpline_Distance_Offset), 0, null, distance);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetDirectionAtDistanceAlongSpline_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDirectionAtDistanceAlongSpline_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetDirectionAtDistanceAlongSpline_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetDefaultUpVector
    static readonly IntPtr GetDefaultUpVector_NativeFunction;
    static readonly int GetDefaultUpVector_ParamsSize;
    static readonly int GetDefaultUpVector_CoordinateSpace_Offset;
    static readonly int GetDefaultUpVector_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetDefaultUpVector(UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDefaultUpVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetDefaultUpVector_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDefaultUpVector_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetDefaultUpVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:GetArriveTangentAtSplinePoint
    static readonly IntPtr GetArriveTangentAtSplinePoint_NativeFunction;
    static readonly int GetArriveTangentAtSplinePoint_ParamsSize;
    static readonly int GetArriveTangentAtSplinePoint_PointIndex_Offset;
    static readonly int GetArriveTangentAtSplinePoint_CoordinateSpace_Offset;
    static readonly int GetArriveTangentAtSplinePoint_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetArriveTangentAtSplinePoint(int pointIndex, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetArriveTangentAtSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetArriveTangentAtSplinePoint_PointIndex_Offset), 0, null, pointIndex);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, GetArriveTangentAtSplinePoint_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetArriveTangentAtSplinePoint_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetArriveTangentAtSplinePoint_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:FindUpVectorClosestToWorldLocation
    static readonly IntPtr FindUpVectorClosestToWorldLocation_NativeFunction;
    static readonly int FindUpVectorClosestToWorldLocation_ParamsSize;
    static readonly int FindUpVectorClosestToWorldLocation_WorldLocation_Offset;
    static readonly int FindUpVectorClosestToWorldLocation_CoordinateSpace_Offset;
    static readonly int FindUpVectorClosestToWorldLocation_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 FindUpVectorClosestToWorldLocation(System.DoubleNumerics.Vector3 worldLocation, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindUpVectorClosestToWorldLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindUpVectorClosestToWorldLocation_WorldLocation_Offset), 0, null, worldLocation);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, FindUpVectorClosestToWorldLocation_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindUpVectorClosestToWorldLocation_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, FindUpVectorClosestToWorldLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:FindTransformClosestToWorldLocation
    static readonly IntPtr FindTransformClosestToWorldLocation_NativeFunction;
    static readonly int FindTransformClosestToWorldLocation_ParamsSize;
    static readonly int FindTransformClosestToWorldLocation_WorldLocation_Offset;
    static readonly int FindTransformClosestToWorldLocation_CoordinateSpace_Offset;
    static readonly int FindTransformClosestToWorldLocation_bUseScale_Offset;
    static readonly int FindTransformClosestToWorldLocation_ReturnValue_Offset;
    
    public UnrealSharp.Transform FindTransformClosestToWorldLocation(System.DoubleNumerics.Vector3 worldLocation, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, bool bUseScale = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindTransformClosestToWorldLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindTransformClosestToWorldLocation_WorldLocation_Offset), 0, null, worldLocation);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, FindTransformClosestToWorldLocation_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, FindTransformClosestToWorldLocation_bUseScale_Offset), 0, null, bUseScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindTransformClosestToWorldLocation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, FindTransformClosestToWorldLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:FindTangentClosestToWorldLocation
    static readonly IntPtr FindTangentClosestToWorldLocation_NativeFunction;
    static readonly int FindTangentClosestToWorldLocation_ParamsSize;
    static readonly int FindTangentClosestToWorldLocation_WorldLocation_Offset;
    static readonly int FindTangentClosestToWorldLocation_CoordinateSpace_Offset;
    static readonly int FindTangentClosestToWorldLocation_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 FindTangentClosestToWorldLocation(System.DoubleNumerics.Vector3 worldLocation, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindTangentClosestToWorldLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindTangentClosestToWorldLocation_WorldLocation_Offset), 0, null, worldLocation);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, FindTangentClosestToWorldLocation_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindTangentClosestToWorldLocation_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, FindTangentClosestToWorldLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:FindScaleClosestToWorldLocation
    static readonly IntPtr FindScaleClosestToWorldLocation_NativeFunction;
    static readonly int FindScaleClosestToWorldLocation_ParamsSize;
    static readonly int FindScaleClosestToWorldLocation_WorldLocation_Offset;
    static readonly int FindScaleClosestToWorldLocation_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 FindScaleClosestToWorldLocation(System.DoubleNumerics.Vector3 worldLocation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindScaleClosestToWorldLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindScaleClosestToWorldLocation_WorldLocation_Offset), 0, null, worldLocation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindScaleClosestToWorldLocation_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, FindScaleClosestToWorldLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:FindRotationClosestToWorldLocation
    static readonly IntPtr FindRotationClosestToWorldLocation_NativeFunction;
    static readonly int FindRotationClosestToWorldLocation_ParamsSize;
    static readonly int FindRotationClosestToWorldLocation_WorldLocation_Offset;
    static readonly int FindRotationClosestToWorldLocation_CoordinateSpace_Offset;
    static readonly int FindRotationClosestToWorldLocation_ReturnValue_Offset;
    
    public UnrealSharp.Rotator FindRotationClosestToWorldLocation(System.DoubleNumerics.Vector3 worldLocation, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindRotationClosestToWorldLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindRotationClosestToWorldLocation_WorldLocation_Offset), 0, null, worldLocation);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, FindRotationClosestToWorldLocation_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindRotationClosestToWorldLocation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, FindRotationClosestToWorldLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:FindRollClosestToWorldLocation
    static readonly IntPtr FindRollClosestToWorldLocation_NativeFunction;
    static readonly int FindRollClosestToWorldLocation_ParamsSize;
    static readonly int FindRollClosestToWorldLocation_WorldLocation_Offset;
    static readonly int FindRollClosestToWorldLocation_CoordinateSpace_Offset;
    static readonly int FindRollClosestToWorldLocation_ReturnValue_Offset;
    
    public float FindRollClosestToWorldLocation(System.DoubleNumerics.Vector3 worldLocation, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindRollClosestToWorldLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindRollClosestToWorldLocation_WorldLocation_Offset), 0, null, worldLocation);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, FindRollClosestToWorldLocation_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindRollClosestToWorldLocation_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, FindRollClosestToWorldLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:FindRightVectorClosestToWorldLocation
    static readonly IntPtr FindRightVectorClosestToWorldLocation_NativeFunction;
    static readonly int FindRightVectorClosestToWorldLocation_ParamsSize;
    static readonly int FindRightVectorClosestToWorldLocation_WorldLocation_Offset;
    static readonly int FindRightVectorClosestToWorldLocation_CoordinateSpace_Offset;
    static readonly int FindRightVectorClosestToWorldLocation_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 FindRightVectorClosestToWorldLocation(System.DoubleNumerics.Vector3 worldLocation, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindRightVectorClosestToWorldLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindRightVectorClosestToWorldLocation_WorldLocation_Offset), 0, null, worldLocation);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, FindRightVectorClosestToWorldLocation_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindRightVectorClosestToWorldLocation_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, FindRightVectorClosestToWorldLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:FindLocationClosestToWorldLocation
    static readonly IntPtr FindLocationClosestToWorldLocation_NativeFunction;
    static readonly int FindLocationClosestToWorldLocation_ParamsSize;
    static readonly int FindLocationClosestToWorldLocation_WorldLocation_Offset;
    static readonly int FindLocationClosestToWorldLocation_CoordinateSpace_Offset;
    static readonly int FindLocationClosestToWorldLocation_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 FindLocationClosestToWorldLocation(System.DoubleNumerics.Vector3 worldLocation, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindLocationClosestToWorldLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindLocationClosestToWorldLocation_WorldLocation_Offset), 0, null, worldLocation);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, FindLocationClosestToWorldLocation_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindLocationClosestToWorldLocation_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, FindLocationClosestToWorldLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:FindInputKeyClosestToWorldLocation
    static readonly IntPtr FindInputKeyClosestToWorldLocation_NativeFunction;
    static readonly int FindInputKeyClosestToWorldLocation_ParamsSize;
    static readonly int FindInputKeyClosestToWorldLocation_WorldLocation_Offset;
    static readonly int FindInputKeyClosestToWorldLocation_ReturnValue_Offset;
    
    public float FindInputKeyClosestToWorldLocation(System.DoubleNumerics.Vector3 worldLocation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindInputKeyClosestToWorldLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindInputKeyClosestToWorldLocation_WorldLocation_Offset), 0, null, worldLocation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindInputKeyClosestToWorldLocation_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, FindInputKeyClosestToWorldLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:FindDirectionClosestToWorldLocation
    static readonly IntPtr FindDirectionClosestToWorldLocation_NativeFunction;
    static readonly int FindDirectionClosestToWorldLocation_ParamsSize;
    static readonly int FindDirectionClosestToWorldLocation_WorldLocation_Offset;
    static readonly int FindDirectionClosestToWorldLocation_CoordinateSpace_Offset;
    static readonly int FindDirectionClosestToWorldLocation_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 FindDirectionClosestToWorldLocation(System.DoubleNumerics.Vector3 worldLocation, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindDirectionClosestToWorldLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FindDirectionClosestToWorldLocation_WorldLocation_Offset), 0, null, worldLocation);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, FindDirectionClosestToWorldLocation_CoordinateSpace_Offset), 0, null, coordinateSpace);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindDirectionClosestToWorldLocation_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, FindDirectionClosestToWorldLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:DivideSplineIntoPolylineRecursiveWithDistances
    static readonly IntPtr DivideSplineIntoPolylineRecursiveWithDistances_NativeFunction;
    static readonly int DivideSplineIntoPolylineRecursiveWithDistances_ParamsSize;
    static readonly int DivideSplineIntoPolylineRecursiveWithDistances_StartDistanceAlongSpline_Offset;
    static readonly int DivideSplineIntoPolylineRecursiveWithDistances_EndDistanceAlongSpline_Offset;
    static readonly int DivideSplineIntoPolylineRecursiveWithDistances_CoordinateSpace_Offset;
    static readonly int DivideSplineIntoPolylineRecursiveWithDistances_MaxSquareDistanceFromSpline_Offset;
    static readonly int DivideSplineIntoPolylineRecursiveWithDistances_OutPoints_Offset;
    static readonly int DivideSplineIntoPolylineRecursiveWithDistances_OutPoints_ElementSize;
    static readonly int DivideSplineIntoPolylineRecursiveWithDistances_OutDistancesAlongSpline_Offset;
    static readonly int DivideSplineIntoPolylineRecursiveWithDistances_OutDistancesAlongSpline_ElementSize;
    static readonly int DivideSplineIntoPolylineRecursiveWithDistances_ReturnValue_Offset;
    
    public bool DivideSplineIntoPolylineRecursiveWithDistances(float startDistanceAlongSpline, float endDistanceAlongSpline, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, float maxSquareDistanceFromSpline, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> outPoints, out System.Collections.Generic.IList<double> outDistancesAlongSpline)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DivideSplineIntoPolylineRecursiveWithDistances_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DivideSplineIntoPolylineRecursiveWithDistances_StartDistanceAlongSpline_Offset), 0, null, startDistanceAlongSpline);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DivideSplineIntoPolylineRecursiveWithDistances_EndDistanceAlongSpline_Offset), 0, null, endDistanceAlongSpline);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, DivideSplineIntoPolylineRecursiveWithDistances_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DivideSplineIntoPolylineRecursiveWithDistances_MaxSquareDistanceFromSpline_Offset), 0, null, maxSquareDistanceFromSpline);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DivideSplineIntoPolylineRecursiveWithDistances_NativeFunction, ParamsBuffer);
            
            IntPtr OutPoints_NativeBuffer = IntPtr.Add(ParamsBuffer, DivideSplineIntoPolylineRecursiveWithDistances_OutPoints_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> OutPoints_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, DivideSplineIntoPolylineRecursiveWithDistances_OutPoints_ElementSize);
            outPoints = OutPoints_Marshaler.FromNative(OutPoints_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(OutPoints_NativeBuffer, 0);
            IntPtr OutDistancesAlongSpline_NativeBuffer = IntPtr.Add(ParamsBuffer, DivideSplineIntoPolylineRecursiveWithDistances_OutDistancesAlongSpline_Offset);
            UnrealArrayCopyMarshaler<double> OutDistancesAlongSpline_Marshaler = new UnrealArrayCopyMarshaler<double> (1, BlittableMarshaller<double>.ToNative, BlittableMarshaller<double>.FromNative, DivideSplineIntoPolylineRecursiveWithDistances_OutDistancesAlongSpline_ElementSize);
            outDistancesAlongSpline = OutDistancesAlongSpline_Marshaler.FromNative(OutDistancesAlongSpline_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<double>.DestructInstance(OutDistancesAlongSpline_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DivideSplineIntoPolylineRecursiveWithDistances_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:DivideSplineIntoPolylineRecursive
    static readonly IntPtr DivideSplineIntoPolylineRecursive_NativeFunction;
    static readonly int DivideSplineIntoPolylineRecursive_ParamsSize;
    static readonly int DivideSplineIntoPolylineRecursive_StartDistanceAlongSpline_Offset;
    static readonly int DivideSplineIntoPolylineRecursive_EndDistanceAlongSpline_Offset;
    static readonly int DivideSplineIntoPolylineRecursive_CoordinateSpace_Offset;
    static readonly int DivideSplineIntoPolylineRecursive_MaxSquareDistanceFromSpline_Offset;
    static readonly int DivideSplineIntoPolylineRecursive_OutPoints_Offset;
    static readonly int DivideSplineIntoPolylineRecursive_OutPoints_ElementSize;
    static readonly int DivideSplineIntoPolylineRecursive_ReturnValue_Offset;
    
    public bool DivideSplineIntoPolylineRecursive(float startDistanceAlongSpline, float endDistanceAlongSpline, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, float maxSquareDistanceFromSpline, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> outPoints)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DivideSplineIntoPolylineRecursive_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DivideSplineIntoPolylineRecursive_StartDistanceAlongSpline_Offset), 0, null, startDistanceAlongSpline);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DivideSplineIntoPolylineRecursive_EndDistanceAlongSpline_Offset), 0, null, endDistanceAlongSpline);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, DivideSplineIntoPolylineRecursive_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, DivideSplineIntoPolylineRecursive_MaxSquareDistanceFromSpline_Offset), 0, null, maxSquareDistanceFromSpline);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DivideSplineIntoPolylineRecursive_NativeFunction, ParamsBuffer);
            
            IntPtr OutPoints_NativeBuffer = IntPtr.Add(ParamsBuffer, DivideSplineIntoPolylineRecursive_OutPoints_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> OutPoints_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, DivideSplineIntoPolylineRecursive_OutPoints_ElementSize);
            outPoints = OutPoints_Marshaler.FromNative(OutPoints_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(OutPoints_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DivideSplineIntoPolylineRecursive_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:ConvertSplineToPolyLine
    static readonly IntPtr ConvertSplineToPolyLine_NativeFunction;
    static readonly int ConvertSplineToPolyLine_ParamsSize;
    static readonly int ConvertSplineToPolyLine_CoordinateSpace_Offset;
    static readonly int ConvertSplineToPolyLine_MaxSquareDistanceFromSpline_Offset;
    static readonly int ConvertSplineToPolyLine_OutPoints_Offset;
    static readonly int ConvertSplineToPolyLine_OutPoints_ElementSize;
    static readonly int ConvertSplineToPolyLine_ReturnValue_Offset;
    
    public bool ConvertSplineToPolyLine(UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, float maxSquareDistanceFromSpline, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> outPoints)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertSplineToPolyLine_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, ConvertSplineToPolyLine_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ConvertSplineToPolyLine_MaxSquareDistanceFromSpline_Offset), 0, null, maxSquareDistanceFromSpline);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConvertSplineToPolyLine_NativeFunction, ParamsBuffer);
            
            IntPtr OutPoints_NativeBuffer = IntPtr.Add(ParamsBuffer, ConvertSplineToPolyLine_OutPoints_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> OutPoints_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, ConvertSplineToPolyLine_OutPoints_ElementSize);
            outPoints = OutPoints_Marshaler.FromNative(OutPoints_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(OutPoints_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConvertSplineToPolyLine_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:ConvertSplineSegmentToPolyLine
    static readonly IntPtr ConvertSplineSegmentToPolyLine_NativeFunction;
    static readonly int ConvertSplineSegmentToPolyLine_ParamsSize;
    static readonly int ConvertSplineSegmentToPolyLine_SplinePointStartIndex_Offset;
    static readonly int ConvertSplineSegmentToPolyLine_CoordinateSpace_Offset;
    static readonly int ConvertSplineSegmentToPolyLine_MaxSquareDistanceFromSpline_Offset;
    static readonly int ConvertSplineSegmentToPolyLine_OutPoints_Offset;
    static readonly int ConvertSplineSegmentToPolyLine_OutPoints_ElementSize;
    static readonly int ConvertSplineSegmentToPolyLine_ReturnValue_Offset;
    
    public bool ConvertSplineSegmentToPolyLine(int splinePointStartIndex, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, float maxSquareDistanceFromSpline, out System.Collections.Generic.IList<System.DoubleNumerics.Vector3> outPoints)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertSplineSegmentToPolyLine_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ConvertSplineSegmentToPolyLine_SplinePointStartIndex_Offset), 0, null, splinePointStartIndex);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, ConvertSplineSegmentToPolyLine_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ConvertSplineSegmentToPolyLine_MaxSquareDistanceFromSpline_Offset), 0, null, maxSquareDistanceFromSpline);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConvertSplineSegmentToPolyLine_NativeFunction, ParamsBuffer);
            
            IntPtr OutPoints_NativeBuffer = IntPtr.Add(ParamsBuffer, ConvertSplineSegmentToPolyLine_OutPoints_Offset);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> OutPoints_Marshaler = new UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3> (1, BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative, BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative, ConvertSplineSegmentToPolyLine_OutPoints_ElementSize);
            outPoints = OutPoints_Marshaler.FromNative(OutPoints_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<System.DoubleNumerics.Vector3>.DestructInstance(OutPoints_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConvertSplineSegmentToPolyLine_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SplineComponent:ClearSplinePoints
    static readonly IntPtr ClearSplinePoints_NativeFunction;
    static readonly int ClearSplinePoints_ParamsSize;
    static readonly int ClearSplinePoints_bUpdateSpline_Offset;
    
    public void ClearSplinePoints(bool bUpdateSpline = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClearSplinePoints_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ClearSplinePoints_bUpdateSpline_Offset), 0, null, bUpdateSpline);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearSplinePoints_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:AddSplineWorldPoint
    static readonly IntPtr AddSplineWorldPoint_NativeFunction;
    static readonly int AddSplineWorldPoint_ParamsSize;
    static readonly int AddSplineWorldPoint_Position_Offset;
    
    [Obsolete("Please use AddSplinePoint, specifying SplineCoordinateSpace::World")]
    public void AddSplineWorldPoint(System.DoubleNumerics.Vector3 position)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddSplineWorldPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddSplineWorldPoint_Position_Offset), 0, null, position);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddSplineWorldPoint_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:AddSplinePointAtIndex
    static readonly IntPtr AddSplinePointAtIndex_NativeFunction;
    static readonly int AddSplinePointAtIndex_ParamsSize;
    static readonly int AddSplinePointAtIndex_Position_Offset;
    static readonly int AddSplinePointAtIndex_Index_Offset;
    static readonly int AddSplinePointAtIndex_CoordinateSpace_Offset;
    static readonly int AddSplinePointAtIndex_bUpdateSpline_Offset;
    
    public void AddSplinePointAtIndex(System.DoubleNumerics.Vector3 position, int index, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, bool bUpdateSpline = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddSplinePointAtIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddSplinePointAtIndex_Position_Offset), 0, null, position);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, AddSplinePointAtIndex_Index_Offset), 0, null, index);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, AddSplinePointAtIndex_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddSplinePointAtIndex_bUpdateSpline_Offset), 0, null, bUpdateSpline);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddSplinePointAtIndex_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:AddSplinePoint
    static readonly IntPtr AddSplinePoint_NativeFunction;
    static readonly int AddSplinePoint_ParamsSize;
    static readonly int AddSplinePoint_Position_Offset;
    static readonly int AddSplinePoint_CoordinateSpace_Offset;
    static readonly int AddSplinePoint_bUpdateSpline_Offset;
    
    public void AddSplinePoint(System.DoubleNumerics.Vector3 position, UnrealSharp.Engine.ESplineCoordinateSpace coordinateSpace, bool bUpdateSpline = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddSplinePoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddSplinePoint_Position_Offset), 0, null, position);
            BlittableMarshaller<UnrealSharp.Engine.ESplineCoordinateSpace>.ToNative(IntPtr.Add(ParamsBuffer, AddSplinePoint_CoordinateSpace_Offset), 0, null, coordinateSpace);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddSplinePoint_bUpdateSpline_Offset), 0, null, bUpdateSpline);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddSplinePoint_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:AddSplineLocalPoint
    static readonly IntPtr AddSplineLocalPoint_NativeFunction;
    static readonly int AddSplineLocalPoint_ParamsSize;
    static readonly int AddSplineLocalPoint_Position_Offset;
    
    [Obsolete("Please use AddSplinePoint, specifying SplineCoordinateSpace::Local")]
    public void AddSplineLocalPoint(System.DoubleNumerics.Vector3 position)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddSplineLocalPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AddSplineLocalPoint_Position_Offset), 0, null, position);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddSplineLocalPoint_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:AddPoints
    static readonly IntPtr AddPoints_NativeFunction;
    static readonly int AddPoints_ParamsSize;
    static readonly int AddPoints_Points_Offset;
    static readonly int AddPoints_Points_ElementSize;
    static readonly int AddPoints_bUpdateSpline_Offset;
    
    public void AddPoints(System.Collections.Generic.IList<UnrealSharp.Engine.SplinePoint> points, bool bUpdateSpline = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddPoints_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Points_NativeBuffer = IntPtr.Add(ParamsBuffer, AddPoints_Points_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.SplinePoint> Points_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.SplinePoint>(1, UnrealSharp.Engine.SplinePointMarshaler.ToNative, UnrealSharp.Engine.SplinePointMarshaler.FromNative, AddPoints_Points_ElementSize);
            Points_Marshaler.ToNative(Points_NativeBuffer, 0, null, points);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddPoints_bUpdateSpline_Offset), 0, null, bUpdateSpline);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddPoints_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/Engine.SplineComponent:AddPoint
    static readonly IntPtr AddPoint_NativeFunction;
    static readonly int AddPoint_ParamsSize;
    static readonly int AddPoint_Point_Offset;
    static readonly int AddPoint_bUpdateSpline_Offset;
    
    public void AddPoint(UnrealSharp.Engine.SplinePoint point, bool bUpdateSpline = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddPoint_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.SplinePointMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AddPoint_Point_Offset), 0, null, point);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddPoint_bUpdateSpline_Offset), 0, null, bUpdateSpline);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddPoint_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    
}
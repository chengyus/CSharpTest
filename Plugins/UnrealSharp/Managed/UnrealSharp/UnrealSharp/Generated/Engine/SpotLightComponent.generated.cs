// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class SpotLightComponent : UnrealSharp.Engine.PointLightComponent
{
    
    static SpotLightComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SpotLightComponent");
        
        InnerConeAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InnerConeAngle");
        OuterConeAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OuterConeAngle");
        
        SetOuterConeAngle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOuterConeAngle");
        SetOuterConeAngle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOuterConeAngle_NativeFunction);
        SetOuterConeAngle_NewOuterConeAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOuterConeAngle_NativeFunction, "NewOuterConeAngle");
        SetInnerConeAngle_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetInnerConeAngle");
        SetInnerConeAngle_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetInnerConeAngle_NativeFunction);
        SetInnerConeAngle_NewInnerConeAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetInnerConeAngle_NativeFunction, "NewInnerConeAngle");
        
        
    }
    
    protected SpotLightComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Engine.SpotLightComponent:InnerConeAngle
    static readonly int InnerConeAngle_Offset;
    
    public float InnerConeAngle
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, InnerConeAngle_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.SpotLightComponent:OuterConeAngle
    static readonly int OuterConeAngle_Offset;
    
    public float OuterConeAngle
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, OuterConeAngle_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.SpotLightComponent:SetOuterConeAngle
    static readonly IntPtr SetOuterConeAngle_NativeFunction;
    static readonly int SetOuterConeAngle_ParamsSize;
    static readonly int SetOuterConeAngle_NewOuterConeAngle_Offset;
    
    public void SetOuterConeAngle(float newOuterConeAngle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOuterConeAngle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetOuterConeAngle_NewOuterConeAngle_Offset), 0, null, newOuterConeAngle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOuterConeAngle_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.SpotLightComponent:SetInnerConeAngle
    static readonly IntPtr SetInnerConeAngle_NativeFunction;
    static readonly int SetInnerConeAngle_ParamsSize;
    static readonly int SetInnerConeAngle_NewInnerConeAngle_Offset;
    
    public void SetInnerConeAngle(float newInnerConeAngle)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetInnerConeAngle_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetInnerConeAngle_NewInnerConeAngle_Offset), 0, null, newInnerConeAngle);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetInnerConeAngle_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class SpringArmComponent : UnrealSharp.Engine.SceneComponent
{
    
    static SpringArmComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("SpringArmComponent");
        
        TargetArmLength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TargetArmLength");
        SocketOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SocketOffset");
        TargetOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TargetOffset");
        ProbeSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ProbeSize");
        ProbeChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ProbeChannel");
        bDoCollisionTest_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bDoCollisionTest");
        bDoCollisionTest_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bDoCollisionTest");
        bUsePawnControlRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsePawnControlRotation");
        bUsePawnControlRotation_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsePawnControlRotation");
        bInheritPitch_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bInheritPitch");
        bInheritPitch_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bInheritPitch");
        bInheritYaw_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bInheritYaw");
        bInheritYaw_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bInheritYaw");
        bInheritRoll_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bInheritRoll");
        bInheritRoll_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bInheritRoll");
        bEnableCameraLag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableCameraLag");
        bEnableCameraLag_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableCameraLag");
        bEnableCameraRotationLag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableCameraRotationLag");
        bEnableCameraRotationLag_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableCameraRotationLag");
        bUseCameraLagSubstepping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseCameraLagSubstepping");
        bUseCameraLagSubstepping_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseCameraLagSubstepping");
        bDrawDebugLagMarkers_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bDrawDebugLagMarkers");
        bDrawDebugLagMarkers_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bDrawDebugLagMarkers");
        CameraLagSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CameraLagSpeed");
        CameraRotationLagSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CameraRotationLagSpeed");
        CameraLagMaxTimeStep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CameraLagMaxTimeStep");
        CameraLagMaxDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CameraLagMaxDistance");
        bClampToMaxPhysicsDeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bClampToMaxPhysicsDeltaTime");
        bClampToMaxPhysicsDeltaTime_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bClampToMaxPhysicsDeltaTime");
        
        IsCollisionFixApplied_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsCollisionFixApplied");
        IsCollisionFixApplied_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsCollisionFixApplied_NativeFunction);
        IsCollisionFixApplied_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsCollisionFixApplied_NativeFunction, "ReturnValue");
        GetUnfixedCameraPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetUnfixedCameraPosition");
        GetUnfixedCameraPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetUnfixedCameraPosition_NativeFunction);
        GetUnfixedCameraPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUnfixedCameraPosition_NativeFunction, "ReturnValue");
        GetTargetRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTargetRotation");
        GetTargetRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTargetRotation_NativeFunction);
        GetTargetRotation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTargetRotation_NativeFunction, "ReturnValue");
        
        
    }
    
    protected SpringArmComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Engine.SpringArmComponent:TargetArmLength
    static readonly int TargetArmLength_Offset;
    
    public float TargetArmLength
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, TargetArmLength_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, TargetArmLength_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.SpringArmComponent:SocketOffset
    static readonly int SocketOffset_Offset;
    
    public System.DoubleNumerics.Vector3 SocketOffset
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, SocketOffset_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, SocketOffset_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.SpringArmComponent:TargetOffset
    static readonly int TargetOffset_Offset;
    
    public System.DoubleNumerics.Vector3 TargetOffset
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, TargetOffset_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, TargetOffset_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.SpringArmComponent:ProbeSize
    static readonly int ProbeSize_Offset;
    
    public float ProbeSize
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ProbeSize_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ProbeSize_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/Engine.SpringArmComponent:ProbeChannel
    static readonly int ProbeChannel_Offset;
    
    public UnrealSharp.Engine.ECollisionChannel ProbeChannel
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ECollisionChannel>.FromNative(IntPtr.Add(NativeObject, ProbeChannel_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.ECollisionChannel>.ToNative(IntPtr.Add(NativeObject, ProbeChannel_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.SpringArmComponent:bDoCollisionTest
    static readonly int bDoCollisionTest_Offset;
    static readonly IntPtr bDoCollisionTest_NativeProperty;
    
    public bool bDoCollisionTest
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bDoCollisionTest_NativeProperty, bDoCollisionTest_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bDoCollisionTest_NativeProperty, bDoCollisionTest_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.SpringArmComponent:bUsePawnControlRotation
    static readonly int bUsePawnControlRotation_Offset;
    static readonly IntPtr bUsePawnControlRotation_NativeProperty;
    
    public bool bUsePawnControlRotation
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsePawnControlRotation_NativeProperty, bUsePawnControlRotation_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bUsePawnControlRotation_NativeProperty, bUsePawnControlRotation_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.SpringArmComponent:bInheritPitch
    static readonly int bInheritPitch_Offset;
    static readonly IntPtr bInheritPitch_NativeProperty;
    
    public bool bInheritPitch
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bInheritPitch_NativeProperty, bInheritPitch_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bInheritPitch_NativeProperty, bInheritPitch_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.SpringArmComponent:bInheritYaw
    static readonly int bInheritYaw_Offset;
    static readonly IntPtr bInheritYaw_NativeProperty;
    
    public bool bInheritYaw
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bInheritYaw_NativeProperty, bInheritYaw_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bInheritYaw_NativeProperty, bInheritYaw_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.SpringArmComponent:bInheritRoll
    static readonly int bInheritRoll_Offset;
    static readonly IntPtr bInheritRoll_NativeProperty;
    
    public bool bInheritRoll
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bInheritRoll_NativeProperty, bInheritRoll_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bInheritRoll_NativeProperty, bInheritRoll_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.SpringArmComponent:bEnableCameraLag
    static readonly int bEnableCameraLag_Offset;
    static readonly IntPtr bEnableCameraLag_NativeProperty;
    
    public bool bEnableCameraLag
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableCameraLag_NativeProperty, bEnableCameraLag_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bEnableCameraLag_NativeProperty, bEnableCameraLag_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.SpringArmComponent:bEnableCameraRotationLag
    static readonly int bEnableCameraRotationLag_Offset;
    static readonly IntPtr bEnableCameraRotationLag_NativeProperty;
    
    public bool bEnableCameraRotationLag
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableCameraRotationLag_NativeProperty, bEnableCameraRotationLag_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bEnableCameraRotationLag_NativeProperty, bEnableCameraRotationLag_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.SpringArmComponent:bUseCameraLagSubstepping
    static readonly int bUseCameraLagSubstepping_Offset;
    static readonly IntPtr bUseCameraLagSubstepping_NativeProperty;
    
    public bool bUseCameraLagSubstepping
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseCameraLagSubstepping_NativeProperty, bUseCameraLagSubstepping_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bUseCameraLagSubstepping_NativeProperty, bUseCameraLagSubstepping_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.SpringArmComponent:bDrawDebugLagMarkers
    static readonly int bDrawDebugLagMarkers_Offset;
    static readonly IntPtr bDrawDebugLagMarkers_NativeProperty;
    
    public bool bDrawDebugLagMarkers
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bDrawDebugLagMarkers_NativeProperty, bDrawDebugLagMarkers_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bDrawDebugLagMarkers_NativeProperty, bDrawDebugLagMarkers_Offset, value);
        }
    }
    
    // FloatProperty /Script/Engine.SpringArmComponent:CameraLagSpeed
    static readonly int CameraLagSpeed_Offset;
    
    public float CameraLagSpeed
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CameraLagSpeed_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, CameraLagSpeed_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.SpringArmComponent:CameraRotationLagSpeed
    static readonly int CameraRotationLagSpeed_Offset;
    
    public float CameraRotationLagSpeed
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CameraRotationLagSpeed_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, CameraRotationLagSpeed_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.SpringArmComponent:CameraLagMaxTimeStep
    static readonly int CameraLagMaxTimeStep_Offset;
    
    public float CameraLagMaxTimeStep
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CameraLagMaxTimeStep_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, CameraLagMaxTimeStep_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.SpringArmComponent:CameraLagMaxDistance
    static readonly int CameraLagMaxDistance_Offset;
    
    public float CameraLagMaxDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CameraLagMaxDistance_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, CameraLagMaxDistance_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.SpringArmComponent:bClampToMaxPhysicsDeltaTime
    static readonly int bClampToMaxPhysicsDeltaTime_Offset;
    static readonly IntPtr bClampToMaxPhysicsDeltaTime_NativeProperty;
    
    public bool bClampToMaxPhysicsDeltaTime
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bClampToMaxPhysicsDeltaTime_NativeProperty, bClampToMaxPhysicsDeltaTime_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bClampToMaxPhysicsDeltaTime_NativeProperty, bClampToMaxPhysicsDeltaTime_Offset, value);
        }
    }
    
    // Function /Script/Engine.SpringArmComponent:IsCollisionFixApplied
    static readonly IntPtr IsCollisionFixApplied_NativeFunction;
    static readonly int IsCollisionFixApplied_ParamsSize;
    static readonly int IsCollisionFixApplied_ReturnValue_Offset;
    
    public bool IsCollisionFixApplied()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsCollisionFixApplied_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsCollisionFixApplied_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsCollisionFixApplied_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SpringArmComponent:GetUnfixedCameraPosition
    static readonly IntPtr GetUnfixedCameraPosition_NativeFunction;
    static readonly int GetUnfixedCameraPosition_ParamsSize;
    static readonly int GetUnfixedCameraPosition_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetUnfixedCameraPosition()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetUnfixedCameraPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetUnfixedCameraPosition_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetUnfixedCameraPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.SpringArmComponent:GetTargetRotation
    static readonly IntPtr GetTargetRotation_NativeFunction;
    static readonly int GetTargetRotation_ParamsSize;
    static readonly int GetTargetRotation_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetTargetRotation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTargetRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTargetRotation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetTargetRotation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
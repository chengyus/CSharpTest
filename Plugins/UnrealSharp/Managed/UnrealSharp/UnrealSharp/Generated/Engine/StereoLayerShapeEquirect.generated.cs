// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class StereoLayerShapeEquirect : UnrealSharp.Engine.StereoLayerShape
{
    
    static StereoLayerShapeEquirect()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("StereoLayerShapeEquirect");
        
        LeftUVRect_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LeftUVRect");
        RightUVRect_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RightUVRect");
        LeftScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LeftScale");
        RightScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RightScale");
        LeftBias_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LeftBias");
        RightBias_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RightBias");
        Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Radius");
        
        SetEquirectProps_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetEquirectProps");
        SetEquirectProps_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetEquirectProps_NativeFunction);
        SetEquirectProps_InScaleBiases_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEquirectProps_NativeFunction, "InScaleBiases");
        
        
    }
    
    protected StereoLayerShapeEquirect(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/Engine.StereoLayerShapeEquirect:LeftUVRect
    static readonly int LeftUVRect_Offset;
    
    public UnrealSharp.CoreUObject.Box2D LeftUVRect
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.CoreUObject.Box2DMarshaler.FromNative(IntPtr.Add(NativeObject, LeftUVRect_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.StereoLayerShapeEquirect:RightUVRect
    static readonly int RightUVRect_Offset;
    
    public UnrealSharp.CoreUObject.Box2D RightUVRect
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.CoreUObject.Box2DMarshaler.FromNative(IntPtr.Add(NativeObject, RightUVRect_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.StereoLayerShapeEquirect:LeftScale
    static readonly int LeftScale_Offset;
    
    public System.DoubleNumerics.Vector2 LeftScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(NativeObject, LeftScale_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.StereoLayerShapeEquirect:RightScale
    static readonly int RightScale_Offset;
    
    public System.DoubleNumerics.Vector2 RightScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(NativeObject, RightScale_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.StereoLayerShapeEquirect:LeftBias
    static readonly int LeftBias_Offset;
    
    public System.DoubleNumerics.Vector2 LeftBias
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(NativeObject, LeftBias_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.StereoLayerShapeEquirect:RightBias
    static readonly int RightBias_Offset;
    
    public System.DoubleNumerics.Vector2 RightBias
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(NativeObject, RightBias_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.StereoLayerShapeEquirect:Radius
    static readonly int Radius_Offset;
    
    public float Radius
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Radius_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.StereoLayerShapeEquirect:SetEquirectProps
    static readonly IntPtr SetEquirectProps_NativeFunction;
    static readonly int SetEquirectProps_ParamsSize;
    static readonly int SetEquirectProps_InScaleBiases_Offset;
    
    public void SetEquirectProps(UnrealSharp.Engine.EquirectProps inScaleBiases)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetEquirectProps_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Engine.EquirectPropsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetEquirectProps_InScaleBiases_Offset), 0, null, inScaleBiases);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetEquirectProps_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
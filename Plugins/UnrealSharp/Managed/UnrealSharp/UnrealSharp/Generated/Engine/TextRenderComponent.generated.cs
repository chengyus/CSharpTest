// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class TextRenderComponent : UnrealSharp.Engine.PrimitiveComponent
{
    
    static TextRenderComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("TextRenderComponent");
        
        Text_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Text");
        Text_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Text");
        TextMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TextMaterial");
        Font_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Font");
        HorizontalAlignment_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "HorizontalAlignment");
        VerticalAlignment_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VerticalAlignment");
        TextRenderColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TextRenderColor");
        XScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "XScale");
        YScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "YScale");
        WorldSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WorldSize");
        HorizSpacingAdjust_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "HorizSpacingAdjust");
        VertSpacingAdjust_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VertSpacingAdjust");
        bAlwaysRenderAsText_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAlwaysRenderAsText");
        bAlwaysRenderAsText_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAlwaysRenderAsText");
        
        SetYScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetYScale");
        SetYScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetYScale_NativeFunction);
        SetYScale_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetYScale_NativeFunction, "Value");
        SetXScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetXScale");
        SetXScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetXScale_NativeFunction);
        SetXScale_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetXScale_NativeFunction, "Value");
        SetWorldSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWorldSize");
        SetWorldSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWorldSize_NativeFunction);
        SetWorldSize_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWorldSize_NativeFunction, "Value");
        SetVertSpacingAdjust_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVertSpacingAdjust");
        SetVertSpacingAdjust_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVertSpacingAdjust_NativeFunction);
        SetVertSpacingAdjust_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVertSpacingAdjust_NativeFunction, "Value");
        SetVerticalAlignment_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVerticalAlignment");
        SetVerticalAlignment_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVerticalAlignment_NativeFunction);
        SetVerticalAlignment_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVerticalAlignment_NativeFunction, "Value");
        SetTextRenderColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTextRenderColor");
        SetTextRenderColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTextRenderColor_NativeFunction);
        SetTextRenderColor_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTextRenderColor_NativeFunction, "Value");
        SetTextMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTextMaterial");
        SetTextMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTextMaterial_NativeFunction);
        SetTextMaterial_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTextMaterial_NativeFunction, "Material");
        SetHorizSpacingAdjust_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetHorizSpacingAdjust");
        SetHorizSpacingAdjust_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetHorizSpacingAdjust_NativeFunction);
        SetHorizSpacingAdjust_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetHorizSpacingAdjust_NativeFunction, "Value");
        SetHorizontalAlignment_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetHorizontalAlignment");
        SetHorizontalAlignment_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetHorizontalAlignment_NativeFunction);
        SetHorizontalAlignment_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetHorizontalAlignment_NativeFunction, "Value");
        SetFont_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFont");
        SetFont_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFont_NativeFunction);
        SetFont_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFont_NativeFunction, "Value");
        GetTextWorldSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTextWorldSize");
        GetTextWorldSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTextWorldSize_NativeFunction);
        GetTextWorldSize_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTextWorldSize_NativeFunction, "ReturnValue");
        GetTextLocalSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTextLocalSize");
        GetTextLocalSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTextLocalSize_NativeFunction);
        GetTextLocalSize_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTextLocalSize_NativeFunction, "ReturnValue");
        
        
    }
    
    protected TextRenderComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // TextProperty /Script/Engine.TextRenderComponent:Text
    static readonly int Text_Offset;
    static readonly IntPtr Text_NativeProperty;
    TextMarshaller Text_Wrapper;
    
    public Text Text
    {
        get
        {
            if (Text_Wrapper == null)
            {
                Text_Wrapper  = new TextMarshaller(1);
            }
            return Text_Wrapper.FromNative(this.NativeObject + Text_Offset, 0, this);
        }
    }
    
    // ObjectProperty /Script/Engine.TextRenderComponent:TextMaterial
    static readonly int TextMaterial_Offset;
    
    public UnrealSharp.Engine.MaterialInterface TextMaterial
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.FromNative(IntPtr.Add(NativeObject, TextMaterial_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/Engine.TextRenderComponent:Font
    static readonly int Font_Offset;
    
    public UnrealSharp.Engine.Font Font
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.Font>.FromNative(IntPtr.Add(NativeObject, Font_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/Engine.TextRenderComponent:HorizontalAlignment
    static readonly int HorizontalAlignment_Offset;
    
    public UnrealSharp.Engine.EHorizTextAligment HorizontalAlignment
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EHorizTextAligment>.FromNative(IntPtr.Add(NativeObject, HorizontalAlignment_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/Engine.TextRenderComponent:VerticalAlignment
    static readonly int VerticalAlignment_Offset;
    
    public UnrealSharp.Engine.EVerticalTextAligment VerticalAlignment
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EVerticalTextAligment>.FromNative(IntPtr.Add(NativeObject, VerticalAlignment_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.TextRenderComponent:TextRenderColor
    static readonly int TextRenderColor_Offset;
    
    public UnrealSharp.CoreUObject.Color TextRenderColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(NativeObject, TextRenderColor_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.TextRenderComponent:XScale
    static readonly int XScale_Offset;
    
    public float XScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, XScale_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.TextRenderComponent:YScale
    static readonly int YScale_Offset;
    
    public float YScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, YScale_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.TextRenderComponent:WorldSize
    static readonly int WorldSize_Offset;
    
    public float WorldSize
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, WorldSize_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.TextRenderComponent:HorizSpacingAdjust
    static readonly int HorizSpacingAdjust_Offset;
    
    public float HorizSpacingAdjust
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, HorizSpacingAdjust_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.TextRenderComponent:VertSpacingAdjust
    static readonly int VertSpacingAdjust_Offset;
    
    public float VertSpacingAdjust
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, VertSpacingAdjust_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.TextRenderComponent:bAlwaysRenderAsText
    static readonly int bAlwaysRenderAsText_Offset;
    static readonly IntPtr bAlwaysRenderAsText_NativeProperty;
    
    public bool bAlwaysRenderAsText
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAlwaysRenderAsText_NativeProperty, bAlwaysRenderAsText_Offset);
        }
    }
    
    // Function /Script/Engine.TextRenderComponent:SetYScale
    static readonly IntPtr SetYScale_NativeFunction;
    static readonly int SetYScale_ParamsSize;
    static readonly int SetYScale_Value_Offset;
    
    public void SetYScale(float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetYScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetYScale_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetYScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.TextRenderComponent:SetXScale
    static readonly IntPtr SetXScale_NativeFunction;
    static readonly int SetXScale_ParamsSize;
    static readonly int SetXScale_Value_Offset;
    
    public void SetXScale(float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetXScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetXScale_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetXScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.TextRenderComponent:SetWorldSize
    static readonly IntPtr SetWorldSize_NativeFunction;
    static readonly int SetWorldSize_ParamsSize;
    static readonly int SetWorldSize_Value_Offset;
    
    public void SetWorldSize(float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWorldSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetWorldSize_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetWorldSize_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.TextRenderComponent:SetVertSpacingAdjust
    static readonly IntPtr SetVertSpacingAdjust_NativeFunction;
    static readonly int SetVertSpacingAdjust_ParamsSize;
    static readonly int SetVertSpacingAdjust_Value_Offset;
    
    public void SetVertSpacingAdjust(float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVertSpacingAdjust_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetVertSpacingAdjust_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVertSpacingAdjust_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.TextRenderComponent:SetVerticalAlignment
    static readonly IntPtr SetVerticalAlignment_NativeFunction;
    static readonly int SetVerticalAlignment_ParamsSize;
    static readonly int SetVerticalAlignment_Value_Offset;
    
    public void SetVerticalAlignment(UnrealSharp.Engine.EVerticalTextAligment value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVerticalAlignment_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EVerticalTextAligment>.ToNative(IntPtr.Add(ParamsBuffer, SetVerticalAlignment_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVerticalAlignment_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.TextRenderComponent:SetTextRenderColor
    static readonly IntPtr SetTextRenderColor_NativeFunction;
    static readonly int SetTextRenderColor_ParamsSize;
    static readonly int SetTextRenderColor_Value_Offset;
    
    public void SetTextRenderColor(UnrealSharp.CoreUObject.Color value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTextRenderColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(ParamsBuffer, SetTextRenderColor_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTextRenderColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.TextRenderComponent:SetTextMaterial
    static readonly IntPtr SetTextMaterial_NativeFunction;
    static readonly int SetTextMaterial_ParamsSize;
    static readonly int SetTextMaterial_Material_Offset;
    
    public void SetTextMaterial(UnrealSharp.Engine.MaterialInterface material)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTextMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SetTextMaterial_Material_Offset), 0, null, material);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTextMaterial_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.TextRenderComponent:SetHorizSpacingAdjust
    static readonly IntPtr SetHorizSpacingAdjust_NativeFunction;
    static readonly int SetHorizSpacingAdjust_ParamsSize;
    static readonly int SetHorizSpacingAdjust_Value_Offset;
    
    public void SetHorizSpacingAdjust(float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetHorizSpacingAdjust_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetHorizSpacingAdjust_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetHorizSpacingAdjust_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.TextRenderComponent:SetHorizontalAlignment
    static readonly IntPtr SetHorizontalAlignment_NativeFunction;
    static readonly int SetHorizontalAlignment_ParamsSize;
    static readonly int SetHorizontalAlignment_Value_Offset;
    
    public void SetHorizontalAlignment(UnrealSharp.Engine.EHorizTextAligment value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetHorizontalAlignment_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EHorizTextAligment>.ToNative(IntPtr.Add(ParamsBuffer, SetHorizontalAlignment_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetHorizontalAlignment_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.TextRenderComponent:SetFont
    static readonly IntPtr SetFont_NativeFunction;
    static readonly int SetFont_ParamsSize;
    static readonly int SetFont_Value_Offset;
    
    public void SetFont(UnrealSharp.Engine.Font value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFont_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Font>.ToNative(IntPtr.Add(ParamsBuffer, SetFont_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFont_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.TextRenderComponent:GetTextWorldSize
    static readonly IntPtr GetTextWorldSize_NativeFunction;
    static readonly int GetTextWorldSize_ParamsSize;
    static readonly int GetTextWorldSize_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetTextWorldSize()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTextWorldSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTextWorldSize_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetTextWorldSize_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.TextRenderComponent:GetTextLocalSize
    static readonly IntPtr GetTextLocalSize_NativeFunction;
    static readonly int GetTextLocalSize_ParamsSize;
    static readonly int GetTextLocalSize_ReturnValue_Offset;
    
    public System.DoubleNumerics.Vector3 GetTextLocalSize()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTextLocalSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTextLocalSize_NativeFunction, ParamsBuffer);
            
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetTextLocalSize_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
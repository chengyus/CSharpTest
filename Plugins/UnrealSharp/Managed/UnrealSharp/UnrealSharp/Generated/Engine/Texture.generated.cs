// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
abstract public partial class Texture : UnrealSharp.Engine.StreamableRenderAsset
{
    
    static Texture()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("Texture");
        
        AdjustBrightness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AdjustBrightness");
        AdjustBrightnessCurve_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AdjustBrightnessCurve");
        AdjustVibrance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AdjustVibrance");
        AdjustSaturation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AdjustSaturation");
        AdjustRGBCurve_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AdjustRGBCurve");
        AdjustHue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AdjustHue");
        AdjustMinAlpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AdjustMinAlpha");
        AdjustMaxAlpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AdjustMaxAlpha");
        CompressionNoAlpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CompressionNoAlpha");
        CompressionNoAlpha_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "CompressionNoAlpha");
        CompressFinal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CompressFinal");
        CompressFinal_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "CompressFinal");
        DeferCompression_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DeferCompression");
        DeferCompression_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "DeferCompression");
        LossyCompressionAmount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LossyCompressionAmount");
        OodleTextureSdkVersion_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OodleTextureSdkVersion");
        MaxTextureSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxTextureSize");
        CompressionQuality_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CompressionQuality");
        bDoScaleMipsForAlphaCoverage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bDoScaleMipsForAlphaCoverage");
        AlphaCoverageThresholds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AlphaCoverageThresholds");
        bUseNewMipFilter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseNewMipFilter");
        bPreserveBorder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bPreserveBorder");
        bPreserveBorder_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bPreserveBorder");
        bFlipGreenChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bFlipGreenChannel");
        bFlipGreenChannel_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bFlipGreenChannel");
        PowerOfTwoMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PowerOfTwoMode");
        PaddingColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PaddingColor");
        bChromaKeyTexture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bChromaKeyTexture");
        ChromaKeyThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ChromaKeyThreshold");
        ChromaKeyColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ChromaKeyColor");
        MipGenSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MipGenSettings");
        CompositeTexture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CompositeTexture");
        CompositeTextureMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CompositeTextureMode");
        CompositePower_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CompositePower");
        LODBias_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LODBias");
        CompressionSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CompressionSettings");
        Filter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Filter");
        MipLoadOptions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MipLoadOptions");
        CookPlatformTilingSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CookPlatformTilingSettings");
        LODGroup_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LODGroup");
        SRGB_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SRGB");
        SRGB_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "SRGB");
        bNormalizeNormals_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bNormalizeNormals");
        bNormalizeNormals_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bNormalizeNormals");
        bUseLegacyGamma_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseLegacyGamma");
        bUseLegacyGamma_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseLegacyGamma");
        SourceColorSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SourceColorSettings");
        VirtualTextureStreaming_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VirtualTextureStreaming");
        VirtualTextureStreaming_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "VirtualTextureStreaming");
        
        ComputeTextureSourceChannelMinMax_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ComputeTextureSourceChannelMinMax");
        ComputeTextureSourceChannelMinMax_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ComputeTextureSourceChannelMinMax_NativeFunction);
        ComputeTextureSourceChannelMinMax_OutColorMin_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComputeTextureSourceChannelMinMax_NativeFunction, "OutColorMin");
        ComputeTextureSourceChannelMinMax_OutColorMax_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComputeTextureSourceChannelMinMax_NativeFunction, "OutColorMax");
        ComputeTextureSourceChannelMinMax_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ComputeTextureSourceChannelMinMax_NativeFunction, "ReturnValue");
        Blueprint_GetTextureSourceDiskAndMemorySize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Blueprint_GetTextureSourceDiskAndMemorySize");
        Blueprint_GetTextureSourceDiskAndMemorySize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Blueprint_GetTextureSourceDiskAndMemorySize_NativeFunction);
        Blueprint_GetTextureSourceDiskAndMemorySize_OutDiskSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_GetTextureSourceDiskAndMemorySize_NativeFunction, "OutDiskSize");
        Blueprint_GetTextureSourceDiskAndMemorySize_OutMemorySize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_GetTextureSourceDiskAndMemorySize_NativeFunction, "OutMemorySize");
        Blueprint_GetMemorySize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Blueprint_GetMemorySize");
        Blueprint_GetMemorySize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Blueprint_GetMemorySize_NativeFunction);
        Blueprint_GetMemorySize_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Blueprint_GetMemorySize_NativeFunction, "ReturnValue");
        
        
    }
    
    protected Texture(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Engine.Texture:AdjustBrightness
    static readonly int AdjustBrightness_Offset;
    
    public float AdjustBrightness
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AdjustBrightness_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, AdjustBrightness_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.Texture:AdjustBrightnessCurve
    static readonly int AdjustBrightnessCurve_Offset;
    
    public float AdjustBrightnessCurve
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AdjustBrightnessCurve_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, AdjustBrightnessCurve_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.Texture:AdjustVibrance
    static readonly int AdjustVibrance_Offset;
    
    public float AdjustVibrance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AdjustVibrance_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, AdjustVibrance_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.Texture:AdjustSaturation
    static readonly int AdjustSaturation_Offset;
    
    public float AdjustSaturation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AdjustSaturation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, AdjustSaturation_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.Texture:AdjustRGBCurve
    static readonly int AdjustRGBCurve_Offset;
    
    public float AdjustRGBCurve
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AdjustRGBCurve_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, AdjustRGBCurve_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.Texture:AdjustHue
    static readonly int AdjustHue_Offset;
    
    public float AdjustHue
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AdjustHue_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, AdjustHue_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.Texture:AdjustMinAlpha
    static readonly int AdjustMinAlpha_Offset;
    
    public float AdjustMinAlpha
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AdjustMinAlpha_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, AdjustMinAlpha_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.Texture:AdjustMaxAlpha
    static readonly int AdjustMaxAlpha_Offset;
    
    public float AdjustMaxAlpha
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AdjustMaxAlpha_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, AdjustMaxAlpha_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.Texture:CompressionNoAlpha
    static readonly int CompressionNoAlpha_Offset;
    static readonly IntPtr CompressionNoAlpha_NativeProperty;
    
    public bool CompressionNoAlpha
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, CompressionNoAlpha_NativeProperty, CompressionNoAlpha_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, CompressionNoAlpha_NativeProperty, CompressionNoAlpha_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.Texture:CompressFinal
    static readonly int CompressFinal_Offset;
    static readonly IntPtr CompressFinal_NativeProperty;
    
    public bool CompressFinal
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, CompressFinal_NativeProperty, CompressFinal_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, CompressFinal_NativeProperty, CompressFinal_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.Texture:DeferCompression
    static readonly int DeferCompression_Offset;
    static readonly IntPtr DeferCompression_NativeProperty;
    
    public bool DeferCompression
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, DeferCompression_NativeProperty, DeferCompression_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, DeferCompression_NativeProperty, DeferCompression_Offset, value);
        }
    }
    
    // ByteProperty /Script/Engine.Texture:LossyCompressionAmount
    static readonly int LossyCompressionAmount_Offset;
    
    public UnrealSharp.Engine.ETextureLossyCompressionAmount LossyCompressionAmount
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ETextureLossyCompressionAmount>.FromNative(IntPtr.Add(NativeObject, LossyCompressionAmount_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.ETextureLossyCompressionAmount>.ToNative(IntPtr.Add(NativeObject, LossyCompressionAmount_Offset), 0, this, value);
        }
    }
    
    // NameProperty /Script/Engine.Texture:OodleTextureSdkVersion
    static readonly int OodleTextureSdkVersion_Offset;
    
    public Name OodleTextureSdkVersion
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, OodleTextureSdkVersion_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, OodleTextureSdkVersion_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.Texture:MaxTextureSize
    static readonly int MaxTextureSize_Offset;
    
    public int MaxTextureSize
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, MaxTextureSize_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, MaxTextureSize_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/Engine.Texture:CompressionQuality
    static readonly int CompressionQuality_Offset;
    
    public UnrealSharp.Engine.ETextureCompressionQuality CompressionQuality
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ETextureCompressionQuality>.FromNative(IntPtr.Add(NativeObject, CompressionQuality_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.ETextureCompressionQuality>.ToNative(IntPtr.Add(NativeObject, CompressionQuality_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.Texture:bDoScaleMipsForAlphaCoverage
    static readonly int bDoScaleMipsForAlphaCoverage_Offset;
    
    public bool bDoScaleMipsForAlphaCoverage
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bDoScaleMipsForAlphaCoverage_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bDoScaleMipsForAlphaCoverage_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.Texture:AlphaCoverageThresholds
    static readonly int AlphaCoverageThresholds_Offset;
    
    public System.DoubleNumerics.Vector4 AlphaCoverageThresholds
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector4>.FromNative(IntPtr.Add(NativeObject, AlphaCoverageThresholds_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector4>.ToNative(IntPtr.Add(NativeObject, AlphaCoverageThresholds_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.Texture:bUseNewMipFilter
    static readonly int bUseNewMipFilter_Offset;
    
    public bool bUseNewMipFilter
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseNewMipFilter_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bUseNewMipFilter_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.Texture:bPreserveBorder
    static readonly int bPreserveBorder_Offset;
    static readonly IntPtr bPreserveBorder_NativeProperty;
    
    public bool bPreserveBorder
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bPreserveBorder_NativeProperty, bPreserveBorder_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bPreserveBorder_NativeProperty, bPreserveBorder_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.Texture:bFlipGreenChannel
    static readonly int bFlipGreenChannel_Offset;
    static readonly IntPtr bFlipGreenChannel_NativeProperty;
    
    public bool bFlipGreenChannel
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bFlipGreenChannel_NativeProperty, bFlipGreenChannel_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bFlipGreenChannel_NativeProperty, bFlipGreenChannel_Offset, value);
        }
    }
    
    // ByteProperty /Script/Engine.Texture:PowerOfTwoMode
    static readonly int PowerOfTwoMode_Offset;
    
    public UnrealSharp.Engine.ETexturePowerOfTwoSetting PowerOfTwoMode
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ETexturePowerOfTwoSetting>.FromNative(IntPtr.Add(NativeObject, PowerOfTwoMode_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.ETexturePowerOfTwoSetting>.ToNative(IntPtr.Add(NativeObject, PowerOfTwoMode_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.Texture:PaddingColor
    static readonly int PaddingColor_Offset;
    
    public UnrealSharp.CoreUObject.Color PaddingColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(NativeObject, PaddingColor_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(NativeObject, PaddingColor_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.Texture:bChromaKeyTexture
    static readonly int bChromaKeyTexture_Offset;
    
    public bool bChromaKeyTexture
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bChromaKeyTexture_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bChromaKeyTexture_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.Texture:ChromaKeyThreshold
    static readonly int ChromaKeyThreshold_Offset;
    
    public float ChromaKeyThreshold
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ChromaKeyThreshold_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ChromaKeyThreshold_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Engine.Texture:ChromaKeyColor
    static readonly int ChromaKeyColor_Offset;
    
    public UnrealSharp.CoreUObject.Color ChromaKeyColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(NativeObject, ChromaKeyColor_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(NativeObject, ChromaKeyColor_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/Engine.Texture:MipGenSettings
    static readonly int MipGenSettings_Offset;
    
    public UnrealSharp.Engine.TextureMipGenSettings MipGenSettings
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.TextureMipGenSettings>.FromNative(IntPtr.Add(NativeObject, MipGenSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.TextureMipGenSettings>.ToNative(IntPtr.Add(NativeObject, MipGenSettings_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/Engine.Texture:CompositeTexture
    static readonly int CompositeTexture_Offset;
    
    public UnrealSharp.Engine.Texture CompositeTexture
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.Texture>.FromNative(IntPtr.Add(NativeObject, CompositeTexture_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.Texture>.ToNative(IntPtr.Add(NativeObject, CompositeTexture_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/Engine.Texture:CompositeTextureMode
    static readonly int CompositeTextureMode_Offset;
    
    public UnrealSharp.Engine.ECompositeTextureMode CompositeTextureMode
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ECompositeTextureMode>.FromNative(IntPtr.Add(NativeObject, CompositeTextureMode_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.ECompositeTextureMode>.ToNative(IntPtr.Add(NativeObject, CompositeTextureMode_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.Texture:CompositePower
    static readonly int CompositePower_Offset;
    
    public float CompositePower
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CompositePower_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, CompositePower_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.Texture:LODBias
    static readonly int LODBias_Offset;
    
    public int LODBias
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, LODBias_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, LODBias_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/Engine.Texture:CompressionSettings
    static readonly int CompressionSettings_Offset;
    
    public UnrealSharp.Engine.TextureCompressionSettings CompressionSettings
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.TextureCompressionSettings>.FromNative(IntPtr.Add(NativeObject, CompressionSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.TextureCompressionSettings>.ToNative(IntPtr.Add(NativeObject, CompressionSettings_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/Engine.Texture:Filter
    static readonly int Filter_Offset;
    
    public UnrealSharp.Engine.TextureFilter Filter
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.TextureFilter>.FromNative(IntPtr.Add(NativeObject, Filter_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.TextureFilter>.ToNative(IntPtr.Add(NativeObject, Filter_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/Engine.Texture:MipLoadOptions
    static readonly int MipLoadOptions_Offset;
    
    public UnrealSharp.Engine.ETextureMipLoadOptions MipLoadOptions
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ETextureMipLoadOptions>.FromNative(IntPtr.Add(NativeObject, MipLoadOptions_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.ETextureMipLoadOptions>.ToNative(IntPtr.Add(NativeObject, MipLoadOptions_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/Engine.Texture:CookPlatformTilingSettings
    static readonly int CookPlatformTilingSettings_Offset;
    
    public UnrealSharp.Engine.TextureCookPlatformTilingSettings CookPlatformTilingSettings
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.TextureCookPlatformTilingSettings>.FromNative(IntPtr.Add(NativeObject, CookPlatformTilingSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.TextureCookPlatformTilingSettings>.ToNative(IntPtr.Add(NativeObject, CookPlatformTilingSettings_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/Engine.Texture:LODGroup
    static readonly int LODGroup_Offset;
    
    public UnrealSharp.Engine.TextureGroup LODGroup
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.TextureGroup>.FromNative(IntPtr.Add(NativeObject, LODGroup_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.TextureGroup>.ToNative(IntPtr.Add(NativeObject, LODGroup_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.Texture:SRGB
    static readonly int SRGB_Offset;
    static readonly IntPtr SRGB_NativeProperty;
    
    public bool SRGB
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, SRGB_NativeProperty, SRGB_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, SRGB_NativeProperty, SRGB_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.Texture:bNormalizeNormals
    static readonly int bNormalizeNormals_Offset;
    static readonly IntPtr bNormalizeNormals_NativeProperty;
    
    public bool bNormalizeNormals
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bNormalizeNormals_NativeProperty, bNormalizeNormals_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bNormalizeNormals_NativeProperty, bNormalizeNormals_Offset, value);
        }
    }
    
    // BoolProperty /Script/Engine.Texture:bUseLegacyGamma
    static readonly int bUseLegacyGamma_Offset;
    static readonly IntPtr bUseLegacyGamma_NativeProperty;
    
    public bool bUseLegacyGamma
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseLegacyGamma_NativeProperty, bUseLegacyGamma_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bUseLegacyGamma_NativeProperty, bUseLegacyGamma_Offset, value);
        }
    }
    
    // StructProperty /Script/Engine.Texture:SourceColorSettings
    static readonly int SourceColorSettings_Offset;
    
    public UnrealSharp.Engine.TextureSourceColorSettings SourceColorSettings
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.TextureSourceColorSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, SourceColorSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.Engine.TextureSourceColorSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, SourceColorSettings_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.Texture:VirtualTextureStreaming
    static readonly int VirtualTextureStreaming_Offset;
    static readonly IntPtr VirtualTextureStreaming_NativeProperty;
    
    public bool VirtualTextureStreaming
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, VirtualTextureStreaming_NativeProperty, VirtualTextureStreaming_Offset);
        }
    }
    
    // Function /Script/Engine.Texture:ComputeTextureSourceChannelMinMax
    static readonly IntPtr ComputeTextureSourceChannelMinMax_NativeFunction;
    static readonly int ComputeTextureSourceChannelMinMax_ParamsSize;
    static readonly int ComputeTextureSourceChannelMinMax_OutColorMin_Offset;
    static readonly int ComputeTextureSourceChannelMinMax_OutColorMax_Offset;
    static readonly int ComputeTextureSourceChannelMinMax_ReturnValue_Offset;
    
    public bool ComputeTextureSourceChannelMinMax(out UnrealSharp.CoreUObject.LinearColor outColorMin, out UnrealSharp.CoreUObject.LinearColor outColorMax)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ComputeTextureSourceChannelMinMax_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ComputeTextureSourceChannelMinMax_NativeFunction, ParamsBuffer);
            
            outColorMin = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, ComputeTextureSourceChannelMinMax_OutColorMin_Offset), 0, null);
            outColorMax = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, ComputeTextureSourceChannelMinMax_OutColorMax_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ComputeTextureSourceChannelMinMax_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.Texture:Blueprint_GetTextureSourceDiskAndMemorySize
    static readonly IntPtr Blueprint_GetTextureSourceDiskAndMemorySize_NativeFunction;
    static readonly int Blueprint_GetTextureSourceDiskAndMemorySize_ParamsSize;
    static readonly int Blueprint_GetTextureSourceDiskAndMemorySize_OutDiskSize_Offset;
    static readonly int Blueprint_GetTextureSourceDiskAndMemorySize_OutMemorySize_Offset;
    
    public void Blueprint_GetTextureSourceDiskAndMemorySize(out long outDiskSize, out long outMemorySize)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Blueprint_GetTextureSourceDiskAndMemorySize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Blueprint_GetTextureSourceDiskAndMemorySize_NativeFunction, ParamsBuffer);
            
            outDiskSize = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, Blueprint_GetTextureSourceDiskAndMemorySize_OutDiskSize_Offset), 0, null);
            outMemorySize = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, Blueprint_GetTextureSourceDiskAndMemorySize_OutMemorySize_Offset), 0, null);
            
        }
    }
    
    // Function /Script/Engine.Texture:Blueprint_GetMemorySize
    static readonly IntPtr Blueprint_GetMemorySize_NativeFunction;
    static readonly int Blueprint_GetMemorySize_ParamsSize;
    static readonly int Blueprint_GetMemorySize_ReturnValue_Offset;
    
    public long Blueprint_GetMemorySize()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Blueprint_GetMemorySize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Blueprint_GetMemorySize_NativeFunction, ParamsBuffer);
            
            long returnValue;
            returnValue = BlittableMarshaller<long>.FromNative(IntPtr.Add(ParamsBuffer, Blueprint_GetMemorySize_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
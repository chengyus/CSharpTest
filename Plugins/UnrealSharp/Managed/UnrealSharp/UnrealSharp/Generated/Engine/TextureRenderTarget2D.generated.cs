// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class TextureRenderTarget2D : UnrealSharp.Engine.TextureRenderTarget
{
    
    static TextureRenderTarget2D()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("TextureRenderTarget2D");
        
        SizeX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SizeX");
        SizeY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SizeY");
        ClearColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ClearColor");
        AddressX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AddressX");
        AddressY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AddressY");
        bGPUSharedFlag_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bGPUSharedFlag");
        bGPUSharedFlag_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bGPUSharedFlag");
        RenderTargetFormat_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RenderTargetFormat");
        bAutoGenerateMips_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAutoGenerateMips");
        bAutoGenerateMips_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAutoGenerateMips");
        MipsSamplerFilter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MipsSamplerFilter");
        MipsAddressU_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MipsAddressU");
        MipsAddressV_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MipsAddressV");
        
        
        
    }
    
    protected TextureRenderTarget2D(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // IntProperty /Script/Engine.TextureRenderTarget2D:SizeX
    static readonly int SizeX_Offset;
    
    public int SizeX
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, SizeX_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Engine.TextureRenderTarget2D:SizeY
    static readonly int SizeY_Offset;
    
    public int SizeY
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, SizeY_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.TextureRenderTarget2D:ClearColor
    static readonly int ClearColor_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor ClearColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, ClearColor_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/Engine.TextureRenderTarget2D:AddressX
    static readonly int AddressX_Offset;
    
    public UnrealSharp.Engine.TextureAddress AddressX
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.TextureAddress>.FromNative(IntPtr.Add(NativeObject, AddressX_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.TextureAddress>.ToNative(IntPtr.Add(NativeObject, AddressX_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/Engine.TextureRenderTarget2D:AddressY
    static readonly int AddressY_Offset;
    
    public UnrealSharp.Engine.TextureAddress AddressY
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.TextureAddress>.FromNative(IntPtr.Add(NativeObject, AddressY_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.TextureAddress>.ToNative(IntPtr.Add(NativeObject, AddressY_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.TextureRenderTarget2D:bGPUSharedFlag
    static readonly int bGPUSharedFlag_Offset;
    static readonly IntPtr bGPUSharedFlag_NativeProperty;
    
    public bool bGPUSharedFlag
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bGPUSharedFlag_NativeProperty, bGPUSharedFlag_Offset);
        }
    }
    
    // ByteProperty /Script/Engine.TextureRenderTarget2D:RenderTargetFormat
    static readonly int RenderTargetFormat_Offset;
    
    public UnrealSharp.Engine.ETextureRenderTargetFormat RenderTargetFormat
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ETextureRenderTargetFormat>.FromNative(IntPtr.Add(NativeObject, RenderTargetFormat_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.TextureRenderTarget2D:bAutoGenerateMips
    static readonly int bAutoGenerateMips_Offset;
    static readonly IntPtr bAutoGenerateMips_NativeProperty;
    
    public bool bAutoGenerateMips
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAutoGenerateMips_NativeProperty, bAutoGenerateMips_Offset);
        }
    }
    
    // ByteProperty /Script/Engine.TextureRenderTarget2D:MipsSamplerFilter
    static readonly int MipsSamplerFilter_Offset;
    
    public UnrealSharp.Engine.TextureFilter MipsSamplerFilter
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.TextureFilter>.FromNative(IntPtr.Add(NativeObject, MipsSamplerFilter_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/Engine.TextureRenderTarget2D:MipsAddressU
    static readonly int MipsAddressU_Offset;
    
    public UnrealSharp.Engine.TextureAddress MipsAddressU
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.TextureAddress>.FromNative(IntPtr.Add(NativeObject, MipsAddressU_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/Engine.TextureRenderTarget2D:MipsAddressV
    static readonly int MipsAddressV_Offset;
    
    public UnrealSharp.Engine.TextureAddress MipsAddressV
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.TextureAddress>.FromNative(IntPtr.Add(NativeObject, MipsAddressV_Offset), 0, this);
        }
    }
    
    
}
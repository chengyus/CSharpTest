// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class TextureRenderTargetVolume : UnrealSharp.Engine.TextureRenderTarget
{
    
    static TextureRenderTargetVolume()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("TextureRenderTargetVolume");
        
        SizeX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SizeX");
        SizeY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SizeY");
        SizeZ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SizeZ");
        bHDR_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bHDR");
        bHDR_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bHDR");
        
        
        
    }
    
    protected TextureRenderTargetVolume(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // IntProperty /Script/Engine.TextureRenderTargetVolume:SizeX
    static readonly int SizeX_Offset;
    
    public int SizeX
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, SizeX_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, SizeX_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.TextureRenderTargetVolume:SizeY
    static readonly int SizeY_Offset;
    
    public int SizeY
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, SizeY_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, SizeY_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Engine.TextureRenderTargetVolume:SizeZ
    static readonly int SizeZ_Offset;
    
    public int SizeZ
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, SizeZ_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, SizeZ_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.TextureRenderTargetVolume:bHDR
    static readonly int bHDR_Offset;
    static readonly IntPtr bHDR_NativeProperty;
    
    public bool bHDR
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bHDR_NativeProperty, bHDR_Offset);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class TimelineComponent : UnrealSharp.Engine.ActorComponent
{
    
    static TimelineComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("TimelineComponent");
        
        
        Stop_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Stop");
        SetVectorCurve_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVectorCurve");
        SetVectorCurve_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVectorCurve_NativeFunction);
        SetVectorCurve_NewVectorCurve_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVectorCurve_NativeFunction, "NewVectorCurve");
        SetVectorCurve_VectorTrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVectorCurve_NativeFunction, "VectorTrackName");
        SetTimelineLengthMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTimelineLengthMode");
        SetTimelineLengthMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTimelineLengthMode_NativeFunction);
        SetTimelineLengthMode_NewLengthMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTimelineLengthMode_NativeFunction, "NewLengthMode");
        SetTimelineLength_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTimelineLength");
        SetTimelineLength_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTimelineLength_NativeFunction);
        SetTimelineLength_NewLength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTimelineLength_NativeFunction, "NewLength");
        SetPlayRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlayRate");
        SetPlayRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlayRate_NativeFunction);
        SetPlayRate_NewRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlayRate_NativeFunction, "NewRate");
        SetPlaybackPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlaybackPosition");
        SetPlaybackPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlaybackPosition_NativeFunction);
        SetPlaybackPosition_NewPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaybackPosition_NativeFunction, "NewPosition");
        SetPlaybackPosition_bFireEvents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaybackPosition_NativeFunction, "bFireEvents");
        SetPlaybackPosition_bFireUpdate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaybackPosition_NativeFunction, "bFireUpdate");
        SetNewTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNewTime");
        SetNewTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNewTime_NativeFunction);
        SetNewTime_NewTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNewTime_NativeFunction, "NewTime");
        SetLooping_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLooping");
        SetLooping_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLooping_NativeFunction);
        SetLooping_bNewLooping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLooping_NativeFunction, "bNewLooping");
        SetLinearColorCurve_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLinearColorCurve");
        SetLinearColorCurve_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLinearColorCurve_NativeFunction);
        SetLinearColorCurve_NewLinearColorCurve_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearColorCurve_NativeFunction, "NewLinearColorCurve");
        SetLinearColorCurve_LinearColorTrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLinearColorCurve_NativeFunction, "LinearColorTrackName");
        SetIgnoreTimeDilation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIgnoreTimeDilation");
        SetIgnoreTimeDilation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIgnoreTimeDilation_NativeFunction);
        SetIgnoreTimeDilation_bNewIgnoreTimeDilation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIgnoreTimeDilation_NativeFunction, "bNewIgnoreTimeDilation");
        SetFloatCurve_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFloatCurve");
        SetFloatCurve_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFloatCurve_NativeFunction);
        SetFloatCurve_NewFloatCurve_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFloatCurve_NativeFunction, "NewFloatCurve");
        SetFloatCurve_FloatTrackName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFloatCurve_NativeFunction, "FloatTrackName");
        ReverseFromEnd_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReverseFromEnd");
        Reverse_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Reverse");
        PlayFromStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlayFromStart");
        Play_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Play");
        IsReversing_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsReversing");
        IsReversing_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsReversing_NativeFunction);
        IsReversing_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsReversing_NativeFunction, "ReturnValue");
        IsPlaying_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPlaying");
        IsPlaying_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPlaying_NativeFunction);
        IsPlaying_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPlaying_NativeFunction, "ReturnValue");
        IsLooping_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsLooping");
        IsLooping_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsLooping_NativeFunction);
        IsLooping_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLooping_NativeFunction, "ReturnValue");
        GetTimelineLength_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTimelineLength");
        GetTimelineLength_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTimelineLength_NativeFunction);
        GetTimelineLength_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTimelineLength_NativeFunction, "ReturnValue");
        GetScaledTimelineLength_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetScaledTimelineLength");
        GetScaledTimelineLength_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetScaledTimelineLength_NativeFunction);
        GetScaledTimelineLength_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScaledTimelineLength_NativeFunction, "ReturnValue");
        GetPlayRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayRate");
        GetPlayRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayRate_NativeFunction);
        GetPlayRate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayRate_NativeFunction, "ReturnValue");
        GetPlaybackPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlaybackPosition");
        GetPlaybackPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlaybackPosition_NativeFunction);
        GetPlaybackPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlaybackPosition_NativeFunction, "ReturnValue");
        GetIgnoreTimeDilation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetIgnoreTimeDilation");
        GetIgnoreTimeDilation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetIgnoreTimeDilation_NativeFunction);
        GetIgnoreTimeDilation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetIgnoreTimeDilation_NativeFunction, "ReturnValue");
        
        
    }
    
    protected TimelineComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.TimelineComponent:Stop
    static readonly IntPtr Stop_NativeFunction;
    
    public void Stop()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Stop_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.TimelineComponent:SetVectorCurve
    static readonly IntPtr SetVectorCurve_NativeFunction;
    static readonly int SetVectorCurve_ParamsSize;
    static readonly int SetVectorCurve_NewVectorCurve_Offset;
    static readonly int SetVectorCurve_VectorTrackName_Offset;
    
    public void SetVectorCurve(UnrealSharp.Engine.CurveVector newVectorCurve, Name vectorTrackName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVectorCurve_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.CurveVector>.ToNative(IntPtr.Add(ParamsBuffer, SetVectorCurve_NewVectorCurve_Offset), 0, null, newVectorCurve);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetVectorCurve_VectorTrackName_Offset), 0, null, vectorTrackName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVectorCurve_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.TimelineComponent:SetTimelineLengthMode
    static readonly IntPtr SetTimelineLengthMode_NativeFunction;
    static readonly int SetTimelineLengthMode_ParamsSize;
    static readonly int SetTimelineLengthMode_NewLengthMode_Offset;
    
    public void SetTimelineLengthMode(UnrealSharp.Engine.ETimelineLengthMode newLengthMode)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTimelineLengthMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ETimelineLengthMode>.ToNative(IntPtr.Add(ParamsBuffer, SetTimelineLengthMode_NewLengthMode_Offset), 0, null, newLengthMode);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTimelineLengthMode_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.TimelineComponent:SetTimelineLength
    static readonly IntPtr SetTimelineLength_NativeFunction;
    static readonly int SetTimelineLength_ParamsSize;
    static readonly int SetTimelineLength_NewLength_Offset;
    
    public void SetTimelineLength(float newLength)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTimelineLength_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetTimelineLength_NewLength_Offset), 0, null, newLength);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTimelineLength_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.TimelineComponent:SetPlayRate
    static readonly IntPtr SetPlayRate_NativeFunction;
    static readonly int SetPlayRate_ParamsSize;
    static readonly int SetPlayRate_NewRate_Offset;
    
    public void SetPlayRate(float newRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlayRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPlayRate_NewRate_Offset), 0, null, newRate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPlayRate_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.TimelineComponent:SetPlaybackPosition
    static readonly IntPtr SetPlaybackPosition_NativeFunction;
    static readonly int SetPlaybackPosition_ParamsSize;
    static readonly int SetPlaybackPosition_NewPosition_Offset;
    static readonly int SetPlaybackPosition_bFireEvents_Offset;
    static readonly int SetPlaybackPosition_bFireUpdate_Offset;
    
    public void SetPlaybackPosition(float newPosition, bool bFireEvents, bool bFireUpdate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlaybackPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaybackPosition_NewPosition_Offset), 0, null, newPosition);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetPlaybackPosition_bFireEvents_Offset), 0, null, bFireEvents);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetPlaybackPosition_bFireUpdate_Offset), 0, null, bFireUpdate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPlaybackPosition_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.TimelineComponent:SetNewTime
    static readonly IntPtr SetNewTime_NativeFunction;
    static readonly int SetNewTime_ParamsSize;
    static readonly int SetNewTime_NewTime_Offset;
    
    public void SetNewTime(float newTime)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNewTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetNewTime_NewTime_Offset), 0, null, newTime);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNewTime_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.TimelineComponent:SetLooping
    static readonly IntPtr SetLooping_NativeFunction;
    static readonly int SetLooping_ParamsSize;
    static readonly int SetLooping_bNewLooping_Offset;
    
    public void SetLooping(bool bNewLooping)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLooping_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLooping_bNewLooping_Offset), 0, null, bNewLooping);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLooping_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.TimelineComponent:SetLinearColorCurve
    static readonly IntPtr SetLinearColorCurve_NativeFunction;
    static readonly int SetLinearColorCurve_ParamsSize;
    static readonly int SetLinearColorCurve_NewLinearColorCurve_Offset;
    static readonly int SetLinearColorCurve_LinearColorTrackName_Offset;
    
    public void SetLinearColorCurve(UnrealSharp.Engine.CurveLinearColor newLinearColorCurve, Name linearColorTrackName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLinearColorCurve_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.CurveLinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearColorCurve_NewLinearColorCurve_Offset), 0, null, newLinearColorCurve);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLinearColorCurve_LinearColorTrackName_Offset), 0, null, linearColorTrackName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLinearColorCurve_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.TimelineComponent:SetIgnoreTimeDilation
    static readonly IntPtr SetIgnoreTimeDilation_NativeFunction;
    static readonly int SetIgnoreTimeDilation_ParamsSize;
    static readonly int SetIgnoreTimeDilation_bNewIgnoreTimeDilation_Offset;
    
    public void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIgnoreTimeDilation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetIgnoreTimeDilation_bNewIgnoreTimeDilation_Offset), 0, null, bNewIgnoreTimeDilation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIgnoreTimeDilation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.TimelineComponent:SetFloatCurve
    static readonly IntPtr SetFloatCurve_NativeFunction;
    static readonly int SetFloatCurve_ParamsSize;
    static readonly int SetFloatCurve_NewFloatCurve_Offset;
    static readonly int SetFloatCurve_FloatTrackName_Offset;
    
    public void SetFloatCurve(UnrealSharp.Engine.CurveFloat newFloatCurve, Name floatTrackName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFloatCurve_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.CurveFloat>.ToNative(IntPtr.Add(ParamsBuffer, SetFloatCurve_NewFloatCurve_Offset), 0, null, newFloatCurve);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetFloatCurve_FloatTrackName_Offset), 0, null, floatTrackName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFloatCurve_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.TimelineComponent:ReverseFromEnd
    static readonly IntPtr ReverseFromEnd_NativeFunction;
    
    public void ReverseFromEnd()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReverseFromEnd_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.TimelineComponent:Reverse
    static readonly IntPtr Reverse_NativeFunction;
    
    public void Reverse()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Reverse_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.TimelineComponent:PlayFromStart
    static readonly IntPtr PlayFromStart_NativeFunction;
    
    public void PlayFromStart()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PlayFromStart_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.TimelineComponent:Play
    static readonly IntPtr Play_NativeFunction;
    
    public void Play()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Play_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.TimelineComponent:IsReversing
    static readonly IntPtr IsReversing_NativeFunction;
    static readonly int IsReversing_ParamsSize;
    static readonly int IsReversing_ReturnValue_Offset;
    
    public bool IsReversing()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsReversing_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsReversing_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsReversing_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.TimelineComponent:IsPlaying
    static readonly IntPtr IsPlaying_NativeFunction;
    static readonly int IsPlaying_ParamsSize;
    static readonly int IsPlaying_ReturnValue_Offset;
    
    public bool IsPlaying()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPlaying_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsPlaying_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPlaying_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.TimelineComponent:IsLooping
    static readonly IntPtr IsLooping_NativeFunction;
    static readonly int IsLooping_ParamsSize;
    static readonly int IsLooping_ReturnValue_Offset;
    
    public bool IsLooping()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsLooping_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsLooping_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsLooping_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.TimelineComponent:GetTimelineLength
    static readonly IntPtr GetTimelineLength_NativeFunction;
    static readonly int GetTimelineLength_ParamsSize;
    static readonly int GetTimelineLength_ReturnValue_Offset;
    
    public float GetTimelineLength()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTimelineLength_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTimelineLength_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetTimelineLength_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.TimelineComponent:GetScaledTimelineLength
    static readonly IntPtr GetScaledTimelineLength_NativeFunction;
    static readonly int GetScaledTimelineLength_ParamsSize;
    static readonly int GetScaledTimelineLength_ReturnValue_Offset;
    
    public float GetScaledTimelineLength()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetScaledTimelineLength_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetScaledTimelineLength_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetScaledTimelineLength_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.TimelineComponent:GetPlayRate
    static readonly IntPtr GetPlayRate_NativeFunction;
    static readonly int GetPlayRate_ParamsSize;
    static readonly int GetPlayRate_ReturnValue_Offset;
    
    public float GetPlayRate()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPlayRate_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetPlayRate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.TimelineComponent:GetPlaybackPosition
    static readonly IntPtr GetPlaybackPosition_NativeFunction;
    static readonly int GetPlaybackPosition_ParamsSize;
    static readonly int GetPlaybackPosition_ReturnValue_Offset;
    
    public float GetPlaybackPosition()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlaybackPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPlaybackPosition_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetPlaybackPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.TimelineComponent:GetIgnoreTimeDilation
    static readonly IntPtr GetIgnoreTimeDilation_NativeFunction;
    static readonly int GetIgnoreTimeDilation_ParamsSize;
    static readonly int GetIgnoreTimeDilation_ReturnValue_Offset;
    
    public bool GetIgnoreTimeDilation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetIgnoreTimeDilation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetIgnoreTimeDilation_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetIgnoreTimeDilation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class VOIPTalker : UnrealSharp.Engine.ActorComponent
{
    
    static readonly IntPtr NativeClassPtr;
    static VOIPTalker()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("VOIPTalker");
        
        Settings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Settings");
        
        RegisterWithPlayerState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RegisterWithPlayerState");
        RegisterWithPlayerState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RegisterWithPlayerState_NativeFunction);
        RegisterWithPlayerState_OwningState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RegisterWithPlayerState_NativeFunction, "OwningState");
        GetVoiceLevel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVoiceLevel");
        GetVoiceLevel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVoiceLevel_NativeFunction);
        GetVoiceLevel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVoiceLevel_NativeFunction, "ReturnValue");
        CreateTalkerForPlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateTalkerForPlayer");
        CreateTalkerForPlayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateTalkerForPlayer_NativeFunction);
        CreateTalkerForPlayer_OwningState_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateTalkerForPlayer_NativeFunction, "OwningState");
        CreateTalkerForPlayer_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateTalkerForPlayer_NativeFunction, "ReturnValue");
        
        IntPtr BPOnTalkingBegin_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BPOnTalkingBegin");
        BPOnTalkingBegin_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BPOnTalkingBegin_NativeFunction);
        BPOnTalkingBegin_AudioComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BPOnTalkingBegin_NativeFunction, "AudioComponent");
        
        
    }
    
    protected VOIPTalker(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/Engine.VOIPTalker:Settings
    static readonly int Settings_Offset;
    
    public UnrealSharp.Engine.VoiceSettings Settings
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.VoiceSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, Settings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.Engine.VoiceSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, Settings_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Engine.VOIPTalker:RegisterWithPlayerState
    static readonly IntPtr RegisterWithPlayerState_NativeFunction;
    static readonly int RegisterWithPlayerState_ParamsSize;
    static readonly int RegisterWithPlayerState_OwningState_Offset;
    
    public void RegisterWithPlayerState(UnrealSharp.Engine.PlayerState owningState)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RegisterWithPlayerState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerState>.ToNative(IntPtr.Add(ParamsBuffer, RegisterWithPlayerState_OwningState_Offset), 0, null, owningState);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RegisterWithPlayerState_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.VOIPTalker:GetVoiceLevel
    static readonly IntPtr GetVoiceLevel_NativeFunction;
    static readonly int GetVoiceLevel_ParamsSize;
    static readonly int GetVoiceLevel_ReturnValue_Offset;
    
    public float GetVoiceLevel()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVoiceLevel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVoiceLevel_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetVoiceLevel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.VOIPTalker:CreateTalkerForPlayer
    static readonly IntPtr CreateTalkerForPlayer_NativeFunction;
    static readonly int CreateTalkerForPlayer_ParamsSize;
    static readonly int CreateTalkerForPlayer_OwningState_Offset;
    static readonly int CreateTalkerForPlayer_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.VOIPTalker CreateTalkerForPlayer(UnrealSharp.Engine.PlayerState owningState)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateTalkerForPlayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.PlayerState>.ToNative(IntPtr.Add(ParamsBuffer, CreateTalkerForPlayer_OwningState_Offset), 0, null, owningState);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateTalkerForPlayer_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.VOIPTalker returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.VOIPTalker>.FromNative(IntPtr.Add(ParamsBuffer, CreateTalkerForPlayer_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.VOIPTalker:BPOnTalkingEnd
    IntPtr BPOnTalkingEnd_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void BPOnTalkingEnd()
    {
        unsafe
        {
            if (BPOnTalkingEnd_NativeFunction == IntPtr.Zero)
            {
                BPOnTalkingEnd_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "BPOnTalkingEnd");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BPOnTalkingEnd_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void BPOnTalkingEnd_Implementation()
    {
    }
    void Invoke_BPOnTalkingEnd(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            BPOnTalkingEnd_Implementation();
        }
    }
    
    // Function /Script/Engine.VOIPTalker:BPOnTalkingBegin
    IntPtr BPOnTalkingBegin_NativeFunction;
    static readonly int BPOnTalkingBegin_ParamsSize;
    static readonly int BPOnTalkingBegin_AudioComponent_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void BPOnTalkingBegin(UnrealSharp.Engine.AudioComponent audioComponent)
    {
        unsafe
        {
            if (BPOnTalkingBegin_NativeFunction == IntPtr.Zero)
            {
                BPOnTalkingBegin_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "BPOnTalkingBegin");
            }
            byte* ParamsBufferAllocation = stackalloc byte[BPOnTalkingBegin_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.AudioComponent>.ToNative(IntPtr.Add(ParamsBuffer, BPOnTalkingBegin_AudioComponent_Offset), 0, null, audioComponent);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BPOnTalkingBegin_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void BPOnTalkingBegin_Implementation(UnrealSharp.Engine.AudioComponent audioComponent)
    {
    }
    void Invoke_BPOnTalkingBegin(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Engine.AudioComponent audioComponent = ObjectMarshaller<UnrealSharp.Engine.AudioComponent>.FromNative(IntPtr.Add(buffer, BPOnTalkingBegin_AudioComponent_Offset), 0, null);
            BPOnTalkingBegin_Implementation(audioComponent);
        }
    }
    
    
}
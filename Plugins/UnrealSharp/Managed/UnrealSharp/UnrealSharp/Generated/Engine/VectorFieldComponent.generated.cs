// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class VectorFieldComponent : UnrealSharp.Engine.PrimitiveComponent
{
    
    static VectorFieldComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("VectorFieldComponent");
        
        VectorField_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VectorField");
        Intensity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Intensity");
        Tightness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Tightness");
        
        SetIntensity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIntensity");
        SetIntensity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIntensity_NativeFunction);
        SetIntensity_NewIntensity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIntensity_NativeFunction, "NewIntensity");
        
        
    }
    
    protected VectorFieldComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Engine.VectorFieldComponent:VectorField
    static readonly int VectorField_Offset;
    
    public UnrealSharp.Engine.VectorField VectorField
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.VectorField>.FromNative(IntPtr.Add(NativeObject, VectorField_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.VectorField>.ToNative(IntPtr.Add(NativeObject, VectorField_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.VectorFieldComponent:Intensity
    static readonly int Intensity_Offset;
    
    public float Intensity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Intensity_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Intensity_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.VectorFieldComponent:Tightness
    static readonly int Tightness_Offset;
    
    public float Tightness
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Tightness_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Tightness_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Engine.VectorFieldComponent:SetIntensity
    static readonly IntPtr SetIntensity_NativeFunction;
    static readonly int SetIntensity_ParamsSize;
    static readonly int SetIntensity_NewIntensity_Offset;
    
    public void SetIntensity(float newIntensity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIntensity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetIntensity_NewIntensity_Offset), 0, null, newIntensity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIntensity_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
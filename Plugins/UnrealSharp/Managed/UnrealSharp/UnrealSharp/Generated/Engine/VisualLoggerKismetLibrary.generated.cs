// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class VisualLoggerLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static VisualLoggerLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("VisualLoggerKismetLibrary");
        
        
        RedirectVislog_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RedirectVislog");
        RedirectVislog_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RedirectVislog_NativeFunction);
        RedirectVislog_SourceOwner_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RedirectVislog_NativeFunction, "SourceOwner");
        RedirectVislog_DestinationOwner_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RedirectVislog_NativeFunction, "DestinationOwner");
        LogText_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LogText");
        LogText_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LogText_NativeFunction);
        LogText_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogText_NativeFunction, "WorldContextObject");
        LogText_Text_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogText_NativeFunction, "Text");
        LogText_LogCategory_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogText_NativeFunction, "LogCategory");
        LogText_bAddToMessageLog_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogText_NativeFunction, "bAddToMessageLog");
        LogSegment_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LogSegment");
        LogSegment_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LogSegment_NativeFunction);
        LogSegment_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogSegment_NativeFunction, "WorldContextObject");
        LogSegment_SegmentStart_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogSegment_NativeFunction, "SegmentStart");
        LogSegment_SegmentEnd_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogSegment_NativeFunction, "SegmentEnd");
        LogSegment_Text_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogSegment_NativeFunction, "Text");
        LogSegment_ObjectColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogSegment_NativeFunction, "ObjectColor");
        LogSegment_Thickness_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogSegment_NativeFunction, "Thickness");
        LogSegment_CategoryName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogSegment_NativeFunction, "CategoryName");
        LogSegment_bAddToMessageLog_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogSegment_NativeFunction, "bAddToMessageLog");
        LogLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LogLocation");
        LogLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LogLocation_NativeFunction);
        LogLocation_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogLocation_NativeFunction, "WorldContextObject");
        LogLocation_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogLocation_NativeFunction, "Location");
        LogLocation_Text_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogLocation_NativeFunction, "Text");
        LogLocation_ObjectColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogLocation_NativeFunction, "ObjectColor");
        LogLocation_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogLocation_NativeFunction, "Radius");
        LogLocation_LogCategory_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogLocation_NativeFunction, "LogCategory");
        LogLocation_bAddToMessageLog_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogLocation_NativeFunction, "bAddToMessageLog");
        LogBox_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LogBox");
        LogBox_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LogBox_NativeFunction);
        LogBox_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogBox_NativeFunction, "WorldContextObject");
        LogBox_BoxShape_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogBox_NativeFunction, "BoxShape");
        LogBox_Text_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogBox_NativeFunction, "Text");
        LogBox_ObjectColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogBox_NativeFunction, "ObjectColor");
        LogBox_LogCategory_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogBox_NativeFunction, "LogCategory");
        LogBox_bAddToMessageLog_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogBox_NativeFunction, "bAddToMessageLog");
        EnableRecording_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EnableRecording");
        EnableRecording_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EnableRecording_NativeFunction);
        EnableRecording_bEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EnableRecording_NativeFunction, "bEnabled");
        
        
    }
    
    protected VisualLoggerLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Engine.VisualLoggerKismetLibrary:RedirectVislog
    static readonly IntPtr RedirectVislog_NativeFunction;
    static readonly int RedirectVislog_ParamsSize;
    static readonly int RedirectVislog_SourceOwner_Offset;
    static readonly int RedirectVislog_DestinationOwner_Offset;
    
    public static void RedirectVislog(UnrealSharp.CoreUObject.Object sourceOwner, UnrealSharp.CoreUObject.Object destinationOwner)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RedirectVislog_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, RedirectVislog_SourceOwner_Offset), 0, null, sourceOwner);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, RedirectVislog_DestinationOwner_Offset), 0, null, destinationOwner);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RedirectVislog_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.VisualLoggerKismetLibrary:LogText
    static readonly IntPtr LogText_NativeFunction;
    static readonly int LogText_ParamsSize;
    static readonly int LogText_WorldContextObject_Offset;
    static readonly int LogText_Text_Offset;
    static readonly int LogText_LogCategory_Offset;
    static readonly int LogText_bAddToMessageLog_Offset;
    
    public static void LogText(UnrealSharp.CoreUObject.Object worldContextObject, string text)
    {
        Name logCategory = new Name("VisLogBP");
        LogText(worldContextObject, text, logCategory);
    }
    
    public static void LogText(UnrealSharp.CoreUObject.Object worldContextObject, string text, Name logCategory, bool bAddToMessageLog = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LogText_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, LogText_WorldContextObject_Offset), 0, null, worldContextObject);
            IntPtr Text_NativePtr = IntPtr.Add(ParamsBuffer,LogText_Text_Offset);
            StringMarshaller.ToNative(Text_NativePtr,0,null,text);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, LogText_LogCategory_Offset), 0, null, logCategory);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LogText_bAddToMessageLog_Offset), 0, null, bAddToMessageLog);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LogText_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Text_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.VisualLoggerKismetLibrary:LogSegment
    static readonly IntPtr LogSegment_NativeFunction;
    static readonly int LogSegment_ParamsSize;
    static readonly int LogSegment_WorldContextObject_Offset;
    static readonly int LogSegment_SegmentStart_Offset;
    static readonly int LogSegment_SegmentEnd_Offset;
    static readonly int LogSegment_Text_Offset;
    static readonly int LogSegment_ObjectColor_Offset;
    static readonly int LogSegment_Thickness_Offset;
    static readonly int LogSegment_CategoryName_Offset;
    static readonly int LogSegment_bAddToMessageLog_Offset;
    
    public static void LogSegment(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 segmentStart, System.DoubleNumerics.Vector3 segmentEnd, string text)
    {
        UnrealSharp.CoreUObject.LinearColor objectColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=0.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        LogSegment(worldContextObject, segmentStart, segmentEnd, text, objectColor);
    }
    
    public static void LogSegment(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 segmentStart, System.DoubleNumerics.Vector3 segmentEnd, string text, UnrealSharp.CoreUObject.LinearColor objectColor, float thickness = 0.000000f)
    {
        Name categoryName = new Name("VisLogBP");
        LogSegment(worldContextObject, segmentStart, segmentEnd, text, objectColor, thickness, categoryName);
    }
    
    public static void LogSegment(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 segmentStart, System.DoubleNumerics.Vector3 segmentEnd, string text, UnrealSharp.CoreUObject.LinearColor objectColor, float thickness, Name categoryName, bool bAddToMessageLog = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LogSegment_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, LogSegment_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LogSegment_SegmentStart_Offset), 0, null, segmentStart);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LogSegment_SegmentEnd_Offset), 0, null, segmentEnd);
            IntPtr Text_NativePtr = IntPtr.Add(ParamsBuffer,LogSegment_Text_Offset);
            StringMarshaller.ToNative(Text_NativePtr,0,null,text);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LogSegment_ObjectColor_Offset), 0, null, objectColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LogSegment_Thickness_Offset), 0, null, thickness);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, LogSegment_CategoryName_Offset), 0, null, categoryName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LogSegment_bAddToMessageLog_Offset), 0, null, bAddToMessageLog);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LogSegment_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Text_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.VisualLoggerKismetLibrary:LogLocation
    static readonly IntPtr LogLocation_NativeFunction;
    static readonly int LogLocation_ParamsSize;
    static readonly int LogLocation_WorldContextObject_Offset;
    static readonly int LogLocation_Location_Offset;
    static readonly int LogLocation_Text_Offset;
    static readonly int LogLocation_ObjectColor_Offset;
    static readonly int LogLocation_Radius_Offset;
    static readonly int LogLocation_LogCategory_Offset;
    static readonly int LogLocation_bAddToMessageLog_Offset;
    
    public static void LogLocation(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 location, string text)
    {
        UnrealSharp.CoreUObject.LinearColor objectColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=0.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        LogLocation(worldContextObject, location, text, objectColor);
    }
    
    public static void LogLocation(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 location, string text, UnrealSharp.CoreUObject.LinearColor objectColor, float radius = 10.000000f)
    {
        Name logCategory = new Name("VisLogBP");
        LogLocation(worldContextObject, location, text, objectColor, radius, logCategory);
    }
    
    public static void LogLocation(UnrealSharp.CoreUObject.Object worldContextObject, System.DoubleNumerics.Vector3 location, string text, UnrealSharp.CoreUObject.LinearColor objectColor, float radius, Name logCategory, bool bAddToMessageLog = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LogLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, LogLocation_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, LogLocation_Location_Offset), 0, null, location);
            IntPtr Text_NativePtr = IntPtr.Add(ParamsBuffer,LogLocation_Text_Offset);
            StringMarshaller.ToNative(Text_NativePtr,0,null,text);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LogLocation_ObjectColor_Offset), 0, null, objectColor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, LogLocation_Radius_Offset), 0, null, radius);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, LogLocation_LogCategory_Offset), 0, null, logCategory);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LogLocation_bAddToMessageLog_Offset), 0, null, bAddToMessageLog);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LogLocation_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Text_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.VisualLoggerKismetLibrary:LogBox
    static readonly IntPtr LogBox_NativeFunction;
    static readonly int LogBox_ParamsSize;
    static readonly int LogBox_WorldContextObject_Offset;
    static readonly int LogBox_BoxShape_Offset;
    static readonly int LogBox_Text_Offset;
    static readonly int LogBox_ObjectColor_Offset;
    static readonly int LogBox_LogCategory_Offset;
    static readonly int LogBox_bAddToMessageLog_Offset;
    
    public static void LogBox(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.CoreUObject.Box boxShape, string text)
    {
        UnrealSharp.CoreUObject.LinearColor objectColor = new UnrealSharp.CoreUObject.LinearColor
        {
            R=0.000000f,
            G=0.000000f,
            B=1.000000f,
            A=1.000000f,
        };
        LogBox(worldContextObject, boxShape, text, objectColor);
    }
    
    public static void LogBox(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.CoreUObject.Box boxShape, string text, UnrealSharp.CoreUObject.LinearColor objectColor)
    {
        Name logCategory = new Name("VisLogBP");
        LogBox(worldContextObject, boxShape, text, objectColor, logCategory);
    }
    
    public static void LogBox(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.CoreUObject.Box boxShape, string text, UnrealSharp.CoreUObject.LinearColor objectColor, Name logCategory, bool bAddToMessageLog = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LogBox_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, LogBox_WorldContextObject_Offset), 0, null, worldContextObject);
            UnrealSharp.CoreUObject.BoxMarshaler.ToNative(IntPtr.Add(ParamsBuffer, LogBox_BoxShape_Offset), 0, null, boxShape);
            IntPtr Text_NativePtr = IntPtr.Add(ParamsBuffer,LogBox_Text_Offset);
            StringMarshaller.ToNative(Text_NativePtr,0,null,text);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, LogBox_ObjectColor_Offset), 0, null, objectColor);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, LogBox_LogCategory_Offset), 0, null, logCategory);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LogBox_bAddToMessageLog_Offset), 0, null, bAddToMessageLog);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LogBox_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Text_NativePtr, 0);
        }
    }
    
    // Function /Script/Engine.VisualLoggerKismetLibrary:EnableRecording
    static readonly IntPtr EnableRecording_NativeFunction;
    static readonly int EnableRecording_ParamsSize;
    static readonly int EnableRecording_bEnabled_Offset;
    
    public static void EnableRecording(bool bEnabled)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EnableRecording_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, EnableRecording_bEnabled_Offset), 0, null, bEnabled);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EnableRecording_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class VolumetricCloudComponent : UnrealSharp.Engine.SceneComponent
{
    
    static VolumetricCloudComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("VolumetricCloudComponent");
        
        LayerBottomAltitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LayerBottomAltitude");
        LayerHeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LayerHeight");
        TracingStartMaxDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TracingStartMaxDistance");
        TracingMaxDistanceMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TracingMaxDistanceMode");
        TracingMaxDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TracingMaxDistance");
        PlanetRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PlanetRadius");
        GroundAlbedo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "GroundAlbedo");
        Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Material");
        bUsePerSampleAtmosphericLightTransmittance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUsePerSampleAtmosphericLightTransmittance");
        bUsePerSampleAtmosphericLightTransmittance_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUsePerSampleAtmosphericLightTransmittance");
        SkyLightCloudBottomOcclusion_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SkyLightCloudBottomOcclusion");
        ViewSampleCountScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ViewSampleCountScale");
        ReflectionViewSampleCountScaleValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ReflectionViewSampleCountScaleValue");
        ShadowViewSampleCountScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShadowViewSampleCountScale");
        ShadowReflectionViewSampleCountScaleValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShadowReflectionViewSampleCountScaleValue");
        ShadowTracingDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShadowTracingDistance");
        StopTracingTransmittanceThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StopTracingTransmittanceThreshold");
        AerialPespectiveRayleighScatteringStartDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AerialPespectiveRayleighScatteringStartDistance");
        AerialPespectiveRayleighScatteringFadeDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AerialPespectiveRayleighScatteringFadeDistance");
        AerialPespectiveMieScatteringStartDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AerialPespectiveMieScatteringStartDistance");
        AerialPespectiveMieScatteringFadeDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AerialPespectiveMieScatteringFadeDistance");
        
        SetViewSampleCountScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetViewSampleCountScale");
        SetViewSampleCountScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetViewSampleCountScale_NativeFunction);
        SetViewSampleCountScale_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetViewSampleCountScale_NativeFunction, "NewValue");
        SetTracingStartMaxDistance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTracingStartMaxDistance");
        SetTracingStartMaxDistance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTracingStartMaxDistance_NativeFunction);
        SetTracingStartMaxDistance_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTracingStartMaxDistance_NativeFunction, "NewValue");
        SetTracingMaxDistance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTracingMaxDistance");
        SetTracingMaxDistance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTracingMaxDistance_NativeFunction);
        SetTracingMaxDistance_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTracingMaxDistance_NativeFunction, "NewValue");
        SetStopTracingTransmittanceThreshold_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetStopTracingTransmittanceThreshold");
        SetStopTracingTransmittanceThreshold_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetStopTracingTransmittanceThreshold_NativeFunction);
        SetStopTracingTransmittanceThreshold_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetStopTracingTransmittanceThreshold_NativeFunction, "NewValue");
        SetSkyLightCloudBottomOcclusion_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSkyLightCloudBottomOcclusion");
        SetSkyLightCloudBottomOcclusion_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSkyLightCloudBottomOcclusion_NativeFunction);
        SetSkyLightCloudBottomOcclusion_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSkyLightCloudBottomOcclusion_NativeFunction, "NewValue");
        SetShadowViewSampleCountScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetShadowViewSampleCountScale");
        SetShadowViewSampleCountScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetShadowViewSampleCountScale_NativeFunction);
        SetShadowViewSampleCountScale_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetShadowViewSampleCountScale_NativeFunction, "NewValue");
        SetShadowTracingDistance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetShadowTracingDistance");
        SetShadowTracingDistance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetShadowTracingDistance_NativeFunction);
        SetShadowTracingDistance_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetShadowTracingDistance_NativeFunction, "NewValue");
        SetShadowReflectionViewSampleCountScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetShadowReflectionViewSampleCountScale");
        SetShadowReflectionViewSampleCountScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetShadowReflectionViewSampleCountScale_NativeFunction);
        SetShadowReflectionViewSampleCountScale_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetShadowReflectionViewSampleCountScale_NativeFunction, "NewValue");
        SetShadowReflectionSampleCountScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetShadowReflectionSampleCountScale");
        SetShadowReflectionSampleCountScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetShadowReflectionSampleCountScale_NativeFunction);
        SetShadowReflectionSampleCountScale_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetShadowReflectionSampleCountScale_NativeFunction, "NewValue");
        SetReflectionViewSampleCountScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetReflectionViewSampleCountScale");
        SetReflectionViewSampleCountScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetReflectionViewSampleCountScale_NativeFunction);
        SetReflectionViewSampleCountScale_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetReflectionViewSampleCountScale_NativeFunction, "NewValue");
        SetReflectionSampleCountScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetReflectionSampleCountScale");
        SetReflectionSampleCountScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetReflectionSampleCountScale_NativeFunction);
        SetReflectionSampleCountScale_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetReflectionSampleCountScale_NativeFunction, "NewValue");
        SetPlanetRadius_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlanetRadius");
        SetPlanetRadius_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlanetRadius_NativeFunction);
        SetPlanetRadius_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlanetRadius_NativeFunction, "NewValue");
        SetMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMaterial");
        SetMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMaterial_NativeFunction);
        SetMaterial_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterial_NativeFunction, "NewValue");
        SetLayerHeight_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLayerHeight");
        SetLayerHeight_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLayerHeight_NativeFunction);
        SetLayerHeight_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLayerHeight_NativeFunction, "NewValue");
        SetLayerBottomAltitude_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLayerBottomAltitude");
        SetLayerBottomAltitude_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLayerBottomAltitude_NativeFunction);
        SetLayerBottomAltitude_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLayerBottomAltitude_NativeFunction, "NewValue");
        SetGroundAlbedo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGroundAlbedo");
        SetGroundAlbedo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGroundAlbedo_NativeFunction);
        SetGroundAlbedo_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGroundAlbedo_NativeFunction, "NewValue");
        SetbUsePerSampleAtmosphericLightTransmittance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetbUsePerSampleAtmosphericLightTransmittance");
        SetbUsePerSampleAtmosphericLightTransmittance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetbUsePerSampleAtmosphericLightTransmittance_NativeFunction);
        SetbUsePerSampleAtmosphericLightTransmittance_NewValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetbUsePerSampleAtmosphericLightTransmittance_NativeFunction, "NewValue");
        
        
    }
    
    protected VolumetricCloudComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Engine.VolumetricCloudComponent:LayerBottomAltitude
    static readonly int LayerBottomAltitude_Offset;
    
    public float LayerBottomAltitude
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LayerBottomAltitude_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.VolumetricCloudComponent:LayerHeight
    static readonly int LayerHeight_Offset;
    
    public float LayerHeight
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LayerHeight_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.VolumetricCloudComponent:TracingStartMaxDistance
    static readonly int TracingStartMaxDistance_Offset;
    
    public float TracingStartMaxDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, TracingStartMaxDistance_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/Engine.VolumetricCloudComponent:TracingMaxDistanceMode
    static readonly int TracingMaxDistanceMode_Offset;
    
    public UnrealSharp.Engine.EVolumetricCloudTracingMaxDistanceMode TracingMaxDistanceMode
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EVolumetricCloudTracingMaxDistanceMode>.FromNative(IntPtr.Add(NativeObject, TracingMaxDistanceMode_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.VolumetricCloudComponent:TracingMaxDistance
    static readonly int TracingMaxDistance_Offset;
    
    public float TracingMaxDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, TracingMaxDistance_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.VolumetricCloudComponent:PlanetRadius
    static readonly int PlanetRadius_Offset;
    
    public float PlanetRadius
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PlanetRadius_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.VolumetricCloudComponent:GroundAlbedo
    static readonly int GroundAlbedo_Offset;
    
    public UnrealSharp.CoreUObject.Color GroundAlbedo
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(NativeObject, GroundAlbedo_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/Engine.VolumetricCloudComponent:Material
    static readonly int Material_Offset;
    
    public UnrealSharp.Engine.MaterialInterface Material
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.FromNative(IntPtr.Add(NativeObject, Material_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Engine.VolumetricCloudComponent:bUsePerSampleAtmosphericLightTransmittance
    static readonly int bUsePerSampleAtmosphericLightTransmittance_Offset;
    static readonly IntPtr bUsePerSampleAtmosphericLightTransmittance_NativeProperty;
    
    public bool bUsePerSampleAtmosphericLightTransmittance
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUsePerSampleAtmosphericLightTransmittance_NativeProperty, bUsePerSampleAtmosphericLightTransmittance_Offset);
        }
    }
    
    // FloatProperty /Script/Engine.VolumetricCloudComponent:SkyLightCloudBottomOcclusion
    static readonly int SkyLightCloudBottomOcclusion_Offset;
    
    public float SkyLightCloudBottomOcclusion
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SkyLightCloudBottomOcclusion_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.VolumetricCloudComponent:ViewSampleCountScale
    static readonly int ViewSampleCountScale_Offset;
    
    public float ViewSampleCountScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ViewSampleCountScale_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.VolumetricCloudComponent:ReflectionViewSampleCountScaleValue
    static readonly int ReflectionViewSampleCountScaleValue_Offset;
    
    public float ReflectionViewSampleCountScaleValue
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ReflectionViewSampleCountScaleValue_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.VolumetricCloudComponent:ShadowViewSampleCountScale
    static readonly int ShadowViewSampleCountScale_Offset;
    
    public float ShadowViewSampleCountScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ShadowViewSampleCountScale_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.VolumetricCloudComponent:ShadowReflectionViewSampleCountScaleValue
    static readonly int ShadowReflectionViewSampleCountScaleValue_Offset;
    
    public float ShadowReflectionViewSampleCountScaleValue
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ShadowReflectionViewSampleCountScaleValue_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.VolumetricCloudComponent:ShadowTracingDistance
    static readonly int ShadowTracingDistance_Offset;
    
    public float ShadowTracingDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ShadowTracingDistance_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.VolumetricCloudComponent:StopTracingTransmittanceThreshold
    static readonly int StopTracingTransmittanceThreshold_Offset;
    
    public float StopTracingTransmittanceThreshold
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, StopTracingTransmittanceThreshold_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.VolumetricCloudComponent:AerialPespectiveRayleighScatteringStartDistance
    static readonly int AerialPespectiveRayleighScatteringStartDistance_Offset;
    
    public float AerialPespectiveRayleighScatteringStartDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AerialPespectiveRayleighScatteringStartDistance_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.VolumetricCloudComponent:AerialPespectiveRayleighScatteringFadeDistance
    static readonly int AerialPespectiveRayleighScatteringFadeDistance_Offset;
    
    public float AerialPespectiveRayleighScatteringFadeDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AerialPespectiveRayleighScatteringFadeDistance_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.VolumetricCloudComponent:AerialPespectiveMieScatteringStartDistance
    static readonly int AerialPespectiveMieScatteringStartDistance_Offset;
    
    public float AerialPespectiveMieScatteringStartDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AerialPespectiveMieScatteringStartDistance_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.VolumetricCloudComponent:AerialPespectiveMieScatteringFadeDistance
    static readonly int AerialPespectiveMieScatteringFadeDistance_Offset;
    
    public float AerialPespectiveMieScatteringFadeDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AerialPespectiveMieScatteringFadeDistance_Offset), 0, this);
        }
    }
    
    // Function /Script/Engine.VolumetricCloudComponent:SetViewSampleCountScale
    static readonly IntPtr SetViewSampleCountScale_NativeFunction;
    static readonly int SetViewSampleCountScale_ParamsSize;
    static readonly int SetViewSampleCountScale_NewValue_Offset;
    
    public void SetViewSampleCountScale(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetViewSampleCountScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetViewSampleCountScale_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetViewSampleCountScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.VolumetricCloudComponent:SetTracingStartMaxDistance
    static readonly IntPtr SetTracingStartMaxDistance_NativeFunction;
    static readonly int SetTracingStartMaxDistance_ParamsSize;
    static readonly int SetTracingStartMaxDistance_NewValue_Offset;
    
    public void SetTracingStartMaxDistance(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTracingStartMaxDistance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetTracingStartMaxDistance_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTracingStartMaxDistance_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.VolumetricCloudComponent:SetTracingMaxDistance
    static readonly IntPtr SetTracingMaxDistance_NativeFunction;
    static readonly int SetTracingMaxDistance_ParamsSize;
    static readonly int SetTracingMaxDistance_NewValue_Offset;
    
    public void SetTracingMaxDistance(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTracingMaxDistance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetTracingMaxDistance_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTracingMaxDistance_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.VolumetricCloudComponent:SetStopTracingTransmittanceThreshold
    static readonly IntPtr SetStopTracingTransmittanceThreshold_NativeFunction;
    static readonly int SetStopTracingTransmittanceThreshold_ParamsSize;
    static readonly int SetStopTracingTransmittanceThreshold_NewValue_Offset;
    
    public void SetStopTracingTransmittanceThreshold(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetStopTracingTransmittanceThreshold_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetStopTracingTransmittanceThreshold_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetStopTracingTransmittanceThreshold_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.VolumetricCloudComponent:SetSkyLightCloudBottomOcclusion
    static readonly IntPtr SetSkyLightCloudBottomOcclusion_NativeFunction;
    static readonly int SetSkyLightCloudBottomOcclusion_ParamsSize;
    static readonly int SetSkyLightCloudBottomOcclusion_NewValue_Offset;
    
    public void SetSkyLightCloudBottomOcclusion(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSkyLightCloudBottomOcclusion_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSkyLightCloudBottomOcclusion_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSkyLightCloudBottomOcclusion_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.VolumetricCloudComponent:SetShadowViewSampleCountScale
    static readonly IntPtr SetShadowViewSampleCountScale_NativeFunction;
    static readonly int SetShadowViewSampleCountScale_ParamsSize;
    static readonly int SetShadowViewSampleCountScale_NewValue_Offset;
    
    public void SetShadowViewSampleCountScale(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetShadowViewSampleCountScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetShadowViewSampleCountScale_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetShadowViewSampleCountScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.VolumetricCloudComponent:SetShadowTracingDistance
    static readonly IntPtr SetShadowTracingDistance_NativeFunction;
    static readonly int SetShadowTracingDistance_ParamsSize;
    static readonly int SetShadowTracingDistance_NewValue_Offset;
    
    public void SetShadowTracingDistance(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetShadowTracingDistance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetShadowTracingDistance_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetShadowTracingDistance_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.VolumetricCloudComponent:SetShadowReflectionViewSampleCountScale
    static readonly IntPtr SetShadowReflectionViewSampleCountScale_NativeFunction;
    static readonly int SetShadowReflectionViewSampleCountScale_ParamsSize;
    static readonly int SetShadowReflectionViewSampleCountScale_NewValue_Offset;
    
    public void SetShadowReflectionViewSampleCountScale(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetShadowReflectionViewSampleCountScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetShadowReflectionViewSampleCountScale_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetShadowReflectionViewSampleCountScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.VolumetricCloudComponent:SetShadowReflectionSampleCountScale
    static readonly IntPtr SetShadowReflectionSampleCountScale_NativeFunction;
    static readonly int SetShadowReflectionSampleCountScale_ParamsSize;
    static readonly int SetShadowReflectionSampleCountScale_NewValue_Offset;
    
    [Obsolete("This function has been replaced by SetShadowReflectionViewSampleCountScale.")]
    public void SetShadowReflectionSampleCountScale(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetShadowReflectionSampleCountScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetShadowReflectionSampleCountScale_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetShadowReflectionSampleCountScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.VolumetricCloudComponent:SetReflectionViewSampleCountScale
    static readonly IntPtr SetReflectionViewSampleCountScale_NativeFunction;
    static readonly int SetReflectionViewSampleCountScale_ParamsSize;
    static readonly int SetReflectionViewSampleCountScale_NewValue_Offset;
    
    public void SetReflectionViewSampleCountScale(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetReflectionViewSampleCountScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetReflectionViewSampleCountScale_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetReflectionViewSampleCountScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.VolumetricCloudComponent:SetReflectionSampleCountScale
    static readonly IntPtr SetReflectionSampleCountScale_NativeFunction;
    static readonly int SetReflectionSampleCountScale_ParamsSize;
    static readonly int SetReflectionSampleCountScale_NewValue_Offset;
    
    [Obsolete("This function has been replaced by SetReflectionViewSampleCountScale.")]
    public void SetReflectionSampleCountScale(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetReflectionSampleCountScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetReflectionSampleCountScale_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetReflectionSampleCountScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.VolumetricCloudComponent:SetPlanetRadius
    static readonly IntPtr SetPlanetRadius_NativeFunction;
    static readonly int SetPlanetRadius_ParamsSize;
    static readonly int SetPlanetRadius_NewValue_Offset;
    
    public void SetPlanetRadius(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlanetRadius_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPlanetRadius_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPlanetRadius_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.VolumetricCloudComponent:SetMaterial
    static readonly IntPtr SetMaterial_NativeFunction;
    static readonly int SetMaterial_ParamsSize;
    static readonly int SetMaterial_NewValue_Offset;
    
    public void SetMaterial(UnrealSharp.Engine.MaterialInterface newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterial_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMaterial_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.VolumetricCloudComponent:SetLayerHeight
    static readonly IntPtr SetLayerHeight_NativeFunction;
    static readonly int SetLayerHeight_ParamsSize;
    static readonly int SetLayerHeight_NewValue_Offset;
    
    public void SetLayerHeight(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLayerHeight_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLayerHeight_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLayerHeight_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.VolumetricCloudComponent:SetLayerBottomAltitude
    static readonly IntPtr SetLayerBottomAltitude_NativeFunction;
    static readonly int SetLayerBottomAltitude_ParamsSize;
    static readonly int SetLayerBottomAltitude_NewValue_Offset;
    
    public void SetLayerBottomAltitude(float newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLayerBottomAltitude_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLayerBottomAltitude_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLayerBottomAltitude_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.VolumetricCloudComponent:SetGroundAlbedo
    static readonly IntPtr SetGroundAlbedo_NativeFunction;
    static readonly int SetGroundAlbedo_ParamsSize;
    static readonly int SetGroundAlbedo_NewValue_Offset;
    
    public void SetGroundAlbedo(UnrealSharp.CoreUObject.Color newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGroundAlbedo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(ParamsBuffer, SetGroundAlbedo_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetGroundAlbedo_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.VolumetricCloudComponent:SetbUsePerSampleAtmosphericLightTransmittance
    static readonly IntPtr SetbUsePerSampleAtmosphericLightTransmittance_NativeFunction;
    static readonly int SetbUsePerSampleAtmosphericLightTransmittance_ParamsSize;
    static readonly int SetbUsePerSampleAtmosphericLightTransmittance_NewValue_Offset;
    
    public void SetbUsePerSampleAtmosphericLightTransmittance(bool newValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetbUsePerSampleAtmosphericLightTransmittance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetbUsePerSampleAtmosphericLightTransmittance_NewValue_Offset), 0, null, newValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetbUsePerSampleAtmosphericLightTransmittance_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
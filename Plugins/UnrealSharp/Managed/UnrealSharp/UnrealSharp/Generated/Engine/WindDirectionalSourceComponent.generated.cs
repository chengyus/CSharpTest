// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class WindDirectionalSourceComponent : UnrealSharp.Engine.SceneComponent
{
    
    static WindDirectionalSourceComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("WindDirectionalSourceComponent");
        
        Strength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Strength");
        Speed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Speed");
        MinGustAmount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinGustAmount");
        MaxGustAmount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxGustAmount");
        Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Radius");
        bPointWind_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bPointWind");
        bPointWind_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bPointWind");
        
        SetWindType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWindType");
        SetWindType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWindType_NativeFunction);
        SetWindType_InNewType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWindType_NativeFunction, "InNewType");
        SetStrength_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetStrength");
        SetStrength_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetStrength_NativeFunction);
        SetStrength_InNewStrength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetStrength_NativeFunction, "InNewStrength");
        SetSpeed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSpeed");
        SetSpeed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSpeed_NativeFunction);
        SetSpeed_InNewSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSpeed_NativeFunction, "InNewSpeed");
        SetRadius_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRadius");
        SetRadius_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRadius_NativeFunction);
        SetRadius_InNewRadius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRadius_NativeFunction, "InNewRadius");
        SetMinimumGustAmount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMinimumGustAmount");
        SetMinimumGustAmount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMinimumGustAmount_NativeFunction);
        SetMinimumGustAmount_InNewMinGust_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMinimumGustAmount_NativeFunction, "InNewMinGust");
        SetMaximumGustAmount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMaximumGustAmount");
        SetMaximumGustAmount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMaximumGustAmount_NativeFunction);
        SetMaximumGustAmount_InNewMaxGust_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaximumGustAmount_NativeFunction, "InNewMaxGust");
        
        
    }
    
    protected WindDirectionalSourceComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/Engine.WindDirectionalSourceComponent:Strength
    static readonly int Strength_Offset;
    
    public float Strength
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Strength_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Strength_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.WindDirectionalSourceComponent:Speed
    static readonly int Speed_Offset;
    
    public float Speed
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Speed_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Speed_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/Engine.WindDirectionalSourceComponent:MinGustAmount
    static readonly int MinGustAmount_Offset;
    
    public float MinGustAmount
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinGustAmount_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.WindDirectionalSourceComponent:MaxGustAmount
    static readonly int MaxGustAmount_Offset;
    
    public float MaxGustAmount
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxGustAmount_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.WindDirectionalSourceComponent:Radius
    static readonly int Radius_Offset;
    
    public float Radius
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Radius_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Radius_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Engine.WindDirectionalSourceComponent:bPointWind
    static readonly int bPointWind_Offset;
    static readonly IntPtr bPointWind_NativeProperty;
    
    public bool bPointWind
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bPointWind_NativeProperty, bPointWind_Offset);
        }
    }
    
    // Function /Script/Engine.WindDirectionalSourceComponent:SetWindType
    static readonly IntPtr SetWindType_NativeFunction;
    static readonly int SetWindType_ParamsSize;
    static readonly int SetWindType_InNewType_Offset;
    
    public void SetWindType(UnrealSharp.Engine.EWindSourceType inNewType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWindType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EWindSourceType>.ToNative(IntPtr.Add(ParamsBuffer, SetWindType_InNewType_Offset), 0, null, inNewType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetWindType_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.WindDirectionalSourceComponent:SetStrength
    static readonly IntPtr SetStrength_NativeFunction;
    static readonly int SetStrength_ParamsSize;
    static readonly int SetStrength_InNewStrength_Offset;
    
    public void SetStrength(float inNewStrength)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetStrength_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetStrength_InNewStrength_Offset), 0, null, inNewStrength);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetStrength_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.WindDirectionalSourceComponent:SetSpeed
    static readonly IntPtr SetSpeed_NativeFunction;
    static readonly int SetSpeed_ParamsSize;
    static readonly int SetSpeed_InNewSpeed_Offset;
    
    public void SetSpeed(float inNewSpeed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSpeed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetSpeed_InNewSpeed_Offset), 0, null, inNewSpeed);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSpeed_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.WindDirectionalSourceComponent:SetRadius
    static readonly IntPtr SetRadius_NativeFunction;
    static readonly int SetRadius_ParamsSize;
    static readonly int SetRadius_InNewRadius_Offset;
    
    public void SetRadius(float inNewRadius)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRadius_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetRadius_InNewRadius_Offset), 0, null, inNewRadius);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRadius_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.WindDirectionalSourceComponent:SetMinimumGustAmount
    static readonly IntPtr SetMinimumGustAmount_NativeFunction;
    static readonly int SetMinimumGustAmount_ParamsSize;
    static readonly int SetMinimumGustAmount_InNewMinGust_Offset;
    
    public void SetMinimumGustAmount(float inNewMinGust)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMinimumGustAmount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMinimumGustAmount_InNewMinGust_Offset), 0, null, inNewMinGust);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMinimumGustAmount_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Engine.WindDirectionalSourceComponent:SetMaximumGustAmount
    static readonly IntPtr SetMaximumGustAmount_NativeFunction;
    static readonly int SetMaximumGustAmount_ParamsSize;
    static readonly int SetMaximumGustAmount_InNewMaxGust_Offset;
    
    public void SetMaximumGustAmount(float inNewMaxGust)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMaximumGustAmount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMaximumGustAmount_InNewMaxGust_Offset), 0, null, inNewMaxGust);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMaximumGustAmount_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
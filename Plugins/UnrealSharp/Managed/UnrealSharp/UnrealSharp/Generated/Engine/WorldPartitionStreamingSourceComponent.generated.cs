// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class WorldPartitionStreamingSourceComponent : UnrealSharp.Engine.ActorComponent
{
    
    static WorldPartitionStreamingSourceComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("WorldPartitionStreamingSourceComponent");
        
        TargetBehavior_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TargetBehavior");
        TargetGrids_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TargetGrids");
        TargetGrids_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "TargetGrids");
        TargetHLODLayers_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TargetHLODLayers");
        TargetHLODLayers_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "TargetHLODLayers");
        Shapes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Shapes");
        Shapes_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Shapes");
        Priority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Priority");
        
        IsStreamingSourceEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsStreamingSourceEnabled");
        IsStreamingSourceEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsStreamingSourceEnabled_NativeFunction);
        IsStreamingSourceEnabled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsStreamingSourceEnabled_NativeFunction, "ReturnValue");
        IsStreamingCompleted_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsStreamingCompleted");
        IsStreamingCompleted_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsStreamingCompleted_NativeFunction);
        IsStreamingCompleted_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsStreamingCompleted_NativeFunction, "ReturnValue");
        EnableStreamingSource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EnableStreamingSource");
        DisableStreamingSource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DisableStreamingSource");
        
        
    }
    
    protected WorldPartitionStreamingSourceComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // EnumProperty /Script/Engine.WorldPartitionStreamingSourceComponent:TargetBehavior
    static readonly int TargetBehavior_Offset;
    
    public UnrealSharp.Engine.EStreamingSourceTargetBehavior TargetBehavior
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EStreamingSourceTargetBehavior>.FromNative(IntPtr.Add(NativeObject, TargetBehavior_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EStreamingSourceTargetBehavior>.ToNative(IntPtr.Add(NativeObject, TargetBehavior_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/Engine.WorldPartitionStreamingSourceComponent:TargetGrids
    static readonly int TargetGrids_Offset;
    static readonly IntPtr TargetGrids_NativeProperty;
    UnrealArrayReadWriteMarshaler<Name> TargetGrids_Wrapper = null;
    
    public System.Collections.Generic.IList<Name> TargetGrids
    {
        get
        {
            if(TargetGrids_Wrapper == null)
            {
                TargetGrids_Wrapper = new UnrealArrayReadWriteMarshaler<Name>(1, TargetGrids_NativeProperty, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative);
            }
            
            return TargetGrids_Wrapper.FromNative(IntPtr.Add(NativeObject,TargetGrids_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/Engine.WorldPartitionStreamingSourceComponent:TargetHLODLayers
    static readonly int TargetHLODLayers_Offset;
    static readonly IntPtr TargetHLODLayers_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.HLODLayer> TargetHLODLayers_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.HLODLayer> TargetHLODLayers
    {
        get
        {
            if(TargetHLODLayers_Wrapper == null)
            {
                TargetHLODLayers_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.HLODLayer>(1, TargetHLODLayers_NativeProperty, ObjectMarshaller<UnrealSharp.Engine.HLODLayer>.ToNative, ObjectMarshaller<UnrealSharp.Engine.HLODLayer>.FromNative);
            }
            
            return TargetHLODLayers_Wrapper.FromNative(IntPtr.Add(NativeObject,TargetHLODLayers_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/Engine.WorldPartitionStreamingSourceComponent:Shapes
    static readonly int Shapes_Offset;
    static readonly IntPtr Shapes_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.StreamingSourceShape> Shapes_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.StreamingSourceShape> Shapes
    {
        get
        {
            if(Shapes_Wrapper == null)
            {
                Shapes_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.StreamingSourceShape>(1, Shapes_NativeProperty, UnrealSharp.Engine.StreamingSourceShapeMarshaler.ToNative, UnrealSharp.Engine.StreamingSourceShapeMarshaler.FromNative);
            }
            
            return Shapes_Wrapper.FromNative(IntPtr.Add(NativeObject,Shapes_Offset),0,this);
        }
    }
    
    // EnumProperty /Script/Engine.WorldPartitionStreamingSourceComponent:Priority
    static readonly int Priority_Offset;
    
    public UnrealSharp.Engine.EStreamingSourcePriority Priority
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EStreamingSourcePriority>.FromNative(IntPtr.Add(NativeObject, Priority_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.EStreamingSourcePriority>.ToNative(IntPtr.Add(NativeObject, Priority_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Engine.WorldPartitionStreamingSourceComponent:IsStreamingSourceEnabled
    static readonly IntPtr IsStreamingSourceEnabled_NativeFunction;
    static readonly int IsStreamingSourceEnabled_ParamsSize;
    static readonly int IsStreamingSourceEnabled_ReturnValue_Offset;
    
    public bool IsStreamingSourceEnabled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsStreamingSourceEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsStreamingSourceEnabled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsStreamingSourceEnabled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.WorldPartitionStreamingSourceComponent:IsStreamingCompleted
    static readonly IntPtr IsStreamingCompleted_NativeFunction;
    static readonly int IsStreamingCompleted_ParamsSize;
    static readonly int IsStreamingCompleted_ReturnValue_Offset;
    
    public bool IsStreamingCompleted()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsStreamingCompleted_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsStreamingCompleted_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsStreamingCompleted_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Engine.WorldPartitionStreamingSourceComponent:EnableStreamingSource
    static readonly IntPtr EnableStreamingSource_NativeFunction;
    
    public void EnableStreamingSource()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, EnableStreamingSource_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/Engine.WorldPartitionStreamingSourceComponent:DisableStreamingSource
    static readonly IntPtr DisableStreamingSource_NativeFunction;
    
    public void DisableStreamingSource()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DisableStreamingSource_NativeFunction, IntPtr.Zero);
        }
    }
    
    
}
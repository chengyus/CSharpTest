// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Engine;

[UClass]
public partial class WorldSettings : UnrealSharp.Engine.Info
{
    
    static WorldSettings()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("WorldSettings");
        
        bEnableWorldBoundsChecks_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableWorldBoundsChecks");
        bEnableWorldBoundsChecks_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableWorldBoundsChecks");
        bEnableNavigationSystem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableNavigationSystem");
        bEnableNavigationSystem_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableNavigationSystem");
        bEnableAISystem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableAISystem");
        bEnableAISystem_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableAISystem");
        bEnableWorldComposition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableWorldComposition");
        bEnableWorldComposition_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableWorldComposition");
        bUseClientSideLevelStreamingVolumes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseClientSideLevelStreamingVolumes");
        bUseClientSideLevelStreamingVolumes_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseClientSideLevelStreamingVolumes");
        bEnableWorldOriginRebasing_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableWorldOriginRebasing");
        bEnableWorldOriginRebasing_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEnableWorldOriginRebasing");
        bGlobalGravitySet_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bGlobalGravitySet");
        bGlobalGravitySet_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bGlobalGravitySet");
        NavigationSystemConfig_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NavigationSystemConfig");
        WorldToMeters_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WorldToMeters");
        KillZ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "KillZ");
        KillZDamageType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "KillZDamageType");
        GlobalGravityZ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "GlobalGravityZ");
        DefaultPhysicsVolumeClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultPhysicsVolumeClass");
        PhysicsCollisionHandlerClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PhysicsCollisionHandlerClass");
        DefaultGameMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultGameMode");
        DefaultColorScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultColorScale");
        LightmassSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LightmassSettings");
        
        
        
    }
    
    protected WorldSettings(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/Engine.WorldSettings:bEnableWorldBoundsChecks
    static readonly int bEnableWorldBoundsChecks_Offset;
    static readonly IntPtr bEnableWorldBoundsChecks_NativeProperty;
    
    public bool bEnableWorldBoundsChecks
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableWorldBoundsChecks_NativeProperty, bEnableWorldBoundsChecks_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.WorldSettings:bEnableNavigationSystem
    static readonly int bEnableNavigationSystem_Offset;
    static readonly IntPtr bEnableNavigationSystem_NativeProperty;
    
    public bool bEnableNavigationSystem
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableNavigationSystem_NativeProperty, bEnableNavigationSystem_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.WorldSettings:bEnableAISystem
    static readonly int bEnableAISystem_Offset;
    static readonly IntPtr bEnableAISystem_NativeProperty;
    
    public bool bEnableAISystem
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableAISystem_NativeProperty, bEnableAISystem_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.WorldSettings:bEnableWorldComposition
    static readonly int bEnableWorldComposition_Offset;
    static readonly IntPtr bEnableWorldComposition_NativeProperty;
    
    public bool bEnableWorldComposition
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableWorldComposition_NativeProperty, bEnableWorldComposition_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.WorldSettings:bUseClientSideLevelStreamingVolumes
    static readonly int bUseClientSideLevelStreamingVolumes_Offset;
    static readonly IntPtr bUseClientSideLevelStreamingVolumes_NativeProperty;
    
    public bool bUseClientSideLevelStreamingVolumes
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseClientSideLevelStreamingVolumes_NativeProperty, bUseClientSideLevelStreamingVolumes_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.WorldSettings:bEnableWorldOriginRebasing
    static readonly int bEnableWorldOriginRebasing_Offset;
    static readonly IntPtr bEnableWorldOriginRebasing_NativeProperty;
    
    public bool bEnableWorldOriginRebasing
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEnableWorldOriginRebasing_NativeProperty, bEnableWorldOriginRebasing_Offset);
        }
    }
    
    // BoolProperty /Script/Engine.WorldSettings:bGlobalGravitySet
    static readonly int bGlobalGravitySet_Offset;
    static readonly IntPtr bGlobalGravitySet_NativeProperty;
    
    public bool bGlobalGravitySet
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bGlobalGravitySet_NativeProperty, bGlobalGravitySet_Offset);
        }
    }
    
    // ObjectProperty /Script/Engine.WorldSettings:NavigationSystemConfig
    static readonly int NavigationSystemConfig_Offset;
    
    public UnrealSharp.Engine.NavigationSystemConfig NavigationSystemConfig
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.NavigationSystemConfig>.FromNative(IntPtr.Add(NativeObject, NavigationSystemConfig_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.WorldSettings:WorldToMeters
    static readonly int WorldToMeters_Offset;
    
    public float WorldToMeters
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, WorldToMeters_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.WorldSettings:KillZ
    static readonly int KillZ_Offset;
    
    public float KillZ
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, KillZ_Offset), 0, this);
        }
    }
    
    // ClassProperty /Script/Engine.WorldSettings:KillZDamageType
    static readonly int KillZDamageType_Offset;
    
    public SubclassOf<UnrealSharp.Engine.DamageType> KillZDamageType
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.Engine.DamageType>.FromNative(IntPtr.Add(NativeObject, KillZDamageType_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Engine.WorldSettings:GlobalGravityZ
    static readonly int GlobalGravityZ_Offset;
    
    public float GlobalGravityZ
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, GlobalGravityZ_Offset), 0, this);
        }
    }
    
    // ClassProperty /Script/Engine.WorldSettings:DefaultPhysicsVolumeClass
    static readonly int DefaultPhysicsVolumeClass_Offset;
    
    public SubclassOf<UnrealSharp.Engine.DefaultPhysicsVolume> DefaultPhysicsVolumeClass
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.Engine.DefaultPhysicsVolume>.FromNative(IntPtr.Add(NativeObject, DefaultPhysicsVolumeClass_Offset), 0, this);
        }
    }
    
    // ClassProperty /Script/Engine.WorldSettings:PhysicsCollisionHandlerClass
    static readonly int PhysicsCollisionHandlerClass_Offset;
    
    public SubclassOf<UnrealSharp.Engine.PhysicsCollisionHandler> PhysicsCollisionHandlerClass
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.Engine.PhysicsCollisionHandler>.FromNative(IntPtr.Add(NativeObject, PhysicsCollisionHandlerClass_Offset), 0, this);
        }
    }
    
    // ClassProperty /Script/Engine.WorldSettings:DefaultGameMode
    static readonly int DefaultGameMode_Offset;
    
    public SubclassOf<UnrealSharp.Engine.GameModeBase> DefaultGameMode
    {
        get
        {
            CheckObjectForValidity();
            return SubclassOfMarshaller<UnrealSharp.Engine.GameModeBase>.FromNative(IntPtr.Add(NativeObject, DefaultGameMode_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.WorldSettings:DefaultColorScale
    static readonly int DefaultColorScale_Offset;
    
    public System.DoubleNumerics.Vector3 DefaultColorScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, DefaultColorScale_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Engine.WorldSettings:LightmassSettings
    static readonly int LightmassSettings_Offset;
    
    public UnrealSharp.Engine.LightmassWorldInfoSettings LightmassSettings
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.LightmassWorldInfoSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, LightmassSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.Engine.LightmassWorldInfoSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, LightmassSettings_Offset), 0, this, value);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.EnhancedInput;

[UClass]
public partial class EnhancedPlayerMappableKeyProfile : UnrealSharp.CoreUObject.Object
{
    
    static EnhancedPlayerMappableKeyProfile()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("EnhancedPlayerMappableKeyProfile");
        
        ProfileIdentifier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ProfileIdentifier");
        OwningUserId_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OwningUserId");
        DisplayName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DisplayName");
        DisplayName_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "DisplayName");
        
        ToString_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ToString");
        ToString_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ToString_NativeFunction);
        ToString_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ToString_NativeFunction, "ReturnValue");
        ResetToDefault_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetToDefault");
        ResetMappingToDefault_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetMappingToDefault");
        ResetMappingToDefault_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ResetMappingToDefault_NativeFunction);
        ResetMappingToDefault_InMappingName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ResetMappingToDefault_NativeFunction, "InMappingName");
        QueryPlayerMappedKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "QueryPlayerMappedKeys");
        QueryPlayerMappedKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(QueryPlayerMappedKeys_NativeFunction);
        QueryPlayerMappedKeys_Options_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(QueryPlayerMappedKeys_NativeFunction, "Options");
        QueryPlayerMappedKeys_OutKeys_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(QueryPlayerMappedKeys_NativeFunction, "OutKeys");
        QueryPlayerMappedKeys_OutKeys_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(QueryPlayerMappedKeys_NativeFunction, "OutKeys");
        QueryPlayerMappedKeys_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(QueryPlayerMappedKeys_NativeFunction, "ReturnValue");
        K2_FindKeyMapping_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "K2_FindKeyMapping");
        K2_FindKeyMapping_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(K2_FindKeyMapping_NativeFunction);
        K2_FindKeyMapping_OutKeyMapping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_FindKeyMapping_NativeFunction, "OutKeyMapping");
        K2_FindKeyMapping_InArgs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(K2_FindKeyMapping_NativeFunction, "InArgs");
        GetProfileIdentifer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetProfileIdentifer");
        GetProfileIdentifer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetProfileIdentifer_NativeFunction);
        GetProfileIdentifer_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetProfileIdentifer_NativeFunction, "ReturnValue");
        GetMappingNamesForKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMappingNamesForKey");
        GetMappingNamesForKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMappingNamesForKey_NativeFunction);
        GetMappingNamesForKey_InKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMappingNamesForKey_NativeFunction, "InKey");
        GetMappingNamesForKey_OutMappingNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMappingNamesForKey_NativeFunction, "OutMappingNames");
        GetMappingNamesForKey_OutMappingNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetMappingNamesForKey_NativeFunction, "OutMappingNames");
        GetMappingNamesForKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMappingNamesForKey_NativeFunction, "ReturnValue");
        GetMappedKeysInRow_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMappedKeysInRow");
        GetMappedKeysInRow_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMappedKeysInRow_NativeFunction);
        GetMappedKeysInRow_MappingName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMappedKeysInRow_NativeFunction, "MappingName");
        GetMappedKeysInRow_OutKeys_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMappedKeysInRow_NativeFunction, "OutKeys");
        GetMappedKeysInRow_OutKeys_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetMappedKeysInRow_NativeFunction, "OutKeys");
        GetMappedKeysInRow_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMappedKeysInRow_NativeFunction, "ReturnValue");
        DumpProfileToLog_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DumpProfileToLog");
        DoesMappingPassQueryOptions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DoesMappingPassQueryOptions");
        DoesMappingPassQueryOptions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DoesMappingPassQueryOptions_NativeFunction);
        DoesMappingPassQueryOptions_PlayerMapping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesMappingPassQueryOptions_NativeFunction, "PlayerMapping");
        DoesMappingPassQueryOptions_Options_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesMappingPassQueryOptions_NativeFunction, "Options");
        DoesMappingPassQueryOptions_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesMappingPassQueryOptions_NativeFunction, "ReturnValue");
        
        
    }
    
    protected EnhancedPlayerMappableKeyProfile(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/EnhancedInput.EnhancedPlayerMappableKeyProfile:ProfileIdentifier
    static readonly int ProfileIdentifier_Offset;
    
    public UnrealSharp.GameplayTags.GameplayTag ProfileIdentifier
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.GameplayTags.GameplayTagMarshaler.FromNative(IntPtr.Add(NativeObject, ProfileIdentifier_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/EnhancedInput.EnhancedPlayerMappableKeyProfile:OwningUserId
    static readonly int OwningUserId_Offset;
    
    public UnrealSharp.CoreUObject.PlatformUserId OwningUserId
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.CoreUObject.PlatformUserIdMarshaler.FromNative(IntPtr.Add(NativeObject, OwningUserId_Offset), 0, this);
        }
    }
    
    // TextProperty /Script/EnhancedInput.EnhancedPlayerMappableKeyProfile:DisplayName
    static readonly int DisplayName_Offset;
    static readonly IntPtr DisplayName_NativeProperty;
    TextMarshaller DisplayName_Wrapper;
    
    public Text DisplayName
    {
        get
        {
            if (DisplayName_Wrapper == null)
            {
                DisplayName_Wrapper  = new TextMarshaller(1);
            }
            return DisplayName_Wrapper.FromNative(this.NativeObject + DisplayName_Offset, 0, this);
        }
    }
    
    // Function /Script/EnhancedInput.EnhancedPlayerMappableKeyProfile:ToString
    static readonly IntPtr ToString_NativeFunction;
    static readonly int ToString_ParamsSize;
    static readonly int ToString_ReturnValue_Offset;
    
    public string ToString()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ToString_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ToString_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,ToString_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/EnhancedInput.EnhancedPlayerMappableKeyProfile:ResetToDefault
    static readonly IntPtr ResetToDefault_NativeFunction;
    
    public void ResetToDefault()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetToDefault_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/EnhancedInput.EnhancedPlayerMappableKeyProfile:ResetMappingToDefault
    static readonly IntPtr ResetMappingToDefault_NativeFunction;
    static readonly int ResetMappingToDefault_ParamsSize;
    static readonly int ResetMappingToDefault_InMappingName_Offset;
    
    public void ResetMappingToDefault(Name inMappingName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ResetMappingToDefault_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, ResetMappingToDefault_InMappingName_Offset), 0, null, inMappingName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetMappingToDefault_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/EnhancedInput.EnhancedPlayerMappableKeyProfile:QueryPlayerMappedKeys
    static readonly IntPtr QueryPlayerMappedKeys_NativeFunction;
    static readonly int QueryPlayerMappedKeys_ParamsSize;
    static readonly int QueryPlayerMappedKeys_Options_Offset;
    static readonly int QueryPlayerMappedKeys_OutKeys_Offset;
    static readonly int QueryPlayerMappedKeys_OutKeys_ElementSize;
    static readonly int QueryPlayerMappedKeys_ReturnValue_Offset;
    
    public int QueryPlayerMappedKeys(UnrealSharp.EnhancedInput.PlayerMappableKeyQueryOptions options, out System.Collections.Generic.IList<UnrealSharp.InputCore.Key> outKeys)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[QueryPlayerMappedKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.EnhancedInput.PlayerMappableKeyQueryOptionsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, QueryPlayerMappedKeys_Options_Offset), 0, null, options);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, QueryPlayerMappedKeys_NativeFunction, ParamsBuffer);
            
            IntPtr OutKeys_NativeBuffer = IntPtr.Add(ParamsBuffer, QueryPlayerMappedKeys_OutKeys_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.InputCore.Key> OutKeys_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.InputCore.Key> (1, UnrealSharp.InputCore.KeyMarshaler.ToNative, UnrealSharp.InputCore.KeyMarshaler.FromNative, QueryPlayerMappedKeys_OutKeys_ElementSize);
            outKeys = OutKeys_Marshaler.FromNative(OutKeys_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.InputCore.Key>.DestructInstance(OutKeys_NativeBuffer, 0);
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, QueryPlayerMappedKeys_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/EnhancedInput.EnhancedPlayerMappableKeyProfile:K2_FindKeyMapping
    static readonly IntPtr K2_FindKeyMapping_NativeFunction;
    static readonly int K2_FindKeyMapping_ParamsSize;
    static readonly int K2_FindKeyMapping_OutKeyMapping_Offset;
    static readonly int K2_FindKeyMapping_InArgs_Offset;
    
    public void K2_FindKeyMapping(out UnrealSharp.EnhancedInput.PlayerKeyMapping outKeyMapping, UnrealSharp.EnhancedInput.MapPlayerKeyArgs inArgs)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[K2_FindKeyMapping_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.EnhancedInput.MapPlayerKeyArgsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, K2_FindKeyMapping_InArgs_Offset), 0, null, inArgs);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, K2_FindKeyMapping_NativeFunction, ParamsBuffer);
            
            outKeyMapping = UnrealSharp.EnhancedInput.PlayerKeyMappingMarshaler.FromNative(IntPtr.Add(ParamsBuffer, K2_FindKeyMapping_OutKeyMapping_Offset), 0, null);
            
        }
    }
    
    // Function /Script/EnhancedInput.EnhancedPlayerMappableKeyProfile:GetProfileIdentifer
    static readonly IntPtr GetProfileIdentifer_NativeFunction;
    static readonly int GetProfileIdentifer_ParamsSize;
    static readonly int GetProfileIdentifer_ReturnValue_Offset;
    
    public UnrealSharp.GameplayTags.GameplayTag GetProfileIdentifer()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetProfileIdentifer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetProfileIdentifer_NativeFunction, ParamsBuffer);
            
            UnrealSharp.GameplayTags.GameplayTag returnValue;
            returnValue = UnrealSharp.GameplayTags.GameplayTagMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetProfileIdentifer_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/EnhancedInput.EnhancedPlayerMappableKeyProfile:GetMappingNamesForKey
    static readonly IntPtr GetMappingNamesForKey_NativeFunction;
    static readonly int GetMappingNamesForKey_ParamsSize;
    static readonly int GetMappingNamesForKey_InKey_Offset;
    static readonly int GetMappingNamesForKey_OutMappingNames_Offset;
    static readonly int GetMappingNamesForKey_OutMappingNames_ElementSize;
    static readonly int GetMappingNamesForKey_ReturnValue_Offset;
    
    public int GetMappingNamesForKey(UnrealSharp.InputCore.Key inKey, out System.Collections.Generic.IList<Name> outMappingNames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMappingNamesForKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.InputCore.KeyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetMappingNamesForKey_InKey_Offset), 0, null, inKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMappingNamesForKey_NativeFunction, ParamsBuffer);
            
            IntPtr OutMappingNames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetMappingNamesForKey_OutMappingNames_Offset);
            UnrealArrayCopyMarshaler<Name> OutMappingNames_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetMappingNamesForKey_OutMappingNames_ElementSize);
            outMappingNames = OutMappingNames_Marshaler.FromNative(OutMappingNames_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(OutMappingNames_NativeBuffer, 0);
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetMappingNamesForKey_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/EnhancedInput.EnhancedPlayerMappableKeyProfile:GetMappedKeysInRow
    static readonly IntPtr GetMappedKeysInRow_NativeFunction;
    static readonly int GetMappedKeysInRow_ParamsSize;
    static readonly int GetMappedKeysInRow_MappingName_Offset;
    static readonly int GetMappedKeysInRow_OutKeys_Offset;
    static readonly int GetMappedKeysInRow_OutKeys_ElementSize;
    static readonly int GetMappedKeysInRow_ReturnValue_Offset;
    
    public int GetMappedKeysInRow(Name mappingName, out System.Collections.Generic.IList<UnrealSharp.InputCore.Key> outKeys)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMappedKeysInRow_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetMappedKeysInRow_MappingName_Offset), 0, null, mappingName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMappedKeysInRow_NativeFunction, ParamsBuffer);
            
            IntPtr OutKeys_NativeBuffer = IntPtr.Add(ParamsBuffer, GetMappedKeysInRow_OutKeys_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.InputCore.Key> OutKeys_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.InputCore.Key> (1, UnrealSharp.InputCore.KeyMarshaler.ToNative, UnrealSharp.InputCore.KeyMarshaler.FromNative, GetMappedKeysInRow_OutKeys_ElementSize);
            outKeys = OutKeys_Marshaler.FromNative(OutKeys_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.InputCore.Key>.DestructInstance(OutKeys_NativeBuffer, 0);
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetMappedKeysInRow_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/EnhancedInput.EnhancedPlayerMappableKeyProfile:DumpProfileToLog
    static readonly IntPtr DumpProfileToLog_NativeFunction;
    
    public void DumpProfileToLog()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DumpProfileToLog_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/EnhancedInput.EnhancedPlayerMappableKeyProfile:DoesMappingPassQueryOptions
    static readonly IntPtr DoesMappingPassQueryOptions_NativeFunction;
    static readonly int DoesMappingPassQueryOptions_ParamsSize;
    static readonly int DoesMappingPassQueryOptions_PlayerMapping_Offset;
    static readonly int DoesMappingPassQueryOptions_Options_Offset;
    static readonly int DoesMappingPassQueryOptions_ReturnValue_Offset;
    
    public bool DoesMappingPassQueryOptions(UnrealSharp.EnhancedInput.PlayerKeyMapping playerMapping, UnrealSharp.EnhancedInput.PlayerMappableKeyQueryOptions options)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DoesMappingPassQueryOptions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.EnhancedInput.PlayerKeyMappingMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DoesMappingPassQueryOptions_PlayerMapping_Offset), 0, null, playerMapping);
            UnrealSharp.EnhancedInput.PlayerMappableKeyQueryOptionsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, DoesMappingPassQueryOptions_Options_Offset), 0, null, options);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DoesMappingPassQueryOptions_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DoesMappingPassQueryOptions_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
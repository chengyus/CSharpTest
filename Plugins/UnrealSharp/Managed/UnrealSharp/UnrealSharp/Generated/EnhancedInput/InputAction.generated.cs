// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.EnhancedInput;

[UClass]
public partial class InputAction : UnrealSharp.Engine.DataAsset
{
    
    static InputAction()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InputAction");
        
        ActionDescription_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ActionDescription");
        ActionDescription_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "ActionDescription");
        bTriggerWhenPaused_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bTriggerWhenPaused");
        bConsumeInput_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bConsumeInput");
        bConsumesActionAndAxisMappings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bConsumesActionAndAxisMappings");
        bReserveAllMappings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bReserveAllMappings");
        TriggerEventsThatConsumeLegacyKeys_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TriggerEventsThatConsumeLegacyKeys");
        ValueType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ValueType");
        AccumulationBehavior_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AccumulationBehavior");
        Triggers_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Triggers");
        Triggers_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Triggers");
        Modifiers_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Modifiers");
        Modifiers_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Modifiers");
        PlayerMappableKeySettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PlayerMappableKeySettings");
        
        
        
    }
    
    protected InputAction(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // TextProperty /Script/EnhancedInput.InputAction:ActionDescription
    static readonly int ActionDescription_Offset;
    static readonly IntPtr ActionDescription_NativeProperty;
    TextMarshaller ActionDescription_Wrapper;
    
    public Text ActionDescription
    {
        get
        {
            if (ActionDescription_Wrapper == null)
            {
                ActionDescription_Wrapper  = new TextMarshaller(1);
            }
            return ActionDescription_Wrapper.FromNative(this.NativeObject + ActionDescription_Offset, 0, this);
        }
    }
    
    // BoolProperty /Script/EnhancedInput.InputAction:bTriggerWhenPaused
    static readonly int bTriggerWhenPaused_Offset;
    
    public bool bTriggerWhenPaused
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bTriggerWhenPaused_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/EnhancedInput.InputAction:bConsumeInput
    static readonly int bConsumeInput_Offset;
    
    public bool bConsumeInput
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bConsumeInput_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bConsumeInput_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/EnhancedInput.InputAction:bConsumesActionAndAxisMappings
    static readonly int bConsumesActionAndAxisMappings_Offset;
    
    public bool bConsumesActionAndAxisMappings
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bConsumesActionAndAxisMappings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bConsumesActionAndAxisMappings_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/EnhancedInput.InputAction:bReserveAllMappings
    static readonly int bReserveAllMappings_Offset;
    
    public bool bReserveAllMappings
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bReserveAllMappings_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/EnhancedInput.InputAction:TriggerEventsThatConsumeLegacyKeys
    static readonly int TriggerEventsThatConsumeLegacyKeys_Offset;
    
    public int TriggerEventsThatConsumeLegacyKeys
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, TriggerEventsThatConsumeLegacyKeys_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, TriggerEventsThatConsumeLegacyKeys_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/EnhancedInput.InputAction:ValueType
    static readonly int ValueType_Offset;
    
    public UnrealSharp.EnhancedInput.EInputActionValueType ValueType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.EnhancedInput.EInputActionValueType>.FromNative(IntPtr.Add(NativeObject, ValueType_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/EnhancedInput.InputAction:AccumulationBehavior
    static readonly int AccumulationBehavior_Offset;
    
    public UnrealSharp.EnhancedInput.EInputActionAccumulationBehavior AccumulationBehavior
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.EnhancedInput.EInputActionAccumulationBehavior>.FromNative(IntPtr.Add(NativeObject, AccumulationBehavior_Offset), 0, this);
        }
    }
    
    // ArrayProperty /Script/EnhancedInput.InputAction:Triggers
    static readonly int Triggers_Offset;
    static readonly IntPtr Triggers_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.EnhancedInput.InputTrigger> Triggers_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.EnhancedInput.InputTrigger> Triggers
    {
        get
        {
            if(Triggers_Wrapper == null)
            {
                Triggers_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.EnhancedInput.InputTrigger>(1, Triggers_NativeProperty, ObjectMarshaller<UnrealSharp.EnhancedInput.InputTrigger>.ToNative, ObjectMarshaller<UnrealSharp.EnhancedInput.InputTrigger>.FromNative);
            }
            
            return Triggers_Wrapper.FromNative(IntPtr.Add(NativeObject,Triggers_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/EnhancedInput.InputAction:Modifiers
    static readonly int Modifiers_Offset;
    static readonly IntPtr Modifiers_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.EnhancedInput.InputModifier> Modifiers_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.EnhancedInput.InputModifier> Modifiers
    {
        get
        {
            if(Modifiers_Wrapper == null)
            {
                Modifiers_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.EnhancedInput.InputModifier>(1, Modifiers_NativeProperty, ObjectMarshaller<UnrealSharp.EnhancedInput.InputModifier>.ToNative, ObjectMarshaller<UnrealSharp.EnhancedInput.InputModifier>.FromNative);
            }
            
            return Modifiers_Wrapper.FromNative(IntPtr.Add(NativeObject,Modifiers_Offset),0,this);
        }
    }
    
    // ObjectProperty /Script/EnhancedInput.InputAction:PlayerMappableKeySettings
    static readonly int PlayerMappableKeySettings_Offset;
    
    public UnrealSharp.EnhancedInput.PlayerMappableKeySettings PlayerMappableKeySettings
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.EnhancedInput.PlayerMappableKeySettings>.FromNative(IntPtr.Add(NativeObject, PlayerMappableKeySettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.EnhancedInput.PlayerMappableKeySettings>.ToNative(IntPtr.Add(NativeObject, PlayerMappableKeySettings_Offset), 0, this, value);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.EnhancedInput;

[UClass]
abstract public partial class InputModifier : UnrealSharp.CoreUObject.Object
{
    
    static InputModifier()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InputModifier");
        
        
        
        IntPtr ModifyRaw_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ModifyRaw");
        ModifyRaw_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ModifyRaw_NativeFunction);
        ModifyRaw_PlayerInput_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ModifyRaw_NativeFunction, "PlayerInput");
        ModifyRaw_CurrentValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ModifyRaw_NativeFunction, "CurrentValue");
        ModifyRaw_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ModifyRaw_NativeFunction, "DeltaTime");
        ModifyRaw_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ModifyRaw_NativeFunction, "ReturnValue");
        
        IntPtr GetVisualizationColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVisualizationColor");
        GetVisualizationColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVisualizationColor_NativeFunction);
        GetVisualizationColor_SampleValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVisualizationColor_NativeFunction, "SampleValue");
        GetVisualizationColor_FinalValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVisualizationColor_NativeFunction, "FinalValue");
        GetVisualizationColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVisualizationColor_NativeFunction, "ReturnValue");
        
        
    }
    
    protected InputModifier(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/EnhancedInput.InputModifier:ModifyRaw
    IntPtr ModifyRaw_NativeFunction;
    static readonly int ModifyRaw_ParamsSize;
    static readonly int ModifyRaw_PlayerInput_Offset;
    static readonly int ModifyRaw_CurrentValue_Offset;
    static readonly int ModifyRaw_DeltaTime_Offset;
    static readonly int ModifyRaw_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.EnhancedInput.InputActionValue ModifyRaw(UnrealSharp.EnhancedInput.EnhancedPlayerInput playerInput, UnrealSharp.EnhancedInput.InputActionValue currentValue, float deltaTime)
    {
        unsafe
        {
            if (ModifyRaw_NativeFunction == IntPtr.Zero)
            {
                ModifyRaw_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ModifyRaw");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ModifyRaw_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.EnhancedInput.EnhancedPlayerInput>.ToNative(IntPtr.Add(ParamsBuffer, ModifyRaw_PlayerInput_Offset), 0, null, playerInput);
            UnrealSharp.EnhancedInput.InputActionValueMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ModifyRaw_CurrentValue_Offset), 0, null, currentValue);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ModifyRaw_DeltaTime_Offset), 0, null, deltaTime);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ModifyRaw_NativeFunction, ParamsBuffer);
            
            UnrealSharp.EnhancedInput.InputActionValue returnValue;
            returnValue = UnrealSharp.EnhancedInput.InputActionValueMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ModifyRaw_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.EnhancedInput.InputActionValue ModifyRaw_Implementation(UnrealSharp.EnhancedInput.EnhancedPlayerInput playerInput, UnrealSharp.EnhancedInput.InputActionValue currentValue, float deltaTime)
    {
        return default(UnrealSharp.EnhancedInput.InputActionValue);
    }
    void Invoke_ModifyRaw(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.EnhancedInput.EnhancedPlayerInput playerInput = ObjectMarshaller<UnrealSharp.EnhancedInput.EnhancedPlayerInput>.FromNative(IntPtr.Add(buffer, ModifyRaw_PlayerInput_Offset), 0, null);
            UnrealSharp.EnhancedInput.InputActionValue currentValue = UnrealSharp.EnhancedInput.InputActionValueMarshaler.FromNative(IntPtr.Add(buffer, ModifyRaw_CurrentValue_Offset), 0, null);
            float deltaTime = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, ModifyRaw_DeltaTime_Offset), 0, null);
            UnrealSharp.EnhancedInput.InputActionValue returnValue = ModifyRaw_Implementation(playerInput, currentValue, deltaTime);
            UnrealSharp.EnhancedInput.InputActionValueMarshaler.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/EnhancedInput.InputModifier:GetVisualizationColor
    IntPtr GetVisualizationColor_NativeFunction;
    static readonly int GetVisualizationColor_ParamsSize;
    static readonly int GetVisualizationColor_SampleValue_Offset;
    static readonly int GetVisualizationColor_FinalValue_Offset;
    static readonly int GetVisualizationColor_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.CoreUObject.LinearColor GetVisualizationColor(UnrealSharp.EnhancedInput.InputActionValue sampleValue, UnrealSharp.EnhancedInput.InputActionValue finalValue)
    {
        unsafe
        {
            if (GetVisualizationColor_NativeFunction == IntPtr.Zero)
            {
                GetVisualizationColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "GetVisualizationColor");
            }
            byte* ParamsBufferAllocation = stackalloc byte[GetVisualizationColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.EnhancedInput.InputActionValueMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetVisualizationColor_SampleValue_Offset), 0, null, sampleValue);
            UnrealSharp.EnhancedInput.InputActionValueMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetVisualizationColor_FinalValue_Offset), 0, null, finalValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVisualizationColor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, GetVisualizationColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.CoreUObject.LinearColor GetVisualizationColor_Implementation(UnrealSharp.EnhancedInput.InputActionValue sampleValue, UnrealSharp.EnhancedInput.InputActionValue finalValue)
    {
        return default(UnrealSharp.CoreUObject.LinearColor);
    }
    void Invoke_GetVisualizationColor(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.EnhancedInput.InputActionValue sampleValue = UnrealSharp.EnhancedInput.InputActionValueMarshaler.FromNative(IntPtr.Add(buffer, GetVisualizationColor_SampleValue_Offset), 0, null);
            UnrealSharp.EnhancedInput.InputActionValue finalValue = UnrealSharp.EnhancedInput.InputActionValueMarshaler.FromNative(IntPtr.Add(buffer, GetVisualizationColor_FinalValue_Offset), 0, null);
            UnrealSharp.CoreUObject.LinearColor returnValue = GetVisualizationColor_Implementation(sampleValue, finalValue);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    
}
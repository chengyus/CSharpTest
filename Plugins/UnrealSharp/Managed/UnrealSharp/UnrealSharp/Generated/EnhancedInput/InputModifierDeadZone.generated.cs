// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.EnhancedInput;

[UClass]
public partial class InputModifierDeadZone : UnrealSharp.EnhancedInput.InputModifier
{
    
    static InputModifierDeadZone()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InputModifierDeadZone");
        
        LowerThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LowerThreshold");
        UpperThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "UpperThreshold");
        Type_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Type");
        
        
        
    }
    
    protected InputModifierDeadZone(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/EnhancedInput.InputModifierDeadZone:LowerThreshold
    static readonly int LowerThreshold_Offset;
    
    public float LowerThreshold
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LowerThreshold_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, LowerThreshold_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/EnhancedInput.InputModifierDeadZone:UpperThreshold
    static readonly int UpperThreshold_Offset;
    
    public float UpperThreshold
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, UpperThreshold_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, UpperThreshold_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/EnhancedInput.InputModifierDeadZone:Type
    static readonly int Type_Offset;
    
    public UnrealSharp.EnhancedInput.EDeadZoneType Type
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.EnhancedInput.EDeadZoneType>.FromNative(IntPtr.Add(NativeObject, Type_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.EnhancedInput.EDeadZoneType>.ToNative(IntPtr.Add(NativeObject, Type_Offset), 0, this, value);
        }
    }
    
    
}
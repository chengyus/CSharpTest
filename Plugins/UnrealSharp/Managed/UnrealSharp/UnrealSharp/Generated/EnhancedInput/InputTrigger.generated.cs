// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.EnhancedInput;

[UClass]
abstract public partial class InputTrigger : UnrealSharp.CoreUObject.Object
{
    
    static InputTrigger()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InputTrigger");
        
        ActuationThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ActuationThreshold");
        bShouldAlwaysTick_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bShouldAlwaysTick");
        LastValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LastValue");
        
        IsActuated_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsActuated");
        IsActuated_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsActuated_NativeFunction);
        IsActuated_ForValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsActuated_NativeFunction, "ForValue");
        IsActuated_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsActuated_NativeFunction, "ReturnValue");
        
        IntPtr UpdateState_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UpdateState");
        UpdateState_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UpdateState_NativeFunction);
        UpdateState_PlayerInput_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateState_NativeFunction, "PlayerInput");
        UpdateState_ModifiedValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateState_NativeFunction, "ModifiedValue");
        UpdateState_DeltaTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateState_NativeFunction, "DeltaTime");
        UpdateState_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateState_NativeFunction, "ReturnValue");
        
        IntPtr GetTriggerType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTriggerType");
        GetTriggerType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTriggerType_NativeFunction);
        GetTriggerType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTriggerType_NativeFunction, "ReturnValue");
        
        
    }
    
    protected InputTrigger(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/EnhancedInput.InputTrigger:ActuationThreshold
    static readonly int ActuationThreshold_Offset;
    
    public float ActuationThreshold
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ActuationThreshold_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ActuationThreshold_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/EnhancedInput.InputTrigger:bShouldAlwaysTick
    static readonly int bShouldAlwaysTick_Offset;
    
    public bool bShouldAlwaysTick
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bShouldAlwaysTick_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/EnhancedInput.InputTrigger:LastValue
    static readonly int LastValue_Offset;
    
    public UnrealSharp.EnhancedInput.InputActionValue LastValue
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.EnhancedInput.InputActionValueMarshaler.FromNative(IntPtr.Add(NativeObject, LastValue_Offset), 0, this);
        }
    }
    
    // Function /Script/EnhancedInput.InputTrigger:IsActuated
    static readonly IntPtr IsActuated_NativeFunction;
    static readonly int IsActuated_ParamsSize;
    static readonly int IsActuated_ForValue_Offset;
    static readonly int IsActuated_ReturnValue_Offset;
    
    public bool IsActuated(UnrealSharp.EnhancedInput.InputActionValue forValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsActuated_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.EnhancedInput.InputActionValueMarshaler.ToNative(IntPtr.Add(ParamsBuffer, IsActuated_ForValue_Offset), 0, null, forValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsActuated_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsActuated_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/EnhancedInput.InputTrigger:UpdateState
    IntPtr UpdateState_NativeFunction;
    static readonly int UpdateState_ParamsSize;
    static readonly int UpdateState_PlayerInput_Offset;
    static readonly int UpdateState_ModifiedValue_Offset;
    static readonly int UpdateState_DeltaTime_Offset;
    static readonly int UpdateState_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.EnhancedInput.ETriggerState UpdateState(UnrealSharp.EnhancedInput.EnhancedPlayerInput playerInput, UnrealSharp.EnhancedInput.InputActionValue modifiedValue, float deltaTime)
    {
        unsafe
        {
            if (UpdateState_NativeFunction == IntPtr.Zero)
            {
                UpdateState_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "UpdateState");
            }
            byte* ParamsBufferAllocation = stackalloc byte[UpdateState_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.EnhancedInput.EnhancedPlayerInput>.ToNative(IntPtr.Add(ParamsBuffer, UpdateState_PlayerInput_Offset), 0, null, playerInput);
            UnrealSharp.EnhancedInput.InputActionValueMarshaler.ToNative(IntPtr.Add(ParamsBuffer, UpdateState_ModifiedValue_Offset), 0, null, modifiedValue);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, UpdateState_DeltaTime_Offset), 0, null, deltaTime);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UpdateState_NativeFunction, ParamsBuffer);
            
            UnrealSharp.EnhancedInput.ETriggerState returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.EnhancedInput.ETriggerState>.FromNative(IntPtr.Add(ParamsBuffer, UpdateState_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.EnhancedInput.ETriggerState UpdateState_Implementation(UnrealSharp.EnhancedInput.EnhancedPlayerInput playerInput, UnrealSharp.EnhancedInput.InputActionValue modifiedValue, float deltaTime)
    {
        return default(UnrealSharp.EnhancedInput.ETriggerState);
    }
    void Invoke_UpdateState(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.EnhancedInput.EnhancedPlayerInput playerInput = ObjectMarshaller<UnrealSharp.EnhancedInput.EnhancedPlayerInput>.FromNative(IntPtr.Add(buffer, UpdateState_PlayerInput_Offset), 0, null);
            UnrealSharp.EnhancedInput.InputActionValue modifiedValue = UnrealSharp.EnhancedInput.InputActionValueMarshaler.FromNative(IntPtr.Add(buffer, UpdateState_ModifiedValue_Offset), 0, null);
            float deltaTime = BlittableMarshaller<float>.FromNative(IntPtr.Add(buffer, UpdateState_DeltaTime_Offset), 0, null);
            UnrealSharp.EnhancedInput.ETriggerState returnValue = UpdateState_Implementation(playerInput, modifiedValue, deltaTime);
            BlittableMarshaller<UnrealSharp.EnhancedInput.ETriggerState>.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/EnhancedInput.InputTrigger:GetTriggerType
    IntPtr GetTriggerType_NativeFunction;
    static readonly int GetTriggerType_ParamsSize;
    static readonly int GetTriggerType_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.EnhancedInput.ETriggerType GetTriggerType()
    {
        unsafe
        {
            if (GetTriggerType_NativeFunction == IntPtr.Zero)
            {
                GetTriggerType_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "GetTriggerType");
            }
            byte* ParamsBufferAllocation = stackalloc byte[GetTriggerType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTriggerType_NativeFunction, ParamsBuffer);
            
            UnrealSharp.EnhancedInput.ETriggerType returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.EnhancedInput.ETriggerType>.FromNative(IntPtr.Add(ParamsBuffer, GetTriggerType_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.EnhancedInput.ETriggerType GetTriggerType_Implementation()
    {
        return default(UnrealSharp.EnhancedInput.ETriggerType);
    }
    void Invoke_GetTriggerType(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.EnhancedInput.ETriggerType returnValue = GetTriggerType_Implementation();
            BlittableMarshaller<UnrealSharp.EnhancedInput.ETriggerType>.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.EnhancedInput;

[UClass]
public partial class InputTriggerPulse : UnrealSharp.EnhancedInput.InputTriggerTimedBase
{
    
    static InputTriggerPulse()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InputTriggerPulse");
        
        bTriggerOnStart_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bTriggerOnStart");
        Interval_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Interval");
        TriggerLimit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TriggerLimit");
        
        
        
    }
    
    protected InputTriggerPulse(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/EnhancedInput.InputTriggerPulse:bTriggerOnStart
    static readonly int bTriggerOnStart_Offset;
    
    public bool bTriggerOnStart
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bTriggerOnStart_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bTriggerOnStart_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/EnhancedInput.InputTriggerPulse:Interval
    static readonly int Interval_Offset;
    
    public float Interval
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Interval_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Interval_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/EnhancedInput.InputTriggerPulse:TriggerLimit
    static readonly int TriggerLimit_Offset;
    
    public int TriggerLimit
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, TriggerLimit_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, TriggerLimit_Offset), 0, this, value);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.EnhancedInput;

[UClass]
public partial class PlayerMappableInputConfig : UnrealSharp.Engine.PrimaryDataAsset
{
    
    static PlayerMappableInputConfig()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PlayerMappableInputConfig");
        
        ConfigName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ConfigName");
        ConfigDisplayName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ConfigDisplayName");
        ConfigDisplayName_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "ConfigDisplayName");
        bIsDeprecated_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsDeprecated");
        Metadata_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Metadata");
        
        ResetToDefault_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetToDefault");
        IsDeprecated_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsDeprecated");
        IsDeprecated_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsDeprecated_NativeFunction);
        IsDeprecated_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsDeprecated_NativeFunction, "ReturnValue");
        GetPlayerMappableKeys_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayerMappableKeys");
        GetPlayerMappableKeys_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayerMappableKeys_NativeFunction);
        GetPlayerMappableKeys_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerMappableKeys_NativeFunction, "ReturnValue");
        GetPlayerMappableKeys_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetPlayerMappableKeys_NativeFunction, "ReturnValue");
        GetMetadata_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMetadata");
        GetMetadata_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMetadata_NativeFunction);
        GetMetadata_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMetadata_NativeFunction, "ReturnValue");
        GetMappingByName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMappingByName");
        GetMappingByName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMappingByName_NativeFunction);
        GetMappingByName_MappingName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMappingByName_NativeFunction, "MappingName");
        GetMappingByName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMappingByName_NativeFunction, "ReturnValue");
        GetKeysBoundToAction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetKeysBoundToAction");
        GetKeysBoundToAction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetKeysBoundToAction_NativeFunction);
        GetKeysBoundToAction_InAction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetKeysBoundToAction_NativeFunction, "InAction");
        GetKeysBoundToAction_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetKeysBoundToAction_NativeFunction, "ReturnValue");
        GetKeysBoundToAction_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetKeysBoundToAction_NativeFunction, "ReturnValue");
        GetConfigName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetConfigName");
        GetConfigName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetConfigName_NativeFunction);
        GetConfigName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetConfigName_NativeFunction, "ReturnValue");
        
        
    }
    
    protected PlayerMappableInputConfig(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // NameProperty /Script/EnhancedInput.PlayerMappableInputConfig:ConfigName
    static readonly int ConfigName_Offset;
    
    public Name ConfigName
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, ConfigName_Offset), 0, this);
        }
    }
    
    // TextProperty /Script/EnhancedInput.PlayerMappableInputConfig:ConfigDisplayName
    static readonly int ConfigDisplayName_Offset;
    static readonly IntPtr ConfigDisplayName_NativeProperty;
    TextMarshaller ConfigDisplayName_Wrapper;
    
    public Text ConfigDisplayName
    {
        get
        {
            if (ConfigDisplayName_Wrapper == null)
            {
                ConfigDisplayName_Wrapper  = new TextMarshaller(1);
            }
            return ConfigDisplayName_Wrapper.FromNative(this.NativeObject + ConfigDisplayName_Offset, 0, this);
        }
    }
    
    // BoolProperty /Script/EnhancedInput.PlayerMappableInputConfig:bIsDeprecated
    static readonly int bIsDeprecated_Offset;
    
    public bool bIsDeprecated
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bIsDeprecated_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/EnhancedInput.PlayerMappableInputConfig:Metadata
    static readonly int Metadata_Offset;
    
    public UnrealSharp.CoreUObject.Object Metadata
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(NativeObject, Metadata_Offset), 0, this);
        }
    }
    
    // Function /Script/EnhancedInput.PlayerMappableInputConfig:ResetToDefault
    static readonly IntPtr ResetToDefault_NativeFunction;
    
    public void ResetToDefault()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetToDefault_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/EnhancedInput.PlayerMappableInputConfig:IsDeprecated
    static readonly IntPtr IsDeprecated_NativeFunction;
    static readonly int IsDeprecated_ParamsSize;
    static readonly int IsDeprecated_ReturnValue_Offset;
    
    public bool IsDeprecated()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsDeprecated_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsDeprecated_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsDeprecated_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/EnhancedInput.PlayerMappableInputConfig:GetPlayerMappableKeys
    static readonly IntPtr GetPlayerMappableKeys_NativeFunction;
    static readonly int GetPlayerMappableKeys_ParamsSize;
    static readonly int GetPlayerMappableKeys_ReturnValue_Offset;
    static readonly int GetPlayerMappableKeys_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.EnhancedInput.EnhancedActionKeyMapping> GetPlayerMappableKeys()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayerMappableKeys_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPlayerMappableKeys_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.EnhancedInput.EnhancedActionKeyMapping> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetPlayerMappableKeys_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.EnhancedInput.EnhancedActionKeyMapping> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.EnhancedInput.EnhancedActionKeyMapping> (1, UnrealSharp.EnhancedInput.EnhancedActionKeyMappingMarshaler.ToNative, UnrealSharp.EnhancedInput.EnhancedActionKeyMappingMarshaler.FromNative, GetPlayerMappableKeys_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.EnhancedInput.EnhancedActionKeyMapping>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/EnhancedInput.PlayerMappableInputConfig:GetMetadata
    static readonly IntPtr GetMetadata_NativeFunction;
    static readonly int GetMetadata_ParamsSize;
    static readonly int GetMetadata_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.Object GetMetadata()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMetadata_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMetadata_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Object returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetMetadata_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/EnhancedInput.PlayerMappableInputConfig:GetMappingByName
    static readonly IntPtr GetMappingByName_NativeFunction;
    static readonly int GetMappingByName_ParamsSize;
    static readonly int GetMappingByName_MappingName_Offset;
    static readonly int GetMappingByName_ReturnValue_Offset;
    
    public UnrealSharp.EnhancedInput.EnhancedActionKeyMapping GetMappingByName(Name mappingName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMappingByName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetMappingByName_MappingName_Offset), 0, null, mappingName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMappingByName_NativeFunction, ParamsBuffer);
            
            UnrealSharp.EnhancedInput.EnhancedActionKeyMapping returnValue;
            returnValue = UnrealSharp.EnhancedInput.EnhancedActionKeyMappingMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetMappingByName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/EnhancedInput.PlayerMappableInputConfig:GetKeysBoundToAction
    static readonly IntPtr GetKeysBoundToAction_NativeFunction;
    static readonly int GetKeysBoundToAction_ParamsSize;
    static readonly int GetKeysBoundToAction_InAction_Offset;
    static readonly int GetKeysBoundToAction_ReturnValue_Offset;
    static readonly int GetKeysBoundToAction_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.EnhancedInput.EnhancedActionKeyMapping> GetKeysBoundToAction(UnrealSharp.EnhancedInput.InputAction inAction)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetKeysBoundToAction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.EnhancedInput.InputAction>.ToNative(IntPtr.Add(ParamsBuffer, GetKeysBoundToAction_InAction_Offset), 0, null, inAction);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetKeysBoundToAction_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.EnhancedInput.EnhancedActionKeyMapping> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetKeysBoundToAction_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.EnhancedInput.EnhancedActionKeyMapping> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.EnhancedInput.EnhancedActionKeyMapping> (1, UnrealSharp.EnhancedInput.EnhancedActionKeyMappingMarshaler.ToNative, UnrealSharp.EnhancedInput.EnhancedActionKeyMappingMarshaler.FromNative, GetKeysBoundToAction_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.EnhancedInput.EnhancedActionKeyMapping>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/EnhancedInput.PlayerMappableInputConfig:GetConfigName
    static readonly IntPtr GetConfigName_NativeFunction;
    static readonly int GetConfigName_ParamsSize;
    static readonly int GetConfigName_ReturnValue_Offset;
    
    public Name GetConfigName()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetConfigName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetConfigName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetConfigName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
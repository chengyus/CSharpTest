// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.FacialAnimation;

[UClass]
public partial class AudioCurveSourceComponent : UnrealSharp.Engine.AudioComponent, ICurveSourceInterface
{
    
    static AudioCurveSourceComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AudioCurveSourceComponent");
        
        CurveSourceBindingName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CurveSourceBindingName");
        CurveSyncOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CurveSyncOffset");
        
        
        IntPtr GetCurveValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurveValue");
        GetCurveValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurveValue_NativeFunction);
        GetCurveValue_CurveName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurveValue_NativeFunction, "CurveName");
        GetCurveValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurveValue_NativeFunction, "ReturnValue");
        
        IntPtr GetCurves_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurves");
        GetCurves_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurves_NativeFunction);
        GetCurves_OutValues_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurves_NativeFunction, "OutValues");
        GetCurves_OutValues_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetCurves_NativeFunction, "OutValues");
        
        IntPtr GetBindingName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBindingName");
        GetBindingName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBindingName_NativeFunction);
        GetBindingName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBindingName_NativeFunction, "ReturnValue");
        
        
    }
    
    protected AudioCurveSourceComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // NameProperty /Script/FacialAnimation.AudioCurveSourceComponent:CurveSourceBindingName
    static readonly int CurveSourceBindingName_Offset;
    
    public Name CurveSourceBindingName
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, CurveSourceBindingName_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, CurveSourceBindingName_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/FacialAnimation.AudioCurveSourceComponent:CurveSyncOffset
    static readonly int CurveSyncOffset_Offset;
    
    public float CurveSyncOffset
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CurveSyncOffset_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, CurveSyncOffset_Offset), 0, this, value);
        }
    }
    
    // Function /Script/Engine.CurveSourceInterface:GetCurveValue
    IntPtr GetCurveValue_NativeFunction;
    static readonly int GetCurveValue_ParamsSize;
    static readonly int GetCurveValue_CurveName_Offset;
    static readonly int GetCurveValue_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public float GetCurveValue(Name curveName)
    {
        unsafe
        {
            if (GetCurveValue_NativeFunction == IntPtr.Zero)
            {
                GetCurveValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "GetCurveValue");
            }
            byte* ParamsBufferAllocation = stackalloc byte[GetCurveValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetCurveValue_CurveName_Offset), 0, null, curveName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurveValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCurveValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual float GetCurveValue_Implementation(Name curveName)
    {
        return default(float);
    }
    void Invoke_GetCurveValue(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            Name curveName = BlittableMarshaller<Name>.FromNative(IntPtr.Add(buffer, GetCurveValue_CurveName_Offset), 0, null);
            float returnValue = GetCurveValue_Implementation(curveName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/Engine.CurveSourceInterface:GetCurves
    IntPtr GetCurves_NativeFunction;
    static readonly int GetCurves_ParamsSize;
    static readonly int GetCurves_OutValues_Offset;
    static readonly int GetCurves_OutValues_ElementSize;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public void GetCurves(out System.Collections.Generic.IList<UnrealSharp.Engine.NamedCurveValue> outValues)
    {
        unsafe
        {
            if (GetCurves_NativeFunction == IntPtr.Zero)
            {
                GetCurves_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "GetCurves");
            }
            byte* ParamsBufferAllocation = stackalloc byte[GetCurves_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurves_NativeFunction, ParamsBuffer);
            
            IntPtr OutValues_NativeBuffer = IntPtr.Add(ParamsBuffer, GetCurves_OutValues_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.NamedCurveValue> OutValues_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.NamedCurveValue> (1, BlittableMarshaller<UnrealSharp.Engine.NamedCurveValue>.ToNative, BlittableMarshaller<UnrealSharp.Engine.NamedCurveValue>.FromNative, GetCurves_OutValues_ElementSize);
            outValues = OutValues_Marshaler.FromNative(OutValues_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.NamedCurveValue>.DestructInstance(OutValues_NativeBuffer, 0);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void GetCurves_Implementation(out System.Collections.Generic.IList<UnrealSharp.Engine.NamedCurveValue> outValues)
    {
        outValues = null;
    }
    void Invoke_GetCurves(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            System.Collections.Generic.IList<UnrealSharp.Engine.NamedCurveValue> outValues = default;
            GetCurves_Implementation(out outValues);
            IntPtr OutValues_NativeBuffer = IntPtr.Add(buffer, GetCurves_OutValues_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.NamedCurveValue> OutValues_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.NamedCurveValue>(1, BlittableMarshaller<UnrealSharp.Engine.NamedCurveValue>.ToNative, BlittableMarshaller<UnrealSharp.Engine.NamedCurveValue>.FromNative, GetCurves_OutValues_ElementSize);
            OutValues_Marshaler.ToNative(OutValues_NativeBuffer, 0, null, outValues);
        }
    }
    
    // Function /Script/Engine.CurveSourceInterface:GetBindingName
    IntPtr GetBindingName_NativeFunction;
    static readonly int GetBindingName_ParamsSize;
    static readonly int GetBindingName_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public Name GetBindingName()
    {
        unsafe
        {
            if (GetBindingName_NativeFunction == IntPtr.Zero)
            {
                GetBindingName_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "GetBindingName");
            }
            byte* ParamsBufferAllocation = stackalloc byte[GetBindingName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBindingName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetBindingName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual Name GetBindingName_Implementation()
    {
        return default(Name);
    }
    void Invoke_GetBindingName(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            Name returnValue = GetBindingName_Implementation();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    
}
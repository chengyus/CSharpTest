// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.FieldSystemEngine;

[UClass]
public partial class BoxFalloff : UnrealSharp.FieldSystemEngine.FieldNodeFloat
{
    
    static BoxFalloff()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("BoxFalloff");
        
        Magnitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Magnitude");
        MinRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinRange");
        MaxRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxRange");
        Default_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Default");
        Transform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Transform");
        Falloff_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Falloff");
        
        SetBoxFalloff_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBoxFalloff");
        SetBoxFalloff_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBoxFalloff_NativeFunction);
        SetBoxFalloff_Magnitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoxFalloff_NativeFunction, "Magnitude");
        SetBoxFalloff_MinRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoxFalloff_NativeFunction, "MinRange");
        SetBoxFalloff_MaxRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoxFalloff_NativeFunction, "MaxRange");
        SetBoxFalloff_Default_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoxFalloff_NativeFunction, "Default");
        SetBoxFalloff_Transform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoxFalloff_NativeFunction, "Transform");
        SetBoxFalloff_Falloff_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoxFalloff_NativeFunction, "Falloff");
        SetBoxFalloff_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBoxFalloff_NativeFunction, "ReturnValue");
        
        
    }
    
    protected BoxFalloff(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/FieldSystemEngine.BoxFalloff:Magnitude
    static readonly int Magnitude_Offset;
    
    public float Magnitude
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Magnitude_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Magnitude_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/FieldSystemEngine.BoxFalloff:MinRange
    static readonly int MinRange_Offset;
    
    public float MinRange
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinRange_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MinRange_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/FieldSystemEngine.BoxFalloff:MaxRange
    static readonly int MaxRange_Offset;
    
    public float MaxRange
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxRange_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxRange_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/FieldSystemEngine.BoxFalloff:Default
    static readonly int Default_Offset;
    
    public float Default
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Default_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Default_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/FieldSystemEngine.BoxFalloff:Transform
    static readonly int Transform_Offset;
    
    public UnrealSharp.Transform Transform
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(NativeObject, Transform_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(NativeObject, Transform_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/FieldSystemEngine.BoxFalloff:Falloff
    static readonly int Falloff_Offset;
    
    public UnrealSharp.Chaos.EFieldFalloffType Falloff
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Chaos.EFieldFalloffType>.FromNative(IntPtr.Add(NativeObject, Falloff_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Chaos.EFieldFalloffType>.ToNative(IntPtr.Add(NativeObject, Falloff_Offset), 0, this, value);
        }
    }
    
    // Function /Script/FieldSystemEngine.BoxFalloff:SetBoxFalloff
    static readonly IntPtr SetBoxFalloff_NativeFunction;
    static readonly int SetBoxFalloff_ParamsSize;
    static readonly int SetBoxFalloff_Magnitude_Offset;
    static readonly int SetBoxFalloff_MinRange_Offset;
    static readonly int SetBoxFalloff_MaxRange_Offset;
    static readonly int SetBoxFalloff_Default_Offset;
    static readonly int SetBoxFalloff_Transform_Offset;
    static readonly int SetBoxFalloff_Falloff_Offset;
    static readonly int SetBoxFalloff_ReturnValue_Offset;
    
    public UnrealSharp.FieldSystemEngine.BoxFalloff SetBoxFalloff(float magnitude, float minRange, float maxRange, float @default, UnrealSharp.Transform transform, UnrealSharp.Chaos.EFieldFalloffType falloff)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBoxFalloff_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetBoxFalloff_Magnitude_Offset), 0, null, magnitude);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetBoxFalloff_MinRange_Offset), 0, null, minRange);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetBoxFalloff_MaxRange_Offset), 0, null, maxRange);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetBoxFalloff_Default_Offset), 0, null, @default);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetBoxFalloff_Transform_Offset), 0, null, transform);
            BlittableMarshaller<UnrealSharp.Chaos.EFieldFalloffType>.ToNative(IntPtr.Add(ParamsBuffer, SetBoxFalloff_Falloff_Offset), 0, null, falloff);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBoxFalloff_NativeFunction, ParamsBuffer);
            
            UnrealSharp.FieldSystemEngine.BoxFalloff returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.FieldSystemEngine.BoxFalloff>.FromNative(IntPtr.Add(ParamsBuffer, SetBoxFalloff_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
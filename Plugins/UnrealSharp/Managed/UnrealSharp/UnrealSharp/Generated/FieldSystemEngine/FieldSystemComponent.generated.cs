// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.FieldSystemEngine;

[UClass]
public partial class FieldSystemComponent : UnrealSharp.Engine.PrimitiveComponent
{
    
    static FieldSystemComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("FieldSystemComponent");
        
        FieldSystem_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FieldSystem");
        
        ResetFieldSystem_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetFieldSystem");
        RemovePersistentFields_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemovePersistentFields");
        ApplyUniformVectorFalloffForce_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ApplyUniformVectorFalloffForce");
        ApplyUniformVectorFalloffForce_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ApplyUniformVectorFalloffForce_NativeFunction);
        ApplyUniformVectorFalloffForce_Enabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyUniformVectorFalloffForce_NativeFunction, "Enabled");
        ApplyUniformVectorFalloffForce_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyUniformVectorFalloffForce_NativeFunction, "Position");
        ApplyUniformVectorFalloffForce_Direction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyUniformVectorFalloffForce_NativeFunction, "Direction");
        ApplyUniformVectorFalloffForce_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyUniformVectorFalloffForce_NativeFunction, "Radius");
        ApplyUniformVectorFalloffForce_Magnitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyUniformVectorFalloffForce_NativeFunction, "Magnitude");
        ApplyStrainField_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ApplyStrainField");
        ApplyStrainField_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ApplyStrainField_NativeFunction);
        ApplyStrainField_Enabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyStrainField_NativeFunction, "Enabled");
        ApplyStrainField_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyStrainField_NativeFunction, "Position");
        ApplyStrainField_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyStrainField_NativeFunction, "Radius");
        ApplyStrainField_Magnitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyStrainField_NativeFunction, "Magnitude");
        ApplyStrainField_Iterations_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyStrainField_NativeFunction, "Iterations");
        ApplyStayDynamicField_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ApplyStayDynamicField");
        ApplyStayDynamicField_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ApplyStayDynamicField_NativeFunction);
        ApplyStayDynamicField_Enabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyStayDynamicField_NativeFunction, "Enabled");
        ApplyStayDynamicField_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyStayDynamicField_NativeFunction, "Position");
        ApplyStayDynamicField_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyStayDynamicField_NativeFunction, "Radius");
        ApplyRadialVectorFalloffForce_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ApplyRadialVectorFalloffForce");
        ApplyRadialVectorFalloffForce_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ApplyRadialVectorFalloffForce_NativeFunction);
        ApplyRadialVectorFalloffForce_Enabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialVectorFalloffForce_NativeFunction, "Enabled");
        ApplyRadialVectorFalloffForce_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialVectorFalloffForce_NativeFunction, "Position");
        ApplyRadialVectorFalloffForce_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialVectorFalloffForce_NativeFunction, "Radius");
        ApplyRadialVectorFalloffForce_Magnitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialVectorFalloffForce_NativeFunction, "Magnitude");
        ApplyRadialForce_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ApplyRadialForce");
        ApplyRadialForce_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ApplyRadialForce_NativeFunction);
        ApplyRadialForce_Enabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialForce_NativeFunction, "Enabled");
        ApplyRadialForce_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialForce_NativeFunction, "Position");
        ApplyRadialForce_Magnitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyRadialForce_NativeFunction, "Magnitude");
        ApplyPhysicsField_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ApplyPhysicsField");
        ApplyPhysicsField_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ApplyPhysicsField_NativeFunction);
        ApplyPhysicsField_Enabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyPhysicsField_NativeFunction, "Enabled");
        ApplyPhysicsField_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyPhysicsField_NativeFunction, "Target");
        ApplyPhysicsField_MetaData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyPhysicsField_NativeFunction, "MetaData");
        ApplyPhysicsField_Field_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyPhysicsField_NativeFunction, "Field");
        ApplyLinearForce_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ApplyLinearForce");
        ApplyLinearForce_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ApplyLinearForce_NativeFunction);
        ApplyLinearForce_Enabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyLinearForce_NativeFunction, "Enabled");
        ApplyLinearForce_Direction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyLinearForce_NativeFunction, "Direction");
        ApplyLinearForce_Magnitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyLinearForce_NativeFunction, "Magnitude");
        AddPersistentField_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddPersistentField");
        AddPersistentField_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddPersistentField_NativeFunction);
        AddPersistentField_Enabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddPersistentField_NativeFunction, "Enabled");
        AddPersistentField_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddPersistentField_NativeFunction, "Target");
        AddPersistentField_MetaData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddPersistentField_NativeFunction, "MetaData");
        AddPersistentField_Field_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddPersistentField_NativeFunction, "Field");
        AddFieldCommand_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddFieldCommand");
        AddFieldCommand_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddFieldCommand_NativeFunction);
        AddFieldCommand_Enabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddFieldCommand_NativeFunction, "Enabled");
        AddFieldCommand_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddFieldCommand_NativeFunction, "Target");
        AddFieldCommand_MetaData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddFieldCommand_NativeFunction, "MetaData");
        AddFieldCommand_Field_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddFieldCommand_NativeFunction, "Field");
        
        
    }
    
    protected FieldSystemComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/FieldSystemEngine.FieldSystemComponent:FieldSystem
    static readonly int FieldSystem_Offset;
    
    public UnrealSharp.FieldSystemEngine.FieldSystem FieldSystem
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.FieldSystemEngine.FieldSystem>.FromNative(IntPtr.Add(NativeObject, FieldSystem_Offset), 0, this);
        }
    }
    
    // Function /Script/FieldSystemEngine.FieldSystemComponent:ResetFieldSystem
    static readonly IntPtr ResetFieldSystem_NativeFunction;
    
    public void ResetFieldSystem()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetFieldSystem_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/FieldSystemEngine.FieldSystemComponent:RemovePersistentFields
    static readonly IntPtr RemovePersistentFields_NativeFunction;
    
    public void RemovePersistentFields()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemovePersistentFields_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/FieldSystemEngine.FieldSystemComponent:ApplyUniformVectorFalloffForce
    static readonly IntPtr ApplyUniformVectorFalloffForce_NativeFunction;
    static readonly int ApplyUniformVectorFalloffForce_ParamsSize;
    static readonly int ApplyUniformVectorFalloffForce_Enabled_Offset;
    static readonly int ApplyUniformVectorFalloffForce_Position_Offset;
    static readonly int ApplyUniformVectorFalloffForce_Direction_Offset;
    static readonly int ApplyUniformVectorFalloffForce_Radius_Offset;
    static readonly int ApplyUniformVectorFalloffForce_Magnitude_Offset;
    
    public void ApplyUniformVectorFalloffForce(bool enabled, System.DoubleNumerics.Vector3 position, System.DoubleNumerics.Vector3 direction, float radius, float magnitude)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ApplyUniformVectorFalloffForce_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ApplyUniformVectorFalloffForce_Enabled_Offset), 0, null, enabled);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ApplyUniformVectorFalloffForce_Position_Offset), 0, null, position);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ApplyUniformVectorFalloffForce_Direction_Offset), 0, null, direction);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyUniformVectorFalloffForce_Radius_Offset), 0, null, radius);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyUniformVectorFalloffForce_Magnitude_Offset), 0, null, magnitude);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ApplyUniformVectorFalloffForce_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/FieldSystemEngine.FieldSystemComponent:ApplyStrainField
    static readonly IntPtr ApplyStrainField_NativeFunction;
    static readonly int ApplyStrainField_ParamsSize;
    static readonly int ApplyStrainField_Enabled_Offset;
    static readonly int ApplyStrainField_Position_Offset;
    static readonly int ApplyStrainField_Radius_Offset;
    static readonly int ApplyStrainField_Magnitude_Offset;
    static readonly int ApplyStrainField_Iterations_Offset;
    
    public void ApplyStrainField(bool enabled, System.DoubleNumerics.Vector3 position, float radius, float magnitude, int iterations)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ApplyStrainField_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ApplyStrainField_Enabled_Offset), 0, null, enabled);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ApplyStrainField_Position_Offset), 0, null, position);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyStrainField_Radius_Offset), 0, null, radius);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyStrainField_Magnitude_Offset), 0, null, magnitude);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ApplyStrainField_Iterations_Offset), 0, null, iterations);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ApplyStrainField_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/FieldSystemEngine.FieldSystemComponent:ApplyStayDynamicField
    static readonly IntPtr ApplyStayDynamicField_NativeFunction;
    static readonly int ApplyStayDynamicField_ParamsSize;
    static readonly int ApplyStayDynamicField_Enabled_Offset;
    static readonly int ApplyStayDynamicField_Position_Offset;
    static readonly int ApplyStayDynamicField_Radius_Offset;
    
    public void ApplyStayDynamicField(bool enabled, System.DoubleNumerics.Vector3 position, float radius)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ApplyStayDynamicField_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ApplyStayDynamicField_Enabled_Offset), 0, null, enabled);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ApplyStayDynamicField_Position_Offset), 0, null, position);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyStayDynamicField_Radius_Offset), 0, null, radius);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ApplyStayDynamicField_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/FieldSystemEngine.FieldSystemComponent:ApplyRadialVectorFalloffForce
    static readonly IntPtr ApplyRadialVectorFalloffForce_NativeFunction;
    static readonly int ApplyRadialVectorFalloffForce_ParamsSize;
    static readonly int ApplyRadialVectorFalloffForce_Enabled_Offset;
    static readonly int ApplyRadialVectorFalloffForce_Position_Offset;
    static readonly int ApplyRadialVectorFalloffForce_Radius_Offset;
    static readonly int ApplyRadialVectorFalloffForce_Magnitude_Offset;
    
    public void ApplyRadialVectorFalloffForce(bool enabled, System.DoubleNumerics.Vector3 position, float radius, float magnitude)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ApplyRadialVectorFalloffForce_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialVectorFalloffForce_Enabled_Offset), 0, null, enabled);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialVectorFalloffForce_Position_Offset), 0, null, position);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialVectorFalloffForce_Radius_Offset), 0, null, radius);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialVectorFalloffForce_Magnitude_Offset), 0, null, magnitude);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ApplyRadialVectorFalloffForce_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/FieldSystemEngine.FieldSystemComponent:ApplyRadialForce
    static readonly IntPtr ApplyRadialForce_NativeFunction;
    static readonly int ApplyRadialForce_ParamsSize;
    static readonly int ApplyRadialForce_Enabled_Offset;
    static readonly int ApplyRadialForce_Position_Offset;
    static readonly int ApplyRadialForce_Magnitude_Offset;
    
    public void ApplyRadialForce(bool enabled, System.DoubleNumerics.Vector3 position, float magnitude)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ApplyRadialForce_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialForce_Enabled_Offset), 0, null, enabled);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialForce_Position_Offset), 0, null, position);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyRadialForce_Magnitude_Offset), 0, null, magnitude);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ApplyRadialForce_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/FieldSystemEngine.FieldSystemComponent:ApplyPhysicsField
    static readonly IntPtr ApplyPhysicsField_NativeFunction;
    static readonly int ApplyPhysicsField_ParamsSize;
    static readonly int ApplyPhysicsField_Enabled_Offset;
    static readonly int ApplyPhysicsField_Target_Offset;
    static readonly int ApplyPhysicsField_MetaData_Offset;
    static readonly int ApplyPhysicsField_Field_Offset;
    
    public void ApplyPhysicsField(bool enabled, UnrealSharp.Chaos.EFieldPhysicsType target, UnrealSharp.FieldSystemEngine.FieldSystemMetaData metaData, UnrealSharp.FieldSystemEngine.FieldNodeBase field)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ApplyPhysicsField_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ApplyPhysicsField_Enabled_Offset), 0, null, enabled);
            BlittableMarshaller<UnrealSharp.Chaos.EFieldPhysicsType>.ToNative(IntPtr.Add(ParamsBuffer, ApplyPhysicsField_Target_Offset), 0, null, target);
            ObjectMarshaller<UnrealSharp.FieldSystemEngine.FieldSystemMetaData>.ToNative(IntPtr.Add(ParamsBuffer, ApplyPhysicsField_MetaData_Offset), 0, null, metaData);
            ObjectMarshaller<UnrealSharp.FieldSystemEngine.FieldNodeBase>.ToNative(IntPtr.Add(ParamsBuffer, ApplyPhysicsField_Field_Offset), 0, null, field);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ApplyPhysicsField_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/FieldSystemEngine.FieldSystemComponent:ApplyLinearForce
    static readonly IntPtr ApplyLinearForce_NativeFunction;
    static readonly int ApplyLinearForce_ParamsSize;
    static readonly int ApplyLinearForce_Enabled_Offset;
    static readonly int ApplyLinearForce_Direction_Offset;
    static readonly int ApplyLinearForce_Magnitude_Offset;
    
    public void ApplyLinearForce(bool enabled, System.DoubleNumerics.Vector3 direction, float magnitude)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ApplyLinearForce_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ApplyLinearForce_Enabled_Offset), 0, null, enabled);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ApplyLinearForce_Direction_Offset), 0, null, direction);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyLinearForce_Magnitude_Offset), 0, null, magnitude);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ApplyLinearForce_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/FieldSystemEngine.FieldSystemComponent:AddPersistentField
    static readonly IntPtr AddPersistentField_NativeFunction;
    static readonly int AddPersistentField_ParamsSize;
    static readonly int AddPersistentField_Enabled_Offset;
    static readonly int AddPersistentField_Target_Offset;
    static readonly int AddPersistentField_MetaData_Offset;
    static readonly int AddPersistentField_Field_Offset;
    
    public void AddPersistentField(bool enabled, UnrealSharp.Chaos.EFieldPhysicsType target, UnrealSharp.FieldSystemEngine.FieldSystemMetaData metaData, UnrealSharp.FieldSystemEngine.FieldNodeBase field)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddPersistentField_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddPersistentField_Enabled_Offset), 0, null, enabled);
            BlittableMarshaller<UnrealSharp.Chaos.EFieldPhysicsType>.ToNative(IntPtr.Add(ParamsBuffer, AddPersistentField_Target_Offset), 0, null, target);
            ObjectMarshaller<UnrealSharp.FieldSystemEngine.FieldSystemMetaData>.ToNative(IntPtr.Add(ParamsBuffer, AddPersistentField_MetaData_Offset), 0, null, metaData);
            ObjectMarshaller<UnrealSharp.FieldSystemEngine.FieldNodeBase>.ToNative(IntPtr.Add(ParamsBuffer, AddPersistentField_Field_Offset), 0, null, field);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddPersistentField_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/FieldSystemEngine.FieldSystemComponent:AddFieldCommand
    static readonly IntPtr AddFieldCommand_NativeFunction;
    static readonly int AddFieldCommand_ParamsSize;
    static readonly int AddFieldCommand_Enabled_Offset;
    static readonly int AddFieldCommand_Target_Offset;
    static readonly int AddFieldCommand_MetaData_Offset;
    static readonly int AddFieldCommand_Field_Offset;
    
    public void AddFieldCommand(bool enabled, UnrealSharp.Chaos.EFieldPhysicsType target, UnrealSharp.FieldSystemEngine.FieldSystemMetaData metaData, UnrealSharp.FieldSystemEngine.FieldNodeBase field)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddFieldCommand_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddFieldCommand_Enabled_Offset), 0, null, enabled);
            BlittableMarshaller<UnrealSharp.Chaos.EFieldPhysicsType>.ToNative(IntPtr.Add(ParamsBuffer, AddFieldCommand_Target_Offset), 0, null, target);
            ObjectMarshaller<UnrealSharp.FieldSystemEngine.FieldSystemMetaData>.ToNative(IntPtr.Add(ParamsBuffer, AddFieldCommand_MetaData_Offset), 0, null, metaData);
            ObjectMarshaller<UnrealSharp.FieldSystemEngine.FieldNodeBase>.ToNative(IntPtr.Add(ParamsBuffer, AddFieldCommand_Field_Offset), 0, null, field);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddFieldCommand_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.FieldSystemEngine;

[UClass]
public partial class OperatorField : UnrealSharp.FieldSystemEngine.FieldNodeBase
{
    
    static OperatorField()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("OperatorField");
        
        Magnitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Magnitude");
        RightField_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RightField");
        LeftField_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LeftField");
        Operation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Operation");
        
        SetOperatorField_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOperatorField");
        SetOperatorField_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOperatorField_NativeFunction);
        SetOperatorField_Magnitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOperatorField_NativeFunction, "Magnitude");
        SetOperatorField_LeftField_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOperatorField_NativeFunction, "LeftField");
        SetOperatorField_RightField_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOperatorField_NativeFunction, "RightField");
        SetOperatorField_Operation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOperatorField_NativeFunction, "Operation");
        SetOperatorField_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOperatorField_NativeFunction, "ReturnValue");
        
        
    }
    
    protected OperatorField(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/FieldSystemEngine.OperatorField:Magnitude
    static readonly int Magnitude_Offset;
    
    public float Magnitude
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Magnitude_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Magnitude_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/FieldSystemEngine.OperatorField:RightField
    static readonly int RightField_Offset;
    
    public UnrealSharp.FieldSystemEngine.FieldNodeBase RightField
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.FieldSystemEngine.FieldNodeBase>.FromNative(IntPtr.Add(NativeObject, RightField_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.FieldSystemEngine.FieldNodeBase>.ToNative(IntPtr.Add(NativeObject, RightField_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/FieldSystemEngine.OperatorField:LeftField
    static readonly int LeftField_Offset;
    
    public UnrealSharp.FieldSystemEngine.FieldNodeBase LeftField
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.FieldSystemEngine.FieldNodeBase>.FromNative(IntPtr.Add(NativeObject, LeftField_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.FieldSystemEngine.FieldNodeBase>.ToNative(IntPtr.Add(NativeObject, LeftField_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/FieldSystemEngine.OperatorField:Operation
    static readonly int Operation_Offset;
    
    public UnrealSharp.Chaos.EFieldOperationType Operation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Chaos.EFieldOperationType>.FromNative(IntPtr.Add(NativeObject, Operation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Chaos.EFieldOperationType>.ToNative(IntPtr.Add(NativeObject, Operation_Offset), 0, this, value);
        }
    }
    
    // Function /Script/FieldSystemEngine.OperatorField:SetOperatorField
    static readonly IntPtr SetOperatorField_NativeFunction;
    static readonly int SetOperatorField_ParamsSize;
    static readonly int SetOperatorField_Magnitude_Offset;
    static readonly int SetOperatorField_LeftField_Offset;
    static readonly int SetOperatorField_RightField_Offset;
    static readonly int SetOperatorField_Operation_Offset;
    static readonly int SetOperatorField_ReturnValue_Offset;
    
    public UnrealSharp.FieldSystemEngine.OperatorField SetOperatorField(float magnitude, UnrealSharp.FieldSystemEngine.FieldNodeBase leftField, UnrealSharp.FieldSystemEngine.FieldNodeBase rightField, UnrealSharp.Chaos.EFieldOperationType operation)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOperatorField_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetOperatorField_Magnitude_Offset), 0, null, magnitude);
            ObjectMarshaller<UnrealSharp.FieldSystemEngine.FieldNodeBase>.ToNative(IntPtr.Add(ParamsBuffer, SetOperatorField_LeftField_Offset), 0, null, leftField);
            ObjectMarshaller<UnrealSharp.FieldSystemEngine.FieldNodeBase>.ToNative(IntPtr.Add(ParamsBuffer, SetOperatorField_RightField_Offset), 0, null, rightField);
            BlittableMarshaller<UnrealSharp.Chaos.EFieldOperationType>.ToNative(IntPtr.Add(ParamsBuffer, SetOperatorField_Operation_Offset), 0, null, operation);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOperatorField_NativeFunction, ParamsBuffer);
            
            UnrealSharp.FieldSystemEngine.OperatorField returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.FieldSystemEngine.OperatorField>.FromNative(IntPtr.Add(ParamsBuffer, SetOperatorField_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
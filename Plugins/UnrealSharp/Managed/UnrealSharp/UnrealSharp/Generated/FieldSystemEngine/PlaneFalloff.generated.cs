// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.FieldSystemEngine;

[UClass]
public partial class PlaneFalloff : UnrealSharp.FieldSystemEngine.FieldNodeFloat
{
    
    static PlaneFalloff()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("PlaneFalloff");
        
        Magnitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Magnitude");
        MinRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinRange");
        MaxRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxRange");
        Default_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Default");
        Distance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Distance");
        Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Position");
        Normal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Normal");
        Falloff_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Falloff");
        
        SetPlaneFalloff_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlaneFalloff");
        SetPlaneFalloff_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlaneFalloff_NativeFunction);
        SetPlaneFalloff_Magnitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaneFalloff_NativeFunction, "Magnitude");
        SetPlaneFalloff_MinRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaneFalloff_NativeFunction, "MinRange");
        SetPlaneFalloff_MaxRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaneFalloff_NativeFunction, "MaxRange");
        SetPlaneFalloff_Default_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaneFalloff_NativeFunction, "Default");
        SetPlaneFalloff_Distance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaneFalloff_NativeFunction, "Distance");
        SetPlaneFalloff_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaneFalloff_NativeFunction, "Position");
        SetPlaneFalloff_Normal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaneFalloff_NativeFunction, "Normal");
        SetPlaneFalloff_Falloff_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaneFalloff_NativeFunction, "Falloff");
        SetPlaneFalloff_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaneFalloff_NativeFunction, "ReturnValue");
        
        
    }
    
    protected PlaneFalloff(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/FieldSystemEngine.PlaneFalloff:Magnitude
    static readonly int Magnitude_Offset;
    
    public float Magnitude
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Magnitude_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Magnitude_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/FieldSystemEngine.PlaneFalloff:MinRange
    static readonly int MinRange_Offset;
    
    public float MinRange
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinRange_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MinRange_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/FieldSystemEngine.PlaneFalloff:MaxRange
    static readonly int MaxRange_Offset;
    
    public float MaxRange
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxRange_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxRange_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/FieldSystemEngine.PlaneFalloff:Default
    static readonly int Default_Offset;
    
    public float Default
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Default_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Default_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/FieldSystemEngine.PlaneFalloff:Distance
    static readonly int Distance_Offset;
    
    public float Distance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Distance_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Distance_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/FieldSystemEngine.PlaneFalloff:Position
    static readonly int Position_Offset;
    
    public System.DoubleNumerics.Vector3 Position
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, Position_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, Position_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/FieldSystemEngine.PlaneFalloff:Normal
    static readonly int Normal_Offset;
    
    public System.DoubleNumerics.Vector3 Normal
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, Normal_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, Normal_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/FieldSystemEngine.PlaneFalloff:Falloff
    static readonly int Falloff_Offset;
    
    public UnrealSharp.Chaos.EFieldFalloffType Falloff
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Chaos.EFieldFalloffType>.FromNative(IntPtr.Add(NativeObject, Falloff_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Chaos.EFieldFalloffType>.ToNative(IntPtr.Add(NativeObject, Falloff_Offset), 0, this, value);
        }
    }
    
    // Function /Script/FieldSystemEngine.PlaneFalloff:SetPlaneFalloff
    static readonly IntPtr SetPlaneFalloff_NativeFunction;
    static readonly int SetPlaneFalloff_ParamsSize;
    static readonly int SetPlaneFalloff_Magnitude_Offset;
    static readonly int SetPlaneFalloff_MinRange_Offset;
    static readonly int SetPlaneFalloff_MaxRange_Offset;
    static readonly int SetPlaneFalloff_Default_Offset;
    static readonly int SetPlaneFalloff_Distance_Offset;
    static readonly int SetPlaneFalloff_Position_Offset;
    static readonly int SetPlaneFalloff_Normal_Offset;
    static readonly int SetPlaneFalloff_Falloff_Offset;
    static readonly int SetPlaneFalloff_ReturnValue_Offset;
    
    public UnrealSharp.FieldSystemEngine.PlaneFalloff SetPlaneFalloff(float magnitude, float minRange, float maxRange, float @default, float distance, System.DoubleNumerics.Vector3 position, System.DoubleNumerics.Vector3 normal, UnrealSharp.Chaos.EFieldFalloffType falloff)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlaneFalloff_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaneFalloff_Magnitude_Offset), 0, null, magnitude);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaneFalloff_MinRange_Offset), 0, null, minRange);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaneFalloff_MaxRange_Offset), 0, null, maxRange);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaneFalloff_Default_Offset), 0, null, @default);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaneFalloff_Distance_Offset), 0, null, distance);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaneFalloff_Position_Offset), 0, null, position);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaneFalloff_Normal_Offset), 0, null, normal);
            BlittableMarshaller<UnrealSharp.Chaos.EFieldFalloffType>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaneFalloff_Falloff_Offset), 0, null, falloff);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPlaneFalloff_NativeFunction, ParamsBuffer);
            
            UnrealSharp.FieldSystemEngine.PlaneFalloff returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.FieldSystemEngine.PlaneFalloff>.FromNative(IntPtr.Add(ParamsBuffer, SetPlaneFalloff_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.FieldSystemEngine;

[UClass]
public partial class RadialFalloff : UnrealSharp.FieldSystemEngine.FieldNodeFloat
{
    
    static RadialFalloff()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("RadialFalloff");
        
        Magnitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Magnitude");
        MinRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinRange");
        MaxRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxRange");
        Default_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Default");
        Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Radius");
        Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Position");
        Falloff_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Falloff");
        
        SetRadialFalloff_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRadialFalloff");
        SetRadialFalloff_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRadialFalloff_NativeFunction);
        SetRadialFalloff_Magnitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRadialFalloff_NativeFunction, "Magnitude");
        SetRadialFalloff_MinRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRadialFalloff_NativeFunction, "MinRange");
        SetRadialFalloff_MaxRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRadialFalloff_NativeFunction, "MaxRange");
        SetRadialFalloff_Default_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRadialFalloff_NativeFunction, "Default");
        SetRadialFalloff_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRadialFalloff_NativeFunction, "Radius");
        SetRadialFalloff_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRadialFalloff_NativeFunction, "Position");
        SetRadialFalloff_Falloff_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRadialFalloff_NativeFunction, "Falloff");
        SetRadialFalloff_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRadialFalloff_NativeFunction, "ReturnValue");
        
        
    }
    
    protected RadialFalloff(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/FieldSystemEngine.RadialFalloff:Magnitude
    static readonly int Magnitude_Offset;
    
    public float Magnitude
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Magnitude_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Magnitude_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/FieldSystemEngine.RadialFalloff:MinRange
    static readonly int MinRange_Offset;
    
    public float MinRange
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinRange_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MinRange_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/FieldSystemEngine.RadialFalloff:MaxRange
    static readonly int MaxRange_Offset;
    
    public float MaxRange
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxRange_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxRange_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/FieldSystemEngine.RadialFalloff:Default
    static readonly int Default_Offset;
    
    public float Default
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Default_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Default_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/FieldSystemEngine.RadialFalloff:Radius
    static readonly int Radius_Offset;
    
    public float Radius
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Radius_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Radius_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/FieldSystemEngine.RadialFalloff:Position
    static readonly int Position_Offset;
    
    public System.DoubleNumerics.Vector3 Position
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, Position_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, Position_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/FieldSystemEngine.RadialFalloff:Falloff
    static readonly int Falloff_Offset;
    
    public UnrealSharp.Chaos.EFieldFalloffType Falloff
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Chaos.EFieldFalloffType>.FromNative(IntPtr.Add(NativeObject, Falloff_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Chaos.EFieldFalloffType>.ToNative(IntPtr.Add(NativeObject, Falloff_Offset), 0, this, value);
        }
    }
    
    // Function /Script/FieldSystemEngine.RadialFalloff:SetRadialFalloff
    static readonly IntPtr SetRadialFalloff_NativeFunction;
    static readonly int SetRadialFalloff_ParamsSize;
    static readonly int SetRadialFalloff_Magnitude_Offset;
    static readonly int SetRadialFalloff_MinRange_Offset;
    static readonly int SetRadialFalloff_MaxRange_Offset;
    static readonly int SetRadialFalloff_Default_Offset;
    static readonly int SetRadialFalloff_Radius_Offset;
    static readonly int SetRadialFalloff_Position_Offset;
    static readonly int SetRadialFalloff_Falloff_Offset;
    static readonly int SetRadialFalloff_ReturnValue_Offset;
    
    public UnrealSharp.FieldSystemEngine.RadialFalloff SetRadialFalloff(float magnitude, float minRange, float maxRange, float @default, float radius, System.DoubleNumerics.Vector3 position, UnrealSharp.Chaos.EFieldFalloffType falloff)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRadialFalloff_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetRadialFalloff_Magnitude_Offset), 0, null, magnitude);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetRadialFalloff_MinRange_Offset), 0, null, minRange);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetRadialFalloff_MaxRange_Offset), 0, null, maxRange);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetRadialFalloff_Default_Offset), 0, null, @default);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetRadialFalloff_Radius_Offset), 0, null, radius);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetRadialFalloff_Position_Offset), 0, null, position);
            BlittableMarshaller<UnrealSharp.Chaos.EFieldFalloffType>.ToNative(IntPtr.Add(ParamsBuffer, SetRadialFalloff_Falloff_Offset), 0, null, falloff);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRadialFalloff_NativeFunction, ParamsBuffer);
            
            UnrealSharp.FieldSystemEngine.RadialFalloff returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.FieldSystemEngine.RadialFalloff>.FromNative(IntPtr.Add(ParamsBuffer, SetRadialFalloff_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.FieldSystemEngine;

[UClass]
public partial class RadialIntMask : UnrealSharp.FieldSystemEngine.FieldNodeInt
{
    
    static RadialIntMask()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("RadialIntMask");
        
        Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Radius");
        Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Position");
        InteriorValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InteriorValue");
        ExteriorValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ExteriorValue");
        SetMaskCondition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SetMaskCondition");
        
        SetRadialIntMask_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRadialIntMask");
        SetRadialIntMask_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRadialIntMask_NativeFunction);
        SetRadialIntMask_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRadialIntMask_NativeFunction, "Radius");
        SetRadialIntMask_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRadialIntMask_NativeFunction, "Position");
        SetRadialIntMask_InteriorValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRadialIntMask_NativeFunction, "InteriorValue");
        SetRadialIntMask_ExteriorValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRadialIntMask_NativeFunction, "ExteriorValue");
        SetRadialIntMask_SetMaskConditionIn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRadialIntMask_NativeFunction, "SetMaskConditionIn");
        SetRadialIntMask_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRadialIntMask_NativeFunction, "ReturnValue");
        
        
    }
    
    protected RadialIntMask(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/FieldSystemEngine.RadialIntMask:Radius
    static readonly int Radius_Offset;
    
    public float Radius
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Radius_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Radius_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/FieldSystemEngine.RadialIntMask:Position
    static readonly int Position_Offset;
    
    public System.DoubleNumerics.Vector3 Position
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, Position_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, Position_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/FieldSystemEngine.RadialIntMask:InteriorValue
    static readonly int InteriorValue_Offset;
    
    public int InteriorValue
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, InteriorValue_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, InteriorValue_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/FieldSystemEngine.RadialIntMask:ExteriorValue
    static readonly int ExteriorValue_Offset;
    
    public int ExteriorValue
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, ExteriorValue_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, ExteriorValue_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/FieldSystemEngine.RadialIntMask:SetMaskCondition
    static readonly int SetMaskCondition_Offset;
    
    public UnrealSharp.Chaos.ESetMaskConditionType SetMaskCondition
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Chaos.ESetMaskConditionType>.FromNative(IntPtr.Add(NativeObject, SetMaskCondition_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Chaos.ESetMaskConditionType>.ToNative(IntPtr.Add(NativeObject, SetMaskCondition_Offset), 0, this, value);
        }
    }
    
    // Function /Script/FieldSystemEngine.RadialIntMask:SetRadialIntMask
    static readonly IntPtr SetRadialIntMask_NativeFunction;
    static readonly int SetRadialIntMask_ParamsSize;
    static readonly int SetRadialIntMask_Radius_Offset;
    static readonly int SetRadialIntMask_Position_Offset;
    static readonly int SetRadialIntMask_InteriorValue_Offset;
    static readonly int SetRadialIntMask_ExteriorValue_Offset;
    static readonly int SetRadialIntMask_SetMaskConditionIn_Offset;
    static readonly int SetRadialIntMask_ReturnValue_Offset;
    
    public UnrealSharp.FieldSystemEngine.RadialIntMask SetRadialIntMask(float radius, System.DoubleNumerics.Vector3 position, int interiorValue, int exteriorValue, UnrealSharp.Chaos.ESetMaskConditionType setMaskConditionIn)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRadialIntMask_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetRadialIntMask_Radius_Offset), 0, null, radius);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetRadialIntMask_Position_Offset), 0, null, position);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetRadialIntMask_InteriorValue_Offset), 0, null, interiorValue);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetRadialIntMask_ExteriorValue_Offset), 0, null, exteriorValue);
            BlittableMarshaller<UnrealSharp.Chaos.ESetMaskConditionType>.ToNative(IntPtr.Add(ParamsBuffer, SetRadialIntMask_SetMaskConditionIn_Offset), 0, null, setMaskConditionIn);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRadialIntMask_NativeFunction, ParamsBuffer);
            
            UnrealSharp.FieldSystemEngine.RadialIntMask returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.FieldSystemEngine.RadialIntMask>.FromNative(IntPtr.Add(ParamsBuffer, SetRadialIntMask_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.FieldSystemEngine;

[UClass]
public partial class RadialVector : UnrealSharp.FieldSystemEngine.FieldNodeVector
{
    
    static RadialVector()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("RadialVector");
        
        Magnitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Magnitude");
        Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Position");
        
        SetRadialVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRadialVector");
        SetRadialVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRadialVector_NativeFunction);
        SetRadialVector_Magnitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRadialVector_NativeFunction, "Magnitude");
        SetRadialVector_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRadialVector_NativeFunction, "Position");
        SetRadialVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRadialVector_NativeFunction, "ReturnValue");
        
        
    }
    
    protected RadialVector(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/FieldSystemEngine.RadialVector:Magnitude
    static readonly int Magnitude_Offset;
    
    public float Magnitude
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Magnitude_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Magnitude_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/FieldSystemEngine.RadialVector:Position
    static readonly int Position_Offset;
    
    public System.DoubleNumerics.Vector3 Position
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, Position_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, Position_Offset), 0, this, value);
        }
    }
    
    // Function /Script/FieldSystemEngine.RadialVector:SetRadialVector
    static readonly IntPtr SetRadialVector_NativeFunction;
    static readonly int SetRadialVector_ParamsSize;
    static readonly int SetRadialVector_Magnitude_Offset;
    static readonly int SetRadialVector_Position_Offset;
    static readonly int SetRadialVector_ReturnValue_Offset;
    
    public UnrealSharp.FieldSystemEngine.RadialVector SetRadialVector(float magnitude, System.DoubleNumerics.Vector3 position)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRadialVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetRadialVector_Magnitude_Offset), 0, null, magnitude);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetRadialVector_Position_Offset), 0, null, position);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRadialVector_NativeFunction, ParamsBuffer);
            
            UnrealSharp.FieldSystemEngine.RadialVector returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.FieldSystemEngine.RadialVector>.FromNative(IntPtr.Add(ParamsBuffer, SetRadialVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
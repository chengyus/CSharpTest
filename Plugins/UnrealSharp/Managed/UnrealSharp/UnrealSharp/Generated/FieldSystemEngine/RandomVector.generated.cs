// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.FieldSystemEngine;

[UClass]
public partial class RandomVector : UnrealSharp.FieldSystemEngine.FieldNodeVector
{
    
    static RandomVector()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("RandomVector");
        
        Magnitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Magnitude");
        
        SetRandomVector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRandomVector");
        SetRandomVector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRandomVector_NativeFunction);
        SetRandomVector_Magnitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRandomVector_NativeFunction, "Magnitude");
        SetRandomVector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRandomVector_NativeFunction, "ReturnValue");
        
        
    }
    
    protected RandomVector(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/FieldSystemEngine.RandomVector:Magnitude
    static readonly int Magnitude_Offset;
    
    public float Magnitude
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Magnitude_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Magnitude_Offset), 0, this, value);
        }
    }
    
    // Function /Script/FieldSystemEngine.RandomVector:SetRandomVector
    static readonly IntPtr SetRandomVector_NativeFunction;
    static readonly int SetRandomVector_ParamsSize;
    static readonly int SetRandomVector_Magnitude_Offset;
    static readonly int SetRandomVector_ReturnValue_Offset;
    
    public UnrealSharp.FieldSystemEngine.RandomVector SetRandomVector(float magnitude)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRandomVector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetRandomVector_Magnitude_Offset), 0, null, magnitude);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRandomVector_NativeFunction, ParamsBuffer);
            
            UnrealSharp.FieldSystemEngine.RandomVector returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.FieldSystemEngine.RandomVector>.FromNative(IntPtr.Add(ParamsBuffer, SetRandomVector_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
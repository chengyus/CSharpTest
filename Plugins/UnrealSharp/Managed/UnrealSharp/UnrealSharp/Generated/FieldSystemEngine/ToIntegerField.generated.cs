// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.FieldSystemEngine;

[UClass]
public partial class ToIntegerField : UnrealSharp.FieldSystemEngine.FieldNodeInt
{
    
    static ToIntegerField()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ToIntegerField");
        
        FloatField_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FloatField");
        
        SetToIntegerField_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetToIntegerField");
        SetToIntegerField_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetToIntegerField_NativeFunction);
        SetToIntegerField_FloatField_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetToIntegerField_NativeFunction, "FloatField");
        SetToIntegerField_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetToIntegerField_NativeFunction, "ReturnValue");
        
        
    }
    
    protected ToIntegerField(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/FieldSystemEngine.ToIntegerField:FloatField
    static readonly int FloatField_Offset;
    
    public UnrealSharp.FieldSystemEngine.FieldNodeFloat FloatField
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.FieldSystemEngine.FieldNodeFloat>.FromNative(IntPtr.Add(NativeObject, FloatField_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.FieldSystemEngine.FieldNodeFloat>.ToNative(IntPtr.Add(NativeObject, FloatField_Offset), 0, this, value);
        }
    }
    
    // Function /Script/FieldSystemEngine.ToIntegerField:SetToIntegerField
    static readonly IntPtr SetToIntegerField_NativeFunction;
    static readonly int SetToIntegerField_ParamsSize;
    static readonly int SetToIntegerField_FloatField_Offset;
    static readonly int SetToIntegerField_ReturnValue_Offset;
    
    public UnrealSharp.FieldSystemEngine.ToIntegerField SetToIntegerField(UnrealSharp.FieldSystemEngine.FieldNodeFloat floatField)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetToIntegerField_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.FieldSystemEngine.FieldNodeFloat>.ToNative(IntPtr.Add(ParamsBuffer, SetToIntegerField_FloatField_Offset), 0, null, floatField);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetToIntegerField_NativeFunction, ParamsBuffer);
            
            UnrealSharp.FieldSystemEngine.ToIntegerField returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.FieldSystemEngine.ToIntegerField>.FromNative(IntPtr.Add(ParamsBuffer, SetToIntegerField_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
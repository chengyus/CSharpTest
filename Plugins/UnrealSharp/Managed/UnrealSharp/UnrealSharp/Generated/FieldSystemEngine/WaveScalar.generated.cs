// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.FieldSystemEngine;

[UClass]
public partial class WaveScalar : UnrealSharp.FieldSystemEngine.FieldNodeFloat
{
    
    static WaveScalar()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("WaveScalar");
        
        Magnitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Magnitude");
        Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Position");
        Wavelength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Wavelength");
        Period_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Period");
        Function_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Function");
        Falloff_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Falloff");
        
        SetWaveScalar_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWaveScalar");
        SetWaveScalar_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWaveScalar_NativeFunction);
        SetWaveScalar_Magnitude_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWaveScalar_NativeFunction, "Magnitude");
        SetWaveScalar_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWaveScalar_NativeFunction, "Position");
        SetWaveScalar_Wavelength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWaveScalar_NativeFunction, "Wavelength");
        SetWaveScalar_Period_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWaveScalar_NativeFunction, "Period");
        SetWaveScalar_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWaveScalar_NativeFunction, "Time");
        SetWaveScalar_Function_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWaveScalar_NativeFunction, "Function");
        SetWaveScalar_Falloff_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWaveScalar_NativeFunction, "Falloff");
        SetWaveScalar_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWaveScalar_NativeFunction, "ReturnValue");
        
        
    }
    
    protected WaveScalar(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/FieldSystemEngine.WaveScalar:Magnitude
    static readonly int Magnitude_Offset;
    
    public float Magnitude
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Magnitude_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Magnitude_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/FieldSystemEngine.WaveScalar:Position
    static readonly int Position_Offset;
    
    public System.DoubleNumerics.Vector3 Position
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, Position_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, Position_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/FieldSystemEngine.WaveScalar:Wavelength
    static readonly int Wavelength_Offset;
    
    public float Wavelength
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Wavelength_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Wavelength_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/FieldSystemEngine.WaveScalar:Period
    static readonly int Period_Offset;
    
    public float Period
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Period_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Period_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/FieldSystemEngine.WaveScalar:Function
    static readonly int Function_Offset;
    
    public UnrealSharp.Chaos.EWaveFunctionType Function
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Chaos.EWaveFunctionType>.FromNative(IntPtr.Add(NativeObject, Function_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Chaos.EWaveFunctionType>.ToNative(IntPtr.Add(NativeObject, Function_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/FieldSystemEngine.WaveScalar:Falloff
    static readonly int Falloff_Offset;
    
    public UnrealSharp.Chaos.EFieldFalloffType Falloff
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Chaos.EFieldFalloffType>.FromNative(IntPtr.Add(NativeObject, Falloff_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Chaos.EFieldFalloffType>.ToNative(IntPtr.Add(NativeObject, Falloff_Offset), 0, this, value);
        }
    }
    
    // Function /Script/FieldSystemEngine.WaveScalar:SetWaveScalar
    static readonly IntPtr SetWaveScalar_NativeFunction;
    static readonly int SetWaveScalar_ParamsSize;
    static readonly int SetWaveScalar_Magnitude_Offset;
    static readonly int SetWaveScalar_Position_Offset;
    static readonly int SetWaveScalar_Wavelength_Offset;
    static readonly int SetWaveScalar_Period_Offset;
    static readonly int SetWaveScalar_Time_Offset;
    static readonly int SetWaveScalar_Function_Offset;
    static readonly int SetWaveScalar_Falloff_Offset;
    static readonly int SetWaveScalar_ReturnValue_Offset;
    
    public UnrealSharp.FieldSystemEngine.WaveScalar SetWaveScalar(float magnitude, System.DoubleNumerics.Vector3 position, float wavelength, float period, float time, UnrealSharp.Chaos.EWaveFunctionType function, UnrealSharp.Chaos.EFieldFalloffType falloff)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWaveScalar_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetWaveScalar_Magnitude_Offset), 0, null, magnitude);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetWaveScalar_Position_Offset), 0, null, position);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetWaveScalar_Wavelength_Offset), 0, null, wavelength);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetWaveScalar_Period_Offset), 0, null, period);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetWaveScalar_Time_Offset), 0, null, time);
            BlittableMarshaller<UnrealSharp.Chaos.EWaveFunctionType>.ToNative(IntPtr.Add(ParamsBuffer, SetWaveScalar_Function_Offset), 0, null, function);
            BlittableMarshaller<UnrealSharp.Chaos.EFieldFalloffType>.ToNative(IntPtr.Add(ParamsBuffer, SetWaveScalar_Falloff_Offset), 0, null, falloff);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetWaveScalar_NativeFunction, ParamsBuffer);
            
            UnrealSharp.FieldSystemEngine.WaveScalar returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.FieldSystemEngine.WaveScalar>.FromNative(IntPtr.Add(ParamsBuffer, SetWaveScalar_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Foliage;

[UClass]
public partial class FoliageStatistics : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static FoliageStatistics()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("FoliageStatistics");
        
        
        FoliageOverlappingSphereCount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FoliageOverlappingSphereCount");
        FoliageOverlappingSphereCount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FoliageOverlappingSphereCount_NativeFunction);
        FoliageOverlappingSphereCount_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FoliageOverlappingSphereCount_NativeFunction, "WorldContextObject");
        FoliageOverlappingSphereCount_StaticMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FoliageOverlappingSphereCount_NativeFunction, "StaticMesh");
        FoliageOverlappingSphereCount_CenterPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FoliageOverlappingSphereCount_NativeFunction, "CenterPosition");
        FoliageOverlappingSphereCount_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FoliageOverlappingSphereCount_NativeFunction, "Radius");
        FoliageOverlappingSphereCount_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FoliageOverlappingSphereCount_NativeFunction, "ReturnValue");
        FoliageOverlappingBoxTransforms_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FoliageOverlappingBoxTransforms");
        FoliageOverlappingBoxTransforms_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FoliageOverlappingBoxTransforms_NativeFunction);
        FoliageOverlappingBoxTransforms_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FoliageOverlappingBoxTransforms_NativeFunction, "WorldContextObject");
        FoliageOverlappingBoxTransforms_StaticMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FoliageOverlappingBoxTransforms_NativeFunction, "StaticMesh");
        FoliageOverlappingBoxTransforms_Box_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FoliageOverlappingBoxTransforms_NativeFunction, "Box");
        FoliageOverlappingBoxTransforms_OutTransforms_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FoliageOverlappingBoxTransforms_NativeFunction, "OutTransforms");
        FoliageOverlappingBoxTransforms_OutTransforms_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(FoliageOverlappingBoxTransforms_NativeFunction, "OutTransforms");
        FoliageOverlappingBoxCount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FoliageOverlappingBoxCount");
        FoliageOverlappingBoxCount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FoliageOverlappingBoxCount_NativeFunction);
        FoliageOverlappingBoxCount_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FoliageOverlappingBoxCount_NativeFunction, "WorldContextObject");
        FoliageOverlappingBoxCount_StaticMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FoliageOverlappingBoxCount_NativeFunction, "StaticMesh");
        FoliageOverlappingBoxCount_Box_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FoliageOverlappingBoxCount_NativeFunction, "Box");
        FoliageOverlappingBoxCount_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FoliageOverlappingBoxCount_NativeFunction, "ReturnValue");
        
        
    }
    
    protected FoliageStatistics(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/Foliage.FoliageStatistics:FoliageOverlappingSphereCount
    static readonly IntPtr FoliageOverlappingSphereCount_NativeFunction;
    static readonly int FoliageOverlappingSphereCount_ParamsSize;
    static readonly int FoliageOverlappingSphereCount_WorldContextObject_Offset;
    static readonly int FoliageOverlappingSphereCount_StaticMesh_Offset;
    static readonly int FoliageOverlappingSphereCount_CenterPosition_Offset;
    static readonly int FoliageOverlappingSphereCount_Radius_Offset;
    static readonly int FoliageOverlappingSphereCount_ReturnValue_Offset;
    
    public static int FoliageOverlappingSphereCount(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.StaticMesh staticMesh, System.DoubleNumerics.Vector3 centerPosition, float radius)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FoliageOverlappingSphereCount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, FoliageOverlappingSphereCount_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.StaticMesh>.ToNative(IntPtr.Add(ParamsBuffer, FoliageOverlappingSphereCount_StaticMesh_Offset), 0, null, staticMesh);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, FoliageOverlappingSphereCount_CenterPosition_Offset), 0, null, centerPosition);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, FoliageOverlappingSphereCount_Radius_Offset), 0, null, radius);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FoliageOverlappingSphereCount_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, FoliageOverlappingSphereCount_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Foliage.FoliageStatistics:FoliageOverlappingBoxTransforms
    static readonly IntPtr FoliageOverlappingBoxTransforms_NativeFunction;
    static readonly int FoliageOverlappingBoxTransforms_ParamsSize;
    static readonly int FoliageOverlappingBoxTransforms_WorldContextObject_Offset;
    static readonly int FoliageOverlappingBoxTransforms_StaticMesh_Offset;
    static readonly int FoliageOverlappingBoxTransforms_Box_Offset;
    static readonly int FoliageOverlappingBoxTransforms_OutTransforms_Offset;
    static readonly int FoliageOverlappingBoxTransforms_OutTransforms_ElementSize;
    
    public static void FoliageOverlappingBoxTransforms(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.StaticMesh staticMesh, UnrealSharp.CoreUObject.Box box, out System.Collections.Generic.IList<UnrealSharp.Transform> outTransforms)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FoliageOverlappingBoxTransforms_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, FoliageOverlappingBoxTransforms_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.StaticMesh>.ToNative(IntPtr.Add(ParamsBuffer, FoliageOverlappingBoxTransforms_StaticMesh_Offset), 0, null, staticMesh);
            UnrealSharp.CoreUObject.BoxMarshaler.ToNative(IntPtr.Add(ParamsBuffer, FoliageOverlappingBoxTransforms_Box_Offset), 0, null, box);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FoliageOverlappingBoxTransforms_NativeFunction, ParamsBuffer);
            
            IntPtr OutTransforms_NativeBuffer = IntPtr.Add(ParamsBuffer, FoliageOverlappingBoxTransforms_OutTransforms_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform> OutTransforms_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Transform> (1, BlittableMarshaller<UnrealSharp.Transform>.ToNative, BlittableMarshaller<UnrealSharp.Transform>.FromNative, FoliageOverlappingBoxTransforms_OutTransforms_ElementSize);
            outTransforms = OutTransforms_Marshaler.FromNative(OutTransforms_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform>.DestructInstance(OutTransforms_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/Foliage.FoliageStatistics:FoliageOverlappingBoxCount
    static readonly IntPtr FoliageOverlappingBoxCount_NativeFunction;
    static readonly int FoliageOverlappingBoxCount_ParamsSize;
    static readonly int FoliageOverlappingBoxCount_WorldContextObject_Offset;
    static readonly int FoliageOverlappingBoxCount_StaticMesh_Offset;
    static readonly int FoliageOverlappingBoxCount_Box_Offset;
    static readonly int FoliageOverlappingBoxCount_ReturnValue_Offset;
    
    public static int FoliageOverlappingBoxCount(UnrealSharp.CoreUObject.Object worldContextObject, UnrealSharp.Engine.StaticMesh staticMesh, UnrealSharp.CoreUObject.Box box)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FoliageOverlappingBoxCount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, FoliageOverlappingBoxCount_WorldContextObject_Offset), 0, null, worldContextObject);
            ObjectMarshaller<UnrealSharp.Engine.StaticMesh>.ToNative(IntPtr.Add(ParamsBuffer, FoliageOverlappingBoxCount_StaticMesh_Offset), 0, null, staticMesh);
            UnrealSharp.CoreUObject.BoxMarshaler.ToNative(IntPtr.Add(ParamsBuffer, FoliageOverlappingBoxCount_Box_Offset), 0, null, box);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FoliageOverlappingBoxCount_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, FoliageOverlappingBoxCount_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Foliage;

[UClass]
abstract public partial class FoliageType : UnrealSharp.CoreUObject.Object
{
    
    static FoliageType()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("FoliageType");
        
        ZOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ZOffset");
        AlignToNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AlignToNormal");
        AlignToNormal_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "AlignToNormal");
        AverageNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AverageNormal");
        AverageNormal_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "AverageNormal");
        AverageNormalSingleComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AverageNormalSingleComponent");
        AverageNormalSingleComponent_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "AverageNormalSingleComponent");
        AlignMaxAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AlignMaxAngle");
        RandomYaw_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RandomYaw");
        RandomYaw_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "RandomYaw");
        RandomPitchAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RandomPitchAngle");
        GroundSlopeAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "GroundSlopeAngle");
        Height_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Height");
        LandscapeLayers_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LandscapeLayers");
        LandscapeLayers_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "LandscapeLayers");
        MinimumLayerWeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinimumLayerWeight");
        ExclusionLandscapeLayers_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ExclusionLandscapeLayers");
        ExclusionLandscapeLayers_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "ExclusionLandscapeLayers");
        MinimumExclusionLayerWeight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinimumExclusionLayerWeight");
        CollisionWithWorld_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CollisionWithWorld");
        CollisionWithWorld_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "CollisionWithWorld");
        CollisionScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CollisionScale");
        AverageNormalSampleCount_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AverageNormalSampleCount");
        Mobility_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Mobility");
        CastShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CastShadow");
        CastShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "CastShadow");
        bAffectDynamicIndirectLighting_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAffectDynamicIndirectLighting");
        bAffectDynamicIndirectLighting_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAffectDynamicIndirectLighting");
        bAffectDistanceFieldLighting_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAffectDistanceFieldLighting");
        bAffectDistanceFieldLighting_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAffectDistanceFieldLighting");
        bCastDynamicShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastDynamicShadow");
        bCastDynamicShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastDynamicShadow");
        bCastStaticShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastStaticShadow");
        bCastStaticShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastStaticShadow");
        bCastContactShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastContactShadow");
        bCastContactShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastContactShadow");
        bCastShadowAsTwoSided_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastShadowAsTwoSided");
        bCastShadowAsTwoSided_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastShadowAsTwoSided");
        bReceivesDecals_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bReceivesDecals");
        bReceivesDecals_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bReceivesDecals");
        bOverrideLightMapRes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOverrideLightMapRes");
        bOverrideLightMapRes_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bOverrideLightMapRes");
        ShadowCacheInvalidationBehavior_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShadowCacheInvalidationBehavior");
        OverriddenLightMapRes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OverriddenLightMapRes");
        LightmapType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LightmapType");
        bUseAsOccluder_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseAsOccluder");
        bUseAsOccluder_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bUseAsOccluder");
        bVisibleInRayTracing_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bVisibleInRayTracing");
        bVisibleInRayTracing_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bVisibleInRayTracing");
        bEvaluateWorldPositionOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEvaluateWorldPositionOffset");
        bEvaluateWorldPositionOffset_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bEvaluateWorldPositionOffset");
        WorldPositionOffsetDisableDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "WorldPositionOffsetDisableDistance");
        LightingChannels_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LightingChannels");
        bRenderCustomDepth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bRenderCustomDepth");
        bRenderCustomDepth_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bRenderCustomDepth");
        CustomDepthStencilWriteMask_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CustomDepthStencilWriteMask");
        CustomDepthStencilValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CustomDepthStencilValue");
        TranslucencySortPriority_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TranslucencySortPriority");
        RuntimeVirtualTextures_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RuntimeVirtualTextures");
        RuntimeVirtualTextures_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "RuntimeVirtualTextures");
        VirtualTextureCullMips_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VirtualTextureCullMips");
        VirtualTextureRenderPassType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VirtualTextureRenderPassType");
        bIncludeInHLOD_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIncludeInHLOD");
        bIncludeInHLOD_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIncludeInHLOD");
        
        
        
    }
    
    protected FoliageType(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/Foliage.FoliageType:ZOffset
    static readonly int ZOffset_Offset;
    
    public UnrealSharp.CoreUObject.FloatInterval ZOffset
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.FloatInterval>.FromNative(IntPtr.Add(NativeObject, ZOffset_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.FloatInterval>.ToNative(IntPtr.Add(NativeObject, ZOffset_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Foliage.FoliageType:AlignToNormal
    static readonly int AlignToNormal_Offset;
    static readonly IntPtr AlignToNormal_NativeProperty;
    
    public bool AlignToNormal
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, AlignToNormal_NativeProperty, AlignToNormal_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, AlignToNormal_NativeProperty, AlignToNormal_Offset, value);
        }
    }
    
    // BoolProperty /Script/Foliage.FoliageType:AverageNormal
    static readonly int AverageNormal_Offset;
    static readonly IntPtr AverageNormal_NativeProperty;
    
    public bool AverageNormal
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, AverageNormal_NativeProperty, AverageNormal_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, AverageNormal_NativeProperty, AverageNormal_Offset, value);
        }
    }
    
    // BoolProperty /Script/Foliage.FoliageType:AverageNormalSingleComponent
    static readonly int AverageNormalSingleComponent_Offset;
    static readonly IntPtr AverageNormalSingleComponent_NativeProperty;
    
    public bool AverageNormalSingleComponent
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, AverageNormalSingleComponent_NativeProperty, AverageNormalSingleComponent_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, AverageNormalSingleComponent_NativeProperty, AverageNormalSingleComponent_Offset, value);
        }
    }
    
    // FloatProperty /Script/Foliage.FoliageType:AlignMaxAngle
    static readonly int AlignMaxAngle_Offset;
    
    public float AlignMaxAngle
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, AlignMaxAngle_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, AlignMaxAngle_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Foliage.FoliageType:RandomYaw
    static readonly int RandomYaw_Offset;
    static readonly IntPtr RandomYaw_NativeProperty;
    
    public bool RandomYaw
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, RandomYaw_NativeProperty, RandomYaw_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, RandomYaw_NativeProperty, RandomYaw_Offset, value);
        }
    }
    
    // FloatProperty /Script/Foliage.FoliageType:RandomPitchAngle
    static readonly int RandomPitchAngle_Offset;
    
    public float RandomPitchAngle
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, RandomPitchAngle_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, RandomPitchAngle_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Foliage.FoliageType:GroundSlopeAngle
    static readonly int GroundSlopeAngle_Offset;
    
    public UnrealSharp.CoreUObject.FloatInterval GroundSlopeAngle
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.FloatInterval>.FromNative(IntPtr.Add(NativeObject, GroundSlopeAngle_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.FloatInterval>.ToNative(IntPtr.Add(NativeObject, GroundSlopeAngle_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/Foliage.FoliageType:Height
    static readonly int Height_Offset;
    
    public UnrealSharp.CoreUObject.FloatInterval Height
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.FloatInterval>.FromNative(IntPtr.Add(NativeObject, Height_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.FloatInterval>.ToNative(IntPtr.Add(NativeObject, Height_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/Foliage.FoliageType:LandscapeLayers
    static readonly int LandscapeLayers_Offset;
    static readonly IntPtr LandscapeLayers_NativeProperty;
    UnrealArrayReadWriteMarshaler<Name> LandscapeLayers_Wrapper = null;
    
    public System.Collections.Generic.IList<Name> LandscapeLayers
    {
        get
        {
            if(LandscapeLayers_Wrapper == null)
            {
                LandscapeLayers_Wrapper = new UnrealArrayReadWriteMarshaler<Name>(1, LandscapeLayers_NativeProperty, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative);
            }
            
            return LandscapeLayers_Wrapper.FromNative(IntPtr.Add(NativeObject,LandscapeLayers_Offset),0,this);
        }
    }
    
    // FloatProperty /Script/Foliage.FoliageType:MinimumLayerWeight
    static readonly int MinimumLayerWeight_Offset;
    
    public float MinimumLayerWeight
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinimumLayerWeight_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MinimumLayerWeight_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/Foliage.FoliageType:ExclusionLandscapeLayers
    static readonly int ExclusionLandscapeLayers_Offset;
    static readonly IntPtr ExclusionLandscapeLayers_NativeProperty;
    UnrealArrayReadWriteMarshaler<Name> ExclusionLandscapeLayers_Wrapper = null;
    
    public System.Collections.Generic.IList<Name> ExclusionLandscapeLayers
    {
        get
        {
            if(ExclusionLandscapeLayers_Wrapper == null)
            {
                ExclusionLandscapeLayers_Wrapper = new UnrealArrayReadWriteMarshaler<Name>(1, ExclusionLandscapeLayers_NativeProperty, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative);
            }
            
            return ExclusionLandscapeLayers_Wrapper.FromNative(IntPtr.Add(NativeObject,ExclusionLandscapeLayers_Offset),0,this);
        }
    }
    
    // FloatProperty /Script/Foliage.FoliageType:MinimumExclusionLayerWeight
    static readonly int MinimumExclusionLayerWeight_Offset;
    
    public float MinimumExclusionLayerWeight
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinimumExclusionLayerWeight_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MinimumExclusionLayerWeight_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Foliage.FoliageType:CollisionWithWorld
    static readonly int CollisionWithWorld_Offset;
    static readonly IntPtr CollisionWithWorld_NativeProperty;
    
    public bool CollisionWithWorld
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, CollisionWithWorld_NativeProperty, CollisionWithWorld_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, CollisionWithWorld_NativeProperty, CollisionWithWorld_Offset, value);
        }
    }
    
    // StructProperty /Script/Foliage.FoliageType:CollisionScale
    static readonly int CollisionScale_Offset;
    
    public System.DoubleNumerics.Vector3 CollisionScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, CollisionScale_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, CollisionScale_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Foliage.FoliageType:AverageNormalSampleCount
    static readonly int AverageNormalSampleCount_Offset;
    
    public int AverageNormalSampleCount
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, AverageNormalSampleCount_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, AverageNormalSampleCount_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/Foliage.FoliageType:Mobility
    static readonly int Mobility_Offset;
    
    public UnrealSharp.Engine.EComponentMobility Mobility
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EComponentMobility>.FromNative(IntPtr.Add(NativeObject, Mobility_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Foliage.FoliageType:CastShadow
    static readonly int CastShadow_Offset;
    static readonly IntPtr CastShadow_NativeProperty;
    
    public bool CastShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, CastShadow_NativeProperty, CastShadow_Offset);
        }
    }
    
    // BoolProperty /Script/Foliage.FoliageType:bAffectDynamicIndirectLighting
    static readonly int bAffectDynamicIndirectLighting_Offset;
    static readonly IntPtr bAffectDynamicIndirectLighting_NativeProperty;
    
    public bool bAffectDynamicIndirectLighting
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAffectDynamicIndirectLighting_NativeProperty, bAffectDynamicIndirectLighting_Offset);
        }
    }
    
    // BoolProperty /Script/Foliage.FoliageType:bAffectDistanceFieldLighting
    static readonly int bAffectDistanceFieldLighting_Offset;
    static readonly IntPtr bAffectDistanceFieldLighting_NativeProperty;
    
    public bool bAffectDistanceFieldLighting
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAffectDistanceFieldLighting_NativeProperty, bAffectDistanceFieldLighting_Offset);
        }
    }
    
    // BoolProperty /Script/Foliage.FoliageType:bCastDynamicShadow
    static readonly int bCastDynamicShadow_Offset;
    static readonly IntPtr bCastDynamicShadow_NativeProperty;
    
    public bool bCastDynamicShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastDynamicShadow_NativeProperty, bCastDynamicShadow_Offset);
        }
    }
    
    // BoolProperty /Script/Foliage.FoliageType:bCastStaticShadow
    static readonly int bCastStaticShadow_Offset;
    static readonly IntPtr bCastStaticShadow_NativeProperty;
    
    public bool bCastStaticShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastStaticShadow_NativeProperty, bCastStaticShadow_Offset);
        }
    }
    
    // BoolProperty /Script/Foliage.FoliageType:bCastContactShadow
    static readonly int bCastContactShadow_Offset;
    static readonly IntPtr bCastContactShadow_NativeProperty;
    
    public bool bCastContactShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastContactShadow_NativeProperty, bCastContactShadow_Offset);
        }
    }
    
    // BoolProperty /Script/Foliage.FoliageType:bCastShadowAsTwoSided
    static readonly int bCastShadowAsTwoSided_Offset;
    static readonly IntPtr bCastShadowAsTwoSided_NativeProperty;
    
    public bool bCastShadowAsTwoSided
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastShadowAsTwoSided_NativeProperty, bCastShadowAsTwoSided_Offset);
        }
    }
    
    // BoolProperty /Script/Foliage.FoliageType:bReceivesDecals
    static readonly int bReceivesDecals_Offset;
    static readonly IntPtr bReceivesDecals_NativeProperty;
    
    public bool bReceivesDecals
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bReceivesDecals_NativeProperty, bReceivesDecals_Offset);
        }
    }
    
    // BoolProperty /Script/Foliage.FoliageType:bOverrideLightMapRes
    static readonly int bOverrideLightMapRes_Offset;
    static readonly IntPtr bOverrideLightMapRes_NativeProperty;
    
    public bool bOverrideLightMapRes
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bOverrideLightMapRes_NativeProperty, bOverrideLightMapRes_Offset);
        }
    }
    
    // EnumProperty /Script/Foliage.FoliageType:ShadowCacheInvalidationBehavior
    static readonly int ShadowCacheInvalidationBehavior_Offset;
    
    public UnrealSharp.Engine.EShadowCacheInvalidationBehavior ShadowCacheInvalidationBehavior
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EShadowCacheInvalidationBehavior>.FromNative(IntPtr.Add(NativeObject, ShadowCacheInvalidationBehavior_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Foliage.FoliageType:OverriddenLightMapRes
    static readonly int OverriddenLightMapRes_Offset;
    
    public int OverriddenLightMapRes
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, OverriddenLightMapRes_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/Foliage.FoliageType:LightmapType
    static readonly int LightmapType_Offset;
    
    public UnrealSharp.Engine.ELightmapType LightmapType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ELightmapType>.FromNative(IntPtr.Add(NativeObject, LightmapType_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Foliage.FoliageType:bUseAsOccluder
    static readonly int bUseAsOccluder_Offset;
    static readonly IntPtr bUseAsOccluder_NativeProperty;
    
    public bool bUseAsOccluder
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bUseAsOccluder_NativeProperty, bUseAsOccluder_Offset);
        }
    }
    
    // BoolProperty /Script/Foliage.FoliageType:bVisibleInRayTracing
    static readonly int bVisibleInRayTracing_Offset;
    static readonly IntPtr bVisibleInRayTracing_NativeProperty;
    
    public bool bVisibleInRayTracing
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bVisibleInRayTracing_NativeProperty, bVisibleInRayTracing_Offset);
        }
    }
    
    // BoolProperty /Script/Foliage.FoliageType:bEvaluateWorldPositionOffset
    static readonly int bEvaluateWorldPositionOffset_Offset;
    static readonly IntPtr bEvaluateWorldPositionOffset_NativeProperty;
    
    public bool bEvaluateWorldPositionOffset
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bEvaluateWorldPositionOffset_NativeProperty, bEvaluateWorldPositionOffset_Offset);
        }
    }
    
    // IntProperty /Script/Foliage.FoliageType:WorldPositionOffsetDisableDistance
    static readonly int WorldPositionOffsetDisableDistance_Offset;
    
    public int WorldPositionOffsetDisableDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, WorldPositionOffsetDisableDistance_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Foliage.FoliageType:LightingChannels
    static readonly int LightingChannels_Offset;
    
    public UnrealSharp.Engine.LightingChannels LightingChannels
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.LightingChannelsMarshaler.FromNative(IntPtr.Add(NativeObject, LightingChannels_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Foliage.FoliageType:bRenderCustomDepth
    static readonly int bRenderCustomDepth_Offset;
    static readonly IntPtr bRenderCustomDepth_NativeProperty;
    
    public bool bRenderCustomDepth
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bRenderCustomDepth_NativeProperty, bRenderCustomDepth_Offset);
        }
    }
    
    // EnumProperty /Script/Foliage.FoliageType:CustomDepthStencilWriteMask
    static readonly int CustomDepthStencilWriteMask_Offset;
    
    public UnrealSharp.Engine.ERendererStencilMask CustomDepthStencilWriteMask
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ERendererStencilMask>.FromNative(IntPtr.Add(NativeObject, CustomDepthStencilWriteMask_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Foliage.FoliageType:CustomDepthStencilValue
    static readonly int CustomDepthStencilValue_Offset;
    
    public int CustomDepthStencilValue
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, CustomDepthStencilValue_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Foliage.FoliageType:TranslucencySortPriority
    static readonly int TranslucencySortPriority_Offset;
    
    public int TranslucencySortPriority
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, TranslucencySortPriority_Offset), 0, this);
        }
    }
    
    // ArrayProperty /Script/Foliage.FoliageType:RuntimeVirtualTextures
    static readonly int RuntimeVirtualTextures_Offset;
    static readonly IntPtr RuntimeVirtualTextures_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.RuntimeVirtualTexture> RuntimeVirtualTextures_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.RuntimeVirtualTexture> RuntimeVirtualTextures
    {
        get
        {
            if(RuntimeVirtualTextures_Wrapper == null)
            {
                RuntimeVirtualTextures_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.RuntimeVirtualTexture>(1, RuntimeVirtualTextures_NativeProperty, ObjectMarshaller<UnrealSharp.Engine.RuntimeVirtualTexture>.ToNative, ObjectMarshaller<UnrealSharp.Engine.RuntimeVirtualTexture>.FromNative);
            }
            
            return RuntimeVirtualTextures_Wrapper.FromNative(IntPtr.Add(NativeObject,RuntimeVirtualTextures_Offset),0,this);
        }
    }
    
    // IntProperty /Script/Foliage.FoliageType:VirtualTextureCullMips
    static readonly int VirtualTextureCullMips_Offset;
    
    public int VirtualTextureCullMips
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, VirtualTextureCullMips_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/Foliage.FoliageType:VirtualTextureRenderPassType
    static readonly int VirtualTextureRenderPassType_Offset;
    
    public UnrealSharp.Engine.ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ERuntimeVirtualTextureMainPassType>.FromNative(IntPtr.Add(NativeObject, VirtualTextureRenderPassType_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Foliage.FoliageType:bIncludeInHLOD
    static readonly int bIncludeInHLOD_Offset;
    static readonly IntPtr bIncludeInHLOD_NativeProperty;
    
    public bool bIncludeInHLOD
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIncludeInHLOD_NativeProperty, bIncludeInHLOD_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bIncludeInHLOD_NativeProperty, bIncludeInHLOD_Offset, value);
        }
    }
    
    
}
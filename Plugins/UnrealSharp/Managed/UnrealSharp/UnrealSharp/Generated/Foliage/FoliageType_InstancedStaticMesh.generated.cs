// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Foliage;

[UClass]
public partial class FoliageType_InstancedStaticMesh : UnrealSharp.Foliage.FoliageType
{
    
    static FoliageType_InstancedStaticMesh()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("FoliageType_InstancedStaticMesh");
        
        Mesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Mesh");
        OverrideMaterials_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OverrideMaterials");
        OverrideMaterials_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "OverrideMaterials");
        NaniteOverrideMaterials_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NaniteOverrideMaterials");
        NaniteOverrideMaterials_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "NaniteOverrideMaterials");
        
        
        
    }
    
    protected FoliageType_InstancedStaticMesh(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/Foliage.FoliageType_InstancedStaticMesh:Mesh
    static readonly int Mesh_Offset;
    
    public UnrealSharp.Engine.StaticMesh Mesh
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.StaticMesh>.FromNative(IntPtr.Add(NativeObject, Mesh_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.StaticMesh>.ToNative(IntPtr.Add(NativeObject, Mesh_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/Foliage.FoliageType_InstancedStaticMesh:OverrideMaterials
    static readonly int OverrideMaterials_Offset;
    static readonly IntPtr OverrideMaterials_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.MaterialInterface> OverrideMaterials_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.MaterialInterface> OverrideMaterials
    {
        get
        {
            if(OverrideMaterials_Wrapper == null)
            {
                OverrideMaterials_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.MaterialInterface>(1, OverrideMaterials_NativeProperty, ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative, ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.FromNative);
            }
            
            return OverrideMaterials_Wrapper.FromNative(IntPtr.Add(NativeObject,OverrideMaterials_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/Foliage.FoliageType_InstancedStaticMesh:NaniteOverrideMaterials
    static readonly int NaniteOverrideMaterials_Offset;
    static readonly IntPtr NaniteOverrideMaterials_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.MaterialInterface> NaniteOverrideMaterials_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.MaterialInterface> NaniteOverrideMaterials
    {
        get
        {
            if(NaniteOverrideMaterials_Wrapper == null)
            {
                NaniteOverrideMaterials_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.MaterialInterface>(1, NaniteOverrideMaterials_NativeProperty, ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative, ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.FromNative);
            }
            
            return NaniteOverrideMaterials_Wrapper.FromNative(IntPtr.Add(NativeObject,NaniteOverrideMaterials_Offset),0,this);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Foliage;

[UClass]
public partial class ProceduralFoliageSpawner : UnrealSharp.CoreUObject.Object
{
    
    static ProceduralFoliageSpawner()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("ProceduralFoliageSpawner");
        
        RandomSeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RandomSeed");
        TileSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TileSize");
        NumUniqueTiles_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NumUniqueTiles");
        MinimumQuadTreeSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinimumQuadTreeSize");
        
        Simulate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Simulate");
        Simulate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Simulate_NativeFunction);
        Simulate_NumSteps_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Simulate_NativeFunction, "NumSteps");
        
        
    }
    
    protected ProceduralFoliageSpawner(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // IntProperty /Script/Foliage.ProceduralFoliageSpawner:RandomSeed
    static readonly int RandomSeed_Offset;
    
    public int RandomSeed
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, RandomSeed_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Foliage.ProceduralFoliageSpawner:TileSize
    static readonly int TileSize_Offset;
    
    public float TileSize
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, TileSize_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Foliage.ProceduralFoliageSpawner:NumUniqueTiles
    static readonly int NumUniqueTiles_Offset;
    
    public int NumUniqueTiles
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, NumUniqueTiles_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Foliage.ProceduralFoliageSpawner:MinimumQuadTreeSize
    static readonly int MinimumQuadTreeSize_Offset;
    
    public float MinimumQuadTreeSize
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinimumQuadTreeSize_Offset), 0, this);
        }
    }
    
    // Function /Script/Foliage.ProceduralFoliageSpawner:Simulate
    static readonly IntPtr Simulate_NativeFunction;
    static readonly int Simulate_ParamsSize;
    static readonly int Simulate_NumSteps_Offset;
    
    public void Simulate(int numSteps = -1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Simulate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, Simulate_NumSteps_Offset), 0, null, numSteps);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Simulate_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.FunctionalTesting;

[UClass]
public partial class AutomationLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static AutomationLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AutomationBlueprintFunctionLibrary");
        
        
        TakeHighResScreenshot_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TakeHighResScreenshot");
        TakeHighResScreenshot_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TakeHighResScreenshot_NativeFunction);
        TakeHighResScreenshot_ResX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TakeHighResScreenshot_NativeFunction, "ResX");
        TakeHighResScreenshot_ResY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TakeHighResScreenshot_NativeFunction, "ResY");
        TakeHighResScreenshot_Filename_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TakeHighResScreenshot_NativeFunction, "Filename");
        TakeHighResScreenshot_Camera_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TakeHighResScreenshot_NativeFunction, "Camera");
        TakeHighResScreenshot_bMaskEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TakeHighResScreenshot_NativeFunction, "bMaskEnabled");
        TakeHighResScreenshot_bCaptureHDR_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TakeHighResScreenshot_NativeFunction, "bCaptureHDR");
        TakeHighResScreenshot_ComparisonTolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TakeHighResScreenshot_NativeFunction, "ComparisonTolerance");
        TakeHighResScreenshot_ComparisonNotes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TakeHighResScreenshot_NativeFunction, "ComparisonNotes");
        TakeHighResScreenshot_Delay_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TakeHighResScreenshot_NativeFunction, "Delay");
        TakeHighResScreenshot_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TakeHighResScreenshot_NativeFunction, "ReturnValue");
        SetTestTelemetryStorage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTestTelemetryStorage");
        SetTestTelemetryStorage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTestTelemetryStorage_NativeFunction);
        SetTestTelemetryStorage_StorageName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTestTelemetryStorage_NativeFunction, "StorageName");
        SetScalabilityQualityToLow_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetScalabilityQualityToLow");
        SetScalabilityQualityToLow_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetScalabilityQualityToLow_NativeFunction);
        SetScalabilityQualityToLow_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetScalabilityQualityToLow_NativeFunction, "WorldContextObject");
        SetScalabilityQualityToEpic_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetScalabilityQualityToEpic");
        SetScalabilityQualityToEpic_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetScalabilityQualityToEpic_NativeFunction);
        SetScalabilityQualityToEpic_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetScalabilityQualityToEpic_NativeFunction, "WorldContextObject");
        SetScalabilityQualityLevelRelativeToMax_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetScalabilityQualityLevelRelativeToMax");
        SetScalabilityQualityLevelRelativeToMax_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetScalabilityQualityLevelRelativeToMax_NativeFunction);
        SetScalabilityQualityLevelRelativeToMax_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetScalabilityQualityLevelRelativeToMax_NativeFunction, "WorldContextObject");
        SetScalabilityQualityLevelRelativeToMax_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetScalabilityQualityLevelRelativeToMax_NativeFunction, "Value");
        SetEditorViewportVisualizeBuffer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetEditorViewportVisualizeBuffer");
        SetEditorViewportVisualizeBuffer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetEditorViewportVisualizeBuffer_NativeFunction);
        SetEditorViewportVisualizeBuffer_BufferName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEditorViewportVisualizeBuffer_NativeFunction, "BufferName");
        SetEditorViewportViewMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetEditorViewportViewMode");
        SetEditorViewportViewMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetEditorViewportViewMode_NativeFunction);
        SetEditorViewportViewMode_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEditorViewportViewMode_NativeFunction, "Index");
        GetStatIncMax_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStatIncMax");
        GetStatIncMax_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStatIncMax_NativeFunction);
        GetStatIncMax_StatName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStatIncMax_NativeFunction, "StatName");
        GetStatIncMax_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStatIncMax_NativeFunction, "ReturnValue");
        GetStatIncAverage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStatIncAverage");
        GetStatIncAverage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStatIncAverage_NativeFunction);
        GetStatIncAverage_StatName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStatIncAverage_NativeFunction, "StatName");
        GetStatIncAverage_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStatIncAverage_NativeFunction, "ReturnValue");
        GetStatExcMax_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStatExcMax");
        GetStatExcMax_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStatExcMax_NativeFunction);
        GetStatExcMax_StatName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStatExcMax_NativeFunction, "StatName");
        GetStatExcMax_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStatExcMax_NativeFunction, "ReturnValue");
        GetStatExcAverage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStatExcAverage");
        GetStatExcAverage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStatExcAverage_NativeFunction);
        GetStatExcAverage_StatName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStatExcAverage_NativeFunction, "StatName");
        GetStatExcAverage_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStatExcAverage_NativeFunction, "ReturnValue");
        GetStatCallCount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStatCallCount");
        GetStatCallCount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStatCallCount_NativeFunction);
        GetStatCallCount_StatName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStatCallCount_NativeFunction, "StatName");
        GetStatCallCount_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStatCallCount_NativeFunction, "ReturnValue");
        GetDefaultScreenshotOptionsForRendering_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDefaultScreenshotOptionsForRendering");
        GetDefaultScreenshotOptionsForRendering_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDefaultScreenshotOptionsForRendering_NativeFunction);
        GetDefaultScreenshotOptionsForRendering_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultScreenshotOptionsForRendering_NativeFunction, "Tolerance");
        GetDefaultScreenshotOptionsForRendering_Delay_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultScreenshotOptionsForRendering_NativeFunction, "Delay");
        GetDefaultScreenshotOptionsForRendering_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultScreenshotOptionsForRendering_NativeFunction, "ReturnValue");
        GetDefaultScreenshotOptionsForGameplay_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDefaultScreenshotOptionsForGameplay");
        GetDefaultScreenshotOptionsForGameplay_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDefaultScreenshotOptionsForGameplay_NativeFunction);
        GetDefaultScreenshotOptionsForGameplay_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultScreenshotOptionsForGameplay_NativeFunction, "Tolerance");
        GetDefaultScreenshotOptionsForGameplay_Delay_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultScreenshotOptionsForGameplay_NativeFunction, "Delay");
        GetDefaultScreenshotOptionsForGameplay_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDefaultScreenshotOptionsForGameplay_NativeFunction, "ReturnValue");
        FinishLoadingBeforeScreenshot_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FinishLoadingBeforeScreenshot");
        EnableStatGroup_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EnableStatGroup");
        EnableStatGroup_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EnableStatGroup_NativeFunction);
        EnableStatGroup_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EnableStatGroup_NativeFunction, "WorldContextObject");
        EnableStatGroup_GroupName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EnableStatGroup_NativeFunction, "GroupName");
        DisableStatGroup_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DisableStatGroup");
        DisableStatGroup_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DisableStatGroup_NativeFunction);
        DisableStatGroup_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DisableStatGroup_NativeFunction, "WorldContextObject");
        DisableStatGroup_GroupName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DisableStatGroup_NativeFunction, "GroupName");
        CompareImageAgainstReference_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CompareImageAgainstReference");
        CompareImageAgainstReference_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CompareImageAgainstReference_NativeFunction);
        CompareImageAgainstReference_ImageFilePath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CompareImageAgainstReference_NativeFunction, "ImageFilePath");
        CompareImageAgainstReference_ComparisonName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CompareImageAgainstReference_NativeFunction, "ComparisonName");
        CompareImageAgainstReference_ComparisonTolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CompareImageAgainstReference_NativeFunction, "ComparisonTolerance");
        CompareImageAgainstReference_ComparisonNotes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CompareImageAgainstReference_NativeFunction, "ComparisonNotes");
        CompareImageAgainstReference_WorldContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CompareImageAgainstReference_NativeFunction, "WorldContextObject");
        CompareImageAgainstReference_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CompareImageAgainstReference_NativeFunction, "ReturnValue");
        AreAutomatedTestsRunning_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AreAutomatedTestsRunning");
        AreAutomatedTestsRunning_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AreAutomatedTestsRunning_NativeFunction);
        AreAutomatedTestsRunning_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AreAutomatedTestsRunning_NativeFunction, "ReturnValue");
        AddTestTelemetryData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddTestTelemetryData");
        AddTestTelemetryData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddTestTelemetryData_NativeFunction);
        AddTestTelemetryData_DataPoint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTestTelemetryData_NativeFunction, "DataPoint");
        AddTestTelemetryData_Measurement_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTestTelemetryData_NativeFunction, "Measurement");
        AddTestTelemetryData_Context_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTestTelemetryData_NativeFunction, "Context");
        AddExpectedLogError_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddExpectedLogError");
        AddExpectedLogError_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddExpectedLogError_NativeFunction);
        AddExpectedLogError_ExpectedPatternString_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddExpectedLogError_NativeFunction, "ExpectedPatternString");
        AddExpectedLogError_Occurrences_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddExpectedLogError_NativeFunction, "Occurrences");
        AddExpectedLogError_ExactMatch_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddExpectedLogError_NativeFunction, "ExactMatch");
        
        
    }
    
    protected AutomationLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/FunctionalTesting.AutomationBlueprintFunctionLibrary:TakeHighResScreenshot
    static readonly IntPtr TakeHighResScreenshot_NativeFunction;
    static readonly int TakeHighResScreenshot_ParamsSize;
    static readonly int TakeHighResScreenshot_ResX_Offset;
    static readonly int TakeHighResScreenshot_ResY_Offset;
    static readonly int TakeHighResScreenshot_Filename_Offset;
    static readonly int TakeHighResScreenshot_Camera_Offset;
    static readonly int TakeHighResScreenshot_bMaskEnabled_Offset;
    static readonly int TakeHighResScreenshot_bCaptureHDR_Offset;
    static readonly int TakeHighResScreenshot_ComparisonTolerance_Offset;
    static readonly int TakeHighResScreenshot_ComparisonNotes_Offset;
    static readonly int TakeHighResScreenshot_Delay_Offset;
    static readonly int TakeHighResScreenshot_ReturnValue_Offset;
    
    public static UnrealSharp.FunctionalTesting.AutomationEditorTask TakeHighResScreenshot(int resX, int resY, string filename, UnrealSharp.Engine.CameraActor camera = default(UnrealSharp.Engine.CameraActor), bool bMaskEnabled = false, bool bCaptureHDR = false, UnrealSharp.FunctionalTesting.EComparisonTolerance comparisonTolerance = UnrealSharp.FunctionalTesting.EComparisonTolerance.Low, string comparisonNotes = "", float delay = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TakeHighResScreenshot_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, TakeHighResScreenshot_ResX_Offset), 0, null, resX);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, TakeHighResScreenshot_ResY_Offset), 0, null, resY);
            IntPtr Filename_NativePtr = IntPtr.Add(ParamsBuffer,TakeHighResScreenshot_Filename_Offset);
            StringMarshaller.ToNative(Filename_NativePtr,0,null,filename);
            ObjectMarshaller<UnrealSharp.Engine.CameraActor>.ToNative(IntPtr.Add(ParamsBuffer, TakeHighResScreenshot_Camera_Offset), 0, null, camera);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, TakeHighResScreenshot_bMaskEnabled_Offset), 0, null, bMaskEnabled);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, TakeHighResScreenshot_bCaptureHDR_Offset), 0, null, bCaptureHDR);
            BlittableMarshaller<UnrealSharp.FunctionalTesting.EComparisonTolerance>.ToNative(IntPtr.Add(ParamsBuffer, TakeHighResScreenshot_ComparisonTolerance_Offset), 0, null, comparisonTolerance);
            IntPtr ComparisonNotes_NativePtr = IntPtr.Add(ParamsBuffer,TakeHighResScreenshot_ComparisonNotes_Offset);
            StringMarshaller.ToNative(ComparisonNotes_NativePtr,0,null,comparisonNotes);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, TakeHighResScreenshot_Delay_Offset), 0, null, delay);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, TakeHighResScreenshot_NativeFunction, ParamsBuffer);
            
            UnrealSharp.FunctionalTesting.AutomationEditorTask returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.FunctionalTesting.AutomationEditorTask>.FromNative(IntPtr.Add(ParamsBuffer, TakeHighResScreenshot_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(Filename_NativePtr, 0);
            StringMarshaller.DestructInstance(ComparisonNotes_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationBlueprintFunctionLibrary:SetTestTelemetryStorage
    static readonly IntPtr SetTestTelemetryStorage_NativeFunction;
    static readonly int SetTestTelemetryStorage_ParamsSize;
    static readonly int SetTestTelemetryStorage_StorageName_Offset;
    
    public static void SetTestTelemetryStorage(string storageName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTestTelemetryStorage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr StorageName_NativePtr = IntPtr.Add(ParamsBuffer,SetTestTelemetryStorage_StorageName_Offset);
            StringMarshaller.ToNative(StorageName_NativePtr,0,null,storageName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetTestTelemetryStorage_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(StorageName_NativePtr, 0);
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationBlueprintFunctionLibrary:SetScalabilityQualityToLow
    static readonly IntPtr SetScalabilityQualityToLow_NativeFunction;
    static readonly int SetScalabilityQualityToLow_ParamsSize;
    static readonly int SetScalabilityQualityToLow_WorldContextObject_Offset;
    
    public static void SetScalabilityQualityToLow(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetScalabilityQualityToLow_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetScalabilityQualityToLow_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetScalabilityQualityToLow_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationBlueprintFunctionLibrary:SetScalabilityQualityToEpic
    static readonly IntPtr SetScalabilityQualityToEpic_NativeFunction;
    static readonly int SetScalabilityQualityToEpic_ParamsSize;
    static readonly int SetScalabilityQualityToEpic_WorldContextObject_Offset;
    
    public static void SetScalabilityQualityToEpic(UnrealSharp.CoreUObject.Object worldContextObject)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetScalabilityQualityToEpic_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetScalabilityQualityToEpic_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetScalabilityQualityToEpic_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationBlueprintFunctionLibrary:SetScalabilityQualityLevelRelativeToMax
    static readonly IntPtr SetScalabilityQualityLevelRelativeToMax_NativeFunction;
    static readonly int SetScalabilityQualityLevelRelativeToMax_ParamsSize;
    static readonly int SetScalabilityQualityLevelRelativeToMax_WorldContextObject_Offset;
    static readonly int SetScalabilityQualityLevelRelativeToMax_Value_Offset;
    
    public static void SetScalabilityQualityLevelRelativeToMax(UnrealSharp.CoreUObject.Object worldContextObject, int value = 1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetScalabilityQualityLevelRelativeToMax_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetScalabilityQualityLevelRelativeToMax_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetScalabilityQualityLevelRelativeToMax_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetScalabilityQualityLevelRelativeToMax_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationBlueprintFunctionLibrary:SetEditorViewportVisualizeBuffer
    static readonly IntPtr SetEditorViewportVisualizeBuffer_NativeFunction;
    static readonly int SetEditorViewportVisualizeBuffer_ParamsSize;
    static readonly int SetEditorViewportVisualizeBuffer_BufferName_Offset;
    
    public static void SetEditorViewportVisualizeBuffer(Name bufferName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetEditorViewportVisualizeBuffer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetEditorViewportVisualizeBuffer_BufferName_Offset), 0, null, bufferName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetEditorViewportVisualizeBuffer_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationBlueprintFunctionLibrary:SetEditorViewportViewMode
    static readonly IntPtr SetEditorViewportViewMode_NativeFunction;
    static readonly int SetEditorViewportViewMode_ParamsSize;
    static readonly int SetEditorViewportViewMode_Index_Offset;
    
    public static void SetEditorViewportViewMode(UnrealSharp.Engine.EViewModeIndex index)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetEditorViewportViewMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EViewModeIndex>.ToNative(IntPtr.Add(ParamsBuffer, SetEditorViewportViewMode_Index_Offset), 0, null, index);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetEditorViewportViewMode_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationBlueprintFunctionLibrary:GetStatIncMax
    static readonly IntPtr GetStatIncMax_NativeFunction;
    static readonly int GetStatIncMax_ParamsSize;
    static readonly int GetStatIncMax_StatName_Offset;
    static readonly int GetStatIncMax_ReturnValue_Offset;
    
    public static float GetStatIncMax(Name statName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStatIncMax_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetStatIncMax_StatName_Offset), 0, null, statName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetStatIncMax_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetStatIncMax_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationBlueprintFunctionLibrary:GetStatIncAverage
    static readonly IntPtr GetStatIncAverage_NativeFunction;
    static readonly int GetStatIncAverage_ParamsSize;
    static readonly int GetStatIncAverage_StatName_Offset;
    static readonly int GetStatIncAverage_ReturnValue_Offset;
    
    public static float GetStatIncAverage(Name statName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStatIncAverage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetStatIncAverage_StatName_Offset), 0, null, statName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetStatIncAverage_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetStatIncAverage_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationBlueprintFunctionLibrary:GetStatExcMax
    static readonly IntPtr GetStatExcMax_NativeFunction;
    static readonly int GetStatExcMax_ParamsSize;
    static readonly int GetStatExcMax_StatName_Offset;
    static readonly int GetStatExcMax_ReturnValue_Offset;
    
    public static float GetStatExcMax(Name statName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStatExcMax_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetStatExcMax_StatName_Offset), 0, null, statName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetStatExcMax_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetStatExcMax_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationBlueprintFunctionLibrary:GetStatExcAverage
    static readonly IntPtr GetStatExcAverage_NativeFunction;
    static readonly int GetStatExcAverage_ParamsSize;
    static readonly int GetStatExcAverage_StatName_Offset;
    static readonly int GetStatExcAverage_ReturnValue_Offset;
    
    public static float GetStatExcAverage(Name statName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStatExcAverage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetStatExcAverage_StatName_Offset), 0, null, statName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetStatExcAverage_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetStatExcAverage_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationBlueprintFunctionLibrary:GetStatCallCount
    static readonly IntPtr GetStatCallCount_NativeFunction;
    static readonly int GetStatCallCount_ParamsSize;
    static readonly int GetStatCallCount_StatName_Offset;
    static readonly int GetStatCallCount_ReturnValue_Offset;
    
    public static float GetStatCallCount(Name statName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStatCallCount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetStatCallCount_StatName_Offset), 0, null, statName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetStatCallCount_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetStatCallCount_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationBlueprintFunctionLibrary:GetDefaultScreenshotOptionsForRendering
    static readonly IntPtr GetDefaultScreenshotOptionsForRendering_NativeFunction;
    static readonly int GetDefaultScreenshotOptionsForRendering_ParamsSize;
    static readonly int GetDefaultScreenshotOptionsForRendering_Tolerance_Offset;
    static readonly int GetDefaultScreenshotOptionsForRendering_Delay_Offset;
    static readonly int GetDefaultScreenshotOptionsForRendering_ReturnValue_Offset;
    
    public static UnrealSharp.FunctionalTesting.AutomationScreenshotOptions GetDefaultScreenshotOptionsForRendering(UnrealSharp.FunctionalTesting.EComparisonTolerance tolerance = UnrealSharp.FunctionalTesting.EComparisonTolerance.Low, float delay = 0.200000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDefaultScreenshotOptionsForRendering_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.FunctionalTesting.EComparisonTolerance>.ToNative(IntPtr.Add(ParamsBuffer, GetDefaultScreenshotOptionsForRendering_Tolerance_Offset), 0, null, tolerance);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetDefaultScreenshotOptionsForRendering_Delay_Offset), 0, null, delay);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetDefaultScreenshotOptionsForRendering_NativeFunction, ParamsBuffer);
            
            UnrealSharp.FunctionalTesting.AutomationScreenshotOptions returnValue;
            returnValue = UnrealSharp.FunctionalTesting.AutomationScreenshotOptionsMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetDefaultScreenshotOptionsForRendering_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationBlueprintFunctionLibrary:GetDefaultScreenshotOptionsForGameplay
    static readonly IntPtr GetDefaultScreenshotOptionsForGameplay_NativeFunction;
    static readonly int GetDefaultScreenshotOptionsForGameplay_ParamsSize;
    static readonly int GetDefaultScreenshotOptionsForGameplay_Tolerance_Offset;
    static readonly int GetDefaultScreenshotOptionsForGameplay_Delay_Offset;
    static readonly int GetDefaultScreenshotOptionsForGameplay_ReturnValue_Offset;
    
    public static UnrealSharp.FunctionalTesting.AutomationScreenshotOptions GetDefaultScreenshotOptionsForGameplay(UnrealSharp.FunctionalTesting.EComparisonTolerance tolerance = UnrealSharp.FunctionalTesting.EComparisonTolerance.Low, float delay = 0.200000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDefaultScreenshotOptionsForGameplay_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.FunctionalTesting.EComparisonTolerance>.ToNative(IntPtr.Add(ParamsBuffer, GetDefaultScreenshotOptionsForGameplay_Tolerance_Offset), 0, null, tolerance);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, GetDefaultScreenshotOptionsForGameplay_Delay_Offset), 0, null, delay);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetDefaultScreenshotOptionsForGameplay_NativeFunction, ParamsBuffer);
            
            UnrealSharp.FunctionalTesting.AutomationScreenshotOptions returnValue;
            returnValue = UnrealSharp.FunctionalTesting.AutomationScreenshotOptionsMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetDefaultScreenshotOptionsForGameplay_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationBlueprintFunctionLibrary:FinishLoadingBeforeScreenshot
    static readonly IntPtr FinishLoadingBeforeScreenshot_NativeFunction;
    
    public static void FinishLoadingBeforeScreenshot()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FinishLoadingBeforeScreenshot_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationBlueprintFunctionLibrary:EnableStatGroup
    static readonly IntPtr EnableStatGroup_NativeFunction;
    static readonly int EnableStatGroup_ParamsSize;
    static readonly int EnableStatGroup_WorldContextObject_Offset;
    static readonly int EnableStatGroup_GroupName_Offset;
    
    public static void EnableStatGroup(UnrealSharp.CoreUObject.Object worldContextObject, Name groupName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EnableStatGroup_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, EnableStatGroup_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, EnableStatGroup_GroupName_Offset), 0, null, groupName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EnableStatGroup_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationBlueprintFunctionLibrary:DisableStatGroup
    static readonly IntPtr DisableStatGroup_NativeFunction;
    static readonly int DisableStatGroup_ParamsSize;
    static readonly int DisableStatGroup_WorldContextObject_Offset;
    static readonly int DisableStatGroup_GroupName_Offset;
    
    public static void DisableStatGroup(UnrealSharp.CoreUObject.Object worldContextObject, Name groupName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DisableStatGroup_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DisableStatGroup_WorldContextObject_Offset), 0, null, worldContextObject);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, DisableStatGroup_GroupName_Offset), 0, null, groupName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DisableStatGroup_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationBlueprintFunctionLibrary:CompareImageAgainstReference
    static readonly IntPtr CompareImageAgainstReference_NativeFunction;
    static readonly int CompareImageAgainstReference_ParamsSize;
    static readonly int CompareImageAgainstReference_ImageFilePath_Offset;
    static readonly int CompareImageAgainstReference_ComparisonName_Offset;
    static readonly int CompareImageAgainstReference_ComparisonTolerance_Offset;
    static readonly int CompareImageAgainstReference_ComparisonNotes_Offset;
    static readonly int CompareImageAgainstReference_WorldContextObject_Offset;
    static readonly int CompareImageAgainstReference_ReturnValue_Offset;
    
    public static bool CompareImageAgainstReference(string imageFilePath, string comparisonName, UnrealSharp.FunctionalTesting.EComparisonTolerance comparisonTolerance = UnrealSharp.FunctionalTesting.EComparisonTolerance.Low, string comparisonNotes = "", UnrealSharp.CoreUObject.Object worldContextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CompareImageAgainstReference_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ImageFilePath_NativePtr = IntPtr.Add(ParamsBuffer,CompareImageAgainstReference_ImageFilePath_Offset);
            StringMarshaller.ToNative(ImageFilePath_NativePtr,0,null,imageFilePath);
            IntPtr ComparisonName_NativePtr = IntPtr.Add(ParamsBuffer,CompareImageAgainstReference_ComparisonName_Offset);
            StringMarshaller.ToNative(ComparisonName_NativePtr,0,null,comparisonName);
            BlittableMarshaller<UnrealSharp.FunctionalTesting.EComparisonTolerance>.ToNative(IntPtr.Add(ParamsBuffer, CompareImageAgainstReference_ComparisonTolerance_Offset), 0, null, comparisonTolerance);
            IntPtr ComparisonNotes_NativePtr = IntPtr.Add(ParamsBuffer,CompareImageAgainstReference_ComparisonNotes_Offset);
            StringMarshaller.ToNative(ComparisonNotes_NativePtr,0,null,comparisonNotes);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, CompareImageAgainstReference_WorldContextObject_Offset), 0, null, worldContextObject);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CompareImageAgainstReference_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CompareImageAgainstReference_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ImageFilePath_NativePtr, 0);
            StringMarshaller.DestructInstance(ComparisonName_NativePtr, 0);
            StringMarshaller.DestructInstance(ComparisonNotes_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationBlueprintFunctionLibrary:AreAutomatedTestsRunning
    static readonly IntPtr AreAutomatedTestsRunning_NativeFunction;
    static readonly int AreAutomatedTestsRunning_ParamsSize;
    static readonly int AreAutomatedTestsRunning_ReturnValue_Offset;
    
    public static bool AreAutomatedTestsRunning()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AreAutomatedTestsRunning_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AreAutomatedTestsRunning_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AreAutomatedTestsRunning_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationBlueprintFunctionLibrary:AddTestTelemetryData
    static readonly IntPtr AddTestTelemetryData_NativeFunction;
    static readonly int AddTestTelemetryData_ParamsSize;
    static readonly int AddTestTelemetryData_DataPoint_Offset;
    static readonly int AddTestTelemetryData_Measurement_Offset;
    static readonly int AddTestTelemetryData_Context_Offset;
    
    public static void AddTestTelemetryData(string dataPoint, float measurement, string context)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddTestTelemetryData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr DataPoint_NativePtr = IntPtr.Add(ParamsBuffer,AddTestTelemetryData_DataPoint_Offset);
            StringMarshaller.ToNative(DataPoint_NativePtr,0,null,dataPoint);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddTestTelemetryData_Measurement_Offset), 0, null, measurement);
            IntPtr Context_NativePtr = IntPtr.Add(ParamsBuffer,AddTestTelemetryData_Context_Offset);
            StringMarshaller.ToNative(Context_NativePtr,0,null,context);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddTestTelemetryData_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(DataPoint_NativePtr, 0);
            StringMarshaller.DestructInstance(Context_NativePtr, 0);
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationBlueprintFunctionLibrary:AddExpectedLogError
    static readonly IntPtr AddExpectedLogError_NativeFunction;
    static readonly int AddExpectedLogError_ParamsSize;
    static readonly int AddExpectedLogError_ExpectedPatternString_Offset;
    static readonly int AddExpectedLogError_Occurrences_Offset;
    static readonly int AddExpectedLogError_ExactMatch_Offset;
    
    public static void AddExpectedLogError(string expectedPatternString, int occurrences = 1, bool exactMatch = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddExpectedLogError_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpectedPatternString_NativePtr = IntPtr.Add(ParamsBuffer,AddExpectedLogError_ExpectedPatternString_Offset);
            StringMarshaller.ToNative(ExpectedPatternString_NativePtr,0,null,expectedPatternString);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, AddExpectedLogError_Occurrences_Offset), 0, null, occurrences);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddExpectedLogError_ExactMatch_Offset), 0, null, exactMatch);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AddExpectedLogError_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(ExpectedPatternString_NativePtr, 0);
        }
    }
    
    
}
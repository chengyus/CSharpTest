// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.FunctionalTesting;

[UClass]
public partial class AutomationPerformaceHelper : UnrealSharp.CoreUObject.Object
{
    
    static AutomationPerformaceHelper()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("AutomationPerformaceHelper");
        
        
        WriteLogFile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "WriteLogFile");
        WriteLogFile_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(WriteLogFile_NativeFunction);
        WriteLogFile_CaptureDir_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WriteLogFile_NativeFunction, "CaptureDir");
        WriteLogFile_CaptureExtension_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(WriteLogFile_NativeFunction, "CaptureExtension");
        TriggerGPUTraceIfRecordFallsBelowBudget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TriggerGPUTraceIfRecordFallsBelowBudget");
        Tick_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Tick");
        Tick_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Tick_NativeFunction);
        Tick_DeltaSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Tick_NativeFunction, "DeltaSeconds");
        StopCPUProfiling_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopCPUProfiling");
        StartCPUProfiling_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartCPUProfiling");
        Sample_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Sample");
        Sample_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Sample_NativeFunction);
        Sample_DeltaSeconds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Sample_NativeFunction, "DeltaSeconds");
        OnBeginTests_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnBeginTests");
        OnAllTestsComplete_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnAllTestsComplete");
        IsRecording_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsRecording");
        IsRecording_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsRecording_NativeFunction);
        IsRecording_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsRecording_NativeFunction, "ReturnValue");
        IsCurrentRecordWithinRenderThreadBudget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsCurrentRecordWithinRenderThreadBudget");
        IsCurrentRecordWithinRenderThreadBudget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsCurrentRecordWithinRenderThreadBudget_NativeFunction);
        IsCurrentRecordWithinRenderThreadBudget_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsCurrentRecordWithinRenderThreadBudget_NativeFunction, "ReturnValue");
        IsCurrentRecordWithinGPUBudget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsCurrentRecordWithinGPUBudget");
        IsCurrentRecordWithinGPUBudget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsCurrentRecordWithinGPUBudget_NativeFunction);
        IsCurrentRecordWithinGPUBudget_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsCurrentRecordWithinGPUBudget_NativeFunction, "ReturnValue");
        IsCurrentRecordWithinGameThreadBudget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsCurrentRecordWithinGameThreadBudget");
        IsCurrentRecordWithinGameThreadBudget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsCurrentRecordWithinGameThreadBudget_NativeFunction);
        IsCurrentRecordWithinGameThreadBudget_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsCurrentRecordWithinGameThreadBudget_NativeFunction, "ReturnValue");
        EndStatsFile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EndStatsFile");
        EndRecordingBaseline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EndRecordingBaseline");
        EndRecording_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EndRecording");
        BeginStatsFile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BeginStatsFile");
        BeginStatsFile_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BeginStatsFile_NativeFunction);
        BeginStatsFile_RecordName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BeginStatsFile_NativeFunction, "RecordName");
        BeginRecordingBaseline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BeginRecordingBaseline");
        BeginRecordingBaseline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BeginRecordingBaseline_NativeFunction);
        BeginRecordingBaseline_RecordName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BeginRecordingBaseline_NativeFunction, "RecordName");
        BeginRecording_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BeginRecording");
        BeginRecording_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BeginRecording_NativeFunction);
        BeginRecording_RecordName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BeginRecording_NativeFunction, "RecordName");
        BeginRecording_InGPUBudget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BeginRecording_NativeFunction, "InGPUBudget");
        BeginRecording_InRenderThreadBudget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BeginRecording_NativeFunction, "InRenderThreadBudget");
        BeginRecording_InGameThreadBudget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BeginRecording_NativeFunction, "InGameThreadBudget");
        
        
    }
    
    protected AutomationPerformaceHelper(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/FunctionalTesting.AutomationPerformaceHelper:WriteLogFile
    static readonly IntPtr WriteLogFile_NativeFunction;
    static readonly int WriteLogFile_ParamsSize;
    static readonly int WriteLogFile_CaptureDir_Offset;
    static readonly int WriteLogFile_CaptureExtension_Offset;
    
    public void WriteLogFile(string captureDir, string captureExtension)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[WriteLogFile_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr CaptureDir_NativePtr = IntPtr.Add(ParamsBuffer,WriteLogFile_CaptureDir_Offset);
            StringMarshaller.ToNative(CaptureDir_NativePtr,0,null,captureDir);
            IntPtr CaptureExtension_NativePtr = IntPtr.Add(ParamsBuffer,WriteLogFile_CaptureExtension_Offset);
            StringMarshaller.ToNative(CaptureExtension_NativePtr,0,null,captureExtension);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, WriteLogFile_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(CaptureDir_NativePtr, 0);
            StringMarshaller.DestructInstance(CaptureExtension_NativePtr, 0);
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationPerformaceHelper:TriggerGPUTraceIfRecordFallsBelowBudget
    static readonly IntPtr TriggerGPUTraceIfRecordFallsBelowBudget_NativeFunction;
    
    public void TriggerGPUTraceIfRecordFallsBelowBudget()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, TriggerGPUTraceIfRecordFallsBelowBudget_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationPerformaceHelper:Tick
    static readonly IntPtr Tick_NativeFunction;
    static readonly int Tick_ParamsSize;
    static readonly int Tick_DeltaSeconds_Offset;
    
    public void Tick(float deltaSeconds)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Tick_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Tick_DeltaSeconds_Offset), 0, null, deltaSeconds);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Tick_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationPerformaceHelper:StopCPUProfiling
    static readonly IntPtr StopCPUProfiling_NativeFunction;
    
    public void StopCPUProfiling()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StopCPUProfiling_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationPerformaceHelper:StartCPUProfiling
    static readonly IntPtr StartCPUProfiling_NativeFunction;
    
    public void StartCPUProfiling()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, StartCPUProfiling_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationPerformaceHelper:Sample
    static readonly IntPtr Sample_NativeFunction;
    static readonly int Sample_ParamsSize;
    static readonly int Sample_DeltaSeconds_Offset;
    
    public void Sample(float deltaSeconds)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Sample_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, Sample_DeltaSeconds_Offset), 0, null, deltaSeconds);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Sample_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationPerformaceHelper:OnBeginTests
    static readonly IntPtr OnBeginTests_NativeFunction;
    
    public void OnBeginTests()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnBeginTests_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationPerformaceHelper:OnAllTestsComplete
    static readonly IntPtr OnAllTestsComplete_NativeFunction;
    
    public void OnAllTestsComplete()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnAllTestsComplete_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationPerformaceHelper:IsRecording
    static readonly IntPtr IsRecording_NativeFunction;
    static readonly int IsRecording_ParamsSize;
    static readonly int IsRecording_ReturnValue_Offset;
    
    public bool IsRecording()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsRecording_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsRecording_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsRecording_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationPerformaceHelper:IsCurrentRecordWithinRenderThreadBudget
    static readonly IntPtr IsCurrentRecordWithinRenderThreadBudget_NativeFunction;
    static readonly int IsCurrentRecordWithinRenderThreadBudget_ParamsSize;
    static readonly int IsCurrentRecordWithinRenderThreadBudget_ReturnValue_Offset;
    
    public bool IsCurrentRecordWithinRenderThreadBudget()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsCurrentRecordWithinRenderThreadBudget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsCurrentRecordWithinRenderThreadBudget_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsCurrentRecordWithinRenderThreadBudget_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationPerformaceHelper:IsCurrentRecordWithinGPUBudget
    static readonly IntPtr IsCurrentRecordWithinGPUBudget_NativeFunction;
    static readonly int IsCurrentRecordWithinGPUBudget_ParamsSize;
    static readonly int IsCurrentRecordWithinGPUBudget_ReturnValue_Offset;
    
    public bool IsCurrentRecordWithinGPUBudget()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsCurrentRecordWithinGPUBudget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsCurrentRecordWithinGPUBudget_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsCurrentRecordWithinGPUBudget_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationPerformaceHelper:IsCurrentRecordWithinGameThreadBudget
    static readonly IntPtr IsCurrentRecordWithinGameThreadBudget_NativeFunction;
    static readonly int IsCurrentRecordWithinGameThreadBudget_ParamsSize;
    static readonly int IsCurrentRecordWithinGameThreadBudget_ReturnValue_Offset;
    
    public bool IsCurrentRecordWithinGameThreadBudget()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsCurrentRecordWithinGameThreadBudget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsCurrentRecordWithinGameThreadBudget_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsCurrentRecordWithinGameThreadBudget_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationPerformaceHelper:EndStatsFile
    static readonly IntPtr EndStatsFile_NativeFunction;
    
    public void EndStatsFile()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, EndStatsFile_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationPerformaceHelper:EndRecordingBaseline
    static readonly IntPtr EndRecordingBaseline_NativeFunction;
    
    public void EndRecordingBaseline()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, EndRecordingBaseline_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationPerformaceHelper:EndRecording
    static readonly IntPtr EndRecording_NativeFunction;
    
    public void EndRecording()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, EndRecording_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationPerformaceHelper:BeginStatsFile
    static readonly IntPtr BeginStatsFile_NativeFunction;
    static readonly int BeginStatsFile_ParamsSize;
    static readonly int BeginStatsFile_RecordName_Offset;
    
    public void BeginStatsFile(string recordName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BeginStatsFile_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr RecordName_NativePtr = IntPtr.Add(ParamsBuffer,BeginStatsFile_RecordName_Offset);
            StringMarshaller.ToNative(RecordName_NativePtr,0,null,recordName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BeginStatsFile_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(RecordName_NativePtr, 0);
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationPerformaceHelper:BeginRecordingBaseline
    static readonly IntPtr BeginRecordingBaseline_NativeFunction;
    static readonly int BeginRecordingBaseline_ParamsSize;
    static readonly int BeginRecordingBaseline_RecordName_Offset;
    
    public void BeginRecordingBaseline(string recordName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BeginRecordingBaseline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr RecordName_NativePtr = IntPtr.Add(ParamsBuffer,BeginRecordingBaseline_RecordName_Offset);
            StringMarshaller.ToNative(RecordName_NativePtr,0,null,recordName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BeginRecordingBaseline_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(RecordName_NativePtr, 0);
        }
    }
    
    // Function /Script/FunctionalTesting.AutomationPerformaceHelper:BeginRecording
    static readonly IntPtr BeginRecording_NativeFunction;
    static readonly int BeginRecording_ParamsSize;
    static readonly int BeginRecording_RecordName_Offset;
    static readonly int BeginRecording_InGPUBudget_Offset;
    static readonly int BeginRecording_InRenderThreadBudget_Offset;
    static readonly int BeginRecording_InGameThreadBudget_Offset;
    
    public void BeginRecording(string recordName, float inGPUBudget, float inRenderThreadBudget, float inGameThreadBudget)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BeginRecording_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr RecordName_NativePtr = IntPtr.Add(ParamsBuffer,BeginRecording_RecordName_Offset);
            StringMarshaller.ToNative(RecordName_NativePtr,0,null,recordName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, BeginRecording_InGPUBudget_Offset), 0, null, inGPUBudget);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, BeginRecording_InRenderThreadBudget_Offset), 0, null, inRenderThreadBudget);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, BeginRecording_InGameThreadBudget_Offset), 0, null, inGameThreadBudget);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BeginRecording_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(RecordName_NativePtr, 0);
        }
    }
    
    
}
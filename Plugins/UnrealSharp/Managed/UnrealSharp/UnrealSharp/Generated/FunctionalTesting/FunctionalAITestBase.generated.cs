// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.FunctionalTesting;

[UClass]
abstract public partial class FunctionalAITestBase : UnrealSharp.FunctionalTesting.FunctionalTest
{
    
    static FunctionalAITestBase()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("FunctionalAITestBase");
        
        SpawnLocationRandomizationRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SpawnLocationRandomizationRange");
        SpawnedPawns_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SpawnedPawns");
        SpawnedPawns_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "SpawnedPawns");
        PendingDelayedSpawns_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PendingDelayedSpawns");
        PendingDelayedSpawns_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "PendingDelayedSpawns");
        CurrentSpawnSetIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CurrentSpawnSetIndex");
        CurrentSpawnSetName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CurrentSpawnSetName");
        CurrentSpawnSetName_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "CurrentSpawnSetName");
        bWaitForNavMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bWaitForNavMesh");
        bWaitForNavMesh_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bWaitForNavMesh");
        
        IsOneOfSpawnedPawns_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsOneOfSpawnedPawns");
        IsOneOfSpawnedPawns_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsOneOfSpawnedPawns_NativeFunction);
        IsOneOfSpawnedPawns_Actor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsOneOfSpawnedPawns_NativeFunction, "Actor");
        IsOneOfSpawnedPawns_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsOneOfSpawnedPawns_NativeFunction, "ReturnValue");
        
        
    }
    
    protected FunctionalAITestBase(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/FunctionalTesting.FunctionalAITestBase:SpawnLocationRandomizationRange
    static readonly int SpawnLocationRandomizationRange_Offset;
    
    public float SpawnLocationRandomizationRange
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SpawnLocationRandomizationRange_Offset), 0, this);
        }
    }
    
    // ArrayProperty /Script/FunctionalTesting.FunctionalAITestBase:SpawnedPawns
    static readonly int SpawnedPawns_Offset;
    static readonly IntPtr SpawnedPawns_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.Pawn> SpawnedPawns_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.Engine.Pawn> SpawnedPawns
    {
        get
        {
            if(SpawnedPawns_Wrapper == null)
            {
                SpawnedPawns_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.Pawn>(1, SpawnedPawns_NativeProperty, ObjectMarshaller<UnrealSharp.Engine.Pawn>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Pawn>.FromNative);
            }
            
            return SpawnedPawns_Wrapper.FromNative(IntPtr.Add(NativeObject,SpawnedPawns_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/FunctionalTesting.FunctionalAITestBase:PendingDelayedSpawns
    static readonly int PendingDelayedSpawns_Offset;
    static readonly IntPtr PendingDelayedSpawns_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.FunctionalTesting.PendingDelayedSpawn> PendingDelayedSpawns_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.FunctionalTesting.PendingDelayedSpawn> PendingDelayedSpawns
    {
        get
        {
            if(PendingDelayedSpawns_Wrapper == null)
            {
                PendingDelayedSpawns_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.FunctionalTesting.PendingDelayedSpawn>(1, PendingDelayedSpawns_NativeProperty, UnrealSharp.FunctionalTesting.PendingDelayedSpawnMarshaler.ToNative, UnrealSharp.FunctionalTesting.PendingDelayedSpawnMarshaler.FromNative);
            }
            
            return PendingDelayedSpawns_Wrapper.FromNative(IntPtr.Add(NativeObject,PendingDelayedSpawns_Offset),0,this);
        }
    }
    
    // IntProperty /Script/FunctionalTesting.FunctionalAITestBase:CurrentSpawnSetIndex
    static readonly int CurrentSpawnSetIndex_Offset;
    
    public int CurrentSpawnSetIndex
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, CurrentSpawnSetIndex_Offset), 0, this);
        }
    }
    
    // StrProperty /Script/FunctionalTesting.FunctionalAITestBase:CurrentSpawnSetName
    static readonly int CurrentSpawnSetName_Offset;
    static readonly IntPtr CurrentSpawnSetName_NativeProperty;
    
    public string CurrentSpawnSetName
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,CurrentSpawnSetName_Offset),0,this);
        }
    }
    
    // BoolProperty /Script/FunctionalTesting.FunctionalAITestBase:bWaitForNavMesh
    static readonly int bWaitForNavMesh_Offset;
    static readonly IntPtr bWaitForNavMesh_NativeProperty;
    
    public bool bWaitForNavMesh
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bWaitForNavMesh_NativeProperty, bWaitForNavMesh_Offset);
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalAITestBase:IsOneOfSpawnedPawns
    static readonly IntPtr IsOneOfSpawnedPawns_NativeFunction;
    static readonly int IsOneOfSpawnedPawns_ParamsSize;
    static readonly int IsOneOfSpawnedPawns_Actor_Offset;
    static readonly int IsOneOfSpawnedPawns_ReturnValue_Offset;
    
    public bool IsOneOfSpawnedPawns(UnrealSharp.Engine.Actor actor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsOneOfSpawnedPawns_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, IsOneOfSpawnedPawns_Actor_Offset), 0, null, actor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsOneOfSpawnedPawns_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsOneOfSpawnedPawns_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
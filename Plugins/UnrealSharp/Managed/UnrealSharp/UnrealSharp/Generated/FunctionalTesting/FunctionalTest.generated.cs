// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.FunctionalTesting;

[UClass]
public partial class FunctionalTest : UnrealSharp.Engine.Actor
{
    
    static FunctionalTest()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("FunctionalTest");
        
        TestLabel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TestLabel");
        TestLabel_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "TestLabel");
        Author_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Author");
        Author_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Author");
        Description_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Description");
        Description_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Description");
        bIsEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIsEnabled");
        bIsEnabled_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bIsEnabled");
        LogErrorHandling_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LogErrorHandling");
        LogWarningHandling_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LogWarningHandling");
        ObservationPoint_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ObservationPoint");
        RandomNumbersStream_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RandomNumbersStream");
        Result_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Result");
        PreparationTimeLimit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PreparationTimeLimit");
        TimeLimit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TimeLimit");
        TimesUpMessage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TimesUpMessage");
        TimesUpMessage_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "TimesUpMessage");
        TotalTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TotalTime");
        
        SetTimeLimit_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTimeLimit");
        SetTimeLimit_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTimeLimit_NativeFunction);
        SetTimeLimit_NewTimeLimit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTimeLimit_NativeFunction, "NewTimeLimit");
        SetTimeLimit_ResultWhenTimeRunsOut_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTimeLimit_NativeFunction, "ResultWhenTimeRunsOut");
        SetConsoleVariableFromInteger_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetConsoleVariableFromInteger");
        SetConsoleVariableFromInteger_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetConsoleVariableFromInteger_NativeFunction);
        SetConsoleVariableFromInteger_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConsoleVariableFromInteger_NativeFunction, "Name");
        SetConsoleVariableFromInteger_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConsoleVariableFromInteger_NativeFunction, "InValue");
        SetConsoleVariableFromFloat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetConsoleVariableFromFloat");
        SetConsoleVariableFromFloat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetConsoleVariableFromFloat_NativeFunction);
        SetConsoleVariableFromFloat_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConsoleVariableFromFloat_NativeFunction, "Name");
        SetConsoleVariableFromFloat_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConsoleVariableFromFloat_NativeFunction, "InValue");
        SetConsoleVariableFromBoolean_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetConsoleVariableFromBoolean");
        SetConsoleVariableFromBoolean_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetConsoleVariableFromBoolean_NativeFunction);
        SetConsoleVariableFromBoolean_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConsoleVariableFromBoolean_NativeFunction, "Name");
        SetConsoleVariableFromBoolean_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConsoleVariableFromBoolean_NativeFunction, "InValue");
        SetConsoleVariable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetConsoleVariable");
        SetConsoleVariable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetConsoleVariable_NativeFunction);
        SetConsoleVariable_Name_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConsoleVariable_NativeFunction, "Name");
        SetConsoleVariable_InValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConsoleVariable_NativeFunction, "InValue");
        RegisterAutoDestroyActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RegisterAutoDestroyActor");
        RegisterAutoDestroyActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RegisterAutoDestroyActor_NativeFunction);
        RegisterAutoDestroyActor_ActorToAutoDestroy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RegisterAutoDestroyActor_NativeFunction, "ActorToAutoDestroy");
        LogMessage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LogMessage");
        LogMessage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LogMessage_NativeFunction);
        LogMessage_Message_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LogMessage_NativeFunction, "Message");
        IsRunning_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsRunning");
        IsRunning_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsRunning_NativeFunction);
        IsRunning_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsRunning_NativeFunction, "ReturnValue");
        IsEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsEnabled");
        IsEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsEnabled_NativeFunction);
        IsEnabled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsEnabled_NativeFunction, "ReturnValue");
        GetCurrentRerunReason_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentRerunReason");
        GetCurrentRerunReason_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentRerunReason_NativeFunction);
        GetCurrentRerunReason_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentRerunReason_NativeFunction, "ReturnValue");
        FinishTest_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FinishTest");
        FinishTest_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FinishTest_NativeFunction);
        FinishTest_TestResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FinishTest_NativeFunction, "TestResult");
        FinishTest_Message_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FinishTest_NativeFunction, "Message");
        AssertValue_Int_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertValue_Int");
        AssertValue_Int_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertValue_Int_NativeFunction);
        AssertValue_Int_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_Int_NativeFunction, "Actual");
        AssertValue_Int_ShouldBe_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_Int_NativeFunction, "ShouldBe");
        AssertValue_Int_Expected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_Int_NativeFunction, "Expected");
        AssertValue_Int_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_Int_NativeFunction, "What");
        AssertValue_Int_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_Int_NativeFunction, "ContextObject");
        AssertValue_Int_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_Int_NativeFunction, "ReturnValue");
        AssertValue_Float_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertValue_Float");
        AssertValue_Float_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertValue_Float_NativeFunction);
        AssertValue_Float_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_Float_NativeFunction, "Actual");
        AssertValue_Float_ShouldBe_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_Float_NativeFunction, "ShouldBe");
        AssertValue_Float_Expected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_Float_NativeFunction, "Expected");
        AssertValue_Float_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_Float_NativeFunction, "What");
        AssertValue_Float_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_Float_NativeFunction, "ContextObject");
        AssertValue_Float_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_Float_NativeFunction, "ReturnValue");
        AssertValue_Double_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertValue_Double");
        AssertValue_Double_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertValue_Double_NativeFunction);
        AssertValue_Double_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_Double_NativeFunction, "Actual");
        AssertValue_Double_ShouldBe_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_Double_NativeFunction, "ShouldBe");
        AssertValue_Double_Expected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_Double_NativeFunction, "Expected");
        AssertValue_Double_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_Double_NativeFunction, "What");
        AssertValue_Double_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_Double_NativeFunction, "ContextObject");
        AssertValue_Double_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_Double_NativeFunction, "ReturnValue");
        AssertValue_DateTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertValue_DateTime");
        AssertValue_DateTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertValue_DateTime_NativeFunction);
        AssertValue_DateTime_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_DateTime_NativeFunction, "Actual");
        AssertValue_DateTime_ShouldBe_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_DateTime_NativeFunction, "ShouldBe");
        AssertValue_DateTime_Expected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_DateTime_NativeFunction, "Expected");
        AssertValue_DateTime_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_DateTime_NativeFunction, "What");
        AssertValue_DateTime_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_DateTime_NativeFunction, "ContextObject");
        AssertValue_DateTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertValue_DateTime_NativeFunction, "ReturnValue");
        AssertTrue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertTrue");
        AssertTrue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertTrue_NativeFunction);
        AssertTrue_Condition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertTrue_NativeFunction, "Condition");
        AssertTrue_Message_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertTrue_NativeFunction, "Message");
        AssertTrue_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertTrue_NativeFunction, "ContextObject");
        AssertTrue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertTrue_NativeFunction, "ReturnValue");
        AssertNotEqual_Vector4_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertNotEqual_Vector4");
        AssertNotEqual_Vector4_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertNotEqual_Vector4_NativeFunction);
        AssertNotEqual_Vector4_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Vector4_NativeFunction, "Actual");
        AssertNotEqual_Vector4_NotExpected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Vector4_NativeFunction, "NotExpected");
        AssertNotEqual_Vector4_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Vector4_NativeFunction, "What");
        AssertNotEqual_Vector4_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Vector4_NativeFunction, "ContextObject");
        AssertNotEqual_Vector4_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Vector4_NativeFunction, "ReturnValue");
        AssertNotEqual_Vector2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertNotEqual_Vector2D");
        AssertNotEqual_Vector2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertNotEqual_Vector2D_NativeFunction);
        AssertNotEqual_Vector2D_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Vector2D_NativeFunction, "Actual");
        AssertNotEqual_Vector2D_NotExpected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Vector2D_NativeFunction, "NotExpected");
        AssertNotEqual_Vector2D_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Vector2D_NativeFunction, "What");
        AssertNotEqual_Vector2D_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Vector2D_NativeFunction, "ContextObject");
        AssertNotEqual_Vector2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Vector2D_NativeFunction, "ReturnValue");
        AssertNotEqual_Vector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertNotEqual_Vector");
        AssertNotEqual_Vector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertNotEqual_Vector_NativeFunction);
        AssertNotEqual_Vector_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Vector_NativeFunction, "Actual");
        AssertNotEqual_Vector_NotExpected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Vector_NativeFunction, "NotExpected");
        AssertNotEqual_Vector_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Vector_NativeFunction, "What");
        AssertNotEqual_Vector_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Vector_NativeFunction, "ContextObject");
        AssertNotEqual_Vector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Vector_NativeFunction, "ReturnValue");
        AssertNotEqual_Transform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertNotEqual_Transform");
        AssertNotEqual_Transform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertNotEqual_Transform_NativeFunction);
        AssertNotEqual_Transform_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Transform_NativeFunction, "Actual");
        AssertNotEqual_Transform_NotExpected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Transform_NativeFunction, "NotExpected");
        AssertNotEqual_Transform_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Transform_NativeFunction, "What");
        AssertNotEqual_Transform_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Transform_NativeFunction, "ContextObject");
        AssertNotEqual_Transform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Transform_NativeFunction, "ReturnValue");
        AssertNotEqual_String_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertNotEqual_String");
        AssertNotEqual_String_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertNotEqual_String_NativeFunction);
        AssertNotEqual_String_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_String_NativeFunction, "Actual");
        AssertNotEqual_String_NotExpected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_String_NativeFunction, "NotExpected");
        AssertNotEqual_String_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_String_NativeFunction, "What");
        AssertNotEqual_String_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_String_NativeFunction, "ContextObject");
        AssertNotEqual_String_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_String_NativeFunction, "ReturnValue");
        AssertNotEqual_Rotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertNotEqual_Rotator");
        AssertNotEqual_Rotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertNotEqual_Rotator_NativeFunction);
        AssertNotEqual_Rotator_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Rotator_NativeFunction, "Actual");
        AssertNotEqual_Rotator_NotExpected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Rotator_NativeFunction, "NotExpected");
        AssertNotEqual_Rotator_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Rotator_NativeFunction, "What");
        AssertNotEqual_Rotator_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Rotator_NativeFunction, "ContextObject");
        AssertNotEqual_Rotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Rotator_NativeFunction, "ReturnValue");
        AssertNotEqual_Quat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertNotEqual_Quat");
        AssertNotEqual_Quat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertNotEqual_Quat_NativeFunction);
        AssertNotEqual_Quat_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Quat_NativeFunction, "Actual");
        AssertNotEqual_Quat_NotExpected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Quat_NativeFunction, "NotExpected");
        AssertNotEqual_Quat_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Quat_NativeFunction, "What");
        AssertNotEqual_Quat_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Quat_NativeFunction, "ContextObject");
        AssertNotEqual_Quat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Quat_NativeFunction, "ReturnValue");
        AssertNotEqual_Plane_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertNotEqual_Plane");
        AssertNotEqual_Plane_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertNotEqual_Plane_NativeFunction);
        AssertNotEqual_Plane_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Plane_NativeFunction, "Actual");
        AssertNotEqual_Plane_NotExpected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Plane_NativeFunction, "NotExpected");
        AssertNotEqual_Plane_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Plane_NativeFunction, "What");
        AssertNotEqual_Plane_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Plane_NativeFunction, "ContextObject");
        AssertNotEqual_Plane_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Plane_NativeFunction, "ReturnValue");
        AssertNotEqual_Matrix_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertNotEqual_Matrix");
        AssertNotEqual_Matrix_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertNotEqual_Matrix_NativeFunction);
        AssertNotEqual_Matrix_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Matrix_NativeFunction, "Actual");
        AssertNotEqual_Matrix_NotExpected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Matrix_NativeFunction, "NotExpected");
        AssertNotEqual_Matrix_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Matrix_NativeFunction, "What");
        AssertNotEqual_Matrix_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Matrix_NativeFunction, "ContextObject");
        AssertNotEqual_Matrix_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Matrix_NativeFunction, "ReturnValue");
        AssertNotEqual_Box2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertNotEqual_Box2D");
        AssertNotEqual_Box2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertNotEqual_Box2D_NativeFunction);
        AssertNotEqual_Box2D_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Box2D_NativeFunction, "Actual");
        AssertNotEqual_Box2D_NotExpected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Box2D_NativeFunction, "NotExpected");
        AssertNotEqual_Box2D_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Box2D_NativeFunction, "What");
        AssertNotEqual_Box2D_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Box2D_NativeFunction, "ContextObject");
        AssertNotEqual_Box2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertNotEqual_Box2D_NativeFunction, "ReturnValue");
        AssertIsValid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertIsValid");
        AssertIsValid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertIsValid_NativeFunction);
        AssertIsValid_Object_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertIsValid_NativeFunction, "Object");
        AssertIsValid_Message_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertIsValid_NativeFunction, "Message");
        AssertIsValid_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertIsValid_NativeFunction, "ContextObject");
        AssertIsValid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertIsValid_NativeFunction, "ReturnValue");
        AssertFalse_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertFalse");
        AssertFalse_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertFalse_NativeFunction);
        AssertFalse_Condition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertFalse_NativeFunction, "Condition");
        AssertFalse_Message_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertFalse_NativeFunction, "Message");
        AssertFalse_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertFalse_NativeFunction, "ContextObject");
        AssertFalse_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertFalse_NativeFunction, "ReturnValue");
        AssertEqual_Vector4_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertEqual_Vector4");
        AssertEqual_Vector4_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertEqual_Vector4_NativeFunction);
        AssertEqual_Vector4_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Vector4_NativeFunction, "Actual");
        AssertEqual_Vector4_Expected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Vector4_NativeFunction, "Expected");
        AssertEqual_Vector4_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Vector4_NativeFunction, "What");
        AssertEqual_Vector4_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Vector4_NativeFunction, "Tolerance");
        AssertEqual_Vector4_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Vector4_NativeFunction, "ContextObject");
        AssertEqual_Vector4_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Vector4_NativeFunction, "ReturnValue");
        AssertEqual_Vector2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertEqual_Vector2D");
        AssertEqual_Vector2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertEqual_Vector2D_NativeFunction);
        AssertEqual_Vector2D_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Vector2D_NativeFunction, "Actual");
        AssertEqual_Vector2D_Expected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Vector2D_NativeFunction, "Expected");
        AssertEqual_Vector2D_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Vector2D_NativeFunction, "What");
        AssertEqual_Vector2D_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Vector2D_NativeFunction, "Tolerance");
        AssertEqual_Vector2D_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Vector2D_NativeFunction, "ContextObject");
        AssertEqual_Vector2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Vector2D_NativeFunction, "ReturnValue");
        AssertEqual_Vector_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertEqual_Vector");
        AssertEqual_Vector_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertEqual_Vector_NativeFunction);
        AssertEqual_Vector_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Vector_NativeFunction, "Actual");
        AssertEqual_Vector_Expected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Vector_NativeFunction, "Expected");
        AssertEqual_Vector_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Vector_NativeFunction, "What");
        AssertEqual_Vector_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Vector_NativeFunction, "Tolerance");
        AssertEqual_Vector_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Vector_NativeFunction, "ContextObject");
        AssertEqual_Vector_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Vector_NativeFunction, "ReturnValue");
        AssertEqual_Transform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertEqual_Transform");
        AssertEqual_Transform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertEqual_Transform_NativeFunction);
        AssertEqual_Transform_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Transform_NativeFunction, "Actual");
        AssertEqual_Transform_Expected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Transform_NativeFunction, "Expected");
        AssertEqual_Transform_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Transform_NativeFunction, "What");
        AssertEqual_Transform_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Transform_NativeFunction, "Tolerance");
        AssertEqual_Transform_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Transform_NativeFunction, "ContextObject");
        AssertEqual_Transform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Transform_NativeFunction, "ReturnValue");
        AssertEqual_TraceQueryResults_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertEqual_TraceQueryResults");
        AssertEqual_TraceQueryResults_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertEqual_TraceQueryResults_NativeFunction);
        AssertEqual_TraceQueryResults_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_TraceQueryResults_NativeFunction, "Actual");
        AssertEqual_TraceQueryResults_Expected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_TraceQueryResults_NativeFunction, "Expected");
        AssertEqual_TraceQueryResults_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_TraceQueryResults_NativeFunction, "What");
        AssertEqual_TraceQueryResults_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_TraceQueryResults_NativeFunction, "ContextObject");
        AssertEqual_TraceQueryResults_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_TraceQueryResults_NativeFunction, "ReturnValue");
        AssertEqual_String_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertEqual_String");
        AssertEqual_String_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertEqual_String_NativeFunction);
        AssertEqual_String_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_String_NativeFunction, "Actual");
        AssertEqual_String_Expected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_String_NativeFunction, "Expected");
        AssertEqual_String_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_String_NativeFunction, "What");
        AssertEqual_String_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_String_NativeFunction, "ContextObject");
        AssertEqual_String_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_String_NativeFunction, "ReturnValue");
        AssertEqual_Rotator_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertEqual_Rotator");
        AssertEqual_Rotator_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertEqual_Rotator_NativeFunction);
        AssertEqual_Rotator_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Rotator_NativeFunction, "Actual");
        AssertEqual_Rotator_Expected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Rotator_NativeFunction, "Expected");
        AssertEqual_Rotator_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Rotator_NativeFunction, "What");
        AssertEqual_Rotator_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Rotator_NativeFunction, "Tolerance");
        AssertEqual_Rotator_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Rotator_NativeFunction, "ContextObject");
        AssertEqual_Rotator_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Rotator_NativeFunction, "ReturnValue");
        AssertEqual_Quat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertEqual_Quat");
        AssertEqual_Quat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertEqual_Quat_NativeFunction);
        AssertEqual_Quat_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Quat_NativeFunction, "Actual");
        AssertEqual_Quat_Expected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Quat_NativeFunction, "Expected");
        AssertEqual_Quat_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Quat_NativeFunction, "What");
        AssertEqual_Quat_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Quat_NativeFunction, "Tolerance");
        AssertEqual_Quat_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Quat_NativeFunction, "ContextObject");
        AssertEqual_Quat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Quat_NativeFunction, "ReturnValue");
        AssertEqual_Plane_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertEqual_Plane");
        AssertEqual_Plane_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertEqual_Plane_NativeFunction);
        AssertEqual_Plane_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Plane_NativeFunction, "Actual");
        AssertEqual_Plane_Expected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Plane_NativeFunction, "Expected");
        AssertEqual_Plane_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Plane_NativeFunction, "What");
        AssertEqual_Plane_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Plane_NativeFunction, "Tolerance");
        AssertEqual_Plane_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Plane_NativeFunction, "ContextObject");
        AssertEqual_Plane_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Plane_NativeFunction, "ReturnValue");
        AssertEqual_Object_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertEqual_Object");
        AssertEqual_Object_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertEqual_Object_NativeFunction);
        AssertEqual_Object_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Object_NativeFunction, "Actual");
        AssertEqual_Object_Expected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Object_NativeFunction, "Expected");
        AssertEqual_Object_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Object_NativeFunction, "What");
        AssertEqual_Object_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Object_NativeFunction, "ContextObject");
        AssertEqual_Object_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Object_NativeFunction, "ReturnValue");
        AssertEqual_Name_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertEqual_Name");
        AssertEqual_Name_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertEqual_Name_NativeFunction);
        AssertEqual_Name_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Name_NativeFunction, "Actual");
        AssertEqual_Name_Expected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Name_NativeFunction, "Expected");
        AssertEqual_Name_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Name_NativeFunction, "What");
        AssertEqual_Name_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Name_NativeFunction, "ContextObject");
        AssertEqual_Name_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Name_NativeFunction, "ReturnValue");
        AssertEqual_Matrix_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertEqual_Matrix");
        AssertEqual_Matrix_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertEqual_Matrix_NativeFunction);
        AssertEqual_Matrix_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Matrix_NativeFunction, "Actual");
        AssertEqual_Matrix_Expected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Matrix_NativeFunction, "Expected");
        AssertEqual_Matrix_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Matrix_NativeFunction, "What");
        AssertEqual_Matrix_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Matrix_NativeFunction, "Tolerance");
        AssertEqual_Matrix_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Matrix_NativeFunction, "ContextObject");
        AssertEqual_Matrix_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Matrix_NativeFunction, "ReturnValue");
        AssertEqual_Int_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertEqual_Int");
        AssertEqual_Int_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertEqual_Int_NativeFunction);
        AssertEqual_Int_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Int_NativeFunction, "Actual");
        AssertEqual_Int_Expected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Int_NativeFunction, "Expected");
        AssertEqual_Int_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Int_NativeFunction, "What");
        AssertEqual_Int_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Int_NativeFunction, "ContextObject");
        AssertEqual_Int_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Int_NativeFunction, "ReturnValue");
        AssertEqual_Float_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertEqual_Float");
        AssertEqual_Float_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertEqual_Float_NativeFunction);
        AssertEqual_Float_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Float_NativeFunction, "Actual");
        AssertEqual_Float_Expected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Float_NativeFunction, "Expected");
        AssertEqual_Float_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Float_NativeFunction, "What");
        AssertEqual_Float_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Float_NativeFunction, "Tolerance");
        AssertEqual_Float_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Float_NativeFunction, "ContextObject");
        AssertEqual_Float_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Float_NativeFunction, "ReturnValue");
        AssertEqual_Double_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertEqual_Double");
        AssertEqual_Double_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertEqual_Double_NativeFunction);
        AssertEqual_Double_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Double_NativeFunction, "Actual");
        AssertEqual_Double_Expected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Double_NativeFunction, "Expected");
        AssertEqual_Double_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Double_NativeFunction, "What");
        AssertEqual_Double_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Double_NativeFunction, "Tolerance");
        AssertEqual_Double_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Double_NativeFunction, "ContextObject");
        AssertEqual_Double_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Double_NativeFunction, "ReturnValue");
        AssertEqual_Box2D_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertEqual_Box2D");
        AssertEqual_Box2D_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertEqual_Box2D_NativeFunction);
        AssertEqual_Box2D_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Box2D_NativeFunction, "Actual");
        AssertEqual_Box2D_Expected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Box2D_NativeFunction, "Expected");
        AssertEqual_Box2D_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Box2D_NativeFunction, "What");
        AssertEqual_Box2D_Tolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Box2D_NativeFunction, "Tolerance");
        AssertEqual_Box2D_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Box2D_NativeFunction, "ContextObject");
        AssertEqual_Box2D_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Box2D_NativeFunction, "ReturnValue");
        AssertEqual_Bool_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AssertEqual_Bool");
        AssertEqual_Bool_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AssertEqual_Bool_NativeFunction);
        AssertEqual_Bool_Actual_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Bool_NativeFunction, "Actual");
        AssertEqual_Bool_Expected_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Bool_NativeFunction, "Expected");
        AssertEqual_Bool_What_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Bool_NativeFunction, "What");
        AssertEqual_Bool_ContextObject_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Bool_NativeFunction, "ContextObject");
        AssertEqual_Bool_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AssertEqual_Bool_NativeFunction, "ReturnValue");
        AddWarning_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddWarning");
        AddWarning_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddWarning_NativeFunction);
        AddWarning_Message_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddWarning_NativeFunction, "Message");
        AddRerun_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddRerun");
        AddRerun_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddRerun_NativeFunction);
        AddRerun_Reason_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddRerun_NativeFunction, "Reason");
        AddInfo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddInfo");
        AddInfo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddInfo_NativeFunction);
        AddInfo_Message_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddInfo_NativeFunction, "Message");
        AddError_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddError");
        AddError_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddError_NativeFunction);
        AddError_Message_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddError_NativeFunction, "Message");
        
        IntPtr OnWantsReRunCheck_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnWantsReRunCheck");
        OnWantsReRunCheck_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnWantsReRunCheck_NativeFunction);
        OnWantsReRunCheck_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnWantsReRunCheck_NativeFunction, "ReturnValue");
        
        IntPtr OnAdditionalTestFinishedMessageRequest_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OnAdditionalTestFinishedMessageRequest");
        OnAdditionalTestFinishedMessageRequest_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OnAdditionalTestFinishedMessageRequest_NativeFunction);
        OnAdditionalTestFinishedMessageRequest_TestResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnAdditionalTestFinishedMessageRequest_NativeFunction, "TestResult");
        OnAdditionalTestFinishedMessageRequest_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OnAdditionalTestFinishedMessageRequest_NativeFunction, "ReturnValue");
        
        IntPtr IsReady_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsReady");
        IsReady_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsReady_NativeFunction);
        IsReady_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsReady_NativeFunction, "ReturnValue");
        
        IntPtr DebugGatherRelevantActors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DebugGatherRelevantActors");
        DebugGatherRelevantActors_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DebugGatherRelevantActors_NativeFunction);
        DebugGatherRelevantActors_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DebugGatherRelevantActors_NativeFunction, "ReturnValue");
        DebugGatherRelevantActors_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(DebugGatherRelevantActors_NativeFunction, "ReturnValue");
        
        
    }
    
    protected FunctionalTest(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StrProperty /Script/FunctionalTesting.FunctionalTest:TestLabel
    static readonly int TestLabel_Offset;
    static readonly IntPtr TestLabel_NativeProperty;
    
    public string TestLabel
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,TestLabel_Offset),0,this);
        }
    }
    
    // StrProperty /Script/FunctionalTesting.FunctionalTest:Author
    static readonly int Author_Offset;
    static readonly IntPtr Author_NativeProperty;
    
    public string Author
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,Author_Offset),0,this);
        }
    }
    
    // StrProperty /Script/FunctionalTesting.FunctionalTest:Description
    static readonly int Description_Offset;
    static readonly IntPtr Description_NativeProperty;
    
    public string Description
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,Description_Offset),0,this);
        }
    }
    
    // BoolProperty /Script/FunctionalTesting.FunctionalTest:bIsEnabled
    static readonly int bIsEnabled_Offset;
    static readonly IntPtr bIsEnabled_NativeProperty;
    
    public bool bIsEnabled
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bIsEnabled_NativeProperty, bIsEnabled_Offset);
        }
    }
    
    // EnumProperty /Script/FunctionalTesting.FunctionalTest:LogErrorHandling
    static readonly int LogErrorHandling_Offset;
    
    public UnrealSharp.FunctionalTesting.EFunctionalTestLogHandling LogErrorHandling
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.FunctionalTesting.EFunctionalTestLogHandling>.FromNative(IntPtr.Add(NativeObject, LogErrorHandling_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/FunctionalTesting.FunctionalTest:LogWarningHandling
    static readonly int LogWarningHandling_Offset;
    
    public UnrealSharp.FunctionalTesting.EFunctionalTestLogHandling LogWarningHandling
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.FunctionalTesting.EFunctionalTestLogHandling>.FromNative(IntPtr.Add(NativeObject, LogWarningHandling_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/FunctionalTesting.FunctionalTest:ObservationPoint
    static readonly int ObservationPoint_Offset;
    
    public UnrealSharp.Engine.Actor ObservationPoint
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative(IntPtr.Add(NativeObject, ObservationPoint_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(NativeObject, ObservationPoint_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/FunctionalTesting.FunctionalTest:RandomNumbersStream
    static readonly int RandomNumbersStream_Offset;
    
    public UnrealSharp.RandomStream RandomNumbersStream
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.RandomStream>.FromNative(IntPtr.Add(NativeObject, RandomNumbersStream_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.RandomStream>.ToNative(IntPtr.Add(NativeObject, RandomNumbersStream_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/FunctionalTesting.FunctionalTest:Result
    static readonly int Result_Offset;
    
    public UnrealSharp.FunctionalTesting.EFunctionalTestResult Result
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.FunctionalTesting.EFunctionalTestResult>.FromNative(IntPtr.Add(NativeObject, Result_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.FunctionalTesting.EFunctionalTestResult>.ToNative(IntPtr.Add(NativeObject, Result_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/FunctionalTesting.FunctionalTest:PreparationTimeLimit
    static readonly int PreparationTimeLimit_Offset;
    
    public float PreparationTimeLimit
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PreparationTimeLimit_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/FunctionalTesting.FunctionalTest:TimeLimit
    static readonly int TimeLimit_Offset;
    
    public float TimeLimit
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, TimeLimit_Offset), 0, this);
        }
    }
    
    // TextProperty /Script/FunctionalTesting.FunctionalTest:TimesUpMessage
    static readonly int TimesUpMessage_Offset;
    static readonly IntPtr TimesUpMessage_NativeProperty;
    TextMarshaller TimesUpMessage_Wrapper;
    
    public Text TimesUpMessage
    {
        get
        {
            if (TimesUpMessage_Wrapper == null)
            {
                TimesUpMessage_Wrapper  = new TextMarshaller(1);
            }
            return TimesUpMessage_Wrapper.FromNative(this.NativeObject + TimesUpMessage_Offset, 0, this);
        }
    }
    
    // FloatProperty /Script/FunctionalTesting.FunctionalTest:TotalTime
    static readonly int TotalTime_Offset;
    
    public float TotalTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, TotalTime_Offset), 0, this);
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:SetTimeLimit
    static readonly IntPtr SetTimeLimit_NativeFunction;
    static readonly int SetTimeLimit_ParamsSize;
    static readonly int SetTimeLimit_NewTimeLimit_Offset;
    static readonly int SetTimeLimit_ResultWhenTimeRunsOut_Offset;
    
    public void SetTimeLimit(float newTimeLimit, UnrealSharp.FunctionalTesting.EFunctionalTestResult resultWhenTimeRunsOut)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTimeLimit_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetTimeLimit_NewTimeLimit_Offset), 0, null, newTimeLimit);
            BlittableMarshaller<UnrealSharp.FunctionalTesting.EFunctionalTestResult>.ToNative(IntPtr.Add(ParamsBuffer, SetTimeLimit_ResultWhenTimeRunsOut_Offset), 0, null, resultWhenTimeRunsOut);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTimeLimit_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:SetConsoleVariableFromInteger
    static readonly IntPtr SetConsoleVariableFromInteger_NativeFunction;
    static readonly int SetConsoleVariableFromInteger_ParamsSize;
    static readonly int SetConsoleVariableFromInteger_Name_Offset;
    static readonly int SetConsoleVariableFromInteger_InValue_Offset;
    
    public void SetConsoleVariableFromInteger(string name, int inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetConsoleVariableFromInteger_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Name_NativePtr = IntPtr.Add(ParamsBuffer,SetConsoleVariableFromInteger_Name_Offset);
            StringMarshaller.ToNative(Name_NativePtr,0,null,name);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetConsoleVariableFromInteger_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetConsoleVariableFromInteger_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Name_NativePtr, 0);
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:SetConsoleVariableFromFloat
    static readonly IntPtr SetConsoleVariableFromFloat_NativeFunction;
    static readonly int SetConsoleVariableFromFloat_ParamsSize;
    static readonly int SetConsoleVariableFromFloat_Name_Offset;
    static readonly int SetConsoleVariableFromFloat_InValue_Offset;
    
    public void SetConsoleVariableFromFloat(string name, float inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetConsoleVariableFromFloat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Name_NativePtr = IntPtr.Add(ParamsBuffer,SetConsoleVariableFromFloat_Name_Offset);
            StringMarshaller.ToNative(Name_NativePtr,0,null,name);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetConsoleVariableFromFloat_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetConsoleVariableFromFloat_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Name_NativePtr, 0);
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:SetConsoleVariableFromBoolean
    static readonly IntPtr SetConsoleVariableFromBoolean_NativeFunction;
    static readonly int SetConsoleVariableFromBoolean_ParamsSize;
    static readonly int SetConsoleVariableFromBoolean_Name_Offset;
    static readonly int SetConsoleVariableFromBoolean_InValue_Offset;
    
    public void SetConsoleVariableFromBoolean(string name, bool inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetConsoleVariableFromBoolean_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Name_NativePtr = IntPtr.Add(ParamsBuffer,SetConsoleVariableFromBoolean_Name_Offset);
            StringMarshaller.ToNative(Name_NativePtr,0,null,name);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetConsoleVariableFromBoolean_InValue_Offset), 0, null, inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetConsoleVariableFromBoolean_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Name_NativePtr, 0);
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:SetConsoleVariable
    static readonly IntPtr SetConsoleVariable_NativeFunction;
    static readonly int SetConsoleVariable_ParamsSize;
    static readonly int SetConsoleVariable_Name_Offset;
    static readonly int SetConsoleVariable_InValue_Offset;
    
    public void SetConsoleVariable(string name, string inValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetConsoleVariable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Name_NativePtr = IntPtr.Add(ParamsBuffer,SetConsoleVariable_Name_Offset);
            StringMarshaller.ToNative(Name_NativePtr,0,null,name);
            IntPtr InValue_NativePtr = IntPtr.Add(ParamsBuffer,SetConsoleVariable_InValue_Offset);
            StringMarshaller.ToNative(InValue_NativePtr,0,null,inValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetConsoleVariable_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Name_NativePtr, 0);
            StringMarshaller.DestructInstance(InValue_NativePtr, 0);
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:RegisterAutoDestroyActor
    static readonly IntPtr RegisterAutoDestroyActor_NativeFunction;
    static readonly int RegisterAutoDestroyActor_ParamsSize;
    static readonly int RegisterAutoDestroyActor_ActorToAutoDestroy_Offset;
    
    public void RegisterAutoDestroyActor(UnrealSharp.Engine.Actor actorToAutoDestroy)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RegisterAutoDestroyActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative(IntPtr.Add(ParamsBuffer, RegisterAutoDestroyActor_ActorToAutoDestroy_Offset), 0, null, actorToAutoDestroy);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RegisterAutoDestroyActor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:LogMessage
    static readonly IntPtr LogMessage_NativeFunction;
    static readonly int LogMessage_ParamsSize;
    static readonly int LogMessage_Message_Offset;
    
    public void LogMessage(string message)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LogMessage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Message_NativePtr = IntPtr.Add(ParamsBuffer,LogMessage_Message_Offset);
            StringMarshaller.ToNative(Message_NativePtr,0,null,message);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, LogMessage_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Message_NativePtr, 0);
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:IsRunning
    static readonly IntPtr IsRunning_NativeFunction;
    static readonly int IsRunning_ParamsSize;
    static readonly int IsRunning_ReturnValue_Offset;
    
    public bool IsRunning()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsRunning_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsRunning_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsRunning_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:IsEnabled
    static readonly IntPtr IsEnabled_NativeFunction;
    static readonly int IsEnabled_ParamsSize;
    static readonly int IsEnabled_ReturnValue_Offset;
    
    public bool IsEnabled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsEnabled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsEnabled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:GetCurrentRerunReason
    static readonly IntPtr GetCurrentRerunReason_NativeFunction;
    static readonly int GetCurrentRerunReason_ParamsSize;
    static readonly int GetCurrentRerunReason_ReturnValue_Offset;
    
    public Name GetCurrentRerunReason()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentRerunReason_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCurrentRerunReason_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentRerunReason_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:FinishTest
    static readonly IntPtr FinishTest_NativeFunction;
    static readonly int FinishTest_ParamsSize;
    static readonly int FinishTest_TestResult_Offset;
    static readonly int FinishTest_Message_Offset;
    
    public void FinishTest(UnrealSharp.FunctionalTesting.EFunctionalTestResult testResult, string message)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FinishTest_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.FunctionalTesting.EFunctionalTestResult>.ToNative(IntPtr.Add(ParamsBuffer, FinishTest_TestResult_Offset), 0, null, testResult);
            IntPtr Message_NativePtr = IntPtr.Add(ParamsBuffer,FinishTest_Message_Offset);
            StringMarshaller.ToNative(Message_NativePtr,0,null,message);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FinishTest_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Message_NativePtr, 0);
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertValue_Int
    static readonly IntPtr AssertValue_Int_NativeFunction;
    static readonly int AssertValue_Int_ParamsSize;
    static readonly int AssertValue_Int_Actual_Offset;
    static readonly int AssertValue_Int_ShouldBe_Offset;
    static readonly int AssertValue_Int_Expected_Offset;
    static readonly int AssertValue_Int_What_Offset;
    static readonly int AssertValue_Int_ContextObject_Offset;
    static readonly int AssertValue_Int_ReturnValue_Offset;
    
    public bool AssertValue_Int(int actual, UnrealSharp.FunctionalTesting.EComparisonMethod shouldBe, int expected, string what, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertValue_Int_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, AssertValue_Int_Actual_Offset), 0, null, actual);
            BlittableMarshaller<UnrealSharp.FunctionalTesting.EComparisonMethod>.ToNative(IntPtr.Add(ParamsBuffer, AssertValue_Int_ShouldBe_Offset), 0, null, shouldBe);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, AssertValue_Int_Expected_Offset), 0, null, expected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertValue_Int_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertValue_Int_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertValue_Int_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertValue_Int_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertValue_Float
    static readonly IntPtr AssertValue_Float_NativeFunction;
    static readonly int AssertValue_Float_ParamsSize;
    static readonly int AssertValue_Float_Actual_Offset;
    static readonly int AssertValue_Float_ShouldBe_Offset;
    static readonly int AssertValue_Float_Expected_Offset;
    static readonly int AssertValue_Float_What_Offset;
    static readonly int AssertValue_Float_ContextObject_Offset;
    static readonly int AssertValue_Float_ReturnValue_Offset;
    
    public bool AssertValue_Float(float actual, UnrealSharp.FunctionalTesting.EComparisonMethod shouldBe, float expected, string what, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertValue_Float_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AssertValue_Float_Actual_Offset), 0, null, actual);
            BlittableMarshaller<UnrealSharp.FunctionalTesting.EComparisonMethod>.ToNative(IntPtr.Add(ParamsBuffer, AssertValue_Float_ShouldBe_Offset), 0, null, shouldBe);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AssertValue_Float_Expected_Offset), 0, null, expected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertValue_Float_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertValue_Float_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertValue_Float_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertValue_Float_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertValue_Double
    static readonly IntPtr AssertValue_Double_NativeFunction;
    static readonly int AssertValue_Double_ParamsSize;
    static readonly int AssertValue_Double_Actual_Offset;
    static readonly int AssertValue_Double_ShouldBe_Offset;
    static readonly int AssertValue_Double_Expected_Offset;
    static readonly int AssertValue_Double_What_Offset;
    static readonly int AssertValue_Double_ContextObject_Offset;
    static readonly int AssertValue_Double_ReturnValue_Offset;
    
    public bool AssertValue_Double(double actual, UnrealSharp.FunctionalTesting.EComparisonMethod shouldBe, double expected, string what, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertValue_Double_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, AssertValue_Double_Actual_Offset), 0, null, actual);
            BlittableMarshaller<UnrealSharp.FunctionalTesting.EComparisonMethod>.ToNative(IntPtr.Add(ParamsBuffer, AssertValue_Double_ShouldBe_Offset), 0, null, shouldBe);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, AssertValue_Double_Expected_Offset), 0, null, expected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertValue_Double_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertValue_Double_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertValue_Double_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertValue_Double_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertValue_DateTime
    static readonly IntPtr AssertValue_DateTime_NativeFunction;
    static readonly int AssertValue_DateTime_ParamsSize;
    static readonly int AssertValue_DateTime_Actual_Offset;
    static readonly int AssertValue_DateTime_ShouldBe_Offset;
    static readonly int AssertValue_DateTime_Expected_Offset;
    static readonly int AssertValue_DateTime_What_Offset;
    static readonly int AssertValue_DateTime_ContextObject_Offset;
    static readonly int AssertValue_DateTime_ReturnValue_Offset;
    
    public bool AssertValue_DateTime(UnrealSharp.CoreUObject.DateTime actual, UnrealSharp.FunctionalTesting.EComparisonMethod shouldBe, UnrealSharp.CoreUObject.DateTime expected, string what, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertValue_DateTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AssertValue_DateTime_Actual_Offset), 0, null, actual);
            BlittableMarshaller<UnrealSharp.FunctionalTesting.EComparisonMethod>.ToNative(IntPtr.Add(ParamsBuffer, AssertValue_DateTime_ShouldBe_Offset), 0, null, shouldBe);
            UnrealSharp.CoreUObject.DateTimeMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AssertValue_DateTime_Expected_Offset), 0, null, expected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertValue_DateTime_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertValue_DateTime_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertValue_DateTime_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertValue_DateTime_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertTrue
    static readonly IntPtr AssertTrue_NativeFunction;
    static readonly int AssertTrue_ParamsSize;
    static readonly int AssertTrue_Condition_Offset;
    static readonly int AssertTrue_Message_Offset;
    static readonly int AssertTrue_ContextObject_Offset;
    static readonly int AssertTrue_ReturnValue_Offset;
    
    public bool AssertTrue(bool condition, string message, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertTrue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AssertTrue_Condition_Offset), 0, null, condition);
            IntPtr Message_NativePtr = IntPtr.Add(ParamsBuffer,AssertTrue_Message_Offset);
            StringMarshaller.ToNative(Message_NativePtr,0,null,message);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertTrue_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertTrue_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertTrue_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(Message_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertNotEqual_Vector4
    static readonly IntPtr AssertNotEqual_Vector4_NativeFunction;
    static readonly int AssertNotEqual_Vector4_ParamsSize;
    static readonly int AssertNotEqual_Vector4_Actual_Offset;
    static readonly int AssertNotEqual_Vector4_NotExpected_Offset;
    static readonly int AssertNotEqual_Vector4_What_Offset;
    static readonly int AssertNotEqual_Vector4_ContextObject_Offset;
    static readonly int AssertNotEqual_Vector4_ReturnValue_Offset;
    
    public bool AssertNotEqual_Vector4(System.DoubleNumerics.Vector4 actual, System.DoubleNumerics.Vector4 notExpected, string what, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertNotEqual_Vector4_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector4>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Vector4_Actual_Offset), 0, null, actual);
            BlittableMarshaller<System.DoubleNumerics.Vector4>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Vector4_NotExpected_Offset), 0, null, notExpected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertNotEqual_Vector4_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Vector4_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertNotEqual_Vector4_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Vector4_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertNotEqual_Vector2D
    static readonly IntPtr AssertNotEqual_Vector2D_NativeFunction;
    static readonly int AssertNotEqual_Vector2D_ParamsSize;
    static readonly int AssertNotEqual_Vector2D_Actual_Offset;
    static readonly int AssertNotEqual_Vector2D_NotExpected_Offset;
    static readonly int AssertNotEqual_Vector2D_What_Offset;
    static readonly int AssertNotEqual_Vector2D_ContextObject_Offset;
    static readonly int AssertNotEqual_Vector2D_ReturnValue_Offset;
    
    public bool AssertNotEqual_Vector2D(System.DoubleNumerics.Vector2 actual, System.DoubleNumerics.Vector2 notExpected, string what, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertNotEqual_Vector2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Vector2D_Actual_Offset), 0, null, actual);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Vector2D_NotExpected_Offset), 0, null, notExpected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertNotEqual_Vector2D_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Vector2D_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertNotEqual_Vector2D_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Vector2D_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertNotEqual_Vector
    static readonly IntPtr AssertNotEqual_Vector_NativeFunction;
    static readonly int AssertNotEqual_Vector_ParamsSize;
    static readonly int AssertNotEqual_Vector_Actual_Offset;
    static readonly int AssertNotEqual_Vector_NotExpected_Offset;
    static readonly int AssertNotEqual_Vector_What_Offset;
    static readonly int AssertNotEqual_Vector_ContextObject_Offset;
    static readonly int AssertNotEqual_Vector_ReturnValue_Offset;
    
    public bool AssertNotEqual_Vector(System.DoubleNumerics.Vector3 actual, System.DoubleNumerics.Vector3 notExpected, string what, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertNotEqual_Vector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Vector_Actual_Offset), 0, null, actual);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Vector_NotExpected_Offset), 0, null, notExpected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertNotEqual_Vector_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Vector_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertNotEqual_Vector_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Vector_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertNotEqual_Transform
    static readonly IntPtr AssertNotEqual_Transform_NativeFunction;
    static readonly int AssertNotEqual_Transform_ParamsSize;
    static readonly int AssertNotEqual_Transform_Actual_Offset;
    static readonly int AssertNotEqual_Transform_NotExpected_Offset;
    static readonly int AssertNotEqual_Transform_What_Offset;
    static readonly int AssertNotEqual_Transform_ContextObject_Offset;
    static readonly int AssertNotEqual_Transform_ReturnValue_Offset;
    
    public bool AssertNotEqual_Transform(UnrealSharp.Transform actual, UnrealSharp.Transform notExpected, string what, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertNotEqual_Transform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Transform_Actual_Offset), 0, null, actual);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Transform_NotExpected_Offset), 0, null, notExpected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertNotEqual_Transform_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Transform_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertNotEqual_Transform_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Transform_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertNotEqual_String
    static readonly IntPtr AssertNotEqual_String_NativeFunction;
    static readonly int AssertNotEqual_String_ParamsSize;
    static readonly int AssertNotEqual_String_Actual_Offset;
    static readonly int AssertNotEqual_String_NotExpected_Offset;
    static readonly int AssertNotEqual_String_What_Offset;
    static readonly int AssertNotEqual_String_ContextObject_Offset;
    static readonly int AssertNotEqual_String_ReturnValue_Offset;
    
    public bool AssertNotEqual_String(string actual, string notExpected, string what, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertNotEqual_String_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Actual_NativePtr = IntPtr.Add(ParamsBuffer,AssertNotEqual_String_Actual_Offset);
            StringMarshaller.ToNative(Actual_NativePtr,0,null,actual);
            IntPtr NotExpected_NativePtr = IntPtr.Add(ParamsBuffer,AssertNotEqual_String_NotExpected_Offset);
            StringMarshaller.ToNative(NotExpected_NativePtr,0,null,notExpected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertNotEqual_String_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_String_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertNotEqual_String_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_String_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(Actual_NativePtr, 0);
            StringMarshaller.DestructInstance(NotExpected_NativePtr, 0);
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertNotEqual_Rotator
    static readonly IntPtr AssertNotEqual_Rotator_NativeFunction;
    static readonly int AssertNotEqual_Rotator_ParamsSize;
    static readonly int AssertNotEqual_Rotator_Actual_Offset;
    static readonly int AssertNotEqual_Rotator_NotExpected_Offset;
    static readonly int AssertNotEqual_Rotator_What_Offset;
    static readonly int AssertNotEqual_Rotator_ContextObject_Offset;
    static readonly int AssertNotEqual_Rotator_ReturnValue_Offset;
    
    public bool AssertNotEqual_Rotator(UnrealSharp.Rotator actual, UnrealSharp.Rotator notExpected, string what, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertNotEqual_Rotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Rotator_Actual_Offset), 0, null, actual);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Rotator_NotExpected_Offset), 0, null, notExpected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertNotEqual_Rotator_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Rotator_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertNotEqual_Rotator_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Rotator_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertNotEqual_Quat
    static readonly IntPtr AssertNotEqual_Quat_NativeFunction;
    static readonly int AssertNotEqual_Quat_ParamsSize;
    static readonly int AssertNotEqual_Quat_Actual_Offset;
    static readonly int AssertNotEqual_Quat_NotExpected_Offset;
    static readonly int AssertNotEqual_Quat_What_Offset;
    static readonly int AssertNotEqual_Quat_ContextObject_Offset;
    static readonly int AssertNotEqual_Quat_ReturnValue_Offset;
    
    public bool AssertNotEqual_Quat(System.DoubleNumerics.Quaternion actual, System.DoubleNumerics.Quaternion notExpected, string what, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertNotEqual_Quat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Quat_Actual_Offset), 0, null, actual);
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Quat_NotExpected_Offset), 0, null, notExpected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertNotEqual_Quat_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Quat_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertNotEqual_Quat_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Quat_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertNotEqual_Plane
    static readonly IntPtr AssertNotEqual_Plane_NativeFunction;
    static readonly int AssertNotEqual_Plane_ParamsSize;
    static readonly int AssertNotEqual_Plane_Actual_Offset;
    static readonly int AssertNotEqual_Plane_NotExpected_Offset;
    static readonly int AssertNotEqual_Plane_What_Offset;
    static readonly int AssertNotEqual_Plane_ContextObject_Offset;
    static readonly int AssertNotEqual_Plane_ReturnValue_Offset;
    
    public bool AssertNotEqual_Plane(UnrealSharp.CoreUObject.Plane actual, UnrealSharp.CoreUObject.Plane notExpected, string what, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertNotEqual_Plane_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.Plane>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Plane_Actual_Offset), 0, null, actual);
            BlittableMarshaller<UnrealSharp.CoreUObject.Plane>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Plane_NotExpected_Offset), 0, null, notExpected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertNotEqual_Plane_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Plane_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertNotEqual_Plane_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Plane_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertNotEqual_Matrix
    static readonly IntPtr AssertNotEqual_Matrix_NativeFunction;
    static readonly int AssertNotEqual_Matrix_ParamsSize;
    static readonly int AssertNotEqual_Matrix_Actual_Offset;
    static readonly int AssertNotEqual_Matrix_NotExpected_Offset;
    static readonly int AssertNotEqual_Matrix_What_Offset;
    static readonly int AssertNotEqual_Matrix_ContextObject_Offset;
    static readonly int AssertNotEqual_Matrix_ReturnValue_Offset;
    
    public bool AssertNotEqual_Matrix(System.DoubleNumerics.Matrix4x4 actual, System.DoubleNumerics.Matrix4x4 notExpected, string what, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertNotEqual_Matrix_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Matrix_Actual_Offset), 0, null, actual);
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Matrix_NotExpected_Offset), 0, null, notExpected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertNotEqual_Matrix_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Matrix_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertNotEqual_Matrix_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Matrix_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertNotEqual_Box2D
    static readonly IntPtr AssertNotEqual_Box2D_NativeFunction;
    static readonly int AssertNotEqual_Box2D_ParamsSize;
    static readonly int AssertNotEqual_Box2D_Actual_Offset;
    static readonly int AssertNotEqual_Box2D_NotExpected_Offset;
    static readonly int AssertNotEqual_Box2D_What_Offset;
    static readonly int AssertNotEqual_Box2D_ContextObject_Offset;
    static readonly int AssertNotEqual_Box2D_ReturnValue_Offset;
    
    public bool AssertNotEqual_Box2D(UnrealSharp.CoreUObject.Box2D actual, UnrealSharp.CoreUObject.Box2D notExpected, string what, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertNotEqual_Box2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.Box2DMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Box2D_Actual_Offset), 0, null, actual);
            UnrealSharp.CoreUObject.Box2DMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Box2D_NotExpected_Offset), 0, null, notExpected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertNotEqual_Box2D_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Box2D_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertNotEqual_Box2D_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertNotEqual_Box2D_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertIsValid
    static readonly IntPtr AssertIsValid_NativeFunction;
    static readonly int AssertIsValid_ParamsSize;
    static readonly int AssertIsValid_Object_Offset;
    static readonly int AssertIsValid_Message_Offset;
    static readonly int AssertIsValid_ContextObject_Offset;
    static readonly int AssertIsValid_ReturnValue_Offset;
    
    public bool AssertIsValid(UnrealSharp.CoreUObject.Object @object, string message, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertIsValid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertIsValid_Object_Offset), 0, null, @object);
            IntPtr Message_NativePtr = IntPtr.Add(ParamsBuffer,AssertIsValid_Message_Offset);
            StringMarshaller.ToNative(Message_NativePtr,0,null,message);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertIsValid_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertIsValid_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertIsValid_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(Message_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertFalse
    static readonly IntPtr AssertFalse_NativeFunction;
    static readonly int AssertFalse_ParamsSize;
    static readonly int AssertFalse_Condition_Offset;
    static readonly int AssertFalse_Message_Offset;
    static readonly int AssertFalse_ContextObject_Offset;
    static readonly int AssertFalse_ReturnValue_Offset;
    
    public bool AssertFalse(bool condition, string message, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertFalse_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AssertFalse_Condition_Offset), 0, null, condition);
            IntPtr Message_NativePtr = IntPtr.Add(ParamsBuffer,AssertFalse_Message_Offset);
            StringMarshaller.ToNative(Message_NativePtr,0,null,message);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertFalse_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertFalse_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertFalse_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(Message_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertEqual_Vector4
    static readonly IntPtr AssertEqual_Vector4_NativeFunction;
    static readonly int AssertEqual_Vector4_ParamsSize;
    static readonly int AssertEqual_Vector4_Actual_Offset;
    static readonly int AssertEqual_Vector4_Expected_Offset;
    static readonly int AssertEqual_Vector4_What_Offset;
    static readonly int AssertEqual_Vector4_Tolerance_Offset;
    static readonly int AssertEqual_Vector4_ContextObject_Offset;
    static readonly int AssertEqual_Vector4_ReturnValue_Offset;
    
    public bool AssertEqual_Vector4(System.DoubleNumerics.Vector4 actual, System.DoubleNumerics.Vector4 expected, string what, float tolerance = 0.000100f, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertEqual_Vector4_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector4>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Vector4_Actual_Offset), 0, null, actual);
            BlittableMarshaller<System.DoubleNumerics.Vector4>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Vector4_Expected_Offset), 0, null, expected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertEqual_Vector4_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Vector4_Tolerance_Offset), 0, null, tolerance);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Vector4_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertEqual_Vector4_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertEqual_Vector4_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertEqual_Vector2D
    static readonly IntPtr AssertEqual_Vector2D_NativeFunction;
    static readonly int AssertEqual_Vector2D_ParamsSize;
    static readonly int AssertEqual_Vector2D_Actual_Offset;
    static readonly int AssertEqual_Vector2D_Expected_Offset;
    static readonly int AssertEqual_Vector2D_What_Offset;
    static readonly int AssertEqual_Vector2D_Tolerance_Offset;
    static readonly int AssertEqual_Vector2D_ContextObject_Offset;
    static readonly int AssertEqual_Vector2D_ReturnValue_Offset;
    
    public bool AssertEqual_Vector2D(System.DoubleNumerics.Vector2 actual, System.DoubleNumerics.Vector2 expected, string what, float tolerance = 0.000100f, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertEqual_Vector2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Vector2D_Actual_Offset), 0, null, actual);
            BlittableMarshaller<System.DoubleNumerics.Vector2>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Vector2D_Expected_Offset), 0, null, expected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertEqual_Vector2D_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Vector2D_Tolerance_Offset), 0, null, tolerance);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Vector2D_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertEqual_Vector2D_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertEqual_Vector2D_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertEqual_Vector
    static readonly IntPtr AssertEqual_Vector_NativeFunction;
    static readonly int AssertEqual_Vector_ParamsSize;
    static readonly int AssertEqual_Vector_Actual_Offset;
    static readonly int AssertEqual_Vector_Expected_Offset;
    static readonly int AssertEqual_Vector_What_Offset;
    static readonly int AssertEqual_Vector_Tolerance_Offset;
    static readonly int AssertEqual_Vector_ContextObject_Offset;
    static readonly int AssertEqual_Vector_ReturnValue_Offset;
    
    public bool AssertEqual_Vector(System.DoubleNumerics.Vector3 actual, System.DoubleNumerics.Vector3 expected, string what, float tolerance = 0.000100f, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertEqual_Vector_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Vector_Actual_Offset), 0, null, actual);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Vector_Expected_Offset), 0, null, expected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertEqual_Vector_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Vector_Tolerance_Offset), 0, null, tolerance);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Vector_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertEqual_Vector_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertEqual_Vector_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertEqual_Transform
    static readonly IntPtr AssertEqual_Transform_NativeFunction;
    static readonly int AssertEqual_Transform_ParamsSize;
    static readonly int AssertEqual_Transform_Actual_Offset;
    static readonly int AssertEqual_Transform_Expected_Offset;
    static readonly int AssertEqual_Transform_What_Offset;
    static readonly int AssertEqual_Transform_Tolerance_Offset;
    static readonly int AssertEqual_Transform_ContextObject_Offset;
    static readonly int AssertEqual_Transform_ReturnValue_Offset;
    
    public bool AssertEqual_Transform(UnrealSharp.Transform actual, UnrealSharp.Transform expected, string what, float tolerance = 0.000100f, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertEqual_Transform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Transform_Actual_Offset), 0, null, actual);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Transform_Expected_Offset), 0, null, expected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertEqual_Transform_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Transform_Tolerance_Offset), 0, null, tolerance);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Transform_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertEqual_Transform_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertEqual_Transform_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertEqual_TraceQueryResults
    static readonly IntPtr AssertEqual_TraceQueryResults_NativeFunction;
    static readonly int AssertEqual_TraceQueryResults_ParamsSize;
    static readonly int AssertEqual_TraceQueryResults_Actual_Offset;
    static readonly int AssertEqual_TraceQueryResults_Expected_Offset;
    static readonly int AssertEqual_TraceQueryResults_What_Offset;
    static readonly int AssertEqual_TraceQueryResults_ContextObject_Offset;
    static readonly int AssertEqual_TraceQueryResults_ReturnValue_Offset;
    
    public bool AssertEqual_TraceQueryResults(UnrealSharp.FunctionalTesting.TraceQueryTestResults actual, UnrealSharp.FunctionalTesting.TraceQueryTestResults expected, string what, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertEqual_TraceQueryResults_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.FunctionalTesting.TraceQueryTestResults>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_TraceQueryResults_Actual_Offset), 0, null, actual);
            ObjectMarshaller<UnrealSharp.FunctionalTesting.TraceQueryTestResults>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_TraceQueryResults_Expected_Offset), 0, null, expected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertEqual_TraceQueryResults_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_TraceQueryResults_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertEqual_TraceQueryResults_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertEqual_TraceQueryResults_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertEqual_String
    static readonly IntPtr AssertEqual_String_NativeFunction;
    static readonly int AssertEqual_String_ParamsSize;
    static readonly int AssertEqual_String_Actual_Offset;
    static readonly int AssertEqual_String_Expected_Offset;
    static readonly int AssertEqual_String_What_Offset;
    static readonly int AssertEqual_String_ContextObject_Offset;
    static readonly int AssertEqual_String_ReturnValue_Offset;
    
    public bool AssertEqual_String(string actual, string expected, string what, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertEqual_String_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Actual_NativePtr = IntPtr.Add(ParamsBuffer,AssertEqual_String_Actual_Offset);
            StringMarshaller.ToNative(Actual_NativePtr,0,null,actual);
            IntPtr Expected_NativePtr = IntPtr.Add(ParamsBuffer,AssertEqual_String_Expected_Offset);
            StringMarshaller.ToNative(Expected_NativePtr,0,null,expected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertEqual_String_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_String_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertEqual_String_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertEqual_String_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(Actual_NativePtr, 0);
            StringMarshaller.DestructInstance(Expected_NativePtr, 0);
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertEqual_Rotator
    static readonly IntPtr AssertEqual_Rotator_NativeFunction;
    static readonly int AssertEqual_Rotator_ParamsSize;
    static readonly int AssertEqual_Rotator_Actual_Offset;
    static readonly int AssertEqual_Rotator_Expected_Offset;
    static readonly int AssertEqual_Rotator_What_Offset;
    static readonly int AssertEqual_Rotator_Tolerance_Offset;
    static readonly int AssertEqual_Rotator_ContextObject_Offset;
    static readonly int AssertEqual_Rotator_ReturnValue_Offset;
    
    public bool AssertEqual_Rotator(UnrealSharp.Rotator actual, UnrealSharp.Rotator expected, string what, float tolerance = 0.000100f, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertEqual_Rotator_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Rotator_Actual_Offset), 0, null, actual);
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Rotator_Expected_Offset), 0, null, expected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertEqual_Rotator_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Rotator_Tolerance_Offset), 0, null, tolerance);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Rotator_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertEqual_Rotator_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertEqual_Rotator_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertEqual_Quat
    static readonly IntPtr AssertEqual_Quat_NativeFunction;
    static readonly int AssertEqual_Quat_ParamsSize;
    static readonly int AssertEqual_Quat_Actual_Offset;
    static readonly int AssertEqual_Quat_Expected_Offset;
    static readonly int AssertEqual_Quat_What_Offset;
    static readonly int AssertEqual_Quat_Tolerance_Offset;
    static readonly int AssertEqual_Quat_ContextObject_Offset;
    static readonly int AssertEqual_Quat_ReturnValue_Offset;
    
    public bool AssertEqual_Quat(System.DoubleNumerics.Quaternion actual, System.DoubleNumerics.Quaternion expected, string what, float tolerance = 0.000100f, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertEqual_Quat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Quat_Actual_Offset), 0, null, actual);
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Quat_Expected_Offset), 0, null, expected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertEqual_Quat_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Quat_Tolerance_Offset), 0, null, tolerance);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Quat_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertEqual_Quat_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertEqual_Quat_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertEqual_Plane
    static readonly IntPtr AssertEqual_Plane_NativeFunction;
    static readonly int AssertEqual_Plane_ParamsSize;
    static readonly int AssertEqual_Plane_Actual_Offset;
    static readonly int AssertEqual_Plane_Expected_Offset;
    static readonly int AssertEqual_Plane_What_Offset;
    static readonly int AssertEqual_Plane_Tolerance_Offset;
    static readonly int AssertEqual_Plane_ContextObject_Offset;
    static readonly int AssertEqual_Plane_ReturnValue_Offset;
    
    public bool AssertEqual_Plane(UnrealSharp.CoreUObject.Plane actual, UnrealSharp.CoreUObject.Plane expected, string what, float tolerance = 0.000100f, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertEqual_Plane_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.Plane>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Plane_Actual_Offset), 0, null, actual);
            BlittableMarshaller<UnrealSharp.CoreUObject.Plane>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Plane_Expected_Offset), 0, null, expected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertEqual_Plane_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Plane_Tolerance_Offset), 0, null, tolerance);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Plane_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertEqual_Plane_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertEqual_Plane_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertEqual_Object
    static readonly IntPtr AssertEqual_Object_NativeFunction;
    static readonly int AssertEqual_Object_ParamsSize;
    static readonly int AssertEqual_Object_Actual_Offset;
    static readonly int AssertEqual_Object_Expected_Offset;
    static readonly int AssertEqual_Object_What_Offset;
    static readonly int AssertEqual_Object_ContextObject_Offset;
    static readonly int AssertEqual_Object_ReturnValue_Offset;
    
    public bool AssertEqual_Object(UnrealSharp.CoreUObject.Object actual, UnrealSharp.CoreUObject.Object expected, string what, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertEqual_Object_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Object_Actual_Offset), 0, null, actual);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Object_Expected_Offset), 0, null, expected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertEqual_Object_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Object_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertEqual_Object_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertEqual_Object_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertEqual_Name
    static readonly IntPtr AssertEqual_Name_NativeFunction;
    static readonly int AssertEqual_Name_ParamsSize;
    static readonly int AssertEqual_Name_Actual_Offset;
    static readonly int AssertEqual_Name_Expected_Offset;
    static readonly int AssertEqual_Name_What_Offset;
    static readonly int AssertEqual_Name_ContextObject_Offset;
    static readonly int AssertEqual_Name_ReturnValue_Offset;
    
    public bool AssertEqual_Name(Name actual, Name expected, string what, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertEqual_Name_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Name_Actual_Offset), 0, null, actual);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Name_Expected_Offset), 0, null, expected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertEqual_Name_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Name_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertEqual_Name_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertEqual_Name_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertEqual_Matrix
    static readonly IntPtr AssertEqual_Matrix_NativeFunction;
    static readonly int AssertEqual_Matrix_ParamsSize;
    static readonly int AssertEqual_Matrix_Actual_Offset;
    static readonly int AssertEqual_Matrix_Expected_Offset;
    static readonly int AssertEqual_Matrix_What_Offset;
    static readonly int AssertEqual_Matrix_Tolerance_Offset;
    static readonly int AssertEqual_Matrix_ContextObject_Offset;
    static readonly int AssertEqual_Matrix_ReturnValue_Offset;
    
    public bool AssertEqual_Matrix(System.DoubleNumerics.Matrix4x4 actual, System.DoubleNumerics.Matrix4x4 expected, string what, float tolerance = 0.000100f, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertEqual_Matrix_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Matrix_Actual_Offset), 0, null, actual);
            BlittableMarshaller<System.DoubleNumerics.Matrix4x4>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Matrix_Expected_Offset), 0, null, expected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertEqual_Matrix_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Matrix_Tolerance_Offset), 0, null, tolerance);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Matrix_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertEqual_Matrix_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertEqual_Matrix_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertEqual_Int
    static readonly IntPtr AssertEqual_Int_NativeFunction;
    static readonly int AssertEqual_Int_ParamsSize;
    static readonly int AssertEqual_Int_Actual_Offset;
    static readonly int AssertEqual_Int_Expected_Offset;
    static readonly int AssertEqual_Int_What_Offset;
    static readonly int AssertEqual_Int_ContextObject_Offset;
    static readonly int AssertEqual_Int_ReturnValue_Offset;
    
    public bool AssertEqual_Int(int actual, int expected, string what, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertEqual_Int_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Int_Actual_Offset), 0, null, actual);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Int_Expected_Offset), 0, null, expected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertEqual_Int_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Int_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertEqual_Int_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertEqual_Int_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertEqual_Float
    static readonly IntPtr AssertEqual_Float_NativeFunction;
    static readonly int AssertEqual_Float_ParamsSize;
    static readonly int AssertEqual_Float_Actual_Offset;
    static readonly int AssertEqual_Float_Expected_Offset;
    static readonly int AssertEqual_Float_What_Offset;
    static readonly int AssertEqual_Float_Tolerance_Offset;
    static readonly int AssertEqual_Float_ContextObject_Offset;
    static readonly int AssertEqual_Float_ReturnValue_Offset;
    
    public bool AssertEqual_Float(float actual, float expected, string what, float tolerance = 0.000100f, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertEqual_Float_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Float_Actual_Offset), 0, null, actual);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Float_Expected_Offset), 0, null, expected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertEqual_Float_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Float_Tolerance_Offset), 0, null, tolerance);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Float_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertEqual_Float_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertEqual_Float_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertEqual_Double
    static readonly IntPtr AssertEqual_Double_NativeFunction;
    static readonly int AssertEqual_Double_ParamsSize;
    static readonly int AssertEqual_Double_Actual_Offset;
    static readonly int AssertEqual_Double_Expected_Offset;
    static readonly int AssertEqual_Double_What_Offset;
    static readonly int AssertEqual_Double_Tolerance_Offset;
    static readonly int AssertEqual_Double_ContextObject_Offset;
    static readonly int AssertEqual_Double_ReturnValue_Offset;
    
    public bool AssertEqual_Double(double actual, double expected, string what, double tolerance = 0.000100, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertEqual_Double_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Double_Actual_Offset), 0, null, actual);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Double_Expected_Offset), 0, null, expected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertEqual_Double_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Double_Tolerance_Offset), 0, null, tolerance);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Double_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertEqual_Double_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertEqual_Double_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertEqual_Box2D
    static readonly IntPtr AssertEqual_Box2D_NativeFunction;
    static readonly int AssertEqual_Box2D_ParamsSize;
    static readonly int AssertEqual_Box2D_Actual_Offset;
    static readonly int AssertEqual_Box2D_Expected_Offset;
    static readonly int AssertEqual_Box2D_What_Offset;
    static readonly int AssertEqual_Box2D_Tolerance_Offset;
    static readonly int AssertEqual_Box2D_ContextObject_Offset;
    static readonly int AssertEqual_Box2D_ReturnValue_Offset;
    
    public bool AssertEqual_Box2D(UnrealSharp.CoreUObject.Box2D actual, UnrealSharp.CoreUObject.Box2D expected, string what, float tolerance = 0.000100f, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertEqual_Box2D_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.Box2DMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Box2D_Actual_Offset), 0, null, actual);
            UnrealSharp.CoreUObject.Box2DMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Box2D_Expected_Offset), 0, null, expected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertEqual_Box2D_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Box2D_Tolerance_Offset), 0, null, tolerance);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Box2D_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertEqual_Box2D_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertEqual_Box2D_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AssertEqual_Bool
    static readonly IntPtr AssertEqual_Bool_NativeFunction;
    static readonly int AssertEqual_Bool_ParamsSize;
    static readonly int AssertEqual_Bool_Actual_Offset;
    static readonly int AssertEqual_Bool_Expected_Offset;
    static readonly int AssertEqual_Bool_What_Offset;
    static readonly int AssertEqual_Bool_ContextObject_Offset;
    static readonly int AssertEqual_Bool_ReturnValue_Offset;
    
    public bool AssertEqual_Bool(bool actual, bool expected, string what, UnrealSharp.CoreUObject.Object contextObject = default(UnrealSharp.CoreUObject.Object))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AssertEqual_Bool_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Bool_Actual_Offset), 0, null, actual);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Bool_Expected_Offset), 0, null, expected);
            IntPtr What_NativePtr = IntPtr.Add(ParamsBuffer,AssertEqual_Bool_What_Offset);
            StringMarshaller.ToNative(What_NativePtr,0,null,what);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, AssertEqual_Bool_ContextObject_Offset), 0, null, contextObject);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AssertEqual_Bool_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AssertEqual_Bool_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(What_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AddWarning
    static readonly IntPtr AddWarning_NativeFunction;
    static readonly int AddWarning_ParamsSize;
    static readonly int AddWarning_Message_Offset;
    
    public void AddWarning(string message)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddWarning_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Message_NativePtr = IntPtr.Add(ParamsBuffer,AddWarning_Message_Offset);
            StringMarshaller.ToNative(Message_NativePtr,0,null,message);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddWarning_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Message_NativePtr, 0);
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AddRerun
    static readonly IntPtr AddRerun_NativeFunction;
    static readonly int AddRerun_ParamsSize;
    static readonly int AddRerun_Reason_Offset;
    
    public void AddRerun(Name reason)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddRerun_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, AddRerun_Reason_Offset), 0, null, reason);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddRerun_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AddInfo
    static readonly IntPtr AddInfo_NativeFunction;
    static readonly int AddInfo_ParamsSize;
    static readonly int AddInfo_Message_Offset;
    
    public void AddInfo(string message)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddInfo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Message_NativePtr = IntPtr.Add(ParamsBuffer,AddInfo_Message_Offset);
            StringMarshaller.ToNative(Message_NativePtr,0,null,message);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddInfo_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Message_NativePtr, 0);
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:AddError
    static readonly IntPtr AddError_NativeFunction;
    static readonly int AddError_ParamsSize;
    static readonly int AddError_Message_Offset;
    
    public void AddError(string message)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddError_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Message_NativePtr = IntPtr.Add(ParamsBuffer,AddError_Message_Offset);
            StringMarshaller.ToNative(Message_NativePtr,0,null,message);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddError_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Message_NativePtr, 0);
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:ReceiveStartTest
    IntPtr ReceiveStartTest_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void ReceiveStartTest()
    {
        unsafe
        {
            if (ReceiveStartTest_NativeFunction == IntPtr.Zero)
            {
                ReceiveStartTest_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceiveStartTest");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceiveStartTest_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceiveStartTest_Implementation()
    {
    }
    void Invoke_ReceiveStartTest(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            ReceiveStartTest_Implementation();
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:ReceivePrepareTest
    IntPtr ReceivePrepareTest_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void ReceivePrepareTest()
    {
        unsafe
        {
            if (ReceivePrepareTest_NativeFunction == IntPtr.Zero)
            {
                ReceivePrepareTest_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceivePrepareTest");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceivePrepareTest_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceivePrepareTest_Implementation()
    {
    }
    void Invoke_ReceivePrepareTest(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            ReceivePrepareTest_Implementation();
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:OnWantsReRunCheck
    IntPtr OnWantsReRunCheck_NativeFunction;
    static readonly int OnWantsReRunCheck_ParamsSize;
    static readonly int OnWantsReRunCheck_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual bool OnWantsReRunCheck()
    {
        unsafe
        {
            if (OnWantsReRunCheck_NativeFunction == IntPtr.Zero)
            {
                OnWantsReRunCheck_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnWantsReRunCheck");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnWantsReRunCheck_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnWantsReRunCheck_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, OnWantsReRunCheck_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool OnWantsReRunCheck_Implementation()
    {
        return default(bool);
    }
    void Invoke_OnWantsReRunCheck(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            bool returnValue = OnWantsReRunCheck_Implementation();
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:OnAdditionalTestFinishedMessageRequest
    IntPtr OnAdditionalTestFinishedMessageRequest_NativeFunction;
    static readonly int OnAdditionalTestFinishedMessageRequest_ParamsSize;
    static readonly int OnAdditionalTestFinishedMessageRequest_TestResult_Offset;
    static readonly int OnAdditionalTestFinishedMessageRequest_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual string OnAdditionalTestFinishedMessageRequest(UnrealSharp.FunctionalTesting.EFunctionalTestResult testResult)
    {
        unsafe
        {
            if (OnAdditionalTestFinishedMessageRequest_NativeFunction == IntPtr.Zero)
            {
                OnAdditionalTestFinishedMessageRequest_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnAdditionalTestFinishedMessageRequest");
            }
            byte* ParamsBufferAllocation = stackalloc byte[OnAdditionalTestFinishedMessageRequest_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.FunctionalTesting.EFunctionalTestResult>.ToNative(IntPtr.Add(ParamsBuffer, OnAdditionalTestFinishedMessageRequest_TestResult_Offset), 0, null, testResult);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnAdditionalTestFinishedMessageRequest_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,OnAdditionalTestFinishedMessageRequest_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual string OnAdditionalTestFinishedMessageRequest_Implementation(UnrealSharp.FunctionalTesting.EFunctionalTestResult testResult)
    {
        return "";
    }
    void Invoke_OnAdditionalTestFinishedMessageRequest(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.FunctionalTesting.EFunctionalTestResult testResult = BlittableMarshaller<UnrealSharp.FunctionalTesting.EFunctionalTestResult>.FromNative(IntPtr.Add(buffer, OnAdditionalTestFinishedMessageRequest_TestResult_Offset), 0, null);
            string returnValue = OnAdditionalTestFinishedMessageRequest_Implementation(testResult);
            IntPtr ReturnValue_NativePtr = IntPtr.Add(returnBuffer,0);
            StringMarshaller.ToNative(ReturnValue_NativePtr,0,null,returnValue);
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:IsReady
    IntPtr IsReady_NativeFunction;
    static readonly int IsReady_ParamsSize;
    static readonly int IsReady_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual bool IsReady()
    {
        unsafe
        {
            if (IsReady_NativeFunction == IntPtr.Zero)
            {
                IsReady_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "IsReady");
            }
            byte* ParamsBufferAllocation = stackalloc byte[IsReady_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsReady_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsReady_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool IsReady_Implementation()
    {
        return default(bool);
    }
    void Invoke_IsReady(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            bool returnValue = IsReady_Implementation();
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/FunctionalTesting.FunctionalTest:DebugGatherRelevantActors
    IntPtr DebugGatherRelevantActors_NativeFunction;
    static readonly int DebugGatherRelevantActors_ParamsSize;
    static readonly int DebugGatherRelevantActors_ReturnValue_Offset;
    static readonly int DebugGatherRelevantActors_ReturnValue_ElementSize;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual System.Collections.Generic.IList<UnrealSharp.Engine.Actor> DebugGatherRelevantActors()
    {
        unsafe
        {
            if (DebugGatherRelevantActors_NativeFunction == IntPtr.Zero)
            {
                DebugGatherRelevantActors_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "DebugGatherRelevantActors");
            }
            byte* ParamsBufferAllocation = stackalloc byte[DebugGatherRelevantActors_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DebugGatherRelevantActors_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.Engine.Actor> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, DebugGatherRelevantActors_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> (1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, DebugGatherRelevantActors_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual System.Collections.Generic.IList<UnrealSharp.Engine.Actor> DebugGatherRelevantActors_Implementation()
    {
        return null;
    }
    void Invoke_DebugGatherRelevantActors(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            System.Collections.Generic.IList<UnrealSharp.Engine.Actor> returnValue = DebugGatherRelevantActors_Implementation();
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(returnBuffer, 0);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, DebugGatherRelevantActors_ReturnValue_ElementSize);
            ReturnValue_Marshaler.ToNative(ReturnValue_NativeBuffer, 0, null, returnValue);
        }
    }
    
    
}
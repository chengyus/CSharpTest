// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.GLTFExporter;

[UClass]
public partial class GLTFExportOptions : UnrealSharp.CoreUObject.Object
{
    
    static GLTFExportOptions()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("GLTFExportOptions");
        
        ExportUniformScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ExportUniformScale");
        bExportPreviewMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bExportPreviewMesh");
        bSkipNearDefaultValues_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSkipNearDefaultValues");
        bIncludeCopyrightNotice_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bIncludeCopyrightNotice");
        bExportProxyMaterials_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bExportProxyMaterials");
        bExportUnlitMaterials_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bExportUnlitMaterials");
        bExportClearCoatMaterials_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bExportClearCoatMaterials");
        bExportEmissiveStrength_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bExportEmissiveStrength");
        BakeMaterialInputs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BakeMaterialInputs");
        DefaultMaterialBakeSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultMaterialBakeSize");
        DefaultMaterialBakeFilter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultMaterialBakeFilter");
        DefaultMaterialBakeTiling_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultMaterialBakeTiling");
        DefaultLevelOfDetail_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DefaultLevelOfDetail");
        bExportVertexColors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bExportVertexColors");
        bExportVertexSkinWeights_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bExportVertexSkinWeights");
        bUseMeshQuantization_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseMeshQuantization");
        bExportLevelSequences_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bExportLevelSequences");
        bExportAnimationSequences_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bExportAnimationSequences");
        TextureImageFormat_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TextureImageFormat");
        TextureImageQuality_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TextureImageQuality");
        bExportTextureTransforms_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bExportTextureTransforms");
        bAdjustNormalmaps_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAdjustNormalmaps");
        bExportHiddenInGame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bExportHiddenInGame");
        bExportLights_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bExportLights");
        bExportCameras_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bExportCameras");
        ExportMaterialVariants_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ExportMaterialVariants");
        
        ResetToDefault_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ResetToDefault");
        
        
    }
    
    protected GLTFExportOptions(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/GLTFExporter.GLTFExportOptions:ExportUniformScale
    static readonly int ExportUniformScale_Offset;
    
    public float ExportUniformScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ExportUniformScale_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ExportUniformScale_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GLTFExporter.GLTFExportOptions:bExportPreviewMesh
    static readonly int bExportPreviewMesh_Offset;
    
    public bool bExportPreviewMesh
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bExportPreviewMesh_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bExportPreviewMesh_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GLTFExporter.GLTFExportOptions:bSkipNearDefaultValues
    static readonly int bSkipNearDefaultValues_Offset;
    
    public bool bSkipNearDefaultValues
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bSkipNearDefaultValues_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bSkipNearDefaultValues_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GLTFExporter.GLTFExportOptions:bIncludeCopyrightNotice
    static readonly int bIncludeCopyrightNotice_Offset;
    
    public bool bIncludeCopyrightNotice
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bIncludeCopyrightNotice_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bIncludeCopyrightNotice_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GLTFExporter.GLTFExportOptions:bExportProxyMaterials
    static readonly int bExportProxyMaterials_Offset;
    
    public bool bExportProxyMaterials
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bExportProxyMaterials_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bExportProxyMaterials_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GLTFExporter.GLTFExportOptions:bExportUnlitMaterials
    static readonly int bExportUnlitMaterials_Offset;
    
    public bool bExportUnlitMaterials
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bExportUnlitMaterials_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bExportUnlitMaterials_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GLTFExporter.GLTFExportOptions:bExportClearCoatMaterials
    static readonly int bExportClearCoatMaterials_Offset;
    
    public bool bExportClearCoatMaterials
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bExportClearCoatMaterials_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bExportClearCoatMaterials_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GLTFExporter.GLTFExportOptions:bExportEmissiveStrength
    static readonly int bExportEmissiveStrength_Offset;
    
    public bool bExportEmissiveStrength
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bExportEmissiveStrength_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bExportEmissiveStrength_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/GLTFExporter.GLTFExportOptions:BakeMaterialInputs
    static readonly int BakeMaterialInputs_Offset;
    
    public UnrealSharp.GLTFExporter.EGLTFMaterialBakeMode BakeMaterialInputs
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.GLTFExporter.EGLTFMaterialBakeMode>.FromNative(IntPtr.Add(NativeObject, BakeMaterialInputs_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.GLTFExporter.EGLTFMaterialBakeMode>.ToNative(IntPtr.Add(NativeObject, BakeMaterialInputs_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/GLTFExporter.GLTFExportOptions:DefaultMaterialBakeSize
    static readonly int DefaultMaterialBakeSize_Offset;
    
    public UnrealSharp.GLTFExporter.EGLTFMaterialBakeSizePOT DefaultMaterialBakeSize
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.GLTFExporter.EGLTFMaterialBakeSizePOT>.FromNative(IntPtr.Add(NativeObject, DefaultMaterialBakeSize_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.GLTFExporter.EGLTFMaterialBakeSizePOT>.ToNative(IntPtr.Add(NativeObject, DefaultMaterialBakeSize_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/GLTFExporter.GLTFExportOptions:DefaultMaterialBakeFilter
    static readonly int DefaultMaterialBakeFilter_Offset;
    
    public UnrealSharp.Engine.TextureFilter DefaultMaterialBakeFilter
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.TextureFilter>.FromNative(IntPtr.Add(NativeObject, DefaultMaterialBakeFilter_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.TextureFilter>.ToNative(IntPtr.Add(NativeObject, DefaultMaterialBakeFilter_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/GLTFExporter.GLTFExportOptions:DefaultMaterialBakeTiling
    static readonly int DefaultMaterialBakeTiling_Offset;
    
    public UnrealSharp.Engine.TextureAddress DefaultMaterialBakeTiling
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.TextureAddress>.FromNative(IntPtr.Add(NativeObject, DefaultMaterialBakeTiling_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.TextureAddress>.ToNative(IntPtr.Add(NativeObject, DefaultMaterialBakeTiling_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/GLTFExporter.GLTFExportOptions:DefaultLevelOfDetail
    static readonly int DefaultLevelOfDetail_Offset;
    
    public int DefaultLevelOfDetail
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, DefaultLevelOfDetail_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, DefaultLevelOfDetail_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GLTFExporter.GLTFExportOptions:bExportVertexColors
    static readonly int bExportVertexColors_Offset;
    
    public bool bExportVertexColors
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bExportVertexColors_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bExportVertexColors_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GLTFExporter.GLTFExportOptions:bExportVertexSkinWeights
    static readonly int bExportVertexSkinWeights_Offset;
    
    public bool bExportVertexSkinWeights
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bExportVertexSkinWeights_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bExportVertexSkinWeights_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GLTFExporter.GLTFExportOptions:bUseMeshQuantization
    static readonly int bUseMeshQuantization_Offset;
    
    public bool bUseMeshQuantization
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseMeshQuantization_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bUseMeshQuantization_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GLTFExporter.GLTFExportOptions:bExportLevelSequences
    static readonly int bExportLevelSequences_Offset;
    
    public bool bExportLevelSequences
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bExportLevelSequences_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bExportLevelSequences_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GLTFExporter.GLTFExportOptions:bExportAnimationSequences
    static readonly int bExportAnimationSequences_Offset;
    
    public bool bExportAnimationSequences
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bExportAnimationSequences_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bExportAnimationSequences_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/GLTFExporter.GLTFExportOptions:TextureImageFormat
    static readonly int TextureImageFormat_Offset;
    
    public UnrealSharp.GLTFExporter.EGLTFTextureImageFormat TextureImageFormat
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.GLTFExporter.EGLTFTextureImageFormat>.FromNative(IntPtr.Add(NativeObject, TextureImageFormat_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.GLTFExporter.EGLTFTextureImageFormat>.ToNative(IntPtr.Add(NativeObject, TextureImageFormat_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/GLTFExporter.GLTFExportOptions:TextureImageQuality
    static readonly int TextureImageQuality_Offset;
    
    public int TextureImageQuality
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, TextureImageQuality_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, TextureImageQuality_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GLTFExporter.GLTFExportOptions:bExportTextureTransforms
    static readonly int bExportTextureTransforms_Offset;
    
    public bool bExportTextureTransforms
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bExportTextureTransforms_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bExportTextureTransforms_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GLTFExporter.GLTFExportOptions:bAdjustNormalmaps
    static readonly int bAdjustNormalmaps_Offset;
    
    public bool bAdjustNormalmaps
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAdjustNormalmaps_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAdjustNormalmaps_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GLTFExporter.GLTFExportOptions:bExportHiddenInGame
    static readonly int bExportHiddenInGame_Offset;
    
    public bool bExportHiddenInGame
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bExportHiddenInGame_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bExportHiddenInGame_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GLTFExporter.GLTFExportOptions:bExportLights
    static readonly int bExportLights_Offset;
    
    public bool bExportLights
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bExportLights_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bExportLights_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GLTFExporter.GLTFExportOptions:bExportCameras
    static readonly int bExportCameras_Offset;
    
    public bool bExportCameras
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bExportCameras_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bExportCameras_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/GLTFExporter.GLTFExportOptions:ExportMaterialVariants
    static readonly int ExportMaterialVariants_Offset;
    
    public UnrealSharp.GLTFExporter.EGLTFMaterialVariantMode ExportMaterialVariants
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.GLTFExporter.EGLTFMaterialVariantMode>.FromNative(IntPtr.Add(NativeObject, ExportMaterialVariants_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.GLTFExporter.EGLTFMaterialVariantMode>.ToNative(IntPtr.Add(NativeObject, ExportMaterialVariants_Offset), 0, this, value);
        }
    }
    
    // Function /Script/GLTFExporter.GLTFExportOptions:ResetToDefault
    static readonly IntPtr ResetToDefault_NativeFunction;
    
    public void ResetToDefault()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ResetToDefault_NativeFunction, IntPtr.Zero);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.GeometryCache;

[UClass]
public partial class GeometryCache : UnrealSharp.CoreUObject.Object
{
    
    static GeometryCache()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("GeometryCache");
        
        Materials_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Materials");
        Materials_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Materials");
        MaterialSlotNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaterialSlotNames");
        MaterialSlotNames_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "MaterialSlotNames");
        StartFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StartFrame");
        EndFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "EndFrame");
        
        
        
    }
    
    protected GeometryCache(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ArrayProperty /Script/GeometryCache.GeometryCache:Materials
    static readonly int Materials_Offset;
    static readonly IntPtr Materials_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.MaterialInterface> Materials_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.MaterialInterface> Materials
    {
        get
        {
            if(Materials_Wrapper == null)
            {
                Materials_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.MaterialInterface>(1, Materials_NativeProperty, ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative, ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.FromNative);
            }
            
            return Materials_Wrapper.FromNative(IntPtr.Add(NativeObject,Materials_Offset),0,this);
        }
    }
    
    // ArrayProperty /Script/GeometryCache.GeometryCache:MaterialSlotNames
    static readonly int MaterialSlotNames_Offset;
    static readonly IntPtr MaterialSlotNames_NativeProperty;
    UnrealArrayReadWriteMarshaler<Name> MaterialSlotNames_Wrapper = null;
    
    public System.Collections.Generic.IList<Name> MaterialSlotNames
    {
        get
        {
            if(MaterialSlotNames_Wrapper == null)
            {
                MaterialSlotNames_Wrapper = new UnrealArrayReadWriteMarshaler<Name>(1, MaterialSlotNames_NativeProperty, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative);
            }
            
            return MaterialSlotNames_Wrapper.FromNative(IntPtr.Add(NativeObject,MaterialSlotNames_Offset),0,this);
        }
    }
    
    // IntProperty /Script/GeometryCache.GeometryCache:StartFrame
    static readonly int StartFrame_Offset;
    
    public int StartFrame
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, StartFrame_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/GeometryCache.GeometryCache:EndFrame
    static readonly int EndFrame_Offset;
    
    public int EndFrame
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, EndFrame_Offset), 0, this);
        }
    }
    
    
}
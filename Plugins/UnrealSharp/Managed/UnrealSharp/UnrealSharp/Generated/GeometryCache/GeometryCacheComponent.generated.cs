// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.GeometryCache;

[UClass]
public partial class GeometryCacheComponent : UnrealSharp.Engine.MeshComponent
{
    
    static GeometryCacheComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("GeometryCacheComponent");
        
        GeometryCache_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "GeometryCache");
        bRunning_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bRunning");
        bLooping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bLooping");
        StartTimeOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StartTimeOffset");
        PlaybackSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PlaybackSpeed");
        MotionVectorScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MotionVectorScale");
        Duration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Duration");
        
        TickAtThisTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "TickAtThisTime");
        TickAtThisTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(TickAtThisTime_NativeFunction);
        TickAtThisTime_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TickAtThisTime_NativeFunction, "Time");
        TickAtThisTime_bInIsRunning_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TickAtThisTime_NativeFunction, "bInIsRunning");
        TickAtThisTime_bInBackwards_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TickAtThisTime_NativeFunction, "bInBackwards");
        TickAtThisTime_bInIsLooping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(TickAtThisTime_NativeFunction, "bInIsLooping");
        Stop_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Stop");
        SetWireframeOverrideColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetWireframeOverrideColor");
        SetWireframeOverrideColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetWireframeOverrideColor_NativeFunction);
        SetWireframeOverrideColor_Color_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetWireframeOverrideColor_NativeFunction, "Color");
        SetStartTimeOffset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetStartTimeOffset");
        SetStartTimeOffset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetStartTimeOffset_NativeFunction);
        SetStartTimeOffset_NewStartTimeOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetStartTimeOffset_NativeFunction, "NewStartTimeOffset");
        SetPlaybackSpeed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlaybackSpeed");
        SetPlaybackSpeed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlaybackSpeed_NativeFunction);
        SetPlaybackSpeed_NewPlaybackSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaybackSpeed_NativeFunction, "NewPlaybackSpeed");
        SetOverrideWireframeColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetOverrideWireframeColor");
        SetOverrideWireframeColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetOverrideWireframeColor_NativeFunction);
        SetOverrideWireframeColor_bOverride_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetOverrideWireframeColor_NativeFunction, "bOverride");
        SetMotionVectorScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMotionVectorScale");
        SetMotionVectorScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMotionVectorScale_NativeFunction);
        SetMotionVectorScale_NewMotionVectorScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMotionVectorScale_NativeFunction, "NewMotionVectorScale");
        SetLooping_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLooping");
        SetLooping_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLooping_NativeFunction);
        SetLooping_bNewLooping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLooping_NativeFunction, "bNewLooping");
        SetGeometryCache_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetGeometryCache");
        SetGeometryCache_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetGeometryCache_NativeFunction);
        SetGeometryCache_NewGeomCache_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGeometryCache_NativeFunction, "NewGeomCache");
        SetGeometryCache_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetGeometryCache_NativeFunction, "ReturnValue");
        SetExtrapolateFrames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetExtrapolateFrames");
        SetExtrapolateFrames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetExtrapolateFrames_NativeFunction);
        SetExtrapolateFrames_bNewExtrapolating_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetExtrapolateFrames_NativeFunction, "bNewExtrapolating");
        PlayReversedFromEnd_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlayReversedFromEnd");
        PlayReversed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlayReversed");
        PlayFromStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlayFromStart");
        Play_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Play");
        Pause_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Pause");
        IsPlayingReversed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPlayingReversed");
        IsPlayingReversed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPlayingReversed_NativeFunction);
        IsPlayingReversed_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPlayingReversed_NativeFunction, "ReturnValue");
        IsPlaying_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPlaying");
        IsPlaying_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPlaying_NativeFunction);
        IsPlaying_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPlaying_NativeFunction, "ReturnValue");
        IsLooping_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsLooping");
        IsLooping_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsLooping_NativeFunction);
        IsLooping_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLooping_NativeFunction, "ReturnValue");
        IsExtrapolatingFrames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsExtrapolatingFrames");
        IsExtrapolatingFrames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsExtrapolatingFrames_NativeFunction);
        IsExtrapolatingFrames_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsExtrapolatingFrames_NativeFunction, "ReturnValue");
        GetWireframeOverrideColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWireframeOverrideColor");
        GetWireframeOverrideColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWireframeOverrideColor_NativeFunction);
        GetWireframeOverrideColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWireframeOverrideColor_NativeFunction, "ReturnValue");
        GetStartTimeOffset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStartTimeOffset");
        GetStartTimeOffset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStartTimeOffset_NativeFunction);
        GetStartTimeOffset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStartTimeOffset_NativeFunction, "ReturnValue");
        GetPlaybackSpeed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlaybackSpeed");
        GetPlaybackSpeed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlaybackSpeed_NativeFunction);
        GetPlaybackSpeed_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlaybackSpeed_NativeFunction, "ReturnValue");
        GetPlaybackDirection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlaybackDirection");
        GetPlaybackDirection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlaybackDirection_NativeFunction);
        GetPlaybackDirection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlaybackDirection_NativeFunction, "ReturnValue");
        GetOverrideWireframeColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOverrideWireframeColor");
        GetOverrideWireframeColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOverrideWireframeColor_NativeFunction);
        GetOverrideWireframeColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOverrideWireframeColor_NativeFunction, "ReturnValue");
        GetNumberOfFrames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumberOfFrames");
        GetNumberOfFrames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumberOfFrames_NativeFunction);
        GetNumberOfFrames_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumberOfFrames_NativeFunction, "ReturnValue");
        GetMotionVectorScale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMotionVectorScale");
        GetMotionVectorScale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMotionVectorScale_NativeFunction);
        GetMotionVectorScale_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMotionVectorScale_NativeFunction, "ReturnValue");
        GetDuration_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDuration");
        GetDuration_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDuration_NativeFunction);
        GetDuration_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDuration_NativeFunction, "ReturnValue");
        GetAnimationTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnimationTime");
        GetAnimationTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnimationTime_NativeFunction);
        GetAnimationTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnimationTime_NativeFunction, "ReturnValue");
        
        
    }
    
    protected GeometryCacheComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/GeometryCache.GeometryCacheComponent:GeometryCache
    static readonly int GeometryCache_Offset;
    
    public UnrealSharp.GeometryCache.GeometryCache GeometryCache
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.GeometryCache.GeometryCache>.FromNative(IntPtr.Add(NativeObject, GeometryCache_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/GeometryCache.GeometryCacheComponent:bRunning
    static readonly int bRunning_Offset;
    
    public bool bRunning
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bRunning_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bRunning_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GeometryCache.GeometryCacheComponent:bLooping
    static readonly int bLooping_Offset;
    
    public bool bLooping
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bLooping_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bLooping_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/GeometryCache.GeometryCacheComponent:StartTimeOffset
    static readonly int StartTimeOffset_Offset;
    
    public float StartTimeOffset
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, StartTimeOffset_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, StartTimeOffset_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/GeometryCache.GeometryCacheComponent:PlaybackSpeed
    static readonly int PlaybackSpeed_Offset;
    
    public float PlaybackSpeed
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PlaybackSpeed_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PlaybackSpeed_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/GeometryCache.GeometryCacheComponent:MotionVectorScale
    static readonly int MotionVectorScale_Offset;
    
    public float MotionVectorScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MotionVectorScale_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MotionVectorScale_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/GeometryCache.GeometryCacheComponent:Duration
    static readonly int Duration_Offset;
    
    public float Duration
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Duration_Offset), 0, this);
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:TickAtThisTime
    static readonly IntPtr TickAtThisTime_NativeFunction;
    static readonly int TickAtThisTime_ParamsSize;
    static readonly int TickAtThisTime_Time_Offset;
    static readonly int TickAtThisTime_bInIsRunning_Offset;
    static readonly int TickAtThisTime_bInBackwards_Offset;
    static readonly int TickAtThisTime_bInIsLooping_Offset;
    
    public void TickAtThisTime(float time, bool bInIsRunning, bool bInBackwards, bool bInIsLooping)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[TickAtThisTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, TickAtThisTime_Time_Offset), 0, null, time);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, TickAtThisTime_bInIsRunning_Offset), 0, null, bInIsRunning);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, TickAtThisTime_bInBackwards_Offset), 0, null, bInBackwards);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, TickAtThisTime_bInIsLooping_Offset), 0, null, bInIsLooping);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, TickAtThisTime_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:Stop
    static readonly IntPtr Stop_NativeFunction;
    
    public void Stop()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Stop_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:SetWireframeOverrideColor
    static readonly IntPtr SetWireframeOverrideColor_NativeFunction;
    static readonly int SetWireframeOverrideColor_ParamsSize;
    static readonly int SetWireframeOverrideColor_Color_Offset;
    
    public void SetWireframeOverrideColor(UnrealSharp.CoreUObject.LinearColor color)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetWireframeOverrideColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetWireframeOverrideColor_Color_Offset), 0, null, color);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetWireframeOverrideColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:SetStartTimeOffset
    static readonly IntPtr SetStartTimeOffset_NativeFunction;
    static readonly int SetStartTimeOffset_ParamsSize;
    static readonly int SetStartTimeOffset_NewStartTimeOffset_Offset;
    
    public void SetStartTimeOffset(float newStartTimeOffset)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetStartTimeOffset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetStartTimeOffset_NewStartTimeOffset_Offset), 0, null, newStartTimeOffset);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetStartTimeOffset_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:SetPlaybackSpeed
    static readonly IntPtr SetPlaybackSpeed_NativeFunction;
    static readonly int SetPlaybackSpeed_ParamsSize;
    static readonly int SetPlaybackSpeed_NewPlaybackSpeed_Offset;
    
    public void SetPlaybackSpeed(float newPlaybackSpeed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlaybackSpeed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaybackSpeed_NewPlaybackSpeed_Offset), 0, null, newPlaybackSpeed);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPlaybackSpeed_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:SetOverrideWireframeColor
    static readonly IntPtr SetOverrideWireframeColor_NativeFunction;
    static readonly int SetOverrideWireframeColor_ParamsSize;
    static readonly int SetOverrideWireframeColor_bOverride_Offset;
    
    public void SetOverrideWireframeColor(bool bOverride)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetOverrideWireframeColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetOverrideWireframeColor_bOverride_Offset), 0, null, bOverride);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetOverrideWireframeColor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:SetMotionVectorScale
    static readonly IntPtr SetMotionVectorScale_NativeFunction;
    static readonly int SetMotionVectorScale_ParamsSize;
    static readonly int SetMotionVectorScale_NewMotionVectorScale_Offset;
    
    public void SetMotionVectorScale(float newMotionVectorScale)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMotionVectorScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMotionVectorScale_NewMotionVectorScale_Offset), 0, null, newMotionVectorScale);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMotionVectorScale_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:SetLooping
    static readonly IntPtr SetLooping_NativeFunction;
    static readonly int SetLooping_ParamsSize;
    static readonly int SetLooping_bNewLooping_Offset;
    
    public void SetLooping(bool bNewLooping)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLooping_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLooping_bNewLooping_Offset), 0, null, bNewLooping);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLooping_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:SetGeometryCache
    static readonly IntPtr SetGeometryCache_NativeFunction;
    static readonly int SetGeometryCache_ParamsSize;
    static readonly int SetGeometryCache_NewGeomCache_Offset;
    static readonly int SetGeometryCache_ReturnValue_Offset;
    
    public bool SetGeometryCache(UnrealSharp.GeometryCache.GeometryCache newGeomCache)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetGeometryCache_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.GeometryCache.GeometryCache>.ToNative(IntPtr.Add(ParamsBuffer, SetGeometryCache_NewGeomCache_Offset), 0, null, newGeomCache);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetGeometryCache_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetGeometryCache_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:SetExtrapolateFrames
    static readonly IntPtr SetExtrapolateFrames_NativeFunction;
    static readonly int SetExtrapolateFrames_ParamsSize;
    static readonly int SetExtrapolateFrames_bNewExtrapolating_Offset;
    
    public void SetExtrapolateFrames(bool bNewExtrapolating)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetExtrapolateFrames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetExtrapolateFrames_bNewExtrapolating_Offset), 0, null, bNewExtrapolating);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetExtrapolateFrames_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:PlayReversedFromEnd
    static readonly IntPtr PlayReversedFromEnd_NativeFunction;
    
    public void PlayReversedFromEnd()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PlayReversedFromEnd_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:PlayReversed
    static readonly IntPtr PlayReversed_NativeFunction;
    
    public void PlayReversed()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PlayReversed_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:PlayFromStart
    static readonly IntPtr PlayFromStart_NativeFunction;
    
    public void PlayFromStart()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PlayFromStart_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:Play
    static readonly IntPtr Play_NativeFunction;
    
    public void Play()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Play_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:Pause
    static readonly IntPtr Pause_NativeFunction;
    
    public void Pause()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Pause_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:IsPlayingReversed
    static readonly IntPtr IsPlayingReversed_NativeFunction;
    static readonly int IsPlayingReversed_ParamsSize;
    static readonly int IsPlayingReversed_ReturnValue_Offset;
    
    public bool IsPlayingReversed()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPlayingReversed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsPlayingReversed_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPlayingReversed_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:IsPlaying
    static readonly IntPtr IsPlaying_NativeFunction;
    static readonly int IsPlaying_ParamsSize;
    static readonly int IsPlaying_ReturnValue_Offset;
    
    public bool IsPlaying()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPlaying_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsPlaying_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPlaying_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:IsLooping
    static readonly IntPtr IsLooping_NativeFunction;
    static readonly int IsLooping_ParamsSize;
    static readonly int IsLooping_ReturnValue_Offset;
    
    public bool IsLooping()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsLooping_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsLooping_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsLooping_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:IsExtrapolatingFrames
    static readonly IntPtr IsExtrapolatingFrames_NativeFunction;
    static readonly int IsExtrapolatingFrames_ParamsSize;
    static readonly int IsExtrapolatingFrames_ReturnValue_Offset;
    
    public bool IsExtrapolatingFrames()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsExtrapolatingFrames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsExtrapolatingFrames_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsExtrapolatingFrames_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:GetWireframeOverrideColor
    static readonly IntPtr GetWireframeOverrideColor_NativeFunction;
    static readonly int GetWireframeOverrideColor_ParamsSize;
    static readonly int GetWireframeOverrideColor_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor GetWireframeOverrideColor()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWireframeOverrideColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetWireframeOverrideColor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, GetWireframeOverrideColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:GetStartTimeOffset
    static readonly IntPtr GetStartTimeOffset_NativeFunction;
    static readonly int GetStartTimeOffset_ParamsSize;
    static readonly int GetStartTimeOffset_ReturnValue_Offset;
    
    public float GetStartTimeOffset()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStartTimeOffset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetStartTimeOffset_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetStartTimeOffset_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:GetPlaybackSpeed
    static readonly IntPtr GetPlaybackSpeed_NativeFunction;
    static readonly int GetPlaybackSpeed_ParamsSize;
    static readonly int GetPlaybackSpeed_ReturnValue_Offset;
    
    public float GetPlaybackSpeed()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlaybackSpeed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPlaybackSpeed_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetPlaybackSpeed_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:GetPlaybackDirection
    static readonly IntPtr GetPlaybackDirection_NativeFunction;
    static readonly int GetPlaybackDirection_ParamsSize;
    static readonly int GetPlaybackDirection_ReturnValue_Offset;
    
    public float GetPlaybackDirection()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlaybackDirection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPlaybackDirection_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetPlaybackDirection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:GetOverrideWireframeColor
    static readonly IntPtr GetOverrideWireframeColor_NativeFunction;
    static readonly int GetOverrideWireframeColor_ParamsSize;
    static readonly int GetOverrideWireframeColor_ReturnValue_Offset;
    
    public bool GetOverrideWireframeColor()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOverrideWireframeColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOverrideWireframeColor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetOverrideWireframeColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:GetNumberOfFrames
    static readonly IntPtr GetNumberOfFrames_NativeFunction;
    static readonly int GetNumberOfFrames_ParamsSize;
    static readonly int GetNumberOfFrames_ReturnValue_Offset;
    
    public int GetNumberOfFrames()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumberOfFrames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumberOfFrames_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumberOfFrames_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:GetMotionVectorScale
    static readonly IntPtr GetMotionVectorScale_NativeFunction;
    static readonly int GetMotionVectorScale_ParamsSize;
    static readonly int GetMotionVectorScale_ReturnValue_Offset;
    
    public float GetMotionVectorScale()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMotionVectorScale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMotionVectorScale_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetMotionVectorScale_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:GetDuration
    static readonly IntPtr GetDuration_NativeFunction;
    static readonly int GetDuration_ParamsSize;
    static readonly int GetDuration_ReturnValue_Offset;
    
    public float GetDuration()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDuration_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDuration_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetDuration_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/GeometryCache.GeometryCacheComponent:GetAnimationTime
    static readonly IntPtr GetAnimationTime_NativeFunction;
    static readonly int GetAnimationTime_ParamsSize;
    static readonly int GetAnimationTime_ReturnValue_Offset;
    
    public float GetAnimationTime()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnimationTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAnimationTime_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetAnimationTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
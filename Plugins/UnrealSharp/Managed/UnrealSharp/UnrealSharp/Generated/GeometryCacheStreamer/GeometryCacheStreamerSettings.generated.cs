// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.GeometryCacheStreamer;

[UClass]
public partial class GeometryCacheStreamerSettings : UnrealSharp.DeveloperSettings.DeveloperSettings
{
    
    static GeometryCacheStreamerSettings()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("GeometryCacheStreamerSettings");
        
        LookAheadBuffer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LookAheadBuffer");
        MaxMemoryAllowed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxMemoryAllowed");
        
        
        
    }
    
    protected GeometryCacheStreamerSettings(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/GeometryCacheStreamer.GeometryCacheStreamerSettings:LookAheadBuffer
    static readonly int LookAheadBuffer_Offset;
    
    public float LookAheadBuffer
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LookAheadBuffer_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, LookAheadBuffer_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/GeometryCacheStreamer.GeometryCacheStreamerSettings:MaxMemoryAllowed
    static readonly int MaxMemoryAllowed_Offset;
    
    public float MaxMemoryAllowed
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxMemoryAllowed_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxMemoryAllowed_Offset), 0, this, value);
        }
    }
    
    
}
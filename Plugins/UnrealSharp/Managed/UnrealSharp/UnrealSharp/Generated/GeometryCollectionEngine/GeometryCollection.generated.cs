// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.GeometryCollectionEngine;

[UClass]
public partial class GeometryCollection : UnrealSharp.CoreUObject.Object
{
    
    static GeometryCollection()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("GeometryCollection");
        
        DamageModel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DamageModel");
        GeometrySource_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "GeometrySource");
        GeometrySource_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "GeometrySource");
        bStripOnCook_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bStripOnCook");
        bStripRenderDataOnCook_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bStripRenderDataOnCook");
        RootProxyData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RootProxyData");
        EnableNanite_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "EnableNanite");
        bConvertVertexColorsToSRGB_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bConvertVertexColorsToSRGB");
        PhysicsMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PhysicsMaterial");
        bDensityFromPhysicsMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bDensityFromPhysicsMaterial");
        bMassAsDensity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bMassAsDensity");
        Mass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Mass");
        MinimumMassClamp_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinimumMassClamp");
        bImportCollisionFromSource_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImportCollisionFromSource");
        bScaleOnRemoval_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bScaleOnRemoval");
        bRemoveOnMaxSleep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bRemoveOnMaxSleep");
        MaximumSleepTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaximumSleepTime");
        RemovalDuration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RemovalDuration");
        bSlowMovingAsSleeping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSlowMovingAsSleeping");
        SlowMovingVelocityThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SlowMovingVelocityThreshold");
        AssetImportData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AssetImportData");
        DataflowAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DataflowAsset");
        
        SetEnableNanite_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetEnableNanite");
        SetEnableNanite_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetEnableNanite_NativeFunction);
        SetEnableNanite_bValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEnableNanite_NativeFunction, "bValue");
        SetConvertVertexColorsToSRGB_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetConvertVertexColorsToSRGB");
        SetConvertVertexColorsToSRGB_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetConvertVertexColorsToSRGB_NativeFunction);
        SetConvertVertexColorsToSRGB_bValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetConvertVertexColorsToSRGB_NativeFunction, "bValue");
        
        
    }
    
    protected GeometryCollection(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // EnumProperty /Script/GeometryCollectionEngine.GeometryCollection:DamageModel
    static readonly int DamageModel_Offset;
    
    public UnrealSharp.Chaos.EDamageModelTypeEnum DamageModel
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Chaos.EDamageModelTypeEnum>.FromNative(IntPtr.Add(NativeObject, DamageModel_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Chaos.EDamageModelTypeEnum>.ToNative(IntPtr.Add(NativeObject, DamageModel_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/GeometryCollectionEngine.GeometryCollection:GeometrySource
    static readonly int GeometrySource_Offset;
    static readonly IntPtr GeometrySource_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.GeometryCollectionEngine.GeometryCollectionSource> GeometrySource_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.GeometryCollectionEngine.GeometryCollectionSource> GeometrySource
    {
        get
        {
            if(GeometrySource_Wrapper == null)
            {
                GeometrySource_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.GeometryCollectionEngine.GeometryCollectionSource>(1, GeometrySource_NativeProperty, UnrealSharp.GeometryCollectionEngine.GeometryCollectionSourceMarshaler.ToNative, UnrealSharp.GeometryCollectionEngine.GeometryCollectionSourceMarshaler.FromNative);
            }
            
            return GeometrySource_Wrapper.FromNative(IntPtr.Add(NativeObject,GeometrySource_Offset),0,this);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollection:bStripOnCook
    static readonly int bStripOnCook_Offset;
    
    public bool bStripOnCook
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bStripOnCook_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bStripOnCook_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollection:bStripRenderDataOnCook
    static readonly int bStripRenderDataOnCook_Offset;
    
    public bool bStripRenderDataOnCook
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bStripRenderDataOnCook_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bStripRenderDataOnCook_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/GeometryCollectionEngine.GeometryCollection:RootProxyData
    static readonly int RootProxyData_Offset;
    
    public UnrealSharp.GeometryCollectionEngine.GeometryCollectionProxyMeshData RootProxyData
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.GeometryCollectionEngine.GeometryCollectionProxyMeshDataMarshaler.FromNative(IntPtr.Add(NativeObject, RootProxyData_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.GeometryCollectionEngine.GeometryCollectionProxyMeshDataMarshaler.ToNative(IntPtr.Add(NativeObject, RootProxyData_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollection:EnableNanite
    static readonly int EnableNanite_Offset;
    
    public bool EnableNanite
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, EnableNanite_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, EnableNanite_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollection:bConvertVertexColorsToSRGB
    static readonly int bConvertVertexColorsToSRGB_Offset;
    
    public bool bConvertVertexColorsToSRGB
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bConvertVertexColorsToSRGB_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bConvertVertexColorsToSRGB_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/GeometryCollectionEngine.GeometryCollection:PhysicsMaterial
    static readonly int PhysicsMaterial_Offset;
    
    public UnrealSharp.PhysicsCore.PhysicalMaterial PhysicsMaterial
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.PhysicsCore.PhysicalMaterial>.FromNative(IntPtr.Add(NativeObject, PhysicsMaterial_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollection:bDensityFromPhysicsMaterial
    static readonly int bDensityFromPhysicsMaterial_Offset;
    
    public bool bDensityFromPhysicsMaterial
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bDensityFromPhysicsMaterial_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bDensityFromPhysicsMaterial_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollection:bMassAsDensity
    static readonly int bMassAsDensity_Offset;
    
    public bool bMassAsDensity
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bMassAsDensity_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bMassAsDensity_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/GeometryCollectionEngine.GeometryCollection:Mass
    static readonly int Mass_Offset;
    
    public float Mass
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Mass_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Mass_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/GeometryCollectionEngine.GeometryCollection:MinimumMassClamp
    static readonly int MinimumMassClamp_Offset;
    
    public float MinimumMassClamp
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinimumMassClamp_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollection:bImportCollisionFromSource
    static readonly int bImportCollisionFromSource_Offset;
    
    public bool bImportCollisionFromSource
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bImportCollisionFromSource_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bImportCollisionFromSource_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollection:bScaleOnRemoval
    static readonly int bScaleOnRemoval_Offset;
    
    public bool bScaleOnRemoval
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bScaleOnRemoval_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bScaleOnRemoval_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollection:bRemoveOnMaxSleep
    static readonly int bRemoveOnMaxSleep_Offset;
    
    public bool bRemoveOnMaxSleep
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bRemoveOnMaxSleep_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/GeometryCollectionEngine.GeometryCollection:MaximumSleepTime
    static readonly int MaximumSleepTime_Offset;
    
    public System.DoubleNumerics.Vector2 MaximumSleepTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(NativeObject, MaximumSleepTime_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/GeometryCollectionEngine.GeometryCollection:RemovalDuration
    static readonly int RemovalDuration_Offset;
    
    public System.DoubleNumerics.Vector2 RemovalDuration
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector2>.FromNative(IntPtr.Add(NativeObject, RemovalDuration_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollection:bSlowMovingAsSleeping
    static readonly int bSlowMovingAsSleeping_Offset;
    
    public bool bSlowMovingAsSleeping
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bSlowMovingAsSleeping_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/GeometryCollectionEngine.GeometryCollection:SlowMovingVelocityThreshold
    static readonly int SlowMovingVelocityThreshold_Offset;
    
    public float SlowMovingVelocityThreshold
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SlowMovingVelocityThreshold_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/GeometryCollectionEngine.GeometryCollection:AssetImportData
    static readonly int AssetImportData_Offset;
    
    public UnrealSharp.Engine.AssetImportData AssetImportData
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.AssetImportData>.FromNative(IntPtr.Add(NativeObject, AssetImportData_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.AssetImportData>.ToNative(IntPtr.Add(NativeObject, AssetImportData_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/GeometryCollectionEngine.GeometryCollection:DataflowAsset
    static readonly int DataflowAsset_Offset;
    
    public UnrealSharp.DataflowEngine.Dataflow DataflowAsset
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.DataflowEngine.Dataflow>.FromNative(IntPtr.Add(NativeObject, DataflowAsset_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.DataflowEngine.Dataflow>.ToNative(IntPtr.Add(NativeObject, DataflowAsset_Offset), 0, this, value);
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollection:SetEnableNanite
    static readonly IntPtr SetEnableNanite_NativeFunction;
    static readonly int SetEnableNanite_ParamsSize;
    static readonly int SetEnableNanite_bValue_Offset;
    
    public void SetEnableNanite(bool bValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetEnableNanite_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetEnableNanite_bValue_Offset), 0, null, bValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetEnableNanite_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollection:SetConvertVertexColorsToSRGB
    static readonly IntPtr SetConvertVertexColorsToSRGB_NativeFunction;
    static readonly int SetConvertVertexColorsToSRGB_ParamsSize;
    static readonly int SetConvertVertexColorsToSRGB_bValue_Offset;
    
    public void SetConvertVertexColorsToSRGB(bool bValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetConvertVertexColorsToSRGB_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetConvertVertexColorsToSRGB_bValue_Offset), 0, null, bValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetConvertVertexColorsToSRGB_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
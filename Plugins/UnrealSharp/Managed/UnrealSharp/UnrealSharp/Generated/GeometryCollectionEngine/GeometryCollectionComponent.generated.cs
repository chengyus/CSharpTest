// This file is automatically generated
using UnrealSharp.ChaosSolverEngine;
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.GeometryCollectionEngine;

[UClass]
public partial class GeometryCollectionComponent : UnrealSharp.Engine.MeshComponent, IChaosNotifyHandlerInterface
{
    
    static GeometryCollectionComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("GeometryCollectionComponent");
        
        RestCollection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RestCollection");
        InitializationFields_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InitializationFields");
        InitializationFields_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "InitializationFields");
        ObjectType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ObjectType");
        GravityGroupIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "GravityGroupIndex");
        bForceMotionBlur_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bForceMotionBlur");
        EnableClustering_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "EnableClustering");
        ClusterGroupIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ClusterGroupIndex");
        MaxClusterLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxClusterLevel");
        MaxSimulatedLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxSimulatedLevel");
        DamageModel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DamageModel");
        DamageThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DamageThreshold");
        DamageThreshold_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "DamageThreshold");
        bUseSizeSpecificDamageThreshold_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseSizeSpecificDamageThreshold");
        DamagePropagationData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DamagePropagationData");
        bEnableDamageFromCollision_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableDamageFromCollision");
        bAllowRemovalOnSleep_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAllowRemovalOnSleep");
        bAllowRemovalOnBreak_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAllowRemovalOnBreak");
        CollisionGroup_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CollisionGroup");
        CollisionSampleFraction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CollisionSampleFraction");
        InitialVelocityType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InitialVelocityType");
        InitialLinearVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InitialLinearVelocity");
        InitialAngularVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InitialAngularVelocity");
        DesiredCacheTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DesiredCacheTime");
        CachePlayback_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CachePlayback");
        bNotifyBreaks_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bNotifyBreaks");
        bNotifyCollisions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bNotifyCollisions");
        bNotifyTrailing_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bNotifyTrailing");
        bNotifyRemovals_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bNotifyRemovals");
        bNotifyCrumblings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bNotifyCrumblings");
        bCrumblingEventIncludesChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCrumblingEventIncludesChildren");
        bNotifyGlobalBreaks_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bNotifyGlobalBreaks");
        bNotifyGlobalCollisions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bNotifyGlobalCollisions");
        bNotifyGlobalRemovals_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bNotifyGlobalRemovals");
        bNotifyGlobalCrumblings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bNotifyGlobalCrumblings");
        bGlobalCrumblingEventIncludesChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bGlobalCrumblingEventIncludesChildren");
        bStoreVelocities_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bStoreVelocities");
        bShowBoneColors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bShowBoneColors");
        bUseRootProxyForNavigation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseRootProxyForNavigation");
        bUpdateNavigationInTick_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUpdateNavigationInTick");
        RunTimeDataCollectionGuid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RunTimeDataCollectionGuid");
        bOverrideCustomRenderer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOverrideCustomRenderer");
        bEnableReplication_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableReplication");
        bEnableAbandonAfterLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableAbandonAfterLevel");
        AbandonedCollisionProfileName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AbandonedCollisionProfileName");
        CollisionProfilePerLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CollisionProfilePerLevel");
        CollisionProfilePerLevel_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "CollisionProfilePerLevel");
        ReplicationAbandonAfterLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ReplicationAbandonAfterLevel");
        ReplicationMaxPositionAndVelocityCorrectionLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ReplicationMaxPositionAndVelocityCorrectionLevel");
        
        SetRestCollection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRestCollection");
        SetRestCollection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRestCollection_NativeFunction);
        SetRestCollection_RestCollectionIn_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRestCollection_NativeFunction, "RestCollectionIn");
        SetRestCollection_bApplyAssetDefaults_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRestCollection_NativeFunction, "bApplyAssetDefaults");
        SetPerParticleCollisionProfileName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPerParticleCollisionProfileName");
        SetPerParticleCollisionProfileName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPerParticleCollisionProfileName_NativeFunction);
        SetPerParticleCollisionProfileName_BoneIds_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPerParticleCollisionProfileName_NativeFunction, "BoneIds");
        SetPerParticleCollisionProfileName_BoneIds_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetPerParticleCollisionProfileName_NativeFunction, "BoneIds");
        SetPerParticleCollisionProfileName_ProfileName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPerParticleCollisionProfileName_NativeFunction, "ProfileName");
        SetPerLevelCollisionProfileNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPerLevelCollisionProfileNames");
        SetPerLevelCollisionProfileNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPerLevelCollisionProfileNames_NativeFunction);
        SetPerLevelCollisionProfileNames_ProfileNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPerLevelCollisionProfileNames_NativeFunction, "ProfileNames");
        SetPerLevelCollisionProfileNames_ProfileNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetPerLevelCollisionProfileNames_NativeFunction, "ProfileNames");
        SetNotifyRemovals_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNotifyRemovals");
        SetNotifyRemovals_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNotifyRemovals_NativeFunction);
        SetNotifyRemovals_bNewNotifyRemovals_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNotifyRemovals_NativeFunction, "bNewNotifyRemovals");
        SetNotifyGlobalRemovals_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNotifyGlobalRemovals");
        SetNotifyGlobalRemovals_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNotifyGlobalRemovals_NativeFunction);
        SetNotifyGlobalRemovals_bNewNotifyGlobalRemovals_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNotifyGlobalRemovals_NativeFunction, "bNewNotifyGlobalRemovals");
        SetNotifyGlobalCrumblings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNotifyGlobalCrumblings");
        SetNotifyGlobalCrumblings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNotifyGlobalCrumblings_NativeFunction);
        SetNotifyGlobalCrumblings_bNewNotifyGlobalCrumblings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNotifyGlobalCrumblings_NativeFunction, "bNewNotifyGlobalCrumblings");
        SetNotifyGlobalCrumblings_bGlobalNewCrumblingEventIncludesChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNotifyGlobalCrumblings_NativeFunction, "bGlobalNewCrumblingEventIncludesChildren");
        SetNotifyGlobalCollision_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNotifyGlobalCollision");
        SetNotifyGlobalCollision_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNotifyGlobalCollision_NativeFunction);
        SetNotifyGlobalCollision_bNewNotifyGlobalCollisions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNotifyGlobalCollision_NativeFunction, "bNewNotifyGlobalCollisions");
        SetNotifyGlobalBreaks_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNotifyGlobalBreaks");
        SetNotifyGlobalBreaks_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNotifyGlobalBreaks_NativeFunction);
        SetNotifyGlobalBreaks_bNewNotifyGlobalBreaks_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNotifyGlobalBreaks_NativeFunction, "bNewNotifyGlobalBreaks");
        SetNotifyCrumblings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNotifyCrumblings");
        SetNotifyCrumblings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNotifyCrumblings_NativeFunction);
        SetNotifyCrumblings_bNewNotifyCrumblings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNotifyCrumblings_NativeFunction, "bNewNotifyCrumblings");
        SetNotifyCrumblings_bNewCrumblingEventIncludesChildren_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNotifyCrumblings_NativeFunction, "bNewCrumblingEventIncludesChildren");
        SetNotifyBreaks_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNotifyBreaks");
        SetNotifyBreaks_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNotifyBreaks_NativeFunction);
        SetNotifyBreaks_bNewNotifyBreaks_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNotifyBreaks_NativeFunction, "bNewNotifyBreaks");
        SetLocalRestTransforms_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLocalRestTransforms");
        SetLocalRestTransforms_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLocalRestTransforms_NativeFunction);
        SetLocalRestTransforms_Transforms_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalRestTransforms_NativeFunction, "Transforms");
        SetLocalRestTransforms_Transforms_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetLocalRestTransforms_NativeFunction, "Transforms");
        SetLocalRestTransforms_bOnlyLeaves_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLocalRestTransforms_NativeFunction, "bOnlyLeaves");
        SetEnableDamageFromCollision_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetEnableDamageFromCollision");
        SetEnableDamageFromCollision_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetEnableDamageFromCollision_NativeFunction);
        SetEnableDamageFromCollision_bValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEnableDamageFromCollision_NativeFunction, "bValue");
        SetAnchoredByTransformedBox_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAnchoredByTransformedBox");
        SetAnchoredByTransformedBox_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAnchoredByTransformedBox_NativeFunction);
        SetAnchoredByTransformedBox_Box_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnchoredByTransformedBox_NativeFunction, "Box");
        SetAnchoredByTransformedBox_Transform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnchoredByTransformedBox_NativeFunction, "Transform");
        SetAnchoredByTransformedBox_bAnchored_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnchoredByTransformedBox_NativeFunction, "bAnchored");
        SetAnchoredByTransformedBox_MaxLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnchoredByTransformedBox_NativeFunction, "MaxLevel");
        SetAnchoredByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAnchoredByIndex");
        SetAnchoredByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAnchoredByIndex_NativeFunction);
        SetAnchoredByIndex_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnchoredByIndex_NativeFunction, "Index");
        SetAnchoredByIndex_bAnchored_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnchoredByIndex_NativeFunction, "bAnchored");
        SetAnchoredByBox_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAnchoredByBox");
        SetAnchoredByBox_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAnchoredByBox_NativeFunction);
        SetAnchoredByBox_WorldSpaceBox_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnchoredByBox_NativeFunction, "WorldSpaceBox");
        SetAnchoredByBox_bAnchored_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnchoredByBox_NativeFunction, "bAnchored");
        SetAnchoredByBox_MaxLevel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAnchoredByBox_NativeFunction, "MaxLevel");
        SetAbandonedParticleCollisionProfileName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAbandonedParticleCollisionProfileName");
        SetAbandonedParticleCollisionProfileName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAbandonedParticleCollisionProfileName_NativeFunction);
        SetAbandonedParticleCollisionProfileName_CollisionProfile_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAbandonedParticleCollisionProfileName_NativeFunction, "CollisionProfile");
        RemoveAllAnchors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveAllAnchors");
        IsRootBroken_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsRootBroken");
        IsRootBroken_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsRootBroken_NativeFunction);
        IsRootBroken_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsRootBroken_NativeFunction, "ReturnValue");
        GetRootInitialTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRootInitialTransform");
        GetRootInitialTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRootInitialTransform_NativeFunction);
        GetRootInitialTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRootInitialTransform_NativeFunction, "ReturnValue");
        GetRootIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRootIndex");
        GetRootIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRootIndex_NativeFunction);
        GetRootIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRootIndex_NativeFunction, "ReturnValue");
        GetRootCurrentTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRootCurrentTransform");
        GetRootCurrentTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRootCurrentTransform_NativeFunction);
        GetRootCurrentTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRootCurrentTransform_NativeFunction, "ReturnValue");
        GetMassAndExtents_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMassAndExtents");
        GetMassAndExtents_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMassAndExtents_NativeFunction);
        GetMassAndExtents_ItemIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMassAndExtents_NativeFunction, "ItemIndex");
        GetMassAndExtents_OutMass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMassAndExtents_NativeFunction, "OutMass");
        GetMassAndExtents_OutExtents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMassAndExtents_NativeFunction, "OutExtents");
        GetLocalBounds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocalBounds");
        GetLocalBounds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocalBounds_NativeFunction);
        GetLocalBounds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocalBounds_NativeFunction, "ReturnValue");
        GetInitialLocalRestTransforms_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInitialLocalRestTransforms");
        GetInitialLocalRestTransforms_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInitialLocalRestTransforms_NativeFunction);
        GetInitialLocalRestTransforms_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInitialLocalRestTransforms_NativeFunction, "ReturnValue");
        GetInitialLocalRestTransforms_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetInitialLocalRestTransforms_NativeFunction, "ReturnValue");
        GetInitialLevel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInitialLevel");
        GetInitialLevel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInitialLevel_NativeFunction);
        GetInitialLevel_ItemIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInitialLevel_NativeFunction, "ItemIndex");
        GetInitialLevel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInitialLevel_NativeFunction, "ReturnValue");
        GetDebugInfo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDebugInfo");
        GetDebugInfo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDebugInfo_NativeFunction);
        GetDebugInfo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDebugInfo_NativeFunction, "ReturnValue");
        CrumbleCluster_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CrumbleCluster");
        CrumbleCluster_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CrumbleCluster_NativeFunction);
        CrumbleCluster_ItemIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CrumbleCluster_NativeFunction, "ItemIndex");
        CrumbleActiveClusters_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CrumbleActiveClusters");
        ApplyPhysicsField_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ApplyPhysicsField");
        ApplyPhysicsField_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ApplyPhysicsField_NativeFunction);
        ApplyPhysicsField_Enabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyPhysicsField_NativeFunction, "Enabled");
        ApplyPhysicsField_Target_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyPhysicsField_NativeFunction, "Target");
        ApplyPhysicsField_MetaData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyPhysicsField_NativeFunction, "MetaData");
        ApplyPhysicsField_Field_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyPhysicsField_NativeFunction, "Field");
        ApplyLinearVelocity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ApplyLinearVelocity");
        ApplyLinearVelocity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ApplyLinearVelocity_NativeFunction);
        ApplyLinearVelocity_ItemIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyLinearVelocity_NativeFunction, "ItemIndex");
        ApplyLinearVelocity_LinearVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyLinearVelocity_NativeFunction, "LinearVelocity");
        ApplyKinematicField_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ApplyKinematicField");
        ApplyKinematicField_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ApplyKinematicField_NativeFunction);
        ApplyKinematicField_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyKinematicField_NativeFunction, "Radius");
        ApplyKinematicField_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyKinematicField_NativeFunction, "Position");
        ApplyInternalStrain_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ApplyInternalStrain");
        ApplyInternalStrain_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ApplyInternalStrain_NativeFunction);
        ApplyInternalStrain_ItemIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyInternalStrain_NativeFunction, "ItemIndex");
        ApplyInternalStrain_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyInternalStrain_NativeFunction, "Location");
        ApplyInternalStrain_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyInternalStrain_NativeFunction, "Radius");
        ApplyInternalStrain_PropagationDepth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyInternalStrain_NativeFunction, "PropagationDepth");
        ApplyInternalStrain_PropagationFactor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyInternalStrain_NativeFunction, "PropagationFactor");
        ApplyInternalStrain_Strain_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyInternalStrain_NativeFunction, "Strain");
        ApplyExternalStrain_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ApplyExternalStrain");
        ApplyExternalStrain_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ApplyExternalStrain_NativeFunction);
        ApplyExternalStrain_ItemIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyExternalStrain_NativeFunction, "ItemIndex");
        ApplyExternalStrain_Location_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyExternalStrain_NativeFunction, "Location");
        ApplyExternalStrain_Radius_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyExternalStrain_NativeFunction, "Radius");
        ApplyExternalStrain_PropagationDepth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyExternalStrain_NativeFunction, "PropagationDepth");
        ApplyExternalStrain_PropagationFactor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyExternalStrain_NativeFunction, "PropagationFactor");
        ApplyExternalStrain_Strain_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyExternalStrain_NativeFunction, "Strain");
        ApplyBreakingLinearVelocity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ApplyBreakingLinearVelocity");
        ApplyBreakingLinearVelocity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ApplyBreakingLinearVelocity_NativeFunction);
        ApplyBreakingLinearVelocity_ItemIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyBreakingLinearVelocity_NativeFunction, "ItemIndex");
        ApplyBreakingLinearVelocity_LinearVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyBreakingLinearVelocity_NativeFunction, "LinearVelocity");
        ApplyBreakingAngularVelocity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ApplyBreakingAngularVelocity");
        ApplyBreakingAngularVelocity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ApplyBreakingAngularVelocity_NativeFunction);
        ApplyBreakingAngularVelocity_ItemIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyBreakingAngularVelocity_NativeFunction, "ItemIndex");
        ApplyBreakingAngularVelocity_AngularVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyBreakingAngularVelocity_NativeFunction, "AngularVelocity");
        ApplyAssetDefaults_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ApplyAssetDefaults");
        ApplyAngularVelocity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ApplyAngularVelocity");
        ApplyAngularVelocity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ApplyAngularVelocity_NativeFunction);
        ApplyAngularVelocity_ItemIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyAngularVelocity_NativeFunction, "ItemIndex");
        ApplyAngularVelocity_AngularVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ApplyAngularVelocity_NativeFunction, "AngularVelocity");
        
        IntPtr ReceivePhysicsCollision_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReceivePhysicsCollision");
        ReceivePhysicsCollision_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReceivePhysicsCollision_NativeFunction);
        ReceivePhysicsCollision_CollisionInfo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReceivePhysicsCollision_NativeFunction, "CollisionInfo");
        
        
    }
    
    protected GeometryCollectionComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:RestCollection
    static readonly int RestCollection_Offset;
    
    public UnrealSharp.GeometryCollectionEngine.GeometryCollection RestCollection
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.GeometryCollectionEngine.GeometryCollection>.FromNative(IntPtr.Add(NativeObject, RestCollection_Offset), 0, this);
        }
    }
    
    // ArrayProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:InitializationFields
    static readonly int InitializationFields_Offset;
    static readonly IntPtr InitializationFields_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.FieldSystemEngine.FieldSystemActor> InitializationFields_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.FieldSystemEngine.FieldSystemActor> InitializationFields
    {
        get
        {
            if(InitializationFields_Wrapper == null)
            {
                InitializationFields_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.FieldSystemEngine.FieldSystemActor>(1, InitializationFields_NativeProperty, ObjectMarshaller<UnrealSharp.FieldSystemEngine.FieldSystemActor>.ToNative, ObjectMarshaller<UnrealSharp.FieldSystemEngine.FieldSystemActor>.FromNative);
            }
            
            return InitializationFields_Wrapper.FromNative(IntPtr.Add(NativeObject,InitializationFields_Offset),0,this);
        }
    }
    
    // EnumProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:ObjectType
    static readonly int ObjectType_Offset;
    
    public UnrealSharp.Chaos.EObjectStateTypeEnum ObjectType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Chaos.EObjectStateTypeEnum>.FromNative(IntPtr.Add(NativeObject, ObjectType_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Chaos.EObjectStateTypeEnum>.ToNative(IntPtr.Add(NativeObject, ObjectType_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:GravityGroupIndex
    static readonly int GravityGroupIndex_Offset;
    
    public int GravityGroupIndex
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, GravityGroupIndex_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, GravityGroupIndex_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bForceMotionBlur
    static readonly int bForceMotionBlur_Offset;
    
    public bool bForceMotionBlur
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bForceMotionBlur_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bForceMotionBlur_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:EnableClustering
    static readonly int EnableClustering_Offset;
    
    public bool EnableClustering
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, EnableClustering_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, EnableClustering_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:ClusterGroupIndex
    static readonly int ClusterGroupIndex_Offset;
    
    public int ClusterGroupIndex
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, ClusterGroupIndex_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, ClusterGroupIndex_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:MaxClusterLevel
    static readonly int MaxClusterLevel_Offset;
    
    public int MaxClusterLevel
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, MaxClusterLevel_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, MaxClusterLevel_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:MaxSimulatedLevel
    static readonly int MaxSimulatedLevel_Offset;
    
    public int MaxSimulatedLevel
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, MaxSimulatedLevel_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, MaxSimulatedLevel_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:DamageModel
    static readonly int DamageModel_Offset;
    
    public UnrealSharp.Chaos.EDamageModelTypeEnum DamageModel
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Chaos.EDamageModelTypeEnum>.FromNative(IntPtr.Add(NativeObject, DamageModel_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Chaos.EDamageModelTypeEnum>.ToNative(IntPtr.Add(NativeObject, DamageModel_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:DamageThreshold
    static readonly int DamageThreshold_Offset;
    static readonly IntPtr DamageThreshold_NativeProperty;
    UnrealArrayReadWriteMarshaler<float> DamageThreshold_Wrapper = null;
    
    public System.Collections.Generic.IList<float> DamageThreshold
    {
        get
        {
            if(DamageThreshold_Wrapper == null)
            {
                DamageThreshold_Wrapper = new UnrealArrayReadWriteMarshaler<float>(1, DamageThreshold_NativeProperty, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative);
            }
            
            return DamageThreshold_Wrapper.FromNative(IntPtr.Add(NativeObject,DamageThreshold_Offset),0,this);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bUseSizeSpecificDamageThreshold
    static readonly int bUseSizeSpecificDamageThreshold_Offset;
    
    public bool bUseSizeSpecificDamageThreshold
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseSizeSpecificDamageThreshold_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bUseSizeSpecificDamageThreshold_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:DamagePropagationData
    static readonly int DamagePropagationData_Offset;
    
    public UnrealSharp.GeometryCollectionEngine.GeometryCollectionDamagePropagationData DamagePropagationData
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.GeometryCollectionEngine.GeometryCollectionDamagePropagationDataMarshaler.FromNative(IntPtr.Add(NativeObject, DamagePropagationData_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.GeometryCollectionEngine.GeometryCollectionDamagePropagationDataMarshaler.ToNative(IntPtr.Add(NativeObject, DamagePropagationData_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bEnableDamageFromCollision
    static readonly int bEnableDamageFromCollision_Offset;
    
    public bool bEnableDamageFromCollision
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bEnableDamageFromCollision_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bEnableDamageFromCollision_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bAllowRemovalOnSleep
    static readonly int bAllowRemovalOnSleep_Offset;
    
    public bool bAllowRemovalOnSleep
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAllowRemovalOnSleep_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAllowRemovalOnSleep_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bAllowRemovalOnBreak
    static readonly int bAllowRemovalOnBreak_Offset;
    
    public bool bAllowRemovalOnBreak
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAllowRemovalOnBreak_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAllowRemovalOnBreak_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:CollisionGroup
    static readonly int CollisionGroup_Offset;
    
    public int CollisionGroup
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, CollisionGroup_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, CollisionGroup_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:CollisionSampleFraction
    static readonly int CollisionSampleFraction_Offset;
    
    public float CollisionSampleFraction
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CollisionSampleFraction_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, CollisionSampleFraction_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:InitialVelocityType
    static readonly int InitialVelocityType_Offset;
    
    public UnrealSharp.Chaos.EInitialVelocityTypeEnum InitialVelocityType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Chaos.EInitialVelocityTypeEnum>.FromNative(IntPtr.Add(NativeObject, InitialVelocityType_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Chaos.EInitialVelocityTypeEnum>.ToNative(IntPtr.Add(NativeObject, InitialVelocityType_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:InitialLinearVelocity
    static readonly int InitialLinearVelocity_Offset;
    
    public System.DoubleNumerics.Vector3 InitialLinearVelocity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, InitialLinearVelocity_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, InitialLinearVelocity_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:InitialAngularVelocity
    static readonly int InitialAngularVelocity_Offset;
    
    public System.DoubleNumerics.Vector3 InitialAngularVelocity
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, InitialAngularVelocity_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, InitialAngularVelocity_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:DesiredCacheTime
    static readonly int DesiredCacheTime_Offset;
    
    public float DesiredCacheTime
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, DesiredCacheTime_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, DesiredCacheTime_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:CachePlayback
    static readonly int CachePlayback_Offset;
    
    public bool CachePlayback
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, CachePlayback_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, CachePlayback_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bNotifyBreaks
    static readonly int bNotifyBreaks_Offset;
    
    public bool bNotifyBreaks
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bNotifyBreaks_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bNotifyCollisions
    static readonly int bNotifyCollisions_Offset;
    
    public bool bNotifyCollisions
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bNotifyCollisions_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bNotifyTrailing
    static readonly int bNotifyTrailing_Offset;
    
    public bool bNotifyTrailing
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bNotifyTrailing_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bNotifyRemovals
    static readonly int bNotifyRemovals_Offset;
    
    public bool bNotifyRemovals
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bNotifyRemovals_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bNotifyCrumblings
    static readonly int bNotifyCrumblings_Offset;
    
    public bool bNotifyCrumblings
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bNotifyCrumblings_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bCrumblingEventIncludesChildren
    static readonly int bCrumblingEventIncludesChildren_Offset;
    
    public bool bCrumblingEventIncludesChildren
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bCrumblingEventIncludesChildren_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bNotifyGlobalBreaks
    static readonly int bNotifyGlobalBreaks_Offset;
    
    public bool bNotifyGlobalBreaks
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bNotifyGlobalBreaks_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bNotifyGlobalCollisions
    static readonly int bNotifyGlobalCollisions_Offset;
    
    public bool bNotifyGlobalCollisions
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bNotifyGlobalCollisions_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bNotifyGlobalRemovals
    static readonly int bNotifyGlobalRemovals_Offset;
    
    public bool bNotifyGlobalRemovals
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bNotifyGlobalRemovals_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bNotifyGlobalCrumblings
    static readonly int bNotifyGlobalCrumblings_Offset;
    
    public bool bNotifyGlobalCrumblings
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bNotifyGlobalCrumblings_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bGlobalCrumblingEventIncludesChildren
    static readonly int bGlobalCrumblingEventIncludesChildren_Offset;
    
    public bool bGlobalCrumblingEventIncludesChildren
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bGlobalCrumblingEventIncludesChildren_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bStoreVelocities
    static readonly int bStoreVelocities_Offset;
    
    public bool bStoreVelocities
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bStoreVelocities_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bShowBoneColors
    static readonly int bShowBoneColors_Offset;
    
    public bool bShowBoneColors
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bShowBoneColors_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bShowBoneColors_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bUseRootProxyForNavigation
    static readonly int bUseRootProxyForNavigation_Offset;
    
    public bool bUseRootProxyForNavigation
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseRootProxyForNavigation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bUseRootProxyForNavigation_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bUpdateNavigationInTick
    static readonly int bUpdateNavigationInTick_Offset;
    
    public bool bUpdateNavigationInTick
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUpdateNavigationInTick_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bUpdateNavigationInTick_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:RunTimeDataCollectionGuid
    static readonly int RunTimeDataCollectionGuid_Offset;
    
    public UnrealSharp.CoreUObject.Guid RunTimeDataCollectionGuid
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.CoreUObject.GuidMarshaler.FromNative(IntPtr.Add(NativeObject, RunTimeDataCollectionGuid_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bOverrideCustomRenderer
    static readonly int bOverrideCustomRenderer_Offset;
    
    public bool bOverrideCustomRenderer
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bOverrideCustomRenderer_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bOverrideCustomRenderer_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bEnableReplication
    static readonly int bEnableReplication_Offset;
    
    public bool bEnableReplication
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bEnableReplication_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bEnableReplication_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:bEnableAbandonAfterLevel
    static readonly int bEnableAbandonAfterLevel_Offset;
    
    public bool bEnableAbandonAfterLevel
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bEnableAbandonAfterLevel_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bEnableAbandonAfterLevel_Offset), 0, this, value);
        }
    }
    
    // NameProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:AbandonedCollisionProfileName
    static readonly int AbandonedCollisionProfileName_Offset;
    
    public Name AbandonedCollisionProfileName
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, AbandonedCollisionProfileName_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, AbandonedCollisionProfileName_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:CollisionProfilePerLevel
    static readonly int CollisionProfilePerLevel_Offset;
    static readonly IntPtr CollisionProfilePerLevel_NativeProperty;
    UnrealArrayReadWriteMarshaler<Name> CollisionProfilePerLevel_Wrapper = null;
    
    public System.Collections.Generic.IList<Name> CollisionProfilePerLevel
    {
        get
        {
            if(CollisionProfilePerLevel_Wrapper == null)
            {
                CollisionProfilePerLevel_Wrapper = new UnrealArrayReadWriteMarshaler<Name>(1, CollisionProfilePerLevel_NativeProperty, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative);
            }
            
            return CollisionProfilePerLevel_Wrapper.FromNative(IntPtr.Add(NativeObject,CollisionProfilePerLevel_Offset),0,this);
        }
    }
    
    // IntProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:ReplicationAbandonAfterLevel
    static readonly int ReplicationAbandonAfterLevel_Offset;
    
    public int ReplicationAbandonAfterLevel
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, ReplicationAbandonAfterLevel_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, ReplicationAbandonAfterLevel_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/GeometryCollectionEngine.GeometryCollectionComponent:ReplicationMaxPositionAndVelocityCorrectionLevel
    static readonly int ReplicationMaxPositionAndVelocityCorrectionLevel_Offset;
    
    public int ReplicationMaxPositionAndVelocityCorrectionLevel
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, ReplicationMaxPositionAndVelocityCorrectionLevel_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, ReplicationMaxPositionAndVelocityCorrectionLevel_Offset), 0, this, value);
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:SetRestCollection
    static readonly IntPtr SetRestCollection_NativeFunction;
    static readonly int SetRestCollection_ParamsSize;
    static readonly int SetRestCollection_RestCollectionIn_Offset;
    static readonly int SetRestCollection_bApplyAssetDefaults_Offset;
    
    public void SetRestCollection(UnrealSharp.GeometryCollectionEngine.GeometryCollection restCollectionIn, bool bApplyAssetDefaults = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRestCollection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.GeometryCollectionEngine.GeometryCollection>.ToNative(IntPtr.Add(ParamsBuffer, SetRestCollection_RestCollectionIn_Offset), 0, null, restCollectionIn);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetRestCollection_bApplyAssetDefaults_Offset), 0, null, bApplyAssetDefaults);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRestCollection_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:SetPerParticleCollisionProfileName
    static readonly IntPtr SetPerParticleCollisionProfileName_NativeFunction;
    static readonly int SetPerParticleCollisionProfileName_ParamsSize;
    static readonly int SetPerParticleCollisionProfileName_BoneIds_Offset;
    static readonly int SetPerParticleCollisionProfileName_BoneIds_ElementSize;
    static readonly int SetPerParticleCollisionProfileName_ProfileName_Offset;
    
    public void SetPerParticleCollisionProfileName(System.Collections.Generic.IList<int> boneIds, Name profileName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPerParticleCollisionProfileName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr BoneIds_NativeBuffer = IntPtr.Add(ParamsBuffer, SetPerParticleCollisionProfileName_BoneIds_Offset);
            UnrealArrayCopyMarshaler<int> BoneIds_Marshaler = new UnrealArrayCopyMarshaler<int>(1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, SetPerParticleCollisionProfileName_BoneIds_ElementSize);
            BoneIds_Marshaler.ToNative(BoneIds_NativeBuffer, 0, null, boneIds);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetPerParticleCollisionProfileName_ProfileName_Offset), 0, null, profileName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPerParticleCollisionProfileName_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:SetPerLevelCollisionProfileNames
    static readonly IntPtr SetPerLevelCollisionProfileNames_NativeFunction;
    static readonly int SetPerLevelCollisionProfileNames_ParamsSize;
    static readonly int SetPerLevelCollisionProfileNames_ProfileNames_Offset;
    static readonly int SetPerLevelCollisionProfileNames_ProfileNames_ElementSize;
    
    public void SetPerLevelCollisionProfileNames(System.Collections.Generic.IList<Name> profileNames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPerLevelCollisionProfileNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ProfileNames_NativeBuffer = IntPtr.Add(ParamsBuffer, SetPerLevelCollisionProfileNames_ProfileNames_Offset);
            UnrealArrayCopyMarshaler<Name> ProfileNames_Marshaler = new UnrealArrayCopyMarshaler<Name>(1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, SetPerLevelCollisionProfileNames_ProfileNames_ElementSize);
            ProfileNames_Marshaler.ToNative(ProfileNames_NativeBuffer, 0, null, profileNames);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetPerLevelCollisionProfileNames_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:SetNotifyRemovals
    static readonly IntPtr SetNotifyRemovals_NativeFunction;
    static readonly int SetNotifyRemovals_ParamsSize;
    static readonly int SetNotifyRemovals_bNewNotifyRemovals_Offset;
    
    public void SetNotifyRemovals(bool bNewNotifyRemovals)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNotifyRemovals_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetNotifyRemovals_bNewNotifyRemovals_Offset), 0, null, bNewNotifyRemovals);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNotifyRemovals_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:SetNotifyGlobalRemovals
    static readonly IntPtr SetNotifyGlobalRemovals_NativeFunction;
    static readonly int SetNotifyGlobalRemovals_ParamsSize;
    static readonly int SetNotifyGlobalRemovals_bNewNotifyGlobalRemovals_Offset;
    
    public void SetNotifyGlobalRemovals(bool bNewNotifyGlobalRemovals)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNotifyGlobalRemovals_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetNotifyGlobalRemovals_bNewNotifyGlobalRemovals_Offset), 0, null, bNewNotifyGlobalRemovals);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNotifyGlobalRemovals_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:SetNotifyGlobalCrumblings
    static readonly IntPtr SetNotifyGlobalCrumblings_NativeFunction;
    static readonly int SetNotifyGlobalCrumblings_ParamsSize;
    static readonly int SetNotifyGlobalCrumblings_bNewNotifyGlobalCrumblings_Offset;
    static readonly int SetNotifyGlobalCrumblings_bGlobalNewCrumblingEventIncludesChildren_Offset;
    
    public void SetNotifyGlobalCrumblings(bool bNewNotifyGlobalCrumblings, bool bGlobalNewCrumblingEventIncludesChildren)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNotifyGlobalCrumblings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetNotifyGlobalCrumblings_bNewNotifyGlobalCrumblings_Offset), 0, null, bNewNotifyGlobalCrumblings);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetNotifyGlobalCrumblings_bGlobalNewCrumblingEventIncludesChildren_Offset), 0, null, bGlobalNewCrumblingEventIncludesChildren);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNotifyGlobalCrumblings_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:SetNotifyGlobalCollision
    static readonly IntPtr SetNotifyGlobalCollision_NativeFunction;
    static readonly int SetNotifyGlobalCollision_ParamsSize;
    static readonly int SetNotifyGlobalCollision_bNewNotifyGlobalCollisions_Offset;
    
    public void SetNotifyGlobalCollision(bool bNewNotifyGlobalCollisions)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNotifyGlobalCollision_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetNotifyGlobalCollision_bNewNotifyGlobalCollisions_Offset), 0, null, bNewNotifyGlobalCollisions);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNotifyGlobalCollision_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:SetNotifyGlobalBreaks
    static readonly IntPtr SetNotifyGlobalBreaks_NativeFunction;
    static readonly int SetNotifyGlobalBreaks_ParamsSize;
    static readonly int SetNotifyGlobalBreaks_bNewNotifyGlobalBreaks_Offset;
    
    public void SetNotifyGlobalBreaks(bool bNewNotifyGlobalBreaks)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNotifyGlobalBreaks_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetNotifyGlobalBreaks_bNewNotifyGlobalBreaks_Offset), 0, null, bNewNotifyGlobalBreaks);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNotifyGlobalBreaks_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:SetNotifyCrumblings
    static readonly IntPtr SetNotifyCrumblings_NativeFunction;
    static readonly int SetNotifyCrumblings_ParamsSize;
    static readonly int SetNotifyCrumblings_bNewNotifyCrumblings_Offset;
    static readonly int SetNotifyCrumblings_bNewCrumblingEventIncludesChildren_Offset;
    
    public void SetNotifyCrumblings(bool bNewNotifyCrumblings, bool bNewCrumblingEventIncludesChildren = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNotifyCrumblings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetNotifyCrumblings_bNewNotifyCrumblings_Offset), 0, null, bNewNotifyCrumblings);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetNotifyCrumblings_bNewCrumblingEventIncludesChildren_Offset), 0, null, bNewCrumblingEventIncludesChildren);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNotifyCrumblings_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:SetNotifyBreaks
    static readonly IntPtr SetNotifyBreaks_NativeFunction;
    static readonly int SetNotifyBreaks_ParamsSize;
    static readonly int SetNotifyBreaks_bNewNotifyBreaks_Offset;
    
    public void SetNotifyBreaks(bool bNewNotifyBreaks)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNotifyBreaks_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetNotifyBreaks_bNewNotifyBreaks_Offset), 0, null, bNewNotifyBreaks);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNotifyBreaks_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:SetLocalRestTransforms
    static readonly IntPtr SetLocalRestTransforms_NativeFunction;
    static readonly int SetLocalRestTransforms_ParamsSize;
    static readonly int SetLocalRestTransforms_Transforms_Offset;
    static readonly int SetLocalRestTransforms_Transforms_ElementSize;
    static readonly int SetLocalRestTransforms_bOnlyLeaves_Offset;
    
    public void SetLocalRestTransforms(System.Collections.Generic.IList<UnrealSharp.Transform> transforms, bool bOnlyLeaves)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLocalRestTransforms_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Transforms_NativeBuffer = IntPtr.Add(ParamsBuffer, SetLocalRestTransforms_Transforms_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform> Transforms_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Transform>(1, BlittableMarshaller<UnrealSharp.Transform>.ToNative, BlittableMarshaller<UnrealSharp.Transform>.FromNative, SetLocalRestTransforms_Transforms_ElementSize);
            Transforms_Marshaler.ToNative(Transforms_NativeBuffer, 0, null, transforms);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLocalRestTransforms_bOnlyLeaves_Offset), 0, null, bOnlyLeaves);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLocalRestTransforms_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:SetEnableDamageFromCollision
    static readonly IntPtr SetEnableDamageFromCollision_NativeFunction;
    static readonly int SetEnableDamageFromCollision_ParamsSize;
    static readonly int SetEnableDamageFromCollision_bValue_Offset;
    
    public void SetEnableDamageFromCollision(bool bValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetEnableDamageFromCollision_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetEnableDamageFromCollision_bValue_Offset), 0, null, bValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetEnableDamageFromCollision_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:SetAnchoredByTransformedBox
    static readonly IntPtr SetAnchoredByTransformedBox_NativeFunction;
    static readonly int SetAnchoredByTransformedBox_ParamsSize;
    static readonly int SetAnchoredByTransformedBox_Box_Offset;
    static readonly int SetAnchoredByTransformedBox_Transform_Offset;
    static readonly int SetAnchoredByTransformedBox_bAnchored_Offset;
    static readonly int SetAnchoredByTransformedBox_MaxLevel_Offset;
    
    public void SetAnchoredByTransformedBox(UnrealSharp.CoreUObject.Box box, UnrealSharp.Transform transform, bool bAnchored, int maxLevel = -1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAnchoredByTransformedBox_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.BoxMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetAnchoredByTransformedBox_Box_Offset), 0, null, box);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetAnchoredByTransformedBox_Transform_Offset), 0, null, transform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAnchoredByTransformedBox_bAnchored_Offset), 0, null, bAnchored);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetAnchoredByTransformedBox_MaxLevel_Offset), 0, null, maxLevel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAnchoredByTransformedBox_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:SetAnchoredByIndex
    static readonly IntPtr SetAnchoredByIndex_NativeFunction;
    static readonly int SetAnchoredByIndex_ParamsSize;
    static readonly int SetAnchoredByIndex_Index_Offset;
    static readonly int SetAnchoredByIndex_bAnchored_Offset;
    
    public void SetAnchoredByIndex(int index, bool bAnchored)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAnchoredByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetAnchoredByIndex_Index_Offset), 0, null, index);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAnchoredByIndex_bAnchored_Offset), 0, null, bAnchored);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAnchoredByIndex_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:SetAnchoredByBox
    static readonly IntPtr SetAnchoredByBox_NativeFunction;
    static readonly int SetAnchoredByBox_ParamsSize;
    static readonly int SetAnchoredByBox_WorldSpaceBox_Offset;
    static readonly int SetAnchoredByBox_bAnchored_Offset;
    static readonly int SetAnchoredByBox_MaxLevel_Offset;
    
    public void SetAnchoredByBox(UnrealSharp.CoreUObject.Box worldSpaceBox, bool bAnchored, int maxLevel = -1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAnchoredByBox_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.BoxMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetAnchoredByBox_WorldSpaceBox_Offset), 0, null, worldSpaceBox);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetAnchoredByBox_bAnchored_Offset), 0, null, bAnchored);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetAnchoredByBox_MaxLevel_Offset), 0, null, maxLevel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAnchoredByBox_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:SetAbandonedParticleCollisionProfileName
    static readonly IntPtr SetAbandonedParticleCollisionProfileName_NativeFunction;
    static readonly int SetAbandonedParticleCollisionProfileName_ParamsSize;
    static readonly int SetAbandonedParticleCollisionProfileName_CollisionProfile_Offset;
    
    public void SetAbandonedParticleCollisionProfileName(Name collisionProfile)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAbandonedParticleCollisionProfileName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetAbandonedParticleCollisionProfileName_CollisionProfile_Offset), 0, null, collisionProfile);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAbandonedParticleCollisionProfileName_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:RemoveAllAnchors
    static readonly IntPtr RemoveAllAnchors_NativeFunction;
    
    public void RemoveAllAnchors()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveAllAnchors_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:IsRootBroken
    static readonly IntPtr IsRootBroken_NativeFunction;
    static readonly int IsRootBroken_ParamsSize;
    static readonly int IsRootBroken_ReturnValue_Offset;
    
    public bool IsRootBroken()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsRootBroken_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsRootBroken_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsRootBroken_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:GetRootInitialTransform
    static readonly IntPtr GetRootInitialTransform_NativeFunction;
    static readonly int GetRootInitialTransform_ParamsSize;
    static readonly int GetRootInitialTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetRootInitialTransform()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRootInitialTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRootInitialTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetRootInitialTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:GetRootIndex
    static readonly IntPtr GetRootIndex_NativeFunction;
    static readonly int GetRootIndex_ParamsSize;
    static readonly int GetRootIndex_ReturnValue_Offset;
    
    public int GetRootIndex()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRootIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRootIndex_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetRootIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:GetRootCurrentTransform
    static readonly IntPtr GetRootCurrentTransform_NativeFunction;
    static readonly int GetRootCurrentTransform_ParamsSize;
    static readonly int GetRootCurrentTransform_ReturnValue_Offset;
    
    public UnrealSharp.Transform GetRootCurrentTransform()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRootCurrentTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRootCurrentTransform_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Transform returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetRootCurrentTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:GetMassAndExtents
    static readonly IntPtr GetMassAndExtents_NativeFunction;
    static readonly int GetMassAndExtents_ParamsSize;
    static readonly int GetMassAndExtents_ItemIndex_Offset;
    static readonly int GetMassAndExtents_OutMass_Offset;
    static readonly int GetMassAndExtents_OutExtents_Offset;
    
    public void GetMassAndExtents(int itemIndex, out float outMass, out UnrealSharp.CoreUObject.Box outExtents)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMassAndExtents_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetMassAndExtents_ItemIndex_Offset), 0, null, itemIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMassAndExtents_NativeFunction, ParamsBuffer);
            
            outMass = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetMassAndExtents_OutMass_Offset), 0, null);
            outExtents = UnrealSharp.CoreUObject.BoxMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetMassAndExtents_OutExtents_Offset), 0, null);
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:GetLocalBounds
    static readonly IntPtr GetLocalBounds_NativeFunction;
    static readonly int GetLocalBounds_ParamsSize;
    static readonly int GetLocalBounds_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.Box GetLocalBounds()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocalBounds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLocalBounds_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Box returnValue;
            returnValue = UnrealSharp.CoreUObject.BoxMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetLocalBounds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:GetInitialLocalRestTransforms
    static readonly IntPtr GetInitialLocalRestTransforms_NativeFunction;
    static readonly int GetInitialLocalRestTransforms_ParamsSize;
    static readonly int GetInitialLocalRestTransforms_ReturnValue_Offset;
    static readonly int GetInitialLocalRestTransforms_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.Transform> GetInitialLocalRestTransforms()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInitialLocalRestTransforms_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInitialLocalRestTransforms_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.Transform> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetInitialLocalRestTransforms_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Transform> (1, BlittableMarshaller<UnrealSharp.Transform>.ToNative, BlittableMarshaller<UnrealSharp.Transform>.FromNative, GetInitialLocalRestTransforms_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Transform>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:GetInitialLevel
    static readonly IntPtr GetInitialLevel_NativeFunction;
    static readonly int GetInitialLevel_ParamsSize;
    static readonly int GetInitialLevel_ItemIndex_Offset;
    static readonly int GetInitialLevel_ReturnValue_Offset;
    
    public int GetInitialLevel(int itemIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInitialLevel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetInitialLevel_ItemIndex_Offset), 0, null, itemIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInitialLevel_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetInitialLevel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:GetDebugInfo
    static readonly IntPtr GetDebugInfo_NativeFunction;
    static readonly int GetDebugInfo_ParamsSize;
    static readonly int GetDebugInfo_ReturnValue_Offset;
    
    public string GetDebugInfo()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDebugInfo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDebugInfo_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetDebugInfo_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:CrumbleCluster
    static readonly IntPtr CrumbleCluster_NativeFunction;
    static readonly int CrumbleCluster_ParamsSize;
    static readonly int CrumbleCluster_ItemIndex_Offset;
    
    public void CrumbleCluster(int itemIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CrumbleCluster_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CrumbleCluster_ItemIndex_Offset), 0, null, itemIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CrumbleCluster_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:CrumbleActiveClusters
    static readonly IntPtr CrumbleActiveClusters_NativeFunction;
    
    public void CrumbleActiveClusters()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CrumbleActiveClusters_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:ApplyPhysicsField
    static readonly IntPtr ApplyPhysicsField_NativeFunction;
    static readonly int ApplyPhysicsField_ParamsSize;
    static readonly int ApplyPhysicsField_Enabled_Offset;
    static readonly int ApplyPhysicsField_Target_Offset;
    static readonly int ApplyPhysicsField_MetaData_Offset;
    static readonly int ApplyPhysicsField_Field_Offset;
    
    public void ApplyPhysicsField(bool enabled, UnrealSharp.Chaos.EGeometryCollectionPhysicsTypeEnum target, UnrealSharp.FieldSystemEngine.FieldSystemMetaData metaData, UnrealSharp.FieldSystemEngine.FieldNodeBase field)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ApplyPhysicsField_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ApplyPhysicsField_Enabled_Offset), 0, null, enabled);
            BlittableMarshaller<UnrealSharp.Chaos.EGeometryCollectionPhysicsTypeEnum>.ToNative(IntPtr.Add(ParamsBuffer, ApplyPhysicsField_Target_Offset), 0, null, target);
            ObjectMarshaller<UnrealSharp.FieldSystemEngine.FieldSystemMetaData>.ToNative(IntPtr.Add(ParamsBuffer, ApplyPhysicsField_MetaData_Offset), 0, null, metaData);
            ObjectMarshaller<UnrealSharp.FieldSystemEngine.FieldNodeBase>.ToNative(IntPtr.Add(ParamsBuffer, ApplyPhysicsField_Field_Offset), 0, null, field);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ApplyPhysicsField_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:ApplyLinearVelocity
    static readonly IntPtr ApplyLinearVelocity_NativeFunction;
    static readonly int ApplyLinearVelocity_ParamsSize;
    static readonly int ApplyLinearVelocity_ItemIndex_Offset;
    static readonly int ApplyLinearVelocity_LinearVelocity_Offset;
    
    public void ApplyLinearVelocity(int itemIndex, System.DoubleNumerics.Vector3 linearVelocity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ApplyLinearVelocity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ApplyLinearVelocity_ItemIndex_Offset), 0, null, itemIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ApplyLinearVelocity_LinearVelocity_Offset), 0, null, linearVelocity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ApplyLinearVelocity_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:ApplyKinematicField
    static readonly IntPtr ApplyKinematicField_NativeFunction;
    static readonly int ApplyKinematicField_ParamsSize;
    static readonly int ApplyKinematicField_Radius_Offset;
    static readonly int ApplyKinematicField_Position_Offset;
    
    public void ApplyKinematicField(float radius, System.DoubleNumerics.Vector3 position)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ApplyKinematicField_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyKinematicField_Radius_Offset), 0, null, radius);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ApplyKinematicField_Position_Offset), 0, null, position);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ApplyKinematicField_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:ApplyInternalStrain
    static readonly IntPtr ApplyInternalStrain_NativeFunction;
    static readonly int ApplyInternalStrain_ParamsSize;
    static readonly int ApplyInternalStrain_ItemIndex_Offset;
    static readonly int ApplyInternalStrain_Location_Offset;
    static readonly int ApplyInternalStrain_Radius_Offset;
    static readonly int ApplyInternalStrain_PropagationDepth_Offset;
    static readonly int ApplyInternalStrain_PropagationFactor_Offset;
    static readonly int ApplyInternalStrain_Strain_Offset;
    
    public void ApplyInternalStrain(int itemIndex, System.DoubleNumerics.Vector3 location, float radius = 0.000000f, int propagationDepth = 0, float propagationFactor = 1.000000f, float strain = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ApplyInternalStrain_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ApplyInternalStrain_ItemIndex_Offset), 0, null, itemIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ApplyInternalStrain_Location_Offset), 0, null, location);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyInternalStrain_Radius_Offset), 0, null, radius);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ApplyInternalStrain_PropagationDepth_Offset), 0, null, propagationDepth);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyInternalStrain_PropagationFactor_Offset), 0, null, propagationFactor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyInternalStrain_Strain_Offset), 0, null, strain);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ApplyInternalStrain_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:ApplyExternalStrain
    static readonly IntPtr ApplyExternalStrain_NativeFunction;
    static readonly int ApplyExternalStrain_ParamsSize;
    static readonly int ApplyExternalStrain_ItemIndex_Offset;
    static readonly int ApplyExternalStrain_Location_Offset;
    static readonly int ApplyExternalStrain_Radius_Offset;
    static readonly int ApplyExternalStrain_PropagationDepth_Offset;
    static readonly int ApplyExternalStrain_PropagationFactor_Offset;
    static readonly int ApplyExternalStrain_Strain_Offset;
    
    public void ApplyExternalStrain(int itemIndex, System.DoubleNumerics.Vector3 location, float radius = 0.000000f, int propagationDepth = 0, float propagationFactor = 1.000000f, float strain = 0.000000f)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ApplyExternalStrain_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ApplyExternalStrain_ItemIndex_Offset), 0, null, itemIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ApplyExternalStrain_Location_Offset), 0, null, location);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyExternalStrain_Radius_Offset), 0, null, radius);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ApplyExternalStrain_PropagationDepth_Offset), 0, null, propagationDepth);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyExternalStrain_PropagationFactor_Offset), 0, null, propagationFactor);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ApplyExternalStrain_Strain_Offset), 0, null, strain);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ApplyExternalStrain_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:ApplyBreakingLinearVelocity
    static readonly IntPtr ApplyBreakingLinearVelocity_NativeFunction;
    static readonly int ApplyBreakingLinearVelocity_ParamsSize;
    static readonly int ApplyBreakingLinearVelocity_ItemIndex_Offset;
    static readonly int ApplyBreakingLinearVelocity_LinearVelocity_Offset;
    
    public void ApplyBreakingLinearVelocity(int itemIndex, System.DoubleNumerics.Vector3 linearVelocity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ApplyBreakingLinearVelocity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ApplyBreakingLinearVelocity_ItemIndex_Offset), 0, null, itemIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ApplyBreakingLinearVelocity_LinearVelocity_Offset), 0, null, linearVelocity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ApplyBreakingLinearVelocity_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:ApplyBreakingAngularVelocity
    static readonly IntPtr ApplyBreakingAngularVelocity_NativeFunction;
    static readonly int ApplyBreakingAngularVelocity_ParamsSize;
    static readonly int ApplyBreakingAngularVelocity_ItemIndex_Offset;
    static readonly int ApplyBreakingAngularVelocity_AngularVelocity_Offset;
    
    public void ApplyBreakingAngularVelocity(int itemIndex, System.DoubleNumerics.Vector3 angularVelocity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ApplyBreakingAngularVelocity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ApplyBreakingAngularVelocity_ItemIndex_Offset), 0, null, itemIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ApplyBreakingAngularVelocity_AngularVelocity_Offset), 0, null, angularVelocity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ApplyBreakingAngularVelocity_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:ApplyAssetDefaults
    static readonly IntPtr ApplyAssetDefaults_NativeFunction;
    
    public void ApplyAssetDefaults()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ApplyAssetDefaults_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:ApplyAngularVelocity
    static readonly IntPtr ApplyAngularVelocity_NativeFunction;
    static readonly int ApplyAngularVelocity_ParamsSize;
    static readonly int ApplyAngularVelocity_ItemIndex_Offset;
    static readonly int ApplyAngularVelocity_AngularVelocity_Offset;
    
    public void ApplyAngularVelocity(int itemIndex, System.DoubleNumerics.Vector3 angularVelocity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ApplyAngularVelocity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ApplyAngularVelocity_ItemIndex_Offset), 0, null, itemIndex);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, ApplyAngularVelocity_AngularVelocity_Offset), 0, null, angularVelocity);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ApplyAngularVelocity_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/GeometryCollectionEngine.GeometryCollectionComponent:ReceivePhysicsCollision
    IntPtr ReceivePhysicsCollision_NativeFunction;
    static readonly int ReceivePhysicsCollision_ParamsSize;
    static readonly int ReceivePhysicsCollision_CollisionInfo_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ReceivePhysicsCollision(UnrealSharp.ChaosSolverEngine.ChaosPhysicsCollisionInfo collisionInfo)
    {
        unsafe
        {
            if (ReceivePhysicsCollision_NativeFunction == IntPtr.Zero)
            {
                ReceivePhysicsCollision_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ReceivePhysicsCollision");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ReceivePhysicsCollision_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.ChaosSolverEngine.ChaosPhysicsCollisionInfoMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ReceivePhysicsCollision_CollisionInfo_Offset), 0, null, collisionInfo);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReceivePhysicsCollision_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ReceivePhysicsCollision_Implementation(UnrealSharp.ChaosSolverEngine.ChaosPhysicsCollisionInfo collisionInfo)
    {
    }
    void Invoke_ReceivePhysicsCollision(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.ChaosSolverEngine.ChaosPhysicsCollisionInfo collisionInfo = UnrealSharp.ChaosSolverEngine.ChaosPhysicsCollisionInfoMarshaler.FromNative(IntPtr.Add(buffer, ReceivePhysicsCollision_CollisionInfo_Offset), 0, null);
            ReceivePhysicsCollision_Implementation(collisionInfo);
        }
    }
    
    
}
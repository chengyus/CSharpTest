// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.GeometryCollectionEngine;

[UClass]
public partial class GeometryCollectionRenderLevelSetActor : UnrealSharp.Engine.Actor
{
    
    static GeometryCollectionRenderLevelSetActor()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("GeometryCollectionRenderLevelSetActor");
        
        TargetVolumeTexture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TargetVolumeTexture");
        RayMarchMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RayMarchMaterial");
        SurfaceTolerance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SurfaceTolerance");
        Isovalue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Isovalue");
        Enabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Enabled");
        RenderVolumeBoundingBox_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RenderVolumeBoundingBox");
        
        
        
    }
    
    protected GeometryCollectionRenderLevelSetActor(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/GeometryCollectionEngine.GeometryCollectionRenderLevelSetActor:TargetVolumeTexture
    static readonly int TargetVolumeTexture_Offset;
    
    public UnrealSharp.Engine.VolumeTexture TargetVolumeTexture
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.VolumeTexture>.FromNative(IntPtr.Add(NativeObject, TargetVolumeTexture_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.VolumeTexture>.ToNative(IntPtr.Add(NativeObject, TargetVolumeTexture_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/GeometryCollectionEngine.GeometryCollectionRenderLevelSetActor:RayMarchMaterial
    static readonly int RayMarchMaterial_Offset;
    
    public UnrealSharp.Engine.Material RayMarchMaterial
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.Material>.FromNative(IntPtr.Add(NativeObject, RayMarchMaterial_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.Material>.ToNative(IntPtr.Add(NativeObject, RayMarchMaterial_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/GeometryCollectionEngine.GeometryCollectionRenderLevelSetActor:SurfaceTolerance
    static readonly int SurfaceTolerance_Offset;
    
    public float SurfaceTolerance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SurfaceTolerance_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, SurfaceTolerance_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/GeometryCollectionEngine.GeometryCollectionRenderLevelSetActor:Isovalue
    static readonly int Isovalue_Offset;
    
    public float Isovalue
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, Isovalue_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, Isovalue_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionRenderLevelSetActor:Enabled
    static readonly int Enabled_Offset;
    
    public bool Enabled
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, Enabled_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, Enabled_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/GeometryCollectionEngine.GeometryCollectionRenderLevelSetActor:RenderVolumeBoundingBox
    static readonly int RenderVolumeBoundingBox_Offset;
    
    public bool RenderVolumeBoundingBox
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, RenderVolumeBoundingBox_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, RenderVolumeBoundingBox_Offset), 0, this, value);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.HeadMountedDisplay;

[UClass]
public partial class MotionControllerComponent : UnrealSharp.Engine.PrimitiveComponent
{
    
    static MotionControllerComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MotionControllerComponent");
        
        PlayerIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PlayerIndex");
        MotionSource_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MotionSource");
        bDisableLowLatencyUpdate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bDisableLowLatencyUpdate");
        bDisableLowLatencyUpdate_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bDisableLowLatencyUpdate");
        CurrentTrackingStatus_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CurrentTrackingStatus");
        bDisplayDeviceModel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bDisplayDeviceModel");
        DisplayModelSource_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DisplayModelSource");
        CustomDisplayMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CustomDisplayMesh");
        DisplayMeshMaterialOverrides_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DisplayMeshMaterialOverrides");
        DisplayMeshMaterialOverrides_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "DisplayMeshMaterialOverrides");
        DisplayComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DisplayComponent");
        
        IsTracked_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsTracked");
        IsTracked_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsTracked_NativeFunction);
        IsTracked_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsTracked_NativeFunction, "ReturnValue");
        GetParameterValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetParameterValue");
        GetParameterValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetParameterValue_NativeFunction);
        GetParameterValue_InName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParameterValue_NativeFunction, "InName");
        GetParameterValue_bValueFound_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParameterValue_NativeFunction, "bValueFound");
        GetParameterValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParameterValue_NativeFunction, "ReturnValue");
        GetLinearVelocity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLinearVelocity");
        GetLinearVelocity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLinearVelocity_NativeFunction);
        GetLinearVelocity_OutLinearVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinearVelocity_NativeFunction, "OutLinearVelocity");
        GetLinearVelocity_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinearVelocity_NativeFunction, "ReturnValue");
        GetLinearAcceleration_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLinearAcceleration");
        GetLinearAcceleration_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLinearAcceleration_NativeFunction);
        GetLinearAcceleration_OutLinearAcceleration_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinearAcceleration_NativeFunction, "OutLinearAcceleration");
        GetLinearAcceleration_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinearAcceleration_NativeFunction, "ReturnValue");
        GetHandJointPosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHandJointPosition");
        GetHandJointPosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHandJointPosition_NativeFunction);
        GetHandJointPosition_jointIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHandJointPosition_NativeFunction, "jointIndex");
        GetHandJointPosition_bValueFound_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHandJointPosition_NativeFunction, "bValueFound");
        GetHandJointPosition_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHandJointPosition_NativeFunction, "ReturnValue");
        GetAngularVelocity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAngularVelocity");
        GetAngularVelocity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAngularVelocity_NativeFunction);
        GetAngularVelocity_OutAngularVelocity_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAngularVelocity_NativeFunction, "OutAngularVelocity");
        GetAngularVelocity_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAngularVelocity_NativeFunction, "ReturnValue");
        
        
    }
    
    protected MotionControllerComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // IntProperty /Script/HeadMountedDisplay.MotionControllerComponent:PlayerIndex
    static readonly int PlayerIndex_Offset;
    
    public int PlayerIndex
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, PlayerIndex_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, PlayerIndex_Offset), 0, this, value);
        }
    }
    
    // NameProperty /Script/HeadMountedDisplay.MotionControllerComponent:MotionSource
    static readonly int MotionSource_Offset;
    
    public Name MotionSource
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, MotionSource_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, MotionSource_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/HeadMountedDisplay.MotionControllerComponent:bDisableLowLatencyUpdate
    static readonly int bDisableLowLatencyUpdate_Offset;
    static readonly IntPtr bDisableLowLatencyUpdate_NativeProperty;
    
    public bool bDisableLowLatencyUpdate
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bDisableLowLatencyUpdate_NativeProperty, bDisableLowLatencyUpdate_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, bDisableLowLatencyUpdate_NativeProperty, bDisableLowLatencyUpdate_Offset, value);
        }
    }
    
    // EnumProperty /Script/HeadMountedDisplay.MotionControllerComponent:CurrentTrackingStatus
    static readonly int CurrentTrackingStatus_Offset;
    
    public UnrealSharp.HeadMountedDisplay.ETrackingStatus CurrentTrackingStatus
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.HeadMountedDisplay.ETrackingStatus>.FromNative(IntPtr.Add(NativeObject, CurrentTrackingStatus_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/HeadMountedDisplay.MotionControllerComponent:bDisplayDeviceModel
    static readonly int bDisplayDeviceModel_Offset;
    
    public bool bDisplayDeviceModel
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bDisplayDeviceModel_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bDisplayDeviceModel_Offset), 0, this, value);
        }
    }
    
    // NameProperty /Script/HeadMountedDisplay.MotionControllerComponent:DisplayModelSource
    static readonly int DisplayModelSource_Offset;
    
    public Name DisplayModelSource
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, DisplayModelSource_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, DisplayModelSource_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/HeadMountedDisplay.MotionControllerComponent:CustomDisplayMesh
    static readonly int CustomDisplayMesh_Offset;
    
    public UnrealSharp.Engine.StaticMesh CustomDisplayMesh
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.StaticMesh>.FromNative(IntPtr.Add(NativeObject, CustomDisplayMesh_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.StaticMesh>.ToNative(IntPtr.Add(NativeObject, CustomDisplayMesh_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/HeadMountedDisplay.MotionControllerComponent:DisplayMeshMaterialOverrides
    static readonly int DisplayMeshMaterialOverrides_Offset;
    static readonly IntPtr DisplayMeshMaterialOverrides_NativeProperty;
    UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.MaterialInterface> DisplayMeshMaterialOverrides_Wrapper = null;
    
    public System.Collections.Generic.IReadOnlyList<UnrealSharp.Engine.MaterialInterface> DisplayMeshMaterialOverrides
    {
        get
        {
            if(DisplayMeshMaterialOverrides_Wrapper == null)
            {
                DisplayMeshMaterialOverrides_Wrapper = new UnrealArrayReadOnlyMarshaler<UnrealSharp.Engine.MaterialInterface>(1, DisplayMeshMaterialOverrides_NativeProperty, ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative, ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.FromNative);
            }
            
            return DisplayMeshMaterialOverrides_Wrapper.FromNative(IntPtr.Add(NativeObject,DisplayMeshMaterialOverrides_Offset),0,this);
        }
    }
    
    // ObjectProperty /Script/HeadMountedDisplay.MotionControllerComponent:DisplayComponent
    static readonly int DisplayComponent_Offset;
    
    public UnrealSharp.Engine.PrimitiveComponent DisplayComponent
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.PrimitiveComponent>.FromNative(IntPtr.Add(NativeObject, DisplayComponent_Offset), 0, this);
        }
    }
    
    // Function /Script/HeadMountedDisplay.MotionControllerComponent:IsTracked
    static readonly IntPtr IsTracked_NativeFunction;
    static readonly int IsTracked_ParamsSize;
    static readonly int IsTracked_ReturnValue_Offset;
    
    public bool IsTracked()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsTracked_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsTracked_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsTracked_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/HeadMountedDisplay.MotionControllerComponent:GetParameterValue
    static readonly IntPtr GetParameterValue_NativeFunction;
    static readonly int GetParameterValue_ParamsSize;
    static readonly int GetParameterValue_InName_Offset;
    static readonly int GetParameterValue_bValueFound_Offset;
    static readonly int GetParameterValue_ReturnValue_Offset;
    
    protected float GetParameterValue(Name inName, out bool bValueFound)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetParameterValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetParameterValue_InName_Offset), 0, null, inName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetParameterValue_NativeFunction, ParamsBuffer);
            
            bValueFound = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetParameterValue_bValueFound_Offset), 0, null);
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetParameterValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/HeadMountedDisplay.MotionControllerComponent:GetLinearVelocity
    static readonly IntPtr GetLinearVelocity_NativeFunction;
    static readonly int GetLinearVelocity_ParamsSize;
    static readonly int GetLinearVelocity_OutLinearVelocity_Offset;
    static readonly int GetLinearVelocity_ReturnValue_Offset;
    
    protected bool GetLinearVelocity(out System.DoubleNumerics.Vector3 outLinearVelocity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLinearVelocity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLinearVelocity_NativeFunction, ParamsBuffer);
            
            outLinearVelocity = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLinearVelocity_OutLinearVelocity_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetLinearVelocity_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/HeadMountedDisplay.MotionControllerComponent:GetLinearAcceleration
    static readonly IntPtr GetLinearAcceleration_NativeFunction;
    static readonly int GetLinearAcceleration_ParamsSize;
    static readonly int GetLinearAcceleration_OutLinearAcceleration_Offset;
    static readonly int GetLinearAcceleration_ReturnValue_Offset;
    
    protected bool GetLinearAcceleration(out System.DoubleNumerics.Vector3 outLinearAcceleration)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLinearAcceleration_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLinearAcceleration_NativeFunction, ParamsBuffer);
            
            outLinearAcceleration = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetLinearAcceleration_OutLinearAcceleration_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetLinearAcceleration_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/HeadMountedDisplay.MotionControllerComponent:GetHandJointPosition
    static readonly IntPtr GetHandJointPosition_NativeFunction;
    static readonly int GetHandJointPosition_ParamsSize;
    static readonly int GetHandJointPosition_jointIndex_Offset;
    static readonly int GetHandJointPosition_bValueFound_Offset;
    static readonly int GetHandJointPosition_ReturnValue_Offset;
    
    protected System.DoubleNumerics.Vector3 GetHandJointPosition(int jointIndex, out bool bValueFound)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHandJointPosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetHandJointPosition_jointIndex_Offset), 0, null, jointIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetHandJointPosition_NativeFunction, ParamsBuffer);
            
            bValueFound = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetHandJointPosition_bValueFound_Offset), 0, null);
            System.DoubleNumerics.Vector3 returnValue;
            returnValue = BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(ParamsBuffer, GetHandJointPosition_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/HeadMountedDisplay.MotionControllerComponent:GetAngularVelocity
    static readonly IntPtr GetAngularVelocity_NativeFunction;
    static readonly int GetAngularVelocity_ParamsSize;
    static readonly int GetAngularVelocity_OutAngularVelocity_Offset;
    static readonly int GetAngularVelocity_ReturnValue_Offset;
    
    protected bool GetAngularVelocity(out UnrealSharp.Rotator outAngularVelocity)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAngularVelocity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAngularVelocity_NativeFunction, ParamsBuffer);
            
            outAngularVelocity = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetAngularVelocity_OutAngularVelocity_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetAngularVelocity_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/HeadMountedDisplay.MotionControllerComponent:OnMotionControllerUpdated
    IntPtr OnMotionControllerUpdated_NativeFunction;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    protected virtual void OnMotionControllerUpdated()
    {
        unsafe
        {
            if (OnMotionControllerUpdated_NativeFunction == IntPtr.Zero)
            {
                OnMotionControllerUpdated_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "OnMotionControllerUpdated");
            }
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OnMotionControllerUpdated_NativeFunction, IntPtr.Zero);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void OnMotionControllerUpdated_Implementation()
    {
    }
    void Invoke_OnMotionControllerUpdated(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            OnMotionControllerUpdated_Implementation();
        }
    }
    
    
}
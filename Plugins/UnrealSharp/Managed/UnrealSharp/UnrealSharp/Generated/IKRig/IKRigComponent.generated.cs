// This file is automatically generated
using UnrealSharp.IKRig;
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.IKRig;

[UClass]
public partial class IKRigComponent : UnrealSharp.Engine.ActorComponent, IIKGoalCreatorInterface
{
    
    static IKRigComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("IKRigComponent");
        
        
        SetIKRigGoalTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIKRigGoalTransform");
        SetIKRigGoalTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIKRigGoalTransform_NativeFunction);
        SetIKRigGoalTransform_GoalName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIKRigGoalTransform_NativeFunction, "GoalName");
        SetIKRigGoalTransform_Transform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIKRigGoalTransform_NativeFunction, "Transform");
        SetIKRigGoalTransform_PositionAlpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIKRigGoalTransform_NativeFunction, "PositionAlpha");
        SetIKRigGoalTransform_RotationAlpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIKRigGoalTransform_NativeFunction, "RotationAlpha");
        SetIKRigGoalPositionAndRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIKRigGoalPositionAndRotation");
        SetIKRigGoalPositionAndRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIKRigGoalPositionAndRotation_NativeFunction);
        SetIKRigGoalPositionAndRotation_GoalName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIKRigGoalPositionAndRotation_NativeFunction, "GoalName");
        SetIKRigGoalPositionAndRotation_Position_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIKRigGoalPositionAndRotation_NativeFunction, "Position");
        SetIKRigGoalPositionAndRotation_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIKRigGoalPositionAndRotation_NativeFunction, "Rotation");
        SetIKRigGoalPositionAndRotation_PositionAlpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIKRigGoalPositionAndRotation_NativeFunction, "PositionAlpha");
        SetIKRigGoalPositionAndRotation_RotationAlpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIKRigGoalPositionAndRotation_NativeFunction, "RotationAlpha");
        SetIKRigGoal_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetIKRigGoal");
        SetIKRigGoal_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetIKRigGoal_NativeFunction);
        SetIKRigGoal_Goal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetIKRigGoal_NativeFunction, "Goal");
        ClearAllGoals_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearAllGoals");
        
        
    }
    
    protected IKRigComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/IKRig.IKRigComponent:SetIKRigGoalTransform
    static readonly IntPtr SetIKRigGoalTransform_NativeFunction;
    static readonly int SetIKRigGoalTransform_ParamsSize;
    static readonly int SetIKRigGoalTransform_GoalName_Offset;
    static readonly int SetIKRigGoalTransform_Transform_Offset;
    static readonly int SetIKRigGoalTransform_PositionAlpha_Offset;
    static readonly int SetIKRigGoalTransform_RotationAlpha_Offset;
    
    public void SetIKRigGoalTransform(Name goalName, UnrealSharp.Transform transform, float positionAlpha, float rotationAlpha)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIKRigGoalTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetIKRigGoalTransform_GoalName_Offset), 0, null, goalName);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetIKRigGoalTransform_Transform_Offset), 0, null, transform);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetIKRigGoalTransform_PositionAlpha_Offset), 0, null, positionAlpha);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetIKRigGoalTransform_RotationAlpha_Offset), 0, null, rotationAlpha);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIKRigGoalTransform_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/IKRig.IKRigComponent:SetIKRigGoalPositionAndRotation
    static readonly IntPtr SetIKRigGoalPositionAndRotation_NativeFunction;
    static readonly int SetIKRigGoalPositionAndRotation_ParamsSize;
    static readonly int SetIKRigGoalPositionAndRotation_GoalName_Offset;
    static readonly int SetIKRigGoalPositionAndRotation_Position_Offset;
    static readonly int SetIKRigGoalPositionAndRotation_Rotation_Offset;
    static readonly int SetIKRigGoalPositionAndRotation_PositionAlpha_Offset;
    static readonly int SetIKRigGoalPositionAndRotation_RotationAlpha_Offset;
    
    public void SetIKRigGoalPositionAndRotation(Name goalName, System.DoubleNumerics.Vector3 position, System.DoubleNumerics.Quaternion rotation, float positionAlpha, float rotationAlpha)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIKRigGoalPositionAndRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetIKRigGoalPositionAndRotation_GoalName_Offset), 0, null, goalName);
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, SetIKRigGoalPositionAndRotation_Position_Offset), 0, null, position);
            BlittableMarshaller<System.DoubleNumerics.Quaternion>.ToNative(IntPtr.Add(ParamsBuffer, SetIKRigGoalPositionAndRotation_Rotation_Offset), 0, null, rotation);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetIKRigGoalPositionAndRotation_PositionAlpha_Offset), 0, null, positionAlpha);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetIKRigGoalPositionAndRotation_RotationAlpha_Offset), 0, null, rotationAlpha);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIKRigGoalPositionAndRotation_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/IKRig.IKRigComponent:SetIKRigGoal
    static readonly IntPtr SetIKRigGoal_NativeFunction;
    static readonly int SetIKRigGoal_ParamsSize;
    static readonly int SetIKRigGoal_Goal_Offset;
    
    public void SetIKRigGoal(UnrealSharp.IKRig.IKRigGoal goal)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetIKRigGoal_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.IKRig.IKRigGoalMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetIKRigGoal_Goal_Offset), 0, null, goal);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetIKRigGoal_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/IKRig.IKRigComponent:ClearAllGoals
    static readonly IntPtr ClearAllGoals_NativeFunction;
    
    public void ClearAllGoals()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ClearAllGoals_NativeFunction, IntPtr.Zero);
        }
    }
    
    
}
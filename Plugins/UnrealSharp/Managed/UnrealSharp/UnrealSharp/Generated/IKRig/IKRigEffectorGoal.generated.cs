// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.IKRig;

[UClass]
public partial class IKRigEffectorGoal : UnrealSharp.CoreUObject.Object
{
    
    static IKRigEffectorGoal()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("IKRigEffectorGoal");
        
        GoalName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "GoalName");
        BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BoneName");
        PositionAlpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PositionAlpha");
        RotationAlpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RotationAlpha");
        CurrentTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CurrentTransform");
        InitialTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "InitialTransform");
        PreviewMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PreviewMode");
        SizeMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SizeMultiplier");
        ThicknessMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ThicknessMultiplier");
        bExposePosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bExposePosition");
        bExposeRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bExposeRotation");
        
        
        
    }
    
    protected IKRigEffectorGoal(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // NameProperty /Script/IKRig.IKRigEffectorGoal:GoalName
    static readonly int GoalName_Offset;
    
    public Name GoalName
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, GoalName_Offset), 0, this);
        }
    }
    
    // NameProperty /Script/IKRig.IKRigEffectorGoal:BoneName
    static readonly int BoneName_Offset;
    
    public Name BoneName
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, BoneName_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRigEffectorGoal:PositionAlpha
    static readonly int PositionAlpha_Offset;
    
    public float PositionAlpha
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PositionAlpha_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PositionAlpha_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRigEffectorGoal:RotationAlpha
    static readonly int RotationAlpha_Offset;
    
    public float RotationAlpha
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, RotationAlpha_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, RotationAlpha_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/IKRig.IKRigEffectorGoal:CurrentTransform
    static readonly int CurrentTransform_Offset;
    
    public UnrealSharp.Transform CurrentTransform
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(NativeObject, CurrentTransform_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(NativeObject, CurrentTransform_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/IKRig.IKRigEffectorGoal:InitialTransform
    static readonly int InitialTransform_Offset;
    
    public UnrealSharp.Transform InitialTransform
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(NativeObject, InitialTransform_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/IKRig.IKRigEffectorGoal:PreviewMode
    static readonly int PreviewMode_Offset;
    
    public UnrealSharp.IKRig.EIKRigGoalPreviewMode PreviewMode
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.IKRig.EIKRigGoalPreviewMode>.FromNative(IntPtr.Add(NativeObject, PreviewMode_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.IKRig.EIKRigGoalPreviewMode>.ToNative(IntPtr.Add(NativeObject, PreviewMode_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRigEffectorGoal:SizeMultiplier
    static readonly int SizeMultiplier_Offset;
    
    public float SizeMultiplier
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, SizeMultiplier_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, SizeMultiplier_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRigEffectorGoal:ThicknessMultiplier
    static readonly int ThicknessMultiplier_Offset;
    
    public float ThicknessMultiplier
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ThicknessMultiplier_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ThicknessMultiplier_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/IKRig.IKRigEffectorGoal:bExposePosition
    static readonly int bExposePosition_Offset;
    
    public bool bExposePosition
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bExposePosition_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bExposePosition_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/IKRig.IKRigEffectorGoal:bExposeRotation
    static readonly int bExposeRotation_Offset;
    
    public bool bExposeRotation
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bExposeRotation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bExposeRotation_Offset), 0, this, value);
        }
    }
    
    
}
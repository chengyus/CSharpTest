// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.IKRig;

[UClass]
public partial class IKRigFBIKSolver : UnrealSharp.IKRig.IKRigSolver
{
    
    static IKRigFBIKSolver()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("IKRigFBIKSolver");
        
        RootBone_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RootBone");
        Iterations_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Iterations");
        MassMultiplier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MassMultiplier");
        bAllowStretch_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAllowStretch");
        RootBehavior_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RootBehavior");
        PrePullRootSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PrePullRootSettings");
        PullChainAlpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PullChainAlpha");
        MaxAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxAngle");
        OverRelaxation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OverRelaxation");
        
        
        
    }
    
    protected IKRigFBIKSolver(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // NameProperty /Script/IKRig.IKRigFBIKSolver:RootBone
    static readonly int RootBone_Offset;
    
    public Name RootBone
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, RootBone_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, RootBone_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/IKRig.IKRigFBIKSolver:Iterations
    static readonly int Iterations_Offset;
    
    public int Iterations
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, Iterations_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, Iterations_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRigFBIKSolver:MassMultiplier
    static readonly int MassMultiplier_Offset;
    
    public float MassMultiplier
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MassMultiplier_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MassMultiplier_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/IKRig.IKRigFBIKSolver:bAllowStretch
    static readonly int bAllowStretch_Offset;
    
    public bool bAllowStretch
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAllowStretch_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAllowStretch_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/IKRig.IKRigFBIKSolver:RootBehavior
    static readonly int RootBehavior_Offset;
    
    public UnrealSharp.PBIK.EPBIKRootBehavior RootBehavior
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.PBIK.EPBIKRootBehavior>.FromNative(IntPtr.Add(NativeObject, RootBehavior_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.PBIK.EPBIKRootBehavior>.ToNative(IntPtr.Add(NativeObject, RootBehavior_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/IKRig.IKRigFBIKSolver:PrePullRootSettings
    static readonly int PrePullRootSettings_Offset;
    
    public UnrealSharp.PBIK.RootPrePullSettings PrePullRootSettings
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.PBIK.RootPrePullSettings>.FromNative(IntPtr.Add(NativeObject, PrePullRootSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.PBIK.RootPrePullSettings>.ToNative(IntPtr.Add(NativeObject, PrePullRootSettings_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRigFBIKSolver:PullChainAlpha
    static readonly int PullChainAlpha_Offset;
    
    public float PullChainAlpha
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PullChainAlpha_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PullChainAlpha_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRigFBIKSolver:MaxAngle
    static readonly int MaxAngle_Offset;
    
    public float MaxAngle
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MaxAngle_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MaxAngle_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRigFBIKSolver:OverRelaxation
    static readonly int OverRelaxation_Offset;
    
    public float OverRelaxation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, OverRelaxation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, OverRelaxation_Offset), 0, this, value);
        }
    }
    
    
}
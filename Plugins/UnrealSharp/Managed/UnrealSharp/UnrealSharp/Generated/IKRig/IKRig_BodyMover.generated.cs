// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.IKRig;

[UClass]
public partial class IKRig_BodyMover : UnrealSharp.IKRig.IKRigSolver
{
    
    static IKRig_BodyMover()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("IKRig_BodyMover");
        
        PositionAlpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PositionAlpha");
        PositionPositiveX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PositionPositiveX");
        PositionNegativeX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PositionNegativeX");
        PositionPositiveY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PositionPositiveY");
        PositionNegativeY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PositionNegativeY");
        PositionPositiveZ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PositionPositiveZ");
        PositionNegativeZ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PositionNegativeZ");
        RotationAlpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RotationAlpha");
        RotateXAlpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RotateXAlpha");
        RotateYAlpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RotateYAlpha");
        RotateZAlpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RotateZAlpha");
        
        
        
    }
    
    protected IKRig_BodyMover(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // FloatProperty /Script/IKRig.IKRig_BodyMover:PositionAlpha
    static readonly int PositionAlpha_Offset;
    
    public float PositionAlpha
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PositionAlpha_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PositionAlpha_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRig_BodyMover:PositionPositiveX
    static readonly int PositionPositiveX_Offset;
    
    public float PositionPositiveX
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PositionPositiveX_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PositionPositiveX_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRig_BodyMover:PositionNegativeX
    static readonly int PositionNegativeX_Offset;
    
    public float PositionNegativeX
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PositionNegativeX_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PositionNegativeX_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRig_BodyMover:PositionPositiveY
    static readonly int PositionPositiveY_Offset;
    
    public float PositionPositiveY
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PositionPositiveY_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PositionPositiveY_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRig_BodyMover:PositionNegativeY
    static readonly int PositionNegativeY_Offset;
    
    public float PositionNegativeY
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PositionNegativeY_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PositionNegativeY_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRig_BodyMover:PositionPositiveZ
    static readonly int PositionPositiveZ_Offset;
    
    public float PositionPositiveZ
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PositionPositiveZ_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PositionPositiveZ_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRig_BodyMover:PositionNegativeZ
    static readonly int PositionNegativeZ_Offset;
    
    public float PositionNegativeZ
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PositionNegativeZ_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PositionNegativeZ_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRig_BodyMover:RotationAlpha
    static readonly int RotationAlpha_Offset;
    
    public float RotationAlpha
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, RotationAlpha_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, RotationAlpha_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRig_BodyMover:RotateXAlpha
    static readonly int RotateXAlpha_Offset;
    
    public float RotateXAlpha
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, RotateXAlpha_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, RotateXAlpha_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRig_BodyMover:RotateYAlpha
    static readonly int RotateYAlpha_Offset;
    
    public float RotateYAlpha
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, RotateYAlpha_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, RotateYAlpha_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRig_BodyMover:RotateZAlpha
    static readonly int RotateZAlpha_Offset;
    
    public float RotateZAlpha
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, RotateZAlpha_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, RotateZAlpha_Offset), 0, this, value);
        }
    }
    
    
}
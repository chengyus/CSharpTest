// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.IKRig;

[UClass]
public partial class IKRig_FBIKEffector : UnrealSharp.CoreUObject.Object
{
    
    static IKRig_FBIKEffector()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("IKRig_FBIKEffector");
        
        GoalName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "GoalName");
        BoneName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BoneName");
        StrengthAlpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StrengthAlpha");
        PullChainAlpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PullChainAlpha");
        PinRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PinRotation");
        
        
        
    }
    
    protected IKRig_FBIKEffector(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // NameProperty /Script/IKRig.IKRig_FBIKEffector:GoalName
    static readonly int GoalName_Offset;
    
    public Name GoalName
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, GoalName_Offset), 0, this);
        }
    }
    
    // NameProperty /Script/IKRig.IKRig_FBIKEffector:BoneName
    static readonly int BoneName_Offset;
    
    public Name BoneName
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, BoneName_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRig_FBIKEffector:StrengthAlpha
    static readonly int StrengthAlpha_Offset;
    
    public float StrengthAlpha
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, StrengthAlpha_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, StrengthAlpha_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRig_FBIKEffector:PullChainAlpha
    static readonly int PullChainAlpha_Offset;
    
    public float PullChainAlpha
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PullChainAlpha_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PullChainAlpha_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRig_FBIKEffector:PinRotation
    static readonly int PinRotation_Offset;
    
    public float PinRotation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PinRotation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PinRotation_Offset), 0, this, value);
        }
    }
    
    
}
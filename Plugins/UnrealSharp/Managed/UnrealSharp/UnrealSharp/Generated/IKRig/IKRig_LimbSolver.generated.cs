// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.IKRig;

[UClass]
public partial class IKRig_LimbSolver : UnrealSharp.IKRig.IKRigSolver
{
    
    static IKRig_LimbSolver()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("IKRig_LimbSolver");
        
        RootName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RootName");
        ReachPrecision_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ReachPrecision");
        HingeRotationAxis_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "HingeRotationAxis");
        MaxIterations_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxIterations");
        bEnableLimit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableLimit");
        MinRotationAngle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinRotationAngle");
        bAveragePull_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAveragePull");
        PullDistribution_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PullDistribution");
        ReachStepAlpha_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ReachStepAlpha");
        bEnableTwistCorrection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableTwistCorrection");
        EndBoneForwardAxis_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "EndBoneForwardAxis");
        
        
        
    }
    
    protected IKRig_LimbSolver(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // NameProperty /Script/IKRig.IKRig_LimbSolver:RootName
    static readonly int RootName_Offset;
    
    public Name RootName
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, RootName_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRig_LimbSolver:ReachPrecision
    static readonly int ReachPrecision_Offset;
    
    public float ReachPrecision
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ReachPrecision_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ReachPrecision_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/IKRig.IKRig_LimbSolver:HingeRotationAxis
    static readonly int HingeRotationAxis_Offset;
    
    public UnrealSharp.CoreUObject.EAxis HingeRotationAxis
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.EAxis>.FromNative(IntPtr.Add(NativeObject, HingeRotationAxis_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.EAxis>.ToNative(IntPtr.Add(NativeObject, HingeRotationAxis_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/IKRig.IKRig_LimbSolver:MaxIterations
    static readonly int MaxIterations_Offset;
    
    public int MaxIterations
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, MaxIterations_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, MaxIterations_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/IKRig.IKRig_LimbSolver:bEnableLimit
    static readonly int bEnableLimit_Offset;
    
    public bool bEnableLimit
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bEnableLimit_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bEnableLimit_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRig_LimbSolver:MinRotationAngle
    static readonly int MinRotationAngle_Offset;
    
    public float MinRotationAngle
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MinRotationAngle_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MinRotationAngle_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/IKRig.IKRig_LimbSolver:bAveragePull
    static readonly int bAveragePull_Offset;
    
    public bool bAveragePull
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAveragePull_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAveragePull_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRig_LimbSolver:PullDistribution
    static readonly int PullDistribution_Offset;
    
    public float PullDistribution
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, PullDistribution_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, PullDistribution_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/IKRig.IKRig_LimbSolver:ReachStepAlpha
    static readonly int ReachStepAlpha_Offset;
    
    public float ReachStepAlpha
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ReachStepAlpha_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ReachStepAlpha_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/IKRig.IKRig_LimbSolver:bEnableTwistCorrection
    static readonly int bEnableTwistCorrection_Offset;
    
    public bool bEnableTwistCorrection
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bEnableTwistCorrection_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bEnableTwistCorrection_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/IKRig.IKRig_LimbSolver:EndBoneForwardAxis
    static readonly int EndBoneForwardAxis_Offset;
    
    public UnrealSharp.CoreUObject.EAxis EndBoneForwardAxis
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.EAxis>.FromNative(IntPtr.Add(NativeObject, EndBoneForwardAxis_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.EAxis>.ToNative(IntPtr.Add(NativeObject, EndBoneForwardAxis_Offset), 0, this, value);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.IKRigEditor;

[UClass]
public partial class IKRetargetBatchOperation : UnrealSharp.CoreUObject.Object
{
    
    static readonly IntPtr NativeClassPtr;
    static IKRetargetBatchOperation()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("IKRetargetBatchOperation");
        
        
        DuplicateAndRetarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DuplicateAndRetarget");
        DuplicateAndRetarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DuplicateAndRetarget_NativeFunction);
        DuplicateAndRetarget_AssetsToRetarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateAndRetarget_NativeFunction, "AssetsToRetarget");
        DuplicateAndRetarget_AssetsToRetarget_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(DuplicateAndRetarget_NativeFunction, "AssetsToRetarget");
        DuplicateAndRetarget_SourceMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateAndRetarget_NativeFunction, "SourceMesh");
        DuplicateAndRetarget_TargetMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateAndRetarget_NativeFunction, "TargetMesh");
        DuplicateAndRetarget_IKRetargetAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateAndRetarget_NativeFunction, "IKRetargetAsset");
        DuplicateAndRetarget_Search_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateAndRetarget_NativeFunction, "Search");
        DuplicateAndRetarget_Replace_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateAndRetarget_NativeFunction, "Replace");
        DuplicateAndRetarget_Prefix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateAndRetarget_NativeFunction, "Prefix");
        DuplicateAndRetarget_Suffix_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateAndRetarget_NativeFunction, "Suffix");
        DuplicateAndRetarget_bRemapReferencedAssets_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateAndRetarget_NativeFunction, "bRemapReferencedAssets");
        DuplicateAndRetarget_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateAndRetarget_NativeFunction, "ReturnValue");
        DuplicateAndRetarget_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(DuplicateAndRetarget_NativeFunction, "ReturnValue");
        
        
    }
    
    protected IKRetargetBatchOperation(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/IKRigEditor.IKRetargetBatchOperation:DuplicateAndRetarget
    static readonly IntPtr DuplicateAndRetarget_NativeFunction;
    static readonly int DuplicateAndRetarget_ParamsSize;
    static readonly int DuplicateAndRetarget_AssetsToRetarget_Offset;
    static readonly int DuplicateAndRetarget_AssetsToRetarget_ElementSize;
    static readonly int DuplicateAndRetarget_SourceMesh_Offset;
    static readonly int DuplicateAndRetarget_TargetMesh_Offset;
    static readonly int DuplicateAndRetarget_IKRetargetAsset_Offset;
    static readonly int DuplicateAndRetarget_Search_Offset;
    static readonly int DuplicateAndRetarget_Replace_Offset;
    static readonly int DuplicateAndRetarget_Prefix_Offset;
    static readonly int DuplicateAndRetarget_Suffix_Offset;
    static readonly int DuplicateAndRetarget_bRemapReferencedAssets_Offset;
    static readonly int DuplicateAndRetarget_ReturnValue_Offset;
    static readonly int DuplicateAndRetarget_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.CoreUObject.AssetData> DuplicateAndRetarget(System.Collections.Generic.IList<UnrealSharp.CoreUObject.AssetData> assetsToRetarget, UnrealSharp.Engine.SkeletalMesh sourceMesh, UnrealSharp.Engine.SkeletalMesh targetMesh, UnrealSharp.IKRig.IKRetargeter iKRetargetAsset, string search, string replace, string prefix, string suffix, bool bRemapReferencedAssets = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DuplicateAndRetarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AssetsToRetarget_NativeBuffer = IntPtr.Add(ParamsBuffer, DuplicateAndRetarget_AssetsToRetarget_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.AssetData> AssetsToRetarget_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.AssetData>(1, UnrealSharp.CoreUObject.AssetDataMarshaler.ToNative, UnrealSharp.CoreUObject.AssetDataMarshaler.FromNative, DuplicateAndRetarget_AssetsToRetarget_ElementSize);
            AssetsToRetarget_Marshaler.ToNative(AssetsToRetarget_NativeBuffer, 0, null, assetsToRetarget);
            ObjectMarshaller<UnrealSharp.Engine.SkeletalMesh>.ToNative(IntPtr.Add(ParamsBuffer, DuplicateAndRetarget_SourceMesh_Offset), 0, null, sourceMesh);
            ObjectMarshaller<UnrealSharp.Engine.SkeletalMesh>.ToNative(IntPtr.Add(ParamsBuffer, DuplicateAndRetarget_TargetMesh_Offset), 0, null, targetMesh);
            ObjectMarshaller<UnrealSharp.IKRig.IKRetargeter>.ToNative(IntPtr.Add(ParamsBuffer, DuplicateAndRetarget_IKRetargetAsset_Offset), 0, null, iKRetargetAsset);
            IntPtr Search_NativePtr = IntPtr.Add(ParamsBuffer,DuplicateAndRetarget_Search_Offset);
            StringMarshaller.ToNative(Search_NativePtr,0,null,search);
            IntPtr Replace_NativePtr = IntPtr.Add(ParamsBuffer,DuplicateAndRetarget_Replace_Offset);
            StringMarshaller.ToNative(Replace_NativePtr,0,null,replace);
            IntPtr Prefix_NativePtr = IntPtr.Add(ParamsBuffer,DuplicateAndRetarget_Prefix_Offset);
            StringMarshaller.ToNative(Prefix_NativePtr,0,null,prefix);
            IntPtr Suffix_NativePtr = IntPtr.Add(ParamsBuffer,DuplicateAndRetarget_Suffix_Offset);
            StringMarshaller.ToNative(Suffix_NativePtr,0,null,suffix);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, DuplicateAndRetarget_bRemapReferencedAssets_Offset), 0, null, bRemapReferencedAssets);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DuplicateAndRetarget_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.CoreUObject.AssetData> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, DuplicateAndRetarget_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.AssetData> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.AssetData> (1, UnrealSharp.CoreUObject.AssetDataMarshaler.ToNative, UnrealSharp.CoreUObject.AssetDataMarshaler.FromNative, DuplicateAndRetarget_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.AssetData>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            StringMarshaller.DestructInstance(Search_NativePtr, 0);
            StringMarshaller.DestructInstance(Replace_NativePtr, 0);
            StringMarshaller.DestructInstance(Prefix_NativePtr, 0);
            StringMarshaller.DestructInstance(Suffix_NativePtr, 0);
            return returnValue;
        }
    }
    
    
}
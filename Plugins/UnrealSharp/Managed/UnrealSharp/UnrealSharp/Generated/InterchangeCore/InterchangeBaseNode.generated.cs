// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.InterchangeCore;

[UClass]
public partial class InterchangeBaseNode : UnrealSharp.CoreUObject.Object
{
    
    static InterchangeBaseNode()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InterchangeBaseNode");
        
        
        SetParentUid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetParentUid");
        SetParentUid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetParentUid_NativeFunction);
        SetParentUid_ParentUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetParentUid_NativeFunction, "ParentUid");
        SetParentUid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetParentUid_NativeFunction, "ReturnValue");
        SetEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetEnabled");
        SetEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetEnabled_NativeFunction);
        SetEnabled_bIsEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEnabled_NativeFunction, "bIsEnabled");
        SetEnabled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEnabled_NativeFunction, "ReturnValue");
        SetDisplayLabel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDisplayLabel");
        SetDisplayLabel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDisplayLabel_NativeFunction);
        SetDisplayLabel_DisplayName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDisplayLabel_NativeFunction, "DisplayName");
        SetDisplayLabel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDisplayLabel_NativeFunction, "ReturnValue");
        SetAssetName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetAssetName");
        SetAssetName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetAssetName_NativeFunction);
        SetAssetName_AssetName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAssetName_NativeFunction, "AssetName");
        SetAssetName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetAssetName_NativeFunction, "ReturnValue");
        RemoveTargetNodeUid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveTargetNodeUid");
        RemoveTargetNodeUid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveTargetNodeUid_NativeFunction);
        RemoveTargetNodeUid_AssetUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveTargetNodeUid_NativeFunction, "AssetUid");
        RemoveTargetNodeUid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveTargetNodeUid_NativeFunction, "ReturnValue");
        RemoveAttribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveAttribute");
        RemoveAttribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveAttribute_NativeFunction);
        RemoveAttribute_NodeAttributeKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAttribute_NativeFunction, "NodeAttributeKey");
        RemoveAttribute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAttribute_NativeFunction, "ReturnValue");
        IsEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsEnabled");
        IsEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsEnabled_NativeFunction);
        IsEnabled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsEnabled_NativeFunction, "ReturnValue");
        InitializeNode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "InitializeNode");
        InitializeNode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(InitializeNode_NativeFunction);
        InitializeNode_UniqueID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InitializeNode_NativeFunction, "UniqueID");
        InitializeNode_DisplayLabel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InitializeNode_NativeFunction, "DisplayLabel");
        InitializeNode_NodeContainerType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InitializeNode_NativeFunction, "NodeContainerType");
        GetVector2Attribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVector2Attribute");
        GetVector2Attribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVector2Attribute_NativeFunction);
        GetVector2Attribute_NodeAttributeKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVector2Attribute_NativeFunction, "NodeAttributeKey");
        GetVector2Attribute_OutValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVector2Attribute_NativeFunction, "OutValue");
        GetVector2Attribute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVector2Attribute_NativeFunction, "ReturnValue");
        GetUniqueID_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetUniqueID");
        GetUniqueID_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetUniqueID_NativeFunction);
        GetUniqueID_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUniqueID_NativeFunction, "ReturnValue");
        GetTargetNodeCount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTargetNodeCount");
        GetTargetNodeCount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTargetNodeCount_NativeFunction);
        GetTargetNodeCount_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTargetNodeCount_NativeFunction, "ReturnValue");
        GetStringAttribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStringAttribute");
        GetStringAttribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStringAttribute_NativeFunction);
        GetStringAttribute_NodeAttributeKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStringAttribute_NativeFunction, "NodeAttributeKey");
        GetStringAttribute_OutValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStringAttribute_NativeFunction, "OutValue");
        GetStringAttribute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStringAttribute_NativeFunction, "ReturnValue");
        GetParentUid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetParentUid");
        GetParentUid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetParentUid_NativeFunction);
        GetParentUid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetParentUid_NativeFunction, "ReturnValue");
        GetNodeContainerType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNodeContainerType");
        GetNodeContainerType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNodeContainerType_NativeFunction);
        GetNodeContainerType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNodeContainerType_NativeFunction, "ReturnValue");
        GetLinearColorAttribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLinearColorAttribute");
        GetLinearColorAttribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLinearColorAttribute_NativeFunction);
        GetLinearColorAttribute_NodeAttributeKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinearColorAttribute_NativeFunction, "NodeAttributeKey");
        GetLinearColorAttribute_OutValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinearColorAttribute_NativeFunction, "OutValue");
        GetLinearColorAttribute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLinearColorAttribute_NativeFunction, "ReturnValue");
        GetInt32Attribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInt32Attribute");
        GetInt32Attribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInt32Attribute_NativeFunction);
        GetInt32Attribute_NodeAttributeKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInt32Attribute_NativeFunction, "NodeAttributeKey");
        GetInt32Attribute_OutValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInt32Attribute_NativeFunction, "OutValue");
        GetInt32Attribute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInt32Attribute_NativeFunction, "ReturnValue");
        GetGuidAttribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetGuidAttribute");
        GetGuidAttribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetGuidAttribute_NativeFunction);
        GetGuidAttribute_NodeAttributeKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGuidAttribute_NativeFunction, "NodeAttributeKey");
        GetGuidAttribute_OutValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGuidAttribute_NativeFunction, "OutValue");
        GetGuidAttribute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetGuidAttribute_NativeFunction, "ReturnValue");
        GetFloatAttribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFloatAttribute");
        GetFloatAttribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFloatAttribute_NativeFunction);
        GetFloatAttribute_NodeAttributeKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatAttribute_NativeFunction, "NodeAttributeKey");
        GetFloatAttribute_OutValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatAttribute_NativeFunction, "OutValue");
        GetFloatAttribute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFloatAttribute_NativeFunction, "ReturnValue");
        GetDoubleAttribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDoubleAttribute");
        GetDoubleAttribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDoubleAttribute_NativeFunction);
        GetDoubleAttribute_NodeAttributeKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDoubleAttribute_NativeFunction, "NodeAttributeKey");
        GetDoubleAttribute_OutValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDoubleAttribute_NativeFunction, "OutValue");
        GetDoubleAttribute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDoubleAttribute_NativeFunction, "ReturnValue");
        GetDisplayLabel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDisplayLabel");
        GetDisplayLabel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDisplayLabel_NativeFunction);
        GetDisplayLabel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDisplayLabel_NativeFunction, "ReturnValue");
        GetBooleanAttribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBooleanAttribute");
        GetBooleanAttribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBooleanAttribute_NativeFunction);
        GetBooleanAttribute_NodeAttributeKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBooleanAttribute_NativeFunction, "NodeAttributeKey");
        GetBooleanAttribute_OutValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBooleanAttribute_NativeFunction, "OutValue");
        GetBooleanAttribute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBooleanAttribute_NativeFunction, "ReturnValue");
        GetAssetName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAssetName");
        GetAssetName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAssetName_NativeFunction);
        GetAssetName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAssetName_NativeFunction, "ReturnValue");
        AddVector2Attribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddVector2Attribute");
        AddVector2Attribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddVector2Attribute_NativeFunction);
        AddVector2Attribute_NodeAttributeKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVector2Attribute_NativeFunction, "NodeAttributeKey");
        AddVector2Attribute_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVector2Attribute_NativeFunction, "Value");
        AddVector2Attribute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddVector2Attribute_NativeFunction, "ReturnValue");
        AddTargetNodeUid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddTargetNodeUid");
        AddTargetNodeUid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddTargetNodeUid_NativeFunction);
        AddTargetNodeUid_AssetUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTargetNodeUid_NativeFunction, "AssetUid");
        AddTargetNodeUid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddTargetNodeUid_NativeFunction, "ReturnValue");
        AddStringAttribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddStringAttribute");
        AddStringAttribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddStringAttribute_NativeFunction);
        AddStringAttribute_NodeAttributeKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddStringAttribute_NativeFunction, "NodeAttributeKey");
        AddStringAttribute_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddStringAttribute_NativeFunction, "Value");
        AddStringAttribute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddStringAttribute_NativeFunction, "ReturnValue");
        AddLinearColorAttribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddLinearColorAttribute");
        AddLinearColorAttribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddLinearColorAttribute_NativeFunction);
        AddLinearColorAttribute_NodeAttributeKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddLinearColorAttribute_NativeFunction, "NodeAttributeKey");
        AddLinearColorAttribute_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddLinearColorAttribute_NativeFunction, "Value");
        AddLinearColorAttribute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddLinearColorAttribute_NativeFunction, "ReturnValue");
        AddInt32Attribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddInt32Attribute");
        AddInt32Attribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddInt32Attribute_NativeFunction);
        AddInt32Attribute_NodeAttributeKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddInt32Attribute_NativeFunction, "NodeAttributeKey");
        AddInt32Attribute_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddInt32Attribute_NativeFunction, "Value");
        AddInt32Attribute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddInt32Attribute_NativeFunction, "ReturnValue");
        AddGuidAttribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddGuidAttribute");
        AddGuidAttribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddGuidAttribute_NativeFunction);
        AddGuidAttribute_NodeAttributeKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddGuidAttribute_NativeFunction, "NodeAttributeKey");
        AddGuidAttribute_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddGuidAttribute_NativeFunction, "Value");
        AddGuidAttribute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddGuidAttribute_NativeFunction, "ReturnValue");
        AddFloatAttribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddFloatAttribute");
        AddFloatAttribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddFloatAttribute_NativeFunction);
        AddFloatAttribute_NodeAttributeKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddFloatAttribute_NativeFunction, "NodeAttributeKey");
        AddFloatAttribute_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddFloatAttribute_NativeFunction, "Value");
        AddFloatAttribute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddFloatAttribute_NativeFunction, "ReturnValue");
        AddDoubleAttribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddDoubleAttribute");
        AddDoubleAttribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddDoubleAttribute_NativeFunction);
        AddDoubleAttribute_NodeAttributeKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddDoubleAttribute_NativeFunction, "NodeAttributeKey");
        AddDoubleAttribute_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddDoubleAttribute_NativeFunction, "Value");
        AddDoubleAttribute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddDoubleAttribute_NativeFunction, "ReturnValue");
        AddBooleanAttribute_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddBooleanAttribute");
        AddBooleanAttribute_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddBooleanAttribute_NativeFunction);
        AddBooleanAttribute_NodeAttributeKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddBooleanAttribute_NativeFunction, "NodeAttributeKey");
        AddBooleanAttribute_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddBooleanAttribute_NativeFunction, "Value");
        AddBooleanAttribute_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddBooleanAttribute_NativeFunction, "ReturnValue");
        
        
    }
    
    protected InterchangeBaseNode(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/InterchangeCore.InterchangeBaseNode:SetParentUid
    static readonly IntPtr SetParentUid_NativeFunction;
    static readonly int SetParentUid_ParamsSize;
    static readonly int SetParentUid_ParentUid_Offset;
    static readonly int SetParentUid_ReturnValue_Offset;
    
    public bool SetParentUid(string parentUid)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetParentUid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ParentUid_NativePtr = IntPtr.Add(ParamsBuffer,SetParentUid_ParentUid_Offset);
            StringMarshaller.ToNative(ParentUid_NativePtr,0,null,parentUid);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetParentUid_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetParentUid_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ParentUid_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:SetEnabled
    static readonly IntPtr SetEnabled_NativeFunction;
    static readonly int SetEnabled_ParamsSize;
    static readonly int SetEnabled_bIsEnabled_Offset;
    static readonly int SetEnabled_ReturnValue_Offset;
    
    public bool SetEnabled(bool bIsEnabled)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetEnabled_bIsEnabled_Offset), 0, null, bIsEnabled);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetEnabled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetEnabled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:SetDisplayLabel
    static readonly IntPtr SetDisplayLabel_NativeFunction;
    static readonly int SetDisplayLabel_ParamsSize;
    static readonly int SetDisplayLabel_DisplayName_Offset;
    static readonly int SetDisplayLabel_ReturnValue_Offset;
    
    public bool SetDisplayLabel(string displayName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDisplayLabel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr DisplayName_NativePtr = IntPtr.Add(ParamsBuffer,SetDisplayLabel_DisplayName_Offset);
            StringMarshaller.ToNative(DisplayName_NativePtr,0,null,displayName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDisplayLabel_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetDisplayLabel_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(DisplayName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:SetAssetName
    static readonly IntPtr SetAssetName_NativeFunction;
    static readonly int SetAssetName_ParamsSize;
    static readonly int SetAssetName_AssetName_Offset;
    static readonly int SetAssetName_ReturnValue_Offset;
    
    public bool SetAssetName(string assetName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetAssetName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AssetName_NativePtr = IntPtr.Add(ParamsBuffer,SetAssetName_AssetName_Offset);
            StringMarshaller.ToNative(AssetName_NativePtr,0,null,assetName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetAssetName_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetAssetName_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AssetName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:RemoveTargetNodeUid
    static readonly IntPtr RemoveTargetNodeUid_NativeFunction;
    static readonly int RemoveTargetNodeUid_ParamsSize;
    static readonly int RemoveTargetNodeUid_AssetUid_Offset;
    static readonly int RemoveTargetNodeUid_ReturnValue_Offset;
    
    public bool RemoveTargetNodeUid(string assetUid)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveTargetNodeUid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AssetUid_NativePtr = IntPtr.Add(ParamsBuffer,RemoveTargetNodeUid_AssetUid_Offset);
            StringMarshaller.ToNative(AssetUid_NativePtr,0,null,assetUid);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveTargetNodeUid_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RemoveTargetNodeUid_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AssetUid_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:RemoveAttribute
    static readonly IntPtr RemoveAttribute_NativeFunction;
    static readonly int RemoveAttribute_ParamsSize;
    static readonly int RemoveAttribute_NodeAttributeKey_Offset;
    static readonly int RemoveAttribute_ReturnValue_Offset;
    
    public bool RemoveAttribute(string nodeAttributeKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveAttribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NodeAttributeKey_NativePtr = IntPtr.Add(ParamsBuffer,RemoveAttribute_NodeAttributeKey_Offset);
            StringMarshaller.ToNative(NodeAttributeKey_NativePtr,0,null,nodeAttributeKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveAttribute_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RemoveAttribute_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(NodeAttributeKey_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:IsEnabled
    static readonly IntPtr IsEnabled_NativeFunction;
    static readonly int IsEnabled_ParamsSize;
    static readonly int IsEnabled_ReturnValue_Offset;
    
    public bool IsEnabled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsEnabled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsEnabled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:InitializeNode
    static readonly IntPtr InitializeNode_NativeFunction;
    static readonly int InitializeNode_ParamsSize;
    static readonly int InitializeNode_UniqueID_Offset;
    static readonly int InitializeNode_DisplayLabel_Offset;
    static readonly int InitializeNode_NodeContainerType_Offset;
    
    public void InitializeNode(string uniqueID, string displayLabel, UnrealSharp.InterchangeCore.EInterchangeNodeContainerType nodeContainerType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[InitializeNode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr UniqueID_NativePtr = IntPtr.Add(ParamsBuffer,InitializeNode_UniqueID_Offset);
            StringMarshaller.ToNative(UniqueID_NativePtr,0,null,uniqueID);
            IntPtr DisplayLabel_NativePtr = IntPtr.Add(ParamsBuffer,InitializeNode_DisplayLabel_Offset);
            StringMarshaller.ToNative(DisplayLabel_NativePtr,0,null,displayLabel);
            BlittableMarshaller<UnrealSharp.InterchangeCore.EInterchangeNodeContainerType>.ToNative(IntPtr.Add(ParamsBuffer, InitializeNode_NodeContainerType_Offset), 0, null, nodeContainerType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, InitializeNode_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(UniqueID_NativePtr, 0);
            StringMarshaller.DestructInstance(DisplayLabel_NativePtr, 0);
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:GetVector2Attribute
    static readonly IntPtr GetVector2Attribute_NativeFunction;
    static readonly int GetVector2Attribute_ParamsSize;
    static readonly int GetVector2Attribute_NodeAttributeKey_Offset;
    static readonly int GetVector2Attribute_OutValue_Offset;
    static readonly int GetVector2Attribute_ReturnValue_Offset;
    
    public bool GetVector2Attribute(string nodeAttributeKey, out UnrealSharp.CoreUObject.Vector2f outValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVector2Attribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NodeAttributeKey_NativePtr = IntPtr.Add(ParamsBuffer,GetVector2Attribute_NodeAttributeKey_Offset);
            StringMarshaller.ToNative(NodeAttributeKey_NativePtr,0,null,nodeAttributeKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVector2Attribute_NativeFunction, ParamsBuffer);
            
            outValue = UnrealSharp.CoreUObject.Vector2fMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetVector2Attribute_OutValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetVector2Attribute_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(NodeAttributeKey_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:GetUniqueID
    static readonly IntPtr GetUniqueID_NativeFunction;
    static readonly int GetUniqueID_ParamsSize;
    static readonly int GetUniqueID_ReturnValue_Offset;
    
    public string GetUniqueID()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetUniqueID_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetUniqueID_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetUniqueID_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:GetTargetNodeCount
    static readonly IntPtr GetTargetNodeCount_NativeFunction;
    static readonly int GetTargetNodeCount_ParamsSize;
    static readonly int GetTargetNodeCount_ReturnValue_Offset;
    
    public int GetTargetNodeCount()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTargetNodeCount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTargetNodeCount_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetTargetNodeCount_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:GetStringAttribute
    static readonly IntPtr GetStringAttribute_NativeFunction;
    static readonly int GetStringAttribute_ParamsSize;
    static readonly int GetStringAttribute_NodeAttributeKey_Offset;
    static readonly int GetStringAttribute_OutValue_Offset;
    static readonly int GetStringAttribute_ReturnValue_Offset;
    
    public bool GetStringAttribute(string nodeAttributeKey, out string outValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStringAttribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NodeAttributeKey_NativePtr = IntPtr.Add(ParamsBuffer,GetStringAttribute_NodeAttributeKey_Offset);
            StringMarshaller.ToNative(NodeAttributeKey_NativePtr,0,null,nodeAttributeKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetStringAttribute_NativeFunction, ParamsBuffer);
            
            IntPtr OutValue_NativePtr = IntPtr.Add(ParamsBuffer,GetStringAttribute_OutValue_Offset);
            outValue = StringMarshaller.FromNative(OutValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutValue_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetStringAttribute_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(NodeAttributeKey_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:GetParentUid
    static readonly IntPtr GetParentUid_NativeFunction;
    static readonly int GetParentUid_ParamsSize;
    static readonly int GetParentUid_ReturnValue_Offset;
    
    public string GetParentUid()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetParentUid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetParentUid_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetParentUid_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:GetNodeContainerType
    static readonly IntPtr GetNodeContainerType_NativeFunction;
    static readonly int GetNodeContainerType_ParamsSize;
    static readonly int GetNodeContainerType_ReturnValue_Offset;
    
    public UnrealSharp.InterchangeCore.EInterchangeNodeContainerType GetNodeContainerType()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNodeContainerType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNodeContainerType_NativeFunction, ParamsBuffer);
            
            UnrealSharp.InterchangeCore.EInterchangeNodeContainerType returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.InterchangeCore.EInterchangeNodeContainerType>.FromNative(IntPtr.Add(ParamsBuffer, GetNodeContainerType_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:GetLinearColorAttribute
    static readonly IntPtr GetLinearColorAttribute_NativeFunction;
    static readonly int GetLinearColorAttribute_ParamsSize;
    static readonly int GetLinearColorAttribute_NodeAttributeKey_Offset;
    static readonly int GetLinearColorAttribute_OutValue_Offset;
    static readonly int GetLinearColorAttribute_ReturnValue_Offset;
    
    public bool GetLinearColorAttribute(string nodeAttributeKey, out UnrealSharp.CoreUObject.LinearColor outValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLinearColorAttribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NodeAttributeKey_NativePtr = IntPtr.Add(ParamsBuffer,GetLinearColorAttribute_NodeAttributeKey_Offset);
            StringMarshaller.ToNative(NodeAttributeKey_NativePtr,0,null,nodeAttributeKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLinearColorAttribute_NativeFunction, ParamsBuffer);
            
            outValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, GetLinearColorAttribute_OutValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetLinearColorAttribute_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(NodeAttributeKey_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:GetInt32Attribute
    static readonly IntPtr GetInt32Attribute_NativeFunction;
    static readonly int GetInt32Attribute_ParamsSize;
    static readonly int GetInt32Attribute_NodeAttributeKey_Offset;
    static readonly int GetInt32Attribute_OutValue_Offset;
    static readonly int GetInt32Attribute_ReturnValue_Offset;
    
    public bool GetInt32Attribute(string nodeAttributeKey, out int outValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInt32Attribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NodeAttributeKey_NativePtr = IntPtr.Add(ParamsBuffer,GetInt32Attribute_NodeAttributeKey_Offset);
            StringMarshaller.ToNative(NodeAttributeKey_NativePtr,0,null,nodeAttributeKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInt32Attribute_NativeFunction, ParamsBuffer);
            
            outValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetInt32Attribute_OutValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetInt32Attribute_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(NodeAttributeKey_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:GetGuidAttribute
    static readonly IntPtr GetGuidAttribute_NativeFunction;
    static readonly int GetGuidAttribute_ParamsSize;
    static readonly int GetGuidAttribute_NodeAttributeKey_Offset;
    static readonly int GetGuidAttribute_OutValue_Offset;
    static readonly int GetGuidAttribute_ReturnValue_Offset;
    
    public bool GetGuidAttribute(string nodeAttributeKey, out UnrealSharp.CoreUObject.Guid outValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetGuidAttribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NodeAttributeKey_NativePtr = IntPtr.Add(ParamsBuffer,GetGuidAttribute_NodeAttributeKey_Offset);
            StringMarshaller.ToNative(NodeAttributeKey_NativePtr,0,null,nodeAttributeKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetGuidAttribute_NativeFunction, ParamsBuffer);
            
            outValue = UnrealSharp.CoreUObject.GuidMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetGuidAttribute_OutValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetGuidAttribute_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(NodeAttributeKey_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:GetFloatAttribute
    static readonly IntPtr GetFloatAttribute_NativeFunction;
    static readonly int GetFloatAttribute_ParamsSize;
    static readonly int GetFloatAttribute_NodeAttributeKey_Offset;
    static readonly int GetFloatAttribute_OutValue_Offset;
    static readonly int GetFloatAttribute_ReturnValue_Offset;
    
    public bool GetFloatAttribute(string nodeAttributeKey, out float outValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFloatAttribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NodeAttributeKey_NativePtr = IntPtr.Add(ParamsBuffer,GetFloatAttribute_NodeAttributeKey_Offset);
            StringMarshaller.ToNative(NodeAttributeKey_NativePtr,0,null,nodeAttributeKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFloatAttribute_NativeFunction, ParamsBuffer);
            
            outValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetFloatAttribute_OutValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetFloatAttribute_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(NodeAttributeKey_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:GetDoubleAttribute
    static readonly IntPtr GetDoubleAttribute_NativeFunction;
    static readonly int GetDoubleAttribute_ParamsSize;
    static readonly int GetDoubleAttribute_NodeAttributeKey_Offset;
    static readonly int GetDoubleAttribute_OutValue_Offset;
    static readonly int GetDoubleAttribute_ReturnValue_Offset;
    
    public bool GetDoubleAttribute(string nodeAttributeKey, out double outValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDoubleAttribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NodeAttributeKey_NativePtr = IntPtr.Add(ParamsBuffer,GetDoubleAttribute_NodeAttributeKey_Offset);
            StringMarshaller.ToNative(NodeAttributeKey_NativePtr,0,null,nodeAttributeKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDoubleAttribute_NativeFunction, ParamsBuffer);
            
            outValue = BlittableMarshaller<double>.FromNative(IntPtr.Add(ParamsBuffer, GetDoubleAttribute_OutValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetDoubleAttribute_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(NodeAttributeKey_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:GetDisplayLabel
    static readonly IntPtr GetDisplayLabel_NativeFunction;
    static readonly int GetDisplayLabel_ParamsSize;
    static readonly int GetDisplayLabel_ReturnValue_Offset;
    
    public string GetDisplayLabel()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDisplayLabel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDisplayLabel_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetDisplayLabel_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:GetBooleanAttribute
    static readonly IntPtr GetBooleanAttribute_NativeFunction;
    static readonly int GetBooleanAttribute_ParamsSize;
    static readonly int GetBooleanAttribute_NodeAttributeKey_Offset;
    static readonly int GetBooleanAttribute_OutValue_Offset;
    static readonly int GetBooleanAttribute_ReturnValue_Offset;
    
    public bool GetBooleanAttribute(string nodeAttributeKey, out bool outValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBooleanAttribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NodeAttributeKey_NativePtr = IntPtr.Add(ParamsBuffer,GetBooleanAttribute_NodeAttributeKey_Offset);
            StringMarshaller.ToNative(NodeAttributeKey_NativePtr,0,null,nodeAttributeKey);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBooleanAttribute_NativeFunction, ParamsBuffer);
            
            outValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetBooleanAttribute_OutValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetBooleanAttribute_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(NodeAttributeKey_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:GetAssetName
    static readonly IntPtr GetAssetName_NativeFunction;
    static readonly int GetAssetName_ParamsSize;
    static readonly int GetAssetName_ReturnValue_Offset;
    
    public string GetAssetName()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAssetName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAssetName_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetAssetName_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:AddVector2Attribute
    static readonly IntPtr AddVector2Attribute_NativeFunction;
    static readonly int AddVector2Attribute_ParamsSize;
    static readonly int AddVector2Attribute_NodeAttributeKey_Offset;
    static readonly int AddVector2Attribute_Value_Offset;
    static readonly int AddVector2Attribute_ReturnValue_Offset;
    
    public bool AddVector2Attribute(string nodeAttributeKey, UnrealSharp.CoreUObject.Vector2f value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddVector2Attribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NodeAttributeKey_NativePtr = IntPtr.Add(ParamsBuffer,AddVector2Attribute_NodeAttributeKey_Offset);
            StringMarshaller.ToNative(NodeAttributeKey_NativePtr,0,null,nodeAttributeKey);
            UnrealSharp.CoreUObject.Vector2fMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AddVector2Attribute_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddVector2Attribute_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AddVector2Attribute_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(NodeAttributeKey_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:AddTargetNodeUid
    static readonly IntPtr AddTargetNodeUid_NativeFunction;
    static readonly int AddTargetNodeUid_ParamsSize;
    static readonly int AddTargetNodeUid_AssetUid_Offset;
    static readonly int AddTargetNodeUid_ReturnValue_Offset;
    
    public bool AddTargetNodeUid(string assetUid)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddTargetNodeUid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AssetUid_NativePtr = IntPtr.Add(ParamsBuffer,AddTargetNodeUid_AssetUid_Offset);
            StringMarshaller.ToNative(AssetUid_NativePtr,0,null,assetUid);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddTargetNodeUid_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AddTargetNodeUid_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AssetUid_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:AddStringAttribute
    static readonly IntPtr AddStringAttribute_NativeFunction;
    static readonly int AddStringAttribute_ParamsSize;
    static readonly int AddStringAttribute_NodeAttributeKey_Offset;
    static readonly int AddStringAttribute_Value_Offset;
    static readonly int AddStringAttribute_ReturnValue_Offset;
    
    public bool AddStringAttribute(string nodeAttributeKey, string value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddStringAttribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NodeAttributeKey_NativePtr = IntPtr.Add(ParamsBuffer,AddStringAttribute_NodeAttributeKey_Offset);
            StringMarshaller.ToNative(NodeAttributeKey_NativePtr,0,null,nodeAttributeKey);
            IntPtr Value_NativePtr = IntPtr.Add(ParamsBuffer,AddStringAttribute_Value_Offset);
            StringMarshaller.ToNative(Value_NativePtr,0,null,value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddStringAttribute_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AddStringAttribute_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(NodeAttributeKey_NativePtr, 0);
            StringMarshaller.DestructInstance(Value_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:AddLinearColorAttribute
    static readonly IntPtr AddLinearColorAttribute_NativeFunction;
    static readonly int AddLinearColorAttribute_ParamsSize;
    static readonly int AddLinearColorAttribute_NodeAttributeKey_Offset;
    static readonly int AddLinearColorAttribute_Value_Offset;
    static readonly int AddLinearColorAttribute_ReturnValue_Offset;
    
    public bool AddLinearColorAttribute(string nodeAttributeKey, UnrealSharp.CoreUObject.LinearColor value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddLinearColorAttribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NodeAttributeKey_NativePtr = IntPtr.Add(ParamsBuffer,AddLinearColorAttribute_NodeAttributeKey_Offset);
            StringMarshaller.ToNative(NodeAttributeKey_NativePtr,0,null,nodeAttributeKey);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, AddLinearColorAttribute_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddLinearColorAttribute_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AddLinearColorAttribute_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(NodeAttributeKey_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:AddInt32Attribute
    static readonly IntPtr AddInt32Attribute_NativeFunction;
    static readonly int AddInt32Attribute_ParamsSize;
    static readonly int AddInt32Attribute_NodeAttributeKey_Offset;
    static readonly int AddInt32Attribute_Value_Offset;
    static readonly int AddInt32Attribute_ReturnValue_Offset;
    
    public bool AddInt32Attribute(string nodeAttributeKey, int value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddInt32Attribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NodeAttributeKey_NativePtr = IntPtr.Add(ParamsBuffer,AddInt32Attribute_NodeAttributeKey_Offset);
            StringMarshaller.ToNative(NodeAttributeKey_NativePtr,0,null,nodeAttributeKey);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, AddInt32Attribute_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddInt32Attribute_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AddInt32Attribute_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(NodeAttributeKey_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:AddGuidAttribute
    static readonly IntPtr AddGuidAttribute_NativeFunction;
    static readonly int AddGuidAttribute_ParamsSize;
    static readonly int AddGuidAttribute_NodeAttributeKey_Offset;
    static readonly int AddGuidAttribute_Value_Offset;
    static readonly int AddGuidAttribute_ReturnValue_Offset;
    
    public bool AddGuidAttribute(string nodeAttributeKey, UnrealSharp.CoreUObject.Guid value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddGuidAttribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NodeAttributeKey_NativePtr = IntPtr.Add(ParamsBuffer,AddGuidAttribute_NodeAttributeKey_Offset);
            StringMarshaller.ToNative(NodeAttributeKey_NativePtr,0,null,nodeAttributeKey);
            UnrealSharp.CoreUObject.GuidMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AddGuidAttribute_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddGuidAttribute_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AddGuidAttribute_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(NodeAttributeKey_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:AddFloatAttribute
    static readonly IntPtr AddFloatAttribute_NativeFunction;
    static readonly int AddFloatAttribute_ParamsSize;
    static readonly int AddFloatAttribute_NodeAttributeKey_Offset;
    static readonly int AddFloatAttribute_Value_Offset;
    static readonly int AddFloatAttribute_ReturnValue_Offset;
    
    public bool AddFloatAttribute(string nodeAttributeKey, float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddFloatAttribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NodeAttributeKey_NativePtr = IntPtr.Add(ParamsBuffer,AddFloatAttribute_NodeAttributeKey_Offset);
            StringMarshaller.ToNative(NodeAttributeKey_NativePtr,0,null,nodeAttributeKey);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, AddFloatAttribute_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddFloatAttribute_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AddFloatAttribute_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(NodeAttributeKey_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:AddDoubleAttribute
    static readonly IntPtr AddDoubleAttribute_NativeFunction;
    static readonly int AddDoubleAttribute_ParamsSize;
    static readonly int AddDoubleAttribute_NodeAttributeKey_Offset;
    static readonly int AddDoubleAttribute_Value_Offset;
    static readonly int AddDoubleAttribute_ReturnValue_Offset;
    
    public bool AddDoubleAttribute(string nodeAttributeKey, double value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddDoubleAttribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NodeAttributeKey_NativePtr = IntPtr.Add(ParamsBuffer,AddDoubleAttribute_NodeAttributeKey_Offset);
            StringMarshaller.ToNative(NodeAttributeKey_NativePtr,0,null,nodeAttributeKey);
            BlittableMarshaller<double>.ToNative(IntPtr.Add(ParamsBuffer, AddDoubleAttribute_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddDoubleAttribute_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AddDoubleAttribute_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(NodeAttributeKey_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeBaseNode:AddBooleanAttribute
    static readonly IntPtr AddBooleanAttribute_NativeFunction;
    static readonly int AddBooleanAttribute_ParamsSize;
    static readonly int AddBooleanAttribute_NodeAttributeKey_Offset;
    static readonly int AddBooleanAttribute_Value_Offset;
    static readonly int AddBooleanAttribute_ReturnValue_Offset;
    
    public bool AddBooleanAttribute(string nodeAttributeKey, bool value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddBooleanAttribute_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr NodeAttributeKey_NativePtr = IntPtr.Add(ParamsBuffer,AddBooleanAttribute_NodeAttributeKey_Offset);
            StringMarshaller.ToNative(NodeAttributeKey_NativePtr,0,null,nodeAttributeKey);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, AddBooleanAttribute_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddBooleanAttribute_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AddBooleanAttribute_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(NodeAttributeKey_NativePtr, 0);
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.InterchangeCore;

[UClass]
abstract public partial class InterchangePipelineBase : UnrealSharp.CoreUObject.Object
{
    
    static InterchangePipelineBase()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InterchangePipelineBase");
        
        
        FindOrAddPropertyStates_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FindOrAddPropertyStates");
        FindOrAddPropertyStates_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FindOrAddPropertyStates_NativeFunction);
        FindOrAddPropertyStates_PropertyPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindOrAddPropertyStates_NativeFunction, "PropertyPath");
        FindOrAddPropertyStates_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FindOrAddPropertyStates_NativeFunction, "ReturnValue");
        DoesPropertyStatesExist_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DoesPropertyStatesExist");
        DoesPropertyStatesExist_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DoesPropertyStatesExist_NativeFunction);
        DoesPropertyStatesExist_PropertyPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesPropertyStatesExist_NativeFunction, "PropertyPath");
        DoesPropertyStatesExist_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DoesPropertyStatesExist_NativeFunction, "ReturnValue");
        
        IntPtr ScriptedSetReimportSourceIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ScriptedSetReimportSourceIndex");
        ScriptedSetReimportSourceIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ScriptedSetReimportSourceIndex_NativeFunction);
        ScriptedSetReimportSourceIndex_ReimportObjectClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScriptedSetReimportSourceIndex_NativeFunction, "ReimportObjectClass");
        ScriptedSetReimportSourceIndex_SourceFileIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScriptedSetReimportSourceIndex_NativeFunction, "SourceFileIndex");
        
        IntPtr ScriptedExecutePreImportPipeline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ScriptedExecutePreImportPipeline");
        ScriptedExecutePreImportPipeline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ScriptedExecutePreImportPipeline_NativeFunction);
        ScriptedExecutePreImportPipeline_BaseNodeContainer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScriptedExecutePreImportPipeline_NativeFunction, "BaseNodeContainer");
        ScriptedExecutePreImportPipeline_SourceDatas_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScriptedExecutePreImportPipeline_NativeFunction, "SourceDatas");
        ScriptedExecutePreImportPipeline_SourceDatas_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ScriptedExecutePreImportPipeline_NativeFunction, "SourceDatas");
        
        IntPtr ScriptedExecutePostImportPipeline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ScriptedExecutePostImportPipeline");
        ScriptedExecutePostImportPipeline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ScriptedExecutePostImportPipeline_NativeFunction);
        ScriptedExecutePostImportPipeline_BaseNodeContainer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScriptedExecutePostImportPipeline_NativeFunction, "BaseNodeContainer");
        ScriptedExecutePostImportPipeline_FactoryNodeKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScriptedExecutePostImportPipeline_NativeFunction, "FactoryNodeKey");
        ScriptedExecutePostImportPipeline_CreatedAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScriptedExecutePostImportPipeline_NativeFunction, "CreatedAsset");
        ScriptedExecutePostImportPipeline_bIsAReimport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScriptedExecutePostImportPipeline_NativeFunction, "bIsAReimport");
        
        IntPtr ScriptedExecutePostFactoryPipeline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ScriptedExecutePostFactoryPipeline");
        ScriptedExecutePostFactoryPipeline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ScriptedExecutePostFactoryPipeline_NativeFunction);
        ScriptedExecutePostFactoryPipeline_BaseNodeContainer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScriptedExecutePostFactoryPipeline_NativeFunction, "BaseNodeContainer");
        ScriptedExecutePostFactoryPipeline_FactoryNodeKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScriptedExecutePostFactoryPipeline_NativeFunction, "FactoryNodeKey");
        ScriptedExecutePostFactoryPipeline_CreatedAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScriptedExecutePostFactoryPipeline_NativeFunction, "CreatedAsset");
        ScriptedExecutePostFactoryPipeline_bIsAReimport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScriptedExecutePostFactoryPipeline_NativeFunction, "bIsAReimport");
        
        IntPtr ScriptedExecutePipeline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ScriptedExecutePipeline");
        ScriptedExecutePipeline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ScriptedExecutePipeline_NativeFunction);
        ScriptedExecutePipeline_BaseNodeContainer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScriptedExecutePipeline_NativeFunction, "BaseNodeContainer");
        ScriptedExecutePipeline_SourceDatas_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScriptedExecutePipeline_NativeFunction, "SourceDatas");
        ScriptedExecutePipeline_SourceDatas_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ScriptedExecutePipeline_NativeFunction, "SourceDatas");
        
        IntPtr ScriptedExecuteExportPipeline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ScriptedExecuteExportPipeline");
        ScriptedExecuteExportPipeline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ScriptedExecuteExportPipeline_NativeFunction);
        ScriptedExecuteExportPipeline_BaseNodeContainer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScriptedExecuteExportPipeline_NativeFunction, "BaseNodeContainer");
        
        IntPtr ScriptedCanExecuteOnAnyThread_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ScriptedCanExecuteOnAnyThread");
        ScriptedCanExecuteOnAnyThread_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ScriptedCanExecuteOnAnyThread_NativeFunction);
        ScriptedCanExecuteOnAnyThread_PipelineTask_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScriptedCanExecuteOnAnyThread_NativeFunction, "PipelineTask");
        ScriptedCanExecuteOnAnyThread_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ScriptedCanExecuteOnAnyThread_NativeFunction, "ReturnValue");
        
        
    }
    
    protected InterchangePipelineBase(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/InterchangeCore.InterchangePipelineBase:FindOrAddPropertyStates
    static readonly IntPtr FindOrAddPropertyStates_NativeFunction;
    static readonly int FindOrAddPropertyStates_ParamsSize;
    static readonly int FindOrAddPropertyStates_PropertyPath_Offset;
    static readonly int FindOrAddPropertyStates_ReturnValue_Offset;
    
    public UnrealSharp.InterchangeCore.InterchangePipelinePropertyStates FindOrAddPropertyStates(Name propertyPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FindOrAddPropertyStates_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, FindOrAddPropertyStates_PropertyPath_Offset), 0, null, propertyPath);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FindOrAddPropertyStates_NativeFunction, ParamsBuffer);
            
            UnrealSharp.InterchangeCore.InterchangePipelinePropertyStates returnValue;
            returnValue = UnrealSharp.InterchangeCore.InterchangePipelinePropertyStatesMarshaler.FromNative(IntPtr.Add(ParamsBuffer, FindOrAddPropertyStates_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangePipelineBase:DoesPropertyStatesExist
    static readonly IntPtr DoesPropertyStatesExist_NativeFunction;
    static readonly int DoesPropertyStatesExist_ParamsSize;
    static readonly int DoesPropertyStatesExist_PropertyPath_Offset;
    static readonly int DoesPropertyStatesExist_ReturnValue_Offset;
    
    public bool DoesPropertyStatesExist(Name propertyPath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DoesPropertyStatesExist_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, DoesPropertyStatesExist_PropertyPath_Offset), 0, null, propertyPath);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DoesPropertyStatesExist_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, DoesPropertyStatesExist_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangePipelineBase:ScriptedSetReimportSourceIndex
    IntPtr ScriptedSetReimportSourceIndex_NativeFunction;
    static readonly int ScriptedSetReimportSourceIndex_ParamsSize;
    static readonly int ScriptedSetReimportSourceIndex_ReimportObjectClass_Offset;
    static readonly int ScriptedSetReimportSourceIndex_SourceFileIndex_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ScriptedSetReimportSourceIndex(SubclassOf<UnrealSharp.CoreUObject.Object> reimportObjectClass, int sourceFileIndex)
    {
        unsafe
        {
            if (ScriptedSetReimportSourceIndex_NativeFunction == IntPtr.Zero)
            {
                ScriptedSetReimportSourceIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ScriptedSetReimportSourceIndex");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ScriptedSetReimportSourceIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ScriptedSetReimportSourceIndex_ReimportObjectClass_Offset), 0, null, reimportObjectClass);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ScriptedSetReimportSourceIndex_SourceFileIndex_Offset), 0, null, sourceFileIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ScriptedSetReimportSourceIndex_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ScriptedSetReimportSourceIndex_Implementation(SubclassOf<UnrealSharp.CoreUObject.Object> reimportObjectClass, int sourceFileIndex)
    {
    }
    void Invoke_ScriptedSetReimportSourceIndex(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            SubclassOf<UnrealSharp.CoreUObject.Object> reimportObjectClass = SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(buffer, ScriptedSetReimportSourceIndex_ReimportObjectClass_Offset), 0, null);
            int sourceFileIndex = BlittableMarshaller<int>.FromNative(IntPtr.Add(buffer, ScriptedSetReimportSourceIndex_SourceFileIndex_Offset), 0, null);
            ScriptedSetReimportSourceIndex_Implementation(reimportObjectClass, sourceFileIndex);
        }
    }
    
    // Function /Script/InterchangeCore.InterchangePipelineBase:ScriptedExecutePreImportPipeline
    IntPtr ScriptedExecutePreImportPipeline_NativeFunction;
    static readonly int ScriptedExecutePreImportPipeline_ParamsSize;
    static readonly int ScriptedExecutePreImportPipeline_BaseNodeContainer_Offset;
    static readonly int ScriptedExecutePreImportPipeline_SourceDatas_Offset;
    static readonly int ScriptedExecutePreImportPipeline_SourceDatas_ElementSize;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ScriptedExecutePreImportPipeline(UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer baseNodeContainer, System.Collections.Generic.IList<UnrealSharp.InterchangeCore.InterchangeSourceData> sourceDatas)
    {
        unsafe
        {
            if (ScriptedExecutePreImportPipeline_NativeFunction == IntPtr.Zero)
            {
                ScriptedExecutePreImportPipeline_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ScriptedExecutePreImportPipeline");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ScriptedExecutePreImportPipeline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer>.ToNative(IntPtr.Add(ParamsBuffer, ScriptedExecutePreImportPipeline_BaseNodeContainer_Offset), 0, null, baseNodeContainer);
            IntPtr SourceDatas_NativeBuffer = IntPtr.Add(ParamsBuffer, ScriptedExecutePreImportPipeline_SourceDatas_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.InterchangeCore.InterchangeSourceData> SourceDatas_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.InterchangeCore.InterchangeSourceData>(1, ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeSourceData>.ToNative, ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeSourceData>.FromNative, ScriptedExecutePreImportPipeline_SourceDatas_ElementSize);
            SourceDatas_Marshaler.ToNative(SourceDatas_NativeBuffer, 0, null, sourceDatas);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ScriptedExecutePreImportPipeline_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ScriptedExecutePreImportPipeline_Implementation(UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer baseNodeContainer, System.Collections.Generic.IList<UnrealSharp.InterchangeCore.InterchangeSourceData> sourceDatas)
    {
    }
    void Invoke_ScriptedExecutePreImportPipeline(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer baseNodeContainer = ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer>.FromNative(IntPtr.Add(buffer, ScriptedExecutePreImportPipeline_BaseNodeContainer_Offset), 0, null);
            IntPtr SourceDatas_NativeBuffer = IntPtr.Add(buffer, ScriptedExecutePreImportPipeline_SourceDatas_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.InterchangeCore.InterchangeSourceData> SourceDatas_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.InterchangeCore.InterchangeSourceData> (1, ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeSourceData>.ToNative, ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeSourceData>.FromNative, ScriptedExecutePreImportPipeline_SourceDatas_ElementSize);
            System.Collections.Generic.IList<UnrealSharp.InterchangeCore.InterchangeSourceData> sourceDatas = SourceDatas_Marshaler.FromNative(SourceDatas_NativeBuffer, 0, null);
            ScriptedExecutePreImportPipeline_Implementation(baseNodeContainer, sourceDatas);
        }
    }
    
    // Function /Script/InterchangeCore.InterchangePipelineBase:ScriptedExecutePostImportPipeline
    IntPtr ScriptedExecutePostImportPipeline_NativeFunction;
    static readonly int ScriptedExecutePostImportPipeline_ParamsSize;
    static readonly int ScriptedExecutePostImportPipeline_BaseNodeContainer_Offset;
    static readonly int ScriptedExecutePostImportPipeline_FactoryNodeKey_Offset;
    static readonly int ScriptedExecutePostImportPipeline_CreatedAsset_Offset;
    static readonly int ScriptedExecutePostImportPipeline_bIsAReimport_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ScriptedExecutePostImportPipeline(UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer baseNodeContainer, string factoryNodeKey, UnrealSharp.CoreUObject.Object createdAsset, bool bIsAReimport)
    {
        unsafe
        {
            if (ScriptedExecutePostImportPipeline_NativeFunction == IntPtr.Zero)
            {
                ScriptedExecutePostImportPipeline_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ScriptedExecutePostImportPipeline");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ScriptedExecutePostImportPipeline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer>.ToNative(IntPtr.Add(ParamsBuffer, ScriptedExecutePostImportPipeline_BaseNodeContainer_Offset), 0, null, baseNodeContainer);
            IntPtr FactoryNodeKey_NativePtr = IntPtr.Add(ParamsBuffer,ScriptedExecutePostImportPipeline_FactoryNodeKey_Offset);
            StringMarshaller.ToNative(FactoryNodeKey_NativePtr,0,null,factoryNodeKey);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ScriptedExecutePostImportPipeline_CreatedAsset_Offset), 0, null, createdAsset);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ScriptedExecutePostImportPipeline_bIsAReimport_Offset), 0, null, bIsAReimport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ScriptedExecutePostImportPipeline_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(FactoryNodeKey_NativePtr, 0);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ScriptedExecutePostImportPipeline_Implementation(UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer baseNodeContainer, string factoryNodeKey, UnrealSharp.CoreUObject.Object createdAsset, bool bIsAReimport)
    {
    }
    void Invoke_ScriptedExecutePostImportPipeline(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer baseNodeContainer = ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer>.FromNative(IntPtr.Add(buffer, ScriptedExecutePostImportPipeline_BaseNodeContainer_Offset), 0, null);
            IntPtr FactoryNodeKey_NativePtr = IntPtr.Add(buffer,ScriptedExecutePostImportPipeline_FactoryNodeKey_Offset);
            string factoryNodeKey = StringMarshaller.FromNative(FactoryNodeKey_NativePtr,0,null);
            UnrealSharp.CoreUObject.Object createdAsset = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(buffer, ScriptedExecutePostImportPipeline_CreatedAsset_Offset), 0, null);
            bool bIsAReimport = BoolMarshaller.FromNative(IntPtr.Add(buffer, ScriptedExecutePostImportPipeline_bIsAReimport_Offset), 0, null);
            ScriptedExecutePostImportPipeline_Implementation(baseNodeContainer, factoryNodeKey, createdAsset, bIsAReimport);
        }
    }
    
    // Function /Script/InterchangeCore.InterchangePipelineBase:ScriptedExecutePostFactoryPipeline
    IntPtr ScriptedExecutePostFactoryPipeline_NativeFunction;
    static readonly int ScriptedExecutePostFactoryPipeline_ParamsSize;
    static readonly int ScriptedExecutePostFactoryPipeline_BaseNodeContainer_Offset;
    static readonly int ScriptedExecutePostFactoryPipeline_FactoryNodeKey_Offset;
    static readonly int ScriptedExecutePostFactoryPipeline_CreatedAsset_Offset;
    static readonly int ScriptedExecutePostFactoryPipeline_bIsAReimport_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ScriptedExecutePostFactoryPipeline(UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer baseNodeContainer, string factoryNodeKey, UnrealSharp.CoreUObject.Object createdAsset, bool bIsAReimport)
    {
        unsafe
        {
            if (ScriptedExecutePostFactoryPipeline_NativeFunction == IntPtr.Zero)
            {
                ScriptedExecutePostFactoryPipeline_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ScriptedExecutePostFactoryPipeline");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ScriptedExecutePostFactoryPipeline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer>.ToNative(IntPtr.Add(ParamsBuffer, ScriptedExecutePostFactoryPipeline_BaseNodeContainer_Offset), 0, null, baseNodeContainer);
            IntPtr FactoryNodeKey_NativePtr = IntPtr.Add(ParamsBuffer,ScriptedExecutePostFactoryPipeline_FactoryNodeKey_Offset);
            StringMarshaller.ToNative(FactoryNodeKey_NativePtr,0,null,factoryNodeKey);
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ScriptedExecutePostFactoryPipeline_CreatedAsset_Offset), 0, null, createdAsset);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ScriptedExecutePostFactoryPipeline_bIsAReimport_Offset), 0, null, bIsAReimport);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ScriptedExecutePostFactoryPipeline_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(FactoryNodeKey_NativePtr, 0);
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ScriptedExecutePostFactoryPipeline_Implementation(UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer baseNodeContainer, string factoryNodeKey, UnrealSharp.CoreUObject.Object createdAsset, bool bIsAReimport)
    {
    }
    void Invoke_ScriptedExecutePostFactoryPipeline(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer baseNodeContainer = ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer>.FromNative(IntPtr.Add(buffer, ScriptedExecutePostFactoryPipeline_BaseNodeContainer_Offset), 0, null);
            IntPtr FactoryNodeKey_NativePtr = IntPtr.Add(buffer,ScriptedExecutePostFactoryPipeline_FactoryNodeKey_Offset);
            string factoryNodeKey = StringMarshaller.FromNative(FactoryNodeKey_NativePtr,0,null);
            UnrealSharp.CoreUObject.Object createdAsset = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(buffer, ScriptedExecutePostFactoryPipeline_CreatedAsset_Offset), 0, null);
            bool bIsAReimport = BoolMarshaller.FromNative(IntPtr.Add(buffer, ScriptedExecutePostFactoryPipeline_bIsAReimport_Offset), 0, null);
            ScriptedExecutePostFactoryPipeline_Implementation(baseNodeContainer, factoryNodeKey, createdAsset, bIsAReimport);
        }
    }
    
    // Function /Script/InterchangeCore.InterchangePipelineBase:ScriptedExecutePipeline
    IntPtr ScriptedExecutePipeline_NativeFunction;
    static readonly int ScriptedExecutePipeline_ParamsSize;
    static readonly int ScriptedExecutePipeline_BaseNodeContainer_Offset;
    static readonly int ScriptedExecutePipeline_SourceDatas_Offset;
    static readonly int ScriptedExecutePipeline_SourceDatas_ElementSize;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ScriptedExecutePipeline(UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer baseNodeContainer, System.Collections.Generic.IList<UnrealSharp.InterchangeCore.InterchangeSourceData> sourceDatas)
    {
        unsafe
        {
            if (ScriptedExecutePipeline_NativeFunction == IntPtr.Zero)
            {
                ScriptedExecutePipeline_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ScriptedExecutePipeline");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ScriptedExecutePipeline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer>.ToNative(IntPtr.Add(ParamsBuffer, ScriptedExecutePipeline_BaseNodeContainer_Offset), 0, null, baseNodeContainer);
            IntPtr SourceDatas_NativeBuffer = IntPtr.Add(ParamsBuffer, ScriptedExecutePipeline_SourceDatas_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.InterchangeCore.InterchangeSourceData> SourceDatas_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.InterchangeCore.InterchangeSourceData>(1, ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeSourceData>.ToNative, ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeSourceData>.FromNative, ScriptedExecutePipeline_SourceDatas_ElementSize);
            SourceDatas_Marshaler.ToNative(SourceDatas_NativeBuffer, 0, null, sourceDatas);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ScriptedExecutePipeline_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ScriptedExecutePipeline_Implementation(UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer baseNodeContainer, System.Collections.Generic.IList<UnrealSharp.InterchangeCore.InterchangeSourceData> sourceDatas)
    {
    }
    void Invoke_ScriptedExecutePipeline(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer baseNodeContainer = ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer>.FromNative(IntPtr.Add(buffer, ScriptedExecutePipeline_BaseNodeContainer_Offset), 0, null);
            IntPtr SourceDatas_NativeBuffer = IntPtr.Add(buffer, ScriptedExecutePipeline_SourceDatas_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.InterchangeCore.InterchangeSourceData> SourceDatas_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.InterchangeCore.InterchangeSourceData> (1, ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeSourceData>.ToNative, ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeSourceData>.FromNative, ScriptedExecutePipeline_SourceDatas_ElementSize);
            System.Collections.Generic.IList<UnrealSharp.InterchangeCore.InterchangeSourceData> sourceDatas = SourceDatas_Marshaler.FromNative(SourceDatas_NativeBuffer, 0, null);
            ScriptedExecutePipeline_Implementation(baseNodeContainer, sourceDatas);
        }
    }
    
    // Function /Script/InterchangeCore.InterchangePipelineBase:ScriptedExecuteExportPipeline
    IntPtr ScriptedExecuteExportPipeline_NativeFunction;
    static readonly int ScriptedExecuteExportPipeline_ParamsSize;
    static readonly int ScriptedExecuteExportPipeline_BaseNodeContainer_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void ScriptedExecuteExportPipeline(UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer baseNodeContainer)
    {
        unsafe
        {
            if (ScriptedExecuteExportPipeline_NativeFunction == IntPtr.Zero)
            {
                ScriptedExecuteExportPipeline_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ScriptedExecuteExportPipeline");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ScriptedExecuteExportPipeline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer>.ToNative(IntPtr.Add(ParamsBuffer, ScriptedExecuteExportPipeline_BaseNodeContainer_Offset), 0, null, baseNodeContainer);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ScriptedExecuteExportPipeline_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void ScriptedExecuteExportPipeline_Implementation(UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer baseNodeContainer)
    {
    }
    void Invoke_ScriptedExecuteExportPipeline(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer baseNodeContainer = ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer>.FromNative(IntPtr.Add(buffer, ScriptedExecuteExportPipeline_BaseNodeContainer_Offset), 0, null);
            ScriptedExecuteExportPipeline_Implementation(baseNodeContainer);
        }
    }
    
    // Function /Script/InterchangeCore.InterchangePipelineBase:ScriptedCanExecuteOnAnyThread
    IntPtr ScriptedCanExecuteOnAnyThread_NativeFunction;
    static readonly int ScriptedCanExecuteOnAnyThread_ParamsSize;
    static readonly int ScriptedCanExecuteOnAnyThread_PipelineTask_Offset;
    static readonly int ScriptedCanExecuteOnAnyThread_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual bool ScriptedCanExecuteOnAnyThread(UnrealSharp.InterchangeCore.EInterchangePipelineTask pipelineTask)
    {
        unsafe
        {
            if (ScriptedCanExecuteOnAnyThread_NativeFunction == IntPtr.Zero)
            {
                ScriptedCanExecuteOnAnyThread_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "ScriptedCanExecuteOnAnyThread");
            }
            byte* ParamsBufferAllocation = stackalloc byte[ScriptedCanExecuteOnAnyThread_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.InterchangeCore.EInterchangePipelineTask>.ToNative(IntPtr.Add(ParamsBuffer, ScriptedCanExecuteOnAnyThread_PipelineTask_Offset), 0, null, pipelineTask);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ScriptedCanExecuteOnAnyThread_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ScriptedCanExecuteOnAnyThread_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual bool ScriptedCanExecuteOnAnyThread_Implementation(UnrealSharp.InterchangeCore.EInterchangePipelineTask pipelineTask)
    {
        return default(bool);
    }
    void Invoke_ScriptedCanExecuteOnAnyThread(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.InterchangeCore.EInterchangePipelineTask pipelineTask = BlittableMarshaller<UnrealSharp.InterchangeCore.EInterchangePipelineTask>.FromNative(IntPtr.Add(buffer, ScriptedCanExecuteOnAnyThread_PipelineTask_Offset), 0, null);
            bool returnValue = ScriptedCanExecuteOnAnyThread_Implementation(pipelineTask);
            BoolMarshaller.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    
}
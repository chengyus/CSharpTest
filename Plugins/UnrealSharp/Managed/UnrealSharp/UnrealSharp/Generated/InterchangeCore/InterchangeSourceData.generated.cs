// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.InterchangeCore;

[UClass]
public partial class InterchangeSourceData : UnrealSharp.CoreUObject.Object
{
    
    static InterchangeSourceData()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InterchangeSourceData");
        
        
        SetFilename_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFilename");
        SetFilename_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFilename_NativeFunction);
        SetFilename_InFilename_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFilename_NativeFunction, "InFilename");
        SetFilename_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFilename_NativeFunction, "ReturnValue");
        GetFilename_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFilename");
        GetFilename_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFilename_NativeFunction);
        GetFilename_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFilename_NativeFunction, "ReturnValue");
        
        
    }
    
    protected InterchangeSourceData(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/InterchangeCore.InterchangeSourceData:SetFilename
    static readonly IntPtr SetFilename_NativeFunction;
    static readonly int SetFilename_ParamsSize;
    static readonly int SetFilename_InFilename_Offset;
    static readonly int SetFilename_ReturnValue_Offset;
    
    public bool SetFilename(string inFilename)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFilename_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InFilename_NativePtr = IntPtr.Add(ParamsBuffer,SetFilename_InFilename_Offset);
            StringMarshaller.ToNative(InFilename_NativePtr,0,null,inFilename);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFilename_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetFilename_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InFilename_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeCore.InterchangeSourceData:GetFilename
    static readonly IntPtr GetFilename_NativeFunction;
    static readonly int GetFilename_ParamsSize;
    static readonly int GetFilename_ReturnValue_Offset;
    
    public string GetFilename()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFilename_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFilename_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetFilename_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    
}
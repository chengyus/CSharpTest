// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.InterchangeEngine;

[UClass]
public partial class InterchangeManager : UnrealSharp.CoreUObject.Object
{
    
    static readonly IntPtr NativeClassPtr;
    static InterchangeManager()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InterchangeManager");
        
        
        ImportScene_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ImportScene");
        ImportScene_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ImportScene_NativeFunction);
        ImportScene_ContentPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportScene_NativeFunction, "ContentPath");
        ImportScene_SourceData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportScene_NativeFunction, "SourceData");
        ImportScene_ImportAssetParameters_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportScene_NativeFunction, "ImportAssetParameters");
        ImportScene_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportScene_NativeFunction, "ReturnValue");
        ImportAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ImportAsset");
        ImportAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ImportAsset_NativeFunction);
        ImportAsset_ContentPath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportAsset_NativeFunction, "ContentPath");
        ImportAsset_SourceData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportAsset_NativeFunction, "SourceData");
        ImportAsset_ImportAssetParameters_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportAsset_NativeFunction, "ImportAssetParameters");
        ImportAsset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ImportAsset_NativeFunction, "ReturnValue");
        GetRegisteredFactoryClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRegisteredFactoryClass");
        GetRegisteredFactoryClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRegisteredFactoryClass_NativeFunction);
        GetRegisteredFactoryClass_ClassToMake_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRegisteredFactoryClass_NativeFunction, "ClassToMake");
        GetRegisteredFactoryClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRegisteredFactoryClass_NativeFunction, "ReturnValue");
        GetInterchangeManagerScripted_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInterchangeManagerScripted");
        GetInterchangeManagerScripted_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInterchangeManagerScripted_NativeFunction);
        GetInterchangeManagerScripted_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInterchangeManagerScripted_NativeFunction, "ReturnValue");
        ExportScene_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ExportScene");
        ExportScene_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ExportScene_NativeFunction);
        ExportScene_World_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportScene_NativeFunction, "World");
        ExportScene_bIsAutomated_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportScene_NativeFunction, "bIsAutomated");
        ExportScene_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportScene_NativeFunction, "ReturnValue");
        ExportAsset_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ExportAsset");
        ExportAsset_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ExportAsset_NativeFunction);
        ExportAsset_Asset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportAsset_NativeFunction, "Asset");
        ExportAsset_bIsAutomated_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportAsset_NativeFunction, "bIsAutomated");
        ExportAsset_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ExportAsset_NativeFunction, "ReturnValue");
        CreateSourceData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateSourceData");
        CreateSourceData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateSourceData_NativeFunction);
        CreateSourceData_InFileName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateSourceData_NativeFunction, "InFileName");
        CreateSourceData_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateSourceData_NativeFunction, "ReturnValue");
        
        
    }
    
    protected InterchangeManager(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/InterchangeEngine.InterchangeManager:ImportScene
    static readonly IntPtr ImportScene_NativeFunction;
    static readonly int ImportScene_ParamsSize;
    static readonly int ImportScene_ContentPath_Offset;
    static readonly int ImportScene_SourceData_Offset;
    static readonly int ImportScene_ImportAssetParameters_Offset;
    static readonly int ImportScene_ReturnValue_Offset;
    
    public bool ImportScene(string contentPath, UnrealSharp.InterchangeCore.InterchangeSourceData sourceData, UnrealSharp.InterchangeEngine.ImportAssetParameters importAssetParameters)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ImportScene_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ContentPath_NativePtr = IntPtr.Add(ParamsBuffer,ImportScene_ContentPath_Offset);
            StringMarshaller.ToNative(ContentPath_NativePtr,0,null,contentPath);
            ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeSourceData>.ToNative(IntPtr.Add(ParamsBuffer, ImportScene_SourceData_Offset), 0, null, sourceData);
            UnrealSharp.InterchangeEngine.ImportAssetParametersMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ImportScene_ImportAssetParameters_Offset), 0, null, importAssetParameters);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ImportScene_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ImportScene_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ContentPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeEngine.InterchangeManager:ImportAsset
    static readonly IntPtr ImportAsset_NativeFunction;
    static readonly int ImportAsset_ParamsSize;
    static readonly int ImportAsset_ContentPath_Offset;
    static readonly int ImportAsset_SourceData_Offset;
    static readonly int ImportAsset_ImportAssetParameters_Offset;
    static readonly int ImportAsset_ReturnValue_Offset;
    
    public bool ImportAsset(string contentPath, UnrealSharp.InterchangeCore.InterchangeSourceData sourceData, UnrealSharp.InterchangeEngine.ImportAssetParameters importAssetParameters)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ImportAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ContentPath_NativePtr = IntPtr.Add(ParamsBuffer,ImportAsset_ContentPath_Offset);
            StringMarshaller.ToNative(ContentPath_NativePtr,0,null,contentPath);
            ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeSourceData>.ToNative(IntPtr.Add(ParamsBuffer, ImportAsset_SourceData_Offset), 0, null, sourceData);
            UnrealSharp.InterchangeEngine.ImportAssetParametersMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ImportAsset_ImportAssetParameters_Offset), 0, null, importAssetParameters);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ImportAsset_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ImportAsset_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ContentPath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeEngine.InterchangeManager:GetRegisteredFactoryClass
    static readonly IntPtr GetRegisteredFactoryClass_NativeFunction;
    static readonly int GetRegisteredFactoryClass_ParamsSize;
    static readonly int GetRegisteredFactoryClass_ClassToMake_Offset;
    static readonly int GetRegisteredFactoryClass_ReturnValue_Offset;
    
    public SubclassOf<UnrealSharp.CoreUObject.Object> GetRegisteredFactoryClass(SubclassOf<UnrealSharp.CoreUObject.Object> classToMake)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRegisteredFactoryClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetRegisteredFactoryClass_ClassToMake_Offset), 0, null, classToMake);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRegisteredFactoryClass_NativeFunction, ParamsBuffer);
            
            SubclassOf<UnrealSharp.CoreUObject.Object> returnValue;
            returnValue = SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetRegisteredFactoryClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeEngine.InterchangeManager:GetInterchangeManagerScripted
    static readonly IntPtr GetInterchangeManagerScripted_NativeFunction;
    static readonly int GetInterchangeManagerScripted_ParamsSize;
    static readonly int GetInterchangeManagerScripted_ReturnValue_Offset;
    
    public static UnrealSharp.InterchangeEngine.InterchangeManager GetInterchangeManagerScripted()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInterchangeManagerScripted_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetInterchangeManagerScripted_NativeFunction, ParamsBuffer);
            
            UnrealSharp.InterchangeEngine.InterchangeManager returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.InterchangeEngine.InterchangeManager>.FromNative(IntPtr.Add(ParamsBuffer, GetInterchangeManagerScripted_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeEngine.InterchangeManager:ExportScene
    static readonly IntPtr ExportScene_NativeFunction;
    static readonly int ExportScene_ParamsSize;
    static readonly int ExportScene_World_Offset;
    static readonly int ExportScene_bIsAutomated_Offset;
    static readonly int ExportScene_ReturnValue_Offset;
    
    public bool ExportScene(UnrealSharp.CoreUObject.Object world, bool bIsAutomated = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ExportScene_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ExportScene_World_Offset), 0, null, world);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ExportScene_bIsAutomated_Offset), 0, null, bIsAutomated);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ExportScene_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ExportScene_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeEngine.InterchangeManager:ExportAsset
    static readonly IntPtr ExportAsset_NativeFunction;
    static readonly int ExportAsset_ParamsSize;
    static readonly int ExportAsset_Asset_Offset;
    static readonly int ExportAsset_bIsAutomated_Offset;
    static readonly int ExportAsset_ReturnValue_Offset;
    
    public bool ExportAsset(UnrealSharp.CoreUObject.Object asset, bool bIsAutomated = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ExportAsset_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, ExportAsset_Asset_Offset), 0, null, asset);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, ExportAsset_bIsAutomated_Offset), 0, null, bIsAutomated);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ExportAsset_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ExportAsset_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeEngine.InterchangeManager:CreateSourceData
    static readonly IntPtr CreateSourceData_NativeFunction;
    static readonly int CreateSourceData_ParamsSize;
    static readonly int CreateSourceData_InFileName_Offset;
    static readonly int CreateSourceData_ReturnValue_Offset;
    
    public static UnrealSharp.InterchangeCore.InterchangeSourceData CreateSourceData(string inFileName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateSourceData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InFileName_NativePtr = IntPtr.Add(ParamsBuffer,CreateSourceData_InFileName_Offset);
            StringMarshaller.ToNative(InFileName_NativePtr,0,null,inFileName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateSourceData_NativeFunction, ParamsBuffer);
            
            UnrealSharp.InterchangeCore.InterchangeSourceData returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeSourceData>.FromNative(IntPtr.Add(ParamsBuffer, CreateSourceData_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InFileName_NativePtr, 0);
            return returnValue;
        }
    }
    
    
}
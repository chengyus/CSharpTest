// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.InterchangeEngine;

[UClass]
public partial class InterchangePipelineStackOverride : UnrealSharp.CoreUObject.Object
{
    
    static InterchangePipelineStackOverride()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InterchangePipelineStackOverride");
        
        OverridePipelines_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OverridePipelines");
        OverridePipelines_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "OverridePipelines");
        
        AddPythonPipeline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddPythonPipeline");
        AddPythonPipeline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddPythonPipeline_NativeFunction);
        AddPythonPipeline_PipelineBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddPythonPipeline_NativeFunction, "PipelineBase");
        AddPipeline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddPipeline");
        AddPipeline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddPipeline_NativeFunction);
        AddPipeline_PipelineBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddPipeline_NativeFunction, "PipelineBase");
        AddBlueprintPipeline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddBlueprintPipeline");
        AddBlueprintPipeline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddBlueprintPipeline_NativeFunction);
        AddBlueprintPipeline_PipelineBase_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddBlueprintPipeline_NativeFunction, "PipelineBase");
        
        
    }
    
    protected InterchangePipelineStackOverride(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ArrayProperty /Script/InterchangeEngine.InterchangePipelineStackOverride:OverridePipelines
    static readonly int OverridePipelines_Offset;
    static readonly IntPtr OverridePipelines_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.CoreUObject.SoftObjectPath> OverridePipelines_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.CoreUObject.SoftObjectPath> OverridePipelines
    {
        get
        {
            if(OverridePipelines_Wrapper == null)
            {
                OverridePipelines_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.CoreUObject.SoftObjectPath>(1, OverridePipelines_NativeProperty, UnrealSharp.CoreUObject.SoftObjectPathMarshaler.ToNative, UnrealSharp.CoreUObject.SoftObjectPathMarshaler.FromNative);
            }
            
            return OverridePipelines_Wrapper.FromNative(IntPtr.Add(NativeObject,OverridePipelines_Offset),0,this);
        }
    }
    
    // Function /Script/InterchangeEngine.InterchangePipelineStackOverride:AddPythonPipeline
    static readonly IntPtr AddPythonPipeline_NativeFunction;
    static readonly int AddPythonPipeline_ParamsSize;
    static readonly int AddPythonPipeline_PipelineBase_Offset;
    
    public void AddPythonPipeline(UnrealSharp.InterchangeEngine.InterchangePythonPipelineBase pipelineBase)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddPythonPipeline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.InterchangeEngine.InterchangePythonPipelineBase>.ToNative(IntPtr.Add(ParamsBuffer, AddPythonPipeline_PipelineBase_Offset), 0, null, pipelineBase);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddPythonPipeline_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/InterchangeEngine.InterchangePipelineStackOverride:AddPipeline
    static readonly IntPtr AddPipeline_NativeFunction;
    static readonly int AddPipeline_ParamsSize;
    static readonly int AddPipeline_PipelineBase_Offset;
    
    public void AddPipeline(UnrealSharp.InterchangeCore.InterchangePipelineBase pipelineBase)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddPipeline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangePipelineBase>.ToNative(IntPtr.Add(ParamsBuffer, AddPipeline_PipelineBase_Offset), 0, null, pipelineBase);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddPipeline_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/InterchangeEngine.InterchangePipelineStackOverride:AddBlueprintPipeline
    static readonly IntPtr AddBlueprintPipeline_NativeFunction;
    static readonly int AddBlueprintPipeline_ParamsSize;
    static readonly int AddBlueprintPipeline_PipelineBase_Offset;
    
    public void AddBlueprintPipeline(UnrealSharp.InterchangeEngine.InterchangeBlueprintPipelineBase pipelineBase)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddBlueprintPipeline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.InterchangeEngine.InterchangeBlueprintPipelineBase>.ToNative(IntPtr.Add(ParamsBuffer, AddBlueprintPipeline_PipelineBase_Offset), 0, null, pipelineBase);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddBlueprintPipeline_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
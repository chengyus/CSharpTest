// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.InterchangeFactoryNodes;

[UClass]
public partial class InterchangeMaterialFactoryNode : UnrealSharp.InterchangeFactoryNodes.InterchangeBaseMaterialFactoryNode
{
    
    static InterchangeMaterialFactoryNode()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InterchangeMaterialFactoryNode");
        
        
        SetCustomTwoSided_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomTwoSided");
        SetCustomTwoSided_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomTwoSided_NativeFunction);
        SetCustomTwoSided_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomTwoSided_NativeFunction, "AttributeValue");
        SetCustomTwoSided_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomTwoSided_NativeFunction, "bAddApplyDelegate");
        SetCustomTwoSided_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomTwoSided_NativeFunction, "ReturnValue");
        SetCustomTranslucencyLightingMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomTranslucencyLightingMode");
        SetCustomTranslucencyLightingMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomTranslucencyLightingMode_NativeFunction);
        SetCustomTranslucencyLightingMode_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomTranslucencyLightingMode_NativeFunction, "AttributeValue");
        SetCustomTranslucencyLightingMode_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomTranslucencyLightingMode_NativeFunction, "bAddApplyDelegate");
        SetCustomTranslucencyLightingMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomTranslucencyLightingMode_NativeFunction, "ReturnValue");
        SetCustomShadingModel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomShadingModel");
        SetCustomShadingModel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomShadingModel_NativeFunction);
        SetCustomShadingModel_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomShadingModel_NativeFunction, "AttributeValue");
        SetCustomShadingModel_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomShadingModel_NativeFunction, "bAddApplyDelegate");
        SetCustomShadingModel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomShadingModel_NativeFunction, "ReturnValue");
        SetCustomScreenSpaceReflections_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomScreenSpaceReflections");
        SetCustomScreenSpaceReflections_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomScreenSpaceReflections_NativeFunction);
        SetCustomScreenSpaceReflections_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomScreenSpaceReflections_NativeFunction, "AttributeValue");
        SetCustomScreenSpaceReflections_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomScreenSpaceReflections_NativeFunction, "ReturnValue");
        SetCustomRefractionMethod_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomRefractionMethod");
        SetCustomRefractionMethod_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomRefractionMethod_NativeFunction);
        SetCustomRefractionMethod_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomRefractionMethod_NativeFunction, "AttributeValue");
        SetCustomRefractionMethod_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomRefractionMethod_NativeFunction, "bAddApplyDelegate");
        SetCustomRefractionMethod_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomRefractionMethod_NativeFunction, "ReturnValue");
        SetCustomOpacityMaskClipValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomOpacityMaskClipValue");
        SetCustomOpacityMaskClipValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomOpacityMaskClipValue_NativeFunction);
        SetCustomOpacityMaskClipValue_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomOpacityMaskClipValue_NativeFunction, "AttributeValue");
        SetCustomOpacityMaskClipValue_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomOpacityMaskClipValue_NativeFunction, "bAddApplyDelegate");
        SetCustomOpacityMaskClipValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomOpacityMaskClipValue_NativeFunction, "ReturnValue");
        SetCustomBlendMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomBlendMode");
        SetCustomBlendMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomBlendMode_NativeFunction);
        SetCustomBlendMode_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomBlendMode_NativeFunction, "AttributeValue");
        SetCustomBlendMode_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomBlendMode_NativeFunction, "bAddApplyDelegate");
        SetCustomBlendMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomBlendMode_NativeFunction, "ReturnValue");
        GetTransmissionColorConnection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTransmissionColorConnection");
        GetTransmissionColorConnection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTransmissionColorConnection_NativeFunction);
        GetTransmissionColorConnection_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransmissionColorConnection_NativeFunction, "ExpressionNodeUid");
        GetTransmissionColorConnection_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransmissionColorConnection_NativeFunction, "OutputName");
        GetTransmissionColorConnection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTransmissionColorConnection_NativeFunction, "ReturnValue");
        GetTangentConnection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTangentConnection");
        GetTangentConnection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTangentConnection_NativeFunction);
        GetTangentConnection_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTangentConnection_NativeFunction, "ExpressionNodeUid");
        GetTangentConnection_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTangentConnection_NativeFunction, "OutputName");
        GetTangentConnection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTangentConnection_NativeFunction, "ReturnValue");
        GetSubsurfaceConnection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSubsurfaceConnection");
        GetSubsurfaceConnection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSubsurfaceConnection_NativeFunction);
        GetSubsurfaceConnection_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSubsurfaceConnection_NativeFunction, "ExpressionNodeUid");
        GetSubsurfaceConnection_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSubsurfaceConnection_NativeFunction, "OutputName");
        GetSubsurfaceConnection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSubsurfaceConnection_NativeFunction, "ReturnValue");
        GetSpecularConnection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSpecularConnection");
        GetSpecularConnection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSpecularConnection_NativeFunction);
        GetSpecularConnection_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSpecularConnection_NativeFunction, "ExpressionNodeUid");
        GetSpecularConnection_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSpecularConnection_NativeFunction, "OutputName");
        GetSpecularConnection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSpecularConnection_NativeFunction, "ReturnValue");
        GetRoughnessConnection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRoughnessConnection");
        GetRoughnessConnection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRoughnessConnection_NativeFunction);
        GetRoughnessConnection_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRoughnessConnection_NativeFunction, "ExpressionNodeUid");
        GetRoughnessConnection_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRoughnessConnection_NativeFunction, "OutputName");
        GetRoughnessConnection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRoughnessConnection_NativeFunction, "ReturnValue");
        GetRefractionConnection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRefractionConnection");
        GetRefractionConnection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRefractionConnection_NativeFunction);
        GetRefractionConnection_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRefractionConnection_NativeFunction, "ExpressionNodeUid");
        GetRefractionConnection_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRefractionConnection_NativeFunction, "OutputName");
        GetRefractionConnection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRefractionConnection_NativeFunction, "ReturnValue");
        GetOpacityConnection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOpacityConnection");
        GetOpacityConnection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOpacityConnection_NativeFunction);
        GetOpacityConnection_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOpacityConnection_NativeFunction, "ExpressionNodeUid");
        GetOpacityConnection_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOpacityConnection_NativeFunction, "OutputName");
        GetOpacityConnection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOpacityConnection_NativeFunction, "ReturnValue");
        GetOcclusionConnection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetOcclusionConnection");
        GetOcclusionConnection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetOcclusionConnection_NativeFunction);
        GetOcclusionConnection_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOcclusionConnection_NativeFunction, "ExpressionNodeUid");
        GetOcclusionConnection_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOcclusionConnection_NativeFunction, "OutputName");
        GetOcclusionConnection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetOcclusionConnection_NativeFunction, "ReturnValue");
        GetObjectClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetObjectClass");
        GetObjectClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetObjectClass_NativeFunction);
        GetObjectClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetObjectClass_NativeFunction, "ReturnValue");
        GetNormalConnection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNormalConnection");
        GetNormalConnection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNormalConnection_NativeFunction);
        GetNormalConnection_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNormalConnection_NativeFunction, "ExpressionNodeUid");
        GetNormalConnection_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNormalConnection_NativeFunction, "OutputName");
        GetNormalConnection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNormalConnection_NativeFunction, "ReturnValue");
        GetMetallicConnection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMetallicConnection");
        GetMetallicConnection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMetallicConnection_NativeFunction);
        GetMetallicConnection_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMetallicConnection_NativeFunction, "ExpressionNodeUid");
        GetMetallicConnection_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMetallicConnection_NativeFunction, "OutputName");
        GetMetallicConnection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMetallicConnection_NativeFunction, "ReturnValue");
        GetFuzzColorConnection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFuzzColorConnection");
        GetFuzzColorConnection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFuzzColorConnection_NativeFunction);
        GetFuzzColorConnection_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFuzzColorConnection_NativeFunction, "ExpressionNodeUid");
        GetFuzzColorConnection_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFuzzColorConnection_NativeFunction, "OutputName");
        GetFuzzColorConnection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFuzzColorConnection_NativeFunction, "ReturnValue");
        GetEmissiveColorConnection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEmissiveColorConnection");
        GetEmissiveColorConnection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEmissiveColorConnection_NativeFunction);
        GetEmissiveColorConnection_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEmissiveColorConnection_NativeFunction, "ExpressionNodeUid");
        GetEmissiveColorConnection_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEmissiveColorConnection_NativeFunction, "OutputName");
        GetEmissiveColorConnection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEmissiveColorConnection_NativeFunction, "ReturnValue");
        GetCustomTwoSided_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomTwoSided");
        GetCustomTwoSided_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomTwoSided_NativeFunction);
        GetCustomTwoSided_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomTwoSided_NativeFunction, "AttributeValue");
        GetCustomTwoSided_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomTwoSided_NativeFunction, "ReturnValue");
        GetCustomTranslucencyLightingMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomTranslucencyLightingMode");
        GetCustomTranslucencyLightingMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomTranslucencyLightingMode_NativeFunction);
        GetCustomTranslucencyLightingMode_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomTranslucencyLightingMode_NativeFunction, "AttributeValue");
        GetCustomTranslucencyLightingMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomTranslucencyLightingMode_NativeFunction, "ReturnValue");
        GetCustomShadingModel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomShadingModel");
        GetCustomShadingModel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomShadingModel_NativeFunction);
        GetCustomShadingModel_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomShadingModel_NativeFunction, "AttributeValue");
        GetCustomShadingModel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomShadingModel_NativeFunction, "ReturnValue");
        GetCustomScreenSpaceReflections_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomScreenSpaceReflections");
        GetCustomScreenSpaceReflections_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomScreenSpaceReflections_NativeFunction);
        GetCustomScreenSpaceReflections_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomScreenSpaceReflections_NativeFunction, "AttributeValue");
        GetCustomScreenSpaceReflections_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomScreenSpaceReflections_NativeFunction, "ReturnValue");
        GetCustomRefractionMethod_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomRefractionMethod");
        GetCustomRefractionMethod_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomRefractionMethod_NativeFunction);
        GetCustomRefractionMethod_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomRefractionMethod_NativeFunction, "AttributeValue");
        GetCustomRefractionMethod_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomRefractionMethod_NativeFunction, "ReturnValue");
        GetCustomOpacityMaskClipValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomOpacityMaskClipValue");
        GetCustomOpacityMaskClipValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomOpacityMaskClipValue_NativeFunction);
        GetCustomOpacityMaskClipValue_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomOpacityMaskClipValue_NativeFunction, "AttributeValue");
        GetCustomOpacityMaskClipValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomOpacityMaskClipValue_NativeFunction, "ReturnValue");
        GetCustomBlendMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomBlendMode");
        GetCustomBlendMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomBlendMode_NativeFunction);
        GetCustomBlendMode_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomBlendMode_NativeFunction, "AttributeValue");
        GetCustomBlendMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomBlendMode_NativeFunction, "ReturnValue");
        GetClothConnection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetClothConnection");
        GetClothConnection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetClothConnection_NativeFunction);
        GetClothConnection_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClothConnection_NativeFunction, "ExpressionNodeUid");
        GetClothConnection_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClothConnection_NativeFunction, "OutputName");
        GetClothConnection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClothConnection_NativeFunction, "ReturnValue");
        GetClearCoatRoughnessConnection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetClearCoatRoughnessConnection");
        GetClearCoatRoughnessConnection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetClearCoatRoughnessConnection_NativeFunction);
        GetClearCoatRoughnessConnection_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClearCoatRoughnessConnection_NativeFunction, "ExpressionNodeUid");
        GetClearCoatRoughnessConnection_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClearCoatRoughnessConnection_NativeFunction, "OutputName");
        GetClearCoatRoughnessConnection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClearCoatRoughnessConnection_NativeFunction, "ReturnValue");
        GetClearCoatNormalConnection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetClearCoatNormalConnection");
        GetClearCoatNormalConnection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetClearCoatNormalConnection_NativeFunction);
        GetClearCoatNormalConnection_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClearCoatNormalConnection_NativeFunction, "ExpressionNodeUid");
        GetClearCoatNormalConnection_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClearCoatNormalConnection_NativeFunction, "OutputName");
        GetClearCoatNormalConnection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClearCoatNormalConnection_NativeFunction, "ReturnValue");
        GetClearCoatConnection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetClearCoatConnection");
        GetClearCoatConnection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetClearCoatConnection_NativeFunction);
        GetClearCoatConnection_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClearCoatConnection_NativeFunction, "ExpressionNodeUid");
        GetClearCoatConnection_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClearCoatConnection_NativeFunction, "OutputName");
        GetClearCoatConnection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetClearCoatConnection_NativeFunction, "ReturnValue");
        GetBaseColorConnection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBaseColorConnection");
        GetBaseColorConnection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBaseColorConnection_NativeFunction);
        GetBaseColorConnection_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBaseColorConnection_NativeFunction, "ExpressionNodeUid");
        GetBaseColorConnection_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBaseColorConnection_NativeFunction, "OutputName");
        GetBaseColorConnection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBaseColorConnection_NativeFunction, "ReturnValue");
        GetAnisotropyConnection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAnisotropyConnection");
        GetAnisotropyConnection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAnisotropyConnection_NativeFunction);
        GetAnisotropyConnection_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnisotropyConnection_NativeFunction, "ExpressionNodeUid");
        GetAnisotropyConnection_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnisotropyConnection_NativeFunction, "OutputName");
        GetAnisotropyConnection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAnisotropyConnection_NativeFunction, "ReturnValue");
        ConnectToTransmissionColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectToTransmissionColor");
        ConnectToTransmissionColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectToTransmissionColor_NativeFunction);
        ConnectToTransmissionColor_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToTransmissionColor_NativeFunction, "AttributeValue");
        ConnectToTransmissionColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToTransmissionColor_NativeFunction, "ReturnValue");
        ConnectToTangent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectToTangent");
        ConnectToTangent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectToTangent_NativeFunction);
        ConnectToTangent_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToTangent_NativeFunction, "ExpressionNodeUid");
        ConnectToTangent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToTangent_NativeFunction, "ReturnValue");
        ConnectToSubsurface_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectToSubsurface");
        ConnectToSubsurface_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectToSubsurface_NativeFunction);
        ConnectToSubsurface_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToSubsurface_NativeFunction, "ExpressionNodeUid");
        ConnectToSubsurface_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToSubsurface_NativeFunction, "ReturnValue");
        ConnectToSpecular_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectToSpecular");
        ConnectToSpecular_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectToSpecular_NativeFunction);
        ConnectToSpecular_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToSpecular_NativeFunction, "ExpressionNodeUid");
        ConnectToSpecular_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToSpecular_NativeFunction, "ReturnValue");
        ConnectToRoughness_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectToRoughness");
        ConnectToRoughness_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectToRoughness_NativeFunction);
        ConnectToRoughness_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToRoughness_NativeFunction, "ExpressionNodeUid");
        ConnectToRoughness_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToRoughness_NativeFunction, "ReturnValue");
        ConnectToRefraction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectToRefraction");
        ConnectToRefraction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectToRefraction_NativeFunction);
        ConnectToRefraction_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToRefraction_NativeFunction, "AttributeValue");
        ConnectToRefraction_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToRefraction_NativeFunction, "ReturnValue");
        ConnectToOpacity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectToOpacity");
        ConnectToOpacity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectToOpacity_NativeFunction);
        ConnectToOpacity_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToOpacity_NativeFunction, "AttributeValue");
        ConnectToOpacity_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToOpacity_NativeFunction, "ReturnValue");
        ConnectToOcclusion_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectToOcclusion");
        ConnectToOcclusion_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectToOcclusion_NativeFunction);
        ConnectToOcclusion_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToOcclusion_NativeFunction, "AttributeValue");
        ConnectToOcclusion_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToOcclusion_NativeFunction, "ReturnValue");
        ConnectToNormal_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectToNormal");
        ConnectToNormal_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectToNormal_NativeFunction);
        ConnectToNormal_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToNormal_NativeFunction, "ExpressionNodeUid");
        ConnectToNormal_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToNormal_NativeFunction, "ReturnValue");
        ConnectToMetallic_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectToMetallic");
        ConnectToMetallic_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectToMetallic_NativeFunction);
        ConnectToMetallic_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToMetallic_NativeFunction, "AttributeValue");
        ConnectToMetallic_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToMetallic_NativeFunction, "ReturnValue");
        ConnectToFuzzColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectToFuzzColor");
        ConnectToFuzzColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectToFuzzColor_NativeFunction);
        ConnectToFuzzColor_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToFuzzColor_NativeFunction, "AttributeValue");
        ConnectToFuzzColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToFuzzColor_NativeFunction, "ReturnValue");
        ConnectToEmissiveColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectToEmissiveColor");
        ConnectToEmissiveColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectToEmissiveColor_NativeFunction);
        ConnectToEmissiveColor_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToEmissiveColor_NativeFunction, "ExpressionNodeUid");
        ConnectToEmissiveColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToEmissiveColor_NativeFunction, "ReturnValue");
        ConnectToCloth_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectToCloth");
        ConnectToCloth_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectToCloth_NativeFunction);
        ConnectToCloth_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToCloth_NativeFunction, "AttributeValue");
        ConnectToCloth_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToCloth_NativeFunction, "ReturnValue");
        ConnectToClearCoatRoughness_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectToClearCoatRoughness");
        ConnectToClearCoatRoughness_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectToClearCoatRoughness_NativeFunction);
        ConnectToClearCoatRoughness_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToClearCoatRoughness_NativeFunction, "AttributeValue");
        ConnectToClearCoatRoughness_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToClearCoatRoughness_NativeFunction, "ReturnValue");
        ConnectToClearCoatNormal_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectToClearCoatNormal");
        ConnectToClearCoatNormal_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectToClearCoatNormal_NativeFunction);
        ConnectToClearCoatNormal_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToClearCoatNormal_NativeFunction, "AttributeValue");
        ConnectToClearCoatNormal_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToClearCoatNormal_NativeFunction, "ReturnValue");
        ConnectToClearCoat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectToClearCoat");
        ConnectToClearCoat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectToClearCoat_NativeFunction);
        ConnectToClearCoat_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToClearCoat_NativeFunction, "AttributeValue");
        ConnectToClearCoat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToClearCoat_NativeFunction, "ReturnValue");
        ConnectToBaseColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectToBaseColor");
        ConnectToBaseColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectToBaseColor_NativeFunction);
        ConnectToBaseColor_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToBaseColor_NativeFunction, "AttributeValue");
        ConnectToBaseColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToBaseColor_NativeFunction, "ReturnValue");
        ConnectToAnisotropy_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectToAnisotropy");
        ConnectToAnisotropy_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectToAnisotropy_NativeFunction);
        ConnectToAnisotropy_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToAnisotropy_NativeFunction, "ExpressionNodeUid");
        ConnectToAnisotropy_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectToAnisotropy_NativeFunction, "ReturnValue");
        ConnectOutputToTransmissionColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectOutputToTransmissionColor");
        ConnectOutputToTransmissionColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectOutputToTransmissionColor_NativeFunction);
        ConnectOutputToTransmissionColor_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToTransmissionColor_NativeFunction, "ExpressionNodeUid");
        ConnectOutputToTransmissionColor_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToTransmissionColor_NativeFunction, "OutputName");
        ConnectOutputToTransmissionColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToTransmissionColor_NativeFunction, "ReturnValue");
        ConnectOutputToTangent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectOutputToTangent");
        ConnectOutputToTangent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectOutputToTangent_NativeFunction);
        ConnectOutputToTangent_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToTangent_NativeFunction, "ExpressionNodeUid");
        ConnectOutputToTangent_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToTangent_NativeFunction, "OutputName");
        ConnectOutputToTangent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToTangent_NativeFunction, "ReturnValue");
        ConnectOutputToSubsurface_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectOutputToSubsurface");
        ConnectOutputToSubsurface_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectOutputToSubsurface_NativeFunction);
        ConnectOutputToSubsurface_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToSubsurface_NativeFunction, "ExpressionNodeUid");
        ConnectOutputToSubsurface_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToSubsurface_NativeFunction, "OutputName");
        ConnectOutputToSubsurface_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToSubsurface_NativeFunction, "ReturnValue");
        ConnectOutputToSpecular_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectOutputToSpecular");
        ConnectOutputToSpecular_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectOutputToSpecular_NativeFunction);
        ConnectOutputToSpecular_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToSpecular_NativeFunction, "ExpressionNodeUid");
        ConnectOutputToSpecular_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToSpecular_NativeFunction, "OutputName");
        ConnectOutputToSpecular_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToSpecular_NativeFunction, "ReturnValue");
        ConnectOutputToRoughness_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectOutputToRoughness");
        ConnectOutputToRoughness_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectOutputToRoughness_NativeFunction);
        ConnectOutputToRoughness_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToRoughness_NativeFunction, "ExpressionNodeUid");
        ConnectOutputToRoughness_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToRoughness_NativeFunction, "OutputName");
        ConnectOutputToRoughness_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToRoughness_NativeFunction, "ReturnValue");
        ConnectOutputToRefraction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectOutputToRefraction");
        ConnectOutputToRefraction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectOutputToRefraction_NativeFunction);
        ConnectOutputToRefraction_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToRefraction_NativeFunction, "ExpressionNodeUid");
        ConnectOutputToRefraction_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToRefraction_NativeFunction, "OutputName");
        ConnectOutputToRefraction_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToRefraction_NativeFunction, "ReturnValue");
        ConnectOutputToOpacity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectOutputToOpacity");
        ConnectOutputToOpacity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectOutputToOpacity_NativeFunction);
        ConnectOutputToOpacity_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToOpacity_NativeFunction, "ExpressionNodeUid");
        ConnectOutputToOpacity_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToOpacity_NativeFunction, "OutputName");
        ConnectOutputToOpacity_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToOpacity_NativeFunction, "ReturnValue");
        ConnectOutputToOcclusion_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectOutputToOcclusion");
        ConnectOutputToOcclusion_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectOutputToOcclusion_NativeFunction);
        ConnectOutputToOcclusion_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToOcclusion_NativeFunction, "ExpressionNodeUid");
        ConnectOutputToOcclusion_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToOcclusion_NativeFunction, "OutputName");
        ConnectOutputToOcclusion_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToOcclusion_NativeFunction, "ReturnValue");
        ConnectOutputToNormal_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectOutputToNormal");
        ConnectOutputToNormal_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectOutputToNormal_NativeFunction);
        ConnectOutputToNormal_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToNormal_NativeFunction, "ExpressionNodeUid");
        ConnectOutputToNormal_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToNormal_NativeFunction, "OutputName");
        ConnectOutputToNormal_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToNormal_NativeFunction, "ReturnValue");
        ConnectOutputToMetallic_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectOutputToMetallic");
        ConnectOutputToMetallic_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectOutputToMetallic_NativeFunction);
        ConnectOutputToMetallic_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToMetallic_NativeFunction, "ExpressionNodeUid");
        ConnectOutputToMetallic_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToMetallic_NativeFunction, "OutputName");
        ConnectOutputToMetallic_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToMetallic_NativeFunction, "ReturnValue");
        ConnectOutputToFuzzColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectOutputToFuzzColor");
        ConnectOutputToFuzzColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectOutputToFuzzColor_NativeFunction);
        ConnectOutputToFuzzColor_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToFuzzColor_NativeFunction, "ExpressionNodeUid");
        ConnectOutputToFuzzColor_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToFuzzColor_NativeFunction, "OutputName");
        ConnectOutputToFuzzColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToFuzzColor_NativeFunction, "ReturnValue");
        ConnectOutputToEmissiveColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectOutputToEmissiveColor");
        ConnectOutputToEmissiveColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectOutputToEmissiveColor_NativeFunction);
        ConnectOutputToEmissiveColor_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToEmissiveColor_NativeFunction, "ExpressionNodeUid");
        ConnectOutputToEmissiveColor_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToEmissiveColor_NativeFunction, "OutputName");
        ConnectOutputToEmissiveColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToEmissiveColor_NativeFunction, "ReturnValue");
        ConnectOutputToCloth_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectOutputToCloth");
        ConnectOutputToCloth_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectOutputToCloth_NativeFunction);
        ConnectOutputToCloth_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToCloth_NativeFunction, "ExpressionNodeUid");
        ConnectOutputToCloth_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToCloth_NativeFunction, "OutputName");
        ConnectOutputToCloth_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToCloth_NativeFunction, "ReturnValue");
        ConnectOutputToClearCoatRoughness_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectOutputToClearCoatRoughness");
        ConnectOutputToClearCoatRoughness_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectOutputToClearCoatRoughness_NativeFunction);
        ConnectOutputToClearCoatRoughness_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToClearCoatRoughness_NativeFunction, "ExpressionNodeUid");
        ConnectOutputToClearCoatRoughness_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToClearCoatRoughness_NativeFunction, "OutputName");
        ConnectOutputToClearCoatRoughness_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToClearCoatRoughness_NativeFunction, "ReturnValue");
        ConnectOutputToClearCoatNormal_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectOutputToClearCoatNormal");
        ConnectOutputToClearCoatNormal_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectOutputToClearCoatNormal_NativeFunction);
        ConnectOutputToClearCoatNormal_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToClearCoatNormal_NativeFunction, "ExpressionNodeUid");
        ConnectOutputToClearCoatNormal_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToClearCoatNormal_NativeFunction, "OutputName");
        ConnectOutputToClearCoatNormal_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToClearCoatNormal_NativeFunction, "ReturnValue");
        ConnectOutputToClearCoat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectOutputToClearCoat");
        ConnectOutputToClearCoat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectOutputToClearCoat_NativeFunction);
        ConnectOutputToClearCoat_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToClearCoat_NativeFunction, "ExpressionNodeUid");
        ConnectOutputToClearCoat_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToClearCoat_NativeFunction, "OutputName");
        ConnectOutputToClearCoat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToClearCoat_NativeFunction, "ReturnValue");
        ConnectOutputToBaseColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectOutputToBaseColor");
        ConnectOutputToBaseColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectOutputToBaseColor_NativeFunction);
        ConnectOutputToBaseColor_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToBaseColor_NativeFunction, "ExpressionNodeUid");
        ConnectOutputToBaseColor_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToBaseColor_NativeFunction, "OutputName");
        ConnectOutputToBaseColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToBaseColor_NativeFunction, "ReturnValue");
        ConnectOutputToAnisotropy_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectOutputToAnisotropy");
        ConnectOutputToAnisotropy_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectOutputToAnisotropy_NativeFunction);
        ConnectOutputToAnisotropy_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToAnisotropy_NativeFunction, "ExpressionNodeUid");
        ConnectOutputToAnisotropy_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToAnisotropy_NativeFunction, "OutputName");
        ConnectOutputToAnisotropy_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOutputToAnisotropy_NativeFunction, "ReturnValue");
        
        
    }
    
    protected InterchangeMaterialFactoryNode(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:SetCustomTwoSided
    static readonly IntPtr SetCustomTwoSided_NativeFunction;
    static readonly int SetCustomTwoSided_ParamsSize;
    static readonly int SetCustomTwoSided_AttributeValue_Offset;
    static readonly int SetCustomTwoSided_bAddApplyDelegate_Offset;
    static readonly int SetCustomTwoSided_ReturnValue_Offset;
    
    public bool SetCustomTwoSided(bool attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomTwoSided_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomTwoSided_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomTwoSided_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomTwoSided_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomTwoSided_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:SetCustomTranslucencyLightingMode
    static readonly IntPtr SetCustomTranslucencyLightingMode_NativeFunction;
    static readonly int SetCustomTranslucencyLightingMode_ParamsSize;
    static readonly int SetCustomTranslucencyLightingMode_AttributeValue_Offset;
    static readonly int SetCustomTranslucencyLightingMode_bAddApplyDelegate_Offset;
    static readonly int SetCustomTranslucencyLightingMode_ReturnValue_Offset;
    
    public bool SetCustomTranslucencyLightingMode(UnrealSharp.Engine.ETranslucencyLightingMode attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomTranslucencyLightingMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ETranslucencyLightingMode>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomTranslucencyLightingMode_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomTranslucencyLightingMode_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomTranslucencyLightingMode_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomTranslucencyLightingMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:SetCustomShadingModel
    static readonly IntPtr SetCustomShadingModel_NativeFunction;
    static readonly int SetCustomShadingModel_ParamsSize;
    static readonly int SetCustomShadingModel_AttributeValue_Offset;
    static readonly int SetCustomShadingModel_bAddApplyDelegate_Offset;
    static readonly int SetCustomShadingModel_ReturnValue_Offset;
    
    public bool SetCustomShadingModel(UnrealSharp.Engine.EMaterialShadingModel attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomShadingModel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EMaterialShadingModel>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomShadingModel_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomShadingModel_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomShadingModel_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomShadingModel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:SetCustomScreenSpaceReflections
    static readonly IntPtr SetCustomScreenSpaceReflections_NativeFunction;
    static readonly int SetCustomScreenSpaceReflections_ParamsSize;
    static readonly int SetCustomScreenSpaceReflections_AttributeValue_Offset;
    static readonly int SetCustomScreenSpaceReflections_ReturnValue_Offset;
    
    public bool SetCustomScreenSpaceReflections(bool attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomScreenSpaceReflections_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomScreenSpaceReflections_AttributeValue_Offset), 0, null, attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomScreenSpaceReflections_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomScreenSpaceReflections_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:SetCustomRefractionMethod
    static readonly IntPtr SetCustomRefractionMethod_NativeFunction;
    static readonly int SetCustomRefractionMethod_ParamsSize;
    static readonly int SetCustomRefractionMethod_AttributeValue_Offset;
    static readonly int SetCustomRefractionMethod_bAddApplyDelegate_Offset;
    static readonly int SetCustomRefractionMethod_ReturnValue_Offset;
    
    public bool SetCustomRefractionMethod(UnrealSharp.Engine.ERefractionMode attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomRefractionMethod_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.ERefractionMode>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomRefractionMethod_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomRefractionMethod_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomRefractionMethod_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomRefractionMethod_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:SetCustomOpacityMaskClipValue
    static readonly IntPtr SetCustomOpacityMaskClipValue_NativeFunction;
    static readonly int SetCustomOpacityMaskClipValue_ParamsSize;
    static readonly int SetCustomOpacityMaskClipValue_AttributeValue_Offset;
    static readonly int SetCustomOpacityMaskClipValue_bAddApplyDelegate_Offset;
    static readonly int SetCustomOpacityMaskClipValue_ReturnValue_Offset;
    
    public bool SetCustomOpacityMaskClipValue(float attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomOpacityMaskClipValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomOpacityMaskClipValue_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomOpacityMaskClipValue_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomOpacityMaskClipValue_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomOpacityMaskClipValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:SetCustomBlendMode
    static readonly IntPtr SetCustomBlendMode_NativeFunction;
    static readonly int SetCustomBlendMode_ParamsSize;
    static readonly int SetCustomBlendMode_AttributeValue_Offset;
    static readonly int SetCustomBlendMode_bAddApplyDelegate_Offset;
    static readonly int SetCustomBlendMode_ReturnValue_Offset;
    
    public bool SetCustomBlendMode(UnrealSharp.Engine.EBlendMode attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomBlendMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Engine.EBlendMode>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomBlendMode_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomBlendMode_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomBlendMode_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomBlendMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetTransmissionColorConnection
    static readonly IntPtr GetTransmissionColorConnection_NativeFunction;
    static readonly int GetTransmissionColorConnection_ParamsSize;
    static readonly int GetTransmissionColorConnection_ExpressionNodeUid_Offset;
    static readonly int GetTransmissionColorConnection_OutputName_Offset;
    static readonly int GetTransmissionColorConnection_ReturnValue_Offset;
    
    public bool GetTransmissionColorConnection(out string expressionNodeUid, out string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTransmissionColorConnection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTransmissionColorConnection_NativeFunction, ParamsBuffer);
            
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,GetTransmissionColorConnection_ExpressionNodeUid_Offset);
            expressionNodeUid = StringMarshaller.FromNative(ExpressionNodeUid_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,GetTransmissionColorConnection_OutputName_Offset);
            outputName = StringMarshaller.FromNative(OutputName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetTransmissionColorConnection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetTangentConnection
    static readonly IntPtr GetTangentConnection_NativeFunction;
    static readonly int GetTangentConnection_ParamsSize;
    static readonly int GetTangentConnection_ExpressionNodeUid_Offset;
    static readonly int GetTangentConnection_OutputName_Offset;
    static readonly int GetTangentConnection_ReturnValue_Offset;
    
    public bool GetTangentConnection(out string expressionNodeUid, out string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTangentConnection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTangentConnection_NativeFunction, ParamsBuffer);
            
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,GetTangentConnection_ExpressionNodeUid_Offset);
            expressionNodeUid = StringMarshaller.FromNative(ExpressionNodeUid_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,GetTangentConnection_OutputName_Offset);
            outputName = StringMarshaller.FromNative(OutputName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetTangentConnection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetSubsurfaceConnection
    static readonly IntPtr GetSubsurfaceConnection_NativeFunction;
    static readonly int GetSubsurfaceConnection_ParamsSize;
    static readonly int GetSubsurfaceConnection_ExpressionNodeUid_Offset;
    static readonly int GetSubsurfaceConnection_OutputName_Offset;
    static readonly int GetSubsurfaceConnection_ReturnValue_Offset;
    
    public bool GetSubsurfaceConnection(out string expressionNodeUid, out string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSubsurfaceConnection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSubsurfaceConnection_NativeFunction, ParamsBuffer);
            
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,GetSubsurfaceConnection_ExpressionNodeUid_Offset);
            expressionNodeUid = StringMarshaller.FromNative(ExpressionNodeUid_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,GetSubsurfaceConnection_OutputName_Offset);
            outputName = StringMarshaller.FromNative(OutputName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetSubsurfaceConnection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetSpecularConnection
    static readonly IntPtr GetSpecularConnection_NativeFunction;
    static readonly int GetSpecularConnection_ParamsSize;
    static readonly int GetSpecularConnection_ExpressionNodeUid_Offset;
    static readonly int GetSpecularConnection_OutputName_Offset;
    static readonly int GetSpecularConnection_ReturnValue_Offset;
    
    public bool GetSpecularConnection(out string expressionNodeUid, out string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSpecularConnection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSpecularConnection_NativeFunction, ParamsBuffer);
            
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,GetSpecularConnection_ExpressionNodeUid_Offset);
            expressionNodeUid = StringMarshaller.FromNative(ExpressionNodeUid_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,GetSpecularConnection_OutputName_Offset);
            outputName = StringMarshaller.FromNative(OutputName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetSpecularConnection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetRoughnessConnection
    static readonly IntPtr GetRoughnessConnection_NativeFunction;
    static readonly int GetRoughnessConnection_ParamsSize;
    static readonly int GetRoughnessConnection_ExpressionNodeUid_Offset;
    static readonly int GetRoughnessConnection_OutputName_Offset;
    static readonly int GetRoughnessConnection_ReturnValue_Offset;
    
    public bool GetRoughnessConnection(out string expressionNodeUid, out string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRoughnessConnection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRoughnessConnection_NativeFunction, ParamsBuffer);
            
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,GetRoughnessConnection_ExpressionNodeUid_Offset);
            expressionNodeUid = StringMarshaller.FromNative(ExpressionNodeUid_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,GetRoughnessConnection_OutputName_Offset);
            outputName = StringMarshaller.FromNative(OutputName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetRoughnessConnection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetRefractionConnection
    static readonly IntPtr GetRefractionConnection_NativeFunction;
    static readonly int GetRefractionConnection_ParamsSize;
    static readonly int GetRefractionConnection_ExpressionNodeUid_Offset;
    static readonly int GetRefractionConnection_OutputName_Offset;
    static readonly int GetRefractionConnection_ReturnValue_Offset;
    
    public bool GetRefractionConnection(out string expressionNodeUid, out string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRefractionConnection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRefractionConnection_NativeFunction, ParamsBuffer);
            
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,GetRefractionConnection_ExpressionNodeUid_Offset);
            expressionNodeUid = StringMarshaller.FromNative(ExpressionNodeUid_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,GetRefractionConnection_OutputName_Offset);
            outputName = StringMarshaller.FromNative(OutputName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetRefractionConnection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetOpacityConnection
    static readonly IntPtr GetOpacityConnection_NativeFunction;
    static readonly int GetOpacityConnection_ParamsSize;
    static readonly int GetOpacityConnection_ExpressionNodeUid_Offset;
    static readonly int GetOpacityConnection_OutputName_Offset;
    static readonly int GetOpacityConnection_ReturnValue_Offset;
    
    public bool GetOpacityConnection(out string expressionNodeUid, out string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOpacityConnection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOpacityConnection_NativeFunction, ParamsBuffer);
            
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,GetOpacityConnection_ExpressionNodeUid_Offset);
            expressionNodeUid = StringMarshaller.FromNative(ExpressionNodeUid_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,GetOpacityConnection_OutputName_Offset);
            outputName = StringMarshaller.FromNative(OutputName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetOpacityConnection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetOcclusionConnection
    static readonly IntPtr GetOcclusionConnection_NativeFunction;
    static readonly int GetOcclusionConnection_ParamsSize;
    static readonly int GetOcclusionConnection_ExpressionNodeUid_Offset;
    static readonly int GetOcclusionConnection_OutputName_Offset;
    static readonly int GetOcclusionConnection_ReturnValue_Offset;
    
    public bool GetOcclusionConnection(out string expressionNodeUid, out string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetOcclusionConnection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetOcclusionConnection_NativeFunction, ParamsBuffer);
            
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,GetOcclusionConnection_ExpressionNodeUid_Offset);
            expressionNodeUid = StringMarshaller.FromNative(ExpressionNodeUid_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,GetOcclusionConnection_OutputName_Offset);
            outputName = StringMarshaller.FromNative(OutputName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetOcclusionConnection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetObjectClass
    static readonly IntPtr GetObjectClass_NativeFunction;
    static readonly int GetObjectClass_ParamsSize;
    static readonly int GetObjectClass_ReturnValue_Offset;
    
    public SubclassOf<UnrealSharp.CoreUObject.Object> GetObjectClass()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetObjectClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetObjectClass_NativeFunction, ParamsBuffer);
            
            SubclassOf<UnrealSharp.CoreUObject.Object> returnValue;
            returnValue = SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetObjectClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetNormalConnection
    static readonly IntPtr GetNormalConnection_NativeFunction;
    static readonly int GetNormalConnection_ParamsSize;
    static readonly int GetNormalConnection_ExpressionNodeUid_Offset;
    static readonly int GetNormalConnection_OutputName_Offset;
    static readonly int GetNormalConnection_ReturnValue_Offset;
    
    public bool GetNormalConnection(out string expressionNodeUid, out string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNormalConnection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNormalConnection_NativeFunction, ParamsBuffer);
            
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,GetNormalConnection_ExpressionNodeUid_Offset);
            expressionNodeUid = StringMarshaller.FromNative(ExpressionNodeUid_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,GetNormalConnection_OutputName_Offset);
            outputName = StringMarshaller.FromNative(OutputName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetNormalConnection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetMetallicConnection
    static readonly IntPtr GetMetallicConnection_NativeFunction;
    static readonly int GetMetallicConnection_ParamsSize;
    static readonly int GetMetallicConnection_ExpressionNodeUid_Offset;
    static readonly int GetMetallicConnection_OutputName_Offset;
    static readonly int GetMetallicConnection_ReturnValue_Offset;
    
    public bool GetMetallicConnection(out string expressionNodeUid, out string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMetallicConnection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMetallicConnection_NativeFunction, ParamsBuffer);
            
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,GetMetallicConnection_ExpressionNodeUid_Offset);
            expressionNodeUid = StringMarshaller.FromNative(ExpressionNodeUid_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,GetMetallicConnection_OutputName_Offset);
            outputName = StringMarshaller.FromNative(OutputName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetMetallicConnection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetFuzzColorConnection
    static readonly IntPtr GetFuzzColorConnection_NativeFunction;
    static readonly int GetFuzzColorConnection_ParamsSize;
    static readonly int GetFuzzColorConnection_ExpressionNodeUid_Offset;
    static readonly int GetFuzzColorConnection_OutputName_Offset;
    static readonly int GetFuzzColorConnection_ReturnValue_Offset;
    
    public bool GetFuzzColorConnection(out string expressionNodeUid, out string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFuzzColorConnection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetFuzzColorConnection_NativeFunction, ParamsBuffer);
            
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,GetFuzzColorConnection_ExpressionNodeUid_Offset);
            expressionNodeUid = StringMarshaller.FromNative(ExpressionNodeUid_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,GetFuzzColorConnection_OutputName_Offset);
            outputName = StringMarshaller.FromNative(OutputName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetFuzzColorConnection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetEmissiveColorConnection
    static readonly IntPtr GetEmissiveColorConnection_NativeFunction;
    static readonly int GetEmissiveColorConnection_ParamsSize;
    static readonly int GetEmissiveColorConnection_ExpressionNodeUid_Offset;
    static readonly int GetEmissiveColorConnection_OutputName_Offset;
    static readonly int GetEmissiveColorConnection_ReturnValue_Offset;
    
    public bool GetEmissiveColorConnection(out string expressionNodeUid, out string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEmissiveColorConnection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetEmissiveColorConnection_NativeFunction, ParamsBuffer);
            
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,GetEmissiveColorConnection_ExpressionNodeUid_Offset);
            expressionNodeUid = StringMarshaller.FromNative(ExpressionNodeUid_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,GetEmissiveColorConnection_OutputName_Offset);
            outputName = StringMarshaller.FromNative(OutputName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetEmissiveColorConnection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetCustomTwoSided
    static readonly IntPtr GetCustomTwoSided_NativeFunction;
    static readonly int GetCustomTwoSided_ParamsSize;
    static readonly int GetCustomTwoSided_AttributeValue_Offset;
    static readonly int GetCustomTwoSided_ReturnValue_Offset;
    
    public bool GetCustomTwoSided(out bool attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomTwoSided_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomTwoSided_NativeFunction, ParamsBuffer);
            
            attributeValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomTwoSided_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomTwoSided_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetCustomTranslucencyLightingMode
    static readonly IntPtr GetCustomTranslucencyLightingMode_NativeFunction;
    static readonly int GetCustomTranslucencyLightingMode_ParamsSize;
    static readonly int GetCustomTranslucencyLightingMode_AttributeValue_Offset;
    static readonly int GetCustomTranslucencyLightingMode_ReturnValue_Offset;
    
    public bool GetCustomTranslucencyLightingMode(out UnrealSharp.Engine.ETranslucencyLightingMode attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomTranslucencyLightingMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomTranslucencyLightingMode_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<UnrealSharp.Engine.ETranslucencyLightingMode>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomTranslucencyLightingMode_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomTranslucencyLightingMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetCustomShadingModel
    static readonly IntPtr GetCustomShadingModel_NativeFunction;
    static readonly int GetCustomShadingModel_ParamsSize;
    static readonly int GetCustomShadingModel_AttributeValue_Offset;
    static readonly int GetCustomShadingModel_ReturnValue_Offset;
    
    public bool GetCustomShadingModel(out UnrealSharp.Engine.EMaterialShadingModel attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomShadingModel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomShadingModel_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<UnrealSharp.Engine.EMaterialShadingModel>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomShadingModel_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomShadingModel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetCustomScreenSpaceReflections
    static readonly IntPtr GetCustomScreenSpaceReflections_NativeFunction;
    static readonly int GetCustomScreenSpaceReflections_ParamsSize;
    static readonly int GetCustomScreenSpaceReflections_AttributeValue_Offset;
    static readonly int GetCustomScreenSpaceReflections_ReturnValue_Offset;
    
    public bool GetCustomScreenSpaceReflections(out bool attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomScreenSpaceReflections_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomScreenSpaceReflections_NativeFunction, ParamsBuffer);
            
            attributeValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomScreenSpaceReflections_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomScreenSpaceReflections_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetCustomRefractionMethod
    static readonly IntPtr GetCustomRefractionMethod_NativeFunction;
    static readonly int GetCustomRefractionMethod_ParamsSize;
    static readonly int GetCustomRefractionMethod_AttributeValue_Offset;
    static readonly int GetCustomRefractionMethod_ReturnValue_Offset;
    
    public bool GetCustomRefractionMethod(out UnrealSharp.Engine.ERefractionMode attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomRefractionMethod_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomRefractionMethod_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<UnrealSharp.Engine.ERefractionMode>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomRefractionMethod_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomRefractionMethod_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetCustomOpacityMaskClipValue
    static readonly IntPtr GetCustomOpacityMaskClipValue_NativeFunction;
    static readonly int GetCustomOpacityMaskClipValue_ParamsSize;
    static readonly int GetCustomOpacityMaskClipValue_AttributeValue_Offset;
    static readonly int GetCustomOpacityMaskClipValue_ReturnValue_Offset;
    
    public bool GetCustomOpacityMaskClipValue(out float attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomOpacityMaskClipValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomOpacityMaskClipValue_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomOpacityMaskClipValue_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomOpacityMaskClipValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetCustomBlendMode
    static readonly IntPtr GetCustomBlendMode_NativeFunction;
    static readonly int GetCustomBlendMode_ParamsSize;
    static readonly int GetCustomBlendMode_AttributeValue_Offset;
    static readonly int GetCustomBlendMode_ReturnValue_Offset;
    
    public bool GetCustomBlendMode(out UnrealSharp.Engine.EBlendMode attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomBlendMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomBlendMode_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<UnrealSharp.Engine.EBlendMode>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomBlendMode_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomBlendMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetClothConnection
    static readonly IntPtr GetClothConnection_NativeFunction;
    static readonly int GetClothConnection_ParamsSize;
    static readonly int GetClothConnection_ExpressionNodeUid_Offset;
    static readonly int GetClothConnection_OutputName_Offset;
    static readonly int GetClothConnection_ReturnValue_Offset;
    
    public bool GetClothConnection(out string expressionNodeUid, out string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetClothConnection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetClothConnection_NativeFunction, ParamsBuffer);
            
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,GetClothConnection_ExpressionNodeUid_Offset);
            expressionNodeUid = StringMarshaller.FromNative(ExpressionNodeUid_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,GetClothConnection_OutputName_Offset);
            outputName = StringMarshaller.FromNative(OutputName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetClothConnection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetClearCoatRoughnessConnection
    static readonly IntPtr GetClearCoatRoughnessConnection_NativeFunction;
    static readonly int GetClearCoatRoughnessConnection_ParamsSize;
    static readonly int GetClearCoatRoughnessConnection_ExpressionNodeUid_Offset;
    static readonly int GetClearCoatRoughnessConnection_OutputName_Offset;
    static readonly int GetClearCoatRoughnessConnection_ReturnValue_Offset;
    
    public bool GetClearCoatRoughnessConnection(out string expressionNodeUid, out string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetClearCoatRoughnessConnection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetClearCoatRoughnessConnection_NativeFunction, ParamsBuffer);
            
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,GetClearCoatRoughnessConnection_ExpressionNodeUid_Offset);
            expressionNodeUid = StringMarshaller.FromNative(ExpressionNodeUid_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,GetClearCoatRoughnessConnection_OutputName_Offset);
            outputName = StringMarshaller.FromNative(OutputName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetClearCoatRoughnessConnection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetClearCoatNormalConnection
    static readonly IntPtr GetClearCoatNormalConnection_NativeFunction;
    static readonly int GetClearCoatNormalConnection_ParamsSize;
    static readonly int GetClearCoatNormalConnection_ExpressionNodeUid_Offset;
    static readonly int GetClearCoatNormalConnection_OutputName_Offset;
    static readonly int GetClearCoatNormalConnection_ReturnValue_Offset;
    
    public bool GetClearCoatNormalConnection(out string expressionNodeUid, out string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetClearCoatNormalConnection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetClearCoatNormalConnection_NativeFunction, ParamsBuffer);
            
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,GetClearCoatNormalConnection_ExpressionNodeUid_Offset);
            expressionNodeUid = StringMarshaller.FromNative(ExpressionNodeUid_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,GetClearCoatNormalConnection_OutputName_Offset);
            outputName = StringMarshaller.FromNative(OutputName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetClearCoatNormalConnection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetClearCoatConnection
    static readonly IntPtr GetClearCoatConnection_NativeFunction;
    static readonly int GetClearCoatConnection_ParamsSize;
    static readonly int GetClearCoatConnection_ExpressionNodeUid_Offset;
    static readonly int GetClearCoatConnection_OutputName_Offset;
    static readonly int GetClearCoatConnection_ReturnValue_Offset;
    
    public bool GetClearCoatConnection(out string expressionNodeUid, out string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetClearCoatConnection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetClearCoatConnection_NativeFunction, ParamsBuffer);
            
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,GetClearCoatConnection_ExpressionNodeUid_Offset);
            expressionNodeUid = StringMarshaller.FromNative(ExpressionNodeUid_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,GetClearCoatConnection_OutputName_Offset);
            outputName = StringMarshaller.FromNative(OutputName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetClearCoatConnection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetBaseColorConnection
    static readonly IntPtr GetBaseColorConnection_NativeFunction;
    static readonly int GetBaseColorConnection_ParamsSize;
    static readonly int GetBaseColorConnection_ExpressionNodeUid_Offset;
    static readonly int GetBaseColorConnection_OutputName_Offset;
    static readonly int GetBaseColorConnection_ReturnValue_Offset;
    
    public bool GetBaseColorConnection(out string expressionNodeUid, out string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBaseColorConnection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBaseColorConnection_NativeFunction, ParamsBuffer);
            
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,GetBaseColorConnection_ExpressionNodeUid_Offset);
            expressionNodeUid = StringMarshaller.FromNative(ExpressionNodeUid_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,GetBaseColorConnection_OutputName_Offset);
            outputName = StringMarshaller.FromNative(OutputName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetBaseColorConnection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:GetAnisotropyConnection
    static readonly IntPtr GetAnisotropyConnection_NativeFunction;
    static readonly int GetAnisotropyConnection_ParamsSize;
    static readonly int GetAnisotropyConnection_ExpressionNodeUid_Offset;
    static readonly int GetAnisotropyConnection_OutputName_Offset;
    static readonly int GetAnisotropyConnection_ReturnValue_Offset;
    
    public bool GetAnisotropyConnection(out string expressionNodeUid, out string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAnisotropyConnection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAnisotropyConnection_NativeFunction, ParamsBuffer);
            
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,GetAnisotropyConnection_ExpressionNodeUid_Offset);
            expressionNodeUid = StringMarshaller.FromNative(ExpressionNodeUid_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,GetAnisotropyConnection_OutputName_Offset);
            outputName = StringMarshaller.FromNative(OutputName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetAnisotropyConnection_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectToTransmissionColor
    static readonly IntPtr ConnectToTransmissionColor_NativeFunction;
    static readonly int ConnectToTransmissionColor_ParamsSize;
    static readonly int ConnectToTransmissionColor_AttributeValue_Offset;
    static readonly int ConnectToTransmissionColor_ReturnValue_Offset;
    
    public bool ConnectToTransmissionColor(string attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectToTransmissionColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AttributeValue_NativePtr = IntPtr.Add(ParamsBuffer,ConnectToTransmissionColor_AttributeValue_Offset);
            StringMarshaller.ToNative(AttributeValue_NativePtr,0,null,attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectToTransmissionColor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectToTransmissionColor_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AttributeValue_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectToTangent
    static readonly IntPtr ConnectToTangent_NativeFunction;
    static readonly int ConnectToTangent_ParamsSize;
    static readonly int ConnectToTangent_ExpressionNodeUid_Offset;
    static readonly int ConnectToTangent_ReturnValue_Offset;
    
    public bool ConnectToTangent(string expressionNodeUid)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectToTangent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectToTangent_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectToTangent_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectToTangent_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectToSubsurface
    static readonly IntPtr ConnectToSubsurface_NativeFunction;
    static readonly int ConnectToSubsurface_ParamsSize;
    static readonly int ConnectToSubsurface_ExpressionNodeUid_Offset;
    static readonly int ConnectToSubsurface_ReturnValue_Offset;
    
    public bool ConnectToSubsurface(string expressionNodeUid)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectToSubsurface_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectToSubsurface_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectToSubsurface_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectToSubsurface_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectToSpecular
    static readonly IntPtr ConnectToSpecular_NativeFunction;
    static readonly int ConnectToSpecular_ParamsSize;
    static readonly int ConnectToSpecular_ExpressionNodeUid_Offset;
    static readonly int ConnectToSpecular_ReturnValue_Offset;
    
    public bool ConnectToSpecular(string expressionNodeUid)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectToSpecular_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectToSpecular_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectToSpecular_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectToSpecular_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectToRoughness
    static readonly IntPtr ConnectToRoughness_NativeFunction;
    static readonly int ConnectToRoughness_ParamsSize;
    static readonly int ConnectToRoughness_ExpressionNodeUid_Offset;
    static readonly int ConnectToRoughness_ReturnValue_Offset;
    
    public bool ConnectToRoughness(string expressionNodeUid)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectToRoughness_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectToRoughness_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectToRoughness_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectToRoughness_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectToRefraction
    static readonly IntPtr ConnectToRefraction_NativeFunction;
    static readonly int ConnectToRefraction_ParamsSize;
    static readonly int ConnectToRefraction_AttributeValue_Offset;
    static readonly int ConnectToRefraction_ReturnValue_Offset;
    
    public bool ConnectToRefraction(string attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectToRefraction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AttributeValue_NativePtr = IntPtr.Add(ParamsBuffer,ConnectToRefraction_AttributeValue_Offset);
            StringMarshaller.ToNative(AttributeValue_NativePtr,0,null,attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectToRefraction_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectToRefraction_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AttributeValue_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectToOpacity
    static readonly IntPtr ConnectToOpacity_NativeFunction;
    static readonly int ConnectToOpacity_ParamsSize;
    static readonly int ConnectToOpacity_AttributeValue_Offset;
    static readonly int ConnectToOpacity_ReturnValue_Offset;
    
    public bool ConnectToOpacity(string attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectToOpacity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AttributeValue_NativePtr = IntPtr.Add(ParamsBuffer,ConnectToOpacity_AttributeValue_Offset);
            StringMarshaller.ToNative(AttributeValue_NativePtr,0,null,attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectToOpacity_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectToOpacity_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AttributeValue_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectToOcclusion
    static readonly IntPtr ConnectToOcclusion_NativeFunction;
    static readonly int ConnectToOcclusion_ParamsSize;
    static readonly int ConnectToOcclusion_AttributeValue_Offset;
    static readonly int ConnectToOcclusion_ReturnValue_Offset;
    
    public bool ConnectToOcclusion(string attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectToOcclusion_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AttributeValue_NativePtr = IntPtr.Add(ParamsBuffer,ConnectToOcclusion_AttributeValue_Offset);
            StringMarshaller.ToNative(AttributeValue_NativePtr,0,null,attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectToOcclusion_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectToOcclusion_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AttributeValue_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectToNormal
    static readonly IntPtr ConnectToNormal_NativeFunction;
    static readonly int ConnectToNormal_ParamsSize;
    static readonly int ConnectToNormal_ExpressionNodeUid_Offset;
    static readonly int ConnectToNormal_ReturnValue_Offset;
    
    public bool ConnectToNormal(string expressionNodeUid)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectToNormal_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectToNormal_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectToNormal_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectToNormal_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectToMetallic
    static readonly IntPtr ConnectToMetallic_NativeFunction;
    static readonly int ConnectToMetallic_ParamsSize;
    static readonly int ConnectToMetallic_AttributeValue_Offset;
    static readonly int ConnectToMetallic_ReturnValue_Offset;
    
    public bool ConnectToMetallic(string attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectToMetallic_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AttributeValue_NativePtr = IntPtr.Add(ParamsBuffer,ConnectToMetallic_AttributeValue_Offset);
            StringMarshaller.ToNative(AttributeValue_NativePtr,0,null,attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectToMetallic_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectToMetallic_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AttributeValue_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectToFuzzColor
    static readonly IntPtr ConnectToFuzzColor_NativeFunction;
    static readonly int ConnectToFuzzColor_ParamsSize;
    static readonly int ConnectToFuzzColor_AttributeValue_Offset;
    static readonly int ConnectToFuzzColor_ReturnValue_Offset;
    
    public bool ConnectToFuzzColor(string attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectToFuzzColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AttributeValue_NativePtr = IntPtr.Add(ParamsBuffer,ConnectToFuzzColor_AttributeValue_Offset);
            StringMarshaller.ToNative(AttributeValue_NativePtr,0,null,attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectToFuzzColor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectToFuzzColor_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AttributeValue_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectToEmissiveColor
    static readonly IntPtr ConnectToEmissiveColor_NativeFunction;
    static readonly int ConnectToEmissiveColor_ParamsSize;
    static readonly int ConnectToEmissiveColor_ExpressionNodeUid_Offset;
    static readonly int ConnectToEmissiveColor_ReturnValue_Offset;
    
    public bool ConnectToEmissiveColor(string expressionNodeUid)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectToEmissiveColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectToEmissiveColor_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectToEmissiveColor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectToEmissiveColor_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectToCloth
    static readonly IntPtr ConnectToCloth_NativeFunction;
    static readonly int ConnectToCloth_ParamsSize;
    static readonly int ConnectToCloth_AttributeValue_Offset;
    static readonly int ConnectToCloth_ReturnValue_Offset;
    
    public bool ConnectToCloth(string attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectToCloth_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AttributeValue_NativePtr = IntPtr.Add(ParamsBuffer,ConnectToCloth_AttributeValue_Offset);
            StringMarshaller.ToNative(AttributeValue_NativePtr,0,null,attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectToCloth_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectToCloth_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AttributeValue_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectToClearCoatRoughness
    static readonly IntPtr ConnectToClearCoatRoughness_NativeFunction;
    static readonly int ConnectToClearCoatRoughness_ParamsSize;
    static readonly int ConnectToClearCoatRoughness_AttributeValue_Offset;
    static readonly int ConnectToClearCoatRoughness_ReturnValue_Offset;
    
    public bool ConnectToClearCoatRoughness(string attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectToClearCoatRoughness_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AttributeValue_NativePtr = IntPtr.Add(ParamsBuffer,ConnectToClearCoatRoughness_AttributeValue_Offset);
            StringMarshaller.ToNative(AttributeValue_NativePtr,0,null,attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectToClearCoatRoughness_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectToClearCoatRoughness_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AttributeValue_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectToClearCoatNormal
    static readonly IntPtr ConnectToClearCoatNormal_NativeFunction;
    static readonly int ConnectToClearCoatNormal_ParamsSize;
    static readonly int ConnectToClearCoatNormal_AttributeValue_Offset;
    static readonly int ConnectToClearCoatNormal_ReturnValue_Offset;
    
    public bool ConnectToClearCoatNormal(string attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectToClearCoatNormal_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AttributeValue_NativePtr = IntPtr.Add(ParamsBuffer,ConnectToClearCoatNormal_AttributeValue_Offset);
            StringMarshaller.ToNative(AttributeValue_NativePtr,0,null,attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectToClearCoatNormal_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectToClearCoatNormal_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AttributeValue_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectToClearCoat
    static readonly IntPtr ConnectToClearCoat_NativeFunction;
    static readonly int ConnectToClearCoat_ParamsSize;
    static readonly int ConnectToClearCoat_AttributeValue_Offset;
    static readonly int ConnectToClearCoat_ReturnValue_Offset;
    
    public bool ConnectToClearCoat(string attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectToClearCoat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AttributeValue_NativePtr = IntPtr.Add(ParamsBuffer,ConnectToClearCoat_AttributeValue_Offset);
            StringMarshaller.ToNative(AttributeValue_NativePtr,0,null,attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectToClearCoat_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectToClearCoat_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AttributeValue_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectToBaseColor
    static readonly IntPtr ConnectToBaseColor_NativeFunction;
    static readonly int ConnectToBaseColor_ParamsSize;
    static readonly int ConnectToBaseColor_AttributeValue_Offset;
    static readonly int ConnectToBaseColor_ReturnValue_Offset;
    
    public bool ConnectToBaseColor(string attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectToBaseColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AttributeValue_NativePtr = IntPtr.Add(ParamsBuffer,ConnectToBaseColor_AttributeValue_Offset);
            StringMarshaller.ToNative(AttributeValue_NativePtr,0,null,attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectToBaseColor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectToBaseColor_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AttributeValue_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectToAnisotropy
    static readonly IntPtr ConnectToAnisotropy_NativeFunction;
    static readonly int ConnectToAnisotropy_ParamsSize;
    static readonly int ConnectToAnisotropy_ExpressionNodeUid_Offset;
    static readonly int ConnectToAnisotropy_ReturnValue_Offset;
    
    public bool ConnectToAnisotropy(string expressionNodeUid)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectToAnisotropy_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectToAnisotropy_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectToAnisotropy_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectToAnisotropy_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectOutputToTransmissionColor
    static readonly IntPtr ConnectOutputToTransmissionColor_NativeFunction;
    static readonly int ConnectOutputToTransmissionColor_ParamsSize;
    static readonly int ConnectOutputToTransmissionColor_ExpressionNodeUid_Offset;
    static readonly int ConnectOutputToTransmissionColor_OutputName_Offset;
    static readonly int ConnectOutputToTransmissionColor_ReturnValue_Offset;
    
    public bool ConnectOutputToTransmissionColor(string expressionNodeUid, string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectOutputToTransmissionColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToTransmissionColor_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToTransmissionColor_OutputName_Offset);
            StringMarshaller.ToNative(OutputName_NativePtr,0,null,outputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectOutputToTransmissionColor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectOutputToTransmissionColor_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectOutputToTangent
    static readonly IntPtr ConnectOutputToTangent_NativeFunction;
    static readonly int ConnectOutputToTangent_ParamsSize;
    static readonly int ConnectOutputToTangent_ExpressionNodeUid_Offset;
    static readonly int ConnectOutputToTangent_OutputName_Offset;
    static readonly int ConnectOutputToTangent_ReturnValue_Offset;
    
    public bool ConnectOutputToTangent(string expressionNodeUid, string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectOutputToTangent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToTangent_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToTangent_OutputName_Offset);
            StringMarshaller.ToNative(OutputName_NativePtr,0,null,outputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectOutputToTangent_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectOutputToTangent_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectOutputToSubsurface
    static readonly IntPtr ConnectOutputToSubsurface_NativeFunction;
    static readonly int ConnectOutputToSubsurface_ParamsSize;
    static readonly int ConnectOutputToSubsurface_ExpressionNodeUid_Offset;
    static readonly int ConnectOutputToSubsurface_OutputName_Offset;
    static readonly int ConnectOutputToSubsurface_ReturnValue_Offset;
    
    public bool ConnectOutputToSubsurface(string expressionNodeUid, string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectOutputToSubsurface_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToSubsurface_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToSubsurface_OutputName_Offset);
            StringMarshaller.ToNative(OutputName_NativePtr,0,null,outputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectOutputToSubsurface_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectOutputToSubsurface_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectOutputToSpecular
    static readonly IntPtr ConnectOutputToSpecular_NativeFunction;
    static readonly int ConnectOutputToSpecular_ParamsSize;
    static readonly int ConnectOutputToSpecular_ExpressionNodeUid_Offset;
    static readonly int ConnectOutputToSpecular_OutputName_Offset;
    static readonly int ConnectOutputToSpecular_ReturnValue_Offset;
    
    public bool ConnectOutputToSpecular(string expressionNodeUid, string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectOutputToSpecular_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToSpecular_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToSpecular_OutputName_Offset);
            StringMarshaller.ToNative(OutputName_NativePtr,0,null,outputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectOutputToSpecular_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectOutputToSpecular_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectOutputToRoughness
    static readonly IntPtr ConnectOutputToRoughness_NativeFunction;
    static readonly int ConnectOutputToRoughness_ParamsSize;
    static readonly int ConnectOutputToRoughness_ExpressionNodeUid_Offset;
    static readonly int ConnectOutputToRoughness_OutputName_Offset;
    static readonly int ConnectOutputToRoughness_ReturnValue_Offset;
    
    public bool ConnectOutputToRoughness(string expressionNodeUid, string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectOutputToRoughness_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToRoughness_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToRoughness_OutputName_Offset);
            StringMarshaller.ToNative(OutputName_NativePtr,0,null,outputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectOutputToRoughness_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectOutputToRoughness_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectOutputToRefraction
    static readonly IntPtr ConnectOutputToRefraction_NativeFunction;
    static readonly int ConnectOutputToRefraction_ParamsSize;
    static readonly int ConnectOutputToRefraction_ExpressionNodeUid_Offset;
    static readonly int ConnectOutputToRefraction_OutputName_Offset;
    static readonly int ConnectOutputToRefraction_ReturnValue_Offset;
    
    public bool ConnectOutputToRefraction(string expressionNodeUid, string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectOutputToRefraction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToRefraction_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToRefraction_OutputName_Offset);
            StringMarshaller.ToNative(OutputName_NativePtr,0,null,outputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectOutputToRefraction_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectOutputToRefraction_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectOutputToOpacity
    static readonly IntPtr ConnectOutputToOpacity_NativeFunction;
    static readonly int ConnectOutputToOpacity_ParamsSize;
    static readonly int ConnectOutputToOpacity_ExpressionNodeUid_Offset;
    static readonly int ConnectOutputToOpacity_OutputName_Offset;
    static readonly int ConnectOutputToOpacity_ReturnValue_Offset;
    
    public bool ConnectOutputToOpacity(string expressionNodeUid, string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectOutputToOpacity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToOpacity_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToOpacity_OutputName_Offset);
            StringMarshaller.ToNative(OutputName_NativePtr,0,null,outputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectOutputToOpacity_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectOutputToOpacity_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectOutputToOcclusion
    static readonly IntPtr ConnectOutputToOcclusion_NativeFunction;
    static readonly int ConnectOutputToOcclusion_ParamsSize;
    static readonly int ConnectOutputToOcclusion_ExpressionNodeUid_Offset;
    static readonly int ConnectOutputToOcclusion_OutputName_Offset;
    static readonly int ConnectOutputToOcclusion_ReturnValue_Offset;
    
    public bool ConnectOutputToOcclusion(string expressionNodeUid, string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectOutputToOcclusion_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToOcclusion_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToOcclusion_OutputName_Offset);
            StringMarshaller.ToNative(OutputName_NativePtr,0,null,outputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectOutputToOcclusion_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectOutputToOcclusion_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectOutputToNormal
    static readonly IntPtr ConnectOutputToNormal_NativeFunction;
    static readonly int ConnectOutputToNormal_ParamsSize;
    static readonly int ConnectOutputToNormal_ExpressionNodeUid_Offset;
    static readonly int ConnectOutputToNormal_OutputName_Offset;
    static readonly int ConnectOutputToNormal_ReturnValue_Offset;
    
    public bool ConnectOutputToNormal(string expressionNodeUid, string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectOutputToNormal_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToNormal_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToNormal_OutputName_Offset);
            StringMarshaller.ToNative(OutputName_NativePtr,0,null,outputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectOutputToNormal_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectOutputToNormal_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectOutputToMetallic
    static readonly IntPtr ConnectOutputToMetallic_NativeFunction;
    static readonly int ConnectOutputToMetallic_ParamsSize;
    static readonly int ConnectOutputToMetallic_ExpressionNodeUid_Offset;
    static readonly int ConnectOutputToMetallic_OutputName_Offset;
    static readonly int ConnectOutputToMetallic_ReturnValue_Offset;
    
    public bool ConnectOutputToMetallic(string expressionNodeUid, string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectOutputToMetallic_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToMetallic_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToMetallic_OutputName_Offset);
            StringMarshaller.ToNative(OutputName_NativePtr,0,null,outputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectOutputToMetallic_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectOutputToMetallic_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectOutputToFuzzColor
    static readonly IntPtr ConnectOutputToFuzzColor_NativeFunction;
    static readonly int ConnectOutputToFuzzColor_ParamsSize;
    static readonly int ConnectOutputToFuzzColor_ExpressionNodeUid_Offset;
    static readonly int ConnectOutputToFuzzColor_OutputName_Offset;
    static readonly int ConnectOutputToFuzzColor_ReturnValue_Offset;
    
    public bool ConnectOutputToFuzzColor(string expressionNodeUid, string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectOutputToFuzzColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToFuzzColor_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToFuzzColor_OutputName_Offset);
            StringMarshaller.ToNative(OutputName_NativePtr,0,null,outputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectOutputToFuzzColor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectOutputToFuzzColor_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectOutputToEmissiveColor
    static readonly IntPtr ConnectOutputToEmissiveColor_NativeFunction;
    static readonly int ConnectOutputToEmissiveColor_ParamsSize;
    static readonly int ConnectOutputToEmissiveColor_ExpressionNodeUid_Offset;
    static readonly int ConnectOutputToEmissiveColor_OutputName_Offset;
    static readonly int ConnectOutputToEmissiveColor_ReturnValue_Offset;
    
    public bool ConnectOutputToEmissiveColor(string expressionNodeUid, string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectOutputToEmissiveColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToEmissiveColor_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToEmissiveColor_OutputName_Offset);
            StringMarshaller.ToNative(OutputName_NativePtr,0,null,outputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectOutputToEmissiveColor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectOutputToEmissiveColor_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectOutputToCloth
    static readonly IntPtr ConnectOutputToCloth_NativeFunction;
    static readonly int ConnectOutputToCloth_ParamsSize;
    static readonly int ConnectOutputToCloth_ExpressionNodeUid_Offset;
    static readonly int ConnectOutputToCloth_OutputName_Offset;
    static readonly int ConnectOutputToCloth_ReturnValue_Offset;
    
    public bool ConnectOutputToCloth(string expressionNodeUid, string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectOutputToCloth_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToCloth_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToCloth_OutputName_Offset);
            StringMarshaller.ToNative(OutputName_NativePtr,0,null,outputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectOutputToCloth_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectOutputToCloth_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectOutputToClearCoatRoughness
    static readonly IntPtr ConnectOutputToClearCoatRoughness_NativeFunction;
    static readonly int ConnectOutputToClearCoatRoughness_ParamsSize;
    static readonly int ConnectOutputToClearCoatRoughness_ExpressionNodeUid_Offset;
    static readonly int ConnectOutputToClearCoatRoughness_OutputName_Offset;
    static readonly int ConnectOutputToClearCoatRoughness_ReturnValue_Offset;
    
    public bool ConnectOutputToClearCoatRoughness(string expressionNodeUid, string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectOutputToClearCoatRoughness_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToClearCoatRoughness_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToClearCoatRoughness_OutputName_Offset);
            StringMarshaller.ToNative(OutputName_NativePtr,0,null,outputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectOutputToClearCoatRoughness_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectOutputToClearCoatRoughness_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectOutputToClearCoatNormal
    static readonly IntPtr ConnectOutputToClearCoatNormal_NativeFunction;
    static readonly int ConnectOutputToClearCoatNormal_ParamsSize;
    static readonly int ConnectOutputToClearCoatNormal_ExpressionNodeUid_Offset;
    static readonly int ConnectOutputToClearCoatNormal_OutputName_Offset;
    static readonly int ConnectOutputToClearCoatNormal_ReturnValue_Offset;
    
    public bool ConnectOutputToClearCoatNormal(string expressionNodeUid, string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectOutputToClearCoatNormal_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToClearCoatNormal_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToClearCoatNormal_OutputName_Offset);
            StringMarshaller.ToNative(OutputName_NativePtr,0,null,outputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectOutputToClearCoatNormal_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectOutputToClearCoatNormal_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectOutputToClearCoat
    static readonly IntPtr ConnectOutputToClearCoat_NativeFunction;
    static readonly int ConnectOutputToClearCoat_ParamsSize;
    static readonly int ConnectOutputToClearCoat_ExpressionNodeUid_Offset;
    static readonly int ConnectOutputToClearCoat_OutputName_Offset;
    static readonly int ConnectOutputToClearCoat_ReturnValue_Offset;
    
    public bool ConnectOutputToClearCoat(string expressionNodeUid, string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectOutputToClearCoat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToClearCoat_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToClearCoat_OutputName_Offset);
            StringMarshaller.ToNative(OutputName_NativePtr,0,null,outputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectOutputToClearCoat_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectOutputToClearCoat_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectOutputToBaseColor
    static readonly IntPtr ConnectOutputToBaseColor_NativeFunction;
    static readonly int ConnectOutputToBaseColor_ParamsSize;
    static readonly int ConnectOutputToBaseColor_ExpressionNodeUid_Offset;
    static readonly int ConnectOutputToBaseColor_OutputName_Offset;
    static readonly int ConnectOutputToBaseColor_ReturnValue_Offset;
    
    public bool ConnectOutputToBaseColor(string expressionNodeUid, string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectOutputToBaseColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToBaseColor_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToBaseColor_OutputName_Offset);
            StringMarshaller.ToNative(OutputName_NativePtr,0,null,outputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectOutputToBaseColor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectOutputToBaseColor_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFactoryNode:ConnectOutputToAnisotropy
    static readonly IntPtr ConnectOutputToAnisotropy_NativeFunction;
    static readonly int ConnectOutputToAnisotropy_ParamsSize;
    static readonly int ConnectOutputToAnisotropy_ExpressionNodeUid_Offset;
    static readonly int ConnectOutputToAnisotropy_OutputName_Offset;
    static readonly int ConnectOutputToAnisotropy_ReturnValue_Offset;
    
    public bool ConnectOutputToAnisotropy(string expressionNodeUid, string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectOutputToAnisotropy_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToAnisotropy_ExpressionNodeUid_Offset);
            StringMarshaller.ToNative(ExpressionNodeUid_NativePtr,0,null,expressionNodeUid);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOutputToAnisotropy_OutputName_Offset);
            StringMarshaller.ToNative(OutputName_NativePtr,0,null,outputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectOutputToAnisotropy_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectOutputToAnisotropy_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    
}
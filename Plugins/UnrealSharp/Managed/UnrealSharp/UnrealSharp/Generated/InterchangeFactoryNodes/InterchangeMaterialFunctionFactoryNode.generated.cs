// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.InterchangeFactoryNodes;

[UClass]
public partial class InterchangeMaterialFunctionFactoryNode : UnrealSharp.InterchangeFactoryNodes.InterchangeBaseMaterialFactoryNode
{
    
    static InterchangeMaterialFunctionFactoryNode()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InterchangeMaterialFunctionFactoryNode");
        
        
        GetObjectClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetObjectClass");
        GetObjectClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetObjectClass_NativeFunction);
        GetObjectClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetObjectClass_NativeFunction, "ReturnValue");
        GetInputConnection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInputConnection");
        GetInputConnection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInputConnection_NativeFunction);
        GetInputConnection_InputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputConnection_NativeFunction, "InputName");
        GetInputConnection_ExpressionNodeUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputConnection_NativeFunction, "ExpressionNodeUid");
        GetInputConnection_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputConnection_NativeFunction, "OutputName");
        GetInputConnection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputConnection_NativeFunction, "ReturnValue");
        
        
    }
    
    protected InterchangeMaterialFunctionFactoryNode(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFunctionFactoryNode:GetObjectClass
    static readonly IntPtr GetObjectClass_NativeFunction;
    static readonly int GetObjectClass_ParamsSize;
    static readonly int GetObjectClass_ReturnValue_Offset;
    
    public SubclassOf<UnrealSharp.CoreUObject.Object> GetObjectClass()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetObjectClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetObjectClass_NativeFunction, ParamsBuffer);
            
            SubclassOf<UnrealSharp.CoreUObject.Object> returnValue;
            returnValue = SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetObjectClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeMaterialFunctionFactoryNode:GetInputConnection
    static readonly IntPtr GetInputConnection_NativeFunction;
    static readonly int GetInputConnection_ParamsSize;
    static readonly int GetInputConnection_InputName_Offset;
    static readonly int GetInputConnection_ExpressionNodeUid_Offset;
    static readonly int GetInputConnection_OutputName_Offset;
    static readonly int GetInputConnection_ReturnValue_Offset;
    
    public bool GetInputConnection(string inputName, out string expressionNodeUid, out string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInputConnection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InputName_NativePtr = IntPtr.Add(ParamsBuffer,GetInputConnection_InputName_Offset);
            StringMarshaller.ToNative(InputName_NativePtr,0,null,inputName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetInputConnection_NativeFunction, ParamsBuffer);
            
            IntPtr ExpressionNodeUid_NativePtr = IntPtr.Add(ParamsBuffer,GetInputConnection_ExpressionNodeUid_Offset);
            expressionNodeUid = StringMarshaller.FromNative(ExpressionNodeUid_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExpressionNodeUid_NativePtr, 0);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,GetInputConnection_OutputName_Offset);
            outputName = StringMarshaller.FromNative(OutputName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetInputConnection_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    
}
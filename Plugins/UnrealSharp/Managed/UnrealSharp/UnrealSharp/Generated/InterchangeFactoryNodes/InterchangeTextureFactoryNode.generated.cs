// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.InterchangeFactoryNodes;

[UClass]
abstract public partial class InterchangeTextureFactoryNode : UnrealSharp.InterchangeCore.InterchangeFactoryBaseNode
{
    
    static InterchangeTextureFactoryNode()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InterchangeTextureFactoryNode");
        
        
        SetCustomVirtualTextureStreaming_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomVirtualTextureStreaming");
        SetCustomVirtualTextureStreaming_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomVirtualTextureStreaming_NativeFunction);
        SetCustomVirtualTextureStreaming_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomVirtualTextureStreaming_NativeFunction, "AttributeValue");
        SetCustomVirtualTextureStreaming_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomVirtualTextureStreaming_NativeFunction, "bAddApplyDelegate");
        SetCustomVirtualTextureStreaming_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomVirtualTextureStreaming_NativeFunction, "ReturnValue");
        SetCustomTranslatedTextureNodeUid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomTranslatedTextureNodeUid");
        SetCustomTranslatedTextureNodeUid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomTranslatedTextureNodeUid_NativeFunction);
        SetCustomTranslatedTextureNodeUid_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomTranslatedTextureNodeUid_NativeFunction, "AttributeValue");
        SetCustomTranslatedTextureNodeUid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomTranslatedTextureNodeUid_NativeFunction, "ReturnValue");
        SetCustomSRGB_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomSRGB");
        SetCustomSRGB_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomSRGB_NativeFunction);
        SetCustomSRGB_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomSRGB_NativeFunction, "AttributeValue");
        SetCustomSRGB_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomSRGB_NativeFunction, "bAddApplyDelegate");
        SetCustomSRGB_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomSRGB_NativeFunction, "ReturnValue");
        SetCustomPreferCompressedSourceData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomPreferCompressedSourceData");
        SetCustomPreferCompressedSourceData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomPreferCompressedSourceData_NativeFunction);
        SetCustomPreferCompressedSourceData_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomPreferCompressedSourceData_NativeFunction, "AttributeValue");
        SetCustomPreferCompressedSourceData_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomPreferCompressedSourceData_NativeFunction, "ReturnValue");
        SetCustomPowerOfTwoMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomPowerOfTwoMode");
        SetCustomPowerOfTwoMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomPowerOfTwoMode_NativeFunction);
        SetCustomPowerOfTwoMode_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomPowerOfTwoMode_NativeFunction, "AttributeValue");
        SetCustomPowerOfTwoMode_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomPowerOfTwoMode_NativeFunction, "bAddApplyDelegate");
        SetCustomPowerOfTwoMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomPowerOfTwoMode_NativeFunction, "ReturnValue");
        SetCustomPaddingColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomPaddingColor");
        SetCustomPaddingColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomPaddingColor_NativeFunction);
        SetCustomPaddingColor_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomPaddingColor_NativeFunction, "AttributeValue");
        SetCustomPaddingColor_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomPaddingColor_NativeFunction, "bAddApplyDelegate");
        SetCustomPaddingColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomPaddingColor_NativeFunction, "ReturnValue");
        SetCustomMipLoadOptions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomMipLoadOptions");
        SetCustomMipLoadOptions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomMipLoadOptions_NativeFunction);
        SetCustomMipLoadOptions_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomMipLoadOptions_NativeFunction, "AttributeValue");
        SetCustomMipLoadOptions_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomMipLoadOptions_NativeFunction, "bAddApplyDelegate");
        SetCustomMipLoadOptions_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomMipLoadOptions_NativeFunction, "ReturnValue");
        SetCustomMipGenSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomMipGenSettings");
        SetCustomMipGenSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomMipGenSettings_NativeFunction);
        SetCustomMipGenSettings_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomMipGenSettings_NativeFunction, "AttributeValue");
        SetCustomMipGenSettings_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomMipGenSettings_NativeFunction, "bAddApplyDelegate");
        SetCustomMipGenSettings_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomMipGenSettings_NativeFunction, "ReturnValue");
        SetCustomMaxTextureSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomMaxTextureSize");
        SetCustomMaxTextureSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomMaxTextureSize_NativeFunction);
        SetCustomMaxTextureSize_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomMaxTextureSize_NativeFunction, "AttributeValue");
        SetCustomMaxTextureSize_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomMaxTextureSize_NativeFunction, "bAddApplyDelegate");
        SetCustomMaxTextureSize_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomMaxTextureSize_NativeFunction, "ReturnValue");
        SetCustomLossyCompressionAmount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomLossyCompressionAmount");
        SetCustomLossyCompressionAmount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomLossyCompressionAmount_NativeFunction);
        SetCustomLossyCompressionAmount_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomLossyCompressionAmount_NativeFunction, "AttributeValue");
        SetCustomLossyCompressionAmount_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomLossyCompressionAmount_NativeFunction, "bAddApplyDelegate");
        SetCustomLossyCompressionAmount_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomLossyCompressionAmount_NativeFunction, "ReturnValue");
        SetCustomLODGroup_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomLODGroup");
        SetCustomLODGroup_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomLODGroup_NativeFunction);
        SetCustomLODGroup_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomLODGroup_NativeFunction, "AttributeValue");
        SetCustomLODGroup_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomLODGroup_NativeFunction, "bAddApplyDelegate");
        SetCustomLODGroup_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomLODGroup_NativeFunction, "ReturnValue");
        SetCustomLODBias_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomLODBias");
        SetCustomLODBias_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomLODBias_NativeFunction);
        SetCustomLODBias_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomLODBias_NativeFunction, "AttributeValue");
        SetCustomLODBias_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomLODBias_NativeFunction, "bAddApplyDelegate");
        SetCustomLODBias_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomLODBias_NativeFunction, "ReturnValue");
        SetCustomFilter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomFilter");
        SetCustomFilter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomFilter_NativeFunction);
        SetCustomFilter_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomFilter_NativeFunction, "AttributeValue");
        SetCustomFilter_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomFilter_NativeFunction, "bAddApplyDelegate");
        SetCustomFilter_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomFilter_NativeFunction, "ReturnValue");
        SetCustomDownscaleOptions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomDownscaleOptions");
        SetCustomDownscaleOptions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomDownscaleOptions_NativeFunction);
        SetCustomDownscaleOptions_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomDownscaleOptions_NativeFunction, "AttributeValue");
        SetCustomDownscaleOptions_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomDownscaleOptions_NativeFunction, "bAddApplyDelegate");
        SetCustomDownscaleOptions_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomDownscaleOptions_NativeFunction, "ReturnValue");
        SetCustomDownscale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomDownscale");
        SetCustomDownscale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomDownscale_NativeFunction);
        SetCustomDownscale_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomDownscale_NativeFunction, "AttributeValue");
        SetCustomDownscale_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomDownscale_NativeFunction, "bAddApplyDelegate");
        SetCustomDownscale_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomDownscale_NativeFunction, "ReturnValue");
        SetCustomDeferCompression_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomDeferCompression");
        SetCustomDeferCompression_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomDeferCompression_NativeFunction);
        SetCustomDeferCompression_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomDeferCompression_NativeFunction, "AttributeValue");
        SetCustomDeferCompression_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomDeferCompression_NativeFunction, "bAddApplyDelegate");
        SetCustomDeferCompression_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomDeferCompression_NativeFunction, "ReturnValue");
        SetCustomCompressionSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomCompressionSettings");
        SetCustomCompressionSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomCompressionSettings_NativeFunction);
        SetCustomCompressionSettings_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomCompressionSettings_NativeFunction, "AttributeValue");
        SetCustomCompressionSettings_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomCompressionSettings_NativeFunction, "bAddApplyDelegate");
        SetCustomCompressionSettings_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomCompressionSettings_NativeFunction, "ReturnValue");
        SetCustomCompressionQuality_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomCompressionQuality");
        SetCustomCompressionQuality_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomCompressionQuality_NativeFunction);
        SetCustomCompressionQuality_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomCompressionQuality_NativeFunction, "AttributeValue");
        SetCustomCompressionQuality_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomCompressionQuality_NativeFunction, "bAddApplyDelegate");
        SetCustomCompressionQuality_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomCompressionQuality_NativeFunction, "ReturnValue");
        SetCustomCompressionNoAlpha_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomCompressionNoAlpha");
        SetCustomCompressionNoAlpha_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomCompressionNoAlpha_NativeFunction);
        SetCustomCompressionNoAlpha_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomCompressionNoAlpha_NativeFunction, "AttributeValue");
        SetCustomCompressionNoAlpha_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomCompressionNoAlpha_NativeFunction, "bAddApplyDelegate");
        SetCustomCompressionNoAlpha_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomCompressionNoAlpha_NativeFunction, "ReturnValue");
        SetCustomCompositeTextureMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomCompositeTextureMode");
        SetCustomCompositeTextureMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomCompositeTextureMode_NativeFunction);
        SetCustomCompositeTextureMode_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomCompositeTextureMode_NativeFunction, "AttributeValue");
        SetCustomCompositeTextureMode_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomCompositeTextureMode_NativeFunction, "bAddApplyDelegate");
        SetCustomCompositeTextureMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomCompositeTextureMode_NativeFunction, "ReturnValue");
        SetCustomCompositePower_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomCompositePower");
        SetCustomCompositePower_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomCompositePower_NativeFunction);
        SetCustomCompositePower_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomCompositePower_NativeFunction, "AttributeValue");
        SetCustomCompositePower_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomCompositePower_NativeFunction, "bAddApplyDelegate");
        SetCustomCompositePower_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomCompositePower_NativeFunction, "ReturnValue");
        SetCustomChromaKeyThreshold_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomChromaKeyThreshold");
        SetCustomChromaKeyThreshold_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomChromaKeyThreshold_NativeFunction);
        SetCustomChromaKeyThreshold_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomChromaKeyThreshold_NativeFunction, "AttributeValue");
        SetCustomChromaKeyThreshold_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomChromaKeyThreshold_NativeFunction, "bAddApplyDelegate");
        SetCustomChromaKeyThreshold_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomChromaKeyThreshold_NativeFunction, "ReturnValue");
        SetCustomChromaKeyColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomChromaKeyColor");
        SetCustomChromaKeyColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomChromaKeyColor_NativeFunction);
        SetCustomChromaKeyColor_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomChromaKeyColor_NativeFunction, "AttributeValue");
        SetCustomChromaKeyColor_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomChromaKeyColor_NativeFunction, "bAddApplyDelegate");
        SetCustomChromaKeyColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomChromaKeyColor_NativeFunction, "ReturnValue");
        SetCustombUseLegacyGamma_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustombUseLegacyGamma");
        SetCustombUseLegacyGamma_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustombUseLegacyGamma_NativeFunction);
        SetCustombUseLegacyGamma_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustombUseLegacyGamma_NativeFunction, "AttributeValue");
        SetCustombUseLegacyGamma_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustombUseLegacyGamma_NativeFunction, "bAddApplyDelegate");
        SetCustombUseLegacyGamma_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustombUseLegacyGamma_NativeFunction, "ReturnValue");
        SetCustombPreserveBorder_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustombPreserveBorder");
        SetCustombPreserveBorder_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustombPreserveBorder_NativeFunction);
        SetCustombPreserveBorder_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustombPreserveBorder_NativeFunction, "AttributeValue");
        SetCustombPreserveBorder_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustombPreserveBorder_NativeFunction, "bAddApplyDelegate");
        SetCustombPreserveBorder_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustombPreserveBorder_NativeFunction, "ReturnValue");
        SetCustombFlipGreenChannel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustombFlipGreenChannel");
        SetCustombFlipGreenChannel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustombFlipGreenChannel_NativeFunction);
        SetCustombFlipGreenChannel_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustombFlipGreenChannel_NativeFunction, "AttributeValue");
        SetCustombFlipGreenChannel_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustombFlipGreenChannel_NativeFunction, "bAddApplyDelegate");
        SetCustombFlipGreenChannel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustombFlipGreenChannel_NativeFunction, "ReturnValue");
        SetCustombDoScaleMipsForAlphaCoverage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustombDoScaleMipsForAlphaCoverage");
        SetCustombDoScaleMipsForAlphaCoverage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustombDoScaleMipsForAlphaCoverage_NativeFunction);
        SetCustombDoScaleMipsForAlphaCoverage_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustombDoScaleMipsForAlphaCoverage_NativeFunction, "AttributeValue");
        SetCustombDoScaleMipsForAlphaCoverage_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustombDoScaleMipsForAlphaCoverage_NativeFunction, "bAddApplyDelegate");
        SetCustombDoScaleMipsForAlphaCoverage_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustombDoScaleMipsForAlphaCoverage_NativeFunction, "ReturnValue");
        SetCustombChromaKeyTexture_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustombChromaKeyTexture");
        SetCustombChromaKeyTexture_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustombChromaKeyTexture_NativeFunction);
        SetCustombChromaKeyTexture_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustombChromaKeyTexture_NativeFunction, "AttributeValue");
        SetCustombChromaKeyTexture_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustombChromaKeyTexture_NativeFunction, "bAddApplyDelegate");
        SetCustombChromaKeyTexture_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustombChromaKeyTexture_NativeFunction, "ReturnValue");
        SetCustomAlphaCoverageThresholds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomAlphaCoverageThresholds");
        SetCustomAlphaCoverageThresholds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomAlphaCoverageThresholds_NativeFunction);
        SetCustomAlphaCoverageThresholds_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAlphaCoverageThresholds_NativeFunction, "AttributeValue");
        SetCustomAlphaCoverageThresholds_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAlphaCoverageThresholds_NativeFunction, "bAddApplyDelegate");
        SetCustomAlphaCoverageThresholds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAlphaCoverageThresholds_NativeFunction, "ReturnValue");
        SetCustomAllowNonPowerOfTwo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomAllowNonPowerOfTwo");
        SetCustomAllowNonPowerOfTwo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomAllowNonPowerOfTwo_NativeFunction);
        SetCustomAllowNonPowerOfTwo_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAllowNonPowerOfTwo_NativeFunction, "AttributeValue");
        SetCustomAllowNonPowerOfTwo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAllowNonPowerOfTwo_NativeFunction, "ReturnValue");
        SetCustomAdjustVibrance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomAdjustVibrance");
        SetCustomAdjustVibrance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomAdjustVibrance_NativeFunction);
        SetCustomAdjustVibrance_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustVibrance_NativeFunction, "AttributeValue");
        SetCustomAdjustVibrance_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustVibrance_NativeFunction, "bAddApplyDelegate");
        SetCustomAdjustVibrance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustVibrance_NativeFunction, "ReturnValue");
        SetCustomAdjustSaturation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomAdjustSaturation");
        SetCustomAdjustSaturation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomAdjustSaturation_NativeFunction);
        SetCustomAdjustSaturation_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustSaturation_NativeFunction, "AttributeValue");
        SetCustomAdjustSaturation_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustSaturation_NativeFunction, "bAddApplyDelegate");
        SetCustomAdjustSaturation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustSaturation_NativeFunction, "ReturnValue");
        SetCustomAdjustRGBCurve_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomAdjustRGBCurve");
        SetCustomAdjustRGBCurve_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomAdjustRGBCurve_NativeFunction);
        SetCustomAdjustRGBCurve_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustRGBCurve_NativeFunction, "AttributeValue");
        SetCustomAdjustRGBCurve_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustRGBCurve_NativeFunction, "bAddApplyDelegate");
        SetCustomAdjustRGBCurve_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustRGBCurve_NativeFunction, "ReturnValue");
        SetCustomAdjustMinAlpha_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomAdjustMinAlpha");
        SetCustomAdjustMinAlpha_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomAdjustMinAlpha_NativeFunction);
        SetCustomAdjustMinAlpha_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustMinAlpha_NativeFunction, "AttributeValue");
        SetCustomAdjustMinAlpha_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustMinAlpha_NativeFunction, "bAddApplyDelegate");
        SetCustomAdjustMinAlpha_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustMinAlpha_NativeFunction, "ReturnValue");
        SetCustomAdjustMaxAlpha_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomAdjustMaxAlpha");
        SetCustomAdjustMaxAlpha_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomAdjustMaxAlpha_NativeFunction);
        SetCustomAdjustMaxAlpha_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustMaxAlpha_NativeFunction, "AttributeValue");
        SetCustomAdjustMaxAlpha_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustMaxAlpha_NativeFunction, "bAddApplyDelegate");
        SetCustomAdjustMaxAlpha_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustMaxAlpha_NativeFunction, "ReturnValue");
        SetCustomAdjustHue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomAdjustHue");
        SetCustomAdjustHue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomAdjustHue_NativeFunction);
        SetCustomAdjustHue_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustHue_NativeFunction, "AttributeValue");
        SetCustomAdjustHue_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustHue_NativeFunction, "bAddApplyDelegate");
        SetCustomAdjustHue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustHue_NativeFunction, "ReturnValue");
        SetCustomAdjustBrightnessCurve_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomAdjustBrightnessCurve");
        SetCustomAdjustBrightnessCurve_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomAdjustBrightnessCurve_NativeFunction);
        SetCustomAdjustBrightnessCurve_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustBrightnessCurve_NativeFunction, "AttributeValue");
        SetCustomAdjustBrightnessCurve_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustBrightnessCurve_NativeFunction, "bAddApplyDelegate");
        SetCustomAdjustBrightnessCurve_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustBrightnessCurve_NativeFunction, "ReturnValue");
        SetCustomAdjustBrightness_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomAdjustBrightness");
        SetCustomAdjustBrightness_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomAdjustBrightness_NativeFunction);
        SetCustomAdjustBrightness_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustBrightness_NativeFunction, "AttributeValue");
        SetCustomAdjustBrightness_bAddApplyDelegate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustBrightness_NativeFunction, "bAddApplyDelegate");
        SetCustomAdjustBrightness_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAdjustBrightness_NativeFunction, "ReturnValue");
        InitializeTextureNode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "InitializeTextureNode");
        InitializeTextureNode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(InitializeTextureNode_NativeFunction);
        InitializeTextureNode_UniqueID_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InitializeTextureNode_NativeFunction, "UniqueID");
        InitializeTextureNode_DisplayLabel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InitializeTextureNode_NativeFunction, "DisplayLabel");
        InitializeTextureNode_InAssetName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InitializeTextureNode_NativeFunction, "InAssetName");
        GetObjectClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetObjectClass");
        GetObjectClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetObjectClass_NativeFunction);
        GetObjectClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetObjectClass_NativeFunction, "ReturnValue");
        GetCustomVirtualTextureStreaming_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomVirtualTextureStreaming");
        GetCustomVirtualTextureStreaming_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomVirtualTextureStreaming_NativeFunction);
        GetCustomVirtualTextureStreaming_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomVirtualTextureStreaming_NativeFunction, "AttributeValue");
        GetCustomVirtualTextureStreaming_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomVirtualTextureStreaming_NativeFunction, "ReturnValue");
        GetCustomTranslatedTextureNodeUid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomTranslatedTextureNodeUid");
        GetCustomTranslatedTextureNodeUid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomTranslatedTextureNodeUid_NativeFunction);
        GetCustomTranslatedTextureNodeUid_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomTranslatedTextureNodeUid_NativeFunction, "AttributeValue");
        GetCustomTranslatedTextureNodeUid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomTranslatedTextureNodeUid_NativeFunction, "ReturnValue");
        GetCustomSRGB_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomSRGB");
        GetCustomSRGB_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomSRGB_NativeFunction);
        GetCustomSRGB_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomSRGB_NativeFunction, "AttributeValue");
        GetCustomSRGB_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomSRGB_NativeFunction, "ReturnValue");
        GetCustomPreferCompressedSourceData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomPreferCompressedSourceData");
        GetCustomPreferCompressedSourceData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomPreferCompressedSourceData_NativeFunction);
        GetCustomPreferCompressedSourceData_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomPreferCompressedSourceData_NativeFunction, "AttributeValue");
        GetCustomPreferCompressedSourceData_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomPreferCompressedSourceData_NativeFunction, "ReturnValue");
        GetCustomPowerOfTwoMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomPowerOfTwoMode");
        GetCustomPowerOfTwoMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomPowerOfTwoMode_NativeFunction);
        GetCustomPowerOfTwoMode_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomPowerOfTwoMode_NativeFunction, "AttributeValue");
        GetCustomPowerOfTwoMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomPowerOfTwoMode_NativeFunction, "ReturnValue");
        GetCustomPaddingColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomPaddingColor");
        GetCustomPaddingColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomPaddingColor_NativeFunction);
        GetCustomPaddingColor_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomPaddingColor_NativeFunction, "AttributeValue");
        GetCustomPaddingColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomPaddingColor_NativeFunction, "ReturnValue");
        GetCustomMipLoadOptions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomMipLoadOptions");
        GetCustomMipLoadOptions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomMipLoadOptions_NativeFunction);
        GetCustomMipLoadOptions_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomMipLoadOptions_NativeFunction, "AttributeValue");
        GetCustomMipLoadOptions_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomMipLoadOptions_NativeFunction, "ReturnValue");
        GetCustomMipGenSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomMipGenSettings");
        GetCustomMipGenSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomMipGenSettings_NativeFunction);
        GetCustomMipGenSettings_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomMipGenSettings_NativeFunction, "AttributeValue");
        GetCustomMipGenSettings_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomMipGenSettings_NativeFunction, "ReturnValue");
        GetCustomMaxTextureSize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomMaxTextureSize");
        GetCustomMaxTextureSize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomMaxTextureSize_NativeFunction);
        GetCustomMaxTextureSize_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomMaxTextureSize_NativeFunction, "AttributeValue");
        GetCustomMaxTextureSize_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomMaxTextureSize_NativeFunction, "ReturnValue");
        GetCustomLossyCompressionAmount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomLossyCompressionAmount");
        GetCustomLossyCompressionAmount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomLossyCompressionAmount_NativeFunction);
        GetCustomLossyCompressionAmount_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomLossyCompressionAmount_NativeFunction, "AttributeValue");
        GetCustomLossyCompressionAmount_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomLossyCompressionAmount_NativeFunction, "ReturnValue");
        GetCustomLODGroup_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomLODGroup");
        GetCustomLODGroup_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomLODGroup_NativeFunction);
        GetCustomLODGroup_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomLODGroup_NativeFunction, "AttributeValue");
        GetCustomLODGroup_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomLODGroup_NativeFunction, "ReturnValue");
        GetCustomLODBias_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomLODBias");
        GetCustomLODBias_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomLODBias_NativeFunction);
        GetCustomLODBias_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomLODBias_NativeFunction, "AttributeValue");
        GetCustomLODBias_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomLODBias_NativeFunction, "ReturnValue");
        GetCustomFilter_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomFilter");
        GetCustomFilter_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomFilter_NativeFunction);
        GetCustomFilter_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomFilter_NativeFunction, "AttributeValue");
        GetCustomFilter_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomFilter_NativeFunction, "ReturnValue");
        GetCustomDownscaleOptions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomDownscaleOptions");
        GetCustomDownscaleOptions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomDownscaleOptions_NativeFunction);
        GetCustomDownscaleOptions_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomDownscaleOptions_NativeFunction, "AttributeValue");
        GetCustomDownscaleOptions_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomDownscaleOptions_NativeFunction, "ReturnValue");
        GetCustomDownscale_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomDownscale");
        GetCustomDownscale_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomDownscale_NativeFunction);
        GetCustomDownscale_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomDownscale_NativeFunction, "AttributeValue");
        GetCustomDownscale_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomDownscale_NativeFunction, "ReturnValue");
        GetCustomDeferCompression_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomDeferCompression");
        GetCustomDeferCompression_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomDeferCompression_NativeFunction);
        GetCustomDeferCompression_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomDeferCompression_NativeFunction, "AttributeValue");
        GetCustomDeferCompression_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomDeferCompression_NativeFunction, "ReturnValue");
        GetCustomCompressionSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomCompressionSettings");
        GetCustomCompressionSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomCompressionSettings_NativeFunction);
        GetCustomCompressionSettings_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomCompressionSettings_NativeFunction, "AttributeValue");
        GetCustomCompressionSettings_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomCompressionSettings_NativeFunction, "ReturnValue");
        GetCustomCompressionQuality_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomCompressionQuality");
        GetCustomCompressionQuality_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomCompressionQuality_NativeFunction);
        GetCustomCompressionQuality_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomCompressionQuality_NativeFunction, "AttributeValue");
        GetCustomCompressionQuality_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomCompressionQuality_NativeFunction, "ReturnValue");
        GetCustomCompressionNoAlpha_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomCompressionNoAlpha");
        GetCustomCompressionNoAlpha_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomCompressionNoAlpha_NativeFunction);
        GetCustomCompressionNoAlpha_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomCompressionNoAlpha_NativeFunction, "AttributeValue");
        GetCustomCompressionNoAlpha_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomCompressionNoAlpha_NativeFunction, "ReturnValue");
        GetCustomCompositeTextureMode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomCompositeTextureMode");
        GetCustomCompositeTextureMode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomCompositeTextureMode_NativeFunction);
        GetCustomCompositeTextureMode_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomCompositeTextureMode_NativeFunction, "AttributeValue");
        GetCustomCompositeTextureMode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomCompositeTextureMode_NativeFunction, "ReturnValue");
        GetCustomCompositePower_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomCompositePower");
        GetCustomCompositePower_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomCompositePower_NativeFunction);
        GetCustomCompositePower_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomCompositePower_NativeFunction, "AttributeValue");
        GetCustomCompositePower_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomCompositePower_NativeFunction, "ReturnValue");
        GetCustomChromaKeyThreshold_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomChromaKeyThreshold");
        GetCustomChromaKeyThreshold_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomChromaKeyThreshold_NativeFunction);
        GetCustomChromaKeyThreshold_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomChromaKeyThreshold_NativeFunction, "AttributeValue");
        GetCustomChromaKeyThreshold_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomChromaKeyThreshold_NativeFunction, "ReturnValue");
        GetCustomChromaKeyColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomChromaKeyColor");
        GetCustomChromaKeyColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomChromaKeyColor_NativeFunction);
        GetCustomChromaKeyColor_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomChromaKeyColor_NativeFunction, "AttributeValue");
        GetCustomChromaKeyColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomChromaKeyColor_NativeFunction, "ReturnValue");
        GetCustombUseLegacyGamma_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustombUseLegacyGamma");
        GetCustombUseLegacyGamma_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustombUseLegacyGamma_NativeFunction);
        GetCustombUseLegacyGamma_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustombUseLegacyGamma_NativeFunction, "AttributeValue");
        GetCustombUseLegacyGamma_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustombUseLegacyGamma_NativeFunction, "ReturnValue");
        GetCustombPreserveBorder_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustombPreserveBorder");
        GetCustombPreserveBorder_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustombPreserveBorder_NativeFunction);
        GetCustombPreserveBorder_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustombPreserveBorder_NativeFunction, "AttributeValue");
        GetCustombPreserveBorder_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustombPreserveBorder_NativeFunction, "ReturnValue");
        GetCustombFlipGreenChannel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustombFlipGreenChannel");
        GetCustombFlipGreenChannel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustombFlipGreenChannel_NativeFunction);
        GetCustombFlipGreenChannel_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustombFlipGreenChannel_NativeFunction, "AttributeValue");
        GetCustombFlipGreenChannel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustombFlipGreenChannel_NativeFunction, "ReturnValue");
        GetCustombDoScaleMipsForAlphaCoverage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustombDoScaleMipsForAlphaCoverage");
        GetCustombDoScaleMipsForAlphaCoverage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustombDoScaleMipsForAlphaCoverage_NativeFunction);
        GetCustombDoScaleMipsForAlphaCoverage_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustombDoScaleMipsForAlphaCoverage_NativeFunction, "AttributeValue");
        GetCustombDoScaleMipsForAlphaCoverage_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustombDoScaleMipsForAlphaCoverage_NativeFunction, "ReturnValue");
        GetCustombChromaKeyTexture_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustombChromaKeyTexture");
        GetCustombChromaKeyTexture_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustombChromaKeyTexture_NativeFunction);
        GetCustombChromaKeyTexture_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustombChromaKeyTexture_NativeFunction, "AttributeValue");
        GetCustombChromaKeyTexture_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustombChromaKeyTexture_NativeFunction, "ReturnValue");
        GetCustomAlphaCoverageThresholds_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomAlphaCoverageThresholds");
        GetCustomAlphaCoverageThresholds_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomAlphaCoverageThresholds_NativeFunction);
        GetCustomAlphaCoverageThresholds_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAlphaCoverageThresholds_NativeFunction, "AttributeValue");
        GetCustomAlphaCoverageThresholds_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAlphaCoverageThresholds_NativeFunction, "ReturnValue");
        GetCustomAllowNonPowerOfTwo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomAllowNonPowerOfTwo");
        GetCustomAllowNonPowerOfTwo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomAllowNonPowerOfTwo_NativeFunction);
        GetCustomAllowNonPowerOfTwo_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAllowNonPowerOfTwo_NativeFunction, "AttributeValue");
        GetCustomAllowNonPowerOfTwo_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAllowNonPowerOfTwo_NativeFunction, "ReturnValue");
        GetCustomAdjustVibrance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomAdjustVibrance");
        GetCustomAdjustVibrance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomAdjustVibrance_NativeFunction);
        GetCustomAdjustVibrance_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAdjustVibrance_NativeFunction, "AttributeValue");
        GetCustomAdjustVibrance_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAdjustVibrance_NativeFunction, "ReturnValue");
        GetCustomAdjustSaturation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomAdjustSaturation");
        GetCustomAdjustSaturation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomAdjustSaturation_NativeFunction);
        GetCustomAdjustSaturation_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAdjustSaturation_NativeFunction, "AttributeValue");
        GetCustomAdjustSaturation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAdjustSaturation_NativeFunction, "ReturnValue");
        GetCustomAdjustRGBCurve_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomAdjustRGBCurve");
        GetCustomAdjustRGBCurve_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomAdjustRGBCurve_NativeFunction);
        GetCustomAdjustRGBCurve_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAdjustRGBCurve_NativeFunction, "AttributeValue");
        GetCustomAdjustRGBCurve_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAdjustRGBCurve_NativeFunction, "ReturnValue");
        GetCustomAdjustMinAlpha_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomAdjustMinAlpha");
        GetCustomAdjustMinAlpha_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomAdjustMinAlpha_NativeFunction);
        GetCustomAdjustMinAlpha_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAdjustMinAlpha_NativeFunction, "AttributeValue");
        GetCustomAdjustMinAlpha_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAdjustMinAlpha_NativeFunction, "ReturnValue");
        GetCustomAdjustMaxAlpha_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomAdjustMaxAlpha");
        GetCustomAdjustMaxAlpha_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomAdjustMaxAlpha_NativeFunction);
        GetCustomAdjustMaxAlpha_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAdjustMaxAlpha_NativeFunction, "AttributeValue");
        GetCustomAdjustMaxAlpha_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAdjustMaxAlpha_NativeFunction, "ReturnValue");
        GetCustomAdjustHue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomAdjustHue");
        GetCustomAdjustHue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomAdjustHue_NativeFunction);
        GetCustomAdjustHue_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAdjustHue_NativeFunction, "AttributeValue");
        GetCustomAdjustHue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAdjustHue_NativeFunction, "ReturnValue");
        GetCustomAdjustBrightnessCurve_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomAdjustBrightnessCurve");
        GetCustomAdjustBrightnessCurve_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomAdjustBrightnessCurve_NativeFunction);
        GetCustomAdjustBrightnessCurve_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAdjustBrightnessCurve_NativeFunction, "AttributeValue");
        GetCustomAdjustBrightnessCurve_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAdjustBrightnessCurve_NativeFunction, "ReturnValue");
        GetCustomAdjustBrightness_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomAdjustBrightness");
        GetCustomAdjustBrightness_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomAdjustBrightness_NativeFunction);
        GetCustomAdjustBrightness_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAdjustBrightness_NativeFunction, "AttributeValue");
        GetCustomAdjustBrightness_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAdjustBrightness_NativeFunction, "ReturnValue");
        
        
    }
    
    protected InterchangeTextureFactoryNode(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomVirtualTextureStreaming
    static readonly IntPtr SetCustomVirtualTextureStreaming_NativeFunction;
    static readonly int SetCustomVirtualTextureStreaming_ParamsSize;
    static readonly int SetCustomVirtualTextureStreaming_AttributeValue_Offset;
    static readonly int SetCustomVirtualTextureStreaming_bAddApplyDelegate_Offset;
    static readonly int SetCustomVirtualTextureStreaming_ReturnValue_Offset;
    
    public bool SetCustomVirtualTextureStreaming(bool attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomVirtualTextureStreaming_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomVirtualTextureStreaming_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomVirtualTextureStreaming_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomVirtualTextureStreaming_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomVirtualTextureStreaming_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomTranslatedTextureNodeUid
    static readonly IntPtr SetCustomTranslatedTextureNodeUid_NativeFunction;
    static readonly int SetCustomTranslatedTextureNodeUid_ParamsSize;
    static readonly int SetCustomTranslatedTextureNodeUid_AttributeValue_Offset;
    static readonly int SetCustomTranslatedTextureNodeUid_ReturnValue_Offset;
    
    public bool SetCustomTranslatedTextureNodeUid(string attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomTranslatedTextureNodeUid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AttributeValue_NativePtr = IntPtr.Add(ParamsBuffer,SetCustomTranslatedTextureNodeUid_AttributeValue_Offset);
            StringMarshaller.ToNative(AttributeValue_NativePtr,0,null,attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomTranslatedTextureNodeUid_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomTranslatedTextureNodeUid_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AttributeValue_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomSRGB
    static readonly IntPtr SetCustomSRGB_NativeFunction;
    static readonly int SetCustomSRGB_ParamsSize;
    static readonly int SetCustomSRGB_AttributeValue_Offset;
    static readonly int SetCustomSRGB_bAddApplyDelegate_Offset;
    static readonly int SetCustomSRGB_ReturnValue_Offset;
    
    public bool SetCustomSRGB(bool attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomSRGB_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomSRGB_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomSRGB_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomSRGB_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomSRGB_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomPreferCompressedSourceData
    static readonly IntPtr SetCustomPreferCompressedSourceData_NativeFunction;
    static readonly int SetCustomPreferCompressedSourceData_ParamsSize;
    static readonly int SetCustomPreferCompressedSourceData_AttributeValue_Offset;
    static readonly int SetCustomPreferCompressedSourceData_ReturnValue_Offset;
    
    public bool SetCustomPreferCompressedSourceData(bool attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomPreferCompressedSourceData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomPreferCompressedSourceData_AttributeValue_Offset), 0, null, attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomPreferCompressedSourceData_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomPreferCompressedSourceData_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomPowerOfTwoMode
    static readonly IntPtr SetCustomPowerOfTwoMode_NativeFunction;
    static readonly int SetCustomPowerOfTwoMode_ParamsSize;
    static readonly int SetCustomPowerOfTwoMode_AttributeValue_Offset;
    static readonly int SetCustomPowerOfTwoMode_bAddApplyDelegate_Offset;
    static readonly int SetCustomPowerOfTwoMode_ReturnValue_Offset;
    
    public bool SetCustomPowerOfTwoMode(byte attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomPowerOfTwoMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomPowerOfTwoMode_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomPowerOfTwoMode_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomPowerOfTwoMode_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomPowerOfTwoMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomPaddingColor
    static readonly IntPtr SetCustomPaddingColor_NativeFunction;
    static readonly int SetCustomPaddingColor_ParamsSize;
    static readonly int SetCustomPaddingColor_AttributeValue_Offset;
    static readonly int SetCustomPaddingColor_bAddApplyDelegate_Offset;
    static readonly int SetCustomPaddingColor_ReturnValue_Offset;
    
    public bool SetCustomPaddingColor(UnrealSharp.CoreUObject.Color attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomPaddingColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomPaddingColor_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomPaddingColor_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomPaddingColor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomPaddingColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomMipLoadOptions
    static readonly IntPtr SetCustomMipLoadOptions_NativeFunction;
    static readonly int SetCustomMipLoadOptions_ParamsSize;
    static readonly int SetCustomMipLoadOptions_AttributeValue_Offset;
    static readonly int SetCustomMipLoadOptions_bAddApplyDelegate_Offset;
    static readonly int SetCustomMipLoadOptions_ReturnValue_Offset;
    
    public bool SetCustomMipLoadOptions(byte attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomMipLoadOptions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomMipLoadOptions_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomMipLoadOptions_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomMipLoadOptions_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomMipLoadOptions_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomMipGenSettings
    static readonly IntPtr SetCustomMipGenSettings_NativeFunction;
    static readonly int SetCustomMipGenSettings_ParamsSize;
    static readonly int SetCustomMipGenSettings_AttributeValue_Offset;
    static readonly int SetCustomMipGenSettings_bAddApplyDelegate_Offset;
    static readonly int SetCustomMipGenSettings_ReturnValue_Offset;
    
    public bool SetCustomMipGenSettings(byte attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomMipGenSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomMipGenSettings_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomMipGenSettings_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomMipGenSettings_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomMipGenSettings_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomMaxTextureSize
    static readonly IntPtr SetCustomMaxTextureSize_NativeFunction;
    static readonly int SetCustomMaxTextureSize_ParamsSize;
    static readonly int SetCustomMaxTextureSize_AttributeValue_Offset;
    static readonly int SetCustomMaxTextureSize_bAddApplyDelegate_Offset;
    static readonly int SetCustomMaxTextureSize_ReturnValue_Offset;
    
    public bool SetCustomMaxTextureSize(int attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomMaxTextureSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomMaxTextureSize_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomMaxTextureSize_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomMaxTextureSize_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomMaxTextureSize_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomLossyCompressionAmount
    static readonly IntPtr SetCustomLossyCompressionAmount_NativeFunction;
    static readonly int SetCustomLossyCompressionAmount_ParamsSize;
    static readonly int SetCustomLossyCompressionAmount_AttributeValue_Offset;
    static readonly int SetCustomLossyCompressionAmount_bAddApplyDelegate_Offset;
    static readonly int SetCustomLossyCompressionAmount_ReturnValue_Offset;
    
    public bool SetCustomLossyCompressionAmount(byte attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomLossyCompressionAmount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomLossyCompressionAmount_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomLossyCompressionAmount_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomLossyCompressionAmount_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomLossyCompressionAmount_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomLODGroup
    static readonly IntPtr SetCustomLODGroup_NativeFunction;
    static readonly int SetCustomLODGroup_ParamsSize;
    static readonly int SetCustomLODGroup_AttributeValue_Offset;
    static readonly int SetCustomLODGroup_bAddApplyDelegate_Offset;
    static readonly int SetCustomLODGroup_ReturnValue_Offset;
    
    public bool SetCustomLODGroup(byte attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomLODGroup_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomLODGroup_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomLODGroup_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomLODGroup_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomLODGroup_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomLODBias
    static readonly IntPtr SetCustomLODBias_NativeFunction;
    static readonly int SetCustomLODBias_ParamsSize;
    static readonly int SetCustomLODBias_AttributeValue_Offset;
    static readonly int SetCustomLODBias_bAddApplyDelegate_Offset;
    static readonly int SetCustomLODBias_ReturnValue_Offset;
    
    public bool SetCustomLODBias(int attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomLODBias_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomLODBias_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomLODBias_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomLODBias_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomLODBias_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomFilter
    static readonly IntPtr SetCustomFilter_NativeFunction;
    static readonly int SetCustomFilter_ParamsSize;
    static readonly int SetCustomFilter_AttributeValue_Offset;
    static readonly int SetCustomFilter_bAddApplyDelegate_Offset;
    static readonly int SetCustomFilter_ReturnValue_Offset;
    
    public bool SetCustomFilter(byte attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomFilter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomFilter_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomFilter_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomFilter_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomFilter_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomDownscaleOptions
    static readonly IntPtr SetCustomDownscaleOptions_NativeFunction;
    static readonly int SetCustomDownscaleOptions_ParamsSize;
    static readonly int SetCustomDownscaleOptions_AttributeValue_Offset;
    static readonly int SetCustomDownscaleOptions_bAddApplyDelegate_Offset;
    static readonly int SetCustomDownscaleOptions_ReturnValue_Offset;
    
    public bool SetCustomDownscaleOptions(byte attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomDownscaleOptions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomDownscaleOptions_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomDownscaleOptions_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomDownscaleOptions_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomDownscaleOptions_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomDownscale
    static readonly IntPtr SetCustomDownscale_NativeFunction;
    static readonly int SetCustomDownscale_ParamsSize;
    static readonly int SetCustomDownscale_AttributeValue_Offset;
    static readonly int SetCustomDownscale_bAddApplyDelegate_Offset;
    static readonly int SetCustomDownscale_ReturnValue_Offset;
    
    public bool SetCustomDownscale(float attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomDownscale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomDownscale_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomDownscale_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomDownscale_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomDownscale_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomDeferCompression
    static readonly IntPtr SetCustomDeferCompression_NativeFunction;
    static readonly int SetCustomDeferCompression_ParamsSize;
    static readonly int SetCustomDeferCompression_AttributeValue_Offset;
    static readonly int SetCustomDeferCompression_bAddApplyDelegate_Offset;
    static readonly int SetCustomDeferCompression_ReturnValue_Offset;
    
    public bool SetCustomDeferCompression(bool attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomDeferCompression_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomDeferCompression_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomDeferCompression_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomDeferCompression_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomDeferCompression_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomCompressionSettings
    static readonly IntPtr SetCustomCompressionSettings_NativeFunction;
    static readonly int SetCustomCompressionSettings_ParamsSize;
    static readonly int SetCustomCompressionSettings_AttributeValue_Offset;
    static readonly int SetCustomCompressionSettings_bAddApplyDelegate_Offset;
    static readonly int SetCustomCompressionSettings_ReturnValue_Offset;
    
    public bool SetCustomCompressionSettings(byte attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomCompressionSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomCompressionSettings_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomCompressionSettings_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomCompressionSettings_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomCompressionSettings_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomCompressionQuality
    static readonly IntPtr SetCustomCompressionQuality_NativeFunction;
    static readonly int SetCustomCompressionQuality_ParamsSize;
    static readonly int SetCustomCompressionQuality_AttributeValue_Offset;
    static readonly int SetCustomCompressionQuality_bAddApplyDelegate_Offset;
    static readonly int SetCustomCompressionQuality_ReturnValue_Offset;
    
    public bool SetCustomCompressionQuality(byte attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomCompressionQuality_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomCompressionQuality_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomCompressionQuality_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomCompressionQuality_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomCompressionQuality_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomCompressionNoAlpha
    static readonly IntPtr SetCustomCompressionNoAlpha_NativeFunction;
    static readonly int SetCustomCompressionNoAlpha_ParamsSize;
    static readonly int SetCustomCompressionNoAlpha_AttributeValue_Offset;
    static readonly int SetCustomCompressionNoAlpha_bAddApplyDelegate_Offset;
    static readonly int SetCustomCompressionNoAlpha_ReturnValue_Offset;
    
    public bool SetCustomCompressionNoAlpha(bool attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomCompressionNoAlpha_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomCompressionNoAlpha_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomCompressionNoAlpha_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomCompressionNoAlpha_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomCompressionNoAlpha_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomCompositeTextureMode
    static readonly IntPtr SetCustomCompositeTextureMode_NativeFunction;
    static readonly int SetCustomCompositeTextureMode_ParamsSize;
    static readonly int SetCustomCompositeTextureMode_AttributeValue_Offset;
    static readonly int SetCustomCompositeTextureMode_bAddApplyDelegate_Offset;
    static readonly int SetCustomCompositeTextureMode_ReturnValue_Offset;
    
    public bool SetCustomCompositeTextureMode(byte attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomCompositeTextureMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomCompositeTextureMode_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomCompositeTextureMode_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomCompositeTextureMode_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomCompositeTextureMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomCompositePower
    static readonly IntPtr SetCustomCompositePower_NativeFunction;
    static readonly int SetCustomCompositePower_ParamsSize;
    static readonly int SetCustomCompositePower_AttributeValue_Offset;
    static readonly int SetCustomCompositePower_bAddApplyDelegate_Offset;
    static readonly int SetCustomCompositePower_ReturnValue_Offset;
    
    public bool SetCustomCompositePower(float attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomCompositePower_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomCompositePower_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomCompositePower_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomCompositePower_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomCompositePower_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomChromaKeyThreshold
    static readonly IntPtr SetCustomChromaKeyThreshold_NativeFunction;
    static readonly int SetCustomChromaKeyThreshold_ParamsSize;
    static readonly int SetCustomChromaKeyThreshold_AttributeValue_Offset;
    static readonly int SetCustomChromaKeyThreshold_bAddApplyDelegate_Offset;
    static readonly int SetCustomChromaKeyThreshold_ReturnValue_Offset;
    
    public bool SetCustomChromaKeyThreshold(float attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomChromaKeyThreshold_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomChromaKeyThreshold_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomChromaKeyThreshold_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomChromaKeyThreshold_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomChromaKeyThreshold_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomChromaKeyColor
    static readonly IntPtr SetCustomChromaKeyColor_NativeFunction;
    static readonly int SetCustomChromaKeyColor_ParamsSize;
    static readonly int SetCustomChromaKeyColor_AttributeValue_Offset;
    static readonly int SetCustomChromaKeyColor_bAddApplyDelegate_Offset;
    static readonly int SetCustomChromaKeyColor_ReturnValue_Offset;
    
    public bool SetCustomChromaKeyColor(UnrealSharp.CoreUObject.Color attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomChromaKeyColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomChromaKeyColor_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomChromaKeyColor_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomChromaKeyColor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomChromaKeyColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustombUseLegacyGamma
    static readonly IntPtr SetCustombUseLegacyGamma_NativeFunction;
    static readonly int SetCustombUseLegacyGamma_ParamsSize;
    static readonly int SetCustombUseLegacyGamma_AttributeValue_Offset;
    static readonly int SetCustombUseLegacyGamma_bAddApplyDelegate_Offset;
    static readonly int SetCustombUseLegacyGamma_ReturnValue_Offset;
    
    public bool SetCustombUseLegacyGamma(bool attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustombUseLegacyGamma_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustombUseLegacyGamma_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustombUseLegacyGamma_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustombUseLegacyGamma_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustombUseLegacyGamma_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustombPreserveBorder
    static readonly IntPtr SetCustombPreserveBorder_NativeFunction;
    static readonly int SetCustombPreserveBorder_ParamsSize;
    static readonly int SetCustombPreserveBorder_AttributeValue_Offset;
    static readonly int SetCustombPreserveBorder_bAddApplyDelegate_Offset;
    static readonly int SetCustombPreserveBorder_ReturnValue_Offset;
    
    public bool SetCustombPreserveBorder(bool attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustombPreserveBorder_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustombPreserveBorder_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustombPreserveBorder_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustombPreserveBorder_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustombPreserveBorder_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustombFlipGreenChannel
    static readonly IntPtr SetCustombFlipGreenChannel_NativeFunction;
    static readonly int SetCustombFlipGreenChannel_ParamsSize;
    static readonly int SetCustombFlipGreenChannel_AttributeValue_Offset;
    static readonly int SetCustombFlipGreenChannel_bAddApplyDelegate_Offset;
    static readonly int SetCustombFlipGreenChannel_ReturnValue_Offset;
    
    public bool SetCustombFlipGreenChannel(bool attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustombFlipGreenChannel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustombFlipGreenChannel_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustombFlipGreenChannel_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustombFlipGreenChannel_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustombFlipGreenChannel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustombDoScaleMipsForAlphaCoverage
    static readonly IntPtr SetCustombDoScaleMipsForAlphaCoverage_NativeFunction;
    static readonly int SetCustombDoScaleMipsForAlphaCoverage_ParamsSize;
    static readonly int SetCustombDoScaleMipsForAlphaCoverage_AttributeValue_Offset;
    static readonly int SetCustombDoScaleMipsForAlphaCoverage_bAddApplyDelegate_Offset;
    static readonly int SetCustombDoScaleMipsForAlphaCoverage_ReturnValue_Offset;
    
    public bool SetCustombDoScaleMipsForAlphaCoverage(bool attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustombDoScaleMipsForAlphaCoverage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustombDoScaleMipsForAlphaCoverage_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustombDoScaleMipsForAlphaCoverage_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustombDoScaleMipsForAlphaCoverage_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustombDoScaleMipsForAlphaCoverage_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustombChromaKeyTexture
    static readonly IntPtr SetCustombChromaKeyTexture_NativeFunction;
    static readonly int SetCustombChromaKeyTexture_ParamsSize;
    static readonly int SetCustombChromaKeyTexture_AttributeValue_Offset;
    static readonly int SetCustombChromaKeyTexture_bAddApplyDelegate_Offset;
    static readonly int SetCustombChromaKeyTexture_ReturnValue_Offset;
    
    public bool SetCustombChromaKeyTexture(bool attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustombChromaKeyTexture_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustombChromaKeyTexture_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustombChromaKeyTexture_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustombChromaKeyTexture_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustombChromaKeyTexture_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomAlphaCoverageThresholds
    static readonly IntPtr SetCustomAlphaCoverageThresholds_NativeFunction;
    static readonly int SetCustomAlphaCoverageThresholds_ParamsSize;
    static readonly int SetCustomAlphaCoverageThresholds_AttributeValue_Offset;
    static readonly int SetCustomAlphaCoverageThresholds_bAddApplyDelegate_Offset;
    static readonly int SetCustomAlphaCoverageThresholds_ReturnValue_Offset;
    
    public bool SetCustomAlphaCoverageThresholds(System.DoubleNumerics.Vector4 attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomAlphaCoverageThresholds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector4>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomAlphaCoverageThresholds_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomAlphaCoverageThresholds_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomAlphaCoverageThresholds_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomAlphaCoverageThresholds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomAllowNonPowerOfTwo
    static readonly IntPtr SetCustomAllowNonPowerOfTwo_NativeFunction;
    static readonly int SetCustomAllowNonPowerOfTwo_ParamsSize;
    static readonly int SetCustomAllowNonPowerOfTwo_AttributeValue_Offset;
    static readonly int SetCustomAllowNonPowerOfTwo_ReturnValue_Offset;
    
    public bool SetCustomAllowNonPowerOfTwo(bool attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomAllowNonPowerOfTwo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomAllowNonPowerOfTwo_AttributeValue_Offset), 0, null, attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomAllowNonPowerOfTwo_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomAllowNonPowerOfTwo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomAdjustVibrance
    static readonly IntPtr SetCustomAdjustVibrance_NativeFunction;
    static readonly int SetCustomAdjustVibrance_ParamsSize;
    static readonly int SetCustomAdjustVibrance_AttributeValue_Offset;
    static readonly int SetCustomAdjustVibrance_bAddApplyDelegate_Offset;
    static readonly int SetCustomAdjustVibrance_ReturnValue_Offset;
    
    public bool SetCustomAdjustVibrance(float attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomAdjustVibrance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustVibrance_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustVibrance_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomAdjustVibrance_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustVibrance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomAdjustSaturation
    static readonly IntPtr SetCustomAdjustSaturation_NativeFunction;
    static readonly int SetCustomAdjustSaturation_ParamsSize;
    static readonly int SetCustomAdjustSaturation_AttributeValue_Offset;
    static readonly int SetCustomAdjustSaturation_bAddApplyDelegate_Offset;
    static readonly int SetCustomAdjustSaturation_ReturnValue_Offset;
    
    public bool SetCustomAdjustSaturation(float attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomAdjustSaturation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustSaturation_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustSaturation_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomAdjustSaturation_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustSaturation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomAdjustRGBCurve
    static readonly IntPtr SetCustomAdjustRGBCurve_NativeFunction;
    static readonly int SetCustomAdjustRGBCurve_ParamsSize;
    static readonly int SetCustomAdjustRGBCurve_AttributeValue_Offset;
    static readonly int SetCustomAdjustRGBCurve_bAddApplyDelegate_Offset;
    static readonly int SetCustomAdjustRGBCurve_ReturnValue_Offset;
    
    public bool SetCustomAdjustRGBCurve(float attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomAdjustRGBCurve_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustRGBCurve_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustRGBCurve_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomAdjustRGBCurve_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustRGBCurve_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomAdjustMinAlpha
    static readonly IntPtr SetCustomAdjustMinAlpha_NativeFunction;
    static readonly int SetCustomAdjustMinAlpha_ParamsSize;
    static readonly int SetCustomAdjustMinAlpha_AttributeValue_Offset;
    static readonly int SetCustomAdjustMinAlpha_bAddApplyDelegate_Offset;
    static readonly int SetCustomAdjustMinAlpha_ReturnValue_Offset;
    
    public bool SetCustomAdjustMinAlpha(float attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomAdjustMinAlpha_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustMinAlpha_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustMinAlpha_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomAdjustMinAlpha_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustMinAlpha_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomAdjustMaxAlpha
    static readonly IntPtr SetCustomAdjustMaxAlpha_NativeFunction;
    static readonly int SetCustomAdjustMaxAlpha_ParamsSize;
    static readonly int SetCustomAdjustMaxAlpha_AttributeValue_Offset;
    static readonly int SetCustomAdjustMaxAlpha_bAddApplyDelegate_Offset;
    static readonly int SetCustomAdjustMaxAlpha_ReturnValue_Offset;
    
    public bool SetCustomAdjustMaxAlpha(float attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomAdjustMaxAlpha_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustMaxAlpha_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustMaxAlpha_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomAdjustMaxAlpha_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustMaxAlpha_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomAdjustHue
    static readonly IntPtr SetCustomAdjustHue_NativeFunction;
    static readonly int SetCustomAdjustHue_ParamsSize;
    static readonly int SetCustomAdjustHue_AttributeValue_Offset;
    static readonly int SetCustomAdjustHue_bAddApplyDelegate_Offset;
    static readonly int SetCustomAdjustHue_ReturnValue_Offset;
    
    public bool SetCustomAdjustHue(float attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomAdjustHue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustHue_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustHue_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomAdjustHue_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustHue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomAdjustBrightnessCurve
    static readonly IntPtr SetCustomAdjustBrightnessCurve_NativeFunction;
    static readonly int SetCustomAdjustBrightnessCurve_ParamsSize;
    static readonly int SetCustomAdjustBrightnessCurve_AttributeValue_Offset;
    static readonly int SetCustomAdjustBrightnessCurve_bAddApplyDelegate_Offset;
    static readonly int SetCustomAdjustBrightnessCurve_ReturnValue_Offset;
    
    public bool SetCustomAdjustBrightnessCurve(float attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomAdjustBrightnessCurve_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustBrightnessCurve_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustBrightnessCurve_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomAdjustBrightnessCurve_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustBrightnessCurve_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:SetCustomAdjustBrightness
    static readonly IntPtr SetCustomAdjustBrightness_NativeFunction;
    static readonly int SetCustomAdjustBrightness_ParamsSize;
    static readonly int SetCustomAdjustBrightness_AttributeValue_Offset;
    static readonly int SetCustomAdjustBrightness_bAddApplyDelegate_Offset;
    static readonly int SetCustomAdjustBrightness_ReturnValue_Offset;
    
    public bool SetCustomAdjustBrightness(float attributeValue, bool bAddApplyDelegate = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomAdjustBrightness_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustBrightness_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustBrightness_bAddApplyDelegate_Offset), 0, null, bAddApplyDelegate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomAdjustBrightness_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomAdjustBrightness_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:InitializeTextureNode
    static readonly IntPtr InitializeTextureNode_NativeFunction;
    static readonly int InitializeTextureNode_ParamsSize;
    static readonly int InitializeTextureNode_UniqueID_Offset;
    static readonly int InitializeTextureNode_DisplayLabel_Offset;
    static readonly int InitializeTextureNode_InAssetName_Offset;
    
    public void InitializeTextureNode(string uniqueID, string displayLabel, string inAssetName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[InitializeTextureNode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr UniqueID_NativePtr = IntPtr.Add(ParamsBuffer,InitializeTextureNode_UniqueID_Offset);
            StringMarshaller.ToNative(UniqueID_NativePtr,0,null,uniqueID);
            IntPtr DisplayLabel_NativePtr = IntPtr.Add(ParamsBuffer,InitializeTextureNode_DisplayLabel_Offset);
            StringMarshaller.ToNative(DisplayLabel_NativePtr,0,null,displayLabel);
            IntPtr InAssetName_NativePtr = IntPtr.Add(ParamsBuffer,InitializeTextureNode_InAssetName_Offset);
            StringMarshaller.ToNative(InAssetName_NativePtr,0,null,inAssetName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, InitializeTextureNode_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(UniqueID_NativePtr, 0);
            StringMarshaller.DestructInstance(DisplayLabel_NativePtr, 0);
            StringMarshaller.DestructInstance(InAssetName_NativePtr, 0);
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetObjectClass
    static readonly IntPtr GetObjectClass_NativeFunction;
    static readonly int GetObjectClass_ParamsSize;
    static readonly int GetObjectClass_ReturnValue_Offset;
    
    public SubclassOf<UnrealSharp.CoreUObject.Object> GetObjectClass()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetObjectClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetObjectClass_NativeFunction, ParamsBuffer);
            
            SubclassOf<UnrealSharp.CoreUObject.Object> returnValue;
            returnValue = SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(ParamsBuffer, GetObjectClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomVirtualTextureStreaming
    static readonly IntPtr GetCustomVirtualTextureStreaming_NativeFunction;
    static readonly int GetCustomVirtualTextureStreaming_ParamsSize;
    static readonly int GetCustomVirtualTextureStreaming_AttributeValue_Offset;
    static readonly int GetCustomVirtualTextureStreaming_ReturnValue_Offset;
    
    public bool GetCustomVirtualTextureStreaming(out bool attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomVirtualTextureStreaming_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomVirtualTextureStreaming_NativeFunction, ParamsBuffer);
            
            attributeValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomVirtualTextureStreaming_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomVirtualTextureStreaming_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomTranslatedTextureNodeUid
    static readonly IntPtr GetCustomTranslatedTextureNodeUid_NativeFunction;
    static readonly int GetCustomTranslatedTextureNodeUid_ParamsSize;
    static readonly int GetCustomTranslatedTextureNodeUid_AttributeValue_Offset;
    static readonly int GetCustomTranslatedTextureNodeUid_ReturnValue_Offset;
    
    public bool GetCustomTranslatedTextureNodeUid(out string attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomTranslatedTextureNodeUid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomTranslatedTextureNodeUid_NativeFunction, ParamsBuffer);
            
            IntPtr AttributeValue_NativePtr = IntPtr.Add(ParamsBuffer,GetCustomTranslatedTextureNodeUid_AttributeValue_Offset);
            attributeValue = StringMarshaller.FromNative(AttributeValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(AttributeValue_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomTranslatedTextureNodeUid_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomSRGB
    static readonly IntPtr GetCustomSRGB_NativeFunction;
    static readonly int GetCustomSRGB_ParamsSize;
    static readonly int GetCustomSRGB_AttributeValue_Offset;
    static readonly int GetCustomSRGB_ReturnValue_Offset;
    
    public bool GetCustomSRGB(out bool attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomSRGB_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomSRGB_NativeFunction, ParamsBuffer);
            
            attributeValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomSRGB_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomSRGB_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomPreferCompressedSourceData
    static readonly IntPtr GetCustomPreferCompressedSourceData_NativeFunction;
    static readonly int GetCustomPreferCompressedSourceData_ParamsSize;
    static readonly int GetCustomPreferCompressedSourceData_AttributeValue_Offset;
    static readonly int GetCustomPreferCompressedSourceData_ReturnValue_Offset;
    
    public bool GetCustomPreferCompressedSourceData(out bool attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomPreferCompressedSourceData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomPreferCompressedSourceData_NativeFunction, ParamsBuffer);
            
            attributeValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomPreferCompressedSourceData_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomPreferCompressedSourceData_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomPowerOfTwoMode
    static readonly IntPtr GetCustomPowerOfTwoMode_NativeFunction;
    static readonly int GetCustomPowerOfTwoMode_ParamsSize;
    static readonly int GetCustomPowerOfTwoMode_AttributeValue_Offset;
    static readonly int GetCustomPowerOfTwoMode_ReturnValue_Offset;
    
    public bool GetCustomPowerOfTwoMode(out byte attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomPowerOfTwoMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomPowerOfTwoMode_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomPowerOfTwoMode_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomPowerOfTwoMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomPaddingColor
    static readonly IntPtr GetCustomPaddingColor_NativeFunction;
    static readonly int GetCustomPaddingColor_ParamsSize;
    static readonly int GetCustomPaddingColor_AttributeValue_Offset;
    static readonly int GetCustomPaddingColor_ReturnValue_Offset;
    
    public bool GetCustomPaddingColor(out UnrealSharp.CoreUObject.Color attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomPaddingColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomPaddingColor_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomPaddingColor_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomPaddingColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomMipLoadOptions
    static readonly IntPtr GetCustomMipLoadOptions_NativeFunction;
    static readonly int GetCustomMipLoadOptions_ParamsSize;
    static readonly int GetCustomMipLoadOptions_AttributeValue_Offset;
    static readonly int GetCustomMipLoadOptions_ReturnValue_Offset;
    
    public bool GetCustomMipLoadOptions(out byte attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomMipLoadOptions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomMipLoadOptions_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomMipLoadOptions_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomMipLoadOptions_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomMipGenSettings
    static readonly IntPtr GetCustomMipGenSettings_NativeFunction;
    static readonly int GetCustomMipGenSettings_ParamsSize;
    static readonly int GetCustomMipGenSettings_AttributeValue_Offset;
    static readonly int GetCustomMipGenSettings_ReturnValue_Offset;
    
    public bool GetCustomMipGenSettings(out byte attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomMipGenSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomMipGenSettings_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomMipGenSettings_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomMipGenSettings_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomMaxTextureSize
    static readonly IntPtr GetCustomMaxTextureSize_NativeFunction;
    static readonly int GetCustomMaxTextureSize_ParamsSize;
    static readonly int GetCustomMaxTextureSize_AttributeValue_Offset;
    static readonly int GetCustomMaxTextureSize_ReturnValue_Offset;
    
    public bool GetCustomMaxTextureSize(out int attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomMaxTextureSize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomMaxTextureSize_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomMaxTextureSize_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomMaxTextureSize_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomLossyCompressionAmount
    static readonly IntPtr GetCustomLossyCompressionAmount_NativeFunction;
    static readonly int GetCustomLossyCompressionAmount_ParamsSize;
    static readonly int GetCustomLossyCompressionAmount_AttributeValue_Offset;
    static readonly int GetCustomLossyCompressionAmount_ReturnValue_Offset;
    
    public bool GetCustomLossyCompressionAmount(out byte attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomLossyCompressionAmount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomLossyCompressionAmount_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomLossyCompressionAmount_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomLossyCompressionAmount_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomLODGroup
    static readonly IntPtr GetCustomLODGroup_NativeFunction;
    static readonly int GetCustomLODGroup_ParamsSize;
    static readonly int GetCustomLODGroup_AttributeValue_Offset;
    static readonly int GetCustomLODGroup_ReturnValue_Offset;
    
    public bool GetCustomLODGroup(out byte attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomLODGroup_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomLODGroup_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomLODGroup_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomLODGroup_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomLODBias
    static readonly IntPtr GetCustomLODBias_NativeFunction;
    static readonly int GetCustomLODBias_ParamsSize;
    static readonly int GetCustomLODBias_AttributeValue_Offset;
    static readonly int GetCustomLODBias_ReturnValue_Offset;
    
    public bool GetCustomLODBias(out int attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomLODBias_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomLODBias_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomLODBias_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomLODBias_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomFilter
    static readonly IntPtr GetCustomFilter_NativeFunction;
    static readonly int GetCustomFilter_ParamsSize;
    static readonly int GetCustomFilter_AttributeValue_Offset;
    static readonly int GetCustomFilter_ReturnValue_Offset;
    
    public bool GetCustomFilter(out byte attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomFilter_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomFilter_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomFilter_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomFilter_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomDownscaleOptions
    static readonly IntPtr GetCustomDownscaleOptions_NativeFunction;
    static readonly int GetCustomDownscaleOptions_ParamsSize;
    static readonly int GetCustomDownscaleOptions_AttributeValue_Offset;
    static readonly int GetCustomDownscaleOptions_ReturnValue_Offset;
    
    public bool GetCustomDownscaleOptions(out byte attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomDownscaleOptions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomDownscaleOptions_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomDownscaleOptions_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomDownscaleOptions_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomDownscale
    static readonly IntPtr GetCustomDownscale_NativeFunction;
    static readonly int GetCustomDownscale_ParamsSize;
    static readonly int GetCustomDownscale_AttributeValue_Offset;
    static readonly int GetCustomDownscale_ReturnValue_Offset;
    
    public bool GetCustomDownscale(out float attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomDownscale_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomDownscale_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomDownscale_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomDownscale_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomDeferCompression
    static readonly IntPtr GetCustomDeferCompression_NativeFunction;
    static readonly int GetCustomDeferCompression_ParamsSize;
    static readonly int GetCustomDeferCompression_AttributeValue_Offset;
    static readonly int GetCustomDeferCompression_ReturnValue_Offset;
    
    public bool GetCustomDeferCompression(out bool attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomDeferCompression_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomDeferCompression_NativeFunction, ParamsBuffer);
            
            attributeValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomDeferCompression_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomDeferCompression_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomCompressionSettings
    static readonly IntPtr GetCustomCompressionSettings_NativeFunction;
    static readonly int GetCustomCompressionSettings_ParamsSize;
    static readonly int GetCustomCompressionSettings_AttributeValue_Offset;
    static readonly int GetCustomCompressionSettings_ReturnValue_Offset;
    
    public bool GetCustomCompressionSettings(out byte attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomCompressionSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomCompressionSettings_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomCompressionSettings_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomCompressionSettings_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomCompressionQuality
    static readonly IntPtr GetCustomCompressionQuality_NativeFunction;
    static readonly int GetCustomCompressionQuality_ParamsSize;
    static readonly int GetCustomCompressionQuality_AttributeValue_Offset;
    static readonly int GetCustomCompressionQuality_ReturnValue_Offset;
    
    public bool GetCustomCompressionQuality(out byte attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomCompressionQuality_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomCompressionQuality_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomCompressionQuality_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomCompressionQuality_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomCompressionNoAlpha
    static readonly IntPtr GetCustomCompressionNoAlpha_NativeFunction;
    static readonly int GetCustomCompressionNoAlpha_ParamsSize;
    static readonly int GetCustomCompressionNoAlpha_AttributeValue_Offset;
    static readonly int GetCustomCompressionNoAlpha_ReturnValue_Offset;
    
    public bool GetCustomCompressionNoAlpha(out bool attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomCompressionNoAlpha_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomCompressionNoAlpha_NativeFunction, ParamsBuffer);
            
            attributeValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomCompressionNoAlpha_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomCompressionNoAlpha_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomCompositeTextureMode
    static readonly IntPtr GetCustomCompositeTextureMode_NativeFunction;
    static readonly int GetCustomCompositeTextureMode_ParamsSize;
    static readonly int GetCustomCompositeTextureMode_AttributeValue_Offset;
    static readonly int GetCustomCompositeTextureMode_ReturnValue_Offset;
    
    public bool GetCustomCompositeTextureMode(out byte attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomCompositeTextureMode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomCompositeTextureMode_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<byte>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomCompositeTextureMode_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomCompositeTextureMode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomCompositePower
    static readonly IntPtr GetCustomCompositePower_NativeFunction;
    static readonly int GetCustomCompositePower_ParamsSize;
    static readonly int GetCustomCompositePower_AttributeValue_Offset;
    static readonly int GetCustomCompositePower_ReturnValue_Offset;
    
    public bool GetCustomCompositePower(out float attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomCompositePower_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomCompositePower_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomCompositePower_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomCompositePower_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomChromaKeyThreshold
    static readonly IntPtr GetCustomChromaKeyThreshold_NativeFunction;
    static readonly int GetCustomChromaKeyThreshold_ParamsSize;
    static readonly int GetCustomChromaKeyThreshold_AttributeValue_Offset;
    static readonly int GetCustomChromaKeyThreshold_ReturnValue_Offset;
    
    public bool GetCustomChromaKeyThreshold(out float attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomChromaKeyThreshold_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomChromaKeyThreshold_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomChromaKeyThreshold_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomChromaKeyThreshold_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomChromaKeyColor
    static readonly IntPtr GetCustomChromaKeyColor_NativeFunction;
    static readonly int GetCustomChromaKeyColor_ParamsSize;
    static readonly int GetCustomChromaKeyColor_AttributeValue_Offset;
    static readonly int GetCustomChromaKeyColor_ReturnValue_Offset;
    
    public bool GetCustomChromaKeyColor(out UnrealSharp.CoreUObject.Color attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomChromaKeyColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomChromaKeyColor_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomChromaKeyColor_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomChromaKeyColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustombUseLegacyGamma
    static readonly IntPtr GetCustombUseLegacyGamma_NativeFunction;
    static readonly int GetCustombUseLegacyGamma_ParamsSize;
    static readonly int GetCustombUseLegacyGamma_AttributeValue_Offset;
    static readonly int GetCustombUseLegacyGamma_ReturnValue_Offset;
    
    public bool GetCustombUseLegacyGamma(out bool attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustombUseLegacyGamma_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustombUseLegacyGamma_NativeFunction, ParamsBuffer);
            
            attributeValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustombUseLegacyGamma_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustombUseLegacyGamma_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustombPreserveBorder
    static readonly IntPtr GetCustombPreserveBorder_NativeFunction;
    static readonly int GetCustombPreserveBorder_ParamsSize;
    static readonly int GetCustombPreserveBorder_AttributeValue_Offset;
    static readonly int GetCustombPreserveBorder_ReturnValue_Offset;
    
    public bool GetCustombPreserveBorder(out bool attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustombPreserveBorder_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustombPreserveBorder_NativeFunction, ParamsBuffer);
            
            attributeValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustombPreserveBorder_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustombPreserveBorder_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustombFlipGreenChannel
    static readonly IntPtr GetCustombFlipGreenChannel_NativeFunction;
    static readonly int GetCustombFlipGreenChannel_ParamsSize;
    static readonly int GetCustombFlipGreenChannel_AttributeValue_Offset;
    static readonly int GetCustombFlipGreenChannel_ReturnValue_Offset;
    
    public bool GetCustombFlipGreenChannel(out bool attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustombFlipGreenChannel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustombFlipGreenChannel_NativeFunction, ParamsBuffer);
            
            attributeValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustombFlipGreenChannel_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustombFlipGreenChannel_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustombDoScaleMipsForAlphaCoverage
    static readonly IntPtr GetCustombDoScaleMipsForAlphaCoverage_NativeFunction;
    static readonly int GetCustombDoScaleMipsForAlphaCoverage_ParamsSize;
    static readonly int GetCustombDoScaleMipsForAlphaCoverage_AttributeValue_Offset;
    static readonly int GetCustombDoScaleMipsForAlphaCoverage_ReturnValue_Offset;
    
    public bool GetCustombDoScaleMipsForAlphaCoverage(out bool attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustombDoScaleMipsForAlphaCoverage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustombDoScaleMipsForAlphaCoverage_NativeFunction, ParamsBuffer);
            
            attributeValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustombDoScaleMipsForAlphaCoverage_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustombDoScaleMipsForAlphaCoverage_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustombChromaKeyTexture
    static readonly IntPtr GetCustombChromaKeyTexture_NativeFunction;
    static readonly int GetCustombChromaKeyTexture_ParamsSize;
    static readonly int GetCustombChromaKeyTexture_AttributeValue_Offset;
    static readonly int GetCustombChromaKeyTexture_ReturnValue_Offset;
    
    public bool GetCustombChromaKeyTexture(out bool attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustombChromaKeyTexture_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustombChromaKeyTexture_NativeFunction, ParamsBuffer);
            
            attributeValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustombChromaKeyTexture_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustombChromaKeyTexture_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomAlphaCoverageThresholds
    static readonly IntPtr GetCustomAlphaCoverageThresholds_NativeFunction;
    static readonly int GetCustomAlphaCoverageThresholds_ParamsSize;
    static readonly int GetCustomAlphaCoverageThresholds_AttributeValue_Offset;
    static readonly int GetCustomAlphaCoverageThresholds_ReturnValue_Offset;
    
    public bool GetCustomAlphaCoverageThresholds(out System.DoubleNumerics.Vector4 attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomAlphaCoverageThresholds_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomAlphaCoverageThresholds_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<System.DoubleNumerics.Vector4>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAlphaCoverageThresholds_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAlphaCoverageThresholds_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomAllowNonPowerOfTwo
    static readonly IntPtr GetCustomAllowNonPowerOfTwo_NativeFunction;
    static readonly int GetCustomAllowNonPowerOfTwo_ParamsSize;
    static readonly int GetCustomAllowNonPowerOfTwo_AttributeValue_Offset;
    static readonly int GetCustomAllowNonPowerOfTwo_ReturnValue_Offset;
    
    public bool GetCustomAllowNonPowerOfTwo(out bool attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomAllowNonPowerOfTwo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomAllowNonPowerOfTwo_NativeFunction, ParamsBuffer);
            
            attributeValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAllowNonPowerOfTwo_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAllowNonPowerOfTwo_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomAdjustVibrance
    static readonly IntPtr GetCustomAdjustVibrance_NativeFunction;
    static readonly int GetCustomAdjustVibrance_ParamsSize;
    static readonly int GetCustomAdjustVibrance_AttributeValue_Offset;
    static readonly int GetCustomAdjustVibrance_ReturnValue_Offset;
    
    public bool GetCustomAdjustVibrance(out float attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomAdjustVibrance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomAdjustVibrance_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAdjustVibrance_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAdjustVibrance_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomAdjustSaturation
    static readonly IntPtr GetCustomAdjustSaturation_NativeFunction;
    static readonly int GetCustomAdjustSaturation_ParamsSize;
    static readonly int GetCustomAdjustSaturation_AttributeValue_Offset;
    static readonly int GetCustomAdjustSaturation_ReturnValue_Offset;
    
    public bool GetCustomAdjustSaturation(out float attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomAdjustSaturation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomAdjustSaturation_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAdjustSaturation_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAdjustSaturation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomAdjustRGBCurve
    static readonly IntPtr GetCustomAdjustRGBCurve_NativeFunction;
    static readonly int GetCustomAdjustRGBCurve_ParamsSize;
    static readonly int GetCustomAdjustRGBCurve_AttributeValue_Offset;
    static readonly int GetCustomAdjustRGBCurve_ReturnValue_Offset;
    
    public bool GetCustomAdjustRGBCurve(out float attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomAdjustRGBCurve_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomAdjustRGBCurve_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAdjustRGBCurve_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAdjustRGBCurve_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomAdjustMinAlpha
    static readonly IntPtr GetCustomAdjustMinAlpha_NativeFunction;
    static readonly int GetCustomAdjustMinAlpha_ParamsSize;
    static readonly int GetCustomAdjustMinAlpha_AttributeValue_Offset;
    static readonly int GetCustomAdjustMinAlpha_ReturnValue_Offset;
    
    public bool GetCustomAdjustMinAlpha(out float attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomAdjustMinAlpha_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomAdjustMinAlpha_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAdjustMinAlpha_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAdjustMinAlpha_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomAdjustMaxAlpha
    static readonly IntPtr GetCustomAdjustMaxAlpha_NativeFunction;
    static readonly int GetCustomAdjustMaxAlpha_ParamsSize;
    static readonly int GetCustomAdjustMaxAlpha_AttributeValue_Offset;
    static readonly int GetCustomAdjustMaxAlpha_ReturnValue_Offset;
    
    public bool GetCustomAdjustMaxAlpha(out float attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomAdjustMaxAlpha_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomAdjustMaxAlpha_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAdjustMaxAlpha_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAdjustMaxAlpha_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomAdjustHue
    static readonly IntPtr GetCustomAdjustHue_NativeFunction;
    static readonly int GetCustomAdjustHue_ParamsSize;
    static readonly int GetCustomAdjustHue_AttributeValue_Offset;
    static readonly int GetCustomAdjustHue_ReturnValue_Offset;
    
    public bool GetCustomAdjustHue(out float attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomAdjustHue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomAdjustHue_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAdjustHue_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAdjustHue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomAdjustBrightnessCurve
    static readonly IntPtr GetCustomAdjustBrightnessCurve_NativeFunction;
    static readonly int GetCustomAdjustBrightnessCurve_ParamsSize;
    static readonly int GetCustomAdjustBrightnessCurve_AttributeValue_Offset;
    static readonly int GetCustomAdjustBrightnessCurve_ReturnValue_Offset;
    
    public bool GetCustomAdjustBrightnessCurve(out float attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomAdjustBrightnessCurve_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomAdjustBrightnessCurve_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAdjustBrightnessCurve_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAdjustBrightnessCurve_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeFactoryNodes.InterchangeTextureFactoryNode:GetCustomAdjustBrightness
    static readonly IntPtr GetCustomAdjustBrightness_NativeFunction;
    static readonly int GetCustomAdjustBrightness_ParamsSize;
    static readonly int GetCustomAdjustBrightness_AttributeValue_Offset;
    static readonly int GetCustomAdjustBrightness_ReturnValue_Offset;
    
    public bool GetCustomAdjustBrightness(out float attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomAdjustBrightness_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomAdjustBrightness_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAdjustBrightness_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAdjustBrightness_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
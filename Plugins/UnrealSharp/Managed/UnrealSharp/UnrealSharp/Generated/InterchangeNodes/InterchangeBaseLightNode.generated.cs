// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.InterchangeNodes;

[UClass]
public partial class InterchangeBaseLightNode : UnrealSharp.InterchangeCore.InterchangeBaseNode
{
    
    static InterchangeBaseLightNode()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InterchangeBaseLightNode");
        
        
        SetCustomUseTemperature_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomUseTemperature");
        SetCustomUseTemperature_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomUseTemperature_NativeFunction);
        SetCustomUseTemperature_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomUseTemperature_NativeFunction, "AttributeValue");
        SetCustomUseTemperature_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomUseTemperature_NativeFunction, "ReturnValue");
        SetCustomTemperature_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomTemperature");
        SetCustomTemperature_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomTemperature_NativeFunction);
        SetCustomTemperature_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomTemperature_NativeFunction, "AttributeValue");
        SetCustomTemperature_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomTemperature_NativeFunction, "ReturnValue");
        SetCustomLightColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomLightColor");
        SetCustomLightColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomLightColor_NativeFunction);
        SetCustomLightColor_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomLightColor_NativeFunction, "AttributeValue");
        SetCustomLightColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomLightColor_NativeFunction, "ReturnValue");
        SetCustomIntensity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomIntensity");
        SetCustomIntensity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomIntensity_NativeFunction);
        SetCustomIntensity_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomIntensity_NativeFunction, "AttributeValue");
        SetCustomIntensity_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomIntensity_NativeFunction, "ReturnValue");
        GetCustomUseTemperature_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomUseTemperature");
        GetCustomUseTemperature_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomUseTemperature_NativeFunction);
        GetCustomUseTemperature_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomUseTemperature_NativeFunction, "AttributeValue");
        GetCustomUseTemperature_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomUseTemperature_NativeFunction, "ReturnValue");
        GetCustomTemperature_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomTemperature");
        GetCustomTemperature_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomTemperature_NativeFunction);
        GetCustomTemperature_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomTemperature_NativeFunction, "AttributeValue");
        GetCustomTemperature_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomTemperature_NativeFunction, "ReturnValue");
        GetCustomLightColor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomLightColor");
        GetCustomLightColor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomLightColor_NativeFunction);
        GetCustomLightColor_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomLightColor_NativeFunction, "AttributeValue");
        GetCustomLightColor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomLightColor_NativeFunction, "ReturnValue");
        GetCustomIntensity_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomIntensity");
        GetCustomIntensity_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomIntensity_NativeFunction);
        GetCustomIntensity_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomIntensity_NativeFunction, "AttributeValue");
        GetCustomIntensity_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomIntensity_NativeFunction, "ReturnValue");
        
        
    }
    
    protected InterchangeBaseLightNode(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/InterchangeNodes.InterchangeBaseLightNode:SetCustomUseTemperature
    static readonly IntPtr SetCustomUseTemperature_NativeFunction;
    static readonly int SetCustomUseTemperature_ParamsSize;
    static readonly int SetCustomUseTemperature_AttributeValue_Offset;
    static readonly int SetCustomUseTemperature_ReturnValue_Offset;
    
    public bool SetCustomUseTemperature(bool attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomUseTemperature_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomUseTemperature_AttributeValue_Offset), 0, null, attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomUseTemperature_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomUseTemperature_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeBaseLightNode:SetCustomTemperature
    static readonly IntPtr SetCustomTemperature_NativeFunction;
    static readonly int SetCustomTemperature_ParamsSize;
    static readonly int SetCustomTemperature_AttributeValue_Offset;
    static readonly int SetCustomTemperature_ReturnValue_Offset;
    
    public bool SetCustomTemperature(float attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomTemperature_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomTemperature_AttributeValue_Offset), 0, null, attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomTemperature_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomTemperature_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeBaseLightNode:SetCustomLightColor
    static readonly IntPtr SetCustomLightColor_NativeFunction;
    static readonly int SetCustomLightColor_ParamsSize;
    static readonly int SetCustomLightColor_AttributeValue_Offset;
    static readonly int SetCustomLightColor_ReturnValue_Offset;
    
    public bool SetCustomLightColor(UnrealSharp.CoreUObject.LinearColor attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomLightColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomLightColor_AttributeValue_Offset), 0, null, attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomLightColor_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomLightColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeBaseLightNode:SetCustomIntensity
    static readonly IntPtr SetCustomIntensity_NativeFunction;
    static readonly int SetCustomIntensity_ParamsSize;
    static readonly int SetCustomIntensity_AttributeValue_Offset;
    static readonly int SetCustomIntensity_ReturnValue_Offset;
    
    public bool SetCustomIntensity(float attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomIntensity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomIntensity_AttributeValue_Offset), 0, null, attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomIntensity_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomIntensity_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeBaseLightNode:GetCustomUseTemperature
    static readonly IntPtr GetCustomUseTemperature_NativeFunction;
    static readonly int GetCustomUseTemperature_ParamsSize;
    static readonly int GetCustomUseTemperature_AttributeValue_Offset;
    static readonly int GetCustomUseTemperature_ReturnValue_Offset;
    
    public bool GetCustomUseTemperature(out bool attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomUseTemperature_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomUseTemperature_NativeFunction, ParamsBuffer);
            
            attributeValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomUseTemperature_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomUseTemperature_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeBaseLightNode:GetCustomTemperature
    static readonly IntPtr GetCustomTemperature_NativeFunction;
    static readonly int GetCustomTemperature_ParamsSize;
    static readonly int GetCustomTemperature_AttributeValue_Offset;
    static readonly int GetCustomTemperature_ReturnValue_Offset;
    
    public bool GetCustomTemperature(out float attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomTemperature_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomTemperature_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomTemperature_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomTemperature_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeBaseLightNode:GetCustomLightColor
    static readonly IntPtr GetCustomLightColor_NativeFunction;
    static readonly int GetCustomLightColor_ParamsSize;
    static readonly int GetCustomLightColor_AttributeValue_Offset;
    static readonly int GetCustomLightColor_ReturnValue_Offset;
    
    public bool GetCustomLightColor(out UnrealSharp.CoreUObject.LinearColor attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomLightColor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomLightColor_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomLightColor_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomLightColor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeBaseLightNode:GetCustomIntensity
    static readonly IntPtr GetCustomIntensity_NativeFunction;
    static readonly int GetCustomIntensity_ParamsSize;
    static readonly int GetCustomIntensity_AttributeValue_Offset;
    static readonly int GetCustomIntensity_ReturnValue_Offset;
    
    public bool GetCustomIntensity(out float attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomIntensity_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomIntensity_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomIntensity_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomIntensity_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.InterchangeNodes;

[UClass]
public partial class InterchangePointLightNode : UnrealSharp.InterchangeNodes.InterchangeLightNode
{
    
    static InterchangePointLightNode()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InterchangePointLightNode");
        
        
        SetCustomUseInverseSquaredFalloff_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomUseInverseSquaredFalloff");
        SetCustomUseInverseSquaredFalloff_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomUseInverseSquaredFalloff_NativeFunction);
        SetCustomUseInverseSquaredFalloff_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomUseInverseSquaredFalloff_NativeFunction, "AttributeValue");
        SetCustomUseInverseSquaredFalloff_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomUseInverseSquaredFalloff_NativeFunction, "ReturnValue");
        SetCustomLightFalloffExponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomLightFalloffExponent");
        SetCustomLightFalloffExponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomLightFalloffExponent_NativeFunction);
        SetCustomLightFalloffExponent_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomLightFalloffExponent_NativeFunction, "AttributeValue");
        SetCustomLightFalloffExponent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomLightFalloffExponent_NativeFunction, "ReturnValue");
        GetCustomUseInverseSquaredFalloff_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomUseInverseSquaredFalloff");
        GetCustomUseInverseSquaredFalloff_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomUseInverseSquaredFalloff_NativeFunction);
        GetCustomUseInverseSquaredFalloff_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomUseInverseSquaredFalloff_NativeFunction, "AttributeValue");
        GetCustomUseInverseSquaredFalloff_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomUseInverseSquaredFalloff_NativeFunction, "ReturnValue");
        GetCustomLightFalloffExponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomLightFalloffExponent");
        GetCustomLightFalloffExponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomLightFalloffExponent_NativeFunction);
        GetCustomLightFalloffExponent_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomLightFalloffExponent_NativeFunction, "AttributeValue");
        GetCustomLightFalloffExponent_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomLightFalloffExponent_NativeFunction, "ReturnValue");
        
        
    }
    
    protected InterchangePointLightNode(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/InterchangeNodes.InterchangePointLightNode:SetCustomUseInverseSquaredFalloff
    static readonly IntPtr SetCustomUseInverseSquaredFalloff_NativeFunction;
    static readonly int SetCustomUseInverseSquaredFalloff_ParamsSize;
    static readonly int SetCustomUseInverseSquaredFalloff_AttributeValue_Offset;
    static readonly int SetCustomUseInverseSquaredFalloff_ReturnValue_Offset;
    
    public bool SetCustomUseInverseSquaredFalloff(bool attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomUseInverseSquaredFalloff_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomUseInverseSquaredFalloff_AttributeValue_Offset), 0, null, attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomUseInverseSquaredFalloff_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomUseInverseSquaredFalloff_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangePointLightNode:SetCustomLightFalloffExponent
    static readonly IntPtr SetCustomLightFalloffExponent_NativeFunction;
    static readonly int SetCustomLightFalloffExponent_ParamsSize;
    static readonly int SetCustomLightFalloffExponent_AttributeValue_Offset;
    static readonly int SetCustomLightFalloffExponent_ReturnValue_Offset;
    
    public bool SetCustomLightFalloffExponent(float attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomLightFalloffExponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomLightFalloffExponent_AttributeValue_Offset), 0, null, attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomLightFalloffExponent_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomLightFalloffExponent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangePointLightNode:GetCustomUseInverseSquaredFalloff
    static readonly IntPtr GetCustomUseInverseSquaredFalloff_NativeFunction;
    static readonly int GetCustomUseInverseSquaredFalloff_ParamsSize;
    static readonly int GetCustomUseInverseSquaredFalloff_AttributeValue_Offset;
    static readonly int GetCustomUseInverseSquaredFalloff_ReturnValue_Offset;
    
    public bool GetCustomUseInverseSquaredFalloff(out bool attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomUseInverseSquaredFalloff_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomUseInverseSquaredFalloff_NativeFunction, ParamsBuffer);
            
            attributeValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomUseInverseSquaredFalloff_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomUseInverseSquaredFalloff_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangePointLightNode:GetCustomLightFalloffExponent
    static readonly IntPtr GetCustomLightFalloffExponent_NativeFunction;
    static readonly int GetCustomLightFalloffExponent_ParamsSize;
    static readonly int GetCustomLightFalloffExponent_AttributeValue_Offset;
    static readonly int GetCustomLightFalloffExponent_ReturnValue_Offset;
    
    public bool GetCustomLightFalloffExponent(out float attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomLightFalloffExponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomLightFalloffExponent_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomLightFalloffExponent_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomLightFalloffExponent_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.InterchangeNodes;

[UClass]
public partial class InterchangeSceneNode : UnrealSharp.InterchangeCore.InterchangeBaseNode
{
    
    static InterchangeSceneNode()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InterchangeSceneNode");
        
        
        SetSlotMaterialDependencyUid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSlotMaterialDependencyUid");
        SetSlotMaterialDependencyUid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSlotMaterialDependencyUid_NativeFunction);
        SetSlotMaterialDependencyUid_SlotName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSlotMaterialDependencyUid_NativeFunction, "SlotName");
        SetSlotMaterialDependencyUid_MaterialDependencyUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSlotMaterialDependencyUid_NativeFunction, "MaterialDependencyUid");
        SetSlotMaterialDependencyUid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSlotMaterialDependencyUid_NativeFunction, "ReturnValue");
        SetMorphTargetCurveWeight_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMorphTargetCurveWeight");
        SetMorphTargetCurveWeight_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMorphTargetCurveWeight_NativeFunction);
        SetMorphTargetCurveWeight_MorphTargetName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMorphTargetCurveWeight_NativeFunction, "MorphTargetName");
        SetMorphTargetCurveWeight_Weight_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMorphTargetCurveWeight_NativeFunction, "Weight");
        SetMorphTargetCurveWeight_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMorphTargetCurveWeight_NativeFunction, "ReturnValue");
        SetCustomTimeZeroLocalTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomTimeZeroLocalTransform");
        SetCustomTimeZeroLocalTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomTimeZeroLocalTransform_NativeFunction);
        SetCustomTimeZeroLocalTransform_BaseNodeContainer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomTimeZeroLocalTransform_NativeFunction, "BaseNodeContainer");
        SetCustomTimeZeroLocalTransform_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomTimeZeroLocalTransform_NativeFunction, "AttributeValue");
        SetCustomTimeZeroLocalTransform_bResetCache_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomTimeZeroLocalTransform_NativeFunction, "bResetCache");
        SetCustomTimeZeroLocalTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomTimeZeroLocalTransform_NativeFunction, "ReturnValue");
        SetCustomLocalTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomLocalTransform");
        SetCustomLocalTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomLocalTransform_NativeFunction);
        SetCustomLocalTransform_BaseNodeContainer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomLocalTransform_NativeFunction, "BaseNodeContainer");
        SetCustomLocalTransform_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomLocalTransform_NativeFunction, "AttributeValue");
        SetCustomLocalTransform_bResetCache_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomLocalTransform_NativeFunction, "bResetCache");
        SetCustomLocalTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomLocalTransform_NativeFunction, "ReturnValue");
        SetCustomGeometricTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomGeometricTransform");
        SetCustomGeometricTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomGeometricTransform_NativeFunction);
        SetCustomGeometricTransform_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomGeometricTransform_NativeFunction, "AttributeValue");
        SetCustomGeometricTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomGeometricTransform_NativeFunction, "ReturnValue");
        SetCustomBindPoseLocalTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomBindPoseLocalTransform");
        SetCustomBindPoseLocalTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomBindPoseLocalTransform_NativeFunction);
        SetCustomBindPoseLocalTransform_BaseNodeContainer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomBindPoseLocalTransform_NativeFunction, "BaseNodeContainer");
        SetCustomBindPoseLocalTransform_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomBindPoseLocalTransform_NativeFunction, "AttributeValue");
        SetCustomBindPoseLocalTransform_bResetCache_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomBindPoseLocalTransform_NativeFunction, "bResetCache");
        SetCustomBindPoseLocalTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomBindPoseLocalTransform_NativeFunction, "ReturnValue");
        SetCustomAssetInstanceUid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomAssetInstanceUid");
        SetCustomAssetInstanceUid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomAssetInstanceUid_NativeFunction);
        SetCustomAssetInstanceUid_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAssetInstanceUid_NativeFunction, "AttributeValue");
        SetCustomAssetInstanceUid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAssetInstanceUid_NativeFunction, "ReturnValue");
        SetCustomAnimationAssetUidToPlay_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomAnimationAssetUidToPlay");
        SetCustomAnimationAssetUidToPlay_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomAnimationAssetUidToPlay_NativeFunction);
        SetCustomAnimationAssetUidToPlay_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAnimationAssetUidToPlay_NativeFunction, "AttributeValue");
        SetCustomAnimationAssetUidToPlay_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomAnimationAssetUidToPlay_NativeFunction, "ReturnValue");
        RemoveSpecializedType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveSpecializedType");
        RemoveSpecializedType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveSpecializedType_NativeFunction);
        RemoveSpecializedType_SpecializedType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSpecializedType_NativeFunction, "SpecializedType");
        RemoveSpecializedType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSpecializedType_NativeFunction, "ReturnValue");
        RemoveSlotMaterialDependencyUid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveSlotMaterialDependencyUid");
        RemoveSlotMaterialDependencyUid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveSlotMaterialDependencyUid_NativeFunction);
        RemoveSlotMaterialDependencyUid_SlotName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSlotMaterialDependencyUid_NativeFunction, "SlotName");
        RemoveSlotMaterialDependencyUid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveSlotMaterialDependencyUid_NativeFunction, "ReturnValue");
        IsSpecializedTypeContains_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsSpecializedTypeContains");
        IsSpecializedTypeContains_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsSpecializedTypeContains_NativeFunction);
        IsSpecializedTypeContains_SpecializedType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSpecializedTypeContains_NativeFunction, "SpecializedType");
        IsSpecializedTypeContains_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsSpecializedTypeContains_NativeFunction, "ReturnValue");
        GetSpecializedTypeCount_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSpecializedTypeCount");
        GetSpecializedTypeCount_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSpecializedTypeCount_NativeFunction);
        GetSpecializedTypeCount_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSpecializedTypeCount_NativeFunction, "ReturnValue");
        GetSpecializedType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSpecializedType");
        GetSpecializedType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSpecializedType_NativeFunction);
        GetSpecializedType_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSpecializedType_NativeFunction, "Index");
        GetSpecializedType_OutSpecializedType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSpecializedType_NativeFunction, "OutSpecializedType");
        GetSlotMaterialDependencyUid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSlotMaterialDependencyUid");
        GetSlotMaterialDependencyUid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSlotMaterialDependencyUid_NativeFunction);
        GetSlotMaterialDependencyUid_SlotName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSlotMaterialDependencyUid_NativeFunction, "SlotName");
        GetSlotMaterialDependencyUid_OutMaterialDependency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSlotMaterialDependencyUid_NativeFunction, "OutMaterialDependency");
        GetSlotMaterialDependencyUid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSlotMaterialDependencyUid_NativeFunction, "ReturnValue");
        GetCustomTimeZeroLocalTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomTimeZeroLocalTransform");
        GetCustomTimeZeroLocalTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomTimeZeroLocalTransform_NativeFunction);
        GetCustomTimeZeroLocalTransform_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomTimeZeroLocalTransform_NativeFunction, "AttributeValue");
        GetCustomTimeZeroLocalTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomTimeZeroLocalTransform_NativeFunction, "ReturnValue");
        GetCustomTimeZeroGlobalTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomTimeZeroGlobalTransform");
        GetCustomTimeZeroGlobalTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomTimeZeroGlobalTransform_NativeFunction);
        GetCustomTimeZeroGlobalTransform_BaseNodeContainer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomTimeZeroGlobalTransform_NativeFunction, "BaseNodeContainer");
        GetCustomTimeZeroGlobalTransform_GlobalOffsetTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomTimeZeroGlobalTransform_NativeFunction, "GlobalOffsetTransform");
        GetCustomTimeZeroGlobalTransform_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomTimeZeroGlobalTransform_NativeFunction, "AttributeValue");
        GetCustomTimeZeroGlobalTransform_bForceRecache_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomTimeZeroGlobalTransform_NativeFunction, "bForceRecache");
        GetCustomTimeZeroGlobalTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomTimeZeroGlobalTransform_NativeFunction, "ReturnValue");
        GetCustomLocalTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomLocalTransform");
        GetCustomLocalTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomLocalTransform_NativeFunction);
        GetCustomLocalTransform_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomLocalTransform_NativeFunction, "AttributeValue");
        GetCustomLocalTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomLocalTransform_NativeFunction, "ReturnValue");
        GetCustomGlobalTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomGlobalTransform");
        GetCustomGlobalTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomGlobalTransform_NativeFunction);
        GetCustomGlobalTransform_BaseNodeContainer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomGlobalTransform_NativeFunction, "BaseNodeContainer");
        GetCustomGlobalTransform_GlobalOffsetTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomGlobalTransform_NativeFunction, "GlobalOffsetTransform");
        GetCustomGlobalTransform_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomGlobalTransform_NativeFunction, "AttributeValue");
        GetCustomGlobalTransform_bForceRecache_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomGlobalTransform_NativeFunction, "bForceRecache");
        GetCustomGlobalTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomGlobalTransform_NativeFunction, "ReturnValue");
        GetCustomGeometricTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomGeometricTransform");
        GetCustomGeometricTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomGeometricTransform_NativeFunction);
        GetCustomGeometricTransform_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomGeometricTransform_NativeFunction, "AttributeValue");
        GetCustomGeometricTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomGeometricTransform_NativeFunction, "ReturnValue");
        GetCustomBindPoseLocalTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomBindPoseLocalTransform");
        GetCustomBindPoseLocalTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomBindPoseLocalTransform_NativeFunction);
        GetCustomBindPoseLocalTransform_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomBindPoseLocalTransform_NativeFunction, "AttributeValue");
        GetCustomBindPoseLocalTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomBindPoseLocalTransform_NativeFunction, "ReturnValue");
        GetCustomBindPoseGlobalTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomBindPoseGlobalTransform");
        GetCustomBindPoseGlobalTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomBindPoseGlobalTransform_NativeFunction);
        GetCustomBindPoseGlobalTransform_BaseNodeContainer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomBindPoseGlobalTransform_NativeFunction, "BaseNodeContainer");
        GetCustomBindPoseGlobalTransform_GlobalOffsetTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomBindPoseGlobalTransform_NativeFunction, "GlobalOffsetTransform");
        GetCustomBindPoseGlobalTransform_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomBindPoseGlobalTransform_NativeFunction, "AttributeValue");
        GetCustomBindPoseGlobalTransform_bForceRecache_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomBindPoseGlobalTransform_NativeFunction, "bForceRecache");
        GetCustomBindPoseGlobalTransform_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomBindPoseGlobalTransform_NativeFunction, "ReturnValue");
        GetCustomAssetInstanceUid_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomAssetInstanceUid");
        GetCustomAssetInstanceUid_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomAssetInstanceUid_NativeFunction);
        GetCustomAssetInstanceUid_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAssetInstanceUid_NativeFunction, "AttributeValue");
        GetCustomAssetInstanceUid_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAssetInstanceUid_NativeFunction, "ReturnValue");
        GetCustomAnimationAssetUidToPlay_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomAnimationAssetUidToPlay");
        GetCustomAnimationAssetUidToPlay_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomAnimationAssetUidToPlay_NativeFunction);
        GetCustomAnimationAssetUidToPlay_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAnimationAssetUidToPlay_NativeFunction, "AttributeValue");
        GetCustomAnimationAssetUidToPlay_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomAnimationAssetUidToPlay_NativeFunction, "ReturnValue");
        AddSpecializedType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddSpecializedType");
        AddSpecializedType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddSpecializedType_NativeFunction);
        AddSpecializedType_SpecializedType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSpecializedType_NativeFunction, "SpecializedType");
        AddSpecializedType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddSpecializedType_NativeFunction, "ReturnValue");
        
        
    }
    
    protected InterchangeSceneNode(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/InterchangeNodes.InterchangeSceneNode:SetSlotMaterialDependencyUid
    static readonly IntPtr SetSlotMaterialDependencyUid_NativeFunction;
    static readonly int SetSlotMaterialDependencyUid_ParamsSize;
    static readonly int SetSlotMaterialDependencyUid_SlotName_Offset;
    static readonly int SetSlotMaterialDependencyUid_MaterialDependencyUid_Offset;
    static readonly int SetSlotMaterialDependencyUid_ReturnValue_Offset;
    
    public bool SetSlotMaterialDependencyUid(string slotName, string materialDependencyUid)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSlotMaterialDependencyUid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SlotName_NativePtr = IntPtr.Add(ParamsBuffer,SetSlotMaterialDependencyUid_SlotName_Offset);
            StringMarshaller.ToNative(SlotName_NativePtr,0,null,slotName);
            IntPtr MaterialDependencyUid_NativePtr = IntPtr.Add(ParamsBuffer,SetSlotMaterialDependencyUid_MaterialDependencyUid_Offset);
            StringMarshaller.ToNative(MaterialDependencyUid_NativePtr,0,null,materialDependencyUid);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSlotMaterialDependencyUid_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetSlotMaterialDependencyUid_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SlotName_NativePtr, 0);
            StringMarshaller.DestructInstance(MaterialDependencyUid_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:SetMorphTargetCurveWeight
    static readonly IntPtr SetMorphTargetCurveWeight_NativeFunction;
    static readonly int SetMorphTargetCurveWeight_ParamsSize;
    static readonly int SetMorphTargetCurveWeight_MorphTargetName_Offset;
    static readonly int SetMorphTargetCurveWeight_Weight_Offset;
    static readonly int SetMorphTargetCurveWeight_ReturnValue_Offset;
    
    public bool SetMorphTargetCurveWeight(string morphTargetName, float weight)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMorphTargetCurveWeight_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr MorphTargetName_NativePtr = IntPtr.Add(ParamsBuffer,SetMorphTargetCurveWeight_MorphTargetName_Offset);
            StringMarshaller.ToNative(MorphTargetName_NativePtr,0,null,morphTargetName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMorphTargetCurveWeight_Weight_Offset), 0, null, weight);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMorphTargetCurveWeight_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetMorphTargetCurveWeight_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(MorphTargetName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:SetCustomTimeZeroLocalTransform
    static readonly IntPtr SetCustomTimeZeroLocalTransform_NativeFunction;
    static readonly int SetCustomTimeZeroLocalTransform_ParamsSize;
    static readonly int SetCustomTimeZeroLocalTransform_BaseNodeContainer_Offset;
    static readonly int SetCustomTimeZeroLocalTransform_AttributeValue_Offset;
    static readonly int SetCustomTimeZeroLocalTransform_bResetCache_Offset;
    static readonly int SetCustomTimeZeroLocalTransform_ReturnValue_Offset;
    
    public bool SetCustomTimeZeroLocalTransform(UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer baseNodeContainer, UnrealSharp.Transform attributeValue, bool bResetCache = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomTimeZeroLocalTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomTimeZeroLocalTransform_BaseNodeContainer_Offset), 0, null, baseNodeContainer);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomTimeZeroLocalTransform_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomTimeZeroLocalTransform_bResetCache_Offset), 0, null, bResetCache);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomTimeZeroLocalTransform_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomTimeZeroLocalTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:SetCustomLocalTransform
    static readonly IntPtr SetCustomLocalTransform_NativeFunction;
    static readonly int SetCustomLocalTransform_ParamsSize;
    static readonly int SetCustomLocalTransform_BaseNodeContainer_Offset;
    static readonly int SetCustomLocalTransform_AttributeValue_Offset;
    static readonly int SetCustomLocalTransform_bResetCache_Offset;
    static readonly int SetCustomLocalTransform_ReturnValue_Offset;
    
    public bool SetCustomLocalTransform(UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer baseNodeContainer, UnrealSharp.Transform attributeValue, bool bResetCache = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomLocalTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomLocalTransform_BaseNodeContainer_Offset), 0, null, baseNodeContainer);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomLocalTransform_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomLocalTransform_bResetCache_Offset), 0, null, bResetCache);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomLocalTransform_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomLocalTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:SetCustomGeometricTransform
    static readonly IntPtr SetCustomGeometricTransform_NativeFunction;
    static readonly int SetCustomGeometricTransform_ParamsSize;
    static readonly int SetCustomGeometricTransform_AttributeValue_Offset;
    static readonly int SetCustomGeometricTransform_ReturnValue_Offset;
    
    public bool SetCustomGeometricTransform(UnrealSharp.Transform attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomGeometricTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomGeometricTransform_AttributeValue_Offset), 0, null, attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomGeometricTransform_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomGeometricTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:SetCustomBindPoseLocalTransform
    static readonly IntPtr SetCustomBindPoseLocalTransform_NativeFunction;
    static readonly int SetCustomBindPoseLocalTransform_ParamsSize;
    static readonly int SetCustomBindPoseLocalTransform_BaseNodeContainer_Offset;
    static readonly int SetCustomBindPoseLocalTransform_AttributeValue_Offset;
    static readonly int SetCustomBindPoseLocalTransform_bResetCache_Offset;
    static readonly int SetCustomBindPoseLocalTransform_ReturnValue_Offset;
    
    public bool SetCustomBindPoseLocalTransform(UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer baseNodeContainer, UnrealSharp.Transform attributeValue, bool bResetCache = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomBindPoseLocalTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomBindPoseLocalTransform_BaseNodeContainer_Offset), 0, null, baseNodeContainer);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomBindPoseLocalTransform_AttributeValue_Offset), 0, null, attributeValue);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetCustomBindPoseLocalTransform_bResetCache_Offset), 0, null, bResetCache);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomBindPoseLocalTransform_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomBindPoseLocalTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:SetCustomAssetInstanceUid
    static readonly IntPtr SetCustomAssetInstanceUid_NativeFunction;
    static readonly int SetCustomAssetInstanceUid_ParamsSize;
    static readonly int SetCustomAssetInstanceUid_AttributeValue_Offset;
    static readonly int SetCustomAssetInstanceUid_ReturnValue_Offset;
    
    public bool SetCustomAssetInstanceUid(string attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomAssetInstanceUid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AttributeValue_NativePtr = IntPtr.Add(ParamsBuffer,SetCustomAssetInstanceUid_AttributeValue_Offset);
            StringMarshaller.ToNative(AttributeValue_NativePtr,0,null,attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomAssetInstanceUid_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomAssetInstanceUid_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AttributeValue_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:SetCustomAnimationAssetUidToPlay
    static readonly IntPtr SetCustomAnimationAssetUidToPlay_NativeFunction;
    static readonly int SetCustomAnimationAssetUidToPlay_ParamsSize;
    static readonly int SetCustomAnimationAssetUidToPlay_AttributeValue_Offset;
    static readonly int SetCustomAnimationAssetUidToPlay_ReturnValue_Offset;
    
    public bool SetCustomAnimationAssetUidToPlay(string attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomAnimationAssetUidToPlay_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AttributeValue_NativePtr = IntPtr.Add(ParamsBuffer,SetCustomAnimationAssetUidToPlay_AttributeValue_Offset);
            StringMarshaller.ToNative(AttributeValue_NativePtr,0,null,attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomAnimationAssetUidToPlay_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomAnimationAssetUidToPlay_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AttributeValue_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:RemoveSpecializedType
    static readonly IntPtr RemoveSpecializedType_NativeFunction;
    static readonly int RemoveSpecializedType_ParamsSize;
    static readonly int RemoveSpecializedType_SpecializedType_Offset;
    static readonly int RemoveSpecializedType_ReturnValue_Offset;
    
    public bool RemoveSpecializedType(string specializedType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveSpecializedType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SpecializedType_NativePtr = IntPtr.Add(ParamsBuffer,RemoveSpecializedType_SpecializedType_Offset);
            StringMarshaller.ToNative(SpecializedType_NativePtr,0,null,specializedType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveSpecializedType_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RemoveSpecializedType_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SpecializedType_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:RemoveSlotMaterialDependencyUid
    static readonly IntPtr RemoveSlotMaterialDependencyUid_NativeFunction;
    static readonly int RemoveSlotMaterialDependencyUid_ParamsSize;
    static readonly int RemoveSlotMaterialDependencyUid_SlotName_Offset;
    static readonly int RemoveSlotMaterialDependencyUid_ReturnValue_Offset;
    
    public bool RemoveSlotMaterialDependencyUid(string slotName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveSlotMaterialDependencyUid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SlotName_NativePtr = IntPtr.Add(ParamsBuffer,RemoveSlotMaterialDependencyUid_SlotName_Offset);
            StringMarshaller.ToNative(SlotName_NativePtr,0,null,slotName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveSlotMaterialDependencyUid_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, RemoveSlotMaterialDependencyUid_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SlotName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:IsSpecializedTypeContains
    static readonly IntPtr IsSpecializedTypeContains_NativeFunction;
    static readonly int IsSpecializedTypeContains_ParamsSize;
    static readonly int IsSpecializedTypeContains_SpecializedType_Offset;
    static readonly int IsSpecializedTypeContains_ReturnValue_Offset;
    
    public bool IsSpecializedTypeContains(string specializedType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsSpecializedTypeContains_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SpecializedType_NativePtr = IntPtr.Add(ParamsBuffer,IsSpecializedTypeContains_SpecializedType_Offset);
            StringMarshaller.ToNative(SpecializedType_NativePtr,0,null,specializedType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsSpecializedTypeContains_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsSpecializedTypeContains_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SpecializedType_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:GetSpecializedTypeCount
    static readonly IntPtr GetSpecializedTypeCount_NativeFunction;
    static readonly int GetSpecializedTypeCount_ParamsSize;
    static readonly int GetSpecializedTypeCount_ReturnValue_Offset;
    
    public int GetSpecializedTypeCount()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSpecializedTypeCount_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSpecializedTypeCount_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetSpecializedTypeCount_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:GetSpecializedType
    static readonly IntPtr GetSpecializedType_NativeFunction;
    static readonly int GetSpecializedType_ParamsSize;
    static readonly int GetSpecializedType_Index_Offset;
    static readonly int GetSpecializedType_OutSpecializedType_Offset;
    
    public void GetSpecializedType(int index, out string outSpecializedType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSpecializedType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetSpecializedType_Index_Offset), 0, null, index);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSpecializedType_NativeFunction, ParamsBuffer);
            
            IntPtr OutSpecializedType_NativePtr = IntPtr.Add(ParamsBuffer,GetSpecializedType_OutSpecializedType_Offset);
            outSpecializedType = StringMarshaller.FromNative(OutSpecializedType_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutSpecializedType_NativePtr, 0);
            
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:GetSlotMaterialDependencyUid
    static readonly IntPtr GetSlotMaterialDependencyUid_NativeFunction;
    static readonly int GetSlotMaterialDependencyUid_ParamsSize;
    static readonly int GetSlotMaterialDependencyUid_SlotName_Offset;
    static readonly int GetSlotMaterialDependencyUid_OutMaterialDependency_Offset;
    static readonly int GetSlotMaterialDependencyUid_ReturnValue_Offset;
    
    public bool GetSlotMaterialDependencyUid(string slotName, out string outMaterialDependency)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSlotMaterialDependencyUid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SlotName_NativePtr = IntPtr.Add(ParamsBuffer,GetSlotMaterialDependencyUid_SlotName_Offset);
            StringMarshaller.ToNative(SlotName_NativePtr,0,null,slotName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSlotMaterialDependencyUid_NativeFunction, ParamsBuffer);
            
            IntPtr OutMaterialDependency_NativePtr = IntPtr.Add(ParamsBuffer,GetSlotMaterialDependencyUid_OutMaterialDependency_Offset);
            outMaterialDependency = StringMarshaller.FromNative(OutMaterialDependency_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutMaterialDependency_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetSlotMaterialDependencyUid_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SlotName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:GetCustomTimeZeroLocalTransform
    static readonly IntPtr GetCustomTimeZeroLocalTransform_NativeFunction;
    static readonly int GetCustomTimeZeroLocalTransform_ParamsSize;
    static readonly int GetCustomTimeZeroLocalTransform_AttributeValue_Offset;
    static readonly int GetCustomTimeZeroLocalTransform_ReturnValue_Offset;
    
    public bool GetCustomTimeZeroLocalTransform(out UnrealSharp.Transform attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomTimeZeroLocalTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomTimeZeroLocalTransform_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomTimeZeroLocalTransform_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomTimeZeroLocalTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:GetCustomTimeZeroGlobalTransform
    static readonly IntPtr GetCustomTimeZeroGlobalTransform_NativeFunction;
    static readonly int GetCustomTimeZeroGlobalTransform_ParamsSize;
    static readonly int GetCustomTimeZeroGlobalTransform_BaseNodeContainer_Offset;
    static readonly int GetCustomTimeZeroGlobalTransform_GlobalOffsetTransform_Offset;
    static readonly int GetCustomTimeZeroGlobalTransform_AttributeValue_Offset;
    static readonly int GetCustomTimeZeroGlobalTransform_bForceRecache_Offset;
    static readonly int GetCustomTimeZeroGlobalTransform_ReturnValue_Offset;
    
    public bool GetCustomTimeZeroGlobalTransform(UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer baseNodeContainer, UnrealSharp.Transform globalOffsetTransform, out UnrealSharp.Transform attributeValue, bool bForceRecache = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomTimeZeroGlobalTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer>.ToNative(IntPtr.Add(ParamsBuffer, GetCustomTimeZeroGlobalTransform_BaseNodeContainer_Offset), 0, null, baseNodeContainer);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, GetCustomTimeZeroGlobalTransform_GlobalOffsetTransform_Offset), 0, null, globalOffsetTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetCustomTimeZeroGlobalTransform_bForceRecache_Offset), 0, null, bForceRecache);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomTimeZeroGlobalTransform_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomTimeZeroGlobalTransform_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomTimeZeroGlobalTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:GetCustomLocalTransform
    static readonly IntPtr GetCustomLocalTransform_NativeFunction;
    static readonly int GetCustomLocalTransform_ParamsSize;
    static readonly int GetCustomLocalTransform_AttributeValue_Offset;
    static readonly int GetCustomLocalTransform_ReturnValue_Offset;
    
    public bool GetCustomLocalTransform(out UnrealSharp.Transform attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomLocalTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomLocalTransform_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomLocalTransform_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomLocalTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:GetCustomGlobalTransform
    static readonly IntPtr GetCustomGlobalTransform_NativeFunction;
    static readonly int GetCustomGlobalTransform_ParamsSize;
    static readonly int GetCustomGlobalTransform_BaseNodeContainer_Offset;
    static readonly int GetCustomGlobalTransform_GlobalOffsetTransform_Offset;
    static readonly int GetCustomGlobalTransform_AttributeValue_Offset;
    static readonly int GetCustomGlobalTransform_bForceRecache_Offset;
    static readonly int GetCustomGlobalTransform_ReturnValue_Offset;
    
    public bool GetCustomGlobalTransform(UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer baseNodeContainer, UnrealSharp.Transform globalOffsetTransform, out UnrealSharp.Transform attributeValue, bool bForceRecache = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomGlobalTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer>.ToNative(IntPtr.Add(ParamsBuffer, GetCustomGlobalTransform_BaseNodeContainer_Offset), 0, null, baseNodeContainer);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, GetCustomGlobalTransform_GlobalOffsetTransform_Offset), 0, null, globalOffsetTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetCustomGlobalTransform_bForceRecache_Offset), 0, null, bForceRecache);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomGlobalTransform_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomGlobalTransform_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomGlobalTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:GetCustomGeometricTransform
    static readonly IntPtr GetCustomGeometricTransform_NativeFunction;
    static readonly int GetCustomGeometricTransform_ParamsSize;
    static readonly int GetCustomGeometricTransform_AttributeValue_Offset;
    static readonly int GetCustomGeometricTransform_ReturnValue_Offset;
    
    public bool GetCustomGeometricTransform(out UnrealSharp.Transform attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomGeometricTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomGeometricTransform_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomGeometricTransform_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomGeometricTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:GetCustomBindPoseLocalTransform
    static readonly IntPtr GetCustomBindPoseLocalTransform_NativeFunction;
    static readonly int GetCustomBindPoseLocalTransform_ParamsSize;
    static readonly int GetCustomBindPoseLocalTransform_AttributeValue_Offset;
    static readonly int GetCustomBindPoseLocalTransform_ReturnValue_Offset;
    
    public bool GetCustomBindPoseLocalTransform(out UnrealSharp.Transform attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomBindPoseLocalTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomBindPoseLocalTransform_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomBindPoseLocalTransform_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomBindPoseLocalTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:GetCustomBindPoseGlobalTransform
    static readonly IntPtr GetCustomBindPoseGlobalTransform_NativeFunction;
    static readonly int GetCustomBindPoseGlobalTransform_ParamsSize;
    static readonly int GetCustomBindPoseGlobalTransform_BaseNodeContainer_Offset;
    static readonly int GetCustomBindPoseGlobalTransform_GlobalOffsetTransform_Offset;
    static readonly int GetCustomBindPoseGlobalTransform_AttributeValue_Offset;
    static readonly int GetCustomBindPoseGlobalTransform_bForceRecache_Offset;
    static readonly int GetCustomBindPoseGlobalTransform_ReturnValue_Offset;
    
    public bool GetCustomBindPoseGlobalTransform(UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer baseNodeContainer, UnrealSharp.Transform globalOffsetTransform, out UnrealSharp.Transform attributeValue, bool bForceRecache = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomBindPoseGlobalTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeBaseNodeContainer>.ToNative(IntPtr.Add(ParamsBuffer, GetCustomBindPoseGlobalTransform_BaseNodeContainer_Offset), 0, null, baseNodeContainer);
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, GetCustomBindPoseGlobalTransform_GlobalOffsetTransform_Offset), 0, null, globalOffsetTransform);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetCustomBindPoseGlobalTransform_bForceRecache_Offset), 0, null, bForceRecache);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomBindPoseGlobalTransform_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomBindPoseGlobalTransform_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomBindPoseGlobalTransform_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:GetCustomAssetInstanceUid
    static readonly IntPtr GetCustomAssetInstanceUid_NativeFunction;
    static readonly int GetCustomAssetInstanceUid_ParamsSize;
    static readonly int GetCustomAssetInstanceUid_AttributeValue_Offset;
    static readonly int GetCustomAssetInstanceUid_ReturnValue_Offset;
    
    public bool GetCustomAssetInstanceUid(out string attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomAssetInstanceUid_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomAssetInstanceUid_NativeFunction, ParamsBuffer);
            
            IntPtr AttributeValue_NativePtr = IntPtr.Add(ParamsBuffer,GetCustomAssetInstanceUid_AttributeValue_Offset);
            attributeValue = StringMarshaller.FromNative(AttributeValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(AttributeValue_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAssetInstanceUid_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:GetCustomAnimationAssetUidToPlay
    static readonly IntPtr GetCustomAnimationAssetUidToPlay_NativeFunction;
    static readonly int GetCustomAnimationAssetUidToPlay_ParamsSize;
    static readonly int GetCustomAnimationAssetUidToPlay_AttributeValue_Offset;
    static readonly int GetCustomAnimationAssetUidToPlay_ReturnValue_Offset;
    
    public bool GetCustomAnimationAssetUidToPlay(out string attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomAnimationAssetUidToPlay_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomAnimationAssetUidToPlay_NativeFunction, ParamsBuffer);
            
            IntPtr AttributeValue_NativePtr = IntPtr.Add(ParamsBuffer,GetCustomAnimationAssetUidToPlay_AttributeValue_Offset);
            attributeValue = StringMarshaller.FromNative(AttributeValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(AttributeValue_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomAnimationAssetUidToPlay_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeSceneNode:AddSpecializedType
    static readonly IntPtr AddSpecializedType_NativeFunction;
    static readonly int AddSpecializedType_ParamsSize;
    static readonly int AddSpecializedType_SpecializedType_Offset;
    static readonly int AddSpecializedType_ReturnValue_Offset;
    
    public bool AddSpecializedType(string specializedType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddSpecializedType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr SpecializedType_NativePtr = IntPtr.Add(ParamsBuffer,AddSpecializedType_SpecializedType_Offset);
            StringMarshaller.ToNative(SpecializedType_NativePtr,0,null,specializedType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddSpecializedType_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AddSpecializedType_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(SpecializedType_NativePtr, 0);
            return returnValue;
        }
    }
    
    
}
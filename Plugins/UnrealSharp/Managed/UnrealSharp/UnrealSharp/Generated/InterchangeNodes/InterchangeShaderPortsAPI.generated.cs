// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.InterchangeNodes;

[UClass]
public partial class InterchangeShaderPortsAPI : UnrealSharp.CoreUObject.Object
{
    
    static readonly IntPtr NativeClassPtr;
    static InterchangeShaderPortsAPI()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InterchangeShaderPortsAPI");
        
        
        MakeInputValueKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeInputValueKey");
        MakeInputValueKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeInputValueKey_NativeFunction);
        MakeInputValueKey_InputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeInputValueKey_NativeFunction, "InputName");
        MakeInputValueKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeInputValueKey_NativeFunction, "ReturnValue");
        MakeInputName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeInputName");
        MakeInputName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeInputName_NativeFunction);
        MakeInputName_InputKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeInputName_NativeFunction, "InputKey");
        MakeInputName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeInputName_NativeFunction, "ReturnValue");
        MakeInputConnectionKey_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "MakeInputConnectionKey");
        MakeInputConnectionKey_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(MakeInputConnectionKey_NativeFunction);
        MakeInputConnectionKey_InputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeInputConnectionKey_NativeFunction, "InputName");
        MakeInputConnectionKey_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(MakeInputConnectionKey_NativeFunction, "ReturnValue");
        IsAnInput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsAnInput");
        IsAnInput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsAnInput_NativeFunction);
        IsAnInput_AttributeKey_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAnInput_NativeFunction, "AttributeKey");
        IsAnInput_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsAnInput_NativeFunction, "ReturnValue");
        HasInput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasInput");
        HasInput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasInput_NativeFunction);
        HasInput_InterchangeNode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasInput_NativeFunction, "InterchangeNode");
        HasInput_InInputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasInput_NativeFunction, "InInputName");
        HasInput_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasInput_NativeFunction, "ReturnValue");
        GetInputConnection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInputConnection");
        GetInputConnection_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInputConnection_NativeFunction);
        GetInputConnection_InterchangeNode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputConnection_NativeFunction, "InterchangeNode");
        GetInputConnection_InputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputConnection_NativeFunction, "InputName");
        GetInputConnection_OutExpressionUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputConnection_NativeFunction, "OutExpressionUid");
        GetInputConnection_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputConnection_NativeFunction, "OutputName");
        GetInputConnection_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputConnection_NativeFunction, "ReturnValue");
        ConnectOuputToInputByName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectOuputToInputByName");
        ConnectOuputToInputByName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectOuputToInputByName_NativeFunction);
        ConnectOuputToInputByName_InterchangeNode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOuputToInputByName_NativeFunction, "InterchangeNode");
        ConnectOuputToInputByName_InputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOuputToInputByName_NativeFunction, "InputName");
        ConnectOuputToInputByName_ExpressionUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOuputToInputByName_NativeFunction, "ExpressionUid");
        ConnectOuputToInputByName_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOuputToInputByName_NativeFunction, "OutputName");
        ConnectOuputToInputByName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOuputToInputByName_NativeFunction, "ReturnValue");
        ConnectOuputToInputByIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectOuputToInputByIndex");
        ConnectOuputToInputByIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectOuputToInputByIndex_NativeFunction);
        ConnectOuputToInputByIndex_InterchangeNode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOuputToInputByIndex_NativeFunction, "InterchangeNode");
        ConnectOuputToInputByIndex_InputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOuputToInputByIndex_NativeFunction, "InputName");
        ConnectOuputToInputByIndex_ExpressionUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOuputToInputByIndex_NativeFunction, "ExpressionUid");
        ConnectOuputToInputByIndex_OutputIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOuputToInputByIndex_NativeFunction, "OutputIndex");
        ConnectOuputToInputByIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectOuputToInputByIndex_NativeFunction, "ReturnValue");
        ConnectDefaultOuputToInput_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectDefaultOuputToInput");
        ConnectDefaultOuputToInput_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectDefaultOuputToInput_NativeFunction);
        ConnectDefaultOuputToInput_InterchangeNode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectDefaultOuputToInput_NativeFunction, "InterchangeNode");
        ConnectDefaultOuputToInput_InputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectDefaultOuputToInput_NativeFunction, "InputName");
        ConnectDefaultOuputToInput_ExpressionUid_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectDefaultOuputToInput_NativeFunction, "ExpressionUid");
        ConnectDefaultOuputToInput_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectDefaultOuputToInput_NativeFunction, "ReturnValue");
        
        
    }
    
    protected InterchangeShaderPortsAPI(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/InterchangeNodes.InterchangeShaderPortsAPI:MakeInputValueKey
    static readonly IntPtr MakeInputValueKey_NativeFunction;
    static readonly int MakeInputValueKey_ParamsSize;
    static readonly int MakeInputValueKey_InputName_Offset;
    static readonly int MakeInputValueKey_ReturnValue_Offset;
    
    public static string MakeInputValueKey(string inputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeInputValueKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InputName_NativePtr = IntPtr.Add(ParamsBuffer,MakeInputValueKey_InputName_Offset);
            StringMarshaller.ToNative(InputName_NativePtr,0,null,inputName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeInputValueKey_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,MakeInputValueKey_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(InputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeShaderPortsAPI:MakeInputName
    static readonly IntPtr MakeInputName_NativeFunction;
    static readonly int MakeInputName_ParamsSize;
    static readonly int MakeInputName_InputKey_Offset;
    static readonly int MakeInputName_ReturnValue_Offset;
    
    public static string MakeInputName(string inputKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeInputName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InputKey_NativePtr = IntPtr.Add(ParamsBuffer,MakeInputName_InputKey_Offset);
            StringMarshaller.ToNative(InputKey_NativePtr,0,null,inputKey);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeInputName_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,MakeInputName_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(InputKey_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeShaderPortsAPI:MakeInputConnectionKey
    static readonly IntPtr MakeInputConnectionKey_NativeFunction;
    static readonly int MakeInputConnectionKey_ParamsSize;
    static readonly int MakeInputConnectionKey_InputName_Offset;
    static readonly int MakeInputConnectionKey_ReturnValue_Offset;
    
    public static string MakeInputConnectionKey(string inputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[MakeInputConnectionKey_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InputName_NativePtr = IntPtr.Add(ParamsBuffer,MakeInputConnectionKey_InputName_Offset);
            StringMarshaller.ToNative(InputName_NativePtr,0,null,inputName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, MakeInputConnectionKey_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,MakeInputConnectionKey_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            StringMarshaller.DestructInstance(InputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeShaderPortsAPI:IsAnInput
    static readonly IntPtr IsAnInput_NativeFunction;
    static readonly int IsAnInput_ParamsSize;
    static readonly int IsAnInput_AttributeKey_Offset;
    static readonly int IsAnInput_ReturnValue_Offset;
    
    public static bool IsAnInput(string attributeKey)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsAnInput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr AttributeKey_NativePtr = IntPtr.Add(ParamsBuffer,IsAnInput_AttributeKey_Offset);
            StringMarshaller.ToNative(AttributeKey_NativePtr,0,null,attributeKey);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsAnInput_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsAnInput_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(AttributeKey_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeShaderPortsAPI:HasInput
    static readonly IntPtr HasInput_NativeFunction;
    static readonly int HasInput_ParamsSize;
    static readonly int HasInput_InterchangeNode_Offset;
    static readonly int HasInput_InInputName_Offset;
    static readonly int HasInput_ReturnValue_Offset;
    
    public static bool HasInput(UnrealSharp.InterchangeCore.InterchangeBaseNode interchangeNode, Name inInputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasInput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeBaseNode>.ToNative(IntPtr.Add(ParamsBuffer, HasInput_InterchangeNode_Offset), 0, null, interchangeNode);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, HasInput_InInputName_Offset), 0, null, inInputName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, HasInput_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasInput_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeShaderPortsAPI:GetInputConnection
    static readonly IntPtr GetInputConnection_NativeFunction;
    static readonly int GetInputConnection_ParamsSize;
    static readonly int GetInputConnection_InterchangeNode_Offset;
    static readonly int GetInputConnection_InputName_Offset;
    static readonly int GetInputConnection_OutExpressionUid_Offset;
    static readonly int GetInputConnection_OutputName_Offset;
    static readonly int GetInputConnection_ReturnValue_Offset;
    
    public static bool GetInputConnection(UnrealSharp.InterchangeCore.InterchangeBaseNode interchangeNode, string inputName, out string outExpressionUid, out string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInputConnection_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeBaseNode>.ToNative(IntPtr.Add(ParamsBuffer, GetInputConnection_InterchangeNode_Offset), 0, null, interchangeNode);
            IntPtr InputName_NativePtr = IntPtr.Add(ParamsBuffer,GetInputConnection_InputName_Offset);
            StringMarshaller.ToNative(InputName_NativePtr,0,null,inputName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetInputConnection_NativeFunction, ParamsBuffer);
            
            IntPtr OutExpressionUid_NativePtr = IntPtr.Add(ParamsBuffer,GetInputConnection_OutExpressionUid_Offset);
            outExpressionUid = StringMarshaller.FromNative(OutExpressionUid_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutExpressionUid_NativePtr, 0);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,GetInputConnection_OutputName_Offset);
            outputName = StringMarshaller.FromNative(OutputName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetInputConnection_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeShaderPortsAPI:ConnectOuputToInputByName
    static readonly IntPtr ConnectOuputToInputByName_NativeFunction;
    static readonly int ConnectOuputToInputByName_ParamsSize;
    static readonly int ConnectOuputToInputByName_InterchangeNode_Offset;
    static readonly int ConnectOuputToInputByName_InputName_Offset;
    static readonly int ConnectOuputToInputByName_ExpressionUid_Offset;
    static readonly int ConnectOuputToInputByName_OutputName_Offset;
    static readonly int ConnectOuputToInputByName_ReturnValue_Offset;
    
    public static bool ConnectOuputToInputByName(UnrealSharp.InterchangeCore.InterchangeBaseNode interchangeNode, string inputName, string expressionUid, string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectOuputToInputByName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeBaseNode>.ToNative(IntPtr.Add(ParamsBuffer, ConnectOuputToInputByName_InterchangeNode_Offset), 0, null, interchangeNode);
            IntPtr InputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOuputToInputByName_InputName_Offset);
            StringMarshaller.ToNative(InputName_NativePtr,0,null,inputName);
            IntPtr ExpressionUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOuputToInputByName_ExpressionUid_Offset);
            StringMarshaller.ToNative(ExpressionUid_NativePtr,0,null,expressionUid);
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOuputToInputByName_OutputName_Offset);
            StringMarshaller.ToNative(OutputName_NativePtr,0,null,outputName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConnectOuputToInputByName_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectOuputToInputByName_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InputName_NativePtr, 0);
            StringMarshaller.DestructInstance(ExpressionUid_NativePtr, 0);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeShaderPortsAPI:ConnectOuputToInputByIndex
    static readonly IntPtr ConnectOuputToInputByIndex_NativeFunction;
    static readonly int ConnectOuputToInputByIndex_ParamsSize;
    static readonly int ConnectOuputToInputByIndex_InterchangeNode_Offset;
    static readonly int ConnectOuputToInputByIndex_InputName_Offset;
    static readonly int ConnectOuputToInputByIndex_ExpressionUid_Offset;
    static readonly int ConnectOuputToInputByIndex_OutputIndex_Offset;
    static readonly int ConnectOuputToInputByIndex_ReturnValue_Offset;
    
    public static bool ConnectOuputToInputByIndex(UnrealSharp.InterchangeCore.InterchangeBaseNode interchangeNode, string inputName, string expressionUid, int outputIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectOuputToInputByIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeBaseNode>.ToNative(IntPtr.Add(ParamsBuffer, ConnectOuputToInputByIndex_InterchangeNode_Offset), 0, null, interchangeNode);
            IntPtr InputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOuputToInputByIndex_InputName_Offset);
            StringMarshaller.ToNative(InputName_NativePtr,0,null,inputName);
            IntPtr ExpressionUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectOuputToInputByIndex_ExpressionUid_Offset);
            StringMarshaller.ToNative(ExpressionUid_NativePtr,0,null,expressionUid);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, ConnectOuputToInputByIndex_OutputIndex_Offset), 0, null, outputIndex);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConnectOuputToInputByIndex_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectOuputToInputByIndex_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InputName_NativePtr, 0);
            StringMarshaller.DestructInstance(ExpressionUid_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeShaderPortsAPI:ConnectDefaultOuputToInput
    static readonly IntPtr ConnectDefaultOuputToInput_NativeFunction;
    static readonly int ConnectDefaultOuputToInput_ParamsSize;
    static readonly int ConnectDefaultOuputToInput_InterchangeNode_Offset;
    static readonly int ConnectDefaultOuputToInput_InputName_Offset;
    static readonly int ConnectDefaultOuputToInput_ExpressionUid_Offset;
    static readonly int ConnectDefaultOuputToInput_ReturnValue_Offset;
    
    public static bool ConnectDefaultOuputToInput(UnrealSharp.InterchangeCore.InterchangeBaseNode interchangeNode, string inputName, string expressionUid)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectDefaultOuputToInput_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.InterchangeCore.InterchangeBaseNode>.ToNative(IntPtr.Add(ParamsBuffer, ConnectDefaultOuputToInput_InterchangeNode_Offset), 0, null, interchangeNode);
            IntPtr InputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectDefaultOuputToInput_InputName_Offset);
            StringMarshaller.ToNative(InputName_NativePtr,0,null,inputName);
            IntPtr ExpressionUid_NativePtr = IntPtr.Add(ParamsBuffer,ConnectDefaultOuputToInput_ExpressionUid_Offset);
            StringMarshaller.ToNative(ExpressionUid_NativePtr,0,null,expressionUid);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConnectDefaultOuputToInput_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectDefaultOuputToInput_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(InputName_NativePtr, 0);
            StringMarshaller.DestructInstance(ExpressionUid_NativePtr, 0);
            return returnValue;
        }
    }
    
    
}
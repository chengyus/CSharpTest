// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.InterchangeNodes;

[UClass]
public partial class InterchangeTransformAnimationTrackNode : UnrealSharp.InterchangeNodes.InterchangeAnimationTrackNode
{
    
    static InterchangeTransformAnimationTrackNode()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InterchangeTransformAnimationTrackNode");
        
        
        SetCustomUsedChannels_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomUsedChannels");
        SetCustomUsedChannels_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomUsedChannels_NativeFunction);
        SetCustomUsedChannels_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomUsedChannels_NativeFunction, "AttributeValue");
        SetCustomUsedChannels_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomUsedChannels_NativeFunction, "ReturnValue");
        GetCustomUsedChannels_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomUsedChannels");
        GetCustomUsedChannels_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomUsedChannels_NativeFunction);
        GetCustomUsedChannels_AttributeValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomUsedChannels_NativeFunction, "AttributeValue");
        GetCustomUsedChannels_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomUsedChannels_NativeFunction, "ReturnValue");
        
        
    }
    
    protected InterchangeTransformAnimationTrackNode(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/InterchangeNodes.InterchangeTransformAnimationTrackNode:SetCustomUsedChannels
    static readonly IntPtr SetCustomUsedChannels_NativeFunction;
    static readonly int SetCustomUsedChannels_ParamsSize;
    static readonly int SetCustomUsedChannels_AttributeValue_Offset;
    static readonly int SetCustomUsedChannels_ReturnValue_Offset;
    
    public bool SetCustomUsedChannels(int attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomUsedChannels_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomUsedChannels_AttributeValue_Offset), 0, null, attributeValue);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetCustomUsedChannels_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetCustomUsedChannels_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/InterchangeNodes.InterchangeTransformAnimationTrackNode:GetCustomUsedChannels
    static readonly IntPtr GetCustomUsedChannels_NativeFunction;
    static readonly int GetCustomUsedChannels_ParamsSize;
    static readonly int GetCustomUsedChannels_AttributeValue_Offset;
    static readonly int GetCustomUsedChannels_ReturnValue_Offset;
    
    public bool GetCustomUsedChannels(out int attributeValue)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomUsedChannels_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetCustomUsedChannels_NativeFunction, ParamsBuffer);
            
            attributeValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomUsedChannels_AttributeValue_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetCustomUsedChannels_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
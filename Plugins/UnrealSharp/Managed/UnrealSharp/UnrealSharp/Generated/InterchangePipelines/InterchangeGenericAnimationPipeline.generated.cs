// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.InterchangePipelines;

[UClass]
public partial class InterchangeGenericAnimationPipeline : UnrealSharp.InterchangeCore.InterchangePipelineBase
{
    
    static InterchangeGenericAnimationPipeline()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InterchangeGenericAnimationPipeline");
        
        bImportAnimations_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImportAnimations");
        bImportBoneTracks_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImportBoneTracks");
        AnimationRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AnimationRange");
        FrameImportRange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FrameImportRange");
        bUse30HzToBakeBoneAnimation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUse30HzToBakeBoneAnimation");
        CustomBoneAnimationSampleRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CustomBoneAnimationSampleRate");
        bSnapToClosestFrameBoundary_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSnapToClosestFrameBoundary");
        bImportCustomAttribute_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImportCustomAttribute");
        bAddCurveMetadataToSkeleton_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAddCurveMetadataToSkeleton");
        bSetMaterialDriveParameterOnCustomAttribute_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSetMaterialDriveParameterOnCustomAttribute");
        bRemoveCurveRedundantKeys_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bRemoveCurveRedundantKeys");
        bDoNotImportCurveWithZero_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bDoNotImportCurveWithZero");
        bDeleteExistingNonCurveCustomAttributes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bDeleteExistingNonCurveCustomAttributes");
        bDeleteExistingCustomAttributeCurves_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bDeleteExistingCustomAttributeCurves");
        bDeleteExistingMorphTargetCurves_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bDeleteExistingMorphTargetCurves");
        
        
        
    }
    
    protected InterchangeGenericAnimationPipeline(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericAnimationPipeline:bImportAnimations
    static readonly int bImportAnimations_Offset;
    
    public bool bImportAnimations
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bImportAnimations_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bImportAnimations_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericAnimationPipeline:bImportBoneTracks
    static readonly int bImportBoneTracks_Offset;
    
    public bool bImportBoneTracks
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bImportBoneTracks_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bImportBoneTracks_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/InterchangePipelines.InterchangeGenericAnimationPipeline:AnimationRange
    static readonly int AnimationRange_Offset;
    
    public UnrealSharp.InterchangePipelines.EInterchangeAnimationRange AnimationRange
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.InterchangePipelines.EInterchangeAnimationRange>.FromNative(IntPtr.Add(NativeObject, AnimationRange_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.InterchangePipelines.EInterchangeAnimationRange>.ToNative(IntPtr.Add(NativeObject, AnimationRange_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/InterchangePipelines.InterchangeGenericAnimationPipeline:FrameImportRange
    static readonly int FrameImportRange_Offset;
    
    public UnrealSharp.CoreUObject.Int32Interval FrameImportRange
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.Int32Interval>.FromNative(IntPtr.Add(NativeObject, FrameImportRange_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.Int32Interval>.ToNative(IntPtr.Add(NativeObject, FrameImportRange_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericAnimationPipeline:bUse30HzToBakeBoneAnimation
    static readonly int bUse30HzToBakeBoneAnimation_Offset;
    
    public bool bUse30HzToBakeBoneAnimation
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUse30HzToBakeBoneAnimation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bUse30HzToBakeBoneAnimation_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/InterchangePipelines.InterchangeGenericAnimationPipeline:CustomBoneAnimationSampleRate
    static readonly int CustomBoneAnimationSampleRate_Offset;
    
    public int CustomBoneAnimationSampleRate
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, CustomBoneAnimationSampleRate_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, CustomBoneAnimationSampleRate_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericAnimationPipeline:bSnapToClosestFrameBoundary
    static readonly int bSnapToClosestFrameBoundary_Offset;
    
    public bool bSnapToClosestFrameBoundary
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bSnapToClosestFrameBoundary_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bSnapToClosestFrameBoundary_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericAnimationPipeline:bImportCustomAttribute
    static readonly int bImportCustomAttribute_Offset;
    
    public bool bImportCustomAttribute
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bImportCustomAttribute_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bImportCustomAttribute_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericAnimationPipeline:bAddCurveMetadataToSkeleton
    static readonly int bAddCurveMetadataToSkeleton_Offset;
    
    public bool bAddCurveMetadataToSkeleton
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAddCurveMetadataToSkeleton_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAddCurveMetadataToSkeleton_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericAnimationPipeline:bSetMaterialDriveParameterOnCustomAttribute
    static readonly int bSetMaterialDriveParameterOnCustomAttribute_Offset;
    
    public bool bSetMaterialDriveParameterOnCustomAttribute
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bSetMaterialDriveParameterOnCustomAttribute_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bSetMaterialDriveParameterOnCustomAttribute_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericAnimationPipeline:bRemoveCurveRedundantKeys
    static readonly int bRemoveCurveRedundantKeys_Offset;
    
    public bool bRemoveCurveRedundantKeys
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bRemoveCurveRedundantKeys_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bRemoveCurveRedundantKeys_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericAnimationPipeline:bDoNotImportCurveWithZero
    static readonly int bDoNotImportCurveWithZero_Offset;
    
    public bool bDoNotImportCurveWithZero
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bDoNotImportCurveWithZero_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bDoNotImportCurveWithZero_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericAnimationPipeline:bDeleteExistingNonCurveCustomAttributes
    static readonly int bDeleteExistingNonCurveCustomAttributes_Offset;
    
    public bool bDeleteExistingNonCurveCustomAttributes
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bDeleteExistingNonCurveCustomAttributes_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bDeleteExistingNonCurveCustomAttributes_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericAnimationPipeline:bDeleteExistingCustomAttributeCurves
    static readonly int bDeleteExistingCustomAttributeCurves_Offset;
    
    public bool bDeleteExistingCustomAttributeCurves
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bDeleteExistingCustomAttributeCurves_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bDeleteExistingCustomAttributeCurves_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericAnimationPipeline:bDeleteExistingMorphTargetCurves
    static readonly int bDeleteExistingMorphTargetCurves_Offset;
    
    public bool bDeleteExistingMorphTargetCurves
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bDeleteExistingMorphTargetCurves_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bDeleteExistingMorphTargetCurves_Offset), 0, this, value);
        }
    }
    
    
}
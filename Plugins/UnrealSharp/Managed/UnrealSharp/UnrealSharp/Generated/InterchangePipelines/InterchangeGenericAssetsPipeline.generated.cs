// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.InterchangePipelines;

[UClass]
public partial class InterchangeGenericAssetsPipeline : UnrealSharp.InterchangeCore.InterchangePipelineBase
{
    
    static InterchangeGenericAssetsPipeline()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InterchangeGenericAssetsPipeline");
        
        ReimportStrategy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ReimportStrategy");
        bUseSourceNameForAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseSourceNameForAsset");
        AssetName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AssetName");
        AssetName_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "AssetName");
        ImportOffsetTranslation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ImportOffsetTranslation");
        ImportOffsetRotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ImportOffsetRotation");
        ImportOffsetUniformScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ImportOffsetUniformScale");
        CommonMeshesProperties_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CommonMeshesProperties");
        CommonSkeletalMeshesAndAnimationsProperties_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CommonSkeletalMeshesAndAnimationsProperties");
        MeshPipeline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MeshPipeline");
        AnimationPipeline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AnimationPipeline");
        MaterialPipeline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaterialPipeline");
        
        
        
    }
    
    protected InterchangeGenericAssetsPipeline(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // EnumProperty /Script/InterchangePipelines.InterchangeGenericAssetsPipeline:ReimportStrategy
    static readonly int ReimportStrategy_Offset;
    
    public UnrealSharp.InterchangeCore.EReimportStrategyFlags ReimportStrategy
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.InterchangeCore.EReimportStrategyFlags>.FromNative(IntPtr.Add(NativeObject, ReimportStrategy_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.InterchangeCore.EReimportStrategyFlags>.ToNative(IntPtr.Add(NativeObject, ReimportStrategy_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericAssetsPipeline:bUseSourceNameForAsset
    static readonly int bUseSourceNameForAsset_Offset;
    
    public bool bUseSourceNameForAsset
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseSourceNameForAsset_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bUseSourceNameForAsset_Offset), 0, this, value);
        }
    }
    
    // StrProperty /Script/InterchangePipelines.InterchangeGenericAssetsPipeline:AssetName
    static readonly int AssetName_Offset;
    static readonly IntPtr AssetName_NativeProperty;
    
    public string AssetName
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,AssetName_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,AssetName_Offset),0,this,value);
        }
    }
    
    // StructProperty /Script/InterchangePipelines.InterchangeGenericAssetsPipeline:ImportOffsetTranslation
    static readonly int ImportOffsetTranslation_Offset;
    
    public System.DoubleNumerics.Vector3 ImportOffsetTranslation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, ImportOffsetTranslation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, ImportOffsetTranslation_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/InterchangePipelines.InterchangeGenericAssetsPipeline:ImportOffsetRotation
    static readonly int ImportOffsetRotation_Offset;
    
    public UnrealSharp.Rotator ImportOffsetRotation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(NativeObject, ImportOffsetRotation_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(NativeObject, ImportOffsetRotation_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/InterchangePipelines.InterchangeGenericAssetsPipeline:ImportOffsetUniformScale
    static readonly int ImportOffsetUniformScale_Offset;
    
    public float ImportOffsetUniformScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ImportOffsetUniformScale_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ImportOffsetUniformScale_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/InterchangePipelines.InterchangeGenericAssetsPipeline:CommonMeshesProperties
    static readonly int CommonMeshesProperties_Offset;
    
    public UnrealSharp.InterchangePipelines.InterchangeGenericCommonMeshesProperties CommonMeshesProperties
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.InterchangePipelines.InterchangeGenericCommonMeshesProperties>.FromNative(IntPtr.Add(NativeObject, CommonMeshesProperties_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.InterchangePipelines.InterchangeGenericCommonMeshesProperties>.ToNative(IntPtr.Add(NativeObject, CommonMeshesProperties_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/InterchangePipelines.InterchangeGenericAssetsPipeline:CommonSkeletalMeshesAndAnimationsProperties
    static readonly int CommonSkeletalMeshesAndAnimationsProperties_Offset;
    
    public UnrealSharp.InterchangePipelines.InterchangeGenericCommonSkeletalMeshesAndAnimationsProperties CommonSkeletalMeshesAndAnimationsProperties
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.InterchangePipelines.InterchangeGenericCommonSkeletalMeshesAndAnimationsProperties>.FromNative(IntPtr.Add(NativeObject, CommonSkeletalMeshesAndAnimationsProperties_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.InterchangePipelines.InterchangeGenericCommonSkeletalMeshesAndAnimationsProperties>.ToNative(IntPtr.Add(NativeObject, CommonSkeletalMeshesAndAnimationsProperties_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/InterchangePipelines.InterchangeGenericAssetsPipeline:MeshPipeline
    static readonly int MeshPipeline_Offset;
    
    public UnrealSharp.InterchangePipelines.InterchangeGenericMeshPipeline MeshPipeline
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.InterchangePipelines.InterchangeGenericMeshPipeline>.FromNative(IntPtr.Add(NativeObject, MeshPipeline_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.InterchangePipelines.InterchangeGenericMeshPipeline>.ToNative(IntPtr.Add(NativeObject, MeshPipeline_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/InterchangePipelines.InterchangeGenericAssetsPipeline:AnimationPipeline
    static readonly int AnimationPipeline_Offset;
    
    public UnrealSharp.InterchangePipelines.InterchangeGenericAnimationPipeline AnimationPipeline
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.InterchangePipelines.InterchangeGenericAnimationPipeline>.FromNative(IntPtr.Add(NativeObject, AnimationPipeline_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.InterchangePipelines.InterchangeGenericAnimationPipeline>.ToNative(IntPtr.Add(NativeObject, AnimationPipeline_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/InterchangePipelines.InterchangeGenericAssetsPipeline:MaterialPipeline
    static readonly int MaterialPipeline_Offset;
    
    public UnrealSharp.InterchangePipelines.InterchangeGenericMaterialPipeline MaterialPipeline
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.InterchangePipelines.InterchangeGenericMaterialPipeline>.FromNative(IntPtr.Add(NativeObject, MaterialPipeline_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.InterchangePipelines.InterchangeGenericMaterialPipeline>.ToNative(IntPtr.Add(NativeObject, MaterialPipeline_Offset), 0, this, value);
        }
    }
    
    
}
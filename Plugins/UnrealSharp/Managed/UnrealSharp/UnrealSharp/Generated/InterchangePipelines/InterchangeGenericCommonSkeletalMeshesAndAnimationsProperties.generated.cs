// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.InterchangePipelines;

[UClass]
public partial class InterchangeGenericCommonSkeletalMeshesAndAnimationsProperties : UnrealSharp.InterchangeCore.InterchangePipelineBase
{
    
    static InterchangeGenericCommonSkeletalMeshesAndAnimationsProperties()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InterchangeGenericCommonSkeletalMeshesAndAnimationsProperties");
        
        bImportOnlyAnimations_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImportOnlyAnimations");
        Skeleton_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Skeleton");
        bImportMeshesInBoneHierarchy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImportMeshesInBoneHierarchy");
        bUseT0AsRefPose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseT0AsRefPose");
        bConvertStaticsWithMorphTargetsToSkeletals_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bConvertStaticsWithMorphTargetsToSkeletals");
        
        
        
    }
    
    protected InterchangeGenericCommonSkeletalMeshesAndAnimationsProperties(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericCommonSkeletalMeshesAndAnimationsProperties:bImportOnlyAnimations
    static readonly int bImportOnlyAnimations_Offset;
    
    public bool bImportOnlyAnimations
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bImportOnlyAnimations_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bImportOnlyAnimations_Offset), 0, this, value);
        }
    }
    
    // WeakObjectProperty /Script/InterchangePipelines.InterchangeGenericCommonSkeletalMeshesAndAnimationsProperties:Skeleton
    static readonly int Skeleton_Offset;
    
    public WeakObject<UnrealSharp.Engine.Skeleton> Skeleton
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<WeakObject<UnrealSharp.Engine.Skeleton>>.FromNative(IntPtr.Add(NativeObject, Skeleton_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<WeakObject<UnrealSharp.Engine.Skeleton>>.ToNative(IntPtr.Add(NativeObject, Skeleton_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericCommonSkeletalMeshesAndAnimationsProperties:bImportMeshesInBoneHierarchy
    static readonly int bImportMeshesInBoneHierarchy_Offset;
    
    public bool bImportMeshesInBoneHierarchy
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bImportMeshesInBoneHierarchy_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bImportMeshesInBoneHierarchy_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericCommonSkeletalMeshesAndAnimationsProperties:bUseT0AsRefPose
    static readonly int bUseT0AsRefPose_Offset;
    
    public bool bUseT0AsRefPose
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseT0AsRefPose_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bUseT0AsRefPose_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericCommonSkeletalMeshesAndAnimationsProperties:bConvertStaticsWithMorphTargetsToSkeletals
    static readonly int bConvertStaticsWithMorphTargetsToSkeletals_Offset;
    
    public bool bConvertStaticsWithMorphTargetsToSkeletals
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bConvertStaticsWithMorphTargetsToSkeletals_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bConvertStaticsWithMorphTargetsToSkeletals_Offset), 0, this, value);
        }
    }
    
    
}
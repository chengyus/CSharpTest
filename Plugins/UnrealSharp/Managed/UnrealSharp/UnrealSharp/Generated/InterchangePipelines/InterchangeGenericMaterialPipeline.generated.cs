// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.InterchangePipelines;

[UClass]
public partial class InterchangeGenericMaterialPipeline : UnrealSharp.InterchangeCore.InterchangePipelineBase
{
    
    static InterchangeGenericMaterialPipeline()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InterchangeGenericMaterialPipeline");
        
        bImportMaterials_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImportMaterials");
        AssetName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AssetName");
        AssetName_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "AssetName");
        MaterialImport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaterialImport");
        ParentMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ParentMaterial");
        TexturePipeline_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TexturePipeline");
        
        
        
    }
    
    protected InterchangeGenericMaterialPipeline(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericMaterialPipeline:bImportMaterials
    static readonly int bImportMaterials_Offset;
    
    public bool bImportMaterials
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bImportMaterials_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bImportMaterials_Offset), 0, this, value);
        }
    }
    
    // StrProperty /Script/InterchangePipelines.InterchangeGenericMaterialPipeline:AssetName
    static readonly int AssetName_Offset;
    static readonly IntPtr AssetName_NativeProperty;
    
    public string AssetName
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,AssetName_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,AssetName_Offset),0,this,value);
        }
    }
    
    // EnumProperty /Script/InterchangePipelines.InterchangeGenericMaterialPipeline:MaterialImport
    static readonly int MaterialImport_Offset;
    
    public UnrealSharp.InterchangePipelines.EInterchangeMaterialImportOption MaterialImport
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.InterchangePipelines.EInterchangeMaterialImportOption>.FromNative(IntPtr.Add(NativeObject, MaterialImport_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.InterchangePipelines.EInterchangeMaterialImportOption>.ToNative(IntPtr.Add(NativeObject, MaterialImport_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/InterchangePipelines.InterchangeGenericMaterialPipeline:ParentMaterial
    static readonly int ParentMaterial_Offset;
    
    public UnrealSharp.CoreUObject.SoftObjectPath ParentMaterial
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.CoreUObject.SoftObjectPathMarshaler.FromNative(IntPtr.Add(NativeObject, ParentMaterial_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.CoreUObject.SoftObjectPathMarshaler.ToNative(IntPtr.Add(NativeObject, ParentMaterial_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/InterchangePipelines.InterchangeGenericMaterialPipeline:TexturePipeline
    static readonly int TexturePipeline_Offset;
    
    public UnrealSharp.InterchangePipelines.InterchangeGenericTexturePipeline TexturePipeline
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.InterchangePipelines.InterchangeGenericTexturePipeline>.FromNative(IntPtr.Add(NativeObject, TexturePipeline_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.InterchangePipelines.InterchangeGenericTexturePipeline>.ToNative(IntPtr.Add(NativeObject, TexturePipeline_Offset), 0, this, value);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.InterchangePipelines;

[UClass]
public partial class InterchangeGenericMeshPipeline : UnrealSharp.InterchangeCore.InterchangePipelineBase
{
    
    static InterchangeGenericMeshPipeline()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InterchangeGenericMeshPipeline");
        
        bImportStaticMeshes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImportStaticMeshes");
        bCombineStaticMeshes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCombineStaticMeshes");
        LodGroup_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LodGroup");
        bImportCollision_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImportCollision");
        bImportCollisionAccordingToMeshName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImportCollisionAccordingToMeshName");
        bOneConvexHullPerUCX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bOneConvexHullPerUCX");
        bBuildNanite_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bBuildNanite");
        bBuildReversedIndexBuffer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bBuildReversedIndexBuffer");
        bGenerateLightmapUVs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bGenerateLightmapUVs");
        bGenerateDistanceFieldAsIfTwoSided_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bGenerateDistanceFieldAsIfTwoSided");
        bSupportFaceRemap_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bSupportFaceRemap");
        MinLightmapResolution_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MinLightmapResolution");
        SrcLightmapIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SrcLightmapIndex");
        DstLightmapIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DstLightmapIndex");
        BuildScale3D_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BuildScale3D");
        DistanceFieldResolutionScale_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DistanceFieldResolutionScale");
        DistanceFieldReplacementMesh_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "DistanceFieldReplacementMesh");
        MaxLumenMeshCards_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MaxLumenMeshCards");
        bImportSkeletalMeshes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImportSkeletalMeshes");
        SkeletalMeshImportContentType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SkeletalMeshImportContentType");
        bCombineSkeletalMeshes_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCombineSkeletalMeshes");
        bImportMorphTargets_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImportMorphTargets");
        bUpdateSkeletonReferencePose_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUpdateSkeletonReferencePose");
        bCreatePhysicsAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCreatePhysicsAsset");
        PhysicsAsset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PhysicsAsset");
        bUseHighPrecisionSkinWeights_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseHighPrecisionSkinWeights");
        ThresholdPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ThresholdPosition");
        ThresholdTangentNormal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ThresholdTangentNormal");
        ThresholdUV_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ThresholdUV");
        MorphThresholdPosition_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MorphThresholdPosition");
        BoneInfluenceLimit_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BoneInfluenceLimit");
        
        
        
    }
    
    protected InterchangeGenericMeshPipeline(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:bImportStaticMeshes
    static readonly int bImportStaticMeshes_Offset;
    
    public bool bImportStaticMeshes
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bImportStaticMeshes_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bImportStaticMeshes_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:bCombineStaticMeshes
    static readonly int bCombineStaticMeshes_Offset;
    
    public bool bCombineStaticMeshes
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bCombineStaticMeshes_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bCombineStaticMeshes_Offset), 0, this, value);
        }
    }
    
    // NameProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:LodGroup
    static readonly int LodGroup_Offset;
    
    public Name LodGroup
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<Name>.FromNative(IntPtr.Add(NativeObject, LodGroup_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(NativeObject, LodGroup_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:bImportCollision
    static readonly int bImportCollision_Offset;
    
    public bool bImportCollision
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bImportCollision_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bImportCollision_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:bImportCollisionAccordingToMeshName
    static readonly int bImportCollisionAccordingToMeshName_Offset;
    
    public bool bImportCollisionAccordingToMeshName
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bImportCollisionAccordingToMeshName_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bImportCollisionAccordingToMeshName_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:bOneConvexHullPerUCX
    static readonly int bOneConvexHullPerUCX_Offset;
    
    public bool bOneConvexHullPerUCX
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bOneConvexHullPerUCX_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bOneConvexHullPerUCX_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:bBuildNanite
    static readonly int bBuildNanite_Offset;
    
    public bool bBuildNanite
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bBuildNanite_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bBuildNanite_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:bBuildReversedIndexBuffer
    static readonly int bBuildReversedIndexBuffer_Offset;
    
    public bool bBuildReversedIndexBuffer
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bBuildReversedIndexBuffer_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bBuildReversedIndexBuffer_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:bGenerateLightmapUVs
    static readonly int bGenerateLightmapUVs_Offset;
    
    public bool bGenerateLightmapUVs
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bGenerateLightmapUVs_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bGenerateLightmapUVs_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:bGenerateDistanceFieldAsIfTwoSided
    static readonly int bGenerateDistanceFieldAsIfTwoSided_Offset;
    
    public bool bGenerateDistanceFieldAsIfTwoSided
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bGenerateDistanceFieldAsIfTwoSided_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bGenerateDistanceFieldAsIfTwoSided_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:bSupportFaceRemap
    static readonly int bSupportFaceRemap_Offset;
    
    public bool bSupportFaceRemap
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bSupportFaceRemap_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bSupportFaceRemap_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:MinLightmapResolution
    static readonly int MinLightmapResolution_Offset;
    
    public int MinLightmapResolution
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, MinLightmapResolution_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, MinLightmapResolution_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:SrcLightmapIndex
    static readonly int SrcLightmapIndex_Offset;
    
    public int SrcLightmapIndex
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, SrcLightmapIndex_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, SrcLightmapIndex_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:DstLightmapIndex
    static readonly int DstLightmapIndex_Offset;
    
    public int DstLightmapIndex
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, DstLightmapIndex_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, DstLightmapIndex_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:BuildScale3D
    static readonly int BuildScale3D_Offset;
    
    public System.DoubleNumerics.Vector3 BuildScale3D
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<System.DoubleNumerics.Vector3>.FromNative(IntPtr.Add(NativeObject, BuildScale3D_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(NativeObject, BuildScale3D_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:DistanceFieldResolutionScale
    static readonly int DistanceFieldResolutionScale_Offset;
    
    public float DistanceFieldResolutionScale
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, DistanceFieldResolutionScale_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, DistanceFieldResolutionScale_Offset), 0, this, value);
        }
    }
    
    // WeakObjectProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:DistanceFieldReplacementMesh
    static readonly int DistanceFieldReplacementMesh_Offset;
    
    public WeakObject<UnrealSharp.Engine.StaticMesh> DistanceFieldReplacementMesh
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<WeakObject<UnrealSharp.Engine.StaticMesh>>.FromNative(IntPtr.Add(NativeObject, DistanceFieldReplacementMesh_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<WeakObject<UnrealSharp.Engine.StaticMesh>>.ToNative(IntPtr.Add(NativeObject, DistanceFieldReplacementMesh_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:MaxLumenMeshCards
    static readonly int MaxLumenMeshCards_Offset;
    
    public int MaxLumenMeshCards
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, MaxLumenMeshCards_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, MaxLumenMeshCards_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:bImportSkeletalMeshes
    static readonly int bImportSkeletalMeshes_Offset;
    
    public bool bImportSkeletalMeshes
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bImportSkeletalMeshes_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bImportSkeletalMeshes_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:SkeletalMeshImportContentType
    static readonly int SkeletalMeshImportContentType_Offset;
    
    public UnrealSharp.InterchangeFactoryNodes.EInterchangeSkeletalMeshContentType SkeletalMeshImportContentType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.InterchangeFactoryNodes.EInterchangeSkeletalMeshContentType>.FromNative(IntPtr.Add(NativeObject, SkeletalMeshImportContentType_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.InterchangeFactoryNodes.EInterchangeSkeletalMeshContentType>.ToNative(IntPtr.Add(NativeObject, SkeletalMeshImportContentType_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:bCombineSkeletalMeshes
    static readonly int bCombineSkeletalMeshes_Offset;
    
    public bool bCombineSkeletalMeshes
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bCombineSkeletalMeshes_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bCombineSkeletalMeshes_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:bImportMorphTargets
    static readonly int bImportMorphTargets_Offset;
    
    public bool bImportMorphTargets
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bImportMorphTargets_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bImportMorphTargets_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:bUpdateSkeletonReferencePose
    static readonly int bUpdateSkeletonReferencePose_Offset;
    
    public bool bUpdateSkeletonReferencePose
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUpdateSkeletonReferencePose_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bUpdateSkeletonReferencePose_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:bCreatePhysicsAsset
    static readonly int bCreatePhysicsAsset_Offset;
    
    public bool bCreatePhysicsAsset
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bCreatePhysicsAsset_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bCreatePhysicsAsset_Offset), 0, this, value);
        }
    }
    
    // WeakObjectProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:PhysicsAsset
    static readonly int PhysicsAsset_Offset;
    
    public WeakObject<UnrealSharp.Engine.PhysicsAsset> PhysicsAsset
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<WeakObject<UnrealSharp.Engine.PhysicsAsset>>.FromNative(IntPtr.Add(NativeObject, PhysicsAsset_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<WeakObject<UnrealSharp.Engine.PhysicsAsset>>.ToNative(IntPtr.Add(NativeObject, PhysicsAsset_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:bUseHighPrecisionSkinWeights
    static readonly int bUseHighPrecisionSkinWeights_Offset;
    
    public bool bUseHighPrecisionSkinWeights
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseHighPrecisionSkinWeights_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bUseHighPrecisionSkinWeights_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:ThresholdPosition
    static readonly int ThresholdPosition_Offset;
    
    public float ThresholdPosition
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ThresholdPosition_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ThresholdPosition_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:ThresholdTangentNormal
    static readonly int ThresholdTangentNormal_Offset;
    
    public float ThresholdTangentNormal
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ThresholdTangentNormal_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ThresholdTangentNormal_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:ThresholdUV
    static readonly int ThresholdUV_Offset;
    
    public float ThresholdUV
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, ThresholdUV_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, ThresholdUV_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:MorphThresholdPosition
    static readonly int MorphThresholdPosition_Offset;
    
    public float MorphThresholdPosition
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, MorphThresholdPosition_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, MorphThresholdPosition_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/InterchangePipelines.InterchangeGenericMeshPipeline:BoneInfluenceLimit
    static readonly int BoneInfluenceLimit_Offset;
    
    public int BoneInfluenceLimit
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, BoneInfluenceLimit_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, BoneInfluenceLimit_Offset), 0, this, value);
        }
    }
    
    
}
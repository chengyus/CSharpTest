// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.InterchangePipelines;

[UClass]
public partial class InterchangeGenericTexturePipeline : UnrealSharp.InterchangeCore.InterchangePipelineBase
{
    
    static InterchangeGenericTexturePipeline()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("InterchangeGenericTexturePipeline");
        
        bImportTextures_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImportTextures");
        AssetName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AssetName");
        AssetName_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "AssetName");
        bDetectNormalMapTexture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bDetectNormalMapTexture");
        bFlipNormalMapGreenChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bFlipNormalMapGreenChannel");
        bImportUDIMs_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bImportUDIMs");
        bPreferCompressedSourceData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bPreferCompressedSourceData");
        bAllowNonPowerOfTwo_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAllowNonPowerOfTwo");
        
        
        
    }
    
    protected InterchangeGenericTexturePipeline(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericTexturePipeline:bImportTextures
    static readonly int bImportTextures_Offset;
    
    public bool bImportTextures
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bImportTextures_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bImportTextures_Offset), 0, this, value);
        }
    }
    
    // StrProperty /Script/InterchangePipelines.InterchangeGenericTexturePipeline:AssetName
    static readonly int AssetName_Offset;
    static readonly IntPtr AssetName_NativeProperty;
    
    public string AssetName
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,AssetName_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,AssetName_Offset),0,this,value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericTexturePipeline:bDetectNormalMapTexture
    static readonly int bDetectNormalMapTexture_Offset;
    
    public bool bDetectNormalMapTexture
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bDetectNormalMapTexture_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bDetectNormalMapTexture_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericTexturePipeline:bFlipNormalMapGreenChannel
    static readonly int bFlipNormalMapGreenChannel_Offset;
    
    public bool bFlipNormalMapGreenChannel
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bFlipNormalMapGreenChannel_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bFlipNormalMapGreenChannel_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericTexturePipeline:bImportUDIMs
    static readonly int bImportUDIMs_Offset;
    
    public bool bImportUDIMs
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bImportUDIMs_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bImportUDIMs_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericTexturePipeline:bPreferCompressedSourceData
    static readonly int bPreferCompressedSourceData_Offset;
    
    public bool bPreferCompressedSourceData
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bPreferCompressedSourceData_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bPreferCompressedSourceData_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/InterchangePipelines.InterchangeGenericTexturePipeline:bAllowNonPowerOfTwo
    static readonly int bAllowNonPowerOfTwo_Offset;
    
    public bool bAllowNonPowerOfTwo
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bAllowNonPowerOfTwo_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bAllowNonPowerOfTwo_Offset), 0, this, value);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Landscape;

[UClass]
abstract public partial class LandscapeBlueprintBrushBase : UnrealSharp.Engine.Actor
{
    
    static LandscapeBlueprintBrushBase()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("LandscapeBlueprintBrushBase");
        
        UpdateOnPropertyChange_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "UpdateOnPropertyChange");
        AffectHeightmap_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AffectHeightmap");
        AffectWeightmap_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AffectWeightmap");
        AffectVisibilityLayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AffectVisibilityLayer");
        AffectedWeightmapLayers_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AffectedWeightmapLayers");
        AffectedWeightmapLayers_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "AffectedWeightmapLayers");
        
        RequestLandscapeUpdate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RequestLandscapeUpdate");
        RequestLandscapeUpdate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RequestLandscapeUpdate_NativeFunction);
        RequestLandscapeUpdate_bInUserTriggered_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RequestLandscapeUpdate_NativeFunction, "bInUserTriggered");
        
        IntPtr RenderLayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RenderLayer");
        RenderLayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RenderLayer_NativeFunction);
        RenderLayer_InParameters_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenderLayer_NativeFunction, "InParameters");
        RenderLayer_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RenderLayer_NativeFunction, "ReturnValue");
        
        IntPtr Render_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Render");
        Render_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Render_NativeFunction);
        Render_InIsHeightmap_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Render_NativeFunction, "InIsHeightmap");
        Render_InCombinedResult_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Render_NativeFunction, "InCombinedResult");
        Render_InWeightmapLayerName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Render_NativeFunction, "InWeightmapLayerName");
        Render_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Render_NativeFunction, "ReturnValue");
        
        IntPtr Initialize_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Initialize");
        Initialize_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Initialize_NativeFunction);
        Initialize_InLandscapeTransform_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Initialize_NativeFunction, "InLandscapeTransform");
        Initialize_InLandscapeSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Initialize_NativeFunction, "InLandscapeSize");
        Initialize_InLandscapeRenderTargetSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Initialize_NativeFunction, "InLandscapeRenderTargetSize");
        
        IntPtr GetBlueprintRenderDependencies_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBlueprintRenderDependencies");
        GetBlueprintRenderDependencies_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBlueprintRenderDependencies_NativeFunction);
        GetBlueprintRenderDependencies_OutStreamableAssets_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBlueprintRenderDependencies_NativeFunction, "OutStreamableAssets");
        GetBlueprintRenderDependencies_OutStreamableAssets_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetBlueprintRenderDependencies_NativeFunction, "OutStreamableAssets");
        
        
    }
    
    protected LandscapeBlueprintBrushBase(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/Landscape.LandscapeBlueprintBrushBase:UpdateOnPropertyChange
    static readonly int UpdateOnPropertyChange_Offset;
    
    public bool UpdateOnPropertyChange
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, UpdateOnPropertyChange_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, UpdateOnPropertyChange_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Landscape.LandscapeBlueprintBrushBase:AffectHeightmap
    static readonly int AffectHeightmap_Offset;
    
    public bool AffectHeightmap
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, AffectHeightmap_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, AffectHeightmap_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Landscape.LandscapeBlueprintBrushBase:AffectWeightmap
    static readonly int AffectWeightmap_Offset;
    
    public bool AffectWeightmap
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, AffectWeightmap_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, AffectWeightmap_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Landscape.LandscapeBlueprintBrushBase:AffectVisibilityLayer
    static readonly int AffectVisibilityLayer_Offset;
    
    public bool AffectVisibilityLayer
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, AffectVisibilityLayer_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, AffectVisibilityLayer_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/Landscape.LandscapeBlueprintBrushBase:AffectedWeightmapLayers
    static readonly int AffectedWeightmapLayers_Offset;
    static readonly IntPtr AffectedWeightmapLayers_NativeProperty;
    UnrealArrayReadWriteMarshaler<Name> AffectedWeightmapLayers_Wrapper = null;
    
    public System.Collections.Generic.IList<Name> AffectedWeightmapLayers
    {
        get
        {
            if(AffectedWeightmapLayers_Wrapper == null)
            {
                AffectedWeightmapLayers_Wrapper = new UnrealArrayReadWriteMarshaler<Name>(1, AffectedWeightmapLayers_NativeProperty, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative);
            }
            
            return AffectedWeightmapLayers_Wrapper.FromNative(IntPtr.Add(NativeObject,AffectedWeightmapLayers_Offset),0,this);
        }
    }
    
    // Function /Script/Landscape.LandscapeBlueprintBrushBase:RequestLandscapeUpdate
    static readonly IntPtr RequestLandscapeUpdate_NativeFunction;
    static readonly int RequestLandscapeUpdate_ParamsSize;
    static readonly int RequestLandscapeUpdate_bInUserTriggered_Offset;
    
    public void RequestLandscapeUpdate(bool bInUserTriggered = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RequestLandscapeUpdate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, RequestLandscapeUpdate_bInUserTriggered_Offset), 0, null, bInUserTriggered);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RequestLandscapeUpdate_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Landscape.LandscapeBlueprintBrushBase:RenderLayer
    IntPtr RenderLayer_NativeFunction;
    static readonly int RenderLayer_ParamsSize;
    static readonly int RenderLayer_InParameters_Offset;
    static readonly int RenderLayer_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.Engine.TextureRenderTarget2D RenderLayer(UnrealSharp.Landscape.LandscapeBrushParameters inParameters)
    {
        unsafe
        {
            if (RenderLayer_NativeFunction == IntPtr.Zero)
            {
                RenderLayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "RenderLayer");
            }
            byte* ParamsBufferAllocation = stackalloc byte[RenderLayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.Landscape.LandscapeBrushParametersMarshaler.ToNative(IntPtr.Add(ParamsBuffer, RenderLayer_InParameters_Offset), 0, null, inParameters);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RenderLayer_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.TextureRenderTarget2D returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.FromNative(IntPtr.Add(ParamsBuffer, RenderLayer_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.Engine.TextureRenderTarget2D RenderLayer_Implementation(UnrealSharp.Landscape.LandscapeBrushParameters inParameters)
    {
        return default(UnrealSharp.Engine.TextureRenderTarget2D);
    }
    void Invoke_RenderLayer(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Landscape.LandscapeBrushParameters inParameters = UnrealSharp.Landscape.LandscapeBrushParametersMarshaler.FromNative(IntPtr.Add(buffer, RenderLayer_InParameters_Offset), 0, null);
            UnrealSharp.Engine.TextureRenderTarget2D returnValue = RenderLayer_Implementation(inParameters);
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/Landscape.LandscapeBlueprintBrushBase:Render
    IntPtr Render_NativeFunction;
    static readonly int Render_ParamsSize;
    static readonly int Render_InIsHeightmap_Offset;
    static readonly int Render_InCombinedResult_Offset;
    static readonly int Render_InWeightmapLayerName_Offset;
    static readonly int Render_ReturnValue_Offset;
    
    [Obsolete("Please use RenderLayer instead.")]
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual UnrealSharp.Engine.TextureRenderTarget2D Render(bool inIsHeightmap, UnrealSharp.Engine.TextureRenderTarget2D inCombinedResult, Name inWeightmapLayerName)
    {
        unsafe
        {
            if (Render_NativeFunction == IntPtr.Zero)
            {
                Render_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "Render");
            }
            byte* ParamsBufferAllocation = stackalloc byte[Render_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, Render_InIsHeightmap_Offset), 0, null, inIsHeightmap);
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, Render_InCombinedResult_Offset), 0, null, inCombinedResult);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, Render_InWeightmapLayerName_Offset), 0, null, inWeightmapLayerName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Render_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.TextureRenderTarget2D returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.FromNative(IntPtr.Add(ParamsBuffer, Render_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual UnrealSharp.Engine.TextureRenderTarget2D Render_Implementation(bool inIsHeightmap, UnrealSharp.Engine.TextureRenderTarget2D inCombinedResult, Name inWeightmapLayerName)
    {
        return default(UnrealSharp.Engine.TextureRenderTarget2D);
    }
    void Invoke_Render(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            bool inIsHeightmap = BoolMarshaller.FromNative(IntPtr.Add(buffer, Render_InIsHeightmap_Offset), 0, null);
            UnrealSharp.Engine.TextureRenderTarget2D inCombinedResult = ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.FromNative(IntPtr.Add(buffer, Render_InCombinedResult_Offset), 0, null);
            Name inWeightmapLayerName = BlittableMarshaller<Name>.FromNative(IntPtr.Add(buffer, Render_InWeightmapLayerName_Offset), 0, null);
            UnrealSharp.Engine.TextureRenderTarget2D returnValue = Render_Implementation(inIsHeightmap, inCombinedResult, inWeightmapLayerName);
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    // Function /Script/Landscape.LandscapeBlueprintBrushBase:Initialize
    IntPtr Initialize_NativeFunction;
    static readonly int Initialize_ParamsSize;
    static readonly int Initialize_InLandscapeTransform_Offset;
    static readonly int Initialize_InLandscapeSize_Offset;
    static readonly int Initialize_InLandscapeRenderTargetSize_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void Initialize(UnrealSharp.Transform inLandscapeTransform, UnrealSharp.CoreUObject.IntPoint inLandscapeSize, UnrealSharp.CoreUObject.IntPoint inLandscapeRenderTargetSize)
    {
        unsafe
        {
            if (Initialize_NativeFunction == IntPtr.Zero)
            {
                Initialize_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "Initialize");
            }
            byte* ParamsBufferAllocation = stackalloc byte[Initialize_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Transform>.ToNative(IntPtr.Add(ParamsBuffer, Initialize_InLandscapeTransform_Offset), 0, null, inLandscapeTransform);
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(ParamsBuffer, Initialize_InLandscapeSize_Offset), 0, null, inLandscapeSize);
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(ParamsBuffer, Initialize_InLandscapeRenderTargetSize_Offset), 0, null, inLandscapeRenderTargetSize);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Initialize_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void Initialize_Implementation(UnrealSharp.Transform inLandscapeTransform, UnrealSharp.CoreUObject.IntPoint inLandscapeSize, UnrealSharp.CoreUObject.IntPoint inLandscapeRenderTargetSize)
    {
    }
    void Invoke_Initialize(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.Transform inLandscapeTransform = BlittableMarshaller<UnrealSharp.Transform>.FromNative(IntPtr.Add(buffer, Initialize_InLandscapeTransform_Offset), 0, null);
            UnrealSharp.CoreUObject.IntPoint inLandscapeSize = BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative(IntPtr.Add(buffer, Initialize_InLandscapeSize_Offset), 0, null);
            UnrealSharp.CoreUObject.IntPoint inLandscapeRenderTargetSize = BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative(IntPtr.Add(buffer, Initialize_InLandscapeRenderTargetSize_Offset), 0, null);
            Initialize_Implementation(inLandscapeTransform, inLandscapeSize, inLandscapeRenderTargetSize);
        }
    }
    
    // Function /Script/Landscape.LandscapeBlueprintBrushBase:GetBlueprintRenderDependencies
    IntPtr GetBlueprintRenderDependencies_NativeFunction;
    static readonly int GetBlueprintRenderDependencies_ParamsSize;
    static readonly int GetBlueprintRenderDependencies_OutStreamableAssets_Offset;
    static readonly int GetBlueprintRenderDependencies_OutStreamableAssets_ElementSize;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void GetBlueprintRenderDependencies(out System.Collections.Generic.IList<UnrealSharp.CoreUObject.Object> outStreamableAssets)
    {
        unsafe
        {
            if (GetBlueprintRenderDependencies_NativeFunction == IntPtr.Zero)
            {
                GetBlueprintRenderDependencies_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "GetBlueprintRenderDependencies");
            }
            byte* ParamsBufferAllocation = stackalloc byte[GetBlueprintRenderDependencies_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetBlueprintRenderDependencies_NativeFunction, ParamsBuffer);
            
            IntPtr OutStreamableAssets_NativeBuffer = IntPtr.Add(ParamsBuffer, GetBlueprintRenderDependencies_OutStreamableAssets_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object> OutStreamableAssets_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object> (1, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative, GetBlueprintRenderDependencies_OutStreamableAssets_ElementSize);
            outStreamableAssets = OutStreamableAssets_Marshaler.FromNative(OutStreamableAssets_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object>.DestructInstance(OutStreamableAssets_NativeBuffer, 0);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void GetBlueprintRenderDependencies_Implementation(out System.Collections.Generic.IList<UnrealSharp.CoreUObject.Object> outStreamableAssets)
    {
        outStreamableAssets = null;
    }
    void Invoke_GetBlueprintRenderDependencies(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            System.Collections.Generic.IList<UnrealSharp.CoreUObject.Object> outStreamableAssets = default;
            GetBlueprintRenderDependencies_Implementation(out outStreamableAssets);
            IntPtr OutStreamableAssets_NativeBuffer = IntPtr.Add(buffer, GetBlueprintRenderDependencies_OutStreamableAssets_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object> OutStreamableAssets_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object>(1, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative, GetBlueprintRenderDependencies_OutStreamableAssets_ElementSize);
            OutStreamableAssets_Marshaler.ToNative(OutStreamableAssets_NativeBuffer, 0, null, outStreamableAssets);
        }
    }
    
    
}
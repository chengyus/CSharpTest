// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Landscape;

[UClass]
public partial class LandscapeComponent : UnrealSharp.Engine.PrimitiveComponent
{
    
    static LandscapeComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("LandscapeComponent");
        
        SectionBaseX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SectionBaseX");
        SectionBaseY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "SectionBaseY");
        OverrideMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OverrideMaterial");
        OverrideHoleMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OverrideHoleMaterial");
        ForcedLOD_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ForcedLOD");
        LODBias_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LODBias");
        
        SetLODBias_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLODBias");
        SetLODBias_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLODBias_NativeFunction);
        SetLODBias_InLODBias_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLODBias_NativeFunction, "InLODBias");
        SetForcedLOD_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetForcedLOD");
        SetForcedLOD_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetForcedLOD_NativeFunction);
        SetForcedLOD_InForcedLOD_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetForcedLOD_NativeFunction, "InForcedLOD");
        GetMaterialInstanceDynamic_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaterialInstanceDynamic");
        GetMaterialInstanceDynamic_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaterialInstanceDynamic_NativeFunction);
        GetMaterialInstanceDynamic_InIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceDynamic_NativeFunction, "InIndex");
        GetMaterialInstanceDynamic_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceDynamic_NativeFunction, "ReturnValue");
        EditorGetPaintLayerWeightByNameAtLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EditorGetPaintLayerWeightByNameAtLocation");
        EditorGetPaintLayerWeightByNameAtLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EditorGetPaintLayerWeightByNameAtLocation_NativeFunction);
        EditorGetPaintLayerWeightByNameAtLocation_InLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EditorGetPaintLayerWeightByNameAtLocation_NativeFunction, "InLocation");
        EditorGetPaintLayerWeightByNameAtLocation_InPaintLayerName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EditorGetPaintLayerWeightByNameAtLocation_NativeFunction, "InPaintLayerName");
        EditorGetPaintLayerWeightByNameAtLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EditorGetPaintLayerWeightByNameAtLocation_NativeFunction, "ReturnValue");
        EditorGetPaintLayerWeightAtLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EditorGetPaintLayerWeightAtLocation");
        EditorGetPaintLayerWeightAtLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EditorGetPaintLayerWeightAtLocation_NativeFunction);
        EditorGetPaintLayerWeightAtLocation_InLocation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EditorGetPaintLayerWeightAtLocation_NativeFunction, "InLocation");
        EditorGetPaintLayerWeightAtLocation_PaintLayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EditorGetPaintLayerWeightAtLocation_NativeFunction, "PaintLayer");
        EditorGetPaintLayerWeightAtLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EditorGetPaintLayerWeightAtLocation_NativeFunction, "ReturnValue");
        
        
    }
    
    protected LandscapeComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // IntProperty /Script/Landscape.LandscapeComponent:SectionBaseX
    static readonly int SectionBaseX_Offset;
    
    public int SectionBaseX
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, SectionBaseX_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Landscape.LandscapeComponent:SectionBaseY
    static readonly int SectionBaseY_Offset;
    
    public int SectionBaseY
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, SectionBaseY_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/Landscape.LandscapeComponent:OverrideMaterial
    static readonly int OverrideMaterial_Offset;
    
    public UnrealSharp.Engine.MaterialInterface OverrideMaterial
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.FromNative(IntPtr.Add(NativeObject, OverrideMaterial_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(NativeObject, OverrideMaterial_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/Landscape.LandscapeComponent:OverrideHoleMaterial
    static readonly int OverrideHoleMaterial_Offset;
    
    public UnrealSharp.Engine.MaterialInterface OverrideHoleMaterial
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.FromNative(IntPtr.Add(NativeObject, OverrideHoleMaterial_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(NativeObject, OverrideHoleMaterial_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/Landscape.LandscapeComponent:ForcedLOD
    static readonly int ForcedLOD_Offset;
    
    public int ForcedLOD
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, ForcedLOD_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Landscape.LandscapeComponent:LODBias
    static readonly int LODBias_Offset;
    
    public int LODBias
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, LODBias_Offset), 0, this);
        }
    }
    
    // Function /Script/Landscape.LandscapeComponent:SetLODBias
    static readonly IntPtr SetLODBias_NativeFunction;
    static readonly int SetLODBias_ParamsSize;
    static readonly int SetLODBias_InLODBias_Offset;
    
    public void SetLODBias(int inLODBias)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLODBias_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetLODBias_InLODBias_Offset), 0, null, inLODBias);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLODBias_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Landscape.LandscapeComponent:SetForcedLOD
    static readonly IntPtr SetForcedLOD_NativeFunction;
    static readonly int SetForcedLOD_ParamsSize;
    static readonly int SetForcedLOD_InForcedLOD_Offset;
    
    public void SetForcedLOD(int inForcedLOD)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetForcedLOD_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetForcedLOD_InForcedLOD_Offset), 0, null, inForcedLOD);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetForcedLOD_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Landscape.LandscapeComponent:GetMaterialInstanceDynamic
    static readonly IntPtr GetMaterialInstanceDynamic_NativeFunction;
    static readonly int GetMaterialInstanceDynamic_ParamsSize;
    static readonly int GetMaterialInstanceDynamic_InIndex_Offset;
    static readonly int GetMaterialInstanceDynamic_ReturnValue_Offset;
    
    public UnrealSharp.Engine.MaterialInstanceDynamic GetMaterialInstanceDynamic(int inIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaterialInstanceDynamic_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceDynamic_InIndex_Offset), 0, null, inIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMaterialInstanceDynamic_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialInstanceDynamic returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceDynamic>.FromNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceDynamic_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Landscape.LandscapeComponent:EditorGetPaintLayerWeightByNameAtLocation
    static readonly IntPtr EditorGetPaintLayerWeightByNameAtLocation_NativeFunction;
    static readonly int EditorGetPaintLayerWeightByNameAtLocation_ParamsSize;
    static readonly int EditorGetPaintLayerWeightByNameAtLocation_InLocation_Offset;
    static readonly int EditorGetPaintLayerWeightByNameAtLocation_InPaintLayerName_Offset;
    static readonly int EditorGetPaintLayerWeightByNameAtLocation_ReturnValue_Offset;
    
    public float EditorGetPaintLayerWeightByNameAtLocation(System.DoubleNumerics.Vector3 inLocation, Name inPaintLayerName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EditorGetPaintLayerWeightByNameAtLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, EditorGetPaintLayerWeightByNameAtLocation_InLocation_Offset), 0, null, inLocation);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, EditorGetPaintLayerWeightByNameAtLocation_InPaintLayerName_Offset), 0, null, inPaintLayerName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, EditorGetPaintLayerWeightByNameAtLocation_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, EditorGetPaintLayerWeightByNameAtLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Landscape.LandscapeComponent:EditorGetPaintLayerWeightAtLocation
    static readonly IntPtr EditorGetPaintLayerWeightAtLocation_NativeFunction;
    static readonly int EditorGetPaintLayerWeightAtLocation_ParamsSize;
    static readonly int EditorGetPaintLayerWeightAtLocation_InLocation_Offset;
    static readonly int EditorGetPaintLayerWeightAtLocation_PaintLayer_Offset;
    static readonly int EditorGetPaintLayerWeightAtLocation_ReturnValue_Offset;
    
    public float EditorGetPaintLayerWeightAtLocation(System.DoubleNumerics.Vector3 inLocation, UnrealSharp.Landscape.LandscapeLayerInfoObject paintLayer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EditorGetPaintLayerWeightAtLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<System.DoubleNumerics.Vector3>.ToNative(IntPtr.Add(ParamsBuffer, EditorGetPaintLayerWeightAtLocation_InLocation_Offset), 0, null, inLocation);
            ObjectMarshaller<UnrealSharp.Landscape.LandscapeLayerInfoObject>.ToNative(IntPtr.Add(ParamsBuffer, EditorGetPaintLayerWeightAtLocation_PaintLayer_Offset), 0, null, paintLayer);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, EditorGetPaintLayerWeightAtLocation_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, EditorGetPaintLayerWeightAtLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Landscape;
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.Landscape;

[UClass]
abstract public partial class LandscapeProxy : UnrealSharp.Engine.PartitionActor, ILandscapeSplineInterface
{
    
    static LandscapeProxy()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("LandscapeProxy");
        
        bEnableNanite_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bEnableNanite");
        LandscapeMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LandscapeMaterial");
        RuntimeVirtualTextures_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RuntimeVirtualTextures");
        RuntimeVirtualTextures_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "RuntimeVirtualTextures");
        bVirtualTextureRenderWithQuad_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bVirtualTextureRenderWithQuad");
        bVirtualTextureRenderWithQuadHQ_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bVirtualTextureRenderWithQuadHQ");
        VirtualTextureNumLods_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VirtualTextureNumLods");
        VirtualTextureLodBias_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VirtualTextureLodBias");
        VirtualTextureRenderPassType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VirtualTextureRenderPassType");
        CastShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CastShadow");
        CastShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "CastShadow");
        bCastDynamicShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastDynamicShadow");
        bCastDynamicShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastDynamicShadow");
        bCastStaticShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastStaticShadow");
        bCastStaticShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastStaticShadow");
        ShadowCacheInvalidationBehavior_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ShadowCacheInvalidationBehavior");
        bCastContactShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastContactShadow");
        bCastContactShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastContactShadow");
        bCastFarShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastFarShadow");
        bCastFarShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastFarShadow");
        bCastHiddenShadow_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastHiddenShadow");
        bCastHiddenShadow_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastHiddenShadow");
        bCastShadowAsTwoSided_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bCastShadowAsTwoSided");
        bCastShadowAsTwoSided_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bCastShadowAsTwoSided");
        bAffectDistanceFieldLighting_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bAffectDistanceFieldLighting");
        bAffectDistanceFieldLighting_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bAffectDistanceFieldLighting");
        LightingChannels_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LightingChannels");
        bRenderCustomDepth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bRenderCustomDepth");
        bRenderCustomDepth_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bRenderCustomDepth");
        CustomDepthStencilWriteMask_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CustomDepthStencilWriteMask");
        CustomDepthStencilValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CustomDepthStencilValue");
        LDMaxDrawDistance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LDMaxDrawDistance");
        BodyInstance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BodyInstance");
        bGenerateOverlapEvents_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bGenerateOverlapEvents");
        bGenerateOverlapEvents_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "bGenerateOverlapEvents");
        
        SetLandscapeMaterialVectorParameterValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLandscapeMaterialVectorParameterValue");
        SetLandscapeMaterialVectorParameterValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLandscapeMaterialVectorParameterValue_NativeFunction);
        SetLandscapeMaterialVectorParameterValue_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLandscapeMaterialVectorParameterValue_NativeFunction, "ParameterName");
        SetLandscapeMaterialVectorParameterValue_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLandscapeMaterialVectorParameterValue_NativeFunction, "Value");
        SetLandscapeMaterialTextureParameterValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLandscapeMaterialTextureParameterValue");
        SetLandscapeMaterialTextureParameterValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLandscapeMaterialTextureParameterValue_NativeFunction);
        SetLandscapeMaterialTextureParameterValue_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLandscapeMaterialTextureParameterValue_NativeFunction, "ParameterName");
        SetLandscapeMaterialTextureParameterValue_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLandscapeMaterialTextureParameterValue_NativeFunction, "Value");
        SetLandscapeMaterialScalarParameterValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLandscapeMaterialScalarParameterValue");
        SetLandscapeMaterialScalarParameterValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLandscapeMaterialScalarParameterValue_NativeFunction);
        SetLandscapeMaterialScalarParameterValue_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLandscapeMaterialScalarParameterValue_NativeFunction, "ParameterName");
        SetLandscapeMaterialScalarParameterValue_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLandscapeMaterialScalarParameterValue_NativeFunction, "Value");
        LandscapeImportWeightmapFromRenderTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LandscapeImportWeightmapFromRenderTarget");
        LandscapeImportWeightmapFromRenderTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LandscapeImportWeightmapFromRenderTarget_NativeFunction);
        LandscapeImportWeightmapFromRenderTarget_InRenderTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LandscapeImportWeightmapFromRenderTarget_NativeFunction, "InRenderTarget");
        LandscapeImportWeightmapFromRenderTarget_InLayerName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LandscapeImportWeightmapFromRenderTarget_NativeFunction, "InLayerName");
        LandscapeImportWeightmapFromRenderTarget_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LandscapeImportWeightmapFromRenderTarget_NativeFunction, "ReturnValue");
        LandscapeImportHeightmapFromRenderTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LandscapeImportHeightmapFromRenderTarget");
        LandscapeImportHeightmapFromRenderTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LandscapeImportHeightmapFromRenderTarget_NativeFunction);
        LandscapeImportHeightmapFromRenderTarget_InRenderTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LandscapeImportHeightmapFromRenderTarget_NativeFunction, "InRenderTarget");
        LandscapeImportHeightmapFromRenderTarget_InImportHeightFromRGChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LandscapeImportHeightmapFromRenderTarget_NativeFunction, "InImportHeightFromRGChannel");
        LandscapeImportHeightmapFromRenderTarget_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LandscapeImportHeightmapFromRenderTarget_NativeFunction, "ReturnValue");
        LandscapeExportWeightmapToRenderTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LandscapeExportWeightmapToRenderTarget");
        LandscapeExportWeightmapToRenderTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LandscapeExportWeightmapToRenderTarget_NativeFunction);
        LandscapeExportWeightmapToRenderTarget_InRenderTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LandscapeExportWeightmapToRenderTarget_NativeFunction, "InRenderTarget");
        LandscapeExportWeightmapToRenderTarget_InLayerName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LandscapeExportWeightmapToRenderTarget_NativeFunction, "InLayerName");
        LandscapeExportWeightmapToRenderTarget_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LandscapeExportWeightmapToRenderTarget_NativeFunction, "ReturnValue");
        LandscapeExportHeightmapToRenderTarget_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LandscapeExportHeightmapToRenderTarget");
        LandscapeExportHeightmapToRenderTarget_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LandscapeExportHeightmapToRenderTarget_NativeFunction);
        LandscapeExportHeightmapToRenderTarget_InRenderTarget_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LandscapeExportHeightmapToRenderTarget_NativeFunction, "InRenderTarget");
        LandscapeExportHeightmapToRenderTarget_InExportHeightIntoRGChannel_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LandscapeExportHeightmapToRenderTarget_NativeFunction, "InExportHeightIntoRGChannel");
        LandscapeExportHeightmapToRenderTarget_InExportLandscapeProxies_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LandscapeExportHeightmapToRenderTarget_NativeFunction, "InExportLandscapeProxies");
        LandscapeExportHeightmapToRenderTarget_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LandscapeExportHeightmapToRenderTarget_NativeFunction, "ReturnValue");
        GetLandscapeActor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLandscapeActor");
        GetLandscapeActor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLandscapeActor_NativeFunction);
        GetLandscapeActor_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLandscapeActor_NativeFunction, "ReturnValue");
        EditorApplySpline_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EditorApplySpline");
        EditorApplySpline_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EditorApplySpline_NativeFunction);
        EditorApplySpline_InSplineComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EditorApplySpline_NativeFunction, "InSplineComponent");
        EditorApplySpline_StartWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EditorApplySpline_NativeFunction, "StartWidth");
        EditorApplySpline_EndWidth_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EditorApplySpline_NativeFunction, "EndWidth");
        EditorApplySpline_StartSideFalloff_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EditorApplySpline_NativeFunction, "StartSideFalloff");
        EditorApplySpline_EndSideFalloff_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EditorApplySpline_NativeFunction, "EndSideFalloff");
        EditorApplySpline_StartRoll_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EditorApplySpline_NativeFunction, "StartRoll");
        EditorApplySpline_EndRoll_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EditorApplySpline_NativeFunction, "EndRoll");
        EditorApplySpline_NumSubdivisions_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EditorApplySpline_NativeFunction, "NumSubdivisions");
        EditorApplySpline_bRaiseHeights_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EditorApplySpline_NativeFunction, "bRaiseHeights");
        EditorApplySpline_bLowerHeights_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EditorApplySpline_NativeFunction, "bLowerHeights");
        EditorApplySpline_PaintLayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EditorApplySpline_NativeFunction, "PaintLayer");
        EditorApplySpline_EditLayerName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EditorApplySpline_NativeFunction, "EditLayerName");
        ChangeLODDistanceFactor_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ChangeLODDistanceFactor");
        ChangeLODDistanceFactor_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ChangeLODDistanceFactor_NativeFunction);
        ChangeLODDistanceFactor_InLODDistanceFactor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ChangeLODDistanceFactor_NativeFunction, "InLODDistanceFactor");
        ChangeComponentScreenSizeToUseSubSections_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ChangeComponentScreenSizeToUseSubSections");
        ChangeComponentScreenSizeToUseSubSections_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ChangeComponentScreenSizeToUseSubSections_NativeFunction);
        ChangeComponentScreenSizeToUseSubSections_InComponentScreenSizeToUseSubSections_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ChangeComponentScreenSizeToUseSubSections_NativeFunction, "InComponentScreenSizeToUseSubSections");
        
        
    }
    
    protected LandscapeProxy(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/Landscape.LandscapeProxy:bEnableNanite
    static readonly int bEnableNanite_Offset;
    
    public bool bEnableNanite
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bEnableNanite_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/Landscape.LandscapeProxy:LandscapeMaterial
    static readonly int LandscapeMaterial_Offset;
    
    public UnrealSharp.Engine.MaterialInterface LandscapeMaterial
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.FromNative(IntPtr.Add(NativeObject, LandscapeMaterial_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(NativeObject, LandscapeMaterial_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/Landscape.LandscapeProxy:RuntimeVirtualTextures
    static readonly int RuntimeVirtualTextures_Offset;
    static readonly IntPtr RuntimeVirtualTextures_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.RuntimeVirtualTexture> RuntimeVirtualTextures_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.Engine.RuntimeVirtualTexture> RuntimeVirtualTextures
    {
        get
        {
            if(RuntimeVirtualTextures_Wrapper == null)
            {
                RuntimeVirtualTextures_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.Engine.RuntimeVirtualTexture>(1, RuntimeVirtualTextures_NativeProperty, ObjectMarshaller<UnrealSharp.Engine.RuntimeVirtualTexture>.ToNative, ObjectMarshaller<UnrealSharp.Engine.RuntimeVirtualTexture>.FromNative);
            }
            
            return RuntimeVirtualTextures_Wrapper.FromNative(IntPtr.Add(NativeObject,RuntimeVirtualTextures_Offset),0,this);
        }
    }
    
    // BoolProperty /Script/Landscape.LandscapeProxy:bVirtualTextureRenderWithQuad
    static readonly int bVirtualTextureRenderWithQuad_Offset;
    
    public bool bVirtualTextureRenderWithQuad
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bVirtualTextureRenderWithQuad_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Landscape.LandscapeProxy:bVirtualTextureRenderWithQuadHQ
    static readonly int bVirtualTextureRenderWithQuadHQ_Offset;
    
    public bool bVirtualTextureRenderWithQuadHQ
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bVirtualTextureRenderWithQuadHQ_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Landscape.LandscapeProxy:VirtualTextureNumLods
    static readonly int VirtualTextureNumLods_Offset;
    
    public int VirtualTextureNumLods
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, VirtualTextureNumLods_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Landscape.LandscapeProxy:VirtualTextureLodBias
    static readonly int VirtualTextureLodBias_Offset;
    
    public int VirtualTextureLodBias
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, VirtualTextureLodBias_Offset), 0, this);
        }
    }
    
    // EnumProperty /Script/Landscape.LandscapeProxy:VirtualTextureRenderPassType
    static readonly int VirtualTextureRenderPassType_Offset;
    
    public UnrealSharp.Engine.ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ERuntimeVirtualTextureMainPassType>.FromNative(IntPtr.Add(NativeObject, VirtualTextureRenderPassType_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.ERuntimeVirtualTextureMainPassType>.ToNative(IntPtr.Add(NativeObject, VirtualTextureRenderPassType_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/Landscape.LandscapeProxy:CastShadow
    static readonly int CastShadow_Offset;
    static readonly IntPtr CastShadow_NativeProperty;
    
    public bool CastShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, CastShadow_NativeProperty, CastShadow_Offset);
        }
    }
    
    // BoolProperty /Script/Landscape.LandscapeProxy:bCastDynamicShadow
    static readonly int bCastDynamicShadow_Offset;
    static readonly IntPtr bCastDynamicShadow_NativeProperty;
    
    public bool bCastDynamicShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastDynamicShadow_NativeProperty, bCastDynamicShadow_Offset);
        }
    }
    
    // BoolProperty /Script/Landscape.LandscapeProxy:bCastStaticShadow
    static readonly int bCastStaticShadow_Offset;
    static readonly IntPtr bCastStaticShadow_NativeProperty;
    
    public bool bCastStaticShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastStaticShadow_NativeProperty, bCastStaticShadow_Offset);
        }
    }
    
    // EnumProperty /Script/Landscape.LandscapeProxy:ShadowCacheInvalidationBehavior
    static readonly int ShadowCacheInvalidationBehavior_Offset;
    
    public UnrealSharp.Engine.EShadowCacheInvalidationBehavior ShadowCacheInvalidationBehavior
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.EShadowCacheInvalidationBehavior>.FromNative(IntPtr.Add(NativeObject, ShadowCacheInvalidationBehavior_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Landscape.LandscapeProxy:bCastContactShadow
    static readonly int bCastContactShadow_Offset;
    static readonly IntPtr bCastContactShadow_NativeProperty;
    
    public bool bCastContactShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastContactShadow_NativeProperty, bCastContactShadow_Offset);
        }
    }
    
    // BoolProperty /Script/Landscape.LandscapeProxy:bCastFarShadow
    static readonly int bCastFarShadow_Offset;
    static readonly IntPtr bCastFarShadow_NativeProperty;
    
    public bool bCastFarShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastFarShadow_NativeProperty, bCastFarShadow_Offset);
        }
    }
    
    // BoolProperty /Script/Landscape.LandscapeProxy:bCastHiddenShadow
    static readonly int bCastHiddenShadow_Offset;
    static readonly IntPtr bCastHiddenShadow_NativeProperty;
    
    public bool bCastHiddenShadow
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastHiddenShadow_NativeProperty, bCastHiddenShadow_Offset);
        }
    }
    
    // BoolProperty /Script/Landscape.LandscapeProxy:bCastShadowAsTwoSided
    static readonly int bCastShadowAsTwoSided_Offset;
    static readonly IntPtr bCastShadowAsTwoSided_NativeProperty;
    
    public bool bCastShadowAsTwoSided
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bCastShadowAsTwoSided_NativeProperty, bCastShadowAsTwoSided_Offset);
        }
    }
    
    // BoolProperty /Script/Landscape.LandscapeProxy:bAffectDistanceFieldLighting
    static readonly int bAffectDistanceFieldLighting_Offset;
    static readonly IntPtr bAffectDistanceFieldLighting_NativeProperty;
    
    public bool bAffectDistanceFieldLighting
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bAffectDistanceFieldLighting_NativeProperty, bAffectDistanceFieldLighting_Offset);
        }
    }
    
    // StructProperty /Script/Landscape.LandscapeProxy:LightingChannels
    static readonly int LightingChannels_Offset;
    
    public UnrealSharp.Engine.LightingChannels LightingChannels
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.LightingChannelsMarshaler.FromNative(IntPtr.Add(NativeObject, LightingChannels_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Landscape.LandscapeProxy:bRenderCustomDepth
    static readonly int bRenderCustomDepth_Offset;
    static readonly IntPtr bRenderCustomDepth_NativeProperty;
    
    public bool bRenderCustomDepth
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bRenderCustomDepth_NativeProperty, bRenderCustomDepth_Offset);
        }
    }
    
    // EnumProperty /Script/Landscape.LandscapeProxy:CustomDepthStencilWriteMask
    static readonly int CustomDepthStencilWriteMask_Offset;
    
    public UnrealSharp.Engine.ERendererStencilMask CustomDepthStencilWriteMask
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.ERendererStencilMask>.FromNative(IntPtr.Add(NativeObject, CustomDepthStencilWriteMask_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/Landscape.LandscapeProxy:CustomDepthStencilValue
    static readonly int CustomDepthStencilValue_Offset;
    
    public int CustomDepthStencilValue
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, CustomDepthStencilValue_Offset), 0, this);
        }
    }
    
    // FloatProperty /Script/Landscape.LandscapeProxy:LDMaxDrawDistance
    static readonly int LDMaxDrawDistance_Offset;
    
    public float LDMaxDrawDistance
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, LDMaxDrawDistance_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/Landscape.LandscapeProxy:BodyInstance
    static readonly int BodyInstance_Offset;
    
    public UnrealSharp.Engine.BodyInstance BodyInstance
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.Engine.BodyInstanceMarshaler.FromNative(IntPtr.Add(NativeObject, BodyInstance_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/Landscape.LandscapeProxy:bGenerateOverlapEvents
    static readonly int bGenerateOverlapEvents_Offset;
    static readonly IntPtr bGenerateOverlapEvents_NativeProperty;
    
    public bool bGenerateOverlapEvents
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, bGenerateOverlapEvents_NativeProperty, bGenerateOverlapEvents_Offset);
        }
    }
    
    // Function /Script/Landscape.LandscapeProxy:SetLandscapeMaterialVectorParameterValue
    static readonly IntPtr SetLandscapeMaterialVectorParameterValue_NativeFunction;
    static readonly int SetLandscapeMaterialVectorParameterValue_ParamsSize;
    static readonly int SetLandscapeMaterialVectorParameterValue_ParameterName_Offset;
    static readonly int SetLandscapeMaterialVectorParameterValue_Value_Offset;
    
    public void SetLandscapeMaterialVectorParameterValue(Name parameterName, UnrealSharp.CoreUObject.LinearColor value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLandscapeMaterialVectorParameterValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLandscapeMaterialVectorParameterValue_ParameterName_Offset), 0, null, parameterName);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetLandscapeMaterialVectorParameterValue_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLandscapeMaterialVectorParameterValue_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Landscape.LandscapeProxy:SetLandscapeMaterialTextureParameterValue
    static readonly IntPtr SetLandscapeMaterialTextureParameterValue_NativeFunction;
    static readonly int SetLandscapeMaterialTextureParameterValue_ParamsSize;
    static readonly int SetLandscapeMaterialTextureParameterValue_ParameterName_Offset;
    static readonly int SetLandscapeMaterialTextureParameterValue_Value_Offset;
    
    public void SetLandscapeMaterialTextureParameterValue(Name parameterName, UnrealSharp.Engine.Texture value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLandscapeMaterialTextureParameterValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLandscapeMaterialTextureParameterValue_ParameterName_Offset), 0, null, parameterName);
            ObjectMarshaller<UnrealSharp.Engine.Texture>.ToNative(IntPtr.Add(ParamsBuffer, SetLandscapeMaterialTextureParameterValue_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLandscapeMaterialTextureParameterValue_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Landscape.LandscapeProxy:SetLandscapeMaterialScalarParameterValue
    static readonly IntPtr SetLandscapeMaterialScalarParameterValue_NativeFunction;
    static readonly int SetLandscapeMaterialScalarParameterValue_ParamsSize;
    static readonly int SetLandscapeMaterialScalarParameterValue_ParameterName_Offset;
    static readonly int SetLandscapeMaterialScalarParameterValue_Value_Offset;
    
    public void SetLandscapeMaterialScalarParameterValue(Name parameterName, float value)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLandscapeMaterialScalarParameterValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetLandscapeMaterialScalarParameterValue_ParameterName_Offset), 0, null, parameterName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetLandscapeMaterialScalarParameterValue_Value_Offset), 0, null, value);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLandscapeMaterialScalarParameterValue_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Landscape.LandscapeProxy:LandscapeImportWeightmapFromRenderTarget
    static readonly IntPtr LandscapeImportWeightmapFromRenderTarget_NativeFunction;
    static readonly int LandscapeImportWeightmapFromRenderTarget_ParamsSize;
    static readonly int LandscapeImportWeightmapFromRenderTarget_InRenderTarget_Offset;
    static readonly int LandscapeImportWeightmapFromRenderTarget_InLayerName_Offset;
    static readonly int LandscapeImportWeightmapFromRenderTarget_ReturnValue_Offset;
    
    public bool LandscapeImportWeightmapFromRenderTarget(UnrealSharp.Engine.TextureRenderTarget2D inRenderTarget, Name inLayerName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LandscapeImportWeightmapFromRenderTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, LandscapeImportWeightmapFromRenderTarget_InRenderTarget_Offset), 0, null, inRenderTarget);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, LandscapeImportWeightmapFromRenderTarget_InLayerName_Offset), 0, null, inLayerName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, LandscapeImportWeightmapFromRenderTarget_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LandscapeImportWeightmapFromRenderTarget_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Landscape.LandscapeProxy:LandscapeImportHeightmapFromRenderTarget
    static readonly IntPtr LandscapeImportHeightmapFromRenderTarget_NativeFunction;
    static readonly int LandscapeImportHeightmapFromRenderTarget_ParamsSize;
    static readonly int LandscapeImportHeightmapFromRenderTarget_InRenderTarget_Offset;
    static readonly int LandscapeImportHeightmapFromRenderTarget_InImportHeightFromRGChannel_Offset;
    static readonly int LandscapeImportHeightmapFromRenderTarget_ReturnValue_Offset;
    
    public bool LandscapeImportHeightmapFromRenderTarget(UnrealSharp.Engine.TextureRenderTarget2D inRenderTarget, bool inImportHeightFromRGChannel = false)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LandscapeImportHeightmapFromRenderTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, LandscapeImportHeightmapFromRenderTarget_InRenderTarget_Offset), 0, null, inRenderTarget);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LandscapeImportHeightmapFromRenderTarget_InImportHeightFromRGChannel_Offset), 0, null, inImportHeightFromRGChannel);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, LandscapeImportHeightmapFromRenderTarget_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LandscapeImportHeightmapFromRenderTarget_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Landscape.LandscapeProxy:LandscapeExportWeightmapToRenderTarget
    static readonly IntPtr LandscapeExportWeightmapToRenderTarget_NativeFunction;
    static readonly int LandscapeExportWeightmapToRenderTarget_ParamsSize;
    static readonly int LandscapeExportWeightmapToRenderTarget_InRenderTarget_Offset;
    static readonly int LandscapeExportWeightmapToRenderTarget_InLayerName_Offset;
    static readonly int LandscapeExportWeightmapToRenderTarget_ReturnValue_Offset;
    
    public bool LandscapeExportWeightmapToRenderTarget(UnrealSharp.Engine.TextureRenderTarget2D inRenderTarget, Name inLayerName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LandscapeExportWeightmapToRenderTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, LandscapeExportWeightmapToRenderTarget_InRenderTarget_Offset), 0, null, inRenderTarget);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, LandscapeExportWeightmapToRenderTarget_InLayerName_Offset), 0, null, inLayerName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, LandscapeExportWeightmapToRenderTarget_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LandscapeExportWeightmapToRenderTarget_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Landscape.LandscapeProxy:LandscapeExportHeightmapToRenderTarget
    static readonly IntPtr LandscapeExportHeightmapToRenderTarget_NativeFunction;
    static readonly int LandscapeExportHeightmapToRenderTarget_ParamsSize;
    static readonly int LandscapeExportHeightmapToRenderTarget_InRenderTarget_Offset;
    static readonly int LandscapeExportHeightmapToRenderTarget_InExportHeightIntoRGChannel_Offset;
    static readonly int LandscapeExportHeightmapToRenderTarget_InExportLandscapeProxies_Offset;
    static readonly int LandscapeExportHeightmapToRenderTarget_ReturnValue_Offset;
    
    public bool LandscapeExportHeightmapToRenderTarget(UnrealSharp.Engine.TextureRenderTarget2D inRenderTarget, bool inExportHeightIntoRGChannel = false, bool inExportLandscapeProxies = true)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LandscapeExportHeightmapToRenderTarget_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.TextureRenderTarget2D>.ToNative(IntPtr.Add(ParamsBuffer, LandscapeExportHeightmapToRenderTarget_InRenderTarget_Offset), 0, null, inRenderTarget);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LandscapeExportHeightmapToRenderTarget_InExportHeightIntoRGChannel_Offset), 0, null, inExportHeightIntoRGChannel);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, LandscapeExportHeightmapToRenderTarget_InExportLandscapeProxies_Offset), 0, null, inExportLandscapeProxies);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, LandscapeExportHeightmapToRenderTarget_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, LandscapeExportHeightmapToRenderTarget_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Landscape.LandscapeProxy:GetLandscapeActor
    static readonly IntPtr GetLandscapeActor_NativeFunction;
    static readonly int GetLandscapeActor_ParamsSize;
    static readonly int GetLandscapeActor_ReturnValue_Offset;
    
    public UnrealSharp.Landscape.Landscape GetLandscapeActor()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLandscapeActor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetLandscapeActor_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Landscape.Landscape returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Landscape.Landscape>.FromNative(IntPtr.Add(ParamsBuffer, GetLandscapeActor_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/Landscape.LandscapeProxy:EditorApplySpline
    static readonly IntPtr EditorApplySpline_NativeFunction;
    static readonly int EditorApplySpline_ParamsSize;
    static readonly int EditorApplySpline_InSplineComponent_Offset;
    static readonly int EditorApplySpline_StartWidth_Offset;
    static readonly int EditorApplySpline_EndWidth_Offset;
    static readonly int EditorApplySpline_StartSideFalloff_Offset;
    static readonly int EditorApplySpline_EndSideFalloff_Offset;
    static readonly int EditorApplySpline_StartRoll_Offset;
    static readonly int EditorApplySpline_EndRoll_Offset;
    static readonly int EditorApplySpline_NumSubdivisions_Offset;
    static readonly int EditorApplySpline_bRaiseHeights_Offset;
    static readonly int EditorApplySpline_bLowerHeights_Offset;
    static readonly int EditorApplySpline_PaintLayer_Offset;
    static readonly int EditorApplySpline_EditLayerName_Offset;
    
    public void EditorApplySpline(UnrealSharp.Engine.SplineComponent inSplineComponent, float startWidth = 200.000000f, float endWidth = 200.000000f, float startSideFalloff = 200.000000f, float endSideFalloff = 200.000000f, float startRoll = 0.000000f, float endRoll = 0.000000f, int numSubdivisions = 20, bool bRaiseHeights = true, bool bLowerHeights = true, UnrealSharp.Landscape.LandscapeLayerInfoObject paintLayer = default(UnrealSharp.Landscape.LandscapeLayerInfoObject), Name editLayerName = default(Name))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EditorApplySpline_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.SplineComponent>.ToNative(IntPtr.Add(ParamsBuffer, EditorApplySpline_InSplineComponent_Offset), 0, null, inSplineComponent);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, EditorApplySpline_StartWidth_Offset), 0, null, startWidth);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, EditorApplySpline_EndWidth_Offset), 0, null, endWidth);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, EditorApplySpline_StartSideFalloff_Offset), 0, null, startSideFalloff);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, EditorApplySpline_EndSideFalloff_Offset), 0, null, endSideFalloff);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, EditorApplySpline_StartRoll_Offset), 0, null, startRoll);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, EditorApplySpline_EndRoll_Offset), 0, null, endRoll);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, EditorApplySpline_NumSubdivisions_Offset), 0, null, numSubdivisions);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, EditorApplySpline_bRaiseHeights_Offset), 0, null, bRaiseHeights);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, EditorApplySpline_bLowerHeights_Offset), 0, null, bLowerHeights);
            ObjectMarshaller<UnrealSharp.Landscape.LandscapeLayerInfoObject>.ToNative(IntPtr.Add(ParamsBuffer, EditorApplySpline_PaintLayer_Offset), 0, null, paintLayer);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, EditorApplySpline_EditLayerName_Offset), 0, null, editLayerName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, EditorApplySpline_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Landscape.LandscapeProxy:ChangeLODDistanceFactor
    static readonly IntPtr ChangeLODDistanceFactor_NativeFunction;
    static readonly int ChangeLODDistanceFactor_ParamsSize;
    static readonly int ChangeLODDistanceFactor_InLODDistanceFactor_Offset;
    
    [Obsolete("This value can't be changed anymore, you should edit the property LODDistributionSetting of the Landscape")]
    public void ChangeLODDistanceFactor(float inLODDistanceFactor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ChangeLODDistanceFactor_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ChangeLODDistanceFactor_InLODDistanceFactor_Offset), 0, null, inLODDistanceFactor);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ChangeLODDistanceFactor_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/Landscape.LandscapeProxy:ChangeComponentScreenSizeToUseSubSections
    static readonly IntPtr ChangeComponentScreenSizeToUseSubSections_NativeFunction;
    static readonly int ChangeComponentScreenSizeToUseSubSections_ParamsSize;
    static readonly int ChangeComponentScreenSizeToUseSubSections_InComponentScreenSizeToUseSubSections_Offset;
    
    public void ChangeComponentScreenSizeToUseSubSections(float inComponentScreenSizeToUseSubSections)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ChangeComponentScreenSizeToUseSubSections_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, ChangeComponentScreenSizeToUseSubSections_InComponentScreenSizeToUseSubSections_Offset), 0, null, inComponentScreenSizeToUseSubSections);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ChangeComponentScreenSizeToUseSubSections_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
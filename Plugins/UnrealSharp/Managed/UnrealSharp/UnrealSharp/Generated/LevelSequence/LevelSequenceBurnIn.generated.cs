// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.LevelSequence;

[UClass]
public partial class LevelSequenceBurnIn : UnrealSharp.UMG.UserWidget
{
    
    static LevelSequenceBurnIn()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("LevelSequenceBurnIn");
        
        FrameInformation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FrameInformation");
        LevelSequenceActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LevelSequenceActor");
        
        
        IntPtr SetSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSettings");
        SetSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSettings_NativeFunction);
        SetSettings_InSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSettings_NativeFunction, "InSettings");
        
        IntPtr GetSettingsClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSettingsClass");
        GetSettingsClass_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSettingsClass_NativeFunction);
        GetSettingsClass_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSettingsClass_NativeFunction, "ReturnValue");
        
        
    }
    
    protected LevelSequenceBurnIn(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/LevelSequence.LevelSequenceBurnIn:FrameInformation
    static readonly int FrameInformation_Offset;
    
    public UnrealSharp.LevelSequence.LevelSequencePlayerSnapshot FrameInformation
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.LevelSequence.LevelSequencePlayerSnapshotMarshaler.FromNative(IntPtr.Add(NativeObject, FrameInformation_Offset), 0, this);
        }
    }
    
    // ObjectProperty /Script/LevelSequence.LevelSequenceBurnIn:LevelSequenceActor
    static readonly int LevelSequenceActor_Offset;
    
    public UnrealSharp.LevelSequence.LevelSequenceActor LevelSequenceActor
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequenceActor>.FromNative(IntPtr.Add(NativeObject, LevelSequenceActor_Offset), 0, this);
        }
    }
    
    // Function /Script/LevelSequence.LevelSequenceBurnIn:SetSettings
    IntPtr SetSettings_NativeFunction;
    static readonly int SetSettings_ParamsSize;
    static readonly int SetSettings_InSettings_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual void SetSettings(UnrealSharp.CoreUObject.Object inSettings)
    {
        unsafe
        {
            if (SetSettings_NativeFunction == IntPtr.Zero)
            {
                SetSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "SetSettings");
            }
            byte* ParamsBufferAllocation = stackalloc byte[SetSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetSettings_InSettings_Offset), 0, null, inSettings);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSettings_NativeFunction, ParamsBuffer);
            
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual void SetSettings_Implementation(UnrealSharp.CoreUObject.Object inSettings)
    {
    }
    void Invoke_SetSettings(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            UnrealSharp.CoreUObject.Object inSettings = ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative(IntPtr.Add(buffer, SetSettings_InSettings_Offset), 0, null);
            SetSettings_Implementation(inSettings);
        }
    }
    
    // Function /Script/LevelSequence.LevelSequenceBurnIn:GetSettingsClass
    IntPtr GetSettingsClass_NativeFunction;
    static readonly int GetSettingsClass_ParamsSize;
    static readonly int GetSettingsClass_ReturnValue_Offset;
    
    [UFunction(FunctionFlags.BlueprintEvent)]
    public virtual SubclassOf<UnrealSharp.LevelSequence.LevelSequenceBurnInInitSettings> GetSettingsClass()
    {
        unsafe
        {
            if (GetSettingsClass_NativeFunction == IntPtr.Zero)
            {
                GetSettingsClass_NativeFunction = UClassExporter.CallGetNativeFunctionFromInstanceAndName(NativeObject, "GetSettingsClass");
            }
            byte* ParamsBufferAllocation = stackalloc byte[GetSettingsClass_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSettingsClass_NativeFunction, ParamsBuffer);
            
            SubclassOf<UnrealSharp.LevelSequence.LevelSequenceBurnInInitSettings> returnValue;
            returnValue = SubclassOfMarshaller<UnrealSharp.LevelSequence.LevelSequenceBurnInInitSettings>.FromNative(IntPtr.Add(ParamsBuffer, GetSettingsClass_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    //Hide implementation function from Intellisense/ReSharper
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    protected virtual SubclassOf<UnrealSharp.LevelSequence.LevelSequenceBurnInInitSettings> GetSettingsClass_Implementation()
    {
        return default(SubclassOf<UnrealSharp.LevelSequence.LevelSequenceBurnInInitSettings>);
    }
    void Invoke_GetSettingsClass(IntPtr buffer, IntPtr returnBuffer)
    {
        unsafe
        {
            SubclassOf<UnrealSharp.LevelSequence.LevelSequenceBurnInInitSettings> returnValue = GetSettingsClass_Implementation();
            SubclassOfMarshaller<UnrealSharp.LevelSequence.LevelSequenceBurnInInitSettings>.ToNative(IntPtr.Add(returnBuffer, 0), 0, null, returnValue);
        }
    }
    
    
}
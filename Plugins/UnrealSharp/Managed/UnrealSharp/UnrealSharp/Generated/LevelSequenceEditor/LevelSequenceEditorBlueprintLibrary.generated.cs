// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.LevelSequenceEditor;

[UClass]
public partial class LevelSequenceEditorBlueprintLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static LevelSequenceEditorBlueprintLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("LevelSequenceEditorBlueprintLibrary");
        
        
        SetSelectionRangeStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSelectionRangeStart");
        SetSelectionRangeStart_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSelectionRangeStart_NativeFunction);
        SetSelectionRangeStart_NewFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSelectionRangeStart_NativeFunction, "NewFrame");
        SetSelectionRangeEnd_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSelectionRangeEnd");
        SetSelectionRangeEnd_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSelectionRangeEnd_NativeFunction);
        SetSelectionRangeEnd_NewFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSelectionRangeEnd_NativeFunction, "NewFrame");
        SetPlaybackSpeed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetPlaybackSpeed");
        SetPlaybackSpeed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetPlaybackSpeed_NativeFunction);
        SetPlaybackSpeed_NewPlaybackSpeed_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetPlaybackSpeed_NativeFunction, "NewPlaybackSpeed");
        SetLockLevelSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLockLevelSequence");
        SetLockLevelSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLockLevelSequence_NativeFunction);
        SetLockLevelSequence_bLock_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLockLevelSequence_NativeFunction, "bLock");
        SetLockCameraCutToViewport_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLockCameraCutToViewport");
        SetLockCameraCutToViewport_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLockCameraCutToViewport_NativeFunction);
        SetLockCameraCutToViewport_bLock_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLockCameraCutToViewport_NativeFunction, "bLock");
        SetCustomColorForChannel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCustomColorForChannel");
        SetCustomColorForChannel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCustomColorForChannel_NativeFunction);
        SetCustomColorForChannel_Class_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomColorForChannel_NativeFunction, "Class");
        SetCustomColorForChannel_Identifier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomColorForChannel_NativeFunction, "Identifier");
        SetCustomColorForChannel_NewColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCustomColorForChannel_NativeFunction, "NewColor");
        SetCurrentTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCurrentTime");
        SetCurrentTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCurrentTime_NativeFunction);
        SetCurrentTime_NewFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCurrentTime_NativeFunction, "NewFrame");
        SetCurrentLocalTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetCurrentLocalTime");
        SetCurrentLocalTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetCurrentLocalTime_NativeFunction);
        SetCurrentLocalTime_NewFrame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetCurrentLocalTime_NativeFunction, "NewFrame");
        SelectTracks_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SelectTracks");
        SelectTracks_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SelectTracks_NativeFunction);
        SelectTracks_Tracks_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectTracks_NativeFunction, "Tracks");
        SelectTracks_Tracks_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SelectTracks_NativeFunction, "Tracks");
        SelectSections_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SelectSections");
        SelectSections_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SelectSections_NativeFunction);
        SelectSections_Sections_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectSections_NativeFunction, "Sections");
        SelectSections_Sections_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SelectSections_NativeFunction, "Sections");
        SelectObjects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SelectObjects");
        SelectObjects_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SelectObjects_NativeFunction);
        SelectObjects_ObjectBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectObjects_NativeFunction, "ObjectBinding");
        SelectObjects_ObjectBinding_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SelectObjects_NativeFunction, "ObjectBinding");
        SelectFolders_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SelectFolders");
        SelectFolders_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SelectFolders_NativeFunction);
        SelectFolders_Folders_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectFolders_NativeFunction, "Folders");
        SelectFolders_Folders_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SelectFolders_NativeFunction, "Folders");
        SelectChannels_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SelectChannels");
        SelectChannels_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SelectChannels_NativeFunction);
        SelectChannels_Channels_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectChannels_NativeFunction, "Channels");
        SelectChannels_Channels_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SelectChannels_NativeFunction, "Channels");
        SelectBindings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SelectBindings");
        SelectBindings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SelectBindings_NativeFunction);
        SelectBindings_ObjectBindings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectBindings_NativeFunction, "ObjectBindings");
        SelectBindings_ObjectBindings_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SelectBindings_NativeFunction, "ObjectBindings");
        RefreshCurrentLevelSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RefreshCurrentLevelSequence");
        PlayTo_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlayTo");
        PlayTo_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PlayTo_NativeFunction);
        PlayTo_PlaybackParams_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PlayTo_NativeFunction, "PlaybackParams");
        Play_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Play");
        Pause_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Pause");
        OpenLevelSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OpenLevelSequence");
        OpenLevelSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OpenLevelSequence_NativeFunction);
        OpenLevelSequence_LevelSequence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenLevelSequence_NativeFunction, "LevelSequence");
        OpenLevelSequence_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenLevelSequence_NativeFunction, "ReturnValue");
        IsPlaying_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPlaying");
        IsPlaying_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPlaying_NativeFunction);
        IsPlaying_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPlaying_NativeFunction, "ReturnValue");
        IsLevelSequenceLocked_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsLevelSequenceLocked");
        IsLevelSequenceLocked_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsLevelSequenceLocked_NativeFunction);
        IsLevelSequenceLocked_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLevelSequenceLocked_NativeFunction, "ReturnValue");
        IsCameraCutLockedToViewport_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsCameraCutLockedToViewport");
        IsCameraCutLockedToViewport_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsCameraCutLockedToViewport_NativeFunction);
        IsCameraCutLockedToViewport_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsCameraCutLockedToViewport_NativeFunction, "ReturnValue");
        HasCustomColorForChannel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasCustomColorForChannel");
        HasCustomColorForChannel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasCustomColorForChannel_NativeFunction);
        HasCustomColorForChannel_Class_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasCustomColorForChannel_NativeFunction, "Class");
        HasCustomColorForChannel_Identifier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasCustomColorForChannel_NativeFunction, "Identifier");
        HasCustomColorForChannel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasCustomColorForChannel_NativeFunction, "ReturnValue");
        GetSubSequenceHierarchy_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSubSequenceHierarchy");
        GetSubSequenceHierarchy_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSubSequenceHierarchy_NativeFunction);
        GetSubSequenceHierarchy_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSubSequenceHierarchy_NativeFunction, "ReturnValue");
        GetSubSequenceHierarchy_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSubSequenceHierarchy_NativeFunction, "ReturnValue");
        GetSelectionRangeStart_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSelectionRangeStart");
        GetSelectionRangeStart_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSelectionRangeStart_NativeFunction);
        GetSelectionRangeStart_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSelectionRangeStart_NativeFunction, "ReturnValue");
        GetSelectionRangeEnd_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSelectionRangeEnd");
        GetSelectionRangeEnd_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSelectionRangeEnd_NativeFunction);
        GetSelectionRangeEnd_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSelectionRangeEnd_NativeFunction, "ReturnValue");
        GetSelectedTracks_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSelectedTracks");
        GetSelectedTracks_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSelectedTracks_NativeFunction);
        GetSelectedTracks_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSelectedTracks_NativeFunction, "ReturnValue");
        GetSelectedTracks_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSelectedTracks_NativeFunction, "ReturnValue");
        GetSelectedSections_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSelectedSections");
        GetSelectedSections_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSelectedSections_NativeFunction);
        GetSelectedSections_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSelectedSections_NativeFunction, "ReturnValue");
        GetSelectedSections_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSelectedSections_NativeFunction, "ReturnValue");
        GetSelectedObjects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSelectedObjects");
        GetSelectedObjects_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSelectedObjects_NativeFunction);
        GetSelectedObjects_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSelectedObjects_NativeFunction, "ReturnValue");
        GetSelectedObjects_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSelectedObjects_NativeFunction, "ReturnValue");
        GetSelectedFolders_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSelectedFolders");
        GetSelectedFolders_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSelectedFolders_NativeFunction);
        GetSelectedFolders_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSelectedFolders_NativeFunction, "ReturnValue");
        GetSelectedFolders_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSelectedFolders_NativeFunction, "ReturnValue");
        GetSelectedChannels_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSelectedChannels");
        GetSelectedChannels_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSelectedChannels_NativeFunction);
        GetSelectedChannels_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSelectedChannels_NativeFunction, "ReturnValue");
        GetSelectedChannels_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSelectedChannels_NativeFunction, "ReturnValue");
        GetSelectedBindings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSelectedBindings");
        GetSelectedBindings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSelectedBindings_NativeFunction);
        GetSelectedBindings_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSelectedBindings_NativeFunction, "ReturnValue");
        GetSelectedBindings_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSelectedBindings_NativeFunction, "ReturnValue");
        GetPlaybackSpeed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlaybackSpeed");
        GetPlaybackSpeed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlaybackSpeed_NativeFunction);
        GetPlaybackSpeed_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlaybackSpeed_NativeFunction, "ReturnValue");
        GetFocusedLevelSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetFocusedLevelSequence");
        GetFocusedLevelSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetFocusedLevelSequence_NativeFunction);
        GetFocusedLevelSequence_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetFocusedLevelSequence_NativeFunction, "ReturnValue");
        GetCustomColorForChannel_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCustomColorForChannel");
        GetCustomColorForChannel_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCustomColorForChannel_NativeFunction);
        GetCustomColorForChannel_Class_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomColorForChannel_NativeFunction, "Class");
        GetCustomColorForChannel_Identifier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomColorForChannel_NativeFunction, "Identifier");
        GetCustomColorForChannel_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCustomColorForChannel_NativeFunction, "ReturnValue");
        GetCurrentTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentTime");
        GetCurrentTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentTime_NativeFunction);
        GetCurrentTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentTime_NativeFunction, "ReturnValue");
        GetCurrentLocalTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentLocalTime");
        GetCurrentLocalTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentLocalTime_NativeFunction);
        GetCurrentLocalTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentLocalTime_NativeFunction, "ReturnValue");
        GetCurrentLevelSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetCurrentLevelSequence");
        GetCurrentLevelSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetCurrentLevelSequence_NativeFunction);
        GetCurrentLevelSequence_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetCurrentLevelSequence_NativeFunction, "ReturnValue");
        GetBoundObjects_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetBoundObjects");
        GetBoundObjects_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetBoundObjects_NativeFunction);
        GetBoundObjects_ObjectBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoundObjects_NativeFunction, "ObjectBinding");
        GetBoundObjects_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetBoundObjects_NativeFunction, "ReturnValue");
        GetBoundObjects_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetBoundObjects_NativeFunction, "ReturnValue");
        FocusParentSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FocusParentSequence");
        FocusLevelSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FocusLevelSequence");
        FocusLevelSequence_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(FocusLevelSequence_NativeFunction);
        FocusLevelSequence_SubSection_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(FocusLevelSequence_NativeFunction, "SubSection");
        EmptySelection_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EmptySelection");
        DeleteColorForChannels_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeleteColorForChannels");
        DeleteColorForChannels_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeleteColorForChannels_NativeFunction);
        DeleteColorForChannels_Class_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteColorForChannels_NativeFunction, "Class");
        DeleteColorForChannels_Identifier_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteColorForChannels_NativeFunction, "Identifier");
        CloseLevelSequence_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CloseLevelSequence");
        
        
    }
    
    protected LevelSequenceEditorBlueprintLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:SetSelectionRangeStart
    static readonly IntPtr SetSelectionRangeStart_NativeFunction;
    static readonly int SetSelectionRangeStart_ParamsSize;
    static readonly int SetSelectionRangeStart_NewFrame_Offset;
    
    public static void SetSelectionRangeStart(int newFrame)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSelectionRangeStart_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetSelectionRangeStart_NewFrame_Offset), 0, null, newFrame);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetSelectionRangeStart_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:SetSelectionRangeEnd
    static readonly IntPtr SetSelectionRangeEnd_NativeFunction;
    static readonly int SetSelectionRangeEnd_ParamsSize;
    static readonly int SetSelectionRangeEnd_NewFrame_Offset;
    
    public static void SetSelectionRangeEnd(int newFrame)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSelectionRangeEnd_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetSelectionRangeEnd_NewFrame_Offset), 0, null, newFrame);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetSelectionRangeEnd_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:SetPlaybackSpeed
    static readonly IntPtr SetPlaybackSpeed_NativeFunction;
    static readonly int SetPlaybackSpeed_ParamsSize;
    static readonly int SetPlaybackSpeed_NewPlaybackSpeed_Offset;
    
    public static void SetPlaybackSpeed(float newPlaybackSpeed)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetPlaybackSpeed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetPlaybackSpeed_NewPlaybackSpeed_Offset), 0, null, newPlaybackSpeed);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetPlaybackSpeed_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:SetLockLevelSequence
    static readonly IntPtr SetLockLevelSequence_NativeFunction;
    static readonly int SetLockLevelSequence_ParamsSize;
    static readonly int SetLockLevelSequence_bLock_Offset;
    
    public static void SetLockLevelSequence(bool bLock)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLockLevelSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLockLevelSequence_bLock_Offset), 0, null, bLock);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLockLevelSequence_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:SetLockCameraCutToViewport
    static readonly IntPtr SetLockCameraCutToViewport_NativeFunction;
    static readonly int SetLockCameraCutToViewport_ParamsSize;
    static readonly int SetLockCameraCutToViewport_bLock_Offset;
    
    public static void SetLockCameraCutToViewport(bool bLock)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLockCameraCutToViewport_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLockCameraCutToViewport_bLock_Offset), 0, null, bLock);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetLockCameraCutToViewport_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:SetCustomColorForChannel
    static readonly IntPtr SetCustomColorForChannel_NativeFunction;
    static readonly int SetCustomColorForChannel_ParamsSize;
    static readonly int SetCustomColorForChannel_Class_Offset;
    static readonly int SetCustomColorForChannel_Identifier_Offset;
    static readonly int SetCustomColorForChannel_NewColor_Offset;
    
    public static void SetCustomColorForChannel(SubclassOf<UnrealSharp.CoreUObject.Object> @class, string identifier, UnrealSharp.CoreUObject.LinearColor newColor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCustomColorForChannel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomColorForChannel_Class_Offset), 0, null, @class);
            IntPtr Identifier_NativePtr = IntPtr.Add(ParamsBuffer,SetCustomColorForChannel_Identifier_Offset);
            StringMarshaller.ToNative(Identifier_NativePtr,0,null,identifier);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetCustomColorForChannel_NewColor_Offset), 0, null, newColor);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetCustomColorForChannel_NativeFunction, ParamsBuffer);
            
            
            StringMarshaller.DestructInstance(Identifier_NativePtr, 0);
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:SetCurrentTime
    static readonly IntPtr SetCurrentTime_NativeFunction;
    static readonly int SetCurrentTime_ParamsSize;
    static readonly int SetCurrentTime_NewFrame_Offset;
    
    public static void SetCurrentTime(int newFrame)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCurrentTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetCurrentTime_NewFrame_Offset), 0, null, newFrame);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetCurrentTime_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:SetCurrentLocalTime
    static readonly IntPtr SetCurrentLocalTime_NativeFunction;
    static readonly int SetCurrentLocalTime_ParamsSize;
    static readonly int SetCurrentLocalTime_NewFrame_Offset;
    
    public static void SetCurrentLocalTime(int newFrame)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetCurrentLocalTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetCurrentLocalTime_NewFrame_Offset), 0, null, newFrame);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetCurrentLocalTime_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:SelectTracks
    static readonly IntPtr SelectTracks_NativeFunction;
    static readonly int SelectTracks_ParamsSize;
    static readonly int SelectTracks_Tracks_Offset;
    static readonly int SelectTracks_Tracks_ElementSize;
    
    public static void SelectTracks(System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> tracks)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SelectTracks_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Tracks_NativeBuffer = IntPtr.Add(ParamsBuffer, SelectTracks_Tracks_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> Tracks_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack>(1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.FromNative, SelectTracks_Tracks_ElementSize);
            Tracks_Marshaler.ToNative(Tracks_NativeBuffer, 0, null, tracks);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SelectTracks_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:SelectSections
    static readonly IntPtr SelectSections_NativeFunction;
    static readonly int SelectSections_ParamsSize;
    static readonly int SelectSections_Sections_Offset;
    static readonly int SelectSections_Sections_ElementSize;
    
    public static void SelectSections(System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneSection> sections)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SelectSections_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Sections_NativeBuffer = IntPtr.Add(ParamsBuffer, SelectSections_Sections_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneSection> Sections_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneSection>(1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.FromNative, SelectSections_Sections_ElementSize);
            Sections_Marshaler.ToNative(Sections_NativeBuffer, 0, null, sections);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SelectSections_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:SelectObjects
    static readonly IntPtr SelectObjects_NativeFunction;
    static readonly int SelectObjects_ParamsSize;
    static readonly int SelectObjects_ObjectBinding_Offset;
    static readonly int SelectObjects_ObjectBinding_ElementSize;
    
    [Obsolete("SelectObjects is deprecated, please use SelectBindings which takes an FMovieSceneBindingProxy")]
    public static void SelectObjects(System.Collections.Generic.IList<UnrealSharp.CoreUObject.Guid> objectBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SelectObjects_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ObjectBinding_NativeBuffer = IntPtr.Add(ParamsBuffer, SelectObjects_ObjectBinding_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Guid> ObjectBinding_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Guid>(1, UnrealSharp.CoreUObject.GuidMarshaler.ToNative, UnrealSharp.CoreUObject.GuidMarshaler.FromNative, SelectObjects_ObjectBinding_ElementSize);
            ObjectBinding_Marshaler.ToNative(ObjectBinding_NativeBuffer, 0, null, objectBinding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SelectObjects_NativeFunction, ParamsBuffer);
            
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Guid>.DestructInstance(ObjectBinding_NativeBuffer, 0);
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:SelectFolders
    static readonly IntPtr SelectFolders_NativeFunction;
    static readonly int SelectFolders_ParamsSize;
    static readonly int SelectFolders_Folders_Offset;
    static readonly int SelectFolders_Folders_ElementSize;
    
    public static void SelectFolders(System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneFolder> folders)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SelectFolders_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Folders_NativeBuffer = IntPtr.Add(ParamsBuffer, SelectFolders_Folders_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneFolder> Folders_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneFolder>(1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.FromNative, SelectFolders_Folders_ElementSize);
            Folders_Marshaler.ToNative(Folders_NativeBuffer, 0, null, folders);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SelectFolders_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:SelectChannels
    static readonly IntPtr SelectChannels_NativeFunction;
    static readonly int SelectChannels_ParamsSize;
    static readonly int SelectChannels_Channels_Offset;
    static readonly int SelectChannels_Channels_ElementSize;
    
    public static void SelectChannels(System.Collections.Generic.IList<UnrealSharp.LevelSequenceEditor.SequencerChannelProxy> channels)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SelectChannels_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Channels_NativeBuffer = IntPtr.Add(ParamsBuffer, SelectChannels_Channels_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.LevelSequenceEditor.SequencerChannelProxy> Channels_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.LevelSequenceEditor.SequencerChannelProxy>(1, UnrealSharp.LevelSequenceEditor.SequencerChannelProxyMarshaler.ToNative, UnrealSharp.LevelSequenceEditor.SequencerChannelProxyMarshaler.FromNative, SelectChannels_Channels_ElementSize);
            Channels_Marshaler.ToNative(Channels_NativeBuffer, 0, null, channels);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SelectChannels_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:SelectBindings
    static readonly IntPtr SelectBindings_NativeFunction;
    static readonly int SelectBindings_ParamsSize;
    static readonly int SelectBindings_ObjectBindings_Offset;
    static readonly int SelectBindings_ObjectBindings_ElementSize;
    
    public static void SelectBindings(System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> objectBindings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SelectBindings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ObjectBindings_NativeBuffer = IntPtr.Add(ParamsBuffer, SelectBindings_ObjectBindings_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> ObjectBindings_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy>(1, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative, SelectBindings_ObjectBindings_ElementSize);
            ObjectBindings_Marshaler.ToNative(ObjectBindings_NativeBuffer, 0, null, objectBindings);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SelectBindings_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:RefreshCurrentLevelSequence
    static readonly IntPtr RefreshCurrentLevelSequence_NativeFunction;
    
    public static void RefreshCurrentLevelSequence()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RefreshCurrentLevelSequence_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:PlayTo
    static readonly IntPtr PlayTo_NativeFunction;
    static readonly int PlayTo_ParamsSize;
    static readonly int PlayTo_PlaybackParams_Offset;
    
    public static void PlayTo(UnrealSharp.MovieScene.MovieSceneSequencePlaybackParams playbackParams)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PlayTo_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneSequencePlaybackParamsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, PlayTo_PlaybackParams_Offset), 0, null, playbackParams);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, PlayTo_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:Play
    static readonly IntPtr Play_NativeFunction;
    
    public static void Play()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Play_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:Pause
    static readonly IntPtr Pause_NativeFunction;
    
    public static void Pause()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, Pause_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:OpenLevelSequence
    static readonly IntPtr OpenLevelSequence_NativeFunction;
    static readonly int OpenLevelSequence_ParamsSize;
    static readonly int OpenLevelSequence_LevelSequence_Offset;
    static readonly int OpenLevelSequence_ReturnValue_Offset;
    
    public static bool OpenLevelSequence(UnrealSharp.LevelSequence.LevelSequence levelSequence)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[OpenLevelSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.ToNative(IntPtr.Add(ParamsBuffer, OpenLevelSequence_LevelSequence_Offset), 0, null, levelSequence);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, OpenLevelSequence_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, OpenLevelSequence_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:IsPlaying
    static readonly IntPtr IsPlaying_NativeFunction;
    static readonly int IsPlaying_ParamsSize;
    static readonly int IsPlaying_ReturnValue_Offset;
    
    public static bool IsPlaying()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPlaying_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsPlaying_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPlaying_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:IsLevelSequenceLocked
    static readonly IntPtr IsLevelSequenceLocked_NativeFunction;
    static readonly int IsLevelSequenceLocked_ParamsSize;
    static readonly int IsLevelSequenceLocked_ReturnValue_Offset;
    
    public static bool IsLevelSequenceLocked()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsLevelSequenceLocked_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsLevelSequenceLocked_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsLevelSequenceLocked_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:IsCameraCutLockedToViewport
    static readonly IntPtr IsCameraCutLockedToViewport_NativeFunction;
    static readonly int IsCameraCutLockedToViewport_ParamsSize;
    static readonly int IsCameraCutLockedToViewport_ReturnValue_Offset;
    
    public static bool IsCameraCutLockedToViewport()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsCameraCutLockedToViewport_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsCameraCutLockedToViewport_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsCameraCutLockedToViewport_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:HasCustomColorForChannel
    static readonly IntPtr HasCustomColorForChannel_NativeFunction;
    static readonly int HasCustomColorForChannel_ParamsSize;
    static readonly int HasCustomColorForChannel_Class_Offset;
    static readonly int HasCustomColorForChannel_Identifier_Offset;
    static readonly int HasCustomColorForChannel_ReturnValue_Offset;
    
    public static bool HasCustomColorForChannel(SubclassOf<UnrealSharp.CoreUObject.Object> @class, string identifier)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasCustomColorForChannel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, HasCustomColorForChannel_Class_Offset), 0, null, @class);
            IntPtr Identifier_NativePtr = IntPtr.Add(ParamsBuffer,HasCustomColorForChannel_Identifier_Offset);
            StringMarshaller.ToNative(Identifier_NativePtr,0,null,identifier);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, HasCustomColorForChannel_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasCustomColorForChannel_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(Identifier_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:GetSubSequenceHierarchy
    static readonly IntPtr GetSubSequenceHierarchy_NativeFunction;
    static readonly int GetSubSequenceHierarchy_ParamsSize;
    static readonly int GetSubSequenceHierarchy_ReturnValue_Offset;
    static readonly int GetSubSequenceHierarchy_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneSubSection> GetSubSequenceHierarchy()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSubSequenceHierarchy_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSubSequenceHierarchy_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneSubSection> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSubSequenceHierarchy_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneSubSection> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneSubSection> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSubSection>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSubSection>.FromNative, GetSubSequenceHierarchy_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneSubSection>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:GetSelectionRangeStart
    static readonly IntPtr GetSelectionRangeStart_NativeFunction;
    static readonly int GetSelectionRangeStart_ParamsSize;
    static readonly int GetSelectionRangeStart_ReturnValue_Offset;
    
    public static int GetSelectionRangeStart()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSelectionRangeStart_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSelectionRangeStart_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetSelectionRangeStart_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:GetSelectionRangeEnd
    static readonly IntPtr GetSelectionRangeEnd_NativeFunction;
    static readonly int GetSelectionRangeEnd_ParamsSize;
    static readonly int GetSelectionRangeEnd_ReturnValue_Offset;
    
    public static int GetSelectionRangeEnd()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSelectionRangeEnd_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSelectionRangeEnd_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetSelectionRangeEnd_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:GetSelectedTracks
    static readonly IntPtr GetSelectedTracks_NativeFunction;
    static readonly int GetSelectedTracks_ParamsSize;
    static readonly int GetSelectedTracks_ReturnValue_Offset;
    static readonly int GetSelectedTracks_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> GetSelectedTracks()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSelectedTracks_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSelectedTracks_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSelectedTracks_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.FromNative, GetSelectedTracks_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:GetSelectedSections
    static readonly IntPtr GetSelectedSections_NativeFunction;
    static readonly int GetSelectedSections_ParamsSize;
    static readonly int GetSelectedSections_ReturnValue_Offset;
    static readonly int GetSelectedSections_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneSection> GetSelectedSections()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSelectedSections_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSelectedSections_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneSection> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSelectedSections_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneSection> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneSection> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.FromNative, GetSelectedSections_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneSection>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:GetSelectedObjects
    static readonly IntPtr GetSelectedObjects_NativeFunction;
    static readonly int GetSelectedObjects_ParamsSize;
    static readonly int GetSelectedObjects_ReturnValue_Offset;
    static readonly int GetSelectedObjects_ReturnValue_ElementSize;
    
    [Obsolete("GetSelectedObjects is deprecated, please use GetSelectedBindings which returns an array of FMovieSceneBindingProxy")]
    public static System.Collections.Generic.IList<UnrealSharp.CoreUObject.Guid> GetSelectedObjects()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSelectedObjects_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSelectedObjects_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.CoreUObject.Guid> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSelectedObjects_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Guid> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Guid> (1, UnrealSharp.CoreUObject.GuidMarshaler.ToNative, UnrealSharp.CoreUObject.GuidMarshaler.FromNative, GetSelectedObjects_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Guid>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:GetSelectedFolders
    static readonly IntPtr GetSelectedFolders_NativeFunction;
    static readonly int GetSelectedFolders_ParamsSize;
    static readonly int GetSelectedFolders_ReturnValue_Offset;
    static readonly int GetSelectedFolders_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneFolder> GetSelectedFolders()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSelectedFolders_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSelectedFolders_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneFolder> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSelectedFolders_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneFolder> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneFolder> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.FromNative, GetSelectedFolders_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneFolder>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:GetSelectedChannels
    static readonly IntPtr GetSelectedChannels_NativeFunction;
    static readonly int GetSelectedChannels_ParamsSize;
    static readonly int GetSelectedChannels_ReturnValue_Offset;
    static readonly int GetSelectedChannels_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.LevelSequenceEditor.SequencerChannelProxy> GetSelectedChannels()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSelectedChannels_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSelectedChannels_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.LevelSequenceEditor.SequencerChannelProxy> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSelectedChannels_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.LevelSequenceEditor.SequencerChannelProxy> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.LevelSequenceEditor.SequencerChannelProxy> (1, UnrealSharp.LevelSequenceEditor.SequencerChannelProxyMarshaler.ToNative, UnrealSharp.LevelSequenceEditor.SequencerChannelProxyMarshaler.FromNative, GetSelectedChannels_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.LevelSequenceEditor.SequencerChannelProxy>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:GetSelectedBindings
    static readonly IntPtr GetSelectedBindings_NativeFunction;
    static readonly int GetSelectedBindings_ParamsSize;
    static readonly int GetSelectedBindings_ReturnValue_Offset;
    static readonly int GetSelectedBindings_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> GetSelectedBindings()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSelectedBindings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetSelectedBindings_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSelectedBindings_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> (1, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative, GetSelectedBindings_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:GetPlaybackSpeed
    static readonly IntPtr GetPlaybackSpeed_NativeFunction;
    static readonly int GetPlaybackSpeed_ParamsSize;
    static readonly int GetPlaybackSpeed_ReturnValue_Offset;
    
    public static float GetPlaybackSpeed()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlaybackSpeed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetPlaybackSpeed_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetPlaybackSpeed_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:GetFocusedLevelSequence
    static readonly IntPtr GetFocusedLevelSequence_NativeFunction;
    static readonly int GetFocusedLevelSequence_ParamsSize;
    static readonly int GetFocusedLevelSequence_ReturnValue_Offset;
    
    public static UnrealSharp.LevelSequence.LevelSequence GetFocusedLevelSequence()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetFocusedLevelSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetFocusedLevelSequence_NativeFunction, ParamsBuffer);
            
            UnrealSharp.LevelSequence.LevelSequence returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.FromNative(IntPtr.Add(ParamsBuffer, GetFocusedLevelSequence_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:GetCustomColorForChannel
    static readonly IntPtr GetCustomColorForChannel_NativeFunction;
    static readonly int GetCustomColorForChannel_ParamsSize;
    static readonly int GetCustomColorForChannel_Class_Offset;
    static readonly int GetCustomColorForChannel_Identifier_Offset;
    static readonly int GetCustomColorForChannel_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor GetCustomColorForChannel(SubclassOf<UnrealSharp.CoreUObject.Object> @class, string identifier)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCustomColorForChannel_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, GetCustomColorForChannel_Class_Offset), 0, null, @class);
            IntPtr Identifier_NativePtr = IntPtr.Add(ParamsBuffer,GetCustomColorForChannel_Identifier_Offset);
            StringMarshaller.ToNative(Identifier_NativePtr,0,null,identifier);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetCustomColorForChannel_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, GetCustomColorForChannel_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(Identifier_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:GetCurrentTime
    static readonly IntPtr GetCurrentTime_NativeFunction;
    static readonly int GetCurrentTime_ParamsSize;
    static readonly int GetCurrentTime_ReturnValue_Offset;
    
    public static int GetCurrentTime()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetCurrentTime_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:GetCurrentLocalTime
    static readonly IntPtr GetCurrentLocalTime_NativeFunction;
    static readonly int GetCurrentLocalTime_ParamsSize;
    static readonly int GetCurrentLocalTime_ReturnValue_Offset;
    
    public static int GetCurrentLocalTime()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentLocalTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetCurrentLocalTime_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentLocalTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:GetCurrentLevelSequence
    static readonly IntPtr GetCurrentLevelSequence_NativeFunction;
    static readonly int GetCurrentLevelSequence_ParamsSize;
    static readonly int GetCurrentLevelSequence_ReturnValue_Offset;
    
    public static UnrealSharp.LevelSequence.LevelSequence GetCurrentLevelSequence()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetCurrentLevelSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetCurrentLevelSequence_NativeFunction, ParamsBuffer);
            
            UnrealSharp.LevelSequence.LevelSequence returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.LevelSequence.LevelSequence>.FromNative(IntPtr.Add(ParamsBuffer, GetCurrentLevelSequence_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:GetBoundObjects
    static readonly IntPtr GetBoundObjects_NativeFunction;
    static readonly int GetBoundObjects_ParamsSize;
    static readonly int GetBoundObjects_ObjectBinding_Offset;
    static readonly int GetBoundObjects_ReturnValue_Offset;
    static readonly int GetBoundObjects_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.CoreUObject.Object> GetBoundObjects(UnrealSharp.MovieScene.MovieSceneObjectBindingID objectBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetBoundObjects_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneObjectBindingIDMarshaler.ToNative(IntPtr.Add(ParamsBuffer, GetBoundObjects_ObjectBinding_Offset), 0, null, objectBinding);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetBoundObjects_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.CoreUObject.Object> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetBoundObjects_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object> (1, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.ToNative, ObjectMarshaller<UnrealSharp.CoreUObject.Object>.FromNative, GetBoundObjects_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.Object>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:FocusParentSequence
    static readonly IntPtr FocusParentSequence_NativeFunction;
    
    public static void FocusParentSequence()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FocusParentSequence_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:FocusLevelSequence
    static readonly IntPtr FocusLevelSequence_NativeFunction;
    static readonly int FocusLevelSequence_ParamsSize;
    static readonly int FocusLevelSequence_SubSection_Offset;
    
    public static void FocusLevelSequence(UnrealSharp.MovieScene.MovieSceneSubSection subSection)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[FocusLevelSequence_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSubSection>.ToNative(IntPtr.Add(ParamsBuffer, FocusLevelSequence_SubSection_Offset), 0, null, subSection);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, FocusLevelSequence_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:EmptySelection
    static readonly IntPtr EmptySelection_NativeFunction;
    
    public static void EmptySelection()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EmptySelection_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:DeleteColorForChannels
    static readonly IntPtr DeleteColorForChannels_NativeFunction;
    static readonly int DeleteColorForChannels_ParamsSize;
    static readonly int DeleteColorForChannels_Class_Offset;
    static readonly int DeleteColorForChannels_Identifier_Offset;
    
    public static void DeleteColorForChannels(SubclassOf<UnrealSharp.CoreUObject.Object> @class, out string identifier)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeleteColorForChannels_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            SubclassOfMarshaller<UnrealSharp.CoreUObject.Object>.ToNative(IntPtr.Add(ParamsBuffer, DeleteColorForChannels_Class_Offset), 0, null, @class);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DeleteColorForChannels_NativeFunction, ParamsBuffer);
            
            IntPtr Identifier_NativePtr = IntPtr.Add(ParamsBuffer,DeleteColorForChannels_Identifier_Offset);
            identifier = StringMarshaller.FromNative(Identifier_NativePtr,0,null);
            StringMarshaller.DestructInstance(Identifier_NativePtr, 0);
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorBlueprintLibrary:CloseLevelSequence
    static readonly IntPtr CloseLevelSequence_NativeFunction;
    
    public static void CloseLevelSequence()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CloseLevelSequence_NativeFunction, IntPtr.Zero);
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.LevelSequenceEditor;

[UClass]
public partial class LevelSequenceEditorSubsystem : UnrealSharp.EditorSubsystem.EditorSubsystem
{
    
    static LevelSequenceEditorSubsystem()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("LevelSequenceEditorSubsystem");
        
        
        SyncSectionsUsingSourceTimecode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SyncSectionsUsingSourceTimecode");
        SyncSectionsUsingSourceTimecode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SyncSectionsUsingSourceTimecode_NativeFunction);
        SyncSectionsUsingSourceTimecode_Sections_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SyncSectionsUsingSourceTimecode_NativeFunction, "Sections");
        SyncSectionsUsingSourceTimecode_Sections_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SyncSectionsUsingSourceTimecode_NativeFunction, "Sections");
        SnapSectionsToTimelineUsingSourceTimecode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SnapSectionsToTimelineUsingSourceTimecode");
        SnapSectionsToTimelineUsingSourceTimecode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SnapSectionsToTimelineUsingSourceTimecode_NativeFunction);
        SnapSectionsToTimelineUsingSourceTimecode_Sections_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SnapSectionsToTimelineUsingSourceTimecode_NativeFunction, "Sections");
        SnapSectionsToTimelineUsingSourceTimecode_Sections_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SnapSectionsToTimelineUsingSourceTimecode_NativeFunction, "Sections");
        ReplaceBindingWithActors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ReplaceBindingWithActors");
        ReplaceBindingWithActors_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ReplaceBindingWithActors_NativeFunction);
        ReplaceBindingWithActors_Actors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceBindingWithActors_NativeFunction, "Actors");
        ReplaceBindingWithActors_Actors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ReplaceBindingWithActors_NativeFunction, "Actors");
        ReplaceBindingWithActors_ObjectBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ReplaceBindingWithActors_NativeFunction, "ObjectBinding");
        RemoveInvalidBindings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveInvalidBindings");
        RemoveInvalidBindings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveInvalidBindings_NativeFunction);
        RemoveInvalidBindings_ObjectBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveInvalidBindings_NativeFunction, "ObjectBinding");
        RemoveAllBindings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveAllBindings");
        RemoveAllBindings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveAllBindings_NativeFunction);
        RemoveAllBindings_ObjectBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveAllBindings_NativeFunction, "ObjectBinding");
        RemoveActorsFromBinding_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RemoveActorsFromBinding");
        RemoveActorsFromBinding_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RemoveActorsFromBinding_NativeFunction);
        RemoveActorsFromBinding_Actors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveActorsFromBinding_NativeFunction, "Actors");
        RemoveActorsFromBinding_Actors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(RemoveActorsFromBinding_NativeFunction, "Actors");
        RemoveActorsFromBinding_ObjectBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RemoveActorsFromBinding_NativeFunction, "ObjectBinding");
        RebindComponent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RebindComponent");
        RebindComponent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RebindComponent_NativeFunction);
        RebindComponent_ComponentBindings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RebindComponent_NativeFunction, "ComponentBindings");
        RebindComponent_ComponentBindings_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(RebindComponent_NativeFunction, "ComponentBindings");
        RebindComponent_ComponentName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RebindComponent_NativeFunction, "ComponentName");
        PasteTracks_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PasteTracks");
        PasteTracks_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PasteTracks_NativeFunction);
        PasteTracks_TextToImport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PasteTracks_NativeFunction, "TextToImport");
        PasteTracks_PasteTracksParams_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PasteTracks_NativeFunction, "PasteTracksParams");
        PasteTracks_OutTracks_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PasteTracks_NativeFunction, "OutTracks");
        PasteTracks_OutTracks_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(PasteTracks_NativeFunction, "OutTracks");
        PasteTracks_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PasteTracks_NativeFunction, "ReturnValue");
        PasteSections_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PasteSections");
        PasteSections_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PasteSections_NativeFunction);
        PasteSections_TextToImport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PasteSections_NativeFunction, "TextToImport");
        PasteSections_PasteSectionsParams_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PasteSections_NativeFunction, "PasteSectionsParams");
        PasteSections_OutSections_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PasteSections_NativeFunction, "OutSections");
        PasteSections_OutSections_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(PasteSections_NativeFunction, "OutSections");
        PasteSections_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PasteSections_NativeFunction, "ReturnValue");
        PasteFolders_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PasteFolders");
        PasteFolders_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PasteFolders_NativeFunction);
        PasteFolders_TextToImport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PasteFolders_NativeFunction, "TextToImport");
        PasteFolders_PasteFoldersParams_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PasteFolders_NativeFunction, "PasteFoldersParams");
        PasteFolders_OutFolders_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PasteFolders_NativeFunction, "OutFolders");
        PasteFolders_OutFolders_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(PasteFolders_NativeFunction, "OutFolders");
        PasteFolders_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PasteFolders_NativeFunction, "ReturnValue");
        PasteBindings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PasteBindings");
        PasteBindings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(PasteBindings_NativeFunction);
        PasteBindings_TextToImport_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PasteBindings_NativeFunction, "TextToImport");
        PasteBindings_PasteBindingsParams_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PasteBindings_NativeFunction, "PasteBindingsParams");
        PasteBindings_OutObjectBindings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PasteBindings_NativeFunction, "OutObjectBindings");
        PasteBindings_OutObjectBindings_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(PasteBindings_NativeFunction, "OutObjectBindings");
        PasteBindings_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(PasteBindings_NativeFunction, "ReturnValue");
        GetScriptingLayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetScriptingLayer");
        GetScriptingLayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetScriptingLayer_NativeFunction);
        GetScriptingLayer_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScriptingLayer_NativeFunction, "ReturnValue");
        FixActorReferences_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "FixActorReferences");
        CreateCamera_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateCamera");
        CreateCamera_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateCamera_NativeFunction);
        CreateCamera_bSpawnable_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateCamera_NativeFunction, "bSpawnable");
        CreateCamera_OutActor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateCamera_NativeFunction, "OutActor");
        CreateCamera_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateCamera_NativeFunction, "ReturnValue");
        CopyTracks_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CopyTracks");
        CopyTracks_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CopyTracks_NativeFunction);
        CopyTracks_Tracks_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyTracks_NativeFunction, "Tracks");
        CopyTracks_Tracks_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CopyTracks_NativeFunction, "Tracks");
        CopyTracks_ExportedText_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyTracks_NativeFunction, "ExportedText");
        CopySections_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CopySections");
        CopySections_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CopySections_NativeFunction);
        CopySections_Sections_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopySections_NativeFunction, "Sections");
        CopySections_Sections_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CopySections_NativeFunction, "Sections");
        CopySections_ExportedText_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopySections_NativeFunction, "ExportedText");
        CopyFolders_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CopyFolders");
        CopyFolders_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CopyFolders_NativeFunction);
        CopyFolders_Folders_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyFolders_NativeFunction, "Folders");
        CopyFolders_Folders_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CopyFolders_NativeFunction, "Folders");
        CopyFolders_ExportedText_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyFolders_NativeFunction, "ExportedText");
        CopyBindings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CopyBindings");
        CopyBindings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CopyBindings_NativeFunction);
        CopyBindings_Bindings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyBindings_NativeFunction, "Bindings");
        CopyBindings_Bindings_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(CopyBindings_NativeFunction, "Bindings");
        CopyBindings_ExportedText_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CopyBindings_NativeFunction, "ExportedText");
        ConvertToSpawnable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertToSpawnable");
        ConvertToSpawnable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertToSpawnable_NativeFunction);
        ConvertToSpawnable_ObjectBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToSpawnable_NativeFunction, "ObjectBinding");
        ConvertToSpawnable_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToSpawnable_NativeFunction, "ReturnValue");
        ConvertToSpawnable_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(ConvertToSpawnable_NativeFunction, "ReturnValue");
        ConvertToPossessable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConvertToPossessable");
        ConvertToPossessable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConvertToPossessable_NativeFunction);
        ConvertToPossessable_ObjectBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToPossessable_NativeFunction, "ObjectBinding");
        ConvertToPossessable_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConvertToPossessable_NativeFunction, "ReturnValue");
        BakeTransformWithSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BakeTransformWithSettings");
        BakeTransformWithSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BakeTransformWithSettings_NativeFunction);
        BakeTransformWithSettings_ObjectBindings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeTransformWithSettings_NativeFunction, "ObjectBindings");
        BakeTransformWithSettings_ObjectBindings_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BakeTransformWithSettings_NativeFunction, "ObjectBindings");
        BakeTransformWithSettings_InSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeTransformWithSettings_NativeFunction, "InSettings");
        BakeTransformWithSettings_Params_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeTransformWithSettings_NativeFunction, "Params");
        BakeTransformWithSettings_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeTransformWithSettings_NativeFunction, "ReturnValue");
        BakeTransform_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BakeTransform");
        BakeTransform_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BakeTransform_NativeFunction);
        BakeTransform_ObjectBindings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeTransform_NativeFunction, "ObjectBindings");
        BakeTransform_ObjectBindings_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(BakeTransform_NativeFunction, "ObjectBindings");
        BakeTransform_BakeInTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeTransform_NativeFunction, "BakeInTime");
        BakeTransform_BakeOutTime_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeTransform_NativeFunction, "BakeOutTime");
        BakeTransform_BakeInterval_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeTransform_NativeFunction, "BakeInterval");
        BakeTransform_Params_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BakeTransform_NativeFunction, "Params");
        AddActorsToBinding_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddActorsToBinding");
        AddActorsToBinding_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddActorsToBinding_NativeFunction);
        AddActorsToBinding_Actors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddActorsToBinding_NativeFunction, "Actors");
        AddActorsToBinding_Actors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(AddActorsToBinding_NativeFunction, "Actors");
        AddActorsToBinding_ObjectBinding_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddActorsToBinding_NativeFunction, "ObjectBinding");
        AddActors_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AddActors");
        AddActors_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AddActors_NativeFunction);
        AddActors_Actors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddActors_NativeFunction, "Actors");
        AddActors_Actors_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(AddActors_NativeFunction, "Actors");
        AddActors_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AddActors_NativeFunction, "ReturnValue");
        AddActors_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(AddActors_NativeFunction, "ReturnValue");
        
        
    }
    
    protected LevelSequenceEditorSubsystem(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:SyncSectionsUsingSourceTimecode
    static readonly IntPtr SyncSectionsUsingSourceTimecode_NativeFunction;
    static readonly int SyncSectionsUsingSourceTimecode_ParamsSize;
    static readonly int SyncSectionsUsingSourceTimecode_Sections_Offset;
    static readonly int SyncSectionsUsingSourceTimecode_Sections_ElementSize;
    
    public void SyncSectionsUsingSourceTimecode(System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneSection> sections)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SyncSectionsUsingSourceTimecode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Sections_NativeBuffer = IntPtr.Add(ParamsBuffer, SyncSectionsUsingSourceTimecode_Sections_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneSection> Sections_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneSection>(1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.FromNative, SyncSectionsUsingSourceTimecode_Sections_ElementSize);
            Sections_Marshaler.ToNative(Sections_NativeBuffer, 0, null, sections);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SyncSectionsUsingSourceTimecode_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:SnapSectionsToTimelineUsingSourceTimecode
    static readonly IntPtr SnapSectionsToTimelineUsingSourceTimecode_NativeFunction;
    static readonly int SnapSectionsToTimelineUsingSourceTimecode_ParamsSize;
    static readonly int SnapSectionsToTimelineUsingSourceTimecode_Sections_Offset;
    static readonly int SnapSectionsToTimelineUsingSourceTimecode_Sections_ElementSize;
    
    public void SnapSectionsToTimelineUsingSourceTimecode(System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneSection> sections)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SnapSectionsToTimelineUsingSourceTimecode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Sections_NativeBuffer = IntPtr.Add(ParamsBuffer, SnapSectionsToTimelineUsingSourceTimecode_Sections_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneSection> Sections_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneSection>(1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.FromNative, SnapSectionsToTimelineUsingSourceTimecode_Sections_ElementSize);
            Sections_Marshaler.ToNative(Sections_NativeBuffer, 0, null, sections);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SnapSectionsToTimelineUsingSourceTimecode_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:ReplaceBindingWithActors
    static readonly IntPtr ReplaceBindingWithActors_NativeFunction;
    static readonly int ReplaceBindingWithActors_ParamsSize;
    static readonly int ReplaceBindingWithActors_Actors_Offset;
    static readonly int ReplaceBindingWithActors_Actors_ElementSize;
    static readonly int ReplaceBindingWithActors_ObjectBinding_Offset;
    
    public void ReplaceBindingWithActors(System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actors, UnrealSharp.MovieScene.MovieSceneBindingProxy objectBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ReplaceBindingWithActors_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Actors_NativeBuffer = IntPtr.Add(ParamsBuffer, ReplaceBindingWithActors_Actors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> Actors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, ReplaceBindingWithActors_Actors_ElementSize);
            Actors_Marshaler.ToNative(Actors_NativeBuffer, 0, null, actors);
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ReplaceBindingWithActors_ObjectBinding_Offset), 0, null, objectBinding);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ReplaceBindingWithActors_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:RemoveInvalidBindings
    static readonly IntPtr RemoveInvalidBindings_NativeFunction;
    static readonly int RemoveInvalidBindings_ParamsSize;
    static readonly int RemoveInvalidBindings_ObjectBinding_Offset;
    
    public void RemoveInvalidBindings(UnrealSharp.MovieScene.MovieSceneBindingProxy objectBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveInvalidBindings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, RemoveInvalidBindings_ObjectBinding_Offset), 0, null, objectBinding);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveInvalidBindings_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:RemoveAllBindings
    static readonly IntPtr RemoveAllBindings_NativeFunction;
    static readonly int RemoveAllBindings_ParamsSize;
    static readonly int RemoveAllBindings_ObjectBinding_Offset;
    
    public void RemoveAllBindings(UnrealSharp.MovieScene.MovieSceneBindingProxy objectBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveAllBindings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, RemoveAllBindings_ObjectBinding_Offset), 0, null, objectBinding);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveAllBindings_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:RemoveActorsFromBinding
    static readonly IntPtr RemoveActorsFromBinding_NativeFunction;
    static readonly int RemoveActorsFromBinding_ParamsSize;
    static readonly int RemoveActorsFromBinding_Actors_Offset;
    static readonly int RemoveActorsFromBinding_Actors_ElementSize;
    static readonly int RemoveActorsFromBinding_ObjectBinding_Offset;
    
    public void RemoveActorsFromBinding(System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actors, UnrealSharp.MovieScene.MovieSceneBindingProxy objectBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RemoveActorsFromBinding_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Actors_NativeBuffer = IntPtr.Add(ParamsBuffer, RemoveActorsFromBinding_Actors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> Actors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, RemoveActorsFromBinding_Actors_ElementSize);
            Actors_Marshaler.ToNative(Actors_NativeBuffer, 0, null, actors);
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, RemoveActorsFromBinding_ObjectBinding_Offset), 0, null, objectBinding);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RemoveActorsFromBinding_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:RebindComponent
    static readonly IntPtr RebindComponent_NativeFunction;
    static readonly int RebindComponent_ParamsSize;
    static readonly int RebindComponent_ComponentBindings_Offset;
    static readonly int RebindComponent_ComponentBindings_ElementSize;
    static readonly int RebindComponent_ComponentName_Offset;
    
    public void RebindComponent(System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> componentBindings, Name componentName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RebindComponent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ComponentBindings_NativeBuffer = IntPtr.Add(ParamsBuffer, RebindComponent_ComponentBindings_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> ComponentBindings_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy>(1, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative, RebindComponent_ComponentBindings_ElementSize);
            ComponentBindings_Marshaler.ToNative(ComponentBindings_NativeBuffer, 0, null, componentBindings);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, RebindComponent_ComponentName_Offset), 0, null, componentName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, RebindComponent_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:PasteTracks
    static readonly IntPtr PasteTracks_NativeFunction;
    static readonly int PasteTracks_ParamsSize;
    static readonly int PasteTracks_TextToImport_Offset;
    static readonly int PasteTracks_PasteTracksParams_Offset;
    static readonly int PasteTracks_OutTracks_Offset;
    static readonly int PasteTracks_OutTracks_ElementSize;
    static readonly int PasteTracks_ReturnValue_Offset;
    
    public bool PasteTracks(string textToImport, UnrealSharp.Sequencer.MovieScenePasteTracksParams pasteTracksParams, out System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> outTracks)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PasteTracks_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TextToImport_NativePtr = IntPtr.Add(ParamsBuffer,PasteTracks_TextToImport_Offset);
            StringMarshaller.ToNative(TextToImport_NativePtr,0,null,textToImport);
            UnrealSharp.Sequencer.MovieScenePasteTracksParamsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, PasteTracks_PasteTracksParams_Offset), 0, null, pasteTracksParams);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PasteTracks_NativeFunction, ParamsBuffer);
            
            IntPtr OutTracks_NativeBuffer = IntPtr.Add(ParamsBuffer, PasteTracks_OutTracks_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> OutTracks_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.FromNative, PasteTracks_OutTracks_ElementSize);
            outTracks = OutTracks_Marshaler.FromNative(OutTracks_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack>.DestructInstance(OutTracks_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, PasteTracks_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(TextToImport_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:PasteSections
    static readonly IntPtr PasteSections_NativeFunction;
    static readonly int PasteSections_ParamsSize;
    static readonly int PasteSections_TextToImport_Offset;
    static readonly int PasteSections_PasteSectionsParams_Offset;
    static readonly int PasteSections_OutSections_Offset;
    static readonly int PasteSections_OutSections_ElementSize;
    static readonly int PasteSections_ReturnValue_Offset;
    
    public bool PasteSections(string textToImport, UnrealSharp.Sequencer.MovieScenePasteSectionsParams pasteSectionsParams, out System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneSection> outSections)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PasteSections_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TextToImport_NativePtr = IntPtr.Add(ParamsBuffer,PasteSections_TextToImport_Offset);
            StringMarshaller.ToNative(TextToImport_NativePtr,0,null,textToImport);
            UnrealSharp.Sequencer.MovieScenePasteSectionsParamsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, PasteSections_PasteSectionsParams_Offset), 0, null, pasteSectionsParams);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PasteSections_NativeFunction, ParamsBuffer);
            
            IntPtr OutSections_NativeBuffer = IntPtr.Add(ParamsBuffer, PasteSections_OutSections_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneSection> OutSections_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneSection> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.FromNative, PasteSections_OutSections_ElementSize);
            outSections = OutSections_Marshaler.FromNative(OutSections_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneSection>.DestructInstance(OutSections_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, PasteSections_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(TextToImport_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:PasteFolders
    static readonly IntPtr PasteFolders_NativeFunction;
    static readonly int PasteFolders_ParamsSize;
    static readonly int PasteFolders_TextToImport_Offset;
    static readonly int PasteFolders_PasteFoldersParams_Offset;
    static readonly int PasteFolders_OutFolders_Offset;
    static readonly int PasteFolders_OutFolders_ElementSize;
    static readonly int PasteFolders_ReturnValue_Offset;
    
    public bool PasteFolders(string textToImport, UnrealSharp.Sequencer.MovieScenePasteFoldersParams pasteFoldersParams, out System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneFolder> outFolders)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PasteFolders_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TextToImport_NativePtr = IntPtr.Add(ParamsBuffer,PasteFolders_TextToImport_Offset);
            StringMarshaller.ToNative(TextToImport_NativePtr,0,null,textToImport);
            UnrealSharp.Sequencer.MovieScenePasteFoldersParamsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, PasteFolders_PasteFoldersParams_Offset), 0, null, pasteFoldersParams);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PasteFolders_NativeFunction, ParamsBuffer);
            
            IntPtr OutFolders_NativeBuffer = IntPtr.Add(ParamsBuffer, PasteFolders_OutFolders_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneFolder> OutFolders_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneFolder> (1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.FromNative, PasteFolders_OutFolders_ElementSize);
            outFolders = OutFolders_Marshaler.FromNative(OutFolders_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneFolder>.DestructInstance(OutFolders_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, PasteFolders_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(TextToImport_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:PasteBindings
    static readonly IntPtr PasteBindings_NativeFunction;
    static readonly int PasteBindings_ParamsSize;
    static readonly int PasteBindings_TextToImport_Offset;
    static readonly int PasteBindings_PasteBindingsParams_Offset;
    static readonly int PasteBindings_OutObjectBindings_Offset;
    static readonly int PasteBindings_OutObjectBindings_ElementSize;
    static readonly int PasteBindings_ReturnValue_Offset;
    
    public bool PasteBindings(string textToImport, UnrealSharp.Sequencer.MovieScenePasteBindingsParams pasteBindingsParams, out System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> outObjectBindings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[PasteBindings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr TextToImport_NativePtr = IntPtr.Add(ParamsBuffer,PasteBindings_TextToImport_Offset);
            StringMarshaller.ToNative(TextToImport_NativePtr,0,null,textToImport);
            UnrealSharp.Sequencer.MovieScenePasteBindingsParamsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, PasteBindings_PasteBindingsParams_Offset), 0, null, pasteBindingsParams);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PasteBindings_NativeFunction, ParamsBuffer);
            
            IntPtr OutObjectBindings_NativeBuffer = IntPtr.Add(ParamsBuffer, PasteBindings_OutObjectBindings_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> OutObjectBindings_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> (1, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative, PasteBindings_OutObjectBindings_ElementSize);
            outObjectBindings = OutObjectBindings_Marshaler.FromNative(OutObjectBindings_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy>.DestructInstance(OutObjectBindings_NativeBuffer, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, PasteBindings_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(TextToImport_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:GetScriptingLayer
    static readonly IntPtr GetScriptingLayer_NativeFunction;
    static readonly int GetScriptingLayer_ParamsSize;
    static readonly int GetScriptingLayer_ReturnValue_Offset;
    
    public UnrealSharp.SequencerCore.SequencerScriptingLayer GetScriptingLayer()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetScriptingLayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetScriptingLayer_NativeFunction, ParamsBuffer);
            
            UnrealSharp.SequencerCore.SequencerScriptingLayer returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.SequencerCore.SequencerScriptingLayer>.FromNative(IntPtr.Add(ParamsBuffer, GetScriptingLayer_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:FixActorReferences
    static readonly IntPtr FixActorReferences_NativeFunction;
    
    public void FixActorReferences()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, FixActorReferences_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:CreateCamera
    static readonly IntPtr CreateCamera_NativeFunction;
    static readonly int CreateCamera_ParamsSize;
    static readonly int CreateCamera_bSpawnable_Offset;
    static readonly int CreateCamera_OutActor_Offset;
    static readonly int CreateCamera_ReturnValue_Offset;
    
    public UnrealSharp.MovieScene.MovieSceneBindingProxy CreateCamera(bool bSpawnable, out UnrealSharp.CinematicCamera.CineCameraActor outActor)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateCamera_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, CreateCamera_bSpawnable_Offset), 0, null, bSpawnable);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CreateCamera_NativeFunction, ParamsBuffer);
            
            outActor = ObjectMarshaller<UnrealSharp.CinematicCamera.CineCameraActor>.FromNative(IntPtr.Add(ParamsBuffer, CreateCamera_OutActor_Offset), 0, null);
            UnrealSharp.MovieScene.MovieSceneBindingProxy returnValue;
            returnValue = UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, CreateCamera_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:CopyTracks
    static readonly IntPtr CopyTracks_NativeFunction;
    static readonly int CopyTracks_ParamsSize;
    static readonly int CopyTracks_Tracks_Offset;
    static readonly int CopyTracks_Tracks_ElementSize;
    static readonly int CopyTracks_ExportedText_Offset;
    
    public void CopyTracks(System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneTrack> tracks, out string exportedText)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CopyTracks_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Tracks_NativeBuffer = IntPtr.Add(ParamsBuffer, CopyTracks_Tracks_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack> Tracks_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneTrack>(1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneTrack>.FromNative, CopyTracks_Tracks_ElementSize);
            Tracks_Marshaler.ToNative(Tracks_NativeBuffer, 0, null, tracks);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CopyTracks_NativeFunction, ParamsBuffer);
            
            IntPtr ExportedText_NativePtr = IntPtr.Add(ParamsBuffer,CopyTracks_ExportedText_Offset);
            exportedText = StringMarshaller.FromNative(ExportedText_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExportedText_NativePtr, 0);
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:CopySections
    static readonly IntPtr CopySections_NativeFunction;
    static readonly int CopySections_ParamsSize;
    static readonly int CopySections_Sections_Offset;
    static readonly int CopySections_Sections_ElementSize;
    static readonly int CopySections_ExportedText_Offset;
    
    public void CopySections(System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneSection> sections, out string exportedText)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CopySections_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Sections_NativeBuffer = IntPtr.Add(ParamsBuffer, CopySections_Sections_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneSection> Sections_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneSection>(1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneSection>.FromNative, CopySections_Sections_ElementSize);
            Sections_Marshaler.ToNative(Sections_NativeBuffer, 0, null, sections);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CopySections_NativeFunction, ParamsBuffer);
            
            IntPtr ExportedText_NativePtr = IntPtr.Add(ParamsBuffer,CopySections_ExportedText_Offset);
            exportedText = StringMarshaller.FromNative(ExportedText_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExportedText_NativePtr, 0);
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:CopyFolders
    static readonly IntPtr CopyFolders_NativeFunction;
    static readonly int CopyFolders_ParamsSize;
    static readonly int CopyFolders_Folders_Offset;
    static readonly int CopyFolders_Folders_ElementSize;
    static readonly int CopyFolders_ExportedText_Offset;
    
    public void CopyFolders(System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneFolder> folders, out string exportedText)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CopyFolders_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Folders_NativeBuffer = IntPtr.Add(ParamsBuffer, CopyFolders_Folders_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneFolder> Folders_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneFolder>(1, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.ToNative, ObjectMarshaller<UnrealSharp.MovieScene.MovieSceneFolder>.FromNative, CopyFolders_Folders_ElementSize);
            Folders_Marshaler.ToNative(Folders_NativeBuffer, 0, null, folders);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CopyFolders_NativeFunction, ParamsBuffer);
            
            IntPtr ExportedText_NativePtr = IntPtr.Add(ParamsBuffer,CopyFolders_ExportedText_Offset);
            exportedText = StringMarshaller.FromNative(ExportedText_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExportedText_NativePtr, 0);
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:CopyBindings
    static readonly IntPtr CopyBindings_NativeFunction;
    static readonly int CopyBindings_ParamsSize;
    static readonly int CopyBindings_Bindings_Offset;
    static readonly int CopyBindings_Bindings_ElementSize;
    static readonly int CopyBindings_ExportedText_Offset;
    
    public void CopyBindings(System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> bindings, out string exportedText)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CopyBindings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Bindings_NativeBuffer = IntPtr.Add(ParamsBuffer, CopyBindings_Bindings_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> Bindings_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy>(1, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative, CopyBindings_Bindings_ElementSize);
            Bindings_Marshaler.ToNative(Bindings_NativeBuffer, 0, null, bindings);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CopyBindings_NativeFunction, ParamsBuffer);
            
            IntPtr ExportedText_NativePtr = IntPtr.Add(ParamsBuffer,CopyBindings_ExportedText_Offset);
            exportedText = StringMarshaller.FromNative(ExportedText_NativePtr,0,null);
            StringMarshaller.DestructInstance(ExportedText_NativePtr, 0);
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:ConvertToSpawnable
    static readonly IntPtr ConvertToSpawnable_NativeFunction;
    static readonly int ConvertToSpawnable_ParamsSize;
    static readonly int ConvertToSpawnable_ObjectBinding_Offset;
    static readonly int ConvertToSpawnable_ReturnValue_Offset;
    static readonly int ConvertToSpawnable_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> ConvertToSpawnable(UnrealSharp.MovieScene.MovieSceneBindingProxy objectBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertToSpawnable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConvertToSpawnable_ObjectBinding_Offset), 0, null, objectBinding);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConvertToSpawnable_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, ConvertToSpawnable_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> (1, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative, ConvertToSpawnable_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:ConvertToPossessable
    static readonly IntPtr ConvertToPossessable_NativeFunction;
    static readonly int ConvertToPossessable_ParamsSize;
    static readonly int ConvertToPossessable_ObjectBinding_Offset;
    static readonly int ConvertToPossessable_ReturnValue_Offset;
    
    public UnrealSharp.MovieScene.MovieSceneBindingProxy ConvertToPossessable(UnrealSharp.MovieScene.MovieSceneBindingProxy objectBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConvertToPossessable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, ConvertToPossessable_ObjectBinding_Offset), 0, null, objectBinding);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConvertToPossessable_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MovieScene.MovieSceneBindingProxy returnValue;
            returnValue = UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative(IntPtr.Add(ParamsBuffer, ConvertToPossessable_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:BakeTransformWithSettings
    static readonly IntPtr BakeTransformWithSettings_NativeFunction;
    static readonly int BakeTransformWithSettings_ParamsSize;
    static readonly int BakeTransformWithSettings_ObjectBindings_Offset;
    static readonly int BakeTransformWithSettings_ObjectBindings_ElementSize;
    static readonly int BakeTransformWithSettings_InSettings_Offset;
    static readonly int BakeTransformWithSettings_Params_Offset;
    static readonly int BakeTransformWithSettings_ReturnValue_Offset;
    
    public bool BakeTransformWithSettings(System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> objectBindings, UnrealSharp.MovieSceneTools.BakingAnimationKeySettings inSettings)
    {
        return BakeTransformWithSettings(objectBindings, inSettings, new MovieSceneScriptingParams());
    }
    
    public bool BakeTransformWithSettings(System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> objectBindings, UnrealSharp.MovieSceneTools.BakingAnimationKeySettings inSettings, UnrealSharp.LevelSequenceEditor.MovieSceneScriptingParams @params)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BakeTransformWithSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ObjectBindings_NativeBuffer = IntPtr.Add(ParamsBuffer, BakeTransformWithSettings_ObjectBindings_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> ObjectBindings_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy>(1, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative, BakeTransformWithSettings_ObjectBindings_ElementSize);
            ObjectBindings_Marshaler.ToNative(ObjectBindings_NativeBuffer, 0, null, objectBindings);
            UnrealSharp.MovieSceneTools.BakingAnimationKeySettingsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, BakeTransformWithSettings_InSettings_Offset), 0, null, inSettings);
            BlittableMarshaller<UnrealSharp.LevelSequenceEditor.MovieSceneScriptingParams>.ToNative(IntPtr.Add(ParamsBuffer, BakeTransformWithSettings_Params_Offset), 0, null, @params);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BakeTransformWithSettings_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BakeTransformWithSettings_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:BakeTransform
    static readonly IntPtr BakeTransform_NativeFunction;
    static readonly int BakeTransform_ParamsSize;
    static readonly int BakeTransform_ObjectBindings_Offset;
    static readonly int BakeTransform_ObjectBindings_ElementSize;
    static readonly int BakeTransform_BakeInTime_Offset;
    static readonly int BakeTransform_BakeOutTime_Offset;
    static readonly int BakeTransform_BakeInterval_Offset;
    static readonly int BakeTransform_Params_Offset;
    
    public void BakeTransform(System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> objectBindings, UnrealSharp.CoreUObject.FrameTime bakeInTime, UnrealSharp.CoreUObject.FrameTime bakeOutTime, UnrealSharp.CoreUObject.FrameTime bakeInterval)
    {
        BakeTransform(objectBindings, bakeInTime, bakeOutTime, bakeInterval, new MovieSceneScriptingParams());
    }
    
    public void BakeTransform(System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> objectBindings, UnrealSharp.CoreUObject.FrameTime bakeInTime, UnrealSharp.CoreUObject.FrameTime bakeOutTime, UnrealSharp.CoreUObject.FrameTime bakeInterval, UnrealSharp.LevelSequenceEditor.MovieSceneScriptingParams @params)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BakeTransform_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr ObjectBindings_NativeBuffer = IntPtr.Add(ParamsBuffer, BakeTransform_ObjectBindings_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> ObjectBindings_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy>(1, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative, BakeTransform_ObjectBindings_ElementSize);
            ObjectBindings_Marshaler.ToNative(ObjectBindings_NativeBuffer, 0, null, objectBindings);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameTime>.ToNative(IntPtr.Add(ParamsBuffer, BakeTransform_BakeInTime_Offset), 0, null, bakeInTime);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameTime>.ToNative(IntPtr.Add(ParamsBuffer, BakeTransform_BakeOutTime_Offset), 0, null, bakeOutTime);
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameTime>.ToNative(IntPtr.Add(ParamsBuffer, BakeTransform_BakeInterval_Offset), 0, null, bakeInterval);
            BlittableMarshaller<UnrealSharp.LevelSequenceEditor.MovieSceneScriptingParams>.ToNative(IntPtr.Add(ParamsBuffer, BakeTransform_Params_Offset), 0, null, @params);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BakeTransform_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:AddActorsToBinding
    static readonly IntPtr AddActorsToBinding_NativeFunction;
    static readonly int AddActorsToBinding_ParamsSize;
    static readonly int AddActorsToBinding_Actors_Offset;
    static readonly int AddActorsToBinding_Actors_ElementSize;
    static readonly int AddActorsToBinding_ObjectBinding_Offset;
    
    public void AddActorsToBinding(System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actors, UnrealSharp.MovieScene.MovieSceneBindingProxy objectBinding)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddActorsToBinding_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Actors_NativeBuffer = IntPtr.Add(ParamsBuffer, AddActorsToBinding_Actors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> Actors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, AddActorsToBinding_Actors_ElementSize);
            Actors_Marshaler.ToNative(Actors_NativeBuffer, 0, null, actors);
            UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative(IntPtr.Add(ParamsBuffer, AddActorsToBinding_ObjectBinding_Offset), 0, null, objectBinding);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddActorsToBinding_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/LevelSequenceEditor.LevelSequenceEditorSubsystem:AddActors
    static readonly IntPtr AddActors_NativeFunction;
    static readonly int AddActors_ParamsSize;
    static readonly int AddActors_Actors_Offset;
    static readonly int AddActors_Actors_ElementSize;
    static readonly int AddActors_ReturnValue_Offset;
    static readonly int AddActors_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> AddActors(System.Collections.Generic.IList<UnrealSharp.Engine.Actor> actors)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AddActors_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Actors_NativeBuffer = IntPtr.Add(ParamsBuffer, AddActors_Actors_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor> Actors_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Actor>(1, ObjectMarshaller<UnrealSharp.Engine.Actor>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Actor>.FromNative, AddActors_Actors_ElementSize);
            Actors_Marshaler.ToNative(Actors_NativeBuffer, 0, null, actors);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, AddActors_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MovieScene.MovieSceneBindingProxy> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, AddActors_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy> (1, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.ToNative, UnrealSharp.MovieScene.MovieSceneBindingProxyMarshaler.FromNative, AddActors_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MovieScene.MovieSceneBindingProxy>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    
}
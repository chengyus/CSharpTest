// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.LocationServicesBPLibrary;

[UClass]
public partial class LocationServices : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static LocationServices()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("LocationServices");
        
        
        StopLocationServices_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StopLocationServices");
        StopLocationServices_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StopLocationServices_NativeFunction);
        StopLocationServices_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StopLocationServices_NativeFunction, "ReturnValue");
        StartLocationServices_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "StartLocationServices");
        StartLocationServices_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(StartLocationServices_NativeFunction);
        StartLocationServices_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(StartLocationServices_NativeFunction, "ReturnValue");
        IsLocationAccuracyAvailable_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsLocationAccuracyAvailable");
        IsLocationAccuracyAvailable_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsLocationAccuracyAvailable_NativeFunction);
        IsLocationAccuracyAvailable_Accuracy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLocationAccuracyAvailable_NativeFunction, "Accuracy");
        IsLocationAccuracyAvailable_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLocationAccuracyAvailable_NativeFunction, "ReturnValue");
        InitLocationServices_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "InitLocationServices");
        InitLocationServices_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(InitLocationServices_NativeFunction);
        InitLocationServices_Accuracy_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InitLocationServices_NativeFunction, "Accuracy");
        InitLocationServices_UpdateFrequency_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InitLocationServices_NativeFunction, "UpdateFrequency");
        InitLocationServices_MinDistanceFilter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InitLocationServices_NativeFunction, "MinDistanceFilter");
        InitLocationServices_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(InitLocationServices_NativeFunction, "ReturnValue");
        GetLocationServicesImpl_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLocationServicesImpl");
        GetLocationServicesImpl_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLocationServicesImpl_NativeFunction);
        GetLocationServicesImpl_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLocationServicesImpl_NativeFunction, "ReturnValue");
        GetLastKnownLocation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetLastKnownLocation");
        GetLastKnownLocation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetLastKnownLocation_NativeFunction);
        GetLastKnownLocation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetLastKnownLocation_NativeFunction, "ReturnValue");
        AreLocationServicesEnabled_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "AreLocationServicesEnabled");
        AreLocationServicesEnabled_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(AreLocationServicesEnabled_NativeFunction);
        AreLocationServicesEnabled_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(AreLocationServicesEnabled_NativeFunction, "ReturnValue");
        
        
    }
    
    protected LocationServices(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/LocationServicesBPLibrary.LocationServices:StopLocationServices
    static readonly IntPtr StopLocationServices_NativeFunction;
    static readonly int StopLocationServices_ParamsSize;
    static readonly int StopLocationServices_ReturnValue_Offset;
    
    public static bool StopLocationServices()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StopLocationServices_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, StopLocationServices_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, StopLocationServices_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/LocationServicesBPLibrary.LocationServices:StartLocationServices
    static readonly IntPtr StartLocationServices_NativeFunction;
    static readonly int StartLocationServices_ParamsSize;
    static readonly int StartLocationServices_ReturnValue_Offset;
    
    public static bool StartLocationServices()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[StartLocationServices_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, StartLocationServices_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, StartLocationServices_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/LocationServicesBPLibrary.LocationServices:IsLocationAccuracyAvailable
    static readonly IntPtr IsLocationAccuracyAvailable_NativeFunction;
    static readonly int IsLocationAccuracyAvailable_ParamsSize;
    static readonly int IsLocationAccuracyAvailable_Accuracy_Offset;
    static readonly int IsLocationAccuracyAvailable_ReturnValue_Offset;
    
    public static bool IsLocationAccuracyAvailable(UnrealSharp.LocationServicesBPLibrary.ELocationAccuracy accuracy)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsLocationAccuracyAvailable_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.LocationServicesBPLibrary.ELocationAccuracy>.ToNative(IntPtr.Add(ParamsBuffer, IsLocationAccuracyAvailable_Accuracy_Offset), 0, null, accuracy);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, IsLocationAccuracyAvailable_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsLocationAccuracyAvailable_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/LocationServicesBPLibrary.LocationServices:InitLocationServices
    static readonly IntPtr InitLocationServices_NativeFunction;
    static readonly int InitLocationServices_ParamsSize;
    static readonly int InitLocationServices_Accuracy_Offset;
    static readonly int InitLocationServices_UpdateFrequency_Offset;
    static readonly int InitLocationServices_MinDistanceFilter_Offset;
    static readonly int InitLocationServices_ReturnValue_Offset;
    
    public static bool InitLocationServices(UnrealSharp.LocationServicesBPLibrary.ELocationAccuracy accuracy, float updateFrequency, float minDistanceFilter)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[InitLocationServices_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.LocationServicesBPLibrary.ELocationAccuracy>.ToNative(IntPtr.Add(ParamsBuffer, InitLocationServices_Accuracy_Offset), 0, null, accuracy);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, InitLocationServices_UpdateFrequency_Offset), 0, null, updateFrequency);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, InitLocationServices_MinDistanceFilter_Offset), 0, null, minDistanceFilter);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, InitLocationServices_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, InitLocationServices_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/LocationServicesBPLibrary.LocationServices:GetLocationServicesImpl
    static readonly IntPtr GetLocationServicesImpl_NativeFunction;
    static readonly int GetLocationServicesImpl_ParamsSize;
    static readonly int GetLocationServicesImpl_ReturnValue_Offset;
    
    public static UnrealSharp.LocationServicesBPLibrary.LocationServicesImpl GetLocationServicesImpl()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLocationServicesImpl_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLocationServicesImpl_NativeFunction, ParamsBuffer);
            
            UnrealSharp.LocationServicesBPLibrary.LocationServicesImpl returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.LocationServicesBPLibrary.LocationServicesImpl>.FromNative(IntPtr.Add(ParamsBuffer, GetLocationServicesImpl_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/LocationServicesBPLibrary.LocationServices:GetLastKnownLocation
    static readonly IntPtr GetLastKnownLocation_NativeFunction;
    static readonly int GetLastKnownLocation_ParamsSize;
    static readonly int GetLastKnownLocation_ReturnValue_Offset;
    
    public static UnrealSharp.LocationServicesBPLibrary.LocationServicesData GetLastKnownLocation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetLastKnownLocation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetLastKnownLocation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.LocationServicesBPLibrary.LocationServicesData returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.LocationServicesBPLibrary.LocationServicesData>.FromNative(IntPtr.Add(ParamsBuffer, GetLastKnownLocation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/LocationServicesBPLibrary.LocationServices:AreLocationServicesEnabled
    static readonly IntPtr AreLocationServicesEnabled_NativeFunction;
    static readonly int AreLocationServicesEnabled_ParamsSize;
    static readonly int AreLocationServicesEnabled_ReturnValue_Offset;
    
    public static bool AreLocationServicesEnabled()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[AreLocationServicesEnabled_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, AreLocationServicesEnabled_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, AreLocationServicesEnabled_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
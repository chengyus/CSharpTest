// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.MRMesh;

[UClass]
public partial class MockDataMeshTrackerComponent : UnrealSharp.Engine.SceneComponent
{
    
    static MockDataMeshTrackerComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MockDataMeshTrackerComponent");
        
        ScanWorld_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ScanWorld");
        RequestNormals_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RequestNormals");
        RequestVertexConfidence_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "RequestVertexConfidence");
        VertexColorMode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VertexColorMode");
        BlockVertexColors_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "BlockVertexColors");
        BlockVertexColors_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "BlockVertexColors");
        VertexColorFromConfidenceZero_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VertexColorFromConfidenceZero");
        VertexColorFromConfidenceOne_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "VertexColorFromConfidenceOne");
        UpdateInterval_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "UpdateInterval");
        
        DisconnectMRMesh_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DisconnectMRMesh");
        DisconnectMRMesh_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DisconnectMRMesh_NativeFunction);
        DisconnectMRMesh_InMRMeshPtr_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DisconnectMRMesh_NativeFunction, "InMRMeshPtr");
        ConnectMRMesh_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectMRMesh");
        ConnectMRMesh_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectMRMesh_NativeFunction);
        ConnectMRMesh_InMRMeshPtr_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectMRMesh_NativeFunction, "InMRMeshPtr");
        
        
    }
    
    protected MockDataMeshTrackerComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // BoolProperty /Script/MRMesh.MockDataMeshTrackerComponent:ScanWorld
    static readonly int ScanWorld_Offset;
    
    public bool ScanWorld
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, ScanWorld_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, ScanWorld_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/MRMesh.MockDataMeshTrackerComponent:RequestNormals
    static readonly int RequestNormals_Offset;
    
    public bool RequestNormals
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, RequestNormals_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, RequestNormals_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/MRMesh.MockDataMeshTrackerComponent:RequestVertexConfidence
    static readonly int RequestVertexConfidence_Offset;
    
    public bool RequestVertexConfidence
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, RequestVertexConfidence_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, RequestVertexConfidence_Offset), 0, this, value);
        }
    }
    
    // EnumProperty /Script/MRMesh.MockDataMeshTrackerComponent:VertexColorMode
    static readonly int VertexColorMode_Offset;
    
    public UnrealSharp.MRMesh.EMeshTrackerVertexColorMode VertexColorMode
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.MRMesh.EMeshTrackerVertexColorMode>.FromNative(IntPtr.Add(NativeObject, VertexColorMode_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.MRMesh.EMeshTrackerVertexColorMode>.ToNative(IntPtr.Add(NativeObject, VertexColorMode_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/MRMesh.MockDataMeshTrackerComponent:BlockVertexColors
    static readonly int BlockVertexColors_Offset;
    static readonly IntPtr BlockVertexColors_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.CoreUObject.Color> BlockVertexColors_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.CoreUObject.Color> BlockVertexColors
    {
        get
        {
            if(BlockVertexColors_Wrapper == null)
            {
                BlockVertexColors_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.CoreUObject.Color>(1, BlockVertexColors_NativeProperty, BlittableMarshaller<UnrealSharp.CoreUObject.Color>.ToNative, BlittableMarshaller<UnrealSharp.CoreUObject.Color>.FromNative);
            }
            
            return BlockVertexColors_Wrapper.FromNative(IntPtr.Add(NativeObject,BlockVertexColors_Offset),0,this);
        }
    }
    
    // StructProperty /Script/MRMesh.MockDataMeshTrackerComponent:VertexColorFromConfidenceZero
    static readonly int VertexColorFromConfidenceZero_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor VertexColorFromConfidenceZero
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, VertexColorFromConfidenceZero_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(NativeObject, VertexColorFromConfidenceZero_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/MRMesh.MockDataMeshTrackerComponent:VertexColorFromConfidenceOne
    static readonly int VertexColorFromConfidenceOne_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor VertexColorFromConfidenceOne
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, VertexColorFromConfidenceOne_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(NativeObject, VertexColorFromConfidenceOne_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/MRMesh.MockDataMeshTrackerComponent:UpdateInterval
    static readonly int UpdateInterval_Offset;
    
    public float UpdateInterval
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, UpdateInterval_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<float>.ToNative(IntPtr.Add(NativeObject, UpdateInterval_Offset), 0, this, value);
        }
    }
    
    // Function /Script/MRMesh.MockDataMeshTrackerComponent:DisconnectMRMesh
    static readonly IntPtr DisconnectMRMesh_NativeFunction;
    static readonly int DisconnectMRMesh_ParamsSize;
    static readonly int DisconnectMRMesh_InMRMeshPtr_Offset;
    
    public void DisconnectMRMesh(UnrealSharp.MRMesh.MRMeshComponent inMRMeshPtr)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DisconnectMRMesh_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MRMesh.MRMeshComponent>.ToNative(IntPtr.Add(ParamsBuffer, DisconnectMRMesh_InMRMeshPtr_Offset), 0, null, inMRMeshPtr);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, DisconnectMRMesh_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MRMesh.MockDataMeshTrackerComponent:ConnectMRMesh
    static readonly IntPtr ConnectMRMesh_NativeFunction;
    static readonly int ConnectMRMesh_ParamsSize;
    static readonly int ConnectMRMesh_InMRMeshPtr_Offset;
    
    public void ConnectMRMesh(UnrealSharp.MRMesh.MRMeshComponent inMRMeshPtr)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectMRMesh_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MRMesh.MRMeshComponent>.ToNative(IntPtr.Add(ParamsBuffer, ConnectMRMesh_InMRMeshPtr_Offset), 0, null, inMRMeshPtr);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, ConnectMRMesh_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
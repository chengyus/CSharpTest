// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.MaterialBaking;

[UClass]
public partial class MaterialOptions : UnrealSharp.CoreUObject.Object
{
    
    static MaterialOptions()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MaterialOptions");
        
        Properties_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Properties");
        Properties_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Properties");
        TextureSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TextureSize");
        LODIndices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "LODIndices");
        LODIndices_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "LODIndices");
        bUseMeshData_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseMeshData");
        bUseSpecificUVIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseSpecificUVIndex");
        TextureCoordinateIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TextureCoordinateIndex");
        
        
        
    }
    
    protected MaterialOptions(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ArrayProperty /Script/MaterialBaking.MaterialOptions:Properties
    static readonly int Properties_Offset;
    static readonly IntPtr Properties_NativeProperty;
    UnrealArrayReadWriteMarshaler<UnrealSharp.MaterialBaking.PropertyEntry> Properties_Wrapper = null;
    
    public System.Collections.Generic.IList<UnrealSharp.MaterialBaking.PropertyEntry> Properties
    {
        get
        {
            if(Properties_Wrapper == null)
            {
                Properties_Wrapper = new UnrealArrayReadWriteMarshaler<UnrealSharp.MaterialBaking.PropertyEntry>(1, Properties_NativeProperty, UnrealSharp.MaterialBaking.PropertyEntryMarshaler.ToNative, UnrealSharp.MaterialBaking.PropertyEntryMarshaler.FromNative);
            }
            
            return Properties_Wrapper.FromNative(IntPtr.Add(NativeObject,Properties_Offset),0,this);
        }
    }
    
    // StructProperty /Script/MaterialBaking.MaterialOptions:TextureSize
    static readonly int TextureSize_Offset;
    
    public UnrealSharp.CoreUObject.IntPoint TextureSize
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative(IntPtr.Add(NativeObject, TextureSize_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.ToNative(IntPtr.Add(NativeObject, TextureSize_Offset), 0, this, value);
        }
    }
    
    // ArrayProperty /Script/MaterialBaking.MaterialOptions:LODIndices
    static readonly int LODIndices_Offset;
    static readonly IntPtr LODIndices_NativeProperty;
    UnrealArrayReadWriteMarshaler<int> LODIndices_Wrapper = null;
    
    public System.Collections.Generic.IList<int> LODIndices
    {
        get
        {
            if(LODIndices_Wrapper == null)
            {
                LODIndices_Wrapper = new UnrealArrayReadWriteMarshaler<int>(1, LODIndices_NativeProperty, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative);
            }
            
            return LODIndices_Wrapper.FromNative(IntPtr.Add(NativeObject,LODIndices_Offset),0,this);
        }
    }
    
    // BoolProperty /Script/MaterialBaking.MaterialOptions:bUseMeshData
    static readonly int bUseMeshData_Offset;
    
    public bool bUseMeshData
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseMeshData_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bUseMeshData_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/MaterialBaking.MaterialOptions:bUseSpecificUVIndex
    static readonly int bUseSpecificUVIndex_Offset;
    
    public bool bUseSpecificUVIndex
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseSpecificUVIndex_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bUseSpecificUVIndex_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/MaterialBaking.MaterialOptions:TextureCoordinateIndex
    static readonly int TextureCoordinateIndex_Offset;
    
    public int TextureCoordinateIndex
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, TextureCoordinateIndex_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, TextureCoordinateIndex_Offset), 0, this, value);
        }
    }
    
    
}
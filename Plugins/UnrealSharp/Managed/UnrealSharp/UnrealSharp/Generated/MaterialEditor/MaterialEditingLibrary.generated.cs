// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.MaterialEditor;

[UClass]
public partial class MaterialEditingLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static MaterialEditingLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MaterialEditingLibrary");
        
        
        UpdateMaterialInstance_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UpdateMaterialInstance");
        UpdateMaterialInstance_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UpdateMaterialInstance_NativeFunction);
        UpdateMaterialInstance_Instance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateMaterialInstance_NativeFunction, "Instance");
        UpdateMaterialFunction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UpdateMaterialFunction");
        UpdateMaterialFunction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(UpdateMaterialFunction_NativeFunction);
        UpdateMaterialFunction_MaterialFunction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateMaterialFunction_NativeFunction, "MaterialFunction");
        UpdateMaterialFunction_PreviewMaterial_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(UpdateMaterialFunction_NativeFunction, "PreviewMaterial");
        SetMaterialUsage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMaterialUsage");
        SetMaterialUsage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMaterialUsage_NativeFunction);
        SetMaterialUsage_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialUsage_NativeFunction, "Material");
        SetMaterialUsage_Usage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialUsage_NativeFunction, "Usage");
        SetMaterialUsage_bNeedsRecompile_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialUsage_NativeFunction, "bNeedsRecompile");
        SetMaterialUsage_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialUsage_NativeFunction, "ReturnValue");
        SetMaterialInstanceVectorParameterValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMaterialInstanceVectorParameterValue");
        SetMaterialInstanceVectorParameterValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMaterialInstanceVectorParameterValue_NativeFunction);
        SetMaterialInstanceVectorParameterValue_Instance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceVectorParameterValue_NativeFunction, "Instance");
        SetMaterialInstanceVectorParameterValue_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceVectorParameterValue_NativeFunction, "ParameterName");
        SetMaterialInstanceVectorParameterValue_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceVectorParameterValue_NativeFunction, "Value");
        SetMaterialInstanceVectorParameterValue_Association_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceVectorParameterValue_NativeFunction, "Association");
        SetMaterialInstanceVectorParameterValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceVectorParameterValue_NativeFunction, "ReturnValue");
        SetMaterialInstanceTextureParameterValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMaterialInstanceTextureParameterValue");
        SetMaterialInstanceTextureParameterValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMaterialInstanceTextureParameterValue_NativeFunction);
        SetMaterialInstanceTextureParameterValue_Instance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceTextureParameterValue_NativeFunction, "Instance");
        SetMaterialInstanceTextureParameterValue_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceTextureParameterValue_NativeFunction, "ParameterName");
        SetMaterialInstanceTextureParameterValue_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceTextureParameterValue_NativeFunction, "Value");
        SetMaterialInstanceTextureParameterValue_Association_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceTextureParameterValue_NativeFunction, "Association");
        SetMaterialInstanceTextureParameterValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceTextureParameterValue_NativeFunction, "ReturnValue");
        SetMaterialInstanceStaticSwitchParameterValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMaterialInstanceStaticSwitchParameterValue");
        SetMaterialInstanceStaticSwitchParameterValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMaterialInstanceStaticSwitchParameterValue_NativeFunction);
        SetMaterialInstanceStaticSwitchParameterValue_Instance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceStaticSwitchParameterValue_NativeFunction, "Instance");
        SetMaterialInstanceStaticSwitchParameterValue_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceStaticSwitchParameterValue_NativeFunction, "ParameterName");
        SetMaterialInstanceStaticSwitchParameterValue_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceStaticSwitchParameterValue_NativeFunction, "Value");
        SetMaterialInstanceStaticSwitchParameterValue_Association_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceStaticSwitchParameterValue_NativeFunction, "Association");
        SetMaterialInstanceStaticSwitchParameterValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceStaticSwitchParameterValue_NativeFunction, "ReturnValue");
        SetMaterialInstanceSparseVolumeTextureParameterValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMaterialInstanceSparseVolumeTextureParameterValue");
        SetMaterialInstanceSparseVolumeTextureParameterValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMaterialInstanceSparseVolumeTextureParameterValue_NativeFunction);
        SetMaterialInstanceSparseVolumeTextureParameterValue_Instance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceSparseVolumeTextureParameterValue_NativeFunction, "Instance");
        SetMaterialInstanceSparseVolumeTextureParameterValue_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceSparseVolumeTextureParameterValue_NativeFunction, "ParameterName");
        SetMaterialInstanceSparseVolumeTextureParameterValue_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceSparseVolumeTextureParameterValue_NativeFunction, "Value");
        SetMaterialInstanceSparseVolumeTextureParameterValue_Association_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceSparseVolumeTextureParameterValue_NativeFunction, "Association");
        SetMaterialInstanceSparseVolumeTextureParameterValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceSparseVolumeTextureParameterValue_NativeFunction, "ReturnValue");
        SetMaterialInstanceScalarParameterValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMaterialInstanceScalarParameterValue");
        SetMaterialInstanceScalarParameterValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMaterialInstanceScalarParameterValue_NativeFunction);
        SetMaterialInstanceScalarParameterValue_Instance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceScalarParameterValue_NativeFunction, "Instance");
        SetMaterialInstanceScalarParameterValue_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceScalarParameterValue_NativeFunction, "ParameterName");
        SetMaterialInstanceScalarParameterValue_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceScalarParameterValue_NativeFunction, "Value");
        SetMaterialInstanceScalarParameterValue_Association_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceScalarParameterValue_NativeFunction, "Association");
        SetMaterialInstanceScalarParameterValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceScalarParameterValue_NativeFunction, "ReturnValue");
        SetMaterialInstanceRuntimeVirtualTextureParameterValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMaterialInstanceRuntimeVirtualTextureParameterValue");
        SetMaterialInstanceRuntimeVirtualTextureParameterValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMaterialInstanceRuntimeVirtualTextureParameterValue_NativeFunction);
        SetMaterialInstanceRuntimeVirtualTextureParameterValue_Instance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceRuntimeVirtualTextureParameterValue_NativeFunction, "Instance");
        SetMaterialInstanceRuntimeVirtualTextureParameterValue_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceRuntimeVirtualTextureParameterValue_NativeFunction, "ParameterName");
        SetMaterialInstanceRuntimeVirtualTextureParameterValue_Value_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceRuntimeVirtualTextureParameterValue_NativeFunction, "Value");
        SetMaterialInstanceRuntimeVirtualTextureParameterValue_Association_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceRuntimeVirtualTextureParameterValue_NativeFunction, "Association");
        SetMaterialInstanceRuntimeVirtualTextureParameterValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceRuntimeVirtualTextureParameterValue_NativeFunction, "ReturnValue");
        SetMaterialInstanceParent_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMaterialInstanceParent");
        SetMaterialInstanceParent_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMaterialInstanceParent_NativeFunction);
        SetMaterialInstanceParent_Instance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceParent_NativeFunction, "Instance");
        SetMaterialInstanceParent_NewParent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMaterialInstanceParent_NativeFunction, "NewParent");
        RecompileMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "RecompileMaterial");
        RecompileMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(RecompileMaterial_NativeFunction);
        RecompileMaterial_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(RecompileMaterial_NativeFunction, "Material");
        LayoutMaterialFunctionExpressions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LayoutMaterialFunctionExpressions");
        LayoutMaterialFunctionExpressions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LayoutMaterialFunctionExpressions_NativeFunction);
        LayoutMaterialFunctionExpressions_MaterialFunction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LayoutMaterialFunctionExpressions_NativeFunction, "MaterialFunction");
        LayoutMaterialExpressions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "LayoutMaterialExpressions");
        LayoutMaterialExpressions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(LayoutMaterialExpressions_NativeFunction);
        LayoutMaterialExpressions_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(LayoutMaterialExpressions_NativeFunction, "Material");
        HasMaterialUsage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasMaterialUsage");
        HasMaterialUsage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasMaterialUsage_NativeFunction);
        HasMaterialUsage_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasMaterialUsage_NativeFunction, "Material");
        HasMaterialUsage_Usage_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasMaterialUsage_NativeFunction, "Usage");
        HasMaterialUsage_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasMaterialUsage_NativeFunction, "ReturnValue");
        GetVectorParameterSource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVectorParameterSource");
        GetVectorParameterSource_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVectorParameterSource_NativeFunction);
        GetVectorParameterSource_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorParameterSource_NativeFunction, "Material");
        GetVectorParameterSource_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorParameterSource_NativeFunction, "ParameterName");
        GetVectorParameterSource_ParameterSource_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorParameterSource_NativeFunction, "ParameterSource");
        GetVectorParameterSource_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorParameterSource_NativeFunction, "ReturnValue");
        GetVectorParameterNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVectorParameterNames");
        GetVectorParameterNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVectorParameterNames_NativeFunction);
        GetVectorParameterNames_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorParameterNames_NativeFunction, "Material");
        GetVectorParameterNames_ParameterNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVectorParameterNames_NativeFunction, "ParameterNames");
        GetVectorParameterNames_ParameterNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetVectorParameterNames_NativeFunction, "ParameterNames");
        GetUsedTextures_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetUsedTextures");
        GetUsedTextures_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetUsedTextures_NativeFunction);
        GetUsedTextures_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUsedTextures_NativeFunction, "Material");
        GetUsedTextures_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUsedTextures_NativeFunction, "ReturnValue");
        GetUsedTextures_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetUsedTextures_NativeFunction, "ReturnValue");
        GetTextureParameterSource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTextureParameterSource");
        GetTextureParameterSource_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTextureParameterSource_NativeFunction);
        GetTextureParameterSource_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTextureParameterSource_NativeFunction, "Material");
        GetTextureParameterSource_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTextureParameterSource_NativeFunction, "ParameterName");
        GetTextureParameterSource_ParameterSource_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTextureParameterSource_NativeFunction, "ParameterSource");
        GetTextureParameterSource_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTextureParameterSource_NativeFunction, "ReturnValue");
        GetTextureParameterNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTextureParameterNames");
        GetTextureParameterNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTextureParameterNames_NativeFunction);
        GetTextureParameterNames_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTextureParameterNames_NativeFunction, "Material");
        GetTextureParameterNames_ParameterNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTextureParameterNames_NativeFunction, "ParameterNames");
        GetTextureParameterNames_ParameterNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetTextureParameterNames_NativeFunction, "ParameterNames");
        GetStatistics_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStatistics");
        GetStatistics_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStatistics_NativeFunction);
        GetStatistics_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStatistics_NativeFunction, "Material");
        GetStatistics_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStatistics_NativeFunction, "ReturnValue");
        GetStaticSwitchParameterSource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStaticSwitchParameterSource");
        GetStaticSwitchParameterSource_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStaticSwitchParameterSource_NativeFunction);
        GetStaticSwitchParameterSource_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStaticSwitchParameterSource_NativeFunction, "Material");
        GetStaticSwitchParameterSource_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStaticSwitchParameterSource_NativeFunction, "ParameterName");
        GetStaticSwitchParameterSource_ParameterSource_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStaticSwitchParameterSource_NativeFunction, "ParameterSource");
        GetStaticSwitchParameterSource_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStaticSwitchParameterSource_NativeFunction, "ReturnValue");
        GetStaticSwitchParameterNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetStaticSwitchParameterNames");
        GetStaticSwitchParameterNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetStaticSwitchParameterNames_NativeFunction);
        GetStaticSwitchParameterNames_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStaticSwitchParameterNames_NativeFunction, "Material");
        GetStaticSwitchParameterNames_ParameterNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetStaticSwitchParameterNames_NativeFunction, "ParameterNames");
        GetStaticSwitchParameterNames_ParameterNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetStaticSwitchParameterNames_NativeFunction, "ParameterNames");
        GetScalarParameterSource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetScalarParameterSource");
        GetScalarParameterSource_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetScalarParameterSource_NativeFunction);
        GetScalarParameterSource_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScalarParameterSource_NativeFunction, "Material");
        GetScalarParameterSource_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScalarParameterSource_NativeFunction, "ParameterName");
        GetScalarParameterSource_ParameterSource_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScalarParameterSource_NativeFunction, "ParameterSource");
        GetScalarParameterSource_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScalarParameterSource_NativeFunction, "ReturnValue");
        GetScalarParameterNames_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetScalarParameterNames");
        GetScalarParameterNames_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetScalarParameterNames_NativeFunction);
        GetScalarParameterNames_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScalarParameterNames_NativeFunction, "Material");
        GetScalarParameterNames_ParameterNames_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetScalarParameterNames_NativeFunction, "ParameterNames");
        GetScalarParameterNames_ParameterNames_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetScalarParameterNames_NativeFunction, "ParameterNames");
        GetNumMaterialExpressionsInFunction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumMaterialExpressionsInFunction");
        GetNumMaterialExpressionsInFunction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumMaterialExpressionsInFunction_NativeFunction);
        GetNumMaterialExpressionsInFunction_MaterialFunction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumMaterialExpressionsInFunction_NativeFunction, "MaterialFunction");
        GetNumMaterialExpressionsInFunction_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumMaterialExpressionsInFunction_NativeFunction, "ReturnValue");
        GetNumMaterialExpressions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumMaterialExpressions");
        GetNumMaterialExpressions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumMaterialExpressions_NativeFunction);
        GetNumMaterialExpressions_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumMaterialExpressions_NativeFunction, "Material");
        GetNumMaterialExpressions_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumMaterialExpressions_NativeFunction, "ReturnValue");
        GetNaniteOverrideMaterial_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNaniteOverrideMaterial");
        GetNaniteOverrideMaterial_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNaniteOverrideMaterial_NativeFunction);
        GetNaniteOverrideMaterial_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNaniteOverrideMaterial_NativeFunction, "Material");
        GetNaniteOverrideMaterial_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNaniteOverrideMaterial_NativeFunction, "ReturnValue");
        GetMaterialPropertyInputNodeOutputName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaterialPropertyInputNodeOutputName");
        GetMaterialPropertyInputNodeOutputName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaterialPropertyInputNodeOutputName_NativeFunction);
        GetMaterialPropertyInputNodeOutputName_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialPropertyInputNodeOutputName_NativeFunction, "Material");
        GetMaterialPropertyInputNodeOutputName_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialPropertyInputNodeOutputName_NativeFunction, "Property");
        GetMaterialPropertyInputNodeOutputName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialPropertyInputNodeOutputName_NativeFunction, "ReturnValue");
        GetMaterialPropertyInputNode_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaterialPropertyInputNode");
        GetMaterialPropertyInputNode_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaterialPropertyInputNode_NativeFunction);
        GetMaterialPropertyInputNode_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialPropertyInputNode_NativeFunction, "Material");
        GetMaterialPropertyInputNode_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialPropertyInputNode_NativeFunction, "Property");
        GetMaterialPropertyInputNode_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialPropertyInputNode_NativeFunction, "ReturnValue");
        GetMaterialInstanceVectorParameterValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaterialInstanceVectorParameterValue");
        GetMaterialInstanceVectorParameterValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaterialInstanceVectorParameterValue_NativeFunction);
        GetMaterialInstanceVectorParameterValue_Instance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceVectorParameterValue_NativeFunction, "Instance");
        GetMaterialInstanceVectorParameterValue_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceVectorParameterValue_NativeFunction, "ParameterName");
        GetMaterialInstanceVectorParameterValue_Association_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceVectorParameterValue_NativeFunction, "Association");
        GetMaterialInstanceVectorParameterValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceVectorParameterValue_NativeFunction, "ReturnValue");
        GetMaterialInstanceTextureParameterValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaterialInstanceTextureParameterValue");
        GetMaterialInstanceTextureParameterValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaterialInstanceTextureParameterValue_NativeFunction);
        GetMaterialInstanceTextureParameterValue_Instance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceTextureParameterValue_NativeFunction, "Instance");
        GetMaterialInstanceTextureParameterValue_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceTextureParameterValue_NativeFunction, "ParameterName");
        GetMaterialInstanceTextureParameterValue_Association_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceTextureParameterValue_NativeFunction, "Association");
        GetMaterialInstanceTextureParameterValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceTextureParameterValue_NativeFunction, "ReturnValue");
        GetMaterialInstanceStaticSwitchParameterValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaterialInstanceStaticSwitchParameterValue");
        GetMaterialInstanceStaticSwitchParameterValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaterialInstanceStaticSwitchParameterValue_NativeFunction);
        GetMaterialInstanceStaticSwitchParameterValue_Instance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceStaticSwitchParameterValue_NativeFunction, "Instance");
        GetMaterialInstanceStaticSwitchParameterValue_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceStaticSwitchParameterValue_NativeFunction, "ParameterName");
        GetMaterialInstanceStaticSwitchParameterValue_Association_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceStaticSwitchParameterValue_NativeFunction, "Association");
        GetMaterialInstanceStaticSwitchParameterValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceStaticSwitchParameterValue_NativeFunction, "ReturnValue");
        GetMaterialInstanceSparseVolumeTextureParameterValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaterialInstanceSparseVolumeTextureParameterValue");
        GetMaterialInstanceSparseVolumeTextureParameterValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaterialInstanceSparseVolumeTextureParameterValue_NativeFunction);
        GetMaterialInstanceSparseVolumeTextureParameterValue_Instance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceSparseVolumeTextureParameterValue_NativeFunction, "Instance");
        GetMaterialInstanceSparseVolumeTextureParameterValue_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceSparseVolumeTextureParameterValue_NativeFunction, "ParameterName");
        GetMaterialInstanceSparseVolumeTextureParameterValue_Association_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceSparseVolumeTextureParameterValue_NativeFunction, "Association");
        GetMaterialInstanceSparseVolumeTextureParameterValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceSparseVolumeTextureParameterValue_NativeFunction, "ReturnValue");
        GetMaterialInstanceScalarParameterValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaterialInstanceScalarParameterValue");
        GetMaterialInstanceScalarParameterValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaterialInstanceScalarParameterValue_NativeFunction);
        GetMaterialInstanceScalarParameterValue_Instance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceScalarParameterValue_NativeFunction, "Instance");
        GetMaterialInstanceScalarParameterValue_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceScalarParameterValue_NativeFunction, "ParameterName");
        GetMaterialInstanceScalarParameterValue_Association_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceScalarParameterValue_NativeFunction, "Association");
        GetMaterialInstanceScalarParameterValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceScalarParameterValue_NativeFunction, "ReturnValue");
        GetMaterialInstanceRuntimeVirtualTextureParameterValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaterialInstanceRuntimeVirtualTextureParameterValue");
        GetMaterialInstanceRuntimeVirtualTextureParameterValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaterialInstanceRuntimeVirtualTextureParameterValue_NativeFunction);
        GetMaterialInstanceRuntimeVirtualTextureParameterValue_Instance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceRuntimeVirtualTextureParameterValue_NativeFunction, "Instance");
        GetMaterialInstanceRuntimeVirtualTextureParameterValue_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceRuntimeVirtualTextureParameterValue_NativeFunction, "ParameterName");
        GetMaterialInstanceRuntimeVirtualTextureParameterValue_Association_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceRuntimeVirtualTextureParameterValue_NativeFunction, "Association");
        GetMaterialInstanceRuntimeVirtualTextureParameterValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialInstanceRuntimeVirtualTextureParameterValue_NativeFunction, "ReturnValue");
        GetMaterialExpressionNodePosition_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaterialExpressionNodePosition");
        GetMaterialExpressionNodePosition_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaterialExpressionNodePosition_NativeFunction);
        GetMaterialExpressionNodePosition_MaterialExpression_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialExpressionNodePosition_NativeFunction, "MaterialExpression");
        GetMaterialExpressionNodePosition_NodePosX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialExpressionNodePosition_NativeFunction, "NodePosX");
        GetMaterialExpressionNodePosition_NodePosY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialExpressionNodePosition_NativeFunction, "NodePosY");
        GetMaterialExpressionInputTypes_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaterialExpressionInputTypes");
        GetMaterialExpressionInputTypes_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaterialExpressionInputTypes_NativeFunction);
        GetMaterialExpressionInputTypes_MaterialExpression_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialExpressionInputTypes_NativeFunction, "MaterialExpression");
        GetMaterialExpressionInputTypes_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialExpressionInputTypes_NativeFunction, "ReturnValue");
        GetMaterialExpressionInputTypes_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetMaterialExpressionInputTypes_NativeFunction, "ReturnValue");
        GetMaterialDefaultVectorParameterValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaterialDefaultVectorParameterValue");
        GetMaterialDefaultVectorParameterValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaterialDefaultVectorParameterValue_NativeFunction);
        GetMaterialDefaultVectorParameterValue_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialDefaultVectorParameterValue_NativeFunction, "Material");
        GetMaterialDefaultVectorParameterValue_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialDefaultVectorParameterValue_NativeFunction, "ParameterName");
        GetMaterialDefaultVectorParameterValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialDefaultVectorParameterValue_NativeFunction, "ReturnValue");
        GetMaterialDefaultTextureParameterValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaterialDefaultTextureParameterValue");
        GetMaterialDefaultTextureParameterValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaterialDefaultTextureParameterValue_NativeFunction);
        GetMaterialDefaultTextureParameterValue_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialDefaultTextureParameterValue_NativeFunction, "Material");
        GetMaterialDefaultTextureParameterValue_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialDefaultTextureParameterValue_NativeFunction, "ParameterName");
        GetMaterialDefaultTextureParameterValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialDefaultTextureParameterValue_NativeFunction, "ReturnValue");
        GetMaterialDefaultStaticSwitchParameterValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaterialDefaultStaticSwitchParameterValue");
        GetMaterialDefaultStaticSwitchParameterValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaterialDefaultStaticSwitchParameterValue_NativeFunction);
        GetMaterialDefaultStaticSwitchParameterValue_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialDefaultStaticSwitchParameterValue_NativeFunction, "Material");
        GetMaterialDefaultStaticSwitchParameterValue_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialDefaultStaticSwitchParameterValue_NativeFunction, "ParameterName");
        GetMaterialDefaultStaticSwitchParameterValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialDefaultStaticSwitchParameterValue_NativeFunction, "ReturnValue");
        GetMaterialDefaultScalarParameterValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMaterialDefaultScalarParameterValue");
        GetMaterialDefaultScalarParameterValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMaterialDefaultScalarParameterValue_NativeFunction);
        GetMaterialDefaultScalarParameterValue_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialDefaultScalarParameterValue_NativeFunction, "Material");
        GetMaterialDefaultScalarParameterValue_ParameterName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialDefaultScalarParameterValue_NativeFunction, "ParameterName");
        GetMaterialDefaultScalarParameterValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMaterialDefaultScalarParameterValue_NativeFunction, "ReturnValue");
        GetInputsForMaterialExpression_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInputsForMaterialExpression");
        GetInputsForMaterialExpression_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInputsForMaterialExpression_NativeFunction);
        GetInputsForMaterialExpression_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputsForMaterialExpression_NativeFunction, "Material");
        GetInputsForMaterialExpression_MaterialExpression_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputsForMaterialExpression_NativeFunction, "MaterialExpression");
        GetInputsForMaterialExpression_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputsForMaterialExpression_NativeFunction, "ReturnValue");
        GetInputsForMaterialExpression_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetInputsForMaterialExpression_NativeFunction, "ReturnValue");
        GetInputNodeOutputNameForMaterialExpression_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetInputNodeOutputNameForMaterialExpression");
        GetInputNodeOutputNameForMaterialExpression_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetInputNodeOutputNameForMaterialExpression_NativeFunction);
        GetInputNodeOutputNameForMaterialExpression_MaterialExpression_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputNodeOutputNameForMaterialExpression_NativeFunction, "MaterialExpression");
        GetInputNodeOutputNameForMaterialExpression_InputNode_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputNodeOutputNameForMaterialExpression_NativeFunction, "InputNode");
        GetInputNodeOutputNameForMaterialExpression_OutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputNodeOutputNameForMaterialExpression_NativeFunction, "OutputName");
        GetInputNodeOutputNameForMaterialExpression_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetInputNodeOutputNameForMaterialExpression_NativeFunction, "ReturnValue");
        GetChildInstances_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetChildInstances");
        GetChildInstances_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetChildInstances_NativeFunction);
        GetChildInstances_Parent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildInstances_NativeFunction, "Parent");
        GetChildInstances_ChildInstances_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetChildInstances_NativeFunction, "ChildInstances");
        GetChildInstances_ChildInstances_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetChildInstances_NativeFunction, "ChildInstances");
        DuplicateMaterialExpression_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DuplicateMaterialExpression");
        DuplicateMaterialExpression_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DuplicateMaterialExpression_NativeFunction);
        DuplicateMaterialExpression_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateMaterialExpression_NativeFunction, "Material");
        DuplicateMaterialExpression_MaterialFunction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateMaterialExpression_NativeFunction, "MaterialFunction");
        DuplicateMaterialExpression_Expression_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateMaterialExpression_NativeFunction, "Expression");
        DuplicateMaterialExpression_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DuplicateMaterialExpression_NativeFunction, "ReturnValue");
        DeleteMaterialExpressionInFunction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeleteMaterialExpressionInFunction");
        DeleteMaterialExpressionInFunction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeleteMaterialExpressionInFunction_NativeFunction);
        DeleteMaterialExpressionInFunction_MaterialFunction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteMaterialExpressionInFunction_NativeFunction, "MaterialFunction");
        DeleteMaterialExpressionInFunction_Expression_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteMaterialExpressionInFunction_NativeFunction, "Expression");
        DeleteMaterialExpression_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeleteMaterialExpression");
        DeleteMaterialExpression_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeleteMaterialExpression_NativeFunction);
        DeleteMaterialExpression_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteMaterialExpression_NativeFunction, "Material");
        DeleteMaterialExpression_Expression_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteMaterialExpression_NativeFunction, "Expression");
        DeleteAllMaterialExpressionsInFunction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeleteAllMaterialExpressionsInFunction");
        DeleteAllMaterialExpressionsInFunction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeleteAllMaterialExpressionsInFunction_NativeFunction);
        DeleteAllMaterialExpressionsInFunction_MaterialFunction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteAllMaterialExpressionsInFunction_NativeFunction, "MaterialFunction");
        DeleteAllMaterialExpressions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "DeleteAllMaterialExpressions");
        DeleteAllMaterialExpressions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(DeleteAllMaterialExpressions_NativeFunction);
        DeleteAllMaterialExpressions_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(DeleteAllMaterialExpressions_NativeFunction, "Material");
        CreateMaterialExpressionInFunction_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateMaterialExpressionInFunction");
        CreateMaterialExpressionInFunction_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateMaterialExpressionInFunction_NativeFunction);
        CreateMaterialExpressionInFunction_MaterialFunction_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMaterialExpressionInFunction_NativeFunction, "MaterialFunction");
        CreateMaterialExpressionInFunction_ExpressionClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMaterialExpressionInFunction_NativeFunction, "ExpressionClass");
        CreateMaterialExpressionInFunction_NodePosX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMaterialExpressionInFunction_NativeFunction, "NodePosX");
        CreateMaterialExpressionInFunction_NodePosY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMaterialExpressionInFunction_NativeFunction, "NodePosY");
        CreateMaterialExpressionInFunction_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMaterialExpressionInFunction_NativeFunction, "ReturnValue");
        CreateMaterialExpression_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CreateMaterialExpression");
        CreateMaterialExpression_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CreateMaterialExpression_NativeFunction);
        CreateMaterialExpression_Material_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMaterialExpression_NativeFunction, "Material");
        CreateMaterialExpression_ExpressionClass_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMaterialExpression_NativeFunction, "ExpressionClass");
        CreateMaterialExpression_NodePosX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMaterialExpression_NativeFunction, "NodePosX");
        CreateMaterialExpression_NodePosY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMaterialExpression_NativeFunction, "NodePosY");
        CreateMaterialExpression_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CreateMaterialExpression_NativeFunction, "ReturnValue");
        ConnectMaterialProperty_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectMaterialProperty");
        ConnectMaterialProperty_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectMaterialProperty_NativeFunction);
        ConnectMaterialProperty_FromExpression_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectMaterialProperty_NativeFunction, "FromExpression");
        ConnectMaterialProperty_FromOutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectMaterialProperty_NativeFunction, "FromOutputName");
        ConnectMaterialProperty_Property_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectMaterialProperty_NativeFunction, "Property");
        ConnectMaterialProperty_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectMaterialProperty_NativeFunction, "ReturnValue");
        ConnectMaterialExpressions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ConnectMaterialExpressions");
        ConnectMaterialExpressions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ConnectMaterialExpressions_NativeFunction);
        ConnectMaterialExpressions_FromExpression_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectMaterialExpressions_NativeFunction, "FromExpression");
        ConnectMaterialExpressions_FromOutputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectMaterialExpressions_NativeFunction, "FromOutputName");
        ConnectMaterialExpressions_ToExpression_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectMaterialExpressions_NativeFunction, "ToExpression");
        ConnectMaterialExpressions_ToInputName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectMaterialExpressions_NativeFunction, "ToInputName");
        ConnectMaterialExpressions_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ConnectMaterialExpressions_NativeFunction, "ReturnValue");
        ClearAllMaterialInstanceParameters_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "ClearAllMaterialInstanceParameters");
        ClearAllMaterialInstanceParameters_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(ClearAllMaterialInstanceParameters_NativeFunction);
        ClearAllMaterialInstanceParameters_Instance_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(ClearAllMaterialInstanceParameters_NativeFunction, "Instance");
        
        
    }
    
    protected MaterialEditingLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/MaterialEditor.MaterialEditingLibrary:UpdateMaterialInstance
    static readonly IntPtr UpdateMaterialInstance_NativeFunction;
    static readonly int UpdateMaterialInstance_ParamsSize;
    static readonly int UpdateMaterialInstance_Instance_Offset;
    
    public static void UpdateMaterialInstance(UnrealSharp.Engine.MaterialInstanceConstant instance)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UpdateMaterialInstance_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceConstant>.ToNative(IntPtr.Add(ParamsBuffer, UpdateMaterialInstance_Instance_Offset), 0, null, instance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, UpdateMaterialInstance_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:UpdateMaterialFunction
    static readonly IntPtr UpdateMaterialFunction_NativeFunction;
    static readonly int UpdateMaterialFunction_ParamsSize;
    static readonly int UpdateMaterialFunction_MaterialFunction_Offset;
    static readonly int UpdateMaterialFunction_PreviewMaterial_Offset;
    
    public static void UpdateMaterialFunction(UnrealSharp.Engine.MaterialFunctionInterface materialFunction, UnrealSharp.Engine.Material previewMaterial = default(UnrealSharp.Engine.Material))
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[UpdateMaterialFunction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialFunctionInterface>.ToNative(IntPtr.Add(ParamsBuffer, UpdateMaterialFunction_MaterialFunction_Offset), 0, null, materialFunction);
            ObjectMarshaller<UnrealSharp.Engine.Material>.ToNative(IntPtr.Add(ParamsBuffer, UpdateMaterialFunction_PreviewMaterial_Offset), 0, null, previewMaterial);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, UpdateMaterialFunction_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:SetMaterialUsage
    static readonly IntPtr SetMaterialUsage_NativeFunction;
    static readonly int SetMaterialUsage_ParamsSize;
    static readonly int SetMaterialUsage_Material_Offset;
    static readonly int SetMaterialUsage_Usage_Offset;
    static readonly int SetMaterialUsage_bNeedsRecompile_Offset;
    static readonly int SetMaterialUsage_ReturnValue_Offset;
    
    public static bool SetMaterialUsage(UnrealSharp.Engine.Material material, UnrealSharp.Engine.EMaterialUsage usage, out bool bNeedsRecompile)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMaterialUsage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Material>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialUsage_Material_Offset), 0, null, material);
            BlittableMarshaller<UnrealSharp.Engine.EMaterialUsage>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialUsage_Usage_Offset), 0, null, usage);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetMaterialUsage_NativeFunction, ParamsBuffer);
            
            bNeedsRecompile = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetMaterialUsage_bNeedsRecompile_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetMaterialUsage_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:SetMaterialInstanceVectorParameterValue
    static readonly IntPtr SetMaterialInstanceVectorParameterValue_NativeFunction;
    static readonly int SetMaterialInstanceVectorParameterValue_ParamsSize;
    static readonly int SetMaterialInstanceVectorParameterValue_Instance_Offset;
    static readonly int SetMaterialInstanceVectorParameterValue_ParameterName_Offset;
    static readonly int SetMaterialInstanceVectorParameterValue_Value_Offset;
    static readonly int SetMaterialInstanceVectorParameterValue_Association_Offset;
    static readonly int SetMaterialInstanceVectorParameterValue_ReturnValue_Offset;
    
    public static bool SetMaterialInstanceVectorParameterValue(UnrealSharp.Engine.MaterialInstanceConstant instance, Name parameterName, UnrealSharp.CoreUObject.LinearColor value, UnrealSharp.Engine.EMaterialParameterAssociation association = UnrealSharp.Engine.EMaterialParameterAssociation.GlobalParameter)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMaterialInstanceVectorParameterValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceConstant>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceVectorParameterValue_Instance_Offset), 0, null, instance);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceVectorParameterValue_ParameterName_Offset), 0, null, parameterName);
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceVectorParameterValue_Value_Offset), 0, null, value);
            BlittableMarshaller<UnrealSharp.Engine.EMaterialParameterAssociation>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceVectorParameterValue_Association_Offset), 0, null, association);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetMaterialInstanceVectorParameterValue_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceVectorParameterValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:SetMaterialInstanceTextureParameterValue
    static readonly IntPtr SetMaterialInstanceTextureParameterValue_NativeFunction;
    static readonly int SetMaterialInstanceTextureParameterValue_ParamsSize;
    static readonly int SetMaterialInstanceTextureParameterValue_Instance_Offset;
    static readonly int SetMaterialInstanceTextureParameterValue_ParameterName_Offset;
    static readonly int SetMaterialInstanceTextureParameterValue_Value_Offset;
    static readonly int SetMaterialInstanceTextureParameterValue_Association_Offset;
    static readonly int SetMaterialInstanceTextureParameterValue_ReturnValue_Offset;
    
    public static bool SetMaterialInstanceTextureParameterValue(UnrealSharp.Engine.MaterialInstanceConstant instance, Name parameterName, UnrealSharp.Engine.Texture value, UnrealSharp.Engine.EMaterialParameterAssociation association = UnrealSharp.Engine.EMaterialParameterAssociation.GlobalParameter)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMaterialInstanceTextureParameterValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceConstant>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceTextureParameterValue_Instance_Offset), 0, null, instance);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceTextureParameterValue_ParameterName_Offset), 0, null, parameterName);
            ObjectMarshaller<UnrealSharp.Engine.Texture>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceTextureParameterValue_Value_Offset), 0, null, value);
            BlittableMarshaller<UnrealSharp.Engine.EMaterialParameterAssociation>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceTextureParameterValue_Association_Offset), 0, null, association);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetMaterialInstanceTextureParameterValue_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceTextureParameterValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:SetMaterialInstanceStaticSwitchParameterValue
    static readonly IntPtr SetMaterialInstanceStaticSwitchParameterValue_NativeFunction;
    static readonly int SetMaterialInstanceStaticSwitchParameterValue_ParamsSize;
    static readonly int SetMaterialInstanceStaticSwitchParameterValue_Instance_Offset;
    static readonly int SetMaterialInstanceStaticSwitchParameterValue_ParameterName_Offset;
    static readonly int SetMaterialInstanceStaticSwitchParameterValue_Value_Offset;
    static readonly int SetMaterialInstanceStaticSwitchParameterValue_Association_Offset;
    static readonly int SetMaterialInstanceStaticSwitchParameterValue_ReturnValue_Offset;
    
    public static bool SetMaterialInstanceStaticSwitchParameterValue(UnrealSharp.Engine.MaterialInstanceConstant instance, Name parameterName, bool value, UnrealSharp.Engine.EMaterialParameterAssociation association = UnrealSharp.Engine.EMaterialParameterAssociation.GlobalParameter)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMaterialInstanceStaticSwitchParameterValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceConstant>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceStaticSwitchParameterValue_Instance_Offset), 0, null, instance);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceStaticSwitchParameterValue_ParameterName_Offset), 0, null, parameterName);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceStaticSwitchParameterValue_Value_Offset), 0, null, value);
            BlittableMarshaller<UnrealSharp.Engine.EMaterialParameterAssociation>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceStaticSwitchParameterValue_Association_Offset), 0, null, association);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetMaterialInstanceStaticSwitchParameterValue_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceStaticSwitchParameterValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:SetMaterialInstanceSparseVolumeTextureParameterValue
    static readonly IntPtr SetMaterialInstanceSparseVolumeTextureParameterValue_NativeFunction;
    static readonly int SetMaterialInstanceSparseVolumeTextureParameterValue_ParamsSize;
    static readonly int SetMaterialInstanceSparseVolumeTextureParameterValue_Instance_Offset;
    static readonly int SetMaterialInstanceSparseVolumeTextureParameterValue_ParameterName_Offset;
    static readonly int SetMaterialInstanceSparseVolumeTextureParameterValue_Value_Offset;
    static readonly int SetMaterialInstanceSparseVolumeTextureParameterValue_Association_Offset;
    static readonly int SetMaterialInstanceSparseVolumeTextureParameterValue_ReturnValue_Offset;
    
    public static bool SetMaterialInstanceSparseVolumeTextureParameterValue(UnrealSharp.Engine.MaterialInstanceConstant instance, Name parameterName, UnrealSharp.Engine.SparseVolumeTexture value, UnrealSharp.Engine.EMaterialParameterAssociation association = UnrealSharp.Engine.EMaterialParameterAssociation.GlobalParameter)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMaterialInstanceSparseVolumeTextureParameterValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceConstant>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceSparseVolumeTextureParameterValue_Instance_Offset), 0, null, instance);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceSparseVolumeTextureParameterValue_ParameterName_Offset), 0, null, parameterName);
            ObjectMarshaller<UnrealSharp.Engine.SparseVolumeTexture>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceSparseVolumeTextureParameterValue_Value_Offset), 0, null, value);
            BlittableMarshaller<UnrealSharp.Engine.EMaterialParameterAssociation>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceSparseVolumeTextureParameterValue_Association_Offset), 0, null, association);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetMaterialInstanceSparseVolumeTextureParameterValue_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceSparseVolumeTextureParameterValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:SetMaterialInstanceScalarParameterValue
    static readonly IntPtr SetMaterialInstanceScalarParameterValue_NativeFunction;
    static readonly int SetMaterialInstanceScalarParameterValue_ParamsSize;
    static readonly int SetMaterialInstanceScalarParameterValue_Instance_Offset;
    static readonly int SetMaterialInstanceScalarParameterValue_ParameterName_Offset;
    static readonly int SetMaterialInstanceScalarParameterValue_Value_Offset;
    static readonly int SetMaterialInstanceScalarParameterValue_Association_Offset;
    static readonly int SetMaterialInstanceScalarParameterValue_ReturnValue_Offset;
    
    public static bool SetMaterialInstanceScalarParameterValue(UnrealSharp.Engine.MaterialInstanceConstant instance, Name parameterName, float value, UnrealSharp.Engine.EMaterialParameterAssociation association = UnrealSharp.Engine.EMaterialParameterAssociation.GlobalParameter)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMaterialInstanceScalarParameterValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceConstant>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceScalarParameterValue_Instance_Offset), 0, null, instance);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceScalarParameterValue_ParameterName_Offset), 0, null, parameterName);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceScalarParameterValue_Value_Offset), 0, null, value);
            BlittableMarshaller<UnrealSharp.Engine.EMaterialParameterAssociation>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceScalarParameterValue_Association_Offset), 0, null, association);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetMaterialInstanceScalarParameterValue_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceScalarParameterValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:SetMaterialInstanceRuntimeVirtualTextureParameterValue
    static readonly IntPtr SetMaterialInstanceRuntimeVirtualTextureParameterValue_NativeFunction;
    static readonly int SetMaterialInstanceRuntimeVirtualTextureParameterValue_ParamsSize;
    static readonly int SetMaterialInstanceRuntimeVirtualTextureParameterValue_Instance_Offset;
    static readonly int SetMaterialInstanceRuntimeVirtualTextureParameterValue_ParameterName_Offset;
    static readonly int SetMaterialInstanceRuntimeVirtualTextureParameterValue_Value_Offset;
    static readonly int SetMaterialInstanceRuntimeVirtualTextureParameterValue_Association_Offset;
    static readonly int SetMaterialInstanceRuntimeVirtualTextureParameterValue_ReturnValue_Offset;
    
    public static bool SetMaterialInstanceRuntimeVirtualTextureParameterValue(UnrealSharp.Engine.MaterialInstanceConstant instance, Name parameterName, UnrealSharp.Engine.RuntimeVirtualTexture value, UnrealSharp.Engine.EMaterialParameterAssociation association = UnrealSharp.Engine.EMaterialParameterAssociation.GlobalParameter)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMaterialInstanceRuntimeVirtualTextureParameterValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceConstant>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceRuntimeVirtualTextureParameterValue_Instance_Offset), 0, null, instance);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceRuntimeVirtualTextureParameterValue_ParameterName_Offset), 0, null, parameterName);
            ObjectMarshaller<UnrealSharp.Engine.RuntimeVirtualTexture>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceRuntimeVirtualTextureParameterValue_Value_Offset), 0, null, value);
            BlittableMarshaller<UnrealSharp.Engine.EMaterialParameterAssociation>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceRuntimeVirtualTextureParameterValue_Association_Offset), 0, null, association);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetMaterialInstanceRuntimeVirtualTextureParameterValue_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceRuntimeVirtualTextureParameterValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:SetMaterialInstanceParent
    static readonly IntPtr SetMaterialInstanceParent_NativeFunction;
    static readonly int SetMaterialInstanceParent_ParamsSize;
    static readonly int SetMaterialInstanceParent_Instance_Offset;
    static readonly int SetMaterialInstanceParent_NewParent_Offset;
    
    public static void SetMaterialInstanceParent(UnrealSharp.Engine.MaterialInstanceConstant instance, UnrealSharp.Engine.MaterialInterface newParent)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMaterialInstanceParent_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceConstant>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceParent_Instance_Offset), 0, null, instance);
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, SetMaterialInstanceParent_NewParent_Offset), 0, null, newParent);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, SetMaterialInstanceParent_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:RecompileMaterial
    static readonly IntPtr RecompileMaterial_NativeFunction;
    static readonly int RecompileMaterial_ParamsSize;
    static readonly int RecompileMaterial_Material_Offset;
    
    public static void RecompileMaterial(UnrealSharp.Engine.Material material)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[RecompileMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Material>.ToNative(IntPtr.Add(ParamsBuffer, RecompileMaterial_Material_Offset), 0, null, material);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, RecompileMaterial_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:LayoutMaterialFunctionExpressions
    static readonly IntPtr LayoutMaterialFunctionExpressions_NativeFunction;
    static readonly int LayoutMaterialFunctionExpressions_ParamsSize;
    static readonly int LayoutMaterialFunctionExpressions_MaterialFunction_Offset;
    
    public static void LayoutMaterialFunctionExpressions(UnrealSharp.Engine.MaterialFunction materialFunction)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LayoutMaterialFunctionExpressions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialFunction>.ToNative(IntPtr.Add(ParamsBuffer, LayoutMaterialFunctionExpressions_MaterialFunction_Offset), 0, null, materialFunction);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LayoutMaterialFunctionExpressions_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:LayoutMaterialExpressions
    static readonly IntPtr LayoutMaterialExpressions_NativeFunction;
    static readonly int LayoutMaterialExpressions_ParamsSize;
    static readonly int LayoutMaterialExpressions_Material_Offset;
    
    public static void LayoutMaterialExpressions(UnrealSharp.Engine.Material material)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[LayoutMaterialExpressions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Material>.ToNative(IntPtr.Add(ParamsBuffer, LayoutMaterialExpressions_Material_Offset), 0, null, material);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, LayoutMaterialExpressions_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:HasMaterialUsage
    static readonly IntPtr HasMaterialUsage_NativeFunction;
    static readonly int HasMaterialUsage_ParamsSize;
    static readonly int HasMaterialUsage_Material_Offset;
    static readonly int HasMaterialUsage_Usage_Offset;
    static readonly int HasMaterialUsage_ReturnValue_Offset;
    
    public static bool HasMaterialUsage(UnrealSharp.Engine.Material material, UnrealSharp.Engine.EMaterialUsage usage)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasMaterialUsage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Material>.ToNative(IntPtr.Add(ParamsBuffer, HasMaterialUsage_Material_Offset), 0, null, material);
            BlittableMarshaller<UnrealSharp.Engine.EMaterialUsage>.ToNative(IntPtr.Add(ParamsBuffer, HasMaterialUsage_Usage_Offset), 0, null, usage);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, HasMaterialUsage_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasMaterialUsage_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetVectorParameterSource
    static readonly IntPtr GetVectorParameterSource_NativeFunction;
    static readonly int GetVectorParameterSource_ParamsSize;
    static readonly int GetVectorParameterSource_Material_Offset;
    static readonly int GetVectorParameterSource_ParameterName_Offset;
    static readonly int GetVectorParameterSource_ParameterSource_Offset;
    static readonly int GetVectorParameterSource_ReturnValue_Offset;
    
    public static bool GetVectorParameterSource(UnrealSharp.Engine.MaterialInterface material, Name parameterName, out UnrealSharp.CoreUObject.SoftObjectPath parameterSource)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVectorParameterSource_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, GetVectorParameterSource_Material_Offset), 0, null, material);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetVectorParameterSource_ParameterName_Offset), 0, null, parameterName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetVectorParameterSource_NativeFunction, ParamsBuffer);
            
            parameterSource = UnrealSharp.CoreUObject.SoftObjectPathMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetVectorParameterSource_ParameterSource_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetVectorParameterSource_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetVectorParameterNames
    static readonly IntPtr GetVectorParameterNames_NativeFunction;
    static readonly int GetVectorParameterNames_ParamsSize;
    static readonly int GetVectorParameterNames_Material_Offset;
    static readonly int GetVectorParameterNames_ParameterNames_Offset;
    static readonly int GetVectorParameterNames_ParameterNames_ElementSize;
    
    public static void GetVectorParameterNames(UnrealSharp.Engine.MaterialInterface material, out System.Collections.Generic.IList<Name> parameterNames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVectorParameterNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, GetVectorParameterNames_Material_Offset), 0, null, material);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetVectorParameterNames_NativeFunction, ParamsBuffer);
            
            IntPtr ParameterNames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetVectorParameterNames_ParameterNames_Offset);
            UnrealArrayCopyMarshaler<Name> ParameterNames_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetVectorParameterNames_ParameterNames_ElementSize);
            parameterNames = ParameterNames_Marshaler.FromNative(ParameterNames_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(ParameterNames_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetUsedTextures
    static readonly IntPtr GetUsedTextures_NativeFunction;
    static readonly int GetUsedTextures_ParamsSize;
    static readonly int GetUsedTextures_Material_Offset;
    static readonly int GetUsedTextures_ReturnValue_Offset;
    static readonly int GetUsedTextures_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.Engine.Texture> GetUsedTextures(UnrealSharp.Engine.Material material)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetUsedTextures_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Material>.ToNative(IntPtr.Add(ParamsBuffer, GetUsedTextures_Material_Offset), 0, null, material);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetUsedTextures_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.Engine.Texture> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetUsedTextures_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Texture> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.Texture> (1, ObjectMarshaller<UnrealSharp.Engine.Texture>.ToNative, ObjectMarshaller<UnrealSharp.Engine.Texture>.FromNative, GetUsedTextures_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.Texture>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetTextureParameterSource
    static readonly IntPtr GetTextureParameterSource_NativeFunction;
    static readonly int GetTextureParameterSource_ParamsSize;
    static readonly int GetTextureParameterSource_Material_Offset;
    static readonly int GetTextureParameterSource_ParameterName_Offset;
    static readonly int GetTextureParameterSource_ParameterSource_Offset;
    static readonly int GetTextureParameterSource_ReturnValue_Offset;
    
    public static bool GetTextureParameterSource(UnrealSharp.Engine.MaterialInterface material, Name parameterName, out UnrealSharp.CoreUObject.SoftObjectPath parameterSource)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTextureParameterSource_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, GetTextureParameterSource_Material_Offset), 0, null, material);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetTextureParameterSource_ParameterName_Offset), 0, null, parameterName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetTextureParameterSource_NativeFunction, ParamsBuffer);
            
            parameterSource = UnrealSharp.CoreUObject.SoftObjectPathMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetTextureParameterSource_ParameterSource_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetTextureParameterSource_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetTextureParameterNames
    static readonly IntPtr GetTextureParameterNames_NativeFunction;
    static readonly int GetTextureParameterNames_ParamsSize;
    static readonly int GetTextureParameterNames_Material_Offset;
    static readonly int GetTextureParameterNames_ParameterNames_Offset;
    static readonly int GetTextureParameterNames_ParameterNames_ElementSize;
    
    public static void GetTextureParameterNames(UnrealSharp.Engine.MaterialInterface material, out System.Collections.Generic.IList<Name> parameterNames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTextureParameterNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, GetTextureParameterNames_Material_Offset), 0, null, material);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetTextureParameterNames_NativeFunction, ParamsBuffer);
            
            IntPtr ParameterNames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetTextureParameterNames_ParameterNames_Offset);
            UnrealArrayCopyMarshaler<Name> ParameterNames_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetTextureParameterNames_ParameterNames_ElementSize);
            parameterNames = ParameterNames_Marshaler.FromNative(ParameterNames_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(ParameterNames_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetStatistics
    static readonly IntPtr GetStatistics_NativeFunction;
    static readonly int GetStatistics_ParamsSize;
    static readonly int GetStatistics_Material_Offset;
    static readonly int GetStatistics_ReturnValue_Offset;
    
    public static UnrealSharp.MaterialEditor.MaterialStatistics GetStatistics(UnrealSharp.Engine.MaterialInterface material)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStatistics_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, GetStatistics_Material_Offset), 0, null, material);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetStatistics_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MaterialEditor.MaterialStatistics returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.MaterialEditor.MaterialStatistics>.FromNative(IntPtr.Add(ParamsBuffer, GetStatistics_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetStaticSwitchParameterSource
    static readonly IntPtr GetStaticSwitchParameterSource_NativeFunction;
    static readonly int GetStaticSwitchParameterSource_ParamsSize;
    static readonly int GetStaticSwitchParameterSource_Material_Offset;
    static readonly int GetStaticSwitchParameterSource_ParameterName_Offset;
    static readonly int GetStaticSwitchParameterSource_ParameterSource_Offset;
    static readonly int GetStaticSwitchParameterSource_ReturnValue_Offset;
    
    public static bool GetStaticSwitchParameterSource(UnrealSharp.Engine.MaterialInterface material, Name parameterName, out UnrealSharp.CoreUObject.SoftObjectPath parameterSource)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStaticSwitchParameterSource_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, GetStaticSwitchParameterSource_Material_Offset), 0, null, material);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetStaticSwitchParameterSource_ParameterName_Offset), 0, null, parameterName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetStaticSwitchParameterSource_NativeFunction, ParamsBuffer);
            
            parameterSource = UnrealSharp.CoreUObject.SoftObjectPathMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetStaticSwitchParameterSource_ParameterSource_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetStaticSwitchParameterSource_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetStaticSwitchParameterNames
    static readonly IntPtr GetStaticSwitchParameterNames_NativeFunction;
    static readonly int GetStaticSwitchParameterNames_ParamsSize;
    static readonly int GetStaticSwitchParameterNames_Material_Offset;
    static readonly int GetStaticSwitchParameterNames_ParameterNames_Offset;
    static readonly int GetStaticSwitchParameterNames_ParameterNames_ElementSize;
    
    public static void GetStaticSwitchParameterNames(UnrealSharp.Engine.MaterialInterface material, out System.Collections.Generic.IList<Name> parameterNames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetStaticSwitchParameterNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, GetStaticSwitchParameterNames_Material_Offset), 0, null, material);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetStaticSwitchParameterNames_NativeFunction, ParamsBuffer);
            
            IntPtr ParameterNames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetStaticSwitchParameterNames_ParameterNames_Offset);
            UnrealArrayCopyMarshaler<Name> ParameterNames_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetStaticSwitchParameterNames_ParameterNames_ElementSize);
            parameterNames = ParameterNames_Marshaler.FromNative(ParameterNames_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(ParameterNames_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetScalarParameterSource
    static readonly IntPtr GetScalarParameterSource_NativeFunction;
    static readonly int GetScalarParameterSource_ParamsSize;
    static readonly int GetScalarParameterSource_Material_Offset;
    static readonly int GetScalarParameterSource_ParameterName_Offset;
    static readonly int GetScalarParameterSource_ParameterSource_Offset;
    static readonly int GetScalarParameterSource_ReturnValue_Offset;
    
    public static bool GetScalarParameterSource(UnrealSharp.Engine.MaterialInterface material, Name parameterName, out UnrealSharp.CoreUObject.SoftObjectPath parameterSource)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetScalarParameterSource_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, GetScalarParameterSource_Material_Offset), 0, null, material);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetScalarParameterSource_ParameterName_Offset), 0, null, parameterName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetScalarParameterSource_NativeFunction, ParamsBuffer);
            
            parameterSource = UnrealSharp.CoreUObject.SoftObjectPathMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetScalarParameterSource_ParameterSource_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetScalarParameterSource_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetScalarParameterNames
    static readonly IntPtr GetScalarParameterNames_NativeFunction;
    static readonly int GetScalarParameterNames_ParamsSize;
    static readonly int GetScalarParameterNames_Material_Offset;
    static readonly int GetScalarParameterNames_ParameterNames_Offset;
    static readonly int GetScalarParameterNames_ParameterNames_ElementSize;
    
    public static void GetScalarParameterNames(UnrealSharp.Engine.MaterialInterface material, out System.Collections.Generic.IList<Name> parameterNames)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetScalarParameterNames_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, GetScalarParameterNames_Material_Offset), 0, null, material);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetScalarParameterNames_NativeFunction, ParamsBuffer);
            
            IntPtr ParameterNames_NativeBuffer = IntPtr.Add(ParamsBuffer, GetScalarParameterNames_ParameterNames_Offset);
            UnrealArrayCopyMarshaler<Name> ParameterNames_Marshaler = new UnrealArrayCopyMarshaler<Name> (1, BlittableMarshaller<Name>.ToNative, BlittableMarshaller<Name>.FromNative, GetScalarParameterNames_ParameterNames_ElementSize);
            parameterNames = ParameterNames_Marshaler.FromNative(ParameterNames_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<Name>.DestructInstance(ParameterNames_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetNumMaterialExpressionsInFunction
    static readonly IntPtr GetNumMaterialExpressionsInFunction_NativeFunction;
    static readonly int GetNumMaterialExpressionsInFunction_ParamsSize;
    static readonly int GetNumMaterialExpressionsInFunction_MaterialFunction_Offset;
    static readonly int GetNumMaterialExpressionsInFunction_ReturnValue_Offset;
    
    public static int GetNumMaterialExpressionsInFunction(UnrealSharp.Engine.MaterialFunction materialFunction)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumMaterialExpressionsInFunction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialFunction>.ToNative(IntPtr.Add(ParamsBuffer, GetNumMaterialExpressionsInFunction_MaterialFunction_Offset), 0, null, materialFunction);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetNumMaterialExpressionsInFunction_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumMaterialExpressionsInFunction_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetNumMaterialExpressions
    static readonly IntPtr GetNumMaterialExpressions_NativeFunction;
    static readonly int GetNumMaterialExpressions_ParamsSize;
    static readonly int GetNumMaterialExpressions_Material_Offset;
    static readonly int GetNumMaterialExpressions_ReturnValue_Offset;
    
    public static int GetNumMaterialExpressions(UnrealSharp.Engine.Material material)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumMaterialExpressions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Material>.ToNative(IntPtr.Add(ParamsBuffer, GetNumMaterialExpressions_Material_Offset), 0, null, material);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetNumMaterialExpressions_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumMaterialExpressions_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetNaniteOverrideMaterial
    static readonly IntPtr GetNaniteOverrideMaterial_NativeFunction;
    static readonly int GetNaniteOverrideMaterial_ParamsSize;
    static readonly int GetNaniteOverrideMaterial_Material_Offset;
    static readonly int GetNaniteOverrideMaterial_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.MaterialInterface GetNaniteOverrideMaterial(UnrealSharp.Engine.MaterialInterface material)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNaniteOverrideMaterial_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, GetNaniteOverrideMaterial_Material_Offset), 0, null, material);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetNaniteOverrideMaterial_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialInterface returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.FromNative(IntPtr.Add(ParamsBuffer, GetNaniteOverrideMaterial_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetMaterialPropertyInputNodeOutputName
    static readonly IntPtr GetMaterialPropertyInputNodeOutputName_NativeFunction;
    static readonly int GetMaterialPropertyInputNodeOutputName_ParamsSize;
    static readonly int GetMaterialPropertyInputNodeOutputName_Material_Offset;
    static readonly int GetMaterialPropertyInputNodeOutputName_Property_Offset;
    static readonly int GetMaterialPropertyInputNodeOutputName_ReturnValue_Offset;
    
    public static string GetMaterialPropertyInputNodeOutputName(UnrealSharp.Engine.Material material, UnrealSharp.Engine.EMaterialProperty property)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaterialPropertyInputNodeOutputName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Material>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialPropertyInputNodeOutputName_Material_Offset), 0, null, material);
            BlittableMarshaller<UnrealSharp.Engine.EMaterialProperty>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialPropertyInputNodeOutputName_Property_Offset), 0, null, property);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMaterialPropertyInputNodeOutputName_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetMaterialPropertyInputNodeOutputName_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetMaterialPropertyInputNode
    static readonly IntPtr GetMaterialPropertyInputNode_NativeFunction;
    static readonly int GetMaterialPropertyInputNode_ParamsSize;
    static readonly int GetMaterialPropertyInputNode_Material_Offset;
    static readonly int GetMaterialPropertyInputNode_Property_Offset;
    static readonly int GetMaterialPropertyInputNode_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.MaterialExpression GetMaterialPropertyInputNode(UnrealSharp.Engine.Material material, UnrealSharp.Engine.EMaterialProperty property)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaterialPropertyInputNode_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Material>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialPropertyInputNode_Material_Offset), 0, null, material);
            BlittableMarshaller<UnrealSharp.Engine.EMaterialProperty>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialPropertyInputNode_Property_Offset), 0, null, property);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMaterialPropertyInputNode_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialExpression returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialExpression>.FromNative(IntPtr.Add(ParamsBuffer, GetMaterialPropertyInputNode_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetMaterialInstanceVectorParameterValue
    static readonly IntPtr GetMaterialInstanceVectorParameterValue_NativeFunction;
    static readonly int GetMaterialInstanceVectorParameterValue_ParamsSize;
    static readonly int GetMaterialInstanceVectorParameterValue_Instance_Offset;
    static readonly int GetMaterialInstanceVectorParameterValue_ParameterName_Offset;
    static readonly int GetMaterialInstanceVectorParameterValue_Association_Offset;
    static readonly int GetMaterialInstanceVectorParameterValue_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor GetMaterialInstanceVectorParameterValue(UnrealSharp.Engine.MaterialInstanceConstant instance, Name parameterName, UnrealSharp.Engine.EMaterialParameterAssociation association = UnrealSharp.Engine.EMaterialParameterAssociation.GlobalParameter)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaterialInstanceVectorParameterValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceConstant>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceVectorParameterValue_Instance_Offset), 0, null, instance);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceVectorParameterValue_ParameterName_Offset), 0, null, parameterName);
            BlittableMarshaller<UnrealSharp.Engine.EMaterialParameterAssociation>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceVectorParameterValue_Association_Offset), 0, null, association);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMaterialInstanceVectorParameterValue_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceVectorParameterValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetMaterialInstanceTextureParameterValue
    static readonly IntPtr GetMaterialInstanceTextureParameterValue_NativeFunction;
    static readonly int GetMaterialInstanceTextureParameterValue_ParamsSize;
    static readonly int GetMaterialInstanceTextureParameterValue_Instance_Offset;
    static readonly int GetMaterialInstanceTextureParameterValue_ParameterName_Offset;
    static readonly int GetMaterialInstanceTextureParameterValue_Association_Offset;
    static readonly int GetMaterialInstanceTextureParameterValue_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.Texture GetMaterialInstanceTextureParameterValue(UnrealSharp.Engine.MaterialInstanceConstant instance, Name parameterName, UnrealSharp.Engine.EMaterialParameterAssociation association = UnrealSharp.Engine.EMaterialParameterAssociation.GlobalParameter)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaterialInstanceTextureParameterValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceConstant>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceTextureParameterValue_Instance_Offset), 0, null, instance);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceTextureParameterValue_ParameterName_Offset), 0, null, parameterName);
            BlittableMarshaller<UnrealSharp.Engine.EMaterialParameterAssociation>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceTextureParameterValue_Association_Offset), 0, null, association);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMaterialInstanceTextureParameterValue_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Texture returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Texture>.FromNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceTextureParameterValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetMaterialInstanceStaticSwitchParameterValue
    static readonly IntPtr GetMaterialInstanceStaticSwitchParameterValue_NativeFunction;
    static readonly int GetMaterialInstanceStaticSwitchParameterValue_ParamsSize;
    static readonly int GetMaterialInstanceStaticSwitchParameterValue_Instance_Offset;
    static readonly int GetMaterialInstanceStaticSwitchParameterValue_ParameterName_Offset;
    static readonly int GetMaterialInstanceStaticSwitchParameterValue_Association_Offset;
    static readonly int GetMaterialInstanceStaticSwitchParameterValue_ReturnValue_Offset;
    
    public static bool GetMaterialInstanceStaticSwitchParameterValue(UnrealSharp.Engine.MaterialInstanceConstant instance, Name parameterName, UnrealSharp.Engine.EMaterialParameterAssociation association = UnrealSharp.Engine.EMaterialParameterAssociation.GlobalParameter)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaterialInstanceStaticSwitchParameterValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceConstant>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceStaticSwitchParameterValue_Instance_Offset), 0, null, instance);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceStaticSwitchParameterValue_ParameterName_Offset), 0, null, parameterName);
            BlittableMarshaller<UnrealSharp.Engine.EMaterialParameterAssociation>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceStaticSwitchParameterValue_Association_Offset), 0, null, association);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMaterialInstanceStaticSwitchParameterValue_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceStaticSwitchParameterValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetMaterialInstanceSparseVolumeTextureParameterValue
    static readonly IntPtr GetMaterialInstanceSparseVolumeTextureParameterValue_NativeFunction;
    static readonly int GetMaterialInstanceSparseVolumeTextureParameterValue_ParamsSize;
    static readonly int GetMaterialInstanceSparseVolumeTextureParameterValue_Instance_Offset;
    static readonly int GetMaterialInstanceSparseVolumeTextureParameterValue_ParameterName_Offset;
    static readonly int GetMaterialInstanceSparseVolumeTextureParameterValue_Association_Offset;
    static readonly int GetMaterialInstanceSparseVolumeTextureParameterValue_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.SparseVolumeTexture GetMaterialInstanceSparseVolumeTextureParameterValue(UnrealSharp.Engine.MaterialInstanceConstant instance, Name parameterName, UnrealSharp.Engine.EMaterialParameterAssociation association = UnrealSharp.Engine.EMaterialParameterAssociation.GlobalParameter)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaterialInstanceSparseVolumeTextureParameterValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceConstant>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceSparseVolumeTextureParameterValue_Instance_Offset), 0, null, instance);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceSparseVolumeTextureParameterValue_ParameterName_Offset), 0, null, parameterName);
            BlittableMarshaller<UnrealSharp.Engine.EMaterialParameterAssociation>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceSparseVolumeTextureParameterValue_Association_Offset), 0, null, association);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMaterialInstanceSparseVolumeTextureParameterValue_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.SparseVolumeTexture returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.SparseVolumeTexture>.FromNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceSparseVolumeTextureParameterValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetMaterialInstanceScalarParameterValue
    static readonly IntPtr GetMaterialInstanceScalarParameterValue_NativeFunction;
    static readonly int GetMaterialInstanceScalarParameterValue_ParamsSize;
    static readonly int GetMaterialInstanceScalarParameterValue_Instance_Offset;
    static readonly int GetMaterialInstanceScalarParameterValue_ParameterName_Offset;
    static readonly int GetMaterialInstanceScalarParameterValue_Association_Offset;
    static readonly int GetMaterialInstanceScalarParameterValue_ReturnValue_Offset;
    
    public static float GetMaterialInstanceScalarParameterValue(UnrealSharp.Engine.MaterialInstanceConstant instance, Name parameterName, UnrealSharp.Engine.EMaterialParameterAssociation association = UnrealSharp.Engine.EMaterialParameterAssociation.GlobalParameter)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaterialInstanceScalarParameterValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceConstant>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceScalarParameterValue_Instance_Offset), 0, null, instance);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceScalarParameterValue_ParameterName_Offset), 0, null, parameterName);
            BlittableMarshaller<UnrealSharp.Engine.EMaterialParameterAssociation>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceScalarParameterValue_Association_Offset), 0, null, association);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMaterialInstanceScalarParameterValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceScalarParameterValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetMaterialInstanceRuntimeVirtualTextureParameterValue
    static readonly IntPtr GetMaterialInstanceRuntimeVirtualTextureParameterValue_NativeFunction;
    static readonly int GetMaterialInstanceRuntimeVirtualTextureParameterValue_ParamsSize;
    static readonly int GetMaterialInstanceRuntimeVirtualTextureParameterValue_Instance_Offset;
    static readonly int GetMaterialInstanceRuntimeVirtualTextureParameterValue_ParameterName_Offset;
    static readonly int GetMaterialInstanceRuntimeVirtualTextureParameterValue_Association_Offset;
    static readonly int GetMaterialInstanceRuntimeVirtualTextureParameterValue_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.RuntimeVirtualTexture GetMaterialInstanceRuntimeVirtualTextureParameterValue(UnrealSharp.Engine.MaterialInstanceConstant instance, Name parameterName, UnrealSharp.Engine.EMaterialParameterAssociation association = UnrealSharp.Engine.EMaterialParameterAssociation.GlobalParameter)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaterialInstanceRuntimeVirtualTextureParameterValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceConstant>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceRuntimeVirtualTextureParameterValue_Instance_Offset), 0, null, instance);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceRuntimeVirtualTextureParameterValue_ParameterName_Offset), 0, null, parameterName);
            BlittableMarshaller<UnrealSharp.Engine.EMaterialParameterAssociation>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceRuntimeVirtualTextureParameterValue_Association_Offset), 0, null, association);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMaterialInstanceRuntimeVirtualTextureParameterValue_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.RuntimeVirtualTexture returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.RuntimeVirtualTexture>.FromNative(IntPtr.Add(ParamsBuffer, GetMaterialInstanceRuntimeVirtualTextureParameterValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetMaterialExpressionNodePosition
    static readonly IntPtr GetMaterialExpressionNodePosition_NativeFunction;
    static readonly int GetMaterialExpressionNodePosition_ParamsSize;
    static readonly int GetMaterialExpressionNodePosition_MaterialExpression_Offset;
    static readonly int GetMaterialExpressionNodePosition_NodePosX_Offset;
    static readonly int GetMaterialExpressionNodePosition_NodePosY_Offset;
    
    public static void GetMaterialExpressionNodePosition(UnrealSharp.Engine.MaterialExpression materialExpression, out int nodePosX, out int nodePosY)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaterialExpressionNodePosition_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialExpression>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialExpressionNodePosition_MaterialExpression_Offset), 0, null, materialExpression);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMaterialExpressionNodePosition_NativeFunction, ParamsBuffer);
            
            nodePosX = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetMaterialExpressionNodePosition_NodePosX_Offset), 0, null);
            nodePosY = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetMaterialExpressionNodePosition_NodePosY_Offset), 0, null);
            
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetMaterialExpressionInputTypes
    static readonly IntPtr GetMaterialExpressionInputTypes_NativeFunction;
    static readonly int GetMaterialExpressionInputTypes_ParamsSize;
    static readonly int GetMaterialExpressionInputTypes_MaterialExpression_Offset;
    static readonly int GetMaterialExpressionInputTypes_ReturnValue_Offset;
    static readonly int GetMaterialExpressionInputTypes_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<int> GetMaterialExpressionInputTypes(UnrealSharp.Engine.MaterialExpression materialExpression)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaterialExpressionInputTypes_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialExpression>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialExpressionInputTypes_MaterialExpression_Offset), 0, null, materialExpression);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMaterialExpressionInputTypes_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<int> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetMaterialExpressionInputTypes_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<int> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<int> (1, BlittableMarshaller<int>.ToNative, BlittableMarshaller<int>.FromNative, GetMaterialExpressionInputTypes_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<int>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetMaterialDefaultVectorParameterValue
    static readonly IntPtr GetMaterialDefaultVectorParameterValue_NativeFunction;
    static readonly int GetMaterialDefaultVectorParameterValue_ParamsSize;
    static readonly int GetMaterialDefaultVectorParameterValue_Material_Offset;
    static readonly int GetMaterialDefaultVectorParameterValue_ParameterName_Offset;
    static readonly int GetMaterialDefaultVectorParameterValue_ReturnValue_Offset;
    
    public static UnrealSharp.CoreUObject.LinearColor GetMaterialDefaultVectorParameterValue(UnrealSharp.Engine.Material material, Name parameterName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaterialDefaultVectorParameterValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Material>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialDefaultVectorParameterValue_Material_Offset), 0, null, material);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialDefaultVectorParameterValue_ParameterName_Offset), 0, null, parameterName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMaterialDefaultVectorParameterValue_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.LinearColor returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(ParamsBuffer, GetMaterialDefaultVectorParameterValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetMaterialDefaultTextureParameterValue
    static readonly IntPtr GetMaterialDefaultTextureParameterValue_NativeFunction;
    static readonly int GetMaterialDefaultTextureParameterValue_ParamsSize;
    static readonly int GetMaterialDefaultTextureParameterValue_Material_Offset;
    static readonly int GetMaterialDefaultTextureParameterValue_ParameterName_Offset;
    static readonly int GetMaterialDefaultTextureParameterValue_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.Texture GetMaterialDefaultTextureParameterValue(UnrealSharp.Engine.Material material, Name parameterName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaterialDefaultTextureParameterValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Material>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialDefaultTextureParameterValue_Material_Offset), 0, null, material);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialDefaultTextureParameterValue_ParameterName_Offset), 0, null, parameterName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMaterialDefaultTextureParameterValue_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.Texture returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.Texture>.FromNative(IntPtr.Add(ParamsBuffer, GetMaterialDefaultTextureParameterValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetMaterialDefaultStaticSwitchParameterValue
    static readonly IntPtr GetMaterialDefaultStaticSwitchParameterValue_NativeFunction;
    static readonly int GetMaterialDefaultStaticSwitchParameterValue_ParamsSize;
    static readonly int GetMaterialDefaultStaticSwitchParameterValue_Material_Offset;
    static readonly int GetMaterialDefaultStaticSwitchParameterValue_ParameterName_Offset;
    static readonly int GetMaterialDefaultStaticSwitchParameterValue_ReturnValue_Offset;
    
    public static bool GetMaterialDefaultStaticSwitchParameterValue(UnrealSharp.Engine.Material material, Name parameterName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaterialDefaultStaticSwitchParameterValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Material>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialDefaultStaticSwitchParameterValue_Material_Offset), 0, null, material);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialDefaultStaticSwitchParameterValue_ParameterName_Offset), 0, null, parameterName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMaterialDefaultStaticSwitchParameterValue_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetMaterialDefaultStaticSwitchParameterValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetMaterialDefaultScalarParameterValue
    static readonly IntPtr GetMaterialDefaultScalarParameterValue_NativeFunction;
    static readonly int GetMaterialDefaultScalarParameterValue_ParamsSize;
    static readonly int GetMaterialDefaultScalarParameterValue_Material_Offset;
    static readonly int GetMaterialDefaultScalarParameterValue_ParameterName_Offset;
    static readonly int GetMaterialDefaultScalarParameterValue_ReturnValue_Offset;
    
    public static float GetMaterialDefaultScalarParameterValue(UnrealSharp.Engine.Material material, Name parameterName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMaterialDefaultScalarParameterValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Material>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialDefaultScalarParameterValue_Material_Offset), 0, null, material);
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, GetMaterialDefaultScalarParameterValue_ParameterName_Offset), 0, null, parameterName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetMaterialDefaultScalarParameterValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetMaterialDefaultScalarParameterValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetInputsForMaterialExpression
    static readonly IntPtr GetInputsForMaterialExpression_NativeFunction;
    static readonly int GetInputsForMaterialExpression_ParamsSize;
    static readonly int GetInputsForMaterialExpression_Material_Offset;
    static readonly int GetInputsForMaterialExpression_MaterialExpression_Offset;
    static readonly int GetInputsForMaterialExpression_ReturnValue_Offset;
    static readonly int GetInputsForMaterialExpression_ReturnValue_ElementSize;
    
    public static System.Collections.Generic.IList<UnrealSharp.Engine.MaterialExpression> GetInputsForMaterialExpression(UnrealSharp.Engine.Material material, UnrealSharp.Engine.MaterialExpression materialExpression)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInputsForMaterialExpression_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Material>.ToNative(IntPtr.Add(ParamsBuffer, GetInputsForMaterialExpression_Material_Offset), 0, null, material);
            ObjectMarshaller<UnrealSharp.Engine.MaterialExpression>.ToNative(IntPtr.Add(ParamsBuffer, GetInputsForMaterialExpression_MaterialExpression_Offset), 0, null, materialExpression);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetInputsForMaterialExpression_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.Engine.MaterialExpression> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetInputsForMaterialExpression_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.MaterialExpression> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.Engine.MaterialExpression> (1, ObjectMarshaller<UnrealSharp.Engine.MaterialExpression>.ToNative, ObjectMarshaller<UnrealSharp.Engine.MaterialExpression>.FromNative, GetInputsForMaterialExpression_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.Engine.MaterialExpression>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetInputNodeOutputNameForMaterialExpression
    static readonly IntPtr GetInputNodeOutputNameForMaterialExpression_NativeFunction;
    static readonly int GetInputNodeOutputNameForMaterialExpression_ParamsSize;
    static readonly int GetInputNodeOutputNameForMaterialExpression_MaterialExpression_Offset;
    static readonly int GetInputNodeOutputNameForMaterialExpression_InputNode_Offset;
    static readonly int GetInputNodeOutputNameForMaterialExpression_OutputName_Offset;
    static readonly int GetInputNodeOutputNameForMaterialExpression_ReturnValue_Offset;
    
    public static bool GetInputNodeOutputNameForMaterialExpression(UnrealSharp.Engine.MaterialExpression materialExpression, UnrealSharp.Engine.MaterialExpression inputNode, out string outputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetInputNodeOutputNameForMaterialExpression_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialExpression>.ToNative(IntPtr.Add(ParamsBuffer, GetInputNodeOutputNameForMaterialExpression_MaterialExpression_Offset), 0, null, materialExpression);
            ObjectMarshaller<UnrealSharp.Engine.MaterialExpression>.ToNative(IntPtr.Add(ParamsBuffer, GetInputNodeOutputNameForMaterialExpression_InputNode_Offset), 0, null, inputNode);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetInputNodeOutputNameForMaterialExpression_NativeFunction, ParamsBuffer);
            
            IntPtr OutputName_NativePtr = IntPtr.Add(ParamsBuffer,GetInputNodeOutputNameForMaterialExpression_OutputName_Offset);
            outputName = StringMarshaller.FromNative(OutputName_NativePtr,0,null);
            StringMarshaller.DestructInstance(OutputName_NativePtr, 0);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, GetInputNodeOutputNameForMaterialExpression_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:GetChildInstances
    static readonly IntPtr GetChildInstances_NativeFunction;
    static readonly int GetChildInstances_ParamsSize;
    static readonly int GetChildInstances_Parent_Offset;
    static readonly int GetChildInstances_ChildInstances_Offset;
    static readonly int GetChildInstances_ChildInstances_ElementSize;
    
    public static void GetChildInstances(UnrealSharp.Engine.MaterialInterface parent, out System.Collections.Generic.IList<UnrealSharp.CoreUObject.AssetData> childInstances)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetChildInstances_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInterface>.ToNative(IntPtr.Add(ParamsBuffer, GetChildInstances_Parent_Offset), 0, null, parent);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, GetChildInstances_NativeFunction, ParamsBuffer);
            
            IntPtr ChildInstances_NativeBuffer = IntPtr.Add(ParamsBuffer, GetChildInstances_ChildInstances_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.AssetData> ChildInstances_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.AssetData> (1, UnrealSharp.CoreUObject.AssetDataMarshaler.ToNative, UnrealSharp.CoreUObject.AssetDataMarshaler.FromNative, GetChildInstances_ChildInstances_ElementSize);
            childInstances = ChildInstances_Marshaler.FromNative(ChildInstances_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.AssetData>.DestructInstance(ChildInstances_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:DuplicateMaterialExpression
    static readonly IntPtr DuplicateMaterialExpression_NativeFunction;
    static readonly int DuplicateMaterialExpression_ParamsSize;
    static readonly int DuplicateMaterialExpression_Material_Offset;
    static readonly int DuplicateMaterialExpression_MaterialFunction_Offset;
    static readonly int DuplicateMaterialExpression_Expression_Offset;
    static readonly int DuplicateMaterialExpression_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.MaterialExpression DuplicateMaterialExpression(UnrealSharp.Engine.Material material, UnrealSharp.Engine.MaterialFunction materialFunction, UnrealSharp.Engine.MaterialExpression expression)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DuplicateMaterialExpression_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Material>.ToNative(IntPtr.Add(ParamsBuffer, DuplicateMaterialExpression_Material_Offset), 0, null, material);
            ObjectMarshaller<UnrealSharp.Engine.MaterialFunction>.ToNative(IntPtr.Add(ParamsBuffer, DuplicateMaterialExpression_MaterialFunction_Offset), 0, null, materialFunction);
            ObjectMarshaller<UnrealSharp.Engine.MaterialExpression>.ToNative(IntPtr.Add(ParamsBuffer, DuplicateMaterialExpression_Expression_Offset), 0, null, expression);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DuplicateMaterialExpression_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialExpression returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialExpression>.FromNative(IntPtr.Add(ParamsBuffer, DuplicateMaterialExpression_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:DeleteMaterialExpressionInFunction
    static readonly IntPtr DeleteMaterialExpressionInFunction_NativeFunction;
    static readonly int DeleteMaterialExpressionInFunction_ParamsSize;
    static readonly int DeleteMaterialExpressionInFunction_MaterialFunction_Offset;
    static readonly int DeleteMaterialExpressionInFunction_Expression_Offset;
    
    public static void DeleteMaterialExpressionInFunction(UnrealSharp.Engine.MaterialFunction materialFunction, UnrealSharp.Engine.MaterialExpression expression)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeleteMaterialExpressionInFunction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialFunction>.ToNative(IntPtr.Add(ParamsBuffer, DeleteMaterialExpressionInFunction_MaterialFunction_Offset), 0, null, materialFunction);
            ObjectMarshaller<UnrealSharp.Engine.MaterialExpression>.ToNative(IntPtr.Add(ParamsBuffer, DeleteMaterialExpressionInFunction_Expression_Offset), 0, null, expression);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DeleteMaterialExpressionInFunction_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:DeleteMaterialExpression
    static readonly IntPtr DeleteMaterialExpression_NativeFunction;
    static readonly int DeleteMaterialExpression_ParamsSize;
    static readonly int DeleteMaterialExpression_Material_Offset;
    static readonly int DeleteMaterialExpression_Expression_Offset;
    
    public static void DeleteMaterialExpression(UnrealSharp.Engine.Material material, UnrealSharp.Engine.MaterialExpression expression)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeleteMaterialExpression_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Material>.ToNative(IntPtr.Add(ParamsBuffer, DeleteMaterialExpression_Material_Offset), 0, null, material);
            ObjectMarshaller<UnrealSharp.Engine.MaterialExpression>.ToNative(IntPtr.Add(ParamsBuffer, DeleteMaterialExpression_Expression_Offset), 0, null, expression);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DeleteMaterialExpression_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:DeleteAllMaterialExpressionsInFunction
    static readonly IntPtr DeleteAllMaterialExpressionsInFunction_NativeFunction;
    static readonly int DeleteAllMaterialExpressionsInFunction_ParamsSize;
    static readonly int DeleteAllMaterialExpressionsInFunction_MaterialFunction_Offset;
    
    public static void DeleteAllMaterialExpressionsInFunction(UnrealSharp.Engine.MaterialFunction materialFunction)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeleteAllMaterialExpressionsInFunction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialFunction>.ToNative(IntPtr.Add(ParamsBuffer, DeleteAllMaterialExpressionsInFunction_MaterialFunction_Offset), 0, null, materialFunction);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DeleteAllMaterialExpressionsInFunction_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:DeleteAllMaterialExpressions
    static readonly IntPtr DeleteAllMaterialExpressions_NativeFunction;
    static readonly int DeleteAllMaterialExpressions_ParamsSize;
    static readonly int DeleteAllMaterialExpressions_Material_Offset;
    
    public static void DeleteAllMaterialExpressions(UnrealSharp.Engine.Material material)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[DeleteAllMaterialExpressions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Material>.ToNative(IntPtr.Add(ParamsBuffer, DeleteAllMaterialExpressions_Material_Offset), 0, null, material);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, DeleteAllMaterialExpressions_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:CreateMaterialExpressionInFunction
    static readonly IntPtr CreateMaterialExpressionInFunction_NativeFunction;
    static readonly int CreateMaterialExpressionInFunction_ParamsSize;
    static readonly int CreateMaterialExpressionInFunction_MaterialFunction_Offset;
    static readonly int CreateMaterialExpressionInFunction_ExpressionClass_Offset;
    static readonly int CreateMaterialExpressionInFunction_NodePosX_Offset;
    static readonly int CreateMaterialExpressionInFunction_NodePosY_Offset;
    static readonly int CreateMaterialExpressionInFunction_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.MaterialExpression CreateMaterialExpressionInFunction(UnrealSharp.Engine.MaterialFunction materialFunction, SubclassOf<UnrealSharp.Engine.MaterialExpression> expressionClass, int nodePosX = 0, int nodePosY = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateMaterialExpressionInFunction_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialFunction>.ToNative(IntPtr.Add(ParamsBuffer, CreateMaterialExpressionInFunction_MaterialFunction_Offset), 0, null, materialFunction);
            SubclassOfMarshaller<UnrealSharp.Engine.MaterialExpression>.ToNative(IntPtr.Add(ParamsBuffer, CreateMaterialExpressionInFunction_ExpressionClass_Offset), 0, null, expressionClass);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateMaterialExpressionInFunction_NodePosX_Offset), 0, null, nodePosX);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateMaterialExpressionInFunction_NodePosY_Offset), 0, null, nodePosY);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateMaterialExpressionInFunction_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialExpression returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialExpression>.FromNative(IntPtr.Add(ParamsBuffer, CreateMaterialExpressionInFunction_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:CreateMaterialExpression
    static readonly IntPtr CreateMaterialExpression_NativeFunction;
    static readonly int CreateMaterialExpression_ParamsSize;
    static readonly int CreateMaterialExpression_Material_Offset;
    static readonly int CreateMaterialExpression_ExpressionClass_Offset;
    static readonly int CreateMaterialExpression_NodePosX_Offset;
    static readonly int CreateMaterialExpression_NodePosY_Offset;
    static readonly int CreateMaterialExpression_ReturnValue_Offset;
    
    public static UnrealSharp.Engine.MaterialExpression CreateMaterialExpression(UnrealSharp.Engine.Material material, SubclassOf<UnrealSharp.Engine.MaterialExpression> expressionClass, int nodePosX = 0, int nodePosY = 0)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CreateMaterialExpression_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.Material>.ToNative(IntPtr.Add(ParamsBuffer, CreateMaterialExpression_Material_Offset), 0, null, material);
            SubclassOfMarshaller<UnrealSharp.Engine.MaterialExpression>.ToNative(IntPtr.Add(ParamsBuffer, CreateMaterialExpression_ExpressionClass_Offset), 0, null, expressionClass);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateMaterialExpression_NodePosX_Offset), 0, null, nodePosX);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, CreateMaterialExpression_NodePosY_Offset), 0, null, nodePosY);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, CreateMaterialExpression_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Engine.MaterialExpression returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.Engine.MaterialExpression>.FromNative(IntPtr.Add(ParamsBuffer, CreateMaterialExpression_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:ConnectMaterialProperty
    static readonly IntPtr ConnectMaterialProperty_NativeFunction;
    static readonly int ConnectMaterialProperty_ParamsSize;
    static readonly int ConnectMaterialProperty_FromExpression_Offset;
    static readonly int ConnectMaterialProperty_FromOutputName_Offset;
    static readonly int ConnectMaterialProperty_Property_Offset;
    static readonly int ConnectMaterialProperty_ReturnValue_Offset;
    
    public static bool ConnectMaterialProperty(UnrealSharp.Engine.MaterialExpression fromExpression, string fromOutputName, UnrealSharp.Engine.EMaterialProperty property)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectMaterialProperty_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialExpression>.ToNative(IntPtr.Add(ParamsBuffer, ConnectMaterialProperty_FromExpression_Offset), 0, null, fromExpression);
            IntPtr FromOutputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectMaterialProperty_FromOutputName_Offset);
            StringMarshaller.ToNative(FromOutputName_NativePtr,0,null,fromOutputName);
            BlittableMarshaller<UnrealSharp.Engine.EMaterialProperty>.ToNative(IntPtr.Add(ParamsBuffer, ConnectMaterialProperty_Property_Offset), 0, null, property);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConnectMaterialProperty_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectMaterialProperty_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(FromOutputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:ConnectMaterialExpressions
    static readonly IntPtr ConnectMaterialExpressions_NativeFunction;
    static readonly int ConnectMaterialExpressions_ParamsSize;
    static readonly int ConnectMaterialExpressions_FromExpression_Offset;
    static readonly int ConnectMaterialExpressions_FromOutputName_Offset;
    static readonly int ConnectMaterialExpressions_ToExpression_Offset;
    static readonly int ConnectMaterialExpressions_ToInputName_Offset;
    static readonly int ConnectMaterialExpressions_ReturnValue_Offset;
    
    public static bool ConnectMaterialExpressions(UnrealSharp.Engine.MaterialExpression fromExpression, string fromOutputName, UnrealSharp.Engine.MaterialExpression toExpression, string toInputName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ConnectMaterialExpressions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialExpression>.ToNative(IntPtr.Add(ParamsBuffer, ConnectMaterialExpressions_FromExpression_Offset), 0, null, fromExpression);
            IntPtr FromOutputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectMaterialExpressions_FromOutputName_Offset);
            StringMarshaller.ToNative(FromOutputName_NativePtr,0,null,fromOutputName);
            ObjectMarshaller<UnrealSharp.Engine.MaterialExpression>.ToNative(IntPtr.Add(ParamsBuffer, ConnectMaterialExpressions_ToExpression_Offset), 0, null, toExpression);
            IntPtr ToInputName_NativePtr = IntPtr.Add(ParamsBuffer,ConnectMaterialExpressions_ToInputName_Offset);
            StringMarshaller.ToNative(ToInputName_NativePtr,0,null,toInputName);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ConnectMaterialExpressions_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, ConnectMaterialExpressions_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(FromOutputName_NativePtr, 0);
            StringMarshaller.DestructInstance(ToInputName_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/MaterialEditor.MaterialEditingLibrary:ClearAllMaterialInstanceParameters
    static readonly IntPtr ClearAllMaterialInstanceParameters_NativeFunction;
    static readonly int ClearAllMaterialInstanceParameters_ParamsSize;
    static readonly int ClearAllMaterialInstanceParameters_Instance_Offset;
    
    public static void ClearAllMaterialInstanceParameters(UnrealSharp.Engine.MaterialInstanceConstant instance)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[ClearAllMaterialInstanceParameters_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.Engine.MaterialInstanceConstant>.ToNative(IntPtr.Add(ParamsBuffer, ClearAllMaterialInstanceParameters_Instance_Offset), 0, null, instance);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, ClearAllMaterialInstanceParameters_NativeFunction, ParamsBuffer);
            
        }
    }
    
    
}
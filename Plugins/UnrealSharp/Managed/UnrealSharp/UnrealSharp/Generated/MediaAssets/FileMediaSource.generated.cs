// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.MediaAssets;

[UClass]
public partial class FileMediaSource : UnrealSharp.MediaAssets.BaseMediaSource
{
    
    static FileMediaSource()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("FileMediaSource");
        
        FilePath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "FilePath");
        FilePath_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "FilePath");
        PrecacheFile_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PrecacheFile");
        
        SetFilePath_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetFilePath");
        SetFilePath_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetFilePath_NativeFunction);
        SetFilePath_Path_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetFilePath_NativeFunction, "Path");
        
        
    }
    
    protected FileMediaSource(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StrProperty /Script/MediaAssets.FileMediaSource:FilePath
    static readonly int FilePath_Offset;
    static readonly IntPtr FilePath_NativeProperty;
    
    public string FilePath
    {
        get
        {
            CheckObjectForValidity();
            return StringMarshaller.FromNative(IntPtr.Add(NativeObject,FilePath_Offset),0,this);
        }
        set
        {
            CheckObjectForValidity();
            StringMarshaller.ToNative(IntPtr.Add(NativeObject,FilePath_Offset),0,this,value);
        }
    }
    
    // BoolProperty /Script/MediaAssets.FileMediaSource:PrecacheFile
    static readonly int PrecacheFile_Offset;
    
    public bool PrecacheFile
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, PrecacheFile_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, PrecacheFile_Offset), 0, this, value);
        }
    }
    
    // Function /Script/MediaAssets.FileMediaSource:SetFilePath
    static readonly IntPtr SetFilePath_NativeFunction;
    static readonly int SetFilePath_ParamsSize;
    static readonly int SetFilePath_Path_Offset;
    
    public void SetFilePath(string path)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetFilePath_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Path_NativePtr = IntPtr.Add(ParamsBuffer,SetFilePath_Path_Offset);
            StringMarshaller.ToNative(Path_NativePtr,0,null,path);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetFilePath_NativeFunction, ParamsBuffer);
            
            StringMarshaller.DestructInstance(Path_NativePtr, 0);
        }
    }
    
    
}
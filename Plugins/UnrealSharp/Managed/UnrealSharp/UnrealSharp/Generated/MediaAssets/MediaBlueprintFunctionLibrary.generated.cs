// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.MediaAssets;

[UClass]
public partial class MediaLibrary : UnrealSharp.Engine.BlueprintFunctionLibrary
{
    
    static readonly IntPtr NativeClassPtr;
    static MediaLibrary()
    {
        NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MediaBlueprintFunctionLibrary");
        
        
        EnumerateWebcamCaptureDevices_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EnumerateWebcamCaptureDevices");
        EnumerateWebcamCaptureDevices_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EnumerateWebcamCaptureDevices_NativeFunction);
        EnumerateWebcamCaptureDevices_OutDevices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EnumerateWebcamCaptureDevices_NativeFunction, "OutDevices");
        EnumerateWebcamCaptureDevices_OutDevices_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(EnumerateWebcamCaptureDevices_NativeFunction, "OutDevices");
        EnumerateWebcamCaptureDevices_Filter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EnumerateWebcamCaptureDevices_NativeFunction, "Filter");
        EnumerateVideoCaptureDevices_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EnumerateVideoCaptureDevices");
        EnumerateVideoCaptureDevices_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EnumerateVideoCaptureDevices_NativeFunction);
        EnumerateVideoCaptureDevices_OutDevices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EnumerateVideoCaptureDevices_NativeFunction, "OutDevices");
        EnumerateVideoCaptureDevices_OutDevices_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(EnumerateVideoCaptureDevices_NativeFunction, "OutDevices");
        EnumerateVideoCaptureDevices_Filter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EnumerateVideoCaptureDevices_NativeFunction, "Filter");
        EnumerateAudioCaptureDevices_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "EnumerateAudioCaptureDevices");
        EnumerateAudioCaptureDevices_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(EnumerateAudioCaptureDevices_NativeFunction);
        EnumerateAudioCaptureDevices_OutDevices_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EnumerateAudioCaptureDevices_NativeFunction, "OutDevices");
        EnumerateAudioCaptureDevices_OutDevices_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(EnumerateAudioCaptureDevices_NativeFunction, "OutDevices");
        EnumerateAudioCaptureDevices_Filter_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(EnumerateAudioCaptureDevices_NativeFunction, "Filter");
        
        
    }
    
    protected MediaLibrary(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/MediaAssets.MediaBlueprintFunctionLibrary:EnumerateWebcamCaptureDevices
    static readonly IntPtr EnumerateWebcamCaptureDevices_NativeFunction;
    static readonly int EnumerateWebcamCaptureDevices_ParamsSize;
    static readonly int EnumerateWebcamCaptureDevices_OutDevices_Offset;
    static readonly int EnumerateWebcamCaptureDevices_OutDevices_ElementSize;
    static readonly int EnumerateWebcamCaptureDevices_Filter_Offset;
    
    public static void EnumerateWebcamCaptureDevices(out System.Collections.Generic.IList<UnrealSharp.MediaAssets.MediaCaptureDevice> outDevices, int filter = -1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EnumerateWebcamCaptureDevices_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, EnumerateWebcamCaptureDevices_Filter_Offset), 0, null, filter);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EnumerateWebcamCaptureDevices_NativeFunction, ParamsBuffer);
            
            IntPtr OutDevices_NativeBuffer = IntPtr.Add(ParamsBuffer, EnumerateWebcamCaptureDevices_OutDevices_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MediaAssets.MediaCaptureDevice> OutDevices_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MediaAssets.MediaCaptureDevice> (1, UnrealSharp.MediaAssets.MediaCaptureDeviceMarshaler.ToNative, UnrealSharp.MediaAssets.MediaCaptureDeviceMarshaler.FromNative, EnumerateWebcamCaptureDevices_OutDevices_ElementSize);
            outDevices = OutDevices_Marshaler.FromNative(OutDevices_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MediaAssets.MediaCaptureDevice>.DestructInstance(OutDevices_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MediaAssets.MediaBlueprintFunctionLibrary:EnumerateVideoCaptureDevices
    static readonly IntPtr EnumerateVideoCaptureDevices_NativeFunction;
    static readonly int EnumerateVideoCaptureDevices_ParamsSize;
    static readonly int EnumerateVideoCaptureDevices_OutDevices_Offset;
    static readonly int EnumerateVideoCaptureDevices_OutDevices_ElementSize;
    static readonly int EnumerateVideoCaptureDevices_Filter_Offset;
    
    public static void EnumerateVideoCaptureDevices(out System.Collections.Generic.IList<UnrealSharp.MediaAssets.MediaCaptureDevice> outDevices, int filter = -1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EnumerateVideoCaptureDevices_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, EnumerateVideoCaptureDevices_Filter_Offset), 0, null, filter);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EnumerateVideoCaptureDevices_NativeFunction, ParamsBuffer);
            
            IntPtr OutDevices_NativeBuffer = IntPtr.Add(ParamsBuffer, EnumerateVideoCaptureDevices_OutDevices_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MediaAssets.MediaCaptureDevice> OutDevices_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MediaAssets.MediaCaptureDevice> (1, UnrealSharp.MediaAssets.MediaCaptureDeviceMarshaler.ToNative, UnrealSharp.MediaAssets.MediaCaptureDeviceMarshaler.FromNative, EnumerateVideoCaptureDevices_OutDevices_ElementSize);
            outDevices = OutDevices_Marshaler.FromNative(OutDevices_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MediaAssets.MediaCaptureDevice>.DestructInstance(OutDevices_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MediaAssets.MediaBlueprintFunctionLibrary:EnumerateAudioCaptureDevices
    static readonly IntPtr EnumerateAudioCaptureDevices_NativeFunction;
    static readonly int EnumerateAudioCaptureDevices_ParamsSize;
    static readonly int EnumerateAudioCaptureDevices_OutDevices_Offset;
    static readonly int EnumerateAudioCaptureDevices_OutDevices_ElementSize;
    static readonly int EnumerateAudioCaptureDevices_Filter_Offset;
    
    public static void EnumerateAudioCaptureDevices(out System.Collections.Generic.IList<UnrealSharp.MediaAssets.MediaCaptureDevice> outDevices, int filter = -1)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[EnumerateAudioCaptureDevices_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, EnumerateAudioCaptureDevices_Filter_Offset), 0, null, filter);
            
            UObjectExporter.CallInvokeNativeStaticFunction(NativeClassPtr, EnumerateAudioCaptureDevices_NativeFunction, ParamsBuffer);
            
            IntPtr OutDevices_NativeBuffer = IntPtr.Add(ParamsBuffer, EnumerateAudioCaptureDevices_OutDevices_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MediaAssets.MediaCaptureDevice> OutDevices_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MediaAssets.MediaCaptureDevice> (1, UnrealSharp.MediaAssets.MediaCaptureDeviceMarshaler.ToNative, UnrealSharp.MediaAssets.MediaCaptureDeviceMarshaler.FromNative, EnumerateAudioCaptureDevices_OutDevices_ElementSize);
            outDevices = OutDevices_Marshaler.FromNative(OutDevices_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MediaAssets.MediaCaptureDevice>.DestructInstance(OutDevices_NativeBuffer, 0);
            
        }
    }
    
    
}
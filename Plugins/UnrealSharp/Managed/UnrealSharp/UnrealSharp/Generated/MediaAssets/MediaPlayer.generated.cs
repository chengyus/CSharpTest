// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.MediaAssets;

[UClass]
public partial class MediaPlayer : UnrealSharp.CoreUObject.Object
{
    
    static MediaPlayer()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MediaPlayer");
        
        CacheAhead_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CacheAhead");
        CacheBehind_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CacheBehind");
        CacheBehindGame_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CacheBehindGame");
        NativeAudioOut_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NativeAudioOut");
        PlayOnOpen_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PlayOnOpen");
        Shuffle_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Shuffle");
        Shuffle_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Shuffle");
        Loop_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Loop");
        Loop_NativeProperty = FPropertyExporter.CallGetNativePropertyFromName(NativeClassPtr, "Loop");
        Playlist_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "Playlist");
        PlaylistIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "PlaylistIndex");
        TimeDelay_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TimeDelay");
        AffectedByPIEHandling_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AffectedByPIEHandling");
        
        SupportsSeeking_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SupportsSeeking");
        SupportsSeeking_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SupportsSeeking_NativeFunction);
        SupportsSeeking_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SupportsSeeking_NativeFunction, "ReturnValue");
        SupportsScrubbing_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SupportsScrubbing");
        SupportsScrubbing_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SupportsScrubbing_NativeFunction);
        SupportsScrubbing_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SupportsScrubbing_NativeFunction, "ReturnValue");
        SupportsRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SupportsRate");
        SupportsRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SupportsRate_NativeFunction);
        SupportsRate_Rate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SupportsRate_NativeFunction, "Rate");
        SupportsRate_Unthinned_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SupportsRate_NativeFunction, "Unthinned");
        SupportsRate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SupportsRate_NativeFunction, "ReturnValue");
        SetViewRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetViewRotation");
        SetViewRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetViewRotation_NativeFunction);
        SetViewRotation_Rotation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetViewRotation_NativeFunction, "Rotation");
        SetViewRotation_Absolute_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetViewRotation_NativeFunction, "Absolute");
        SetViewRotation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetViewRotation_NativeFunction, "ReturnValue");
        SetViewField_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetViewField");
        SetViewField_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetViewField_NativeFunction);
        SetViewField_Horizontal_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetViewField_NativeFunction, "Horizontal");
        SetViewField_Vertical_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetViewField_NativeFunction, "Vertical");
        SetViewField_Absolute_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetViewField_NativeFunction, "Absolute");
        SetViewField_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetViewField_NativeFunction, "ReturnValue");
        SetVideoTrackFrameRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetVideoTrackFrameRate");
        SetVideoTrackFrameRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetVideoTrackFrameRate_NativeFunction);
        SetVideoTrackFrameRate_TrackIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVideoTrackFrameRate_NativeFunction, "TrackIndex");
        SetVideoTrackFrameRate_FormatIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVideoTrackFrameRate_NativeFunction, "FormatIndex");
        SetVideoTrackFrameRate_FrameRate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVideoTrackFrameRate_NativeFunction, "FrameRate");
        SetVideoTrackFrameRate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetVideoTrackFrameRate_NativeFunction, "ReturnValue");
        SetTrackFormat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTrackFormat");
        SetTrackFormat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTrackFormat_NativeFunction);
        SetTrackFormat_TrackType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTrackFormat_NativeFunction, "TrackType");
        SetTrackFormat_TrackIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTrackFormat_NativeFunction, "TrackIndex");
        SetTrackFormat_FormatIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTrackFormat_NativeFunction, "FormatIndex");
        SetTrackFormat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTrackFormat_NativeFunction, "ReturnValue");
        SetTimeDelay_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetTimeDelay");
        SetTimeDelay_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetTimeDelay_NativeFunction);
        SetTimeDelay_TimeDelay_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetTimeDelay_NativeFunction, "TimeDelay");
        SetRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetRate");
        SetRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetRate_NativeFunction);
        SetRate_Rate_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRate_NativeFunction, "Rate");
        SetRate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetRate_NativeFunction, "ReturnValue");
        SetNativeVolume_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetNativeVolume");
        SetNativeVolume_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetNativeVolume_NativeFunction);
        SetNativeVolume_Volume_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNativeVolume_NativeFunction, "Volume");
        SetNativeVolume_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetNativeVolume_NativeFunction, "ReturnValue");
        SetMediaOptions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMediaOptions");
        SetMediaOptions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMediaOptions_NativeFunction);
        SetMediaOptions_Options_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMediaOptions_NativeFunction, "Options");
        SetLooping_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetLooping");
        SetLooping_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetLooping_NativeFunction);
        SetLooping_Looping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLooping_NativeFunction, "Looping");
        SetLooping_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetLooping_NativeFunction, "ReturnValue");
        SetDesiredPlayerName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetDesiredPlayerName");
        SetDesiredPlayerName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetDesiredPlayerName_NativeFunction);
        SetDesiredPlayerName_PlayerName_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetDesiredPlayerName_NativeFunction, "PlayerName");
        SetBlockOnTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetBlockOnTime");
        SetBlockOnTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetBlockOnTime_NativeFunction);
        SetBlockOnTime_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetBlockOnTime_NativeFunction, "Time");
        SelectTrack_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SelectTrack");
        SelectTrack_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SelectTrack_NativeFunction);
        SelectTrack_TrackType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectTrack_NativeFunction, "TrackType");
        SelectTrack_TrackIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectTrack_NativeFunction, "TrackIndex");
        SelectTrack_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SelectTrack_NativeFunction, "ReturnValue");
        Seek_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Seek");
        Seek_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Seek_NativeFunction);
        Seek_Time_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Seek_NativeFunction, "Time");
        Seek_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Seek_NativeFunction, "ReturnValue");
        Rewind_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Rewind");
        Rewind_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Rewind_NativeFunction);
        Rewind_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Rewind_NativeFunction, "ReturnValue");
        Reopen_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Reopen");
        Reopen_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Reopen_NativeFunction);
        Reopen_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Reopen_NativeFunction, "ReturnValue");
        Previous_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Previous");
        Previous_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Previous_NativeFunction);
        Previous_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Previous_NativeFunction, "ReturnValue");
        PlayAndSeek_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "PlayAndSeek");
        Play_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Play");
        Play_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Play_NativeFunction);
        Play_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Play_NativeFunction, "ReturnValue");
        Pause_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Pause");
        Pause_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Pause_NativeFunction);
        Pause_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Pause_NativeFunction, "ReturnValue");
        OpenUrl_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OpenUrl");
        OpenUrl_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OpenUrl_NativeFunction);
        OpenUrl_Url_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenUrl_NativeFunction, "Url");
        OpenUrl_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenUrl_NativeFunction, "ReturnValue");
        OpenSourceWithOptions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OpenSourceWithOptions");
        OpenSourceWithOptions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OpenSourceWithOptions_NativeFunction);
        OpenSourceWithOptions_MediaSource_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenSourceWithOptions_NativeFunction, "MediaSource");
        OpenSourceWithOptions_Options_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenSourceWithOptions_NativeFunction, "Options");
        OpenSourceWithOptions_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenSourceWithOptions_NativeFunction, "ReturnValue");
        OpenSource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OpenSource");
        OpenSource_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OpenSource_NativeFunction);
        OpenSource_MediaSource_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenSource_NativeFunction, "MediaSource");
        OpenSource_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenSource_NativeFunction, "ReturnValue");
        OpenPlaylistIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OpenPlaylistIndex");
        OpenPlaylistIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OpenPlaylistIndex_NativeFunction);
        OpenPlaylistIndex_InPlaylist_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenPlaylistIndex_NativeFunction, "InPlaylist");
        OpenPlaylistIndex_Index_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenPlaylistIndex_NativeFunction, "Index");
        OpenPlaylistIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenPlaylistIndex_NativeFunction, "ReturnValue");
        OpenPlaylist_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OpenPlaylist");
        OpenPlaylist_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OpenPlaylist_NativeFunction);
        OpenPlaylist_InPlaylist_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenPlaylist_NativeFunction, "InPlaylist");
        OpenPlaylist_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenPlaylist_NativeFunction, "ReturnValue");
        OpenFile_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "OpenFile");
        OpenFile_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(OpenFile_NativeFunction);
        OpenFile_FilePath_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenFile_NativeFunction, "FilePath");
        OpenFile_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(OpenFile_NativeFunction, "ReturnValue");
        Next_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Next");
        Next_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(Next_NativeFunction);
        Next_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(Next_NativeFunction, "ReturnValue");
        IsReady_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsReady");
        IsReady_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsReady_NativeFunction);
        IsReady_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsReady_NativeFunction, "ReturnValue");
        IsPreparing_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPreparing");
        IsPreparing_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPreparing_NativeFunction);
        IsPreparing_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPreparing_NativeFunction, "ReturnValue");
        IsPlaying_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPlaying");
        IsPlaying_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPlaying_NativeFunction);
        IsPlaying_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPlaying_NativeFunction, "ReturnValue");
        IsPaused_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsPaused");
        IsPaused_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsPaused_NativeFunction);
        IsPaused_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsPaused_NativeFunction, "ReturnValue");
        IsLooping_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsLooping");
        IsLooping_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsLooping_NativeFunction);
        IsLooping_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsLooping_NativeFunction, "ReturnValue");
        IsConnecting_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsConnecting");
        IsConnecting_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsConnecting_NativeFunction);
        IsConnecting_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsConnecting_NativeFunction, "ReturnValue");
        IsClosed_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsClosed");
        IsClosed_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsClosed_NativeFunction);
        IsClosed_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsClosed_NativeFunction, "ReturnValue");
        IsBuffering_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "IsBuffering");
        IsBuffering_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(IsBuffering_NativeFunction);
        IsBuffering_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(IsBuffering_NativeFunction, "ReturnValue");
        HasError_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "HasError");
        HasError_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(HasError_NativeFunction);
        HasError_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(HasError_NativeFunction, "ReturnValue");
        GetViewRotation_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetViewRotation");
        GetViewRotation_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetViewRotation_NativeFunction);
        GetViewRotation_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetViewRotation_NativeFunction, "ReturnValue");
        GetVideoTrackType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVideoTrackType");
        GetVideoTrackType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVideoTrackType_NativeFunction);
        GetVideoTrackType_TrackIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVideoTrackType_NativeFunction, "TrackIndex");
        GetVideoTrackType_FormatIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVideoTrackType_NativeFunction, "FormatIndex");
        GetVideoTrackType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVideoTrackType_NativeFunction, "ReturnValue");
        GetVideoTrackFrameRates_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVideoTrackFrameRates");
        GetVideoTrackFrameRates_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVideoTrackFrameRates_NativeFunction);
        GetVideoTrackFrameRates_TrackIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVideoTrackFrameRates_NativeFunction, "TrackIndex");
        GetVideoTrackFrameRates_FormatIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVideoTrackFrameRates_NativeFunction, "FormatIndex");
        GetVideoTrackFrameRates_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVideoTrackFrameRates_NativeFunction, "ReturnValue");
        GetVideoTrackFrameRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVideoTrackFrameRate");
        GetVideoTrackFrameRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVideoTrackFrameRate_NativeFunction);
        GetVideoTrackFrameRate_TrackIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVideoTrackFrameRate_NativeFunction, "TrackIndex");
        GetVideoTrackFrameRate_FormatIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVideoTrackFrameRate_NativeFunction, "FormatIndex");
        GetVideoTrackFrameRate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVideoTrackFrameRate_NativeFunction, "ReturnValue");
        GetVideoTrackDimensions_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVideoTrackDimensions");
        GetVideoTrackDimensions_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVideoTrackDimensions_NativeFunction);
        GetVideoTrackDimensions_TrackIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVideoTrackDimensions_NativeFunction, "TrackIndex");
        GetVideoTrackDimensions_FormatIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVideoTrackDimensions_NativeFunction, "FormatIndex");
        GetVideoTrackDimensions_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVideoTrackDimensions_NativeFunction, "ReturnValue");
        GetVideoTrackAspectRatio_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVideoTrackAspectRatio");
        GetVideoTrackAspectRatio_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVideoTrackAspectRatio_NativeFunction);
        GetVideoTrackAspectRatio_TrackIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVideoTrackAspectRatio_NativeFunction, "TrackIndex");
        GetVideoTrackAspectRatio_FormatIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVideoTrackAspectRatio_NativeFunction, "FormatIndex");
        GetVideoTrackAspectRatio_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVideoTrackAspectRatio_NativeFunction, "ReturnValue");
        GetVerticalFieldOfView_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetVerticalFieldOfView");
        GetVerticalFieldOfView_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetVerticalFieldOfView_NativeFunction);
        GetVerticalFieldOfView_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetVerticalFieldOfView_NativeFunction, "ReturnValue");
        GetUrl_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetUrl");
        GetUrl_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetUrl_NativeFunction);
        GetUrl_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetUrl_NativeFunction, "ReturnValue");
        GetTrackLanguage_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTrackLanguage");
        GetTrackLanguage_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTrackLanguage_NativeFunction);
        GetTrackLanguage_TrackType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTrackLanguage_NativeFunction, "TrackType");
        GetTrackLanguage_TrackIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTrackLanguage_NativeFunction, "TrackIndex");
        GetTrackLanguage_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTrackLanguage_NativeFunction, "ReturnValue");
        GetTrackFormat_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTrackFormat");
        GetTrackFormat_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTrackFormat_NativeFunction);
        GetTrackFormat_TrackType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTrackFormat_NativeFunction, "TrackType");
        GetTrackFormat_TrackIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTrackFormat_NativeFunction, "TrackIndex");
        GetTrackFormat_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTrackFormat_NativeFunction, "ReturnValue");
        GetTimeStamp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTimeStamp");
        GetTimeStamp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTimeStamp_NativeFunction);
        GetTimeStamp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTimeStamp_NativeFunction, "ReturnValue");
        GetTimeDelay_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTimeDelay");
        GetTimeDelay_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTimeDelay_NativeFunction);
        GetTimeDelay_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTimeDelay_NativeFunction, "ReturnValue");
        GetTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTime");
        GetTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTime_NativeFunction);
        GetTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTime_NativeFunction, "ReturnValue");
        GetSupportedRates_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSupportedRates");
        GetSupportedRates_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSupportedRates_NativeFunction);
        GetSupportedRates_OutRates_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSupportedRates_NativeFunction, "OutRates");
        GetSupportedRates_OutRates_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSupportedRates_NativeFunction, "OutRates");
        GetSupportedRates_Unthinned_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSupportedRates_NativeFunction, "Unthinned");
        GetSelectedTrack_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSelectedTrack");
        GetSelectedTrack_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSelectedTrack_NativeFunction);
        GetSelectedTrack_TrackType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSelectedTrack_NativeFunction, "TrackType");
        GetSelectedTrack_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSelectedTrack_NativeFunction, "ReturnValue");
        GetRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetRate");
        GetRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetRate_NativeFunction);
        GetRate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetRate_NativeFunction, "ReturnValue");
        GetPlaylistIndex_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlaylistIndex");
        GetPlaylistIndex_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlaylistIndex_NativeFunction);
        GetPlaylistIndex_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlaylistIndex_NativeFunction, "ReturnValue");
        GetPlaylist_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlaylist");
        GetPlaylist_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlaylist_NativeFunction);
        GetPlaylist_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlaylist_NativeFunction, "ReturnValue");
        GetPlayerName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetPlayerName");
        GetPlayerName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetPlayerName_NativeFunction);
        GetPlayerName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetPlayerName_NativeFunction, "ReturnValue");
        GetNumTracks_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumTracks");
        GetNumTracks_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumTracks_NativeFunction);
        GetNumTracks_TrackType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumTracks_NativeFunction, "TrackType");
        GetNumTracks_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumTracks_NativeFunction, "ReturnValue");
        GetNumTrackFormats_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNumTrackFormats");
        GetNumTrackFormats_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNumTrackFormats_NativeFunction);
        GetNumTrackFormats_TrackType_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumTrackFormats_NativeFunction, "TrackType");
        GetNumTrackFormats_TrackIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumTrackFormats_NativeFunction, "TrackIndex");
        GetNumTrackFormats_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNumTrackFormats_NativeFunction, "ReturnValue");
        GetHorizontalFieldOfView_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHorizontalFieldOfView");
        GetHorizontalFieldOfView_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHorizontalFieldOfView_NativeFunction);
        GetHorizontalFieldOfView_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHorizontalFieldOfView_NativeFunction, "ReturnValue");
        GetDuration_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDuration");
        GetDuration_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDuration_NativeFunction);
        GetDuration_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDuration_NativeFunction, "ReturnValue");
        GetDisplayTimeStamp_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDisplayTimeStamp");
        GetDisplayTimeStamp_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDisplayTimeStamp_NativeFunction);
        GetDisplayTimeStamp_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDisplayTimeStamp_NativeFunction, "ReturnValue");
        GetDisplayTime_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDisplayTime");
        GetDisplayTime_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDisplayTime_NativeFunction);
        GetDisplayTime_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDisplayTime_NativeFunction, "ReturnValue");
        GetDesiredPlayerName_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetDesiredPlayerName");
        GetDesiredPlayerName_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetDesiredPlayerName_NativeFunction);
        GetDesiredPlayerName_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetDesiredPlayerName_NativeFunction, "ReturnValue");
        GetAudioTrackType_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAudioTrackType");
        GetAudioTrackType_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAudioTrackType_NativeFunction);
        GetAudioTrackType_TrackIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAudioTrackType_NativeFunction, "TrackIndex");
        GetAudioTrackType_FormatIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAudioTrackType_NativeFunction, "FormatIndex");
        GetAudioTrackType_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAudioTrackType_NativeFunction, "ReturnValue");
        GetAudioTrackSampleRate_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAudioTrackSampleRate");
        GetAudioTrackSampleRate_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAudioTrackSampleRate_NativeFunction);
        GetAudioTrackSampleRate_TrackIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAudioTrackSampleRate_NativeFunction, "TrackIndex");
        GetAudioTrackSampleRate_FormatIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAudioTrackSampleRate_NativeFunction, "FormatIndex");
        GetAudioTrackSampleRate_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAudioTrackSampleRate_NativeFunction, "ReturnValue");
        GetAudioTrackChannels_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAudioTrackChannels");
        GetAudioTrackChannels_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAudioTrackChannels_NativeFunction);
        GetAudioTrackChannels_TrackIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAudioTrackChannels_NativeFunction, "TrackIndex");
        GetAudioTrackChannels_FormatIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAudioTrackChannels_NativeFunction, "FormatIndex");
        GetAudioTrackChannels_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAudioTrackChannels_NativeFunction, "ReturnValue");
        Close_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "Close");
        CanPlayUrl_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CanPlayUrl");
        CanPlayUrl_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CanPlayUrl_NativeFunction);
        CanPlayUrl_Url_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanPlayUrl_NativeFunction, "Url");
        CanPlayUrl_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanPlayUrl_NativeFunction, "ReturnValue");
        CanPlaySource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CanPlaySource");
        CanPlaySource_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CanPlaySource_NativeFunction);
        CanPlaySource_MediaSource_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanPlaySource_NativeFunction, "MediaSource");
        CanPlaySource_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanPlaySource_NativeFunction, "ReturnValue");
        CanPause_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "CanPause");
        CanPause_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(CanPause_NativeFunction);
        CanPause_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(CanPause_NativeFunction, "ReturnValue");
        
        
    }
    
    protected MediaPlayer(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // StructProperty /Script/MediaAssets.MediaPlayer:CacheAhead
    static readonly int CacheAhead_Offset;
    
    public UnrealSharp.CoreUObject.Timespan CacheAhead
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(NativeObject, CacheAhead_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(NativeObject, CacheAhead_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/MediaAssets.MediaPlayer:CacheBehind
    static readonly int CacheBehind_Offset;
    
    public UnrealSharp.CoreUObject.Timespan CacheBehind
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(NativeObject, CacheBehind_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(NativeObject, CacheBehind_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/MediaAssets.MediaPlayer:CacheBehindGame
    static readonly int CacheBehindGame_Offset;
    
    public UnrealSharp.CoreUObject.Timespan CacheBehindGame
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(NativeObject, CacheBehindGame_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(NativeObject, CacheBehindGame_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/MediaAssets.MediaPlayer:NativeAudioOut
    static readonly int NativeAudioOut_Offset;
    
    public bool NativeAudioOut
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, NativeAudioOut_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, NativeAudioOut_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/MediaAssets.MediaPlayer:PlayOnOpen
    static readonly int PlayOnOpen_Offset;
    
    public bool PlayOnOpen
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, PlayOnOpen_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, PlayOnOpen_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/MediaAssets.MediaPlayer:Shuffle
    static readonly int Shuffle_Offset;
    static readonly IntPtr Shuffle_NativeProperty;
    
    public bool Shuffle
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, Shuffle_NativeProperty, Shuffle_Offset);
        }
        set
        {
            CheckObjectForValidity();
            FBoolPropertyExporter.CallSetBitfieldValueForProperty(NativeObject, Shuffle_NativeProperty, Shuffle_Offset, value);
        }
    }
    
    // BoolProperty /Script/MediaAssets.MediaPlayer:Loop
    static readonly int Loop_Offset;
    static readonly IntPtr Loop_NativeProperty;
    
    public bool Loop
    {
        get
        {
            CheckObjectForValidity();
            return FBoolPropertyExporter.CallGetBitfieldValueFromProperty(NativeObject, Loop_NativeProperty, Loop_Offset);
        }
    }
    
    // ObjectProperty /Script/MediaAssets.MediaPlayer:Playlist
    static readonly int Playlist_Offset;
    
    public UnrealSharp.MediaAssets.MediaPlaylist Playlist
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.MediaAssets.MediaPlaylist>.FromNative(IntPtr.Add(NativeObject, Playlist_Offset), 0, this);
        }
    }
    
    // IntProperty /Script/MediaAssets.MediaPlayer:PlaylistIndex
    static readonly int PlaylistIndex_Offset;
    
    public int PlaylistIndex
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, PlaylistIndex_Offset), 0, this);
        }
    }
    
    // StructProperty /Script/MediaAssets.MediaPlayer:TimeDelay
    static readonly int TimeDelay_Offset;
    
    public UnrealSharp.CoreUObject.Timespan TimeDelay
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(NativeObject, TimeDelay_Offset), 0, this);
        }
    }
    
    // BoolProperty /Script/MediaAssets.MediaPlayer:AffectedByPIEHandling
    static readonly int AffectedByPIEHandling_Offset;
    
    public bool AffectedByPIEHandling
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, AffectedByPIEHandling_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, AffectedByPIEHandling_Offset), 0, this, value);
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:SupportsSeeking
    static readonly IntPtr SupportsSeeking_NativeFunction;
    static readonly int SupportsSeeking_ParamsSize;
    static readonly int SupportsSeeking_ReturnValue_Offset;
    
    public bool SupportsSeeking()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SupportsSeeking_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SupportsSeeking_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SupportsSeeking_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:SupportsScrubbing
    static readonly IntPtr SupportsScrubbing_NativeFunction;
    static readonly int SupportsScrubbing_ParamsSize;
    static readonly int SupportsScrubbing_ReturnValue_Offset;
    
    public bool SupportsScrubbing()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SupportsScrubbing_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SupportsScrubbing_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SupportsScrubbing_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:SupportsRate
    static readonly IntPtr SupportsRate_NativeFunction;
    static readonly int SupportsRate_ParamsSize;
    static readonly int SupportsRate_Rate_Offset;
    static readonly int SupportsRate_Unthinned_Offset;
    static readonly int SupportsRate_ReturnValue_Offset;
    
    public bool SupportsRate(float rate, bool unthinned)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SupportsRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SupportsRate_Rate_Offset), 0, null, rate);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SupportsRate_Unthinned_Offset), 0, null, unthinned);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SupportsRate_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SupportsRate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:SetViewRotation
    static readonly IntPtr SetViewRotation_NativeFunction;
    static readonly int SetViewRotation_ParamsSize;
    static readonly int SetViewRotation_Rotation_Offset;
    static readonly int SetViewRotation_Absolute_Offset;
    static readonly int SetViewRotation_ReturnValue_Offset;
    
    public bool SetViewRotation(UnrealSharp.Rotator rotation, bool absolute)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetViewRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.Rotator>.ToNative(IntPtr.Add(ParamsBuffer, SetViewRotation_Rotation_Offset), 0, null, rotation);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetViewRotation_Absolute_Offset), 0, null, absolute);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetViewRotation_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetViewRotation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:SetViewField
    static readonly IntPtr SetViewField_NativeFunction;
    static readonly int SetViewField_ParamsSize;
    static readonly int SetViewField_Horizontal_Offset;
    static readonly int SetViewField_Vertical_Offset;
    static readonly int SetViewField_Absolute_Offset;
    static readonly int SetViewField_ReturnValue_Offset;
    
    public bool SetViewField(float horizontal, float vertical, bool absolute)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetViewField_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetViewField_Horizontal_Offset), 0, null, horizontal);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetViewField_Vertical_Offset), 0, null, vertical);
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetViewField_Absolute_Offset), 0, null, absolute);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetViewField_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetViewField_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:SetVideoTrackFrameRate
    static readonly IntPtr SetVideoTrackFrameRate_NativeFunction;
    static readonly int SetVideoTrackFrameRate_ParamsSize;
    static readonly int SetVideoTrackFrameRate_TrackIndex_Offset;
    static readonly int SetVideoTrackFrameRate_FormatIndex_Offset;
    static readonly int SetVideoTrackFrameRate_FrameRate_Offset;
    static readonly int SetVideoTrackFrameRate_ReturnValue_Offset;
    
    public bool SetVideoTrackFrameRate(int trackIndex, int formatIndex, float frameRate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetVideoTrackFrameRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetVideoTrackFrameRate_TrackIndex_Offset), 0, null, trackIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetVideoTrackFrameRate_FormatIndex_Offset), 0, null, formatIndex);
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetVideoTrackFrameRate_FrameRate_Offset), 0, null, frameRate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetVideoTrackFrameRate_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetVideoTrackFrameRate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:SetTrackFormat
    static readonly IntPtr SetTrackFormat_NativeFunction;
    static readonly int SetTrackFormat_ParamsSize;
    static readonly int SetTrackFormat_TrackType_Offset;
    static readonly int SetTrackFormat_TrackIndex_Offset;
    static readonly int SetTrackFormat_FormatIndex_Offset;
    static readonly int SetTrackFormat_ReturnValue_Offset;
    
    public bool SetTrackFormat(UnrealSharp.MediaAssets.EMediaPlayerTrack trackType, int trackIndex, int formatIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTrackFormat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MediaAssets.EMediaPlayerTrack>.ToNative(IntPtr.Add(ParamsBuffer, SetTrackFormat_TrackType_Offset), 0, null, trackType);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetTrackFormat_TrackIndex_Offset), 0, null, trackIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetTrackFormat_FormatIndex_Offset), 0, null, formatIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTrackFormat_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetTrackFormat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:SetTimeDelay
    static readonly IntPtr SetTimeDelay_NativeFunction;
    static readonly int SetTimeDelay_ParamsSize;
    static readonly int SetTimeDelay_TimeDelay_Offset;
    
    public void SetTimeDelay(UnrealSharp.CoreUObject.Timespan timeDelay)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetTimeDelay_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetTimeDelay_TimeDelay_Offset), 0, null, timeDelay);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetTimeDelay_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:SetRate
    static readonly IntPtr SetRate_NativeFunction;
    static readonly int SetRate_ParamsSize;
    static readonly int SetRate_Rate_Offset;
    static readonly int SetRate_ReturnValue_Offset;
    
    public bool SetRate(float rate)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetRate_Rate_Offset), 0, null, rate);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetRate_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetRate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:SetNativeVolume
    static readonly IntPtr SetNativeVolume_NativeFunction;
    static readonly int SetNativeVolume_ParamsSize;
    static readonly int SetNativeVolume_Volume_Offset;
    static readonly int SetNativeVolume_ReturnValue_Offset;
    
    public bool SetNativeVolume(float volume)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetNativeVolume_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<float>.ToNative(IntPtr.Add(ParamsBuffer, SetNativeVolume_Volume_Offset), 0, null, volume);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetNativeVolume_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetNativeVolume_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:SetMediaOptions
    static readonly IntPtr SetMediaOptions_NativeFunction;
    static readonly int SetMediaOptions_ParamsSize;
    static readonly int SetMediaOptions_Options_Offset;
    
    public void SetMediaOptions(UnrealSharp.MediaAssets.MediaSource options)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMediaOptions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MediaAssets.MediaSource>.ToNative(IntPtr.Add(ParamsBuffer, SetMediaOptions_Options_Offset), 0, null, options);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMediaOptions_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:SetLooping
    static readonly IntPtr SetLooping_NativeFunction;
    static readonly int SetLooping_ParamsSize;
    static readonly int SetLooping_Looping_Offset;
    static readonly int SetLooping_ReturnValue_Offset;
    
    public bool SetLooping(bool looping)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetLooping_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetLooping_Looping_Offset), 0, null, looping);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetLooping_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SetLooping_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:SetDesiredPlayerName
    static readonly IntPtr SetDesiredPlayerName_NativeFunction;
    static readonly int SetDesiredPlayerName_ParamsSize;
    static readonly int SetDesiredPlayerName_PlayerName_Offset;
    
    public void SetDesiredPlayerName(Name playerName)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetDesiredPlayerName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<Name>.ToNative(IntPtr.Add(ParamsBuffer, SetDesiredPlayerName_PlayerName_Offset), 0, null, playerName);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetDesiredPlayerName_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:SetBlockOnTime
    static readonly IntPtr SetBlockOnTime_NativeFunction;
    static readonly int SetBlockOnTime_ParamsSize;
    static readonly int SetBlockOnTime_Time_Offset;
    
    public void SetBlockOnTime(UnrealSharp.CoreUObject.Timespan time)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetBlockOnTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, SetBlockOnTime_Time_Offset), 0, null, time);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetBlockOnTime_NativeFunction, ParamsBuffer);
            
            
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:SelectTrack
    static readonly IntPtr SelectTrack_NativeFunction;
    static readonly int SelectTrack_ParamsSize;
    static readonly int SelectTrack_TrackType_Offset;
    static readonly int SelectTrack_TrackIndex_Offset;
    static readonly int SelectTrack_ReturnValue_Offset;
    
    public bool SelectTrack(UnrealSharp.MediaAssets.EMediaPlayerTrack trackType, int trackIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SelectTrack_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MediaAssets.EMediaPlayerTrack>.ToNative(IntPtr.Add(ParamsBuffer, SelectTrack_TrackType_Offset), 0, null, trackType);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SelectTrack_TrackIndex_Offset), 0, null, trackIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SelectTrack_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, SelectTrack_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:Seek
    static readonly IntPtr Seek_NativeFunction;
    static readonly int Seek_ParamsSize;
    static readonly int Seek_Time_Offset;
    static readonly int Seek_ReturnValue_Offset;
    
    public bool Seek(UnrealSharp.CoreUObject.Timespan time)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Seek_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            UnrealSharp.CoreUObject.TimespanMarshaler.ToNative(IntPtr.Add(ParamsBuffer, Seek_Time_Offset), 0, null, time);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Seek_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Seek_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:Rewind
    static readonly IntPtr Rewind_NativeFunction;
    static readonly int Rewind_ParamsSize;
    static readonly int Rewind_ReturnValue_Offset;
    
    public bool Rewind()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Rewind_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Rewind_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Rewind_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:Reopen
    static readonly IntPtr Reopen_NativeFunction;
    static readonly int Reopen_ParamsSize;
    static readonly int Reopen_ReturnValue_Offset;
    
    public bool Reopen()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Reopen_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Reopen_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Reopen_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:Previous
    static readonly IntPtr Previous_NativeFunction;
    static readonly int Previous_ParamsSize;
    static readonly int Previous_ReturnValue_Offset;
    
    public bool Previous()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Previous_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Previous_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Previous_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:PlayAndSeek
    static readonly IntPtr PlayAndSeek_NativeFunction;
    
    public void PlayAndSeek()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, PlayAndSeek_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:Play
    static readonly IntPtr Play_NativeFunction;
    static readonly int Play_ParamsSize;
    static readonly int Play_ReturnValue_Offset;
    
    public bool Play()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Play_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Play_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Play_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:Pause
    static readonly IntPtr Pause_NativeFunction;
    static readonly int Pause_ParamsSize;
    static readonly int Pause_ReturnValue_Offset;
    
    public bool Pause()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Pause_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Pause_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Pause_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:OpenUrl
    static readonly IntPtr OpenUrl_NativeFunction;
    static readonly int OpenUrl_ParamsSize;
    static readonly int OpenUrl_Url_Offset;
    static readonly int OpenUrl_ReturnValue_Offset;
    
    public bool OpenUrl(string url)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[OpenUrl_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Url_NativePtr = IntPtr.Add(ParamsBuffer,OpenUrl_Url_Offset);
            StringMarshaller.ToNative(Url_NativePtr,0,null,url);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OpenUrl_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, OpenUrl_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(Url_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:OpenSourceWithOptions
    static readonly IntPtr OpenSourceWithOptions_NativeFunction;
    static readonly int OpenSourceWithOptions_ParamsSize;
    static readonly int OpenSourceWithOptions_MediaSource_Offset;
    static readonly int OpenSourceWithOptions_Options_Offset;
    static readonly int OpenSourceWithOptions_ReturnValue_Offset;
    
    public bool OpenSourceWithOptions(UnrealSharp.MediaAssets.MediaSource mediaSource, UnrealSharp.MediaUtils.MediaPlayerOptions options)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[OpenSourceWithOptions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MediaAssets.MediaSource>.ToNative(IntPtr.Add(ParamsBuffer, OpenSourceWithOptions_MediaSource_Offset), 0, null, mediaSource);
            UnrealSharp.MediaUtils.MediaPlayerOptionsMarshaler.ToNative(IntPtr.Add(ParamsBuffer, OpenSourceWithOptions_Options_Offset), 0, null, options);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OpenSourceWithOptions_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, OpenSourceWithOptions_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:OpenSource
    static readonly IntPtr OpenSource_NativeFunction;
    static readonly int OpenSource_ParamsSize;
    static readonly int OpenSource_MediaSource_Offset;
    static readonly int OpenSource_ReturnValue_Offset;
    
    public bool OpenSource(UnrealSharp.MediaAssets.MediaSource mediaSource)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[OpenSource_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MediaAssets.MediaSource>.ToNative(IntPtr.Add(ParamsBuffer, OpenSource_MediaSource_Offset), 0, null, mediaSource);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OpenSource_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, OpenSource_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:OpenPlaylistIndex
    static readonly IntPtr OpenPlaylistIndex_NativeFunction;
    static readonly int OpenPlaylistIndex_ParamsSize;
    static readonly int OpenPlaylistIndex_InPlaylist_Offset;
    static readonly int OpenPlaylistIndex_Index_Offset;
    static readonly int OpenPlaylistIndex_ReturnValue_Offset;
    
    public bool OpenPlaylistIndex(UnrealSharp.MediaAssets.MediaPlaylist inPlaylist, int index)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[OpenPlaylistIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MediaAssets.MediaPlaylist>.ToNative(IntPtr.Add(ParamsBuffer, OpenPlaylistIndex_InPlaylist_Offset), 0, null, inPlaylist);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, OpenPlaylistIndex_Index_Offset), 0, null, index);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OpenPlaylistIndex_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, OpenPlaylistIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:OpenPlaylist
    static readonly IntPtr OpenPlaylist_NativeFunction;
    static readonly int OpenPlaylist_ParamsSize;
    static readonly int OpenPlaylist_InPlaylist_Offset;
    static readonly int OpenPlaylist_ReturnValue_Offset;
    
    public bool OpenPlaylist(UnrealSharp.MediaAssets.MediaPlaylist inPlaylist)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[OpenPlaylist_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MediaAssets.MediaPlaylist>.ToNative(IntPtr.Add(ParamsBuffer, OpenPlaylist_InPlaylist_Offset), 0, null, inPlaylist);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OpenPlaylist_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, OpenPlaylist_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:OpenFile
    static readonly IntPtr OpenFile_NativeFunction;
    static readonly int OpenFile_ParamsSize;
    static readonly int OpenFile_FilePath_Offset;
    static readonly int OpenFile_ReturnValue_Offset;
    
    public bool OpenFile(string filePath)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[OpenFile_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr FilePath_NativePtr = IntPtr.Add(ParamsBuffer,OpenFile_FilePath_Offset);
            StringMarshaller.ToNative(FilePath_NativePtr,0,null,filePath);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, OpenFile_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, OpenFile_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(FilePath_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:Next
    static readonly IntPtr Next_NativeFunction;
    static readonly int Next_ParamsSize;
    static readonly int Next_ReturnValue_Offset;
    
    public bool Next()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[Next_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Next_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, Next_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:IsReady
    static readonly IntPtr IsReady_NativeFunction;
    static readonly int IsReady_ParamsSize;
    static readonly int IsReady_ReturnValue_Offset;
    
    public bool IsReady()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsReady_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsReady_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsReady_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:IsPreparing
    static readonly IntPtr IsPreparing_NativeFunction;
    static readonly int IsPreparing_ParamsSize;
    static readonly int IsPreparing_ReturnValue_Offset;
    
    public bool IsPreparing()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPreparing_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsPreparing_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPreparing_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:IsPlaying
    static readonly IntPtr IsPlaying_NativeFunction;
    static readonly int IsPlaying_ParamsSize;
    static readonly int IsPlaying_ReturnValue_Offset;
    
    public bool IsPlaying()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPlaying_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsPlaying_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPlaying_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:IsPaused
    static readonly IntPtr IsPaused_NativeFunction;
    static readonly int IsPaused_ParamsSize;
    static readonly int IsPaused_ReturnValue_Offset;
    
    public bool IsPaused()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsPaused_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsPaused_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsPaused_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:IsLooping
    static readonly IntPtr IsLooping_NativeFunction;
    static readonly int IsLooping_ParamsSize;
    static readonly int IsLooping_ReturnValue_Offset;
    
    public bool IsLooping()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsLooping_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsLooping_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsLooping_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:IsConnecting
    static readonly IntPtr IsConnecting_NativeFunction;
    static readonly int IsConnecting_ParamsSize;
    static readonly int IsConnecting_ReturnValue_Offset;
    
    public bool IsConnecting()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsConnecting_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsConnecting_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsConnecting_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:IsClosed
    static readonly IntPtr IsClosed_NativeFunction;
    static readonly int IsClosed_ParamsSize;
    static readonly int IsClosed_ReturnValue_Offset;
    
    public bool IsClosed()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsClosed_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsClosed_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsClosed_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:IsBuffering
    static readonly IntPtr IsBuffering_NativeFunction;
    static readonly int IsBuffering_ParamsSize;
    static readonly int IsBuffering_ReturnValue_Offset;
    
    public bool IsBuffering()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[IsBuffering_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, IsBuffering_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, IsBuffering_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:HasError
    static readonly IntPtr HasError_NativeFunction;
    static readonly int HasError_ParamsSize;
    static readonly int HasError_ReturnValue_Offset;
    
    public bool HasError()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[HasError_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, HasError_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, HasError_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetViewRotation
    static readonly IntPtr GetViewRotation_NativeFunction;
    static readonly int GetViewRotation_ParamsSize;
    static readonly int GetViewRotation_ReturnValue_Offset;
    
    public UnrealSharp.Rotator GetViewRotation()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetViewRotation_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetViewRotation_NativeFunction, ParamsBuffer);
            
            UnrealSharp.Rotator returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.Rotator>.FromNative(IntPtr.Add(ParamsBuffer, GetViewRotation_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetVideoTrackType
    static readonly IntPtr GetVideoTrackType_NativeFunction;
    static readonly int GetVideoTrackType_ParamsSize;
    static readonly int GetVideoTrackType_TrackIndex_Offset;
    static readonly int GetVideoTrackType_FormatIndex_Offset;
    static readonly int GetVideoTrackType_ReturnValue_Offset;
    
    public string GetVideoTrackType(int trackIndex, int formatIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVideoTrackType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetVideoTrackType_TrackIndex_Offset), 0, null, trackIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetVideoTrackType_FormatIndex_Offset), 0, null, formatIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVideoTrackType_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetVideoTrackType_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetVideoTrackFrameRates
    static readonly IntPtr GetVideoTrackFrameRates_NativeFunction;
    static readonly int GetVideoTrackFrameRates_ParamsSize;
    static readonly int GetVideoTrackFrameRates_TrackIndex_Offset;
    static readonly int GetVideoTrackFrameRates_FormatIndex_Offset;
    static readonly int GetVideoTrackFrameRates_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.FloatRange GetVideoTrackFrameRates(int trackIndex, int formatIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVideoTrackFrameRates_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetVideoTrackFrameRates_TrackIndex_Offset), 0, null, trackIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetVideoTrackFrameRates_FormatIndex_Offset), 0, null, formatIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVideoTrackFrameRates_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.FloatRange returnValue;
            returnValue = UnrealSharp.CoreUObject.FloatRangeMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetVideoTrackFrameRates_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetVideoTrackFrameRate
    static readonly IntPtr GetVideoTrackFrameRate_NativeFunction;
    static readonly int GetVideoTrackFrameRate_ParamsSize;
    static readonly int GetVideoTrackFrameRate_TrackIndex_Offset;
    static readonly int GetVideoTrackFrameRate_FormatIndex_Offset;
    static readonly int GetVideoTrackFrameRate_ReturnValue_Offset;
    
    public float GetVideoTrackFrameRate(int trackIndex, int formatIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVideoTrackFrameRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetVideoTrackFrameRate_TrackIndex_Offset), 0, null, trackIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetVideoTrackFrameRate_FormatIndex_Offset), 0, null, formatIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVideoTrackFrameRate_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetVideoTrackFrameRate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetVideoTrackDimensions
    static readonly IntPtr GetVideoTrackDimensions_NativeFunction;
    static readonly int GetVideoTrackDimensions_ParamsSize;
    static readonly int GetVideoTrackDimensions_TrackIndex_Offset;
    static readonly int GetVideoTrackDimensions_FormatIndex_Offset;
    static readonly int GetVideoTrackDimensions_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.IntPoint GetVideoTrackDimensions(int trackIndex, int formatIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVideoTrackDimensions_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetVideoTrackDimensions_TrackIndex_Offset), 0, null, trackIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetVideoTrackDimensions_FormatIndex_Offset), 0, null, formatIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVideoTrackDimensions_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.IntPoint returnValue;
            returnValue = BlittableMarshaller<UnrealSharp.CoreUObject.IntPoint>.FromNative(IntPtr.Add(ParamsBuffer, GetVideoTrackDimensions_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetVideoTrackAspectRatio
    static readonly IntPtr GetVideoTrackAspectRatio_NativeFunction;
    static readonly int GetVideoTrackAspectRatio_ParamsSize;
    static readonly int GetVideoTrackAspectRatio_TrackIndex_Offset;
    static readonly int GetVideoTrackAspectRatio_FormatIndex_Offset;
    static readonly int GetVideoTrackAspectRatio_ReturnValue_Offset;
    
    public float GetVideoTrackAspectRatio(int trackIndex, int formatIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVideoTrackAspectRatio_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetVideoTrackAspectRatio_TrackIndex_Offset), 0, null, trackIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetVideoTrackAspectRatio_FormatIndex_Offset), 0, null, formatIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVideoTrackAspectRatio_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetVideoTrackAspectRatio_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetVerticalFieldOfView
    static readonly IntPtr GetVerticalFieldOfView_NativeFunction;
    static readonly int GetVerticalFieldOfView_ParamsSize;
    static readonly int GetVerticalFieldOfView_ReturnValue_Offset;
    
    public float GetVerticalFieldOfView()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetVerticalFieldOfView_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetVerticalFieldOfView_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetVerticalFieldOfView_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetUrl
    static readonly IntPtr GetUrl_NativeFunction;
    static readonly int GetUrl_ParamsSize;
    static readonly int GetUrl_ReturnValue_Offset;
    
    public string GetUrl()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetUrl_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetUrl_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetUrl_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetTrackLanguage
    static readonly IntPtr GetTrackLanguage_NativeFunction;
    static readonly int GetTrackLanguage_ParamsSize;
    static readonly int GetTrackLanguage_TrackType_Offset;
    static readonly int GetTrackLanguage_TrackIndex_Offset;
    static readonly int GetTrackLanguage_ReturnValue_Offset;
    
    public string GetTrackLanguage(UnrealSharp.MediaAssets.EMediaPlayerTrack trackType, int trackIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTrackLanguage_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MediaAssets.EMediaPlayerTrack>.ToNative(IntPtr.Add(ParamsBuffer, GetTrackLanguage_TrackType_Offset), 0, null, trackType);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetTrackLanguage_TrackIndex_Offset), 0, null, trackIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTrackLanguage_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetTrackLanguage_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetTrackFormat
    static readonly IntPtr GetTrackFormat_NativeFunction;
    static readonly int GetTrackFormat_ParamsSize;
    static readonly int GetTrackFormat_TrackType_Offset;
    static readonly int GetTrackFormat_TrackIndex_Offset;
    static readonly int GetTrackFormat_ReturnValue_Offset;
    
    public int GetTrackFormat(UnrealSharp.MediaAssets.EMediaPlayerTrack trackType, int trackIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTrackFormat_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MediaAssets.EMediaPlayerTrack>.ToNative(IntPtr.Add(ParamsBuffer, GetTrackFormat_TrackType_Offset), 0, null, trackType);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetTrackFormat_TrackIndex_Offset), 0, null, trackIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTrackFormat_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetTrackFormat_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetTimeStamp
    static readonly IntPtr GetTimeStamp_NativeFunction;
    static readonly int GetTimeStamp_ParamsSize;
    static readonly int GetTimeStamp_ReturnValue_Offset;
    
    public UnrealSharp.MediaAssets.MediaTimeStampInfo GetTimeStamp()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTimeStamp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTimeStamp_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MediaAssets.MediaTimeStampInfo returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.MediaAssets.MediaTimeStampInfo>.FromNative(IntPtr.Add(ParamsBuffer, GetTimeStamp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetTimeDelay
    static readonly IntPtr GetTimeDelay_NativeFunction;
    static readonly int GetTimeDelay_ParamsSize;
    static readonly int GetTimeDelay_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.Timespan GetTimeDelay()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTimeDelay_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTimeDelay_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Timespan returnValue;
            returnValue = UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetTimeDelay_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetTime
    static readonly IntPtr GetTime_NativeFunction;
    static readonly int GetTime_ParamsSize;
    static readonly int GetTime_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.Timespan GetTime()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTime_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Timespan returnValue;
            returnValue = UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetSupportedRates
    static readonly IntPtr GetSupportedRates_NativeFunction;
    static readonly int GetSupportedRates_ParamsSize;
    static readonly int GetSupportedRates_OutRates_Offset;
    static readonly int GetSupportedRates_OutRates_ElementSize;
    static readonly int GetSupportedRates_Unthinned_Offset;
    
    public void GetSupportedRates(out System.Collections.Generic.IList<UnrealSharp.CoreUObject.FloatRange> outRates, bool unthinned)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSupportedRates_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, GetSupportedRates_Unthinned_Offset), 0, null, unthinned);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSupportedRates_NativeFunction, ParamsBuffer);
            
            IntPtr OutRates_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSupportedRates_OutRates_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FloatRange> OutRates_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FloatRange> (1, UnrealSharp.CoreUObject.FloatRangeMarshaler.ToNative, UnrealSharp.CoreUObject.FloatRangeMarshaler.FromNative, GetSupportedRates_OutRates_ElementSize);
            outRates = OutRates_Marshaler.FromNative(OutRates_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.CoreUObject.FloatRange>.DestructInstance(OutRates_NativeBuffer, 0);
            
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetSelectedTrack
    static readonly IntPtr GetSelectedTrack_NativeFunction;
    static readonly int GetSelectedTrack_ParamsSize;
    static readonly int GetSelectedTrack_TrackType_Offset;
    static readonly int GetSelectedTrack_ReturnValue_Offset;
    
    public int GetSelectedTrack(UnrealSharp.MediaAssets.EMediaPlayerTrack trackType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSelectedTrack_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MediaAssets.EMediaPlayerTrack>.ToNative(IntPtr.Add(ParamsBuffer, GetSelectedTrack_TrackType_Offset), 0, null, trackType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSelectedTrack_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetSelectedTrack_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetRate
    static readonly IntPtr GetRate_NativeFunction;
    static readonly int GetRate_ParamsSize;
    static readonly int GetRate_ReturnValue_Offset;
    
    public float GetRate()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetRate_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetRate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetPlaylistIndex
    static readonly IntPtr GetPlaylistIndex_NativeFunction;
    static readonly int GetPlaylistIndex_ParamsSize;
    static readonly int GetPlaylistIndex_ReturnValue_Offset;
    
    public int GetPlaylistIndex()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlaylistIndex_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPlaylistIndex_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetPlaylistIndex_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetPlaylist
    static readonly IntPtr GetPlaylist_NativeFunction;
    static readonly int GetPlaylist_ParamsSize;
    static readonly int GetPlaylist_ReturnValue_Offset;
    
    public UnrealSharp.MediaAssets.MediaPlaylist GetPlaylist()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlaylist_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPlaylist_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MediaAssets.MediaPlaylist returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.MediaAssets.MediaPlaylist>.FromNative(IntPtr.Add(ParamsBuffer, GetPlaylist_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetPlayerName
    static readonly IntPtr GetPlayerName_NativeFunction;
    static readonly int GetPlayerName_ParamsSize;
    static readonly int GetPlayerName_ReturnValue_Offset;
    
    public Name GetPlayerName()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetPlayerName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetPlayerName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetPlayerName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetNumTracks
    static readonly IntPtr GetNumTracks_NativeFunction;
    static readonly int GetNumTracks_ParamsSize;
    static readonly int GetNumTracks_TrackType_Offset;
    static readonly int GetNumTracks_ReturnValue_Offset;
    
    public int GetNumTracks(UnrealSharp.MediaAssets.EMediaPlayerTrack trackType)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumTracks_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MediaAssets.EMediaPlayerTrack>.ToNative(IntPtr.Add(ParamsBuffer, GetNumTracks_TrackType_Offset), 0, null, trackType);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumTracks_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumTracks_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetNumTrackFormats
    static readonly IntPtr GetNumTrackFormats_NativeFunction;
    static readonly int GetNumTrackFormats_ParamsSize;
    static readonly int GetNumTrackFormats_TrackType_Offset;
    static readonly int GetNumTrackFormats_TrackIndex_Offset;
    static readonly int GetNumTrackFormats_ReturnValue_Offset;
    
    public int GetNumTrackFormats(UnrealSharp.MediaAssets.EMediaPlayerTrack trackType, int trackIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNumTrackFormats_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<UnrealSharp.MediaAssets.EMediaPlayerTrack>.ToNative(IntPtr.Add(ParamsBuffer, GetNumTrackFormats_TrackType_Offset), 0, null, trackType);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetNumTrackFormats_TrackIndex_Offset), 0, null, trackIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNumTrackFormats_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetNumTrackFormats_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetHorizontalFieldOfView
    static readonly IntPtr GetHorizontalFieldOfView_NativeFunction;
    static readonly int GetHorizontalFieldOfView_ParamsSize;
    static readonly int GetHorizontalFieldOfView_ReturnValue_Offset;
    
    public float GetHorizontalFieldOfView()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHorizontalFieldOfView_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetHorizontalFieldOfView_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetHorizontalFieldOfView_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetDuration
    static readonly IntPtr GetDuration_NativeFunction;
    static readonly int GetDuration_ParamsSize;
    static readonly int GetDuration_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.Timespan GetDuration()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDuration_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDuration_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Timespan returnValue;
            returnValue = UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetDuration_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetDisplayTimeStamp
    static readonly IntPtr GetDisplayTimeStamp_NativeFunction;
    static readonly int GetDisplayTimeStamp_ParamsSize;
    static readonly int GetDisplayTimeStamp_ReturnValue_Offset;
    
    public UnrealSharp.MediaAssets.MediaTimeStampInfo GetDisplayTimeStamp()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDisplayTimeStamp_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDisplayTimeStamp_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MediaAssets.MediaTimeStampInfo returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.MediaAssets.MediaTimeStampInfo>.FromNative(IntPtr.Add(ParamsBuffer, GetDisplayTimeStamp_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetDisplayTime
    static readonly IntPtr GetDisplayTime_NativeFunction;
    static readonly int GetDisplayTime_ParamsSize;
    static readonly int GetDisplayTime_ReturnValue_Offset;
    
    public UnrealSharp.CoreUObject.Timespan GetDisplayTime()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDisplayTime_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDisplayTime_NativeFunction, ParamsBuffer);
            
            UnrealSharp.CoreUObject.Timespan returnValue;
            returnValue = UnrealSharp.CoreUObject.TimespanMarshaler.FromNative(IntPtr.Add(ParamsBuffer, GetDisplayTime_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetDesiredPlayerName
    static readonly IntPtr GetDesiredPlayerName_NativeFunction;
    static readonly int GetDesiredPlayerName_ParamsSize;
    static readonly int GetDesiredPlayerName_ReturnValue_Offset;
    
    public Name GetDesiredPlayerName()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetDesiredPlayerName_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetDesiredPlayerName_NativeFunction, ParamsBuffer);
            
            Name returnValue;
            returnValue = BlittableMarshaller<Name>.FromNative(IntPtr.Add(ParamsBuffer, GetDesiredPlayerName_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetAudioTrackType
    static readonly IntPtr GetAudioTrackType_NativeFunction;
    static readonly int GetAudioTrackType_ParamsSize;
    static readonly int GetAudioTrackType_TrackIndex_Offset;
    static readonly int GetAudioTrackType_FormatIndex_Offset;
    static readonly int GetAudioTrackType_ReturnValue_Offset;
    
    public string GetAudioTrackType(int trackIndex, int formatIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAudioTrackType_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetAudioTrackType_TrackIndex_Offset), 0, null, trackIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetAudioTrackType_FormatIndex_Offset), 0, null, formatIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAudioTrackType_NativeFunction, ParamsBuffer);
            
            string returnValue;
            IntPtr ReturnValue_NativePtr = IntPtr.Add(ParamsBuffer,GetAudioTrackType_ReturnValue_Offset);
            returnValue = StringMarshaller.FromNative(ReturnValue_NativePtr,0,null);
            StringMarshaller.DestructInstance(ReturnValue_NativePtr, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetAudioTrackSampleRate
    static readonly IntPtr GetAudioTrackSampleRate_NativeFunction;
    static readonly int GetAudioTrackSampleRate_ParamsSize;
    static readonly int GetAudioTrackSampleRate_TrackIndex_Offset;
    static readonly int GetAudioTrackSampleRate_FormatIndex_Offset;
    static readonly int GetAudioTrackSampleRate_ReturnValue_Offset;
    
    public int GetAudioTrackSampleRate(int trackIndex, int formatIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAudioTrackSampleRate_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetAudioTrackSampleRate_TrackIndex_Offset), 0, null, trackIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetAudioTrackSampleRate_FormatIndex_Offset), 0, null, formatIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAudioTrackSampleRate_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetAudioTrackSampleRate_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:GetAudioTrackChannels
    static readonly IntPtr GetAudioTrackChannels_NativeFunction;
    static readonly int GetAudioTrackChannels_ParamsSize;
    static readonly int GetAudioTrackChannels_TrackIndex_Offset;
    static readonly int GetAudioTrackChannels_FormatIndex_Offset;
    static readonly int GetAudioTrackChannels_ReturnValue_Offset;
    
    public int GetAudioTrackChannels(int trackIndex, int formatIndex)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAudioTrackChannels_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetAudioTrackChannels_TrackIndex_Offset), 0, null, trackIndex);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, GetAudioTrackChannels_FormatIndex_Offset), 0, null, formatIndex);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAudioTrackChannels_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetAudioTrackChannels_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:Close
    static readonly IntPtr Close_NativeFunction;
    
    public void Close()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, Close_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:CanPlayUrl
    static readonly IntPtr CanPlayUrl_NativeFunction;
    static readonly int CanPlayUrl_ParamsSize;
    static readonly int CanPlayUrl_Url_Offset;
    static readonly int CanPlayUrl_ReturnValue_Offset;
    
    public bool CanPlayUrl(string url)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CanPlayUrl_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr Url_NativePtr = IntPtr.Add(ParamsBuffer,CanPlayUrl_Url_Offset);
            StringMarshaller.ToNative(Url_NativePtr,0,null,url);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CanPlayUrl_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CanPlayUrl_ReturnValue_Offset), 0, null);
            
            StringMarshaller.DestructInstance(Url_NativePtr, 0);
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:CanPlaySource
    static readonly IntPtr CanPlaySource_NativeFunction;
    static readonly int CanPlaySource_ParamsSize;
    static readonly int CanPlaySource_MediaSource_Offset;
    static readonly int CanPlaySource_ReturnValue_Offset;
    
    public bool CanPlaySource(UnrealSharp.MediaAssets.MediaSource mediaSource)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CanPlaySource_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MediaAssets.MediaSource>.ToNative(IntPtr.Add(ParamsBuffer, CanPlaySource_MediaSource_Offset), 0, null, mediaSource);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CanPlaySource_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CanPlaySource_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaPlayer:CanPause
    static readonly IntPtr CanPause_NativeFunction;
    static readonly int CanPause_ParamsSize;
    static readonly int CanPause_ReturnValue_Offset;
    
    public bool CanPause()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[CanPause_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, CanPause_NativeFunction, ParamsBuffer);
            
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, CanPause_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
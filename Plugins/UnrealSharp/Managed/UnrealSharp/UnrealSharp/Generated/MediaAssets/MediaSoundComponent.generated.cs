// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.MediaAssets;

[UClass]
public partial class MediaSoundComponent : UnrealSharp.AudioMixer.SynthComponent
{
    
    static MediaSoundComponent()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MediaSoundComponent");
        
        
        SetSpectralAnalysisSettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetSpectralAnalysisSettings");
        SetSpectralAnalysisSettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetSpectralAnalysisSettings_NativeFunction);
        SetSpectralAnalysisSettings_InFrequenciesToAnalyze_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSpectralAnalysisSettings_NativeFunction, "InFrequenciesToAnalyze");
        SetSpectralAnalysisSettings_InFrequenciesToAnalyze_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(SetSpectralAnalysisSettings_NativeFunction, "InFrequenciesToAnalyze");
        SetSpectralAnalysisSettings_InFFTSize_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetSpectralAnalysisSettings_NativeFunction, "InFFTSize");
        SetMediaPlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMediaPlayer");
        SetMediaPlayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMediaPlayer_NativeFunction);
        SetMediaPlayer_NewMediaPlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMediaPlayer_NativeFunction, "NewMediaPlayer");
        SetEnvelopeFollowingsettings_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetEnvelopeFollowingsettings");
        SetEnvelopeFollowingsettings_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetEnvelopeFollowingsettings_NativeFunction);
        SetEnvelopeFollowingsettings_AttackTimeMsec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEnvelopeFollowingsettings_NativeFunction, "AttackTimeMsec");
        SetEnvelopeFollowingsettings_ReleaseTimeMsec_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEnvelopeFollowingsettings_NativeFunction, "ReleaseTimeMsec");
        SetEnableSpectralAnalysis_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetEnableSpectralAnalysis");
        SetEnableSpectralAnalysis_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetEnableSpectralAnalysis_NativeFunction);
        SetEnableSpectralAnalysis_bInSpectralAnalysisEnabled_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEnableSpectralAnalysis_NativeFunction, "bInSpectralAnalysisEnabled");
        SetEnableEnvelopeFollowing_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetEnableEnvelopeFollowing");
        SetEnableEnvelopeFollowing_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetEnableEnvelopeFollowing_NativeFunction);
        SetEnableEnvelopeFollowing_bInEnvelopeFollowing_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetEnableEnvelopeFollowing_NativeFunction, "bInEnvelopeFollowing");
        GetSpectralData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetSpectralData");
        GetSpectralData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetSpectralData_NativeFunction);
        GetSpectralData_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetSpectralData_NativeFunction, "ReturnValue");
        GetSpectralData_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetSpectralData_NativeFunction, "ReturnValue");
        GetNormalizedSpectralData_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetNormalizedSpectralData");
        GetNormalizedSpectralData_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetNormalizedSpectralData_NativeFunction);
        GetNormalizedSpectralData_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetNormalizedSpectralData_NativeFunction, "ReturnValue");
        GetNormalizedSpectralData_ReturnValue_ElementSize = FArrayPropertyExporter.CallGetArrayElementSize(GetNormalizedSpectralData_NativeFunction, "ReturnValue");
        GetMediaPlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMediaPlayer");
        GetMediaPlayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMediaPlayer_NativeFunction);
        GetMediaPlayer_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMediaPlayer_NativeFunction, "ReturnValue");
        GetEnvelopeValue_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetEnvelopeValue");
        GetEnvelopeValue_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetEnvelopeValue_NativeFunction);
        GetEnvelopeValue_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetEnvelopeValue_NativeFunction, "ReturnValue");
        BP_GetAttenuationSettingsToApply_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "BP_GetAttenuationSettingsToApply");
        BP_GetAttenuationSettingsToApply_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(BP_GetAttenuationSettingsToApply_NativeFunction);
        BP_GetAttenuationSettingsToApply_OutAttenuationSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BP_GetAttenuationSettingsToApply_NativeFunction, "OutAttenuationSettings");
        BP_GetAttenuationSettingsToApply_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(BP_GetAttenuationSettingsToApply_NativeFunction, "ReturnValue");
        
        
    }
    
    protected MediaSoundComponent(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // Function /Script/MediaAssets.MediaSoundComponent:SetSpectralAnalysisSettings
    static readonly IntPtr SetSpectralAnalysisSettings_NativeFunction;
    static readonly int SetSpectralAnalysisSettings_ParamsSize;
    static readonly int SetSpectralAnalysisSettings_InFrequenciesToAnalyze_Offset;
    static readonly int SetSpectralAnalysisSettings_InFrequenciesToAnalyze_ElementSize;
    static readonly int SetSpectralAnalysisSettings_InFFTSize_Offset;
    
    public void SetSpectralAnalysisSettings(System.Collections.Generic.IList<float> inFrequenciesToAnalyze, UnrealSharp.MediaAssets.EMediaSoundComponentFFTSize inFFTSize = UnrealSharp.MediaAssets.EMediaSoundComponentFFTSize.Medium_512)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetSpectralAnalysisSettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            IntPtr InFrequenciesToAnalyze_NativeBuffer = IntPtr.Add(ParamsBuffer, SetSpectralAnalysisSettings_InFrequenciesToAnalyze_Offset);
            UnrealArrayCopyMarshaler<float> InFrequenciesToAnalyze_Marshaler = new UnrealArrayCopyMarshaler<float>(1, BlittableMarshaller<float>.ToNative, BlittableMarshaller<float>.FromNative, SetSpectralAnalysisSettings_InFrequenciesToAnalyze_ElementSize);
            InFrequenciesToAnalyze_Marshaler.ToNative(InFrequenciesToAnalyze_NativeBuffer, 0, null, inFrequenciesToAnalyze);
            BlittableMarshaller<UnrealSharp.MediaAssets.EMediaSoundComponentFFTSize>.ToNative(IntPtr.Add(ParamsBuffer, SetSpectralAnalysisSettings_InFFTSize_Offset), 0, null, inFFTSize);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetSpectralAnalysisSettings_NativeFunction, ParamsBuffer);
            
            UnrealArrayCopyMarshaler<float>.DestructInstance(InFrequenciesToAnalyze_NativeBuffer, 0);
        }
    }
    
    // Function /Script/MediaAssets.MediaSoundComponent:SetMediaPlayer
    static readonly IntPtr SetMediaPlayer_NativeFunction;
    static readonly int SetMediaPlayer_ParamsSize;
    static readonly int SetMediaPlayer_NewMediaPlayer_Offset;
    
    public void SetMediaPlayer(UnrealSharp.MediaAssets.MediaPlayer newMediaPlayer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMediaPlayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MediaAssets.MediaPlayer>.ToNative(IntPtr.Add(ParamsBuffer, SetMediaPlayer_NewMediaPlayer_Offset), 0, null, newMediaPlayer);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMediaPlayer_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MediaAssets.MediaSoundComponent:SetEnvelopeFollowingsettings
    static readonly IntPtr SetEnvelopeFollowingsettings_NativeFunction;
    static readonly int SetEnvelopeFollowingsettings_ParamsSize;
    static readonly int SetEnvelopeFollowingsettings_AttackTimeMsec_Offset;
    static readonly int SetEnvelopeFollowingsettings_ReleaseTimeMsec_Offset;
    
    public void SetEnvelopeFollowingsettings(int attackTimeMsec, int releaseTimeMsec)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetEnvelopeFollowingsettings_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetEnvelopeFollowingsettings_AttackTimeMsec_Offset), 0, null, attackTimeMsec);
            BlittableMarshaller<int>.ToNative(IntPtr.Add(ParamsBuffer, SetEnvelopeFollowingsettings_ReleaseTimeMsec_Offset), 0, null, releaseTimeMsec);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetEnvelopeFollowingsettings_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MediaAssets.MediaSoundComponent:SetEnableSpectralAnalysis
    static readonly IntPtr SetEnableSpectralAnalysis_NativeFunction;
    static readonly int SetEnableSpectralAnalysis_ParamsSize;
    static readonly int SetEnableSpectralAnalysis_bInSpectralAnalysisEnabled_Offset;
    
    public void SetEnableSpectralAnalysis(bool bInSpectralAnalysisEnabled)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetEnableSpectralAnalysis_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetEnableSpectralAnalysis_bInSpectralAnalysisEnabled_Offset), 0, null, bInSpectralAnalysisEnabled);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetEnableSpectralAnalysis_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MediaAssets.MediaSoundComponent:SetEnableEnvelopeFollowing
    static readonly IntPtr SetEnableEnvelopeFollowing_NativeFunction;
    static readonly int SetEnableEnvelopeFollowing_ParamsSize;
    static readonly int SetEnableEnvelopeFollowing_bInEnvelopeFollowing_Offset;
    
    public void SetEnableEnvelopeFollowing(bool bInEnvelopeFollowing)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetEnableEnvelopeFollowing_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            BoolMarshaller.ToNative(IntPtr.Add(ParamsBuffer, SetEnableEnvelopeFollowing_bInEnvelopeFollowing_Offset), 0, null, bInEnvelopeFollowing);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetEnableEnvelopeFollowing_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MediaAssets.MediaSoundComponent:GetSpectralData
    static readonly IntPtr GetSpectralData_NativeFunction;
    static readonly int GetSpectralData_ParamsSize;
    static readonly int GetSpectralData_ReturnValue_Offset;
    static readonly int GetSpectralData_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.MediaAssets.MediaSoundComponentSpectralData> GetSpectralData()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetSpectralData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetSpectralData_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MediaAssets.MediaSoundComponentSpectralData> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetSpectralData_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MediaAssets.MediaSoundComponentSpectralData> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MediaAssets.MediaSoundComponentSpectralData> (1, BlittableMarshaller<UnrealSharp.MediaAssets.MediaSoundComponentSpectralData>.ToNative, BlittableMarshaller<UnrealSharp.MediaAssets.MediaSoundComponentSpectralData>.FromNative, GetSpectralData_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MediaAssets.MediaSoundComponentSpectralData>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaSoundComponent:GetNormalizedSpectralData
    static readonly IntPtr GetNormalizedSpectralData_NativeFunction;
    static readonly int GetNormalizedSpectralData_ParamsSize;
    static readonly int GetNormalizedSpectralData_ReturnValue_Offset;
    static readonly int GetNormalizedSpectralData_ReturnValue_ElementSize;
    
    public System.Collections.Generic.IList<UnrealSharp.MediaAssets.MediaSoundComponentSpectralData> GetNormalizedSpectralData()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetNormalizedSpectralData_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetNormalizedSpectralData_NativeFunction, ParamsBuffer);
            
            System.Collections.Generic.IList<UnrealSharp.MediaAssets.MediaSoundComponentSpectralData> returnValue;
            IntPtr ReturnValue_NativeBuffer = IntPtr.Add(ParamsBuffer, GetNormalizedSpectralData_ReturnValue_Offset);
            UnrealArrayCopyMarshaler<UnrealSharp.MediaAssets.MediaSoundComponentSpectralData> ReturnValue_Marshaler = new UnrealArrayCopyMarshaler<UnrealSharp.MediaAssets.MediaSoundComponentSpectralData> (1, BlittableMarshaller<UnrealSharp.MediaAssets.MediaSoundComponentSpectralData>.ToNative, BlittableMarshaller<UnrealSharp.MediaAssets.MediaSoundComponentSpectralData>.FromNative, GetNormalizedSpectralData_ReturnValue_ElementSize);
            returnValue = ReturnValue_Marshaler.FromNative(ReturnValue_NativeBuffer, 0, null);
            UnrealArrayCopyMarshaler<UnrealSharp.MediaAssets.MediaSoundComponentSpectralData>.DestructInstance(ReturnValue_NativeBuffer, 0);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaSoundComponent:GetMediaPlayer
    static readonly IntPtr GetMediaPlayer_NativeFunction;
    static readonly int GetMediaPlayer_ParamsSize;
    static readonly int GetMediaPlayer_ReturnValue_Offset;
    
    public UnrealSharp.MediaAssets.MediaPlayer GetMediaPlayer()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMediaPlayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMediaPlayer_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MediaAssets.MediaPlayer returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.MediaAssets.MediaPlayer>.FromNative(IntPtr.Add(ParamsBuffer, GetMediaPlayer_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaSoundComponent:GetEnvelopeValue
    static readonly IntPtr GetEnvelopeValue_NativeFunction;
    static readonly int GetEnvelopeValue_ParamsSize;
    static readonly int GetEnvelopeValue_ReturnValue_Offset;
    
    public float GetEnvelopeValue()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetEnvelopeValue_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetEnvelopeValue_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetEnvelopeValue_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaSoundComponent:BP_GetAttenuationSettingsToApply
    static readonly IntPtr BP_GetAttenuationSettingsToApply_NativeFunction;
    static readonly int BP_GetAttenuationSettingsToApply_ParamsSize;
    static readonly int BP_GetAttenuationSettingsToApply_OutAttenuationSettings_Offset;
    static readonly int BP_GetAttenuationSettingsToApply_ReturnValue_Offset;
    
    public bool GetAttenuationSettingsToApply(out UnrealSharp.Engine.SoundAttenuationSettings outAttenuationSettings)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[BP_GetAttenuationSettingsToApply_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, BP_GetAttenuationSettingsToApply_NativeFunction, ParamsBuffer);
            
            outAttenuationSettings = UnrealSharp.Engine.SoundAttenuationSettingsMarshaler.FromNative(IntPtr.Add(ParamsBuffer, BP_GetAttenuationSettingsToApply_OutAttenuationSettings_Offset), 0, null);
            bool returnValue;
            returnValue = BoolMarshaller.FromNative(IntPtr.Add(ParamsBuffer, BP_GetAttenuationSettingsToApply_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.MediaAssets;

[UClass]
public partial class MediaTexture : UnrealSharp.Engine.Texture
{
    
    static MediaTexture()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MediaTexture");
        
        AddressX_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AddressX");
        AddressY_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AddressY");
        AutoClear_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "AutoClear");
        ClearColor_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ClearColor");
        EnableGenMips_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "EnableGenMips");
        NumMips_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NumMips");
        NewStyleOutput_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "NewStyleOutput");
        OutputFormat_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "OutputFormat");
        CurrentAspectRatio_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CurrentAspectRatio");
        CurrentOrientation_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CurrentOrientation");
        
        UpdateResource_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "UpdateResource");
        SetMediaPlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "SetMediaPlayer");
        SetMediaPlayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(SetMediaPlayer_NativeFunction);
        SetMediaPlayer_NewMediaPlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(SetMediaPlayer_NativeFunction, "NewMediaPlayer");
        GetWidth_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetWidth");
        GetWidth_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetWidth_NativeFunction);
        GetWidth_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetWidth_NativeFunction, "ReturnValue");
        GetTextureNumMips_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetTextureNumMips");
        GetTextureNumMips_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetTextureNumMips_NativeFunction);
        GetTextureNumMips_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetTextureNumMips_NativeFunction, "ReturnValue");
        GetMediaPlayer_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetMediaPlayer");
        GetMediaPlayer_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetMediaPlayer_NativeFunction);
        GetMediaPlayer_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetMediaPlayer_NativeFunction, "ReturnValue");
        GetHeight_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetHeight");
        GetHeight_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetHeight_NativeFunction);
        GetHeight_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetHeight_NativeFunction, "ReturnValue");
        GetAspectRatio_NativeFunction = UClassExporter.CallGetNativeFunctionFromClassAndName(NativeClassPtr, "GetAspectRatio");
        GetAspectRatio_ParamsSize = UFunctionExporter.CallGetNativeFunctionParamsSize(GetAspectRatio_NativeFunction);
        GetAspectRatio_ReturnValue_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(GetAspectRatio_NativeFunction, "ReturnValue");
        
        
    }
    
    protected MediaTexture(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ByteProperty /Script/MediaAssets.MediaTexture:AddressX
    static readonly int AddressX_Offset;
    
    public UnrealSharp.Engine.TextureAddress AddressX
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.TextureAddress>.FromNative(IntPtr.Add(NativeObject, AddressX_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.TextureAddress>.ToNative(IntPtr.Add(NativeObject, AddressX_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/MediaAssets.MediaTexture:AddressY
    static readonly int AddressY_Offset;
    
    public UnrealSharp.Engine.TextureAddress AddressY
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.Engine.TextureAddress>.FromNative(IntPtr.Add(NativeObject, AddressY_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.Engine.TextureAddress>.ToNative(IntPtr.Add(NativeObject, AddressY_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/MediaAssets.MediaTexture:AutoClear
    static readonly int AutoClear_Offset;
    
    public bool AutoClear
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, AutoClear_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, AutoClear_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/MediaAssets.MediaTexture:ClearColor
    static readonly int ClearColor_Offset;
    
    public UnrealSharp.CoreUObject.LinearColor ClearColor
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.FromNative(IntPtr.Add(NativeObject, ClearColor_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.LinearColor>.ToNative(IntPtr.Add(NativeObject, ClearColor_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/MediaAssets.MediaTexture:EnableGenMips
    static readonly int EnableGenMips_Offset;
    
    public bool EnableGenMips
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, EnableGenMips_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/MediaAssets.MediaTexture:NumMips
    static readonly int NumMips_Offset;
    
    public byte NumMips
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<byte>.FromNative(IntPtr.Add(NativeObject, NumMips_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<byte>.ToNative(IntPtr.Add(NativeObject, NumMips_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/MediaAssets.MediaTexture:NewStyleOutput
    static readonly int NewStyleOutput_Offset;
    
    public bool NewStyleOutput
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, NewStyleOutput_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, NewStyleOutput_Offset), 0, this, value);
        }
    }
    
    // ByteProperty /Script/MediaAssets.MediaTexture:OutputFormat
    static readonly int OutputFormat_Offset;
    
    public UnrealSharp.MediaAssets.MediaTextureOutputFormat OutputFormat
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.MediaAssets.MediaTextureOutputFormat>.FromNative(IntPtr.Add(NativeObject, OutputFormat_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.MediaAssets.MediaTextureOutputFormat>.ToNative(IntPtr.Add(NativeObject, OutputFormat_Offset), 0, this, value);
        }
    }
    
    // FloatProperty /Script/MediaAssets.MediaTexture:CurrentAspectRatio
    static readonly int CurrentAspectRatio_Offset;
    
    public float CurrentAspectRatio
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<float>.FromNative(IntPtr.Add(NativeObject, CurrentAspectRatio_Offset), 0, this);
        }
    }
    
    // ByteProperty /Script/MediaAssets.MediaTexture:CurrentOrientation
    static readonly int CurrentOrientation_Offset;
    
    public UnrealSharp.MediaAssets.MediaTextureOrientation CurrentOrientation
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.MediaAssets.MediaTextureOrientation>.FromNative(IntPtr.Add(NativeObject, CurrentOrientation_Offset), 0, this);
        }
    }
    
    // Function /Script/MediaAssets.MediaTexture:UpdateResource
    static readonly IntPtr UpdateResource_NativeFunction;
    
    public void UpdateResource()
    {
        unsafe
        {
            UObjectExporter.CallInvokeNativeFunction(NativeObject, UpdateResource_NativeFunction, IntPtr.Zero);
        }
    }
    
    // Function /Script/MediaAssets.MediaTexture:SetMediaPlayer
    static readonly IntPtr SetMediaPlayer_NativeFunction;
    static readonly int SetMediaPlayer_ParamsSize;
    static readonly int SetMediaPlayer_NewMediaPlayer_Offset;
    
    public void SetMediaPlayer(UnrealSharp.MediaAssets.MediaPlayer newMediaPlayer)
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[SetMediaPlayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            ObjectMarshaller<UnrealSharp.MediaAssets.MediaPlayer>.ToNative(IntPtr.Add(ParamsBuffer, SetMediaPlayer_NewMediaPlayer_Offset), 0, null, newMediaPlayer);
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, SetMediaPlayer_NativeFunction, ParamsBuffer);
            
        }
    }
    
    // Function /Script/MediaAssets.MediaTexture:GetWidth
    static readonly IntPtr GetWidth_NativeFunction;
    static readonly int GetWidth_ParamsSize;
    static readonly int GetWidth_ReturnValue_Offset;
    
    public int GetWidth()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetWidth_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetWidth_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetWidth_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaTexture:GetTextureNumMips
    static readonly IntPtr GetTextureNumMips_NativeFunction;
    static readonly int GetTextureNumMips_ParamsSize;
    static readonly int GetTextureNumMips_ReturnValue_Offset;
    
    public int GetTextureNumMips()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetTextureNumMips_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetTextureNumMips_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetTextureNumMips_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaTexture:GetMediaPlayer
    static readonly IntPtr GetMediaPlayer_NativeFunction;
    static readonly int GetMediaPlayer_ParamsSize;
    static readonly int GetMediaPlayer_ReturnValue_Offset;
    
    public UnrealSharp.MediaAssets.MediaPlayer GetMediaPlayer()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetMediaPlayer_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetMediaPlayer_NativeFunction, ParamsBuffer);
            
            UnrealSharp.MediaAssets.MediaPlayer returnValue;
            returnValue = ObjectMarshaller<UnrealSharp.MediaAssets.MediaPlayer>.FromNative(IntPtr.Add(ParamsBuffer, GetMediaPlayer_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaTexture:GetHeight
    static readonly IntPtr GetHeight_NativeFunction;
    static readonly int GetHeight_ParamsSize;
    static readonly int GetHeight_ReturnValue_Offset;
    
    public int GetHeight()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetHeight_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetHeight_NativeFunction, ParamsBuffer);
            
            int returnValue;
            returnValue = BlittableMarshaller<int>.FromNative(IntPtr.Add(ParamsBuffer, GetHeight_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    // Function /Script/MediaAssets.MediaTexture:GetAspectRatio
    static readonly IntPtr GetAspectRatio_NativeFunction;
    static readonly int GetAspectRatio_ParamsSize;
    static readonly int GetAspectRatio_ReturnValue_Offset;
    
    public float GetAspectRatio()
    {
        unsafe
        {
            byte* ParamsBufferAllocation = stackalloc byte[GetAspectRatio_ParamsSize];
            nint ParamsBuffer = (IntPtr) ParamsBufferAllocation;
            
            UObjectExporter.CallInvokeNativeFunction(NativeObject, GetAspectRatio_NativeFunction, ParamsBuffer);
            
            float returnValue;
            returnValue = BlittableMarshaller<float>.FromNative(IntPtr.Add(ParamsBuffer, GetAspectRatio_ReturnValue_Offset), 0, null);
            
            return returnValue;
        }
    }
    
    
}
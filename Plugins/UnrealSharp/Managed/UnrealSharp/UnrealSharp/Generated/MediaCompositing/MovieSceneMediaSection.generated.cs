// This file is automatically generated
using UnrealSharp.Engine;
using UnrealSharp.Attributes;
using UnrealSharp.Interop;
using System.DoubleNumerics;
using System.Runtime;
using System.Runtime.InteropServices;

namespace UnrealSharp.MediaCompositing;

[UClass]
public partial class MovieSceneMediaSection : UnrealSharp.MovieScene.MovieSceneSection
{
    
    static MovieSceneMediaSection()
    {
        IntPtr NativeClassPtr = UCoreUObjectExporter.CallGetNativeClassFromName("MovieSceneMediaSection");
        
        MediaSource_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MediaSource");
        MediaSourceProxyIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MediaSourceProxyIndex");
        bLooping_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bLooping");
        StartFrameOffset_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "StartFrameOffset");
        MediaTexture_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MediaTexture");
        MediaSoundComponent_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "MediaSoundComponent");
        bUseExternalMediaPlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "bUseExternalMediaPlayer");
        ExternalMediaPlayer_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "ExternalMediaPlayer");
        CacheSettings_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "CacheSettings");
        TextureIndex_Offset = FPropertyExporter.CallGetPropertyOffsetFromName(NativeClassPtr, "TextureIndex");
        
        
        
    }
    
    protected MovieSceneMediaSection(IntPtr nativeObject) : base(nativeObject)
    {
    }
    // ObjectProperty /Script/MediaCompositing.MovieSceneMediaSection:MediaSource
    static readonly int MediaSource_Offset;
    
    public UnrealSharp.MediaAssets.MediaSource MediaSource
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.MediaAssets.MediaSource>.FromNative(IntPtr.Add(NativeObject, MediaSource_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.MediaAssets.MediaSource>.ToNative(IntPtr.Add(NativeObject, MediaSource_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/MediaCompositing.MovieSceneMediaSection:MediaSourceProxyIndex
    static readonly int MediaSourceProxyIndex_Offset;
    
    public int MediaSourceProxyIndex
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, MediaSourceProxyIndex_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, MediaSourceProxyIndex_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/MediaCompositing.MovieSceneMediaSection:bLooping
    static readonly int bLooping_Offset;
    
    public bool bLooping
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bLooping_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bLooping_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/MediaCompositing.MovieSceneMediaSection:StartFrameOffset
    static readonly int StartFrameOffset_Offset;
    
    public UnrealSharp.CoreUObject.FrameNumber StartFrameOffset
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.FromNative(IntPtr.Add(NativeObject, StartFrameOffset_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<UnrealSharp.CoreUObject.FrameNumber>.ToNative(IntPtr.Add(NativeObject, StartFrameOffset_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/MediaCompositing.MovieSceneMediaSection:MediaTexture
    static readonly int MediaTexture_Offset;
    
    public UnrealSharp.MediaAssets.MediaTexture MediaTexture
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.MediaAssets.MediaTexture>.FromNative(IntPtr.Add(NativeObject, MediaTexture_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.MediaAssets.MediaTexture>.ToNative(IntPtr.Add(NativeObject, MediaTexture_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/MediaCompositing.MovieSceneMediaSection:MediaSoundComponent
    static readonly int MediaSoundComponent_Offset;
    
    public UnrealSharp.MediaAssets.MediaSoundComponent MediaSoundComponent
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.MediaAssets.MediaSoundComponent>.FromNative(IntPtr.Add(NativeObject, MediaSoundComponent_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.MediaAssets.MediaSoundComponent>.ToNative(IntPtr.Add(NativeObject, MediaSoundComponent_Offset), 0, this, value);
        }
    }
    
    // BoolProperty /Script/MediaCompositing.MovieSceneMediaSection:bUseExternalMediaPlayer
    static readonly int bUseExternalMediaPlayer_Offset;
    
    public bool bUseExternalMediaPlayer
    {
        get
        {
            CheckObjectForValidity();
            return BoolMarshaller.FromNative(IntPtr.Add(NativeObject, bUseExternalMediaPlayer_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BoolMarshaller.ToNative(IntPtr.Add(NativeObject, bUseExternalMediaPlayer_Offset), 0, this, value);
        }
    }
    
    // ObjectProperty /Script/MediaCompositing.MovieSceneMediaSection:ExternalMediaPlayer
    static readonly int ExternalMediaPlayer_Offset;
    
    public UnrealSharp.MediaAssets.MediaPlayer ExternalMediaPlayer
    {
        get
        {
            CheckObjectForValidity();
            return ObjectMarshaller<UnrealSharp.MediaAssets.MediaPlayer>.FromNative(IntPtr.Add(NativeObject, ExternalMediaPlayer_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            ObjectMarshaller<UnrealSharp.MediaAssets.MediaPlayer>.ToNative(IntPtr.Add(NativeObject, ExternalMediaPlayer_Offset), 0, this, value);
        }
    }
    
    // StructProperty /Script/MediaCompositing.MovieSceneMediaSection:CacheSettings
    static readonly int CacheSettings_Offset;
    
    public UnrealSharp.MediaAssets.MediaSourceCacheSettings CacheSettings
    {
        get
        {
            CheckObjectForValidity();
            return UnrealSharp.MediaAssets.MediaSourceCacheSettingsMarshaler.FromNative(IntPtr.Add(NativeObject, CacheSettings_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            UnrealSharp.MediaAssets.MediaSourceCacheSettingsMarshaler.ToNative(IntPtr.Add(NativeObject, CacheSettings_Offset), 0, this, value);
        }
    }
    
    // IntProperty /Script/MediaCompositing.MovieSceneMediaSection:TextureIndex
    static readonly int TextureIndex_Offset;
    
    public int TextureIndex
    {
        get
        {
            CheckObjectForValidity();
            return BlittableMarshaller<int>.FromNative(IntPtr.Add(NativeObject, TextureIndex_Offset), 0, this);
        }
        set
        {
            CheckObjectForValidity();
            BlittableMarshaller<int>.ToNative(IntPtr.Add(NativeObject, TextureIndex_Offset), 0, this, value);
        }
    }
    
    
}